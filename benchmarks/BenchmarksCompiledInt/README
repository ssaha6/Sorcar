# Invariant Generation Benchmarks

This repository contains CUDA and OpenCL kernels that are suitable for analysis with GPUVerify.

## Sources

   * CUDA 5.0
   * CUDA 2.0
   * AMD SDK
   * C++ AMP
   * Polybench (generated by PPCG)
   * Rodinia
   * SHOC
   * Parboil

## Changes for GPUVerify

### General method

For each source file we split it into a number of individual kernel files (`.cu` or `.cl`).
This ensures there is one kernel-per-file.
This is a requirement for GPUVerify.

We may introduce a `common.h` for shared device functions and type definitions.

Each kernel file has a comment header for our test-framework.
These are comments that give the expected output from GPUVerify and the kernel invocation parameters:
  `blockDim` and `gridDim` for CUDA kernels; and
  `local_size and `num_groups` for OpenCL kernels.
These parameters are found by analysing the host-side code.

At the start of the kernel we insert a macro `FORCE_FAIL` that should ensure that verification will fail (`__ensures(false)`).
Defining this macro checks for vacuous verification due to inconsistent assumptions.

At the start of the kernel we insert integer constraints on the formal parameters of the kernel.
For example, `__requires(x == 1024 /* blockDim.x */);`.
These parameters are found by analysing the host-side code.

We report bugs in the kernels to the appropriate developers and fix them locally.
The bug is kept with the hash-define `KERNEL_BUG`.
Defining this macro means that the bug will *not* be fixed.

We may make minor changes to the kernel to allow it to be analysed by GPUVerify.
We do not try to change the meaning of the program but rewrite around GPUVerify frontend issues.
We mark these changes with the comment `imperial edit` or `IMPERIAL EDIT`.

### Removed kernels

We remove any kernels that are duplicates.

We remove any kernels that vacuously verify race-freedom if they are invoked with a single-thread.

We rename any kernels that use features that are not supported by GPUVerify.
In this case we prefix the kernel name with underscore `_` so we can revisit these kernels.
