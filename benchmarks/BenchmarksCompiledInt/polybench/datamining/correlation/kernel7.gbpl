type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP64(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "corr"} {:global} $$corr : [int]int;
axiom {:array_info "$$corr"} {:global} {:elem_width 64} {:source_name "corr"} {:source_elem_width 64} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$corr : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$corr : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$corr : bool;

var {:source_name "shared_corr_0"} {:group_shared} $$kernel7.shared_corr_0 : [int]int;
axiom {:array_info "$$kernel7.shared_corr_0"} {:group_shared} {:elem_width 64} {:source_name "shared_corr_0"} {:source_elem_width 64} {:source_dimensions "32,32"} true;
var {:race_checking} {:group_shared} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*,32"} _READ_HAS_OCCURRED_$$kernel7.shared_corr_0 : bool;
var {:race_checking} {:group_shared} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*,32"} _WRITE_HAS_OCCURRED_$$kernel7.shared_corr_0 : bool;
var {:race_checking} {:group_shared} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*,32"} _ATOMIC_HAS_OCCURRED_$$kernel7.shared_corr_0 : bool;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_id_y} group_id_y : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:local_id_y} local_id_y : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function BV32_SEXT64(int) : int;
function BV_EXTRACT(int, int, int) : int;
function {:inline true} BV1_ZEXT32(x : int) : int {
  x
}
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_AND(x : int, y : int) : int {
  if x == y then x else (if x == 0 || y == 0 then 0 else BV32_AND_UF(x, y))
}
function BV32_AND_UF(int, int) : int;
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_OR(x : int, y : int) : int {
  if x == y then x else (if x == 0 then y else (if y == 0 then x else BV32_OR_UF(x, y)))
}
function BV32_OR_UF(int, int) : int;
function {:inline true} BV32_SGE(x : int, y : int) : bool {
  x >= y
}
function {:inline true} BV32_SLE(x : int, y : int) : bool {
  x <= y
}
function {:inline true} BV32_SUB(x : int, y : int) : int {
  x - y
}
function {:inline true} BV32_UDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_UGE(x : int, y : int) : bool {
  x >= y
}
function {:inline true} BV32_UREM(x : int, y : int) : int {
  x mod y
}
function {:inline true} BV32_ZEXT64(x : int) : int {
  x
}
function {:inline true} BV64_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV64_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV64_SDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV64_SGE(x : int, y : int) : bool {
  x >= y
}
function {:inline true} BV64_SGT(x : int, y : int) : bool {
  x > y
}
function {:inline true} BV64_SLE(x : int, y : int) : bool {
  x <= y
}
function {:inline true} BV64_SLT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV64_SREM(x : int, y : int) : int {
  x mod y
}
function {:inline true} BV64_SUB(x : int, y : int) : int {
  x - y
}
procedure {:source_name "kernel7"} {:kernel} $kernel7($m:int, $n:int)
requires {:sourceloc_num 0} (if $m == 512 then 1 else 0) != 0;
requires {:sourceloc_num 1} (if $n == 1024 then 1 else 0) != 0;
requires {:sourceloc_num 2} (if BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_SGE($m, 2) then 1 else 0)), BV1_ZEXT32((if BV32_SLE($m, 2147483647) then 1 else 0))), BV1_ZEXT32((if BV32_SLE($n, 2147483647) then 1 else 0))), BV1_ZEXT32((if BV64_SGE(BV32_SEXT64($n), -2147483648) then 1 else 0))) != 0 then 1 else 0) != 0;
requires {:procedure_wide_invariant} {:do_not_predicate} {:sourceloc_num 3} (if (_WRITE_HAS_OCCURRED_$$corr ==> BV32_OR(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV64_SLE(BV32_ZEXT64(group_id_x), 254) then 1 else 0)), BV1_ZEXT32((if BV32_UGE($m, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), (if BV32_SGE($m, 2) then $m else 1)), (if BV32_SGE($m, 2) then $m else 1)), 1)) then 1 else 0))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), (if BV32_SGE($m, 2) then $m else 1)), (if BV32_SGE($m, 2) then $m else 1)), BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), (if BV32_SGE($m, 2) then $m else 1)), 1)) then 1 else 0))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), (if BV32_SGE($m, 2) then $m else 1)), 0) then 1 else 0))), BV1_ZEXT32((if BV64_SLE(BV64_SREM(BV64_ADD(BV64_ADD(BV64_ADD(BV64_MUL(32, BV32_ZEXT64(group_id_x)), BV64_MUL(7680, BV32_ZEXT64(local_id_y))), BV32_ZEXT64(BV32_MUL(511, BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), (if BV32_SGE($m, 2) then $m else 1))))), 31), 8192), 31) then 1 else 0))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV64_ADD(BV64_MUL(32, BV32_ZEXT64(group_id_y)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), (if BV32_SGE($m, 2) then $m else 1)), (if BV32_SGE($m, 2) then $m else 1)))), 8192) == 0 then 1 else 0))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV32_ZEXT64(local_id_y), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), (if BV32_SGE($m, 2) then $m else 1)))), 16) == 0 then 1 else 0))), BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_ZEXT64(group_id_x) == 255 then 1 else 0)), BV1_ZEXT32((if BV32_UGE($m, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), (if BV32_SGE($m, 2) then $m else 1)), (if BV32_SGE($m, 2) then $m else 1)), 1)) then 1 else 0))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), (if BV32_SGE($m, 2) then $m else 1)), (if BV32_SGE($m, 2) then $m else 1)), BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), (if BV32_SGE($m, 2) then $m else 1)), 1)) then 1 else 0))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), (if BV32_SGE($m, 2) then $m else 1)), 0) then 1 else 0))), BV1_ZEXT32((if BV64_SLE(BV64_SREM(BV64_ADD(BV64_ADD(BV64_MUL(7680, BV32_ZEXT64(local_id_y)), BV32_ZEXT64(BV32_MUL(511, BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), (if BV32_SGE($m, 2) then $m else 1))))), 8191), 8192), 31) then 1 else 0))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV64_ADD(BV64_MUL(32, BV32_ZEXT64(group_id_y)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), (if BV32_SGE($m, 2) then $m else 1)), (if BV32_SGE($m, 2) then $m else 1)))), 8192) == 0 then 1 else 0))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV32_ZEXT64(local_id_y), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), (if BV32_SGE($m, 2) then $m else 1)))), 16) == 0 then 1 else 0)))) != 0) then 1 else 0) != 0;
requires {:procedure_wide_invariant} {:do_not_predicate} {:sourceloc_num 4} (if (_READ_HAS_OCCURRED_$$corr ==> BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV64_MUL(32, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 0) then 1 else 0)), BV1_ZEXT32((if BV64_SLE(BV64_ADD(BV64_MUL(32, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 8191) then 1 else 0))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), (if BV32_SGE($m, 2) then $m else 1)), (if BV32_SGE($m, 2) then $m else 1)), 0) then 1 else 0))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), (if BV32_SGE($m, 2) then $m else 1)), BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), (if BV32_SGE($m, 2) then $m else 1)), (if BV32_SGE($m, 2) then $m else 1)), 1)) then 1 else 0))), BV1_ZEXT32((if BV32_UGE($m, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), (if BV32_SGE($m, 2) then $m else 1)), 1)) then 1 else 0))), BV1_ZEXT32((if BV64_SGE(BV32_ZEXT64(BV32_UREM(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), (if BV32_SGE($m, 2) then $m else 1)), 8192)), BV64_MUL(32, BV32_ZEXT64(group_id_y))) then 1 else 0))), BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV64_MUL(32, BV32_ZEXT64(group_id_y)), 31), BV32_ZEXT64(BV32_UREM(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), (if BV32_SGE($m, 2) then $m else 1)), 8192))) then 1 else 0))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV64_ADD(BV64_MUL(32, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), (if BV32_SGE($m, 2) then $m else 1)), (if BV32_SGE($m, 2) then $m else 1)))), 8192) == 0 then 1 else 0))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV32_ZEXT64(local_id_y), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), (if BV32_SGE($m, 2) then $m else 1)))), 16) == 0 then 1 else 0))) != 0) then 1 else 0) != 0;
{
  var $c0.0:int;
  var $c1.0:int;
  var $0:int;
  var $1:int;
  var $2:int;
  var $c3.0:int;
  var $3:int;
  var $4:int;
  var $c31.0:int;
  var $5:int;
  var $6:int;
  var v0:int;
  var v1:int;
  var v2:int;
  var v3:int;
  var v4:int;
  var v5:bool;
  var v6:bool;
  var v7:bool;
  var v8:bool;
  var v9:bool;
  var v10:bool;
  var v11:bool;
  var v12:bool;
  var v13:int;
  var v14:bool;
  var v15:bool;
  var v16:bool;
  var v17:int;
  var v18:bool;
$0:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  v0 := BV32_ZEXT64(group_id_x);
  v1 := BV32_ZEXT64(group_id_y);
  v2 := local_id_x;
  v3 := BV32_ZEXT64(v2);
  v4 := BV32_ZEXT64(local_id_y);
  $c0.0 := BV64_MUL(32, v0);
  goto $1;
$1:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  v5 := BV64_SLT($c0.0, BV32_SEXT64(BV32_SUB($m, 1)));
  goto $truebb, $falsebb;
$2:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  $c1.0 := BV64_ADD(BV64_MUL(32, v1), BV64_MUL(8192, BV64_SDIV(BV64_ADD(BV64_ADD(BV64_MUL(-32, v1), $c0.0), 8161), 8192)));
  goto $3;
$3:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  v6 := BV64_SLT($c1.0, BV32_SEXT64($m));
  goto $truebb0, $falsebb0;
$4:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  call {:sourceloc_num 10} $bugle_barrier(-1, -1);
  v7 := BV64_SLT(BV64_SUB(BV64_ADD(BV64_SUB(v3, v4), $c0.0), $c1.0), 0);
  goto $truebb1, $falsebb1;
$5:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  $0 := BV64_SUB(0, BV64_SDIV(BV64_SUB(BV64_ADD(BV64_SUB(0, BV64_SUB(BV64_ADD(BV64_SUB(v3, v4), $c0.0), $c1.0)), 16), 1), 16));
  goto $7;
$6:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  $0 := BV64_SDIV(BV64_SUB(BV64_ADD(BV64_SUB(v3, v4), $c0.0), $c1.0), 16);
  goto $7;
$7:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  v8 := BV64_SGT(v4, BV64_ADD(BV64_ADD(v4, BV64_MUL(16, $0)), 16));
  goto $truebb2, $falsebb2;
$8:
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  $1 := v4;
  goto $13;
$9:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  v9 := BV64_SLT(BV64_SUB(BV64_ADD(BV64_SUB(v3, v4), $c0.0), $c1.0), 0);
  goto $truebb3, $falsebb3;
$10:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  $2 := BV64_SUB(0, BV64_SDIV(BV64_SUB(BV64_ADD(BV64_SUB(0, BV64_SUB(BV64_ADD(BV64_SUB(v3, v4), $c0.0), $c1.0)), 16), 1), 16));
  goto $12;
$11:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  $2 := BV64_SDIV(BV64_SUB(BV64_ADD(BV64_SUB(v3, v4), $c0.0), $c1.0), 16);
  goto $12;
$12:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  $1 := BV64_ADD(BV64_ADD(v4, BV64_MUL(16, $2)), 16);
  goto $13;
$13:
  assert {:block_sourceloc} {:sourceloc_num 19} true;
  $c3.0 := $1;
  goto $14;
$14:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  v10 := BV64_SLT(31, BV64_SUB(BV64_SUB(BV32_SEXT64($m), $c1.0), 1));
  goto $truebb4, $falsebb4;
$15:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  $3 := 31;
  goto $17;
$16:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  $3 := BV64_SUB(BV64_SUB(BV32_SEXT64($m), $c1.0), 1);
  goto $17;
$17:
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  v11 := BV64_SLE($c3.0, $3);
  goto $truebb5, $falsebb5;
$18:
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  v12 := BV32_SGE($m, 2);
  goto $truebb6, $falsebb6;
$19:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  $4 := $m;
  goto $21;
$20:
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  $4 := 1;
  goto $21;
$21:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  assert {:sourceloc} {:sourceloc_num 28} true;
  v13 := $$corr[BV_EXTRACT(BV64_ADD(BV64_MUL(BV64_ADD(v3, $c0.0), BV32_SEXT64($4)), BV64_ADD($c1.0, $c3.0)), 32, 0)];
  assert {:sourceloc} {:sourceloc_num 29} true;
  $$kernel7.shared_corr_0[BV32_ADD(BV32_MUL(BV_EXTRACT($c3.0, 32, 0), 32), v2)] := v13;
  goto $22;
$22:
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  $c3.0 := BV64_ADD($c3.0, 16);
  goto $14;
$23:
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  call {:sourceloc_num 32} $bugle_barrier(-1, -1);
  v14 := BV64_SGE(BV32_SEXT64($m), BV64_ADD(BV64_ADD(v3, $c1.0), 1));
  goto $truebb7, $falsebb7;
$24:
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  $c31.0 := v4;
  goto $25;
$25:
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  v15 := BV64_SLT(31, BV64_SUB(BV64_ADD(BV64_SUB(v3, $c0.0), $c1.0), 1));
  goto $truebb8, $falsebb8;
$26:
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  $5 := 31;
  goto $28;
$27:
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  $5 := BV64_SUB(BV64_ADD(BV64_SUB(v3, $c0.0), $c1.0), 1);
  goto $28;
$28:
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  v16 := BV64_SLE($c31.0, $5);
  goto $truebb9, $falsebb9;
$29:
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  assert {:sourceloc} {:sourceloc_num 39} true;
  v17 := $$kernel7.shared_corr_0[BV32_ADD(BV32_MUL(v2, 32), BV_EXTRACT($c31.0, 32, 0))];
  v18 := BV32_SGE($m, 2);
  goto $truebb10, $falsebb10;
$30:
  assert {:block_sourceloc} {:sourceloc_num 40} true;
  $6 := $m;
  goto $32;
$31:
  assert {:block_sourceloc} {:sourceloc_num 41} true;
  $6 := 1;
  goto $32;
$32:
  assert {:block_sourceloc} {:sourceloc_num 42} true;
  assert {:sourceloc} {:sourceloc_num 43} true;
  $$corr[BV_EXTRACT(BV64_ADD(BV64_MUL(BV64_ADD(v3, $c1.0), BV32_SEXT64($6)), BV64_ADD($c0.0, $c31.0)), 32, 0)] := v17;
  goto $33;
$33:
  assert {:block_sourceloc} {:sourceloc_num 44} true;
  $c31.0 := BV64_ADD($c31.0, 16);
  goto $25;
$34:
  assert {:block_sourceloc} {:sourceloc_num 45} true;
  goto $35;
$35:
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  goto $36;
$36:
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  $c1.0 := BV64_ADD($c1.0, 8192);
  goto $3;
$37:
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  goto $38;
$38:
  assert {:block_sourceloc} {:sourceloc_num 49} true;
  $c0.0 := BV64_ADD($c0.0, 8192);
  goto $1;
$39:
  assert {:block_sourceloc} {:sourceloc_num 50} true;
  return;
$truebb:
  assume {:partition} v5;
  assert {:block_sourceloc} {:sourceloc_num 51} true;
  goto $2;
$falsebb:
  assume {:partition} !v5;
  assert {:block_sourceloc} {:sourceloc_num 52} true;
  goto $39;
$truebb0:
  assume {:partition} v6;
  assert {:block_sourceloc} {:sourceloc_num 53} true;
  goto $4;
$falsebb0:
  assume {:partition} !v6;
  assert {:block_sourceloc} {:sourceloc_num 54} true;
  goto $37;
$truebb1:
  assume {:partition} v7;
  assert {:block_sourceloc} {:sourceloc_num 55} true;
  goto $5;
$falsebb1:
  assume {:partition} !v7;
  assert {:block_sourceloc} {:sourceloc_num 56} true;
  goto $6;
$truebb2:
  assume {:partition} v8;
  assert {:block_sourceloc} {:sourceloc_num 57} true;
  goto $8;
$falsebb2:
  assume {:partition} !v8;
  assert {:block_sourceloc} {:sourceloc_num 58} true;
  goto $9;
$truebb3:
  assume {:partition} v9;
  assert {:block_sourceloc} {:sourceloc_num 59} true;
  goto $10;
$falsebb3:
  assume {:partition} !v9;
  assert {:block_sourceloc} {:sourceloc_num 60} true;
  goto $11;
$truebb4:
  assume {:partition} v10;
  assert {:block_sourceloc} {:sourceloc_num 61} true;
  goto $15;
$falsebb4:
  assume {:partition} !v10;
  assert {:block_sourceloc} {:sourceloc_num 62} true;
  goto $16;
$truebb5:
  assume {:partition} v11;
  assert {:block_sourceloc} {:sourceloc_num 63} true;
  goto $18;
$falsebb5:
  assume {:partition} !v11;
  assert {:block_sourceloc} {:sourceloc_num 64} true;
  goto $23;
$truebb6:
  assume {:partition} v12;
  assert {:block_sourceloc} {:sourceloc_num 65} true;
  goto $19;
$falsebb6:
  assume {:partition} !v12;
  assert {:block_sourceloc} {:sourceloc_num 66} true;
  goto $20;
$truebb7:
  assume {:partition} v14;
  assert {:block_sourceloc} {:sourceloc_num 67} true;
  goto $24;
$falsebb7:
  assume {:partition} !v14;
  assert {:block_sourceloc} {:sourceloc_num 68} true;
  goto $35;
$truebb8:
  assume {:partition} v15;
  assert {:block_sourceloc} {:sourceloc_num 69} true;
  goto $26;
$falsebb8:
  assume {:partition} !v15;
  assert {:block_sourceloc} {:sourceloc_num 70} true;
  goto $27;
$truebb9:
  assume {:partition} v16;
  assert {:block_sourceloc} {:sourceloc_num 71} true;
  goto $29;
$falsebb9:
  assume {:partition} !v16;
  assert {:block_sourceloc} {:sourceloc_num 72} true;
  goto $34;
$truebb10:
  assume {:partition} v18;
  assert {:block_sourceloc} {:sourceloc_num 73} true;
  goto $30;
$falsebb10:
  assume {:partition} !v18;
  assert {:block_sourceloc} {:sourceloc_num 74} true;
  goto $31;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:int, $1:int);
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 32 then 1 else 0) != 0;
axiom (if group_size_y == 16 then 1 else 0) != 0;
axiom (if num_groups_x == 16 then 1 else 0) != 0;
axiom (if num_groups_y == 16 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
