type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "table"} {:global} $$table : [int]int;
axiom {:array_info "$$table"} {:global} {:elem_width 32} {:source_name "table"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$table : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$table : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$table : bool;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function BV32_SEXT64(int) : int;
function BV_EXTRACT(int, int, int) : int;
function {:inline true} BV1_ZEXT32(x : int) : int {
  x
}
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_AND(x : int, y : int) : int {
  if x == y then x else (if x == 0 || y == 0 then 0 else BV32_AND_UF(x, y))
}
function BV32_AND_UF(int, int) : int;
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_OR(x : int, y : int) : int {
  if x == y then x else (if x == 0 then y else (if y == 0 then x else BV32_OR_UF(x, y)))
}
function BV32_OR_UF(int, int) : int;
function {:inline true} BV32_SGE(x : int, y : int) : bool {
  x >= y
}
function {:inline true} BV32_SLE(x : int, y : int) : bool {
  x <= y
}
function {:inline true} BV32_UDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_UREM(x : int, y : int) : int {
  x mod y
}
function {:inline true} BV32_ZEXT64(x : int) : int {
  x
}
function {:inline true} BV64_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV64_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV64_SGE(x : int, y : int) : bool {
  x >= y
}
function {:inline true} BV64_SUB(x : int, y : int) : int {
  x - y
}
procedure {:source_name "kernel1"} {:kernel} $kernel1($n:int, $c0:int)
requires {:sourceloc_num 0} (if $n == 64 then 1 else 0) != 0;
requires {:sourceloc_num 1} (if BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_SLE($n, 2147483647) then 1 else 0)), BV1_ZEXT32((if BV64_SGE($c0, 6) then 1 else 0))), BV1_ZEXT32((if BV64_SGE(BV32_SEXT64(BV32_ADD($n, 4)), $c0) then 1 else 0))) != 0 then 1 else 0) != 0;
requires {:procedure_wide_invariant} {:do_not_predicate} {:sourceloc_num 2} (if (_WRITE_HAS_OCCURRED_$$table ==> BV32_AND(BV1_ZEXT32((if BV32_UREM(BV32_UDIV(BV32_MUL(4, _WATCHED_OFFSET), 4), $n) == BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(4, _WATCHED_OFFSET), 4), $n), $n), 1) then 1 else 0)), BV1_ZEXT32((if $c0 == BV32_ZEXT64(BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(4, _WATCHED_OFFSET), 4), $n), $n), 6)) then 1 else 0))) != 0) then 1 else 0) != 0;
requires {:procedure_wide_invariant} {:do_not_predicate} {:sourceloc_num 3} (if (_READ_HAS_OCCURRED_$$table ==> BV32_OR(BV32_AND(BV1_ZEXT32((if BV32_UREM(BV32_UDIV(BV32_MUL(4, _WATCHED_OFFSET), 4), $n) == BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(4, _WATCHED_OFFSET), 4), $n), $n), 1) then 1 else 0)), BV1_ZEXT32((if $c0 == BV32_ZEXT64(BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(4, _WATCHED_OFFSET), 4), $n), $n), 6)) then 1 else 0))), BV32_AND(BV1_ZEXT32((if BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(4, _WATCHED_OFFSET), 4), $n), 1) == BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(4, _WATCHED_OFFSET), 4), $n), $n) then 1 else 0)), BV1_ZEXT32((if $c0 == BV32_ZEXT64(BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(4, _WATCHED_OFFSET), 4), $n), $n), 5)) then 1 else 0)))) != 0) then 1 else 0) != 0;
{
  var $0:int;
  var v0:int;
  var v1:int;
  var v2:bool;
  var v3:int;
  var v4:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  assert {:sourceloc} {:sourceloc_num 5} true;
  v0 := $$table[BV_EXTRACT(BV64_ADD(BV64_MUL(BV64_SUB($c0, 6), BV32_SEXT64($n)), BV64_SUB($c0, 5)), 32, 0)];
  assert {:sourceloc} {:sourceloc_num 6} true;
  v1 := $$table[BV_EXTRACT(BV64_ADD(BV64_MUL(BV64_SUB($c0, 5), BV32_SEXT64($n)), BV64_SUB($c0, 6)), 32, 0)];
  v2 := BV32_SGE(v0, v1);
  goto $truebb, $falsebb;
$1:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  assert {:sourceloc} {:sourceloc_num 8} true;
  v3 := $$table[BV_EXTRACT(BV64_ADD(BV64_MUL(BV64_SUB($c0, 6), BV32_SEXT64($n)), BV64_SUB($c0, 5)), 32, 0)];
  $0 := v3;
  goto $3;
$2:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  assert {:sourceloc} {:sourceloc_num 10} true;
  v4 := $$table[BV_EXTRACT(BV64_ADD(BV64_MUL(BV64_SUB($c0, 5), BV32_SEXT64($n)), BV64_SUB($c0, 6)), 32, 0)];
  $0 := v4;
  goto $3;
$3:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  assert {:sourceloc} {:sourceloc_num 12} true;
  $$table[BV_EXTRACT(BV64_ADD(BV64_MUL(BV64_SUB($c0, 6), BV32_SEXT64($n)), BV64_SUB($c0, 5)), 32, 0)] := $0;
  return;
$truebb:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  goto $1;
$falsebb:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  goto $2;
}
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 1 then 1 else 0) != 0;
axiom (if num_groups_x == 1 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
