type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP64(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "A"} {:global} $$A : [int]int;
axiom {:array_info "$$A"} {:global} {:elem_width 64} {:source_name "A"} {:source_elem_width 64} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$A : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$A : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$A : bool;

var {:source_name "shared_A_0"} {:group_shared} $$kernel2.shared_A_0 : [int]int;
axiom {:array_info "$$kernel2.shared_A_0"} {:group_shared} {:elem_width 64} {:source_name "shared_A_0"} {:source_elem_width 64} {:source_dimensions "32,32"} true;
var {:race_checking} {:group_shared} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*,32"} _READ_HAS_OCCURRED_$$kernel2.shared_A_0 : bool;
var {:race_checking} {:group_shared} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*,32"} _WRITE_HAS_OCCURRED_$$kernel2.shared_A_0 : bool;
var {:race_checking} {:group_shared} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*,32"} _ATOMIC_HAS_OCCURRED_$$kernel2.shared_A_0 : bool;

const _WATCHED_OFFSET : int;
const {:__dominator_enabled} __dominator_enabled : bool;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_id_y} group_id_y : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:local_id_y} local_id_y : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function BV32_SEXT64(int) : int;
function BV_EXTRACT(int, int, int) : int;
function FMUL64(int, int) : int;
function FSUB64(int, int) : int;
function {:inline true} BV1_ZEXT32(x : int) : int {
  x
}
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_AND(x : int, y : int) : int {
  if x == y then x else (if x == 0 || y == 0 then 0 else BV32_AND_UF(x, y))
}
function BV32_AND_UF(int, int) : int;
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_OR(x : int, y : int) : int {
  if x == y then x else (if x == 0 then y else (if y == 0 then x else BV32_OR_UF(x, y)))
}
function BV32_OR_UF(int, int) : int;
function {:inline true} BV32_SLE(x : int, y : int) : bool {
  x <= y
}
function {:inline true} BV32_SUB(x : int, y : int) : int {
  x - y
}
function {:inline true} BV32_UDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_UGE(x : int, y : int) : bool {
  x >= y
}
function {:inline true} BV32_UREM(x : int, y : int) : int {
  x mod y
}
function {:inline true} BV32_ZEXT64(x : int) : int {
  x
}
function {:inline true} BV64_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV64_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV64_SDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV64_SGE(x : int, y : int) : bool {
  x >= y
}
function {:inline true} BV64_SGT(x : int, y : int) : bool {
  x > y
}
function {:inline true} BV64_SLE(x : int, y : int) : bool {
  x <= y
}
function {:inline true} BV64_SLT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV64_SREM(x : int, y : int) : int {
  x mod y
}
function {:inline true} BV64_SUB(x : int, y : int) : int {
  x - y
}
procedure {:source_name "kernel2"} {:kernel} $kernel2($n:int, $c0:int)
requires {:sourceloc_num 0} (if $n == 64 then 1 else 0) != 0;
requires {:sourceloc_num 1} (if BV64_SLT($c0, BV32_SEXT64(BV32_SUB(BV32_MUL(2, $n), 2))) then 1 else 0) != 0;
requires {:sourceloc_num 2} (if BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_SLE($n, 2147483647) then 1 else 0)), BV1_ZEXT32((if BV64_SGE(BV32_SEXT64(BV32_MUL(2, $n)), BV64_ADD($c0, 5)) then 1 else 0))), BV1_ZEXT32((if BV64_SGE($c0, 1) then 1 else 0))) != 0 then 1 else 0) != 0;
requires {:procedure_wide_invariant} {:do_not_predicate} {:sourceloc_num 3} (if (_WRITE_HAS_OCCURRED_$$A ==> BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_UGE($n, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), $n), 1)) then 1 else 0)), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), $n), BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), 1)) then 1 else 0))), BV1_ZEXT32((if BV64_SGE(BV32_ZEXT64(BV32_MUL(2, BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n))), BV64_ADD($c0, 1)) then 1 else 0))), BV1_ZEXT32((if BV64_SGE($c0, BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n))) then 1 else 0))), BV1_ZEXT32((if BV64_SGE(BV64_SREM(BV64_ADD(BV64_ADD(BV64_SUB(BV64_MUL(-32, BV32_ZEXT64(group_id_y)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n))), $c0), 8160), 8192), 8160) then 1 else 0))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV64_ADD(BV64_MUL(32, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), $n))), 8192) == 0 then 1 else 0))), BV1_ZEXT32((if BV64_SREM(BV64_ADD(BV64_SUB(BV64_ADD(BV64_MUL(15, BV32_ZEXT64(local_id_y)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n))), $c0), 15), 16) == 0 then 1 else 0))) != 0) then 1 else 0) != 0;
requires {:procedure_wide_invariant} {:do_not_predicate} {:sourceloc_num 4} (if (_READ_HAS_OCCURRED_$$A ==> BV32_OR(BV32_OR(BV32_OR(BV32_OR(BV32_OR(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), $n), 0) then 1 else 0)), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), $n), 1)) then 1 else 0))), BV1_ZEXT32((if $c0 == BV32_ZEXT64(BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), $n), BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n))) then 1 else 0))), BV1_ZEXT32((if BV64_SGE(BV32_ZEXT64(BV32_UREM(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), $n), 8192)), BV64_MUL(32, BV32_ZEXT64(group_id_y))) then 1 else 0))), BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV64_MUL(32, BV32_ZEXT64(group_id_y)), 31), BV32_ZEXT64(BV32_UREM(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), $n), 8192))) then 1 else 0))), BV1_ZEXT32((if BV64_SGE(BV32_SEXT64($n), BV64_ADD(BV64_ADD(BV64_SREM(BV64_ADD(BV64_ADD(BV64_ADD(BV64_ADD(BV64_MUL(32, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_MUL(8192, BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), $n)))), BV32_ZEXT64(BV32_MUL(8191, BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n)))), 8191), 8192), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n))), 2)) then 1 else 0))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV32_ZEXT64(local_id_y), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), $n))), 16) == 0 then 1 else 0))), BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV64_MUL(32, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 0) then 1 else 0)), BV1_ZEXT32((if BV64_SLE(BV64_ADD(BV64_MUL(32, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 8191) then 1 else 0))), BV1_ZEXT32((if BV32_UGE($n, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), $n), 1)) then 1 else 0))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), 0) then 1 else 0))), BV1_ZEXT32((if BV64_SGE($c0, BV32_ZEXT64(BV32_ADD(BV32_MUL(2, BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n)), 1))) then 1 else 0))), BV1_ZEXT32((if BV64_SGE(BV32_ZEXT64(BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), $n), BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n))), BV64_ADD($c0, 1)) then 1 else 0))), BV1_ZEXT32((if BV64_SGE(BV32_ZEXT64(BV32_UREM(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), 8192)), BV64_MUL(32, BV32_ZEXT64(group_id_y))) then 1 else 0))), BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV64_MUL(32, BV32_ZEXT64(group_id_y)), 31), BV32_ZEXT64(BV32_UREM(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), 8192))) then 1 else 0))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV64_ADD(BV64_MUL(32, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), $n))), 8192) == 0 then 1 else 0))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV32_ZEXT64(local_id_y), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n))), 16) == 0 then 1 else 0)))), BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_UGE($n, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), $n), 1)) then 1 else 0)), BV1_ZEXT32((if BV64_SGE(BV32_ZEXT64(BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), $n), 31)), BV64_ADD(BV32_SEXT64($n), BV32_ZEXT64(local_id_x))) then 1 else 0))), BV1_ZEXT32((if BV32_UGE($n, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), 1)) then 1 else 0))), BV1_ZEXT32((if BV32_UGE(BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), 2), $n) then 1 else 0))), BV1_ZEXT32((if BV64_SGE($c0, BV32_SEXT64(BV32_ADD($n, 30))) then 1 else 0))), BV1_ZEXT32((if BV64_SGE(BV32_SEXT64(BV32_ADD($n, 29)), BV64_ADD(BV64_SREM(BV64_ADD(BV64_ADD(BV64_ADD(BV32_SEXT64($n), BV64_MUL(32, BV32_ZEXT64(group_id_y))), BV64_MUL(8191, $c0)), 29), 8192), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n)))) then 1 else 0))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV64_ADD(BV64_MUL(32, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), $n))), 8192) == 0 then 1 else 0))), BV1_ZEXT32((if BV64_SREM(BV64_ADD(BV64_SUB(BV64_ADD(BV64_MUL(15, BV32_ZEXT64(local_id_y)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n))), $c0), 15), 16) == 0 then 1 else 0)))), BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV32_SEXT64($n), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), $n), 32))) then 1 else 0)), BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV32_ZEXT64(local_id_x), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n))), BV32_ZEXT64(BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), $n), 30))) then 1 else 0))), BV1_ZEXT32((if BV32_UGE($n, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), 1)) then 1 else 0))), BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV32_ZEXT64(local_id_x), $c0), BV32_ZEXT64(BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), $n), 61))) then 1 else 0))), BV1_ZEXT32((if BV64_SGE(BV32_ZEXT64(BV32_ADD(BV32_MUL(2, BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), $n)), 59)), BV64_ADD(BV64_MUL(2, BV32_ZEXT64(local_id_x)), $c0)) then 1 else 0))), BV1_ZEXT32((if BV64_SGE(BV32_ZEXT64(BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), $n), 61)), BV64_ADD(BV64_ADD(BV64_SREM(BV64_ADD(BV64_ADD(BV64_ADD(BV64_MUL(32, BV32_ZEXT64(group_id_x)), BV64_MUL(32, BV32_ZEXT64(group_id_y))), BV64_MUL(8191, $c0)), 61), 8192), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n)))) then 1 else 0))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV64_ADD(BV64_MUL(32, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), $n))), 8192) == 0 then 1 else 0))), BV1_ZEXT32((if BV64_SREM(BV64_ADD(BV64_SUB(BV64_ADD(BV64_MUL(15, BV32_ZEXT64(local_id_y)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n))), $c0), 15), 16) == 0 then 1 else 0)))), BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_UGE($n, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), $n), 1)) then 1 else 0)), BV1_ZEXT32((if BV32_UGE($n, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), 3)) then 1 else 0))), BV1_ZEXT32((if BV64_SGE(BV32_ZEXT64(BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), $n), 29)), BV64_ADD(BV32_ZEXT64(local_id_x), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n)))) then 1 else 0))), BV1_ZEXT32((if BV64_SGE($c0, BV32_ZEXT64(BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), 32))) then 1 else 0))), BV1_ZEXT32((if BV64_SGE(BV32_ZEXT64(BV32_ADD(BV32_MUL(2, BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), $n)), 59)), BV64_ADD(BV64_MUL(2, BV32_ZEXT64(local_id_x)), $c0)) then 1 else 0))), BV1_ZEXT32((if BV64_SGE(BV64_SREM(BV64_ADD(BV64_ADD(BV64_SUB(BV64_MUL(-32, BV32_ZEXT64(group_id_y)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n))), $c0), 8160), 8192), 8160) then 1 else 0))), BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV64_MUL(2, BV64_SREM(BV64_ADD(BV64_ADD(BV64_SUB(BV64_MUL(-32, BV32_ZEXT64(group_id_y)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n))), $c0), 8160), 8192)), BV32_ZEXT64(BV32_MUL(2, BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n)))), BV64_ADD($c0, 16321)) then 1 else 0))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV64_ADD(BV64_MUL(32, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), $n))), 8192) == 0 then 1 else 0))), BV1_ZEXT32((if BV64_SREM(BV64_ADD(BV64_SUB(BV64_ADD(BV64_MUL(15, BV32_ZEXT64(local_id_y)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n))), $c0), 15), 16) == 0 then 1 else 0)))), BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_ZEXT64(group_id_y) == 0 then 1 else 0)), BV1_ZEXT32((if BV32_UGE($n, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), $n), 1)) then 1 else 0))), BV1_ZEXT32((if BV32_UGE($n, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), 1)) then 1 else 0))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), 0) then 1 else 0))), BV1_ZEXT32((if BV64_SGE($c0, BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n))) then 1 else 0))), BV1_ZEXT32((if BV64_SGE(BV32_SEXT64(BV32_ADD($n, 29)), $c0) then 1 else 0))), BV1_ZEXT32((if BV64_SGE(BV32_ZEXT64(BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), 31)), $c0) then 1 else 0))), BV1_ZEXT32((if BV64_SGE(BV32_ZEXT64(BV32_ADD(BV32_MUL(2, BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), $n)), 59)), BV64_ADD(BV64_MUL(2, BV32_ZEXT64(local_id_x)), $c0)) then 1 else 0))), BV1_ZEXT32((if BV64_SGE(BV32_ZEXT64(BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), $n), 60)), BV64_ADD(BV32_ZEXT64(local_id_x), $c0)) then 1 else 0))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV64_ADD(BV64_MUL(32, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), $n))), 8192) == 0 then 1 else 0))), BV1_ZEXT32((if BV64_SREM(BV64_ADD(BV64_SUB(BV64_ADD(BV64_MUL(15, BV32_ZEXT64(local_id_y)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n))), $c0), 15), 16) == 0 then 1 else 0)))) != 0) then 1 else 0) != 0;
{
  var $c1.0:int;
  var $0:int;
  var $1:int;
  var $2:int;
  var $3:int;
  var $4:int;
  var $5:int;
  var $6:int;
  var $7:int;
  var $8:int;
  var $c2.0:int;
  var $9:int;
  var $c4.0:int;
  var $10:int;
  var $11:int;
  var $12:int;
  var $13:int;
  var $c41.0:int;
  var $14:int;
  var $15:int;
  var $c42.0:int;
  var $16:int;
  var v0:int;
  var v1:int;
  var v2:int;
  var v3:int;
  var v4:int;
  var v5:bool;
  var v6:bool;
  var v7:bool;
  var v8:bool;
  var v9:bool;
  var v10:bool;
  var v11:bool;
  var v12:bool;
  var v13:bool;
  var v14:bool;
  var v15:bool;
  var v16:bool;
  var v17:bool;
  var v18:bool;
  var v19:bool;
  var v20:int;
  var v21:bool;
  var v22:bool;
  var v23:bool;
  var v24:bool;
  var v25:bool;
  var v26:bool;
  var v27:int;
  var v28:int;
  var v29:int;
  var v30:int;
  var v31:bool;
  var v32:bool;
  var v33:bool;
  var v34:bool;
  var v35:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  v0 := BV32_ZEXT64(group_id_x);
  v1 := BV32_ZEXT64(group_id_y);
  v2 := local_id_x;
  v3 := BV32_ZEXT64(v2);
  v4 := BV32_ZEXT64(local_id_y);
  $c1.0 := BV64_ADD(BV64_MUL(32, v0), BV64_MUL(8192, BV64_SDIV(BV64_ADD(BV64_ADD(BV64_MUL(-64, v0), $c0), 16324), 16384)));
  goto $1;
$1:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 7} (if (_READ_HAS_OCCURRED_$$kernel2.shared_A_0 ==> BV32_ZEXT64(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), 32)) == v3) then 1 else 0) != 0;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 8} (if (_READ_HAS_OCCURRED_$$kernel2.shared_A_0 ==> BV32_ZEXT64(BV32_UREM(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), 32), 16)) == v4) then 1 else 0) != 0;
  v5 := BV64_SLT($c1.0, BV32_SEXT64($n));
  goto $truebb, $falsebb;
$2:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  v6 := BV64_SLT(BV64_SUB(BV64_ADD(BV64_SUB(BV32_SEXT64(BV32_SUB(0, $n)), BV64_MUL(32, v1)), $c0), 30), 0);
  goto $truebb0, $falsebb0;
$3:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  $0 := BV64_SUB(0, BV64_SDIV(BV64_SUB(BV64_ADD(BV64_SUB(0, BV64_SUB(BV64_ADD(BV64_SUB(BV32_SEXT64(BV32_SUB(0, $n)), BV64_MUL(32, v1)), $c0), 30)), 8192), 1), 8192));
  goto $5;
$4:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  $0 := BV64_SDIV(BV64_SUB(BV64_ADD(BV64_SUB(BV32_SEXT64(BV32_SUB(0, $n)), BV64_MUL(32, v1)), $c0), 30), 8192);
  goto $5;
$5:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  v7 := BV64_SGT(BV64_MUL(32, v1), BV64_ADD(BV64_ADD(BV64_MUL(32, v1), BV64_MUL(8192, $0)), 8192));
  goto $truebb1, $falsebb1;
$6:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  $1 := BV64_MUL(32, v1);
  goto $11;
$7:
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  v8 := BV64_SLT(BV64_SUB(BV64_ADD(BV64_SUB(BV32_SEXT64(BV32_SUB(0, $n)), BV64_MUL(32, v1)), $c0), 30), 0);
  goto $truebb2, $falsebb2;
$8:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  $2 := BV64_SUB(0, BV64_SDIV(BV64_SUB(BV64_ADD(BV64_SUB(0, BV64_SUB(BV64_ADD(BV64_SUB(BV32_SEXT64(BV32_SUB(0, $n)), BV64_MUL(32, v1)), $c0), 30)), 8192), 1), 8192));
  goto $10;
$9:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  $2 := BV64_SDIV(BV64_SUB(BV64_ADD(BV64_SUB(BV32_SEXT64(BV32_SUB(0, $n)), BV64_MUL(32, v1)), $c0), 30), 8192);
  goto $10;
$10:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  $1 := BV64_ADD(BV64_ADD(BV64_MUL(32, v1), BV64_MUL(8192, $2)), 8192);
  goto $11;
$11:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  v9 := BV64_SLT(BV64_SUB(BV64_SUB(BV64_ADD(BV64_MUL(-32, v1), $c0), $c1.0), 62), 0);
  goto $truebb3, $falsebb3;
$12:
  assert {:block_sourceloc} {:sourceloc_num 19} true;
  $3 := BV64_SUB(0, BV64_SDIV(BV64_SUB(BV64_ADD(BV64_SUB(0, BV64_SUB(BV64_SUB(BV64_ADD(BV64_MUL(-32, v1), $c0), $c1.0), 62)), 8192), 1), 8192));
  goto $14;
$13:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  $3 := BV64_SDIV(BV64_SUB(BV64_SUB(BV64_ADD(BV64_MUL(-32, v1), $c0), $c1.0), 62), 8192);
  goto $14;
$14:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  v10 := BV64_SGT($1, BV64_ADD(BV64_ADD(BV64_MUL(32, v1), BV64_MUL(8192, $3)), 8192));
  goto $truebb4, $falsebb4;
$15:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  v11 := BV64_SLT(BV64_SUB(BV64_ADD(BV64_SUB(BV32_SEXT64(BV32_SUB(0, $n)), BV64_MUL(32, v1)), $c0), 30), 0);
  goto $truebb5, $falsebb5;
$16:
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  $4 := BV64_SUB(0, BV64_SDIV(BV64_SUB(BV64_ADD(BV64_SUB(0, BV64_SUB(BV64_ADD(BV64_SUB(BV32_SEXT64(BV32_SUB(0, $n)), BV64_MUL(32, v1)), $c0), 30)), 8192), 1), 8192));
  goto $18;
$17:
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  $4 := BV64_SDIV(BV64_SUB(BV64_ADD(BV64_SUB(BV32_SEXT64(BV32_SUB(0, $n)), BV64_MUL(32, v1)), $c0), 30), 8192);
  goto $18;
$18:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  v12 := BV64_SGT(BV64_MUL(32, v1), BV64_ADD(BV64_ADD(BV64_MUL(32, v1), BV64_MUL(8192, $4)), 8192));
  goto $truebb6, $falsebb6;
$19:
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  $5 := BV64_MUL(32, v1);
  goto $24;
$20:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  v13 := BV64_SLT(BV64_SUB(BV64_ADD(BV64_SUB(BV32_SEXT64(BV32_SUB(0, $n)), BV64_MUL(32, v1)), $c0), 30), 0);
  goto $truebb7, $falsebb7;
$21:
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  $6 := BV64_SUB(0, BV64_SDIV(BV64_SUB(BV64_ADD(BV64_SUB(0, BV64_SUB(BV64_ADD(BV64_SUB(BV32_SEXT64(BV32_SUB(0, $n)), BV64_MUL(32, v1)), $c0), 30)), 8192), 1), 8192));
  goto $23;
$22:
  assert {:block_sourceloc} {:sourceloc_num 29} true;
  $6 := BV64_SDIV(BV64_SUB(BV64_ADD(BV64_SUB(BV32_SEXT64(BV32_SUB(0, $n)), BV64_MUL(32, v1)), $c0), 30), 8192);
  goto $23;
$23:
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  $5 := BV64_ADD(BV64_ADD(BV64_MUL(32, v1), BV64_MUL(8192, $6)), 8192);
  goto $24;
$24:
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  $7 := $5;
  goto $29;
$25:
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  v14 := BV64_SLT(BV64_SUB(BV64_SUB(BV64_ADD(BV64_MUL(-32, v1), $c0), $c1.0), 62), 0);
  goto $truebb8, $falsebb8;
$26:
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  $8 := BV64_SUB(0, BV64_SDIV(BV64_SUB(BV64_ADD(BV64_SUB(0, BV64_SUB(BV64_SUB(BV64_ADD(BV64_MUL(-32, v1), $c0), $c1.0), 62)), 8192), 1), 8192));
  goto $28;
$27:
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  $8 := BV64_SDIV(BV64_SUB(BV64_SUB(BV64_ADD(BV64_MUL(-32, v1), $c0), $c1.0), 62), 8192);
  goto $28;
$28:
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  $7 := BV64_ADD(BV64_ADD(BV64_MUL(32, v1), BV64_MUL(8192, $8)), 8192);
  goto $29;
$29:
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  $c2.0 := $7;
  goto $30;
$30:
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 38} (if (_READ_HAS_OCCURRED_$$kernel2.shared_A_0 ==> BV32_ZEXT64(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), 32)) == v3) then 1 else 0) != 0;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 39} (if (_READ_HAS_OCCURRED_$$kernel2.shared_A_0 ==> BV32_ZEXT64(BV32_UREM(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), 32), 16)) == v4) then 1 else 0) != 0;
  v15 := BV64_SLT($c2.0, BV64_SDIV(BV64_ADD($c0, 1), 2));
  goto $truebb9, $falsebb9;
$31:
  assert {:block_sourceloc} {:sourceloc_num 40} true;
  v16 := BV64_SGE(BV32_SEXT64($n), BV64_ADD(BV64_ADD(v3, $c1.0), 1));
  goto $truebb10, $falsebb10;
$32:
  assert {:block_sourceloc} {:sourceloc_num 41} true;
  v17 := BV64_SGT(v4, BV64_ADD(BV64_ADD(BV64_SUB(BV64_SREM(BV64_ADD(BV64_SUB(BV64_ADD(v4, $c0), $c2.0), 17), 16), $c0), $c2.0), 31));
  goto $truebb11, $falsebb11;
$33:
  assert {:block_sourceloc} {:sourceloc_num 42} true;
  $9 := v4;
  goto $35;
$34:
  assert {:block_sourceloc} {:sourceloc_num 43} true;
  $9 := BV64_ADD(BV64_ADD(BV64_SUB(BV64_SREM(BV64_ADD(BV64_SUB(BV64_ADD(v4, $c0), $c2.0), 17), 16), $c0), $c2.0), 31);
  goto $35;
$35:
  assert {:block_sourceloc} {:sourceloc_num 44} true;
  $c4.0 := $9;
  goto $36;
$36:
  assert {:block_sourceloc} {:sourceloc_num 45} true;
  v18 := BV64_SLT(31, BV64_ADD(BV64_ADD(BV64_SUB(BV32_SEXT64($n), $c0), $c2.0), 30));
  goto $truebb12, $falsebb12;
$37:
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  $10 := 31;
  goto $39;
$38:
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  $10 := BV64_ADD(BV64_ADD(BV64_SUB(BV32_SEXT64($n), $c0), $c2.0), 30);
  goto $39;
$39:
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  v19 := BV64_SLE($c4.0, $10);
  goto $truebb13, $falsebb13;
$40:
  assert {:block_sourceloc} {:sourceloc_num 49} true;
  assert {:sourceloc} {:sourceloc_num 50} true;
  v20 := $$A[BV_EXTRACT(BV64_ADD(BV64_MUL(BV64_ADD(v3, $c1.0), BV32_SEXT64($n)), BV64_SUB(BV64_ADD(BV64_SUB($c0, $c2.0), $c4.0), 31)), 32, 0)];
  assert {:sourceloc} {:sourceloc_num 51} true;
  $$kernel2.shared_A_0[BV32_ADD(BV32_MUL(v2, 32), BV_EXTRACT($c4.0, 32, 0))] := v20;
  goto $41;
$41:
  assert {:block_sourceloc} {:sourceloc_num 52} true;
  $c4.0 := BV64_ADD($c4.0, 16);
  goto $36;
$42:
  assert {:block_sourceloc} {:sourceloc_num 53} true;
  goto $43;
$43:
  assert {:block_sourceloc} {:sourceloc_num 54} true;
  call {:sourceloc_num 55} $bugle_barrier(-1, -1);
  v21 := BV64_SGE(BV32_SEXT64($n), BV64_ADD(BV64_ADD(v3, $c1.0), 1));
  goto $truebb14, $falsebb14;
$44:
  assert {:block_sourceloc} {:sourceloc_num 56} true;
  v22 := BV64_SLT(BV64_SUB(BV64_SUB(BV64_ADD(BV64_SUB(BV64_SUB(0, v3), v4), $c0), $c1.0), $c2.0), 0);
  goto $truebb15, $falsebb15;
$45:
  assert {:block_sourceloc} {:sourceloc_num 57} true;
  $11 := BV64_SUB(0, BV64_SDIV(BV64_SUB(BV64_ADD(BV64_SUB(0, BV64_SUB(BV64_SUB(BV64_ADD(BV64_SUB(BV64_SUB(0, v3), v4), $c0), $c1.0), $c2.0)), 16), 1), 16));
  goto $47;
$46:
  assert {:block_sourceloc} {:sourceloc_num 58} true;
  $11 := BV64_SDIV(BV64_SUB(BV64_SUB(BV64_ADD(BV64_SUB(BV64_SUB(0, v3), v4), $c0), $c1.0), $c2.0), 16);
  goto $47;
$47:
  assert {:block_sourceloc} {:sourceloc_num 59} true;
  v23 := BV64_SGT(v4, BV64_ADD(BV64_ADD(v4, BV64_MUL(16, $11)), 16));
  goto $truebb16, $falsebb16;
$48:
  assert {:block_sourceloc} {:sourceloc_num 60} true;
  $12 := v4;
  goto $53;
$49:
  assert {:block_sourceloc} {:sourceloc_num 61} true;
  v24 := BV64_SLT(BV64_SUB(BV64_SUB(BV64_ADD(BV64_SUB(BV64_SUB(0, v3), v4), $c0), $c1.0), $c2.0), 0);
  goto $truebb17, $falsebb17;
$50:
  assert {:block_sourceloc} {:sourceloc_num 62} true;
  $13 := BV64_SUB(0, BV64_SDIV(BV64_SUB(BV64_ADD(BV64_SUB(0, BV64_SUB(BV64_SUB(BV64_ADD(BV64_SUB(BV64_SUB(0, v3), v4), $c0), $c1.0), $c2.0)), 16), 1), 16));
  goto $52;
$51:
  assert {:block_sourceloc} {:sourceloc_num 63} true;
  $13 := BV64_SDIV(BV64_SUB(BV64_SUB(BV64_ADD(BV64_SUB(BV64_SUB(0, v3), v4), $c0), $c1.0), $c2.0), 16);
  goto $52;
$52:
  assert {:block_sourceloc} {:sourceloc_num 64} true;
  $12 := BV64_ADD(BV64_ADD(v4, BV64_MUL(16, $13)), 16);
  goto $53;
$53:
  assert {:block_sourceloc} {:sourceloc_num 65} true;
  $c41.0 := $12;
  goto $54;
$54:
  assert {:block_sourceloc} {:sourceloc_num 66} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 67} (if (_READ_HAS_OCCURRED_$$kernel2.shared_A_0 ==> BV32_ZEXT64(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), 32)) == v3) then 1 else 0) != 0;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 68} (if (BV32_AND(BV1_ZEXT32((if __dominator_enabled then 1 else 0)), BV1_ZEXT32((if _READ_HAS_OCCURRED_$$kernel2.shared_A_0 then 1 else 0))) != 0 ==> BV32_ZEXT64(BV32_UREM(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), 32), 16)) == BV64_ADD(BV64_SUB(0, BV64_ADD(v4, 16)), 31)) then 1 else 0) != 0;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 69} (if (_WRITE_HAS_OCCURRED_$$kernel2.shared_A_0 ==> BV32_ZEXT64(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), 32)) == v3) then 1 else 0) != 0;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 70} (if (_WRITE_HAS_OCCURRED_$$kernel2.shared_A_0 ==> BV32_ZEXT64(BV32_UREM(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), 32), 16)) == BV64_ADD(BV64_SUB(0, BV64_ADD(v4, 16)), 31)) then 1 else 0) != 0;
  v25 := BV64_SLT(31, BV64_SUB(BV64_ADD(BV64_SUB(0, $c2.0), BV64_SDIV(BV64_ADD($c0, 1), 2)), 1));
  goto $truebb18, $falsebb18;
$55:
  assert {:block_sourceloc} {:sourceloc_num 71} true;
  $14 := 31;
  goto $57;
$56:
  assert {:block_sourceloc} {:sourceloc_num 72} true;
  $14 := BV64_SUB(BV64_ADD(BV64_SUB(0, $c2.0), BV64_SDIV(BV64_ADD($c0, 1), 2)), 1);
  goto $57;
$57:
  assert {:block_sourceloc} {:sourceloc_num 73} true;
  v26 := BV64_SLE($c41.0, $14);
  goto $truebb19, $falsebb19;
$58:
  assert {:block_sourceloc} {:sourceloc_num 74} true;
  assert {:sourceloc} {:sourceloc_num 75} true;
  v27 := $$A[BV_EXTRACT(BV64_ADD(BV64_MUL(BV64_ADD(v3, $c1.0), BV32_SEXT64($n)), BV64_ADD($c2.0, $c41.0)), 32, 0)];
  assert {:sourceloc} {:sourceloc_num 76} true;
  v28 := $$A[BV_EXTRACT(BV64_ADD(BV64_MUL(BV64_ADD($c2.0, $c41.0), BV32_SEXT64($n)), BV64_SUB(BV64_SUB($c0, $c2.0), $c41.0)), 32, 0)];
  v29 := BV_EXTRACT(BV64_ADD(BV64_SUB(0, $c41.0), 31), 32, 0);
  assert {:sourceloc} {:sourceloc_num 77} true;
  v30 := $$kernel2.shared_A_0[BV32_ADD(BV32_MUL(v2, 32), v29)];
  assert {:sourceloc} {:sourceloc_num 78} true;
  $$kernel2.shared_A_0[BV32_ADD(BV32_MUL(v2, 32), v29)] := FSUB64(v30, FMUL64(v27, v28));
  goto $59;
$59:
  assert {:block_sourceloc} {:sourceloc_num 79} true;
  $c41.0 := BV64_ADD($c41.0, 16);
  goto $54;
$60:
  assert {:block_sourceloc} {:sourceloc_num 80} true;
  goto $61;
$61:
  assert {:block_sourceloc} {:sourceloc_num 81} true;
  call {:sourceloc_num 82} $bugle_barrier(-1, -1);
  v31 := BV64_SGE(BV32_SEXT64($n), BV64_ADD(BV64_ADD(v3, $c1.0), 1));
  goto $truebb20, $falsebb20;
$62:
  assert {:block_sourceloc} {:sourceloc_num 83} true;
  v32 := BV64_SGT(v4, BV64_ADD(BV64_SUB(v4, BV64_MUL(16, BV64_SDIV(BV64_ADD(BV64_SUB(BV64_ADD(BV64_MUL(2, v4), $c0), BV64_MUL(2, $c2.0)), 33), 32))), 48));
  goto $truebb21, $falsebb21;
$63:
  assert {:block_sourceloc} {:sourceloc_num 84} true;
  $15 := v4;
  goto $65;
$64:
  assert {:block_sourceloc} {:sourceloc_num 85} true;
  $15 := BV64_ADD(BV64_SUB(v4, BV64_MUL(16, BV64_SDIV(BV64_ADD(BV64_SUB(BV64_ADD(BV64_MUL(2, v4), $c0), BV64_MUL(2, $c2.0)), 33), 32))), 48);
  goto $65;
$65:
  assert {:block_sourceloc} {:sourceloc_num 86} true;
  $c42.0 := $15;
  goto $66;
$66:
  assert {:block_sourceloc} {:sourceloc_num 87} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 88} (if (_READ_HAS_OCCURRED_$$kernel2.shared_A_0 ==> BV32_ZEXT64(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), 32)) == v3) then 1 else 0) != 0;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 89} (if (_READ_HAS_OCCURRED_$$kernel2.shared_A_0 ==> BV32_ZEXT64(BV32_UREM(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), 32), 16)) == v4) then 1 else 0) != 0;
  v33 := BV64_SLT(31, BV64_ADD(BV64_ADD(BV64_ADD(BV64_SUB(v3, $c0), $c1.0), $c2.0), 30));
  goto $truebb22, $falsebb22;
$67:
  assert {:block_sourceloc} {:sourceloc_num 90} true;
  $16 := 31;
  goto $69;
$68:
  assert {:block_sourceloc} {:sourceloc_num 91} true;
  $16 := BV64_ADD(BV64_ADD(BV64_ADD(BV64_SUB(v3, $c0), $c1.0), $c2.0), 30);
  goto $69;
$69:
  assert {:block_sourceloc} {:sourceloc_num 92} true;
  v34 := BV64_SLE($c42.0, $16);
  goto $truebb23, $falsebb23;
$70:
  assert {:block_sourceloc} {:sourceloc_num 93} true;
  assert {:sourceloc} {:sourceloc_num 94} true;
  v35 := $$kernel2.shared_A_0[BV32_ADD(BV32_MUL(v2, 32), BV_EXTRACT($c42.0, 32, 0))];
  assert {:sourceloc} {:sourceloc_num 95} true;
  $$A[BV_EXTRACT(BV64_ADD(BV64_MUL(BV64_ADD(v3, $c1.0), BV32_SEXT64($n)), BV64_SUB(BV64_ADD(BV64_SUB($c0, $c2.0), $c42.0), 31)), 32, 0)] := v35;
  goto $71;
$71:
  assert {:block_sourceloc} {:sourceloc_num 96} true;
  $c42.0 := BV64_ADD($c42.0, 16);
  goto $66;
$72:
  assert {:block_sourceloc} {:sourceloc_num 97} true;
  goto $73;
$73:
  assert {:block_sourceloc} {:sourceloc_num 98} true;
  goto $74;
$74:
  assert {:block_sourceloc} {:sourceloc_num 99} true;
  $c2.0 := BV64_ADD($c2.0, 8192);
  goto $30;
$75:
  assert {:block_sourceloc} {:sourceloc_num 100} true;
  goto $76;
$76:
  assert {:block_sourceloc} {:sourceloc_num 101} true;
  $c1.0 := BV64_ADD($c1.0, 8192);
  goto $1;
$77:
  assert {:block_sourceloc} {:sourceloc_num 102} true;
  return;
$truebb:
  assume {:partition} v5;
  assert {:block_sourceloc} {:sourceloc_num 103} true;
  goto $2;
$falsebb:
  assume {:partition} !v5;
  assert {:block_sourceloc} {:sourceloc_num 104} true;
  goto $77;
$truebb0:
  assume {:partition} v6;
  assert {:block_sourceloc} {:sourceloc_num 105} true;
  goto $3;
$falsebb0:
  assume {:partition} !v6;
  assert {:block_sourceloc} {:sourceloc_num 106} true;
  goto $4;
$truebb1:
  assume {:partition} v7;
  assert {:block_sourceloc} {:sourceloc_num 107} true;
  goto $6;
$falsebb1:
  assume {:partition} !v7;
  assert {:block_sourceloc} {:sourceloc_num 108} true;
  goto $7;
$truebb2:
  assume {:partition} v8;
  assert {:block_sourceloc} {:sourceloc_num 109} true;
  goto $8;
$falsebb2:
  assume {:partition} !v8;
  assert {:block_sourceloc} {:sourceloc_num 110} true;
  goto $9;
$truebb3:
  assume {:partition} v9;
  assert {:block_sourceloc} {:sourceloc_num 111} true;
  goto $12;
$falsebb3:
  assume {:partition} !v9;
  assert {:block_sourceloc} {:sourceloc_num 112} true;
  goto $13;
$truebb4:
  assume {:partition} v10;
  assert {:block_sourceloc} {:sourceloc_num 113} true;
  goto $15;
$falsebb4:
  assume {:partition} !v10;
  assert {:block_sourceloc} {:sourceloc_num 114} true;
  goto $25;
$truebb5:
  assume {:partition} v11;
  assert {:block_sourceloc} {:sourceloc_num 115} true;
  goto $16;
$falsebb5:
  assume {:partition} !v11;
  assert {:block_sourceloc} {:sourceloc_num 116} true;
  goto $17;
$truebb6:
  assume {:partition} v12;
  assert {:block_sourceloc} {:sourceloc_num 117} true;
  goto $19;
$falsebb6:
  assume {:partition} !v12;
  assert {:block_sourceloc} {:sourceloc_num 118} true;
  goto $20;
$truebb7:
  assume {:partition} v13;
  assert {:block_sourceloc} {:sourceloc_num 119} true;
  goto $21;
$falsebb7:
  assume {:partition} !v13;
  assert {:block_sourceloc} {:sourceloc_num 120} true;
  goto $22;
$truebb8:
  assume {:partition} v14;
  assert {:block_sourceloc} {:sourceloc_num 121} true;
  goto $26;
$falsebb8:
  assume {:partition} !v14;
  assert {:block_sourceloc} {:sourceloc_num 122} true;
  goto $27;
$truebb9:
  assume {:partition} v15;
  assert {:block_sourceloc} {:sourceloc_num 123} true;
  goto $31;
$falsebb9:
  assume {:partition} !v15;
  assert {:block_sourceloc} {:sourceloc_num 124} true;
  goto $75;
$truebb10:
  assume {:partition} v16;
  assert {:block_sourceloc} {:sourceloc_num 125} true;
  goto $32;
$falsebb10:
  assume {:partition} !v16;
  assert {:block_sourceloc} {:sourceloc_num 126} true;
  goto $43;
$truebb11:
  assume {:partition} v17;
  assert {:block_sourceloc} {:sourceloc_num 127} true;
  goto $33;
$falsebb11:
  assume {:partition} !v17;
  assert {:block_sourceloc} {:sourceloc_num 128} true;
  goto $34;
$truebb12:
  assume {:partition} v18;
  assert {:block_sourceloc} {:sourceloc_num 129} true;
  goto $37;
$falsebb12:
  assume {:partition} !v18;
  assert {:block_sourceloc} {:sourceloc_num 130} true;
  goto $38;
$truebb13:
  assume {:partition} v19;
  assert {:block_sourceloc} {:sourceloc_num 131} true;
  goto $40;
$falsebb13:
  assume {:partition} !v19;
  assert {:block_sourceloc} {:sourceloc_num 132} true;
  goto $42;
$truebb14:
  assume {:partition} v21;
  assert {:block_sourceloc} {:sourceloc_num 133} true;
  goto $44;
$falsebb14:
  assume {:partition} !v21;
  assert {:block_sourceloc} {:sourceloc_num 134} true;
  goto $61;
$truebb15:
  assume {:partition} v22;
  assert {:block_sourceloc} {:sourceloc_num 135} true;
  goto $45;
$falsebb15:
  assume {:partition} !v22;
  assert {:block_sourceloc} {:sourceloc_num 136} true;
  goto $46;
$truebb16:
  assume {:partition} v23;
  assert {:block_sourceloc} {:sourceloc_num 137} true;
  goto $48;
$falsebb16:
  assume {:partition} !v23;
  assert {:block_sourceloc} {:sourceloc_num 138} true;
  goto $49;
$truebb17:
  assume {:partition} v24;
  assert {:block_sourceloc} {:sourceloc_num 139} true;
  goto $50;
$falsebb17:
  assume {:partition} !v24;
  assert {:block_sourceloc} {:sourceloc_num 140} true;
  goto $51;
$truebb18:
  assume {:partition} v25;
  assert {:block_sourceloc} {:sourceloc_num 141} true;
  goto $55;
$falsebb18:
  assume {:partition} !v25;
  assert {:block_sourceloc} {:sourceloc_num 142} true;
  goto $56;
$truebb19:
  assume {:partition} v26;
  assert {:block_sourceloc} {:sourceloc_num 143} true;
  goto $58;
$falsebb19:
  assume {:partition} !v26;
  assert {:block_sourceloc} {:sourceloc_num 144} true;
  goto $60;
$truebb20:
  assume {:partition} v31;
  assert {:block_sourceloc} {:sourceloc_num 145} true;
  goto $62;
$falsebb20:
  assume {:partition} !v31;
  assert {:block_sourceloc} {:sourceloc_num 146} true;
  goto $73;
$truebb21:
  assume {:partition} v32;
  assert {:block_sourceloc} {:sourceloc_num 147} true;
  goto $63;
$falsebb21:
  assume {:partition} !v32;
  assert {:block_sourceloc} {:sourceloc_num 148} true;
  goto $64;
$truebb22:
  assume {:partition} v33;
  assert {:block_sourceloc} {:sourceloc_num 149} true;
  goto $67;
$falsebb22:
  assume {:partition} !v33;
  assert {:block_sourceloc} {:sourceloc_num 150} true;
  goto $68;
$truebb23:
  assume {:partition} v34;
  assert {:block_sourceloc} {:sourceloc_num 151} true;
  goto $70;
$falsebb23:
  assume {:partition} !v34;
  assert {:block_sourceloc} {:sourceloc_num 152} true;
  goto $72;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:int, $1:int);
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 32 then 1 else 0) != 0;
axiom (if group_size_y == 16 then 1 else 0) != 0;
axiom (if num_groups_x == 2 then 1 else 0) != 0;
axiom (if num_groups_y == 2 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
