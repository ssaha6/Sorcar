type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP64(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "A"} {:global} $$A : [int]int;
axiom {:array_info "$$A"} {:global} {:elem_width 64} {:source_name "A"} {:source_elem_width 64} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$A : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$A : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$A : bool;

var {:source_name "C"} {:global} $$C : [int]int;
axiom {:array_info "$$C"} {:global} {:elem_width 64} {:source_name "C"} {:source_elem_width 64} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$C : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$C : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$C : bool;

var {:source_name "private_C"} $$private_C : [int]int;
axiom {:array_info "$$private_C"} {:elem_width 64} {:source_name "private_C"} {:source_elem_width 64} {:source_dimensions "1,2"} true;

var {:source_name "shared_A_0"} {:group_shared} $$kernel0.shared_A_0 : [int]int;
axiom {:array_info "$$kernel0.shared_A_0"} {:group_shared} {:elem_width 64} {:source_name "shared_A_0"} {:source_elem_width 64} {:source_dimensions "32,32"} true;
var {:race_checking} {:group_shared} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*,32"} _READ_HAS_OCCURRED_$$kernel0.shared_A_0 : bool;
var {:race_checking} {:group_shared} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*,32"} _WRITE_HAS_OCCURRED_$$kernel0.shared_A_0 : bool;
var {:race_checking} {:group_shared} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*,32"} _ATOMIC_HAS_OCCURRED_$$kernel0.shared_A_0 : bool;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_id_y} group_id_y : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:local_id_y} local_id_y : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function BV32_SEXT64(int) : int;
function BV_EXTRACT(int, int, int) : int;
function FADD64(int, int) : int;
function FMUL64(int, int) : int;
function {:inline true} BV1_ZEXT32(x : int) : int {
  x
}
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_AND(x : int, y : int) : int {
  if x == y then x else (if x == 0 || y == 0 then 0 else BV32_AND_UF(x, y))
}
function BV32_AND_UF(int, int) : int;
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_OR(x : int, y : int) : int {
  if x == y then x else (if x == 0 then y else (if y == 0 then x else BV32_OR_UF(x, y)))
}
function BV32_OR_UF(int, int) : int;
function {:inline true} BV32_SGE(x : int, y : int) : bool {
  x >= y
}
function {:inline true} BV32_SLE(x : int, y : int) : bool {
  x <= y
}
function {:inline true} BV32_SUB(x : int, y : int) : int {
  x - y
}
function {:inline true} BV32_UDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_UGE(x : int, y : int) : bool {
  x >= y
}
function {:inline true} BV32_UREM(x : int, y : int) : int {
  x mod y
}
function {:inline true} BV32_ZEXT64(x : int) : int {
  x
}
function {:inline true} BV64_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV64_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV64_SDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV64_SGE(x : int, y : int) : bool {
  x >= y
}
function {:inline true} BV64_SLE(x : int, y : int) : bool {
  x <= y
}
function {:inline true} BV64_SLT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV64_SREM(x : int, y : int) : int {
  x mod y
}
function {:inline true} BV64_SUB(x : int, y : int) : int {
  x - y
}
procedure {:source_name "kernel0"} {:kernel} $kernel0($alpha:int, $beta:int, $n:int, $m:int)
requires {:sourceloc_num 0} (if $n == 1024 then 1 else 0) != 0;
requires {:sourceloc_num 1} (if $m == 1024 then 1 else 0) != 0;
requires {:sourceloc_num 2} (if BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_SGE($n, 1) then 1 else 0)), BV1_ZEXT32((if BV32_SLE($n, 2147483647) then 1 else 0))), BV1_ZEXT32((if BV32_SGE($m, 0) then 1 else 0))), BV1_ZEXT32((if BV32_SLE($m, 2147483647) then 1 else 0))) != 0 then 1 else 0) != 0;
requires {:procedure_wide_invariant} {:do_not_predicate} {:sourceloc_num 3} (if (_WRITE_HAS_OCCURRED_$$C ==> BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV64_MUL(32, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 0) then 1 else 0)), BV1_ZEXT32((if BV64_SLE(BV64_ADD(BV64_MUL(32, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 8191) then 1 else 0))), BV1_ZEXT32((if BV32_UGE($n, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), $n), 1)) then 1 else 0))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), 0) then 1 else 0))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), $n), BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n)) then 1 else 0))), BV1_ZEXT32((if BV64_SGE(BV32_ZEXT64(BV32_UREM(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), 8192)), BV64_MUL(32, BV32_ZEXT64(group_id_y))) then 1 else 0))), BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV64_MUL(32, BV32_ZEXT64(group_id_y)), 31), BV32_ZEXT64(BV32_UREM(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), 8192))) then 1 else 0))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV64_ADD(BV64_MUL(32, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), $n))), 8192) == 0 then 1 else 0))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV32_ZEXT64(local_id_y), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n))), 16) == 0 then 1 else 0))) != 0) then 1 else 0) != 0;
requires {:procedure_wide_invariant} {:do_not_predicate} {:sourceloc_num 4} (if (_READ_HAS_OCCURRED_$$A ==> BV32_OR(BV32_OR(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $m), $n), 0) then 1 else 0)), BV1_ZEXT32((if BV32_UGE($m, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $m), 1)) then 1 else 0))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $m), 0) then 1 else 0))), BV1_ZEXT32((if BV64_SGE(BV32_ZEXT64(BV32_UREM(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $m), $n), 8192)), BV64_MUL(32, BV32_ZEXT64(group_id_y))) then 1 else 0))), BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV64_MUL(32, BV32_ZEXT64(group_id_y)), 31), BV32_ZEXT64(BV32_UREM(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $m), $n), 8192))) then 1 else 0))), BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV32_SEXT64($n), BV64_MUL(8192, (if BV64_SLT(BV64_SUB(BV64_ADD(BV64_ADD(BV64_MUL(32, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV64_MUL(8192, BV32_ZEXT64(local_id_y))), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $m), $n))), 0) then BV64_SUB(0, BV64_SDIV(BV64_SUB(BV64_ADD(BV64_SUB(0, BV64_SUB(BV64_ADD(BV64_ADD(BV64_MUL(32, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV64_MUL(8192, BV32_ZEXT64(local_id_y))), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $m), $n)))), 8192), 1), 8192)) else BV64_SDIV(BV64_SUB(BV64_ADD(BV64_ADD(BV64_MUL(32, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV64_MUL(8192, BV32_ZEXT64(local_id_y))), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $m), $n))), 8192)))), BV64_ADD(BV64_ADD(BV64_ADD(BV64_MUL(32, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV64_MUL(8192, BV32_ZEXT64(local_id_y))), 1)) then 1 else 0))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV32_ZEXT64(local_id_y), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $m), $n))), 16) == 0 then 1 else 0))), BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_UGE($n, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $m), $n), 1)) then 1 else 0)), BV1_ZEXT32((if BV64_SGE(BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $m), $n)), BV64_ADD(BV64_MUL(32, BV32_ZEXT64(group_id_y)), BV32_ZEXT64(local_id_x))) then 1 else 0))), BV1_ZEXT32((if BV32_UGE($m, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $m), 1)) then 1 else 0))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $m), 0) then 1 else 0))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV64_ADD(BV64_MUL(32, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $m), $n))), 8192) == 0 then 1 else 0))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV32_ZEXT64(local_id_y), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $m))), 16) == 0 then 1 else 0)))), BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_ZEXT64(group_id_y) == BV32_ZEXT64(group_id_x) then 1 else 0)), BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV64_MUL(32, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 0) then 1 else 0))), BV1_ZEXT32((if BV64_SLE(BV64_ADD(BV64_MUL(32, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 8191) then 1 else 0))), BV1_ZEXT32((if BV32_UGE($n, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $m), $n), 1)) then 1 else 0))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $m), $n), 0) then 1 else 0))), BV1_ZEXT32((if BV32_UGE($m, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $m), 1)) then 1 else 0))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $m), 0) then 1 else 0))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV32_ZEXT64(local_id_x), BV32_ZEXT64(local_id_y)), 16) == 0 then 1 else 0))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV64_ADD(BV64_MUL(32, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $m), $n))), 8192) == 0 then 1 else 0)))) != 0) then 1 else 0) != 0;
requires {:procedure_wide_invariant} {:do_not_predicate} {:sourceloc_num 5} (if (_READ_HAS_OCCURRED_$$C ==> BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV64_MUL(32, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 0) then 1 else 0)), BV1_ZEXT32((if BV64_SLE(BV64_ADD(BV64_MUL(32, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 8191) then 1 else 0))), BV1_ZEXT32((if BV32_UGE($n, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), $n), 1)) then 1 else 0))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), 0) then 1 else 0))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), $n), BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n)) then 1 else 0))), BV1_ZEXT32((if BV64_SGE(BV32_ZEXT64(BV32_UREM(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), 8192)), BV64_MUL(32, BV32_ZEXT64(group_id_y))) then 1 else 0))), BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV64_MUL(32, BV32_ZEXT64(group_id_y)), 31), BV32_ZEXT64(BV32_UREM(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), 8192))) then 1 else 0))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV64_ADD(BV64_MUL(32, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n), $n))), 8192) == 0 then 1 else 0))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV32_ZEXT64(local_id_y), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $n))), 16) == 0 then 1 else 0))) != 0) then 1 else 0) != 0;
{
  var $c0.0:int;
  var $c1.0:int;
  var $0:int;
  var $c2.0:int;
  var $c4.0:int;
  var $1:int;
  var $c3.0:int;
  var $2:int;
  var v2:int;
  var v3:int;
  var v4:int;
  var v0:int;
  var v1:int;
  var v5:bool;
  var v6:bool;
  var v7:bool;
  var v8:bool;
  var v9:bool;
  var v10:int;
  var v11:bool;
  var v12:int;
  var v13:bool;
  var v14:bool;
  var v15:bool;
  var v16:bool;
  var v17:int;
  var v18:bool;
  var v19:bool;
  var v20:bool;
  var v21:int;
  var v22:bool;
  var v23:int;
  var v24:bool;
  var v25:bool;
  var v26:int;
  var v27:int;
  var v28:int;
  var v29:bool;
  var v30:int;
  var v31:int;
  var v32:int;
  var v33:bool;
  var v34:bool;
  var v35:bool;
  var v36:int;
  var v37:bool;
  var v38:int;
  var v39:bool;
  var v40:bool;
  var v41:int;
  var v42:bool;
  var v43:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  v0 := BV32_ZEXT64(group_id_x);
  v1 := BV32_ZEXT64(group_id_y);
  v2 := local_id_x;
  v3 := BV32_ZEXT64(v2);
  v4 := BV32_ZEXT64(local_id_y);
  $c0.0 := BV64_MUL(32, v0);
  goto $1;
$1:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  v5 := BV64_SLT($c0.0, BV32_SEXT64($n));
  goto $truebb, $falsebb;
$2:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  $c1.0 := BV64_MUL(32, v1);
  goto $3;
$3:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  v6 := BV64_SLT(BV32_SEXT64(BV32_SUB($n, 1)), BV64_ADD($c0.0, 31));
  goto $truebb0, $falsebb0;
$4:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  $0 := BV32_SEXT64(BV32_SUB($n, 1));
  goto $6;
$5:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  $0 := BV64_ADD($c0.0, 31);
  goto $6;
$6:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  v7 := BV64_SLE($c1.0, $0);
  goto $truebb1, $falsebb1;
$7:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  v8 := BV64_SGE(BV32_SEXT64($n), BV64_ADD(BV64_ADD(v3, $c0.0), 1));
  goto $truebb2, $falsebb2;
$8:
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  v9 := BV64_SGE(BV64_ADD(v3, $c0.0), BV64_ADD(v4, $c1.0));
  goto $truebb3, $falsebb3;
$9:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  assert {:sourceloc} {:sourceloc_num 16} true;
  v10 := $$C[BV_EXTRACT(BV64_ADD(BV64_MUL(BV64_ADD(v3, $c0.0), BV32_SEXT64($n)), BV64_ADD(v4, $c1.0)), 32, 0)];
  assert {:sourceloc} {:sourceloc_num 17} true;
  $$private_C[0] := v10;
  v11 := BV64_SGE(BV64_ADD(v3, $c0.0), BV64_ADD(BV64_ADD(v4, $c1.0), 16));
  goto $truebb4, $falsebb4;
$10:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  assert {:sourceloc} {:sourceloc_num 19} true;
  v12 := $$C[BV_EXTRACT(BV64_ADD(BV64_MUL(BV64_ADD(v3, $c0.0), BV32_SEXT64($n)), BV64_ADD(BV64_ADD(v4, $c1.0), 16)), 32, 0)];
  assert {:sourceloc} {:sourceloc_num 20} true;
  $$private_C[1] := v12;
  goto $11;
$11:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  goto $12;
$12:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  $c2.0 := 0;
  goto $13;
$13:
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  v13 := BV64_SLT($c2.0, BV32_SEXT64($m));
  goto $truebb5, $falsebb5;
$14:
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  v14 := BV64_SGE(BV32_SEXT64($n), BV64_ADD(BV64_ADD(v3, $c0.0), 1));
  goto $truebb6, $falsebb6;
$15:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  $c4.0 := v4;
  goto $16;
$16:
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  v15 := BV64_SLT(31, BV64_SUB(BV64_SUB(BV32_SEXT64($m), $c2.0), 1));
  goto $truebb7, $falsebb7;
$17:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  $1 := 31;
  goto $19;
$18:
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  $1 := BV64_SUB(BV64_SUB(BV32_SEXT64($m), $c2.0), 1);
  goto $19;
$19:
  assert {:block_sourceloc} {:sourceloc_num 29} true;
  v16 := BV64_SLE($c4.0, $1);
  goto $truebb8, $falsebb8;
$20:
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  assert {:sourceloc} {:sourceloc_num 31} true;
  v17 := $$A[BV_EXTRACT(BV64_ADD(BV64_MUL(BV64_ADD(v3, $c0.0), BV32_SEXT64($m)), BV64_ADD($c2.0, $c4.0)), 32, 0)];
  assert {:sourceloc} {:sourceloc_num 32} true;
  $$kernel0.shared_A_0[BV32_ADD(BV32_MUL(v2, 32), BV_EXTRACT($c4.0, 32, 0))] := v17;
  goto $21;
$21:
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  $c4.0 := BV64_ADD($c4.0, 16);
  goto $16;
$22:
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  goto $23;
$23:
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  call {:sourceloc_num 36} $bugle_barrier(-1, -1);
  v18 := BV64_SGE(BV32_SEXT64($n), BV64_ADD(BV64_ADD(v3, $c0.0), 1));
  goto $truebb9, $falsebb9;
$24:
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  v19 := BV64_SGE(BV64_ADD(v3, $c0.0), BV64_ADD(v4, $c1.0));
  goto $truebb10, $falsebb10;
$25:
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  v20 := $c2.0 == 0;
  goto $truebb11, $falsebb11;
$26:
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  assert {:sourceloc} {:sourceloc_num 40} true;
  v21 := $$private_C[0];
  assert {:sourceloc} {:sourceloc_num 41} true;
  $$private_C[0] := FMUL64(v21, $beta);
  v22 := BV64_SGE(BV64_ADD(v3, $c0.0), BV64_ADD(BV64_ADD(v4, $c1.0), 16));
  goto $truebb12, $falsebb12;
$27:
  assert {:block_sourceloc} {:sourceloc_num 42} true;
  assert {:sourceloc} {:sourceloc_num 43} true;
  v23 := $$private_C[1];
  assert {:sourceloc} {:sourceloc_num 44} true;
  $$private_C[1] := FMUL64(v23, $beta);
  goto $28;
$28:
  assert {:block_sourceloc} {:sourceloc_num 45} true;
  goto $29;
$29:
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  $c3.0 := 0;
  goto $30;
$30:
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  v24 := BV64_SLT(31, BV64_SUB(BV64_SUB(BV32_SEXT64($m), $c2.0), 1));
  goto $truebb13, $falsebb13;
$31:
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  $2 := 31;
  goto $33;
$32:
  assert {:block_sourceloc} {:sourceloc_num 49} true;
  $2 := BV64_SUB(BV64_SUB(BV32_SEXT64($m), $c2.0), 1);
  goto $33;
$33:
  assert {:block_sourceloc} {:sourceloc_num 50} true;
  v25 := BV64_SLE($c3.0, $2);
  goto $truebb14, $falsebb14;
$34:
  assert {:block_sourceloc} {:sourceloc_num 51} true;
  assert {:sourceloc} {:sourceloc_num 52} true;
  v26 := $$kernel0.shared_A_0[BV32_ADD(BV32_MUL(v2, 32), BV_EXTRACT($c3.0, 32, 0))];
  assert {:sourceloc} {:sourceloc_num 53} true;
  v27 := $$A[BV_EXTRACT(BV64_ADD(BV64_MUL(BV64_ADD(v4, $c1.0), BV32_SEXT64($m)), BV64_ADD($c2.0, $c3.0)), 32, 0)];
  assert {:sourceloc} {:sourceloc_num 54} true;
  v28 := $$private_C[0];
  assert {:sourceloc} {:sourceloc_num 55} true;
  $$private_C[0] := FADD64(v28, FMUL64(FMUL64($alpha, v26), v27));
  v29 := BV64_SGE(BV64_ADD(v3, $c0.0), BV64_ADD(BV64_ADD(v4, $c1.0), 16));
  goto $truebb15, $falsebb15;
$35:
  assert {:block_sourceloc} {:sourceloc_num 56} true;
  assert {:sourceloc} {:sourceloc_num 57} true;
  v30 := $$kernel0.shared_A_0[BV32_ADD(BV32_MUL(v2, 32), BV_EXTRACT($c3.0, 32, 0))];
  assert {:sourceloc} {:sourceloc_num 58} true;
  v31 := $$A[BV_EXTRACT(BV64_ADD(BV64_MUL(BV64_ADD(BV64_ADD(v4, $c1.0), 16), BV32_SEXT64($m)), BV64_ADD($c2.0, $c3.0)), 32, 0)];
  assert {:sourceloc} {:sourceloc_num 59} true;
  v32 := $$private_C[1];
  assert {:sourceloc} {:sourceloc_num 60} true;
  $$private_C[1] := FADD64(v32, FMUL64(FMUL64($alpha, v30), v31));
  goto $36;
$36:
  assert {:block_sourceloc} {:sourceloc_num 61} true;
  goto $37;
$37:
  assert {:block_sourceloc} {:sourceloc_num 62} true;
  $c3.0 := BV64_ADD($c3.0, 1);
  goto $30;
$38:
  assert {:block_sourceloc} {:sourceloc_num 63} true;
  goto $39;
$39:
  assert {:block_sourceloc} {:sourceloc_num 64} true;
  call {:sourceloc_num 65} $bugle_barrier(-1, -1);
  goto $40;
$40:
  assert {:block_sourceloc} {:sourceloc_num 66} true;
  $c2.0 := BV64_ADD($c2.0, 32);
  goto $13;
$41:
  assert {:block_sourceloc} {:sourceloc_num 67} true;
  v33 := $m == 0;
  goto $truebb16, $falsebb16;
$42:
  assert {:block_sourceloc} {:sourceloc_num 68} true;
  call {:sourceloc_num 69} $bugle_barrier(-1, -1);
  v34 := BV64_SGE(BV32_SEXT64($n), BV64_ADD(BV64_ADD(v3, $c0.0), 1));
  goto $truebb17, $falsebb17;
$43:
  assert {:block_sourceloc} {:sourceloc_num 70} true;
  v35 := BV64_SGE(BV64_ADD(v3, $c0.0), BV64_ADD(v4, $c1.0));
  goto $truebb18, $falsebb18;
$44:
  assert {:block_sourceloc} {:sourceloc_num 71} true;
  assert {:sourceloc} {:sourceloc_num 72} true;
  v36 := $$private_C[0];
  assert {:sourceloc} {:sourceloc_num 73} true;
  $$private_C[0] := FMUL64(v36, $beta);
  v37 := BV64_SGE(BV64_ADD(v3, $c0.0), BV64_ADD(BV64_ADD(v4, $c1.0), 16));
  goto $truebb19, $falsebb19;
$45:
  assert {:block_sourceloc} {:sourceloc_num 74} true;
  assert {:sourceloc} {:sourceloc_num 75} true;
  v38 := $$private_C[1];
  assert {:sourceloc} {:sourceloc_num 76} true;
  $$private_C[1] := FMUL64(v38, $beta);
  goto $46;
$46:
  assert {:block_sourceloc} {:sourceloc_num 77} true;
  goto $47;
$47:
  assert {:block_sourceloc} {:sourceloc_num 78} true;
  call {:sourceloc_num 79} $bugle_barrier(-1, -1);
  goto $48;
$48:
  assert {:block_sourceloc} {:sourceloc_num 80} true;
  v39 := BV64_SGE(BV32_SEXT64($n), BV64_ADD(BV64_ADD(v3, $c0.0), 1));
  goto $truebb20, $falsebb20;
$49:
  assert {:block_sourceloc} {:sourceloc_num 81} true;
  v40 := BV64_SGE(BV64_ADD(v3, $c0.0), BV64_ADD(v4, $c1.0));
  goto $truebb21, $falsebb21;
$50:
  assert {:block_sourceloc} {:sourceloc_num 82} true;
  assert {:sourceloc} {:sourceloc_num 83} true;
  v41 := $$private_C[0];
  assert {:sourceloc} {:sourceloc_num 84} true;
  $$C[BV_EXTRACT(BV64_ADD(BV64_MUL(BV64_ADD(v3, $c0.0), BV32_SEXT64($n)), BV64_ADD(v4, $c1.0)), 32, 0)] := v41;
  v42 := BV64_SGE(BV64_ADD(v3, $c0.0), BV64_ADD(BV64_ADD(v4, $c1.0), 16));
  goto $truebb22, $falsebb22;
$51:
  assert {:block_sourceloc} {:sourceloc_num 85} true;
  assert {:sourceloc} {:sourceloc_num 86} true;
  v43 := $$private_C[1];
  assert {:sourceloc} {:sourceloc_num 87} true;
  $$C[BV_EXTRACT(BV64_ADD(BV64_MUL(BV64_ADD(v3, $c0.0), BV32_SEXT64($n)), BV64_ADD(BV64_ADD(v4, $c1.0), 16)), 32, 0)] := v43;
  goto $52;
$52:
  assert {:block_sourceloc} {:sourceloc_num 88} true;
  goto $53;
$53:
  assert {:block_sourceloc} {:sourceloc_num 89} true;
  call {:sourceloc_num 90} $bugle_barrier(-1, -1);
  goto $54;
$54:
  assert {:block_sourceloc} {:sourceloc_num 91} true;
  $c1.0 := BV64_ADD($c1.0, 8192);
  goto $3;
$55:
  assert {:block_sourceloc} {:sourceloc_num 92} true;
  goto $56;
$56:
  assert {:block_sourceloc} {:sourceloc_num 93} true;
  $c0.0 := BV64_ADD($c0.0, 8192);
  goto $1;
$57:
  assert {:block_sourceloc} {:sourceloc_num 94} true;
  return;
$truebb:
  assume {:partition} v5;
  assert {:block_sourceloc} {:sourceloc_num 95} true;
  goto $2;
$falsebb:
  assume {:partition} !v5;
  assert {:block_sourceloc} {:sourceloc_num 96} true;
  goto $57;
$truebb0:
  assume {:partition} v6;
  assert {:block_sourceloc} {:sourceloc_num 97} true;
  goto $4;
$falsebb0:
  assume {:partition} !v6;
  assert {:block_sourceloc} {:sourceloc_num 98} true;
  goto $5;
$truebb1:
  assume {:partition} v7;
  assert {:block_sourceloc} {:sourceloc_num 99} true;
  goto $7;
$falsebb1:
  assume {:partition} !v7;
  assert {:block_sourceloc} {:sourceloc_num 100} true;
  goto $55;
$truebb2:
  assume {:partition} v8;
  assert {:block_sourceloc} {:sourceloc_num 101} true;
  goto $8;
$falsebb2:
  assume {:partition} !v8;
  assert {:block_sourceloc} {:sourceloc_num 102} true;
  goto $12;
$truebb3:
  assume {:partition} v9;
  assert {:block_sourceloc} {:sourceloc_num 103} true;
  goto $9;
$falsebb3:
  assume {:partition} !v9;
  assert {:block_sourceloc} {:sourceloc_num 104} true;
  goto $12;
$truebb4:
  assume {:partition} v11;
  assert {:block_sourceloc} {:sourceloc_num 105} true;
  goto $10;
$falsebb4:
  assume {:partition} !v11;
  assert {:block_sourceloc} {:sourceloc_num 106} true;
  goto $11;
$truebb5:
  assume {:partition} v13;
  assert {:block_sourceloc} {:sourceloc_num 107} true;
  goto $14;
$falsebb5:
  assume {:partition} !v13;
  assert {:block_sourceloc} {:sourceloc_num 108} true;
  goto $41;
$truebb6:
  assume {:partition} v14;
  assert {:block_sourceloc} {:sourceloc_num 109} true;
  goto $15;
$falsebb6:
  assume {:partition} !v14;
  assert {:block_sourceloc} {:sourceloc_num 110} true;
  goto $23;
$truebb7:
  assume {:partition} v15;
  assert {:block_sourceloc} {:sourceloc_num 111} true;
  goto $17;
$falsebb7:
  assume {:partition} !v15;
  assert {:block_sourceloc} {:sourceloc_num 112} true;
  goto $18;
$truebb8:
  assume {:partition} v16;
  assert {:block_sourceloc} {:sourceloc_num 113} true;
  goto $20;
$falsebb8:
  assume {:partition} !v16;
  assert {:block_sourceloc} {:sourceloc_num 114} true;
  goto $22;
$truebb9:
  assume {:partition} v18;
  assert {:block_sourceloc} {:sourceloc_num 115} true;
  goto $24;
$falsebb9:
  assume {:partition} !v18;
  assert {:block_sourceloc} {:sourceloc_num 116} true;
  goto $39;
$truebb10:
  assume {:partition} v19;
  assert {:block_sourceloc} {:sourceloc_num 117} true;
  goto $25;
$falsebb10:
  assume {:partition} !v19;
  assert {:block_sourceloc} {:sourceloc_num 118} true;
  goto $39;
$truebb11:
  assume {:partition} v20;
  assert {:block_sourceloc} {:sourceloc_num 119} true;
  goto $26;
$falsebb11:
  assume {:partition} !v20;
  assert {:block_sourceloc} {:sourceloc_num 120} true;
  goto $29;
$truebb12:
  assume {:partition} v22;
  assert {:block_sourceloc} {:sourceloc_num 121} true;
  goto $27;
$falsebb12:
  assume {:partition} !v22;
  assert {:block_sourceloc} {:sourceloc_num 122} true;
  goto $28;
$truebb13:
  assume {:partition} v24;
  assert {:block_sourceloc} {:sourceloc_num 123} true;
  goto $31;
$falsebb13:
  assume {:partition} !v24;
  assert {:block_sourceloc} {:sourceloc_num 124} true;
  goto $32;
$truebb14:
  assume {:partition} v25;
  assert {:block_sourceloc} {:sourceloc_num 125} true;
  goto $34;
$falsebb14:
  assume {:partition} !v25;
  assert {:block_sourceloc} {:sourceloc_num 126} true;
  goto $38;
$truebb15:
  assume {:partition} v29;
  assert {:block_sourceloc} {:sourceloc_num 127} true;
  goto $35;
$falsebb15:
  assume {:partition} !v29;
  assert {:block_sourceloc} {:sourceloc_num 128} true;
  goto $36;
$truebb16:
  assume {:partition} v33;
  assert {:block_sourceloc} {:sourceloc_num 129} true;
  goto $42;
$falsebb16:
  assume {:partition} !v33;
  assert {:block_sourceloc} {:sourceloc_num 130} true;
  goto $48;
$truebb17:
  assume {:partition} v34;
  assert {:block_sourceloc} {:sourceloc_num 131} true;
  goto $43;
$falsebb17:
  assume {:partition} !v34;
  assert {:block_sourceloc} {:sourceloc_num 132} true;
  goto $47;
$truebb18:
  assume {:partition} v35;
  assert {:block_sourceloc} {:sourceloc_num 133} true;
  goto $44;
$falsebb18:
  assume {:partition} !v35;
  assert {:block_sourceloc} {:sourceloc_num 134} true;
  goto $47;
$truebb19:
  assume {:partition} v37;
  assert {:block_sourceloc} {:sourceloc_num 135} true;
  goto $45;
$falsebb19:
  assume {:partition} !v37;
  assert {:block_sourceloc} {:sourceloc_num 136} true;
  goto $46;
$truebb20:
  assume {:partition} v39;
  assert {:block_sourceloc} {:sourceloc_num 137} true;
  goto $49;
$falsebb20:
  assume {:partition} !v39;
  assert {:block_sourceloc} {:sourceloc_num 138} true;
  goto $53;
$truebb21:
  assume {:partition} v40;
  assert {:block_sourceloc} {:sourceloc_num 139} true;
  goto $50;
$falsebb21:
  assume {:partition} !v40;
  assert {:block_sourceloc} {:sourceloc_num 140} true;
  goto $53;
$truebb22:
  assume {:partition} v42;
  assert {:block_sourceloc} {:sourceloc_num 141} true;
  goto $51;
$falsebb22:
  assume {:partition} !v42;
  assert {:block_sourceloc} {:sourceloc_num 142} true;
  goto $52;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:int, $1:int);
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 32 then 1 else 0) != 0;
axiom (if group_size_y == 16 then 1 else 0) != 0;
axiom (if num_groups_x == 32 then 1 else 0) != 0;
axiom (if num_groups_y == 32 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
