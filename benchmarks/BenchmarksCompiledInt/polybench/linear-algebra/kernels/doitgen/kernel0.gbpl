type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP64(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "sum"} {:global} $$sum : [int]int;
axiom {:array_info "$$sum"} {:global} {:elem_width 64} {:source_name "sum"} {:source_elem_width 64} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$sum : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$sum : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$sum : bool;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function BV32_SEXT64(int) : int;
function BV_EXTRACT(int, int, int) : int;
function {:inline true} BV1_ZEXT32(x : int) : int {
  x
}
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_AND(x : int, y : int) : int {
  if x == y then x else (if x == 0 || y == 0 then 0 else BV32_AND_UF(x, y))
}
function BV32_AND_UF(int, int) : int;
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SGE(x : int, y : int) : bool {
  x >= y
}
function {:inline true} BV32_SLE(x : int, y : int) : bool {
  x <= y
}
function {:inline true} BV32_UDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_UGE(x : int, y : int) : bool {
  x >= y
}
function {:inline true} BV32_UREM(x : int, y : int) : int {
  x mod y
}
function {:inline true} BV32_ZEXT64(x : int) : int {
  x
}
function {:inline true} BV64_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV64_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV64_SGE(x : int, y : int) : bool {
  x >= y
}
function {:inline true} BV64_SLE(x : int, y : int) : bool {
  x <= y
}
function {:inline true} BV64_SLT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV64_SREM(x : int, y : int) : int {
  x mod y
}
function {:inline true} BV64_SUB(x : int, y : int) : int {
  x - y
}
procedure {:source_name "kernel0"} {:kernel} $kernel0($np:int, $nq:int, $nr:int, $c0:int, $c1:int)
requires {:sourceloc_num 0} (if $np == 512 then 1 else 0) != 0;
requires {:sourceloc_num 1} (if $nq == 512 then 1 else 0) != 0;
requires {:sourceloc_num 2} (if $nr == 512 then 1 else 0) != 0;
requires {:sourceloc_num 3} (if BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_SGE($np, 1) then 1 else 0)), BV1_ZEXT32((if BV32_SLE($np, 2147483647) then 1 else 0))), BV1_ZEXT32((if BV32_SLE($nq, 2147483647) then 1 else 0))), BV1_ZEXT32((if BV32_SLE($nr, 2147483647) then 1 else 0))), BV1_ZEXT32((if BV64_SGE(BV32_SEXT64($nr), BV64_ADD($c0, 1)) then 1 else 0))), BV1_ZEXT32((if BV64_SGE($c0, 0) then 1 else 0))), BV1_ZEXT32((if BV64_SGE(BV32_SEXT64($nq), BV64_ADD($c1, 1)) then 1 else 0))), BV1_ZEXT32((if BV64_SGE($c1, 0) then 1 else 0))) != 0 then 1 else 0) != 0;
requires {:procedure_wide_invariant} {:do_not_predicate} {:sourceloc_num 4} (if (_WRITE_HAS_OCCURRED_$$sum ==> BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV64_MUL(32, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 0) then 1 else 0)), BV1_ZEXT32((if BV64_SLE(BV64_ADD(BV64_MUL(32, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 1048575) then 1 else 0))), BV1_ZEXT32((if BV32_UGE($np, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $np), 1)) then 1 else 0))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $np), 0) then 1 else 0))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV64_ADD(BV64_MUL(32, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8, _WATCHED_OFFSET), 8), $np))), 1048576) == 0 then 1 else 0))) != 0) then 1 else 0) != 0;
{
  var $c2.0:int;
  var v0:int;
  var v1:int;
  var v2:bool;
  var v3:bool;
$0:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  v0 := BV32_ZEXT64(group_id_x);
  v1 := BV32_ZEXT64(local_id_x);
  $c2.0 := BV64_MUL(32, v0);
  goto $1;
$1:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  v2 := BV64_SLT($c2.0, BV32_SEXT64($np));
  goto $truebb, $falsebb;
$2:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  v3 := BV64_SGE(BV32_SEXT64($np), BV64_ADD(BV64_ADD(v1, $c2.0), 1));
  goto $truebb0, $falsebb0;
$3:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  assert {:sourceloc} {:sourceloc_num 9} true;
  $$sum[BV_EXTRACT(BV64_ADD(v1, $c2.0), 32, 0)] := 0;
  goto $4;
$4:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  goto $5;
$5:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  $c2.0 := BV64_ADD($c2.0, 1048576);
  goto $1;
$6:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  return;
$truebb:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  goto $2;
$falsebb:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  goto $6;
$truebb0:
  assume {:partition} v3;
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  goto $3;
$falsebb0:
  assume {:partition} !v3;
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  goto $4;
}
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 32 then 1 else 0) != 0;
axiom (if num_groups_x == 16 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
