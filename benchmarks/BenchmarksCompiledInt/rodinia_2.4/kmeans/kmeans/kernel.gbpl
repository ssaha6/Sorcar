type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "feature"} {:global} $$feature : [int]int;
axiom {:array_info "$$feature"} {:global} {:elem_width 32} {:source_name "feature"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$feature : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$feature : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$feature : bool;

var {:source_name "clusters"} {:global} $$clusters : [int]int;
axiom {:array_info "$$clusters"} {:global} {:elem_width 32} {:source_name "clusters"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$clusters : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$clusters : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$clusters : bool;

var {:source_name "membership"} {:global} $$membership : [int]int;
axiom {:array_info "$$membership"} {:global} {:elem_width 32} {:source_name "membership"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$membership : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$membership : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$membership : bool;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function FADD32(int, int) : int;
function FLT32(int, int) : bool;
function FMUL32(int, int) : int;
function FSUB32(int, int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SLT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV32_ULT(x : int, y : int) : bool {
  x < y
}
procedure {:source_name "kmeans_kernel_c"} {:kernel} $kmeans_kernel_c($npoints:int, $nclusters:int, $nfeatures:int, $offset:int, $size:int)
{
  var $index.0:int;
  var $min_dist.0:int;
  var $i.0:int;
  var $ans.0:int;
  var $l.0:int;
  var $index.1:int;
  var $min_dist.1:int;
  var v0:int;
  var v1:bool;
  var v2:bool;
  var v3:bool;
  var v4:int;
  var v5:int;
  var v6:int;
  var v7:int;
  var v8:bool;
$0:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  v1 := BV32_ULT(v0, $npoints);
  goto $truebb, $falsebb;
$1:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  $index.0, $min_dist.0, $i.0 := 0, 2139095039, 0;
  goto $2;
$2:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v2 := BV32_SLT($i.0, $nclusters);
  goto $truebb0, $falsebb0;
$3:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  $ans.0, $l.0 := 0, 0;
  goto $4;
$4:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  v3 := BV32_SLT($l.0, $nfeatures);
  goto $truebb1, $falsebb1;
$5:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  assert {:sourceloc} {:sourceloc_num 6} true;
  v4 := $$feature[BV32_ADD(BV32_MUL($l.0, $npoints), v0)];
  assert {:sourceloc} {:sourceloc_num 7} true;
  v5 := $$clusters[BV32_ADD(BV32_MUL($i.0, $nfeatures), $l.0)];
  assert {:sourceloc} {:sourceloc_num 8} true;
  v6 := $$feature[BV32_ADD(BV32_MUL($l.0, $npoints), v0)];
  assert {:sourceloc} {:sourceloc_num 9} true;
  v7 := $$clusters[BV32_ADD(BV32_MUL($i.0, $nfeatures), $l.0)];
  goto $6;
$6:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  $ans.0, $l.0 := FADD32($ans.0, FMUL32(FSUB32(v4, v5), FSUB32(v6, v7))), BV32_ADD($l.0, 1);
  goto $4;
$7:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  v8 := FLT32($ans.0, $min_dist.0);
  goto $truebb2, $falsebb2;
$8:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  $index.1, $min_dist.1 := $i.0, $ans.0;
  goto $9;
$9:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  goto $10;
$10:
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  $index.0, $min_dist.0, $i.0 := $index.1, $min_dist.1, BV32_ADD($i.0, 1);
  goto $2;
$11:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  assert {:sourceloc} {:sourceloc_num 16} true;
  $$membership[v0] := $index.0;
  goto $12;
$12:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  return;
$truebb:
  assume {:partition} v1;
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  goto $1;
$falsebb:
  assume {:partition} !v1;
  assert {:block_sourceloc} {:sourceloc_num 19} true;
  goto $12;
$truebb0:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  goto $3;
$falsebb0:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  goto $11;
$truebb1:
  assume {:partition} v3;
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  goto $5;
$falsebb1:
  assume {:partition} !v3;
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  goto $7;
$truebb2:
  assume {:partition} v8;
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  goto $8;
$falsebb2:
  assume {:partition} !v8;
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  $index.1, $min_dist.1 := $index.0, $min_dist.0;
  goto $9;
}
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 256 then 1 else 0) != 0;
axiom (if num_groups_x == 1930 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
