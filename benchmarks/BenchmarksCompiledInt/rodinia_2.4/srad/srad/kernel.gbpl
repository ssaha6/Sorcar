type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "d_iN"} {:global} $$d_iN : [int]int;
axiom {:array_info "$$d_iN"} {:global} {:elem_width 32} {:source_name "d_iN"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_iN : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_iN : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_iN : bool;

var {:source_name "d_iS"} {:global} $$d_iS : [int]int;
axiom {:array_info "$$d_iS"} {:global} {:elem_width 32} {:source_name "d_iS"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_iS : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_iS : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_iS : bool;

var {:source_name "d_jE"} {:global} $$d_jE : [int]int;
axiom {:array_info "$$d_jE"} {:global} {:elem_width 32} {:source_name "d_jE"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_jE : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_jE : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_jE : bool;

var {:source_name "d_jW"} {:global} $$d_jW : [int]int;
axiom {:array_info "$$d_jW"} {:global} {:elem_width 32} {:source_name "d_jW"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_jW : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_jW : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_jW : bool;

var {:source_name "d_dN"} {:global} $$d_dN : [int]int;
axiom {:array_info "$$d_dN"} {:global} {:elem_width 32} {:source_name "d_dN"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_dN : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_dN : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_dN : bool;

var {:source_name "d_dS"} {:global} $$d_dS : [int]int;
axiom {:array_info "$$d_dS"} {:global} {:elem_width 32} {:source_name "d_dS"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_dS : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_dS : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_dS : bool;

var {:source_name "d_dE"} {:global} $$d_dE : [int]int;
axiom {:array_info "$$d_dE"} {:global} {:elem_width 32} {:source_name "d_dE"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_dE : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_dE : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_dE : bool;

var {:source_name "d_dW"} {:global} $$d_dW : [int]int;
axiom {:array_info "$$d_dW"} {:global} {:elem_width 32} {:source_name "d_dW"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_dW : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_dW : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_dW : bool;

var {:source_name "d_c"} {:global} $$d_c : [int]int;
axiom {:array_info "$$d_c"} {:global} {:elem_width 32} {:source_name "d_c"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_c : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_c : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_c : bool;

var {:source_name "d_I"} {:global} $$d_I : [int]int;
axiom {:array_info "$$d_I"} {:global} {:elem_width 32} {:source_name "d_I"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_I : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_I : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_I : bool;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function BV32_SEXT64(int) : int;
function FADD32(int, int) : int;
function FADD64(int, int) : int;
function FDIV32(int, int) : int;
function FDIV64(int, int) : int;
function FLT32(int, int) : bool;
function FMUL32(int, int) : int;
function FMUL64(int, int) : int;
function FP32_CONV64(int) : int;
function FP64_CONV32(int) : int;
function FSUB32(int, int) : int;
function FSUB64(int, int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_SREM(x : int, y : int) : int {
  x mod y
}
function {:inline true} BV32_SUB(x : int, y : int) : int {
  x - y
}
function {:inline true} BV64_SLT(x : int, y : int) : bool {
  x < y
}
procedure {:source_name "srad_kernel"} {:kernel} $srad_kernel($d_lambda:int, $d_Nr:int, $d_Nc:int, $d_Ne:int, $d_q0sqr:int)
{
  var $row.0:int;
  var $col.0:int;
  var $d_c_loc.1:int;
  var $d_c_loc.0:int;
  var v0:int;
  var v1:int;
  var v2:bool;
  var v3:bool;
  var v4:int;
  var v5:int;
  var v6:int;
  var v7:int;
  var v8:int;
  var v9:int;
  var v10:int;
  var v11:int;
  var v12:int;
  var v13:int;
  var v14:int;
  var v15:int;
  var v16:int;
  var v17:int;
  var v18:int;
  var v19:int;
  var v20:bool;
  var v21:bool;
$0:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, 512), local_id_x);
  v1 := BV32_SUB(BV32_ADD(BV32_SDIV(BV32_ADD(v0, 1), $d_Nr), 1), 1);
  v2 := BV32_SREM(BV32_ADD(v0, 1), $d_Nr) == 0;
  goto $truebb, $falsebb;
$1:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  $row.0, $col.0 := BV32_SUB($d_Nr, 1), BV32_SUB(v1, 1);
  goto $2;
$2:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v3 := BV64_SLT(BV32_SEXT64(v0), $d_Ne);
  goto $truebb0, $falsebb0;
$3:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  assert {:sourceloc} {:sourceloc_num 4} true;
  v4 := $$d_I[v0];
  assert {:sourceloc} {:sourceloc_num 5} true;
  v5 := $$d_iN[$row.0];
  assert {:sourceloc} {:sourceloc_num 6} true;
  v6 := $$d_I[BV32_ADD(v5, BV32_MUL($d_Nr, $col.0))];
  v7 := FSUB32(v6, v4);
  assert {:sourceloc} {:sourceloc_num 7} true;
  v8 := $$d_iS[$row.0];
  assert {:sourceloc} {:sourceloc_num 8} true;
  v9 := $$d_I[BV32_ADD(v8, BV32_MUL($d_Nr, $col.0))];
  v10 := FSUB32(v9, v4);
  assert {:sourceloc} {:sourceloc_num 9} true;
  v11 := $$d_jW[$col.0];
  assert {:sourceloc} {:sourceloc_num 10} true;
  v12 := $$d_I[BV32_ADD($row.0, BV32_MUL($d_Nr, v11))];
  v13 := FSUB32(v12, v4);
  assert {:sourceloc} {:sourceloc_num 11} true;
  v14 := $$d_jE[$col.0];
  assert {:sourceloc} {:sourceloc_num 12} true;
  v15 := $$d_I[BV32_ADD($row.0, BV32_MUL($d_Nr, v14))];
  v16 := FSUB32(v15, v4);
  v17 := FDIV32(FADD32(FADD32(FADD32(v7, v10), v13), v16), v4);
  v18 := FP64_CONV32(FADD64(FMUL64(4598175219545276416, FP32_CONV64(v17)), 4607182418800017408));
  v19 := FP64_CONV32(FDIV64(4607182418800017408, FADD64(4607182418800017408, FP32_CONV64(FDIV32(FSUB32(FDIV32(FP64_CONV32(FADD64(FMUL64(4602678819172646912, FP32_CONV64(FDIV32(FADD32(FMUL32(v16, v16), FADD32(FMUL32(v13, v13), FADD32(FMUL32(v7, v7), FMUL32(v10, v10)))), FMUL32(v4, v4)))), FSUB64(-9223372036854775808, FMUL64(4589168020290535424, FP32_CONV64(FMUL32(v17, v17)))))), FMUL32(v18, v18)), $d_q0sqr), FMUL32($d_q0sqr, FADD32(1065353216, $d_q0sqr)))))));
  v20 := FLT32(v19, 0);
  goto $truebb1, $falsebb1;
$4:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  $d_c_loc.1 := 0;
  goto $8;
$5:
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  v21 := FLT32(1065353216, v19);
  goto $truebb2, $falsebb2;
$6:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  $d_c_loc.0 := 1065353216;
  goto $7;
$7:
  assert {:block_sourceloc} true;
  $d_c_loc.1 := $d_c_loc.0;
  goto $8;
$8:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  assert {:sourceloc} {:sourceloc_num 17} true;
  $$d_dN[v0] := v7;
  assert {:sourceloc} {:sourceloc_num 18} true;
  $$d_dS[v0] := v10;
  assert {:sourceloc} {:sourceloc_num 19} true;
  $$d_dW[v0] := v13;
  assert {:sourceloc} {:sourceloc_num 20} true;
  $$d_dE[v0] := v16;
  assert {:sourceloc} {:sourceloc_num 21} true;
  $$d_c[v0] := $d_c_loc.1;
  goto $9;
$9:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  return;
$truebb:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  goto $1;
$falsebb:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  $row.0, $col.0 := BV32_SUB(BV32_SREM(BV32_ADD(v0, 1), $d_Nr), 1), v1;
  goto $2;
$truebb0:
  assume {:partition} v3;
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  goto $3;
$falsebb0:
  assume {:partition} !v3;
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  goto $9;
$truebb1:
  assume {:partition} v20;
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  goto $4;
$falsebb1:
  assume {:partition} !v20;
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  goto $5;
$truebb2:
  assume {:partition} v21;
  assert {:block_sourceloc} {:sourceloc_num 29} true;
  goto $6;
$falsebb2:
  assume {:partition} !v21;
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  $d_c_loc.0 := v19;
  goto $7;
}
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 512 then 1 else 0) != 0;
axiom (if num_groups_x == 450 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
