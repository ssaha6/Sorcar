type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "delta"} {:global} $$delta : [int]int;
axiom {:array_info "$$delta"} {:global} {:elem_width 32} {:source_name "delta"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$delta : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$delta : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$delta : bool;

var {:source_name "ly"} {:global} $$ly : [int]int;
axiom {:array_info "$$ly"} {:global} {:elem_width 32} {:source_name "ly"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$ly : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$ly : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$ly : bool;

var {:source_name "w"} {:global} $$w : [int]int;
axiom {:array_info "$$w"} {:global} {:elem_width 32} {:source_name "w"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$w : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$w : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$w : bool;

var {:source_name "oldw"} {:global} $$oldw : [int]int;
axiom {:array_info "$$oldw"} {:global} {:elem_width 32} {:source_name "oldw"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$oldw : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$oldw : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$oldw : bool;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_y} group_id_y : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:local_id_y} local_id_y : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function FADD32(int, int) : int;
function FMUL32(int, int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
procedure {:source_name "bpnn_adjust_weights_ocl"} {:kernel} $bpnn_adjust_weights_ocl($hid:int, $in:int)
requires {:sourceloc_num 0} (if $hid == 16 then 1 else 0) != 0;
requires {:sourceloc_num 1} (if $in == 65536 then 1 else 0) != 0;
{
  var v0:int;
  var v1:int;
  var v2:int;
  var v3:int;
  var v4:int;
  var v5:int;
  var v6:int;
  var v7:int;
  var v8:int;
  var v9:int;
  var v10:int;
  var v11:int;
  var v12:int;
  var v13:bool;
  var v14:bool;
  var v15:int;
  var v16:int;
  var v17:int;
  var v18:int;
  var v19:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v0 := group_id_y;
  v1 := local_id_x;
  v2 := local_id_y;
  v3 := BV32_ADD(BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(BV32_ADD($hid, 1), 16), v0), BV32_MUL(BV32_ADD($hid, 1), v2)), v1), 1), BV32_ADD($hid, 1));
  v4 := BV32_ADD(BV32_ADD(BV32_MUL(16, v0), v2), 1);
  v5 := BV32_ADD(v1, 1);
  assert {:sourceloc} {:sourceloc_num 3} true;
  v6 := $$delta[v5];
  assert {:sourceloc} {:sourceloc_num 4} true;
  v7 := $$ly[v4];
  assert {:sourceloc} {:sourceloc_num 5} true;
  v8 := $$oldw[v3];
  assert {:sourceloc} {:sourceloc_num 6} true;
  v9 := $$w[v3];
  assert {:sourceloc} {:sourceloc_num 7} true;
  $$w[v3] := FADD32(v9, FADD32(FMUL32(FMUL32(1050253722, v6), v7), FMUL32(1050253722, v8)));
  assert {:sourceloc} {:sourceloc_num 8} true;
  v10 := $$delta[v5];
  assert {:sourceloc} {:sourceloc_num 9} true;
  v11 := $$ly[v4];
  assert {:sourceloc} {:sourceloc_num 10} true;
  v12 := $$oldw[v3];
  assert {:sourceloc} {:sourceloc_num 11} true;
  $$oldw[v3] := FADD32(FMUL32(FMUL32(1050253722, v10), v11), FMUL32(1050253722, v12));
  call {:sourceloc_num 12} $bugle_barrier(-1, 0);
  v13 := v2 == 0;
  goto $truebb, $falsebb;
$1:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  v14 := v0 == 0;
  goto $truebb0, $falsebb0;
$2:
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  assert {:sourceloc} {:sourceloc_num 15} true;
  v15 := $$delta[v5];
  assert {:sourceloc} {:sourceloc_num 16} true;
  v16 := $$oldw[v5];
  assert {:sourceloc} {:sourceloc_num 17} true;
  v17 := $$w[v5];
  assert {:sourceloc} {:sourceloc_num 18} true;
  $$w[v5] := FADD32(v17, FADD32(FMUL32(1050253722, v15), FMUL32(1050253722, v16)));
  assert {:sourceloc} {:sourceloc_num 19} true;
  v18 := $$delta[v5];
  assert {:sourceloc} {:sourceloc_num 20} true;
  v19 := $$oldw[v5];
  assert {:sourceloc} {:sourceloc_num 21} true;
  $$oldw[v5] := FADD32(FMUL32(1050253722, v18), FMUL32(1050253722, v19));
  goto $3;
$3:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  return;
$truebb:
  assume {:partition} v13;
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  goto $1;
$falsebb:
  assume {:partition} !v13;
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  goto $3;
$truebb0:
  assume {:partition} v14;
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  goto $2;
$falsebb0:
  assume {:partition} !v14;
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  goto $3;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:int, $1:int);
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 16 then 1 else 0) != 0;
axiom (if group_size_y == 16 then 1 else 0) != 0;
axiom (if num_groups_x == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 4096 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
