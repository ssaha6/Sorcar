type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "input_cuda"} {:global} $$input_cuda : [int]int;
axiom {:array_info "$$input_cuda"} {:global} {:elem_width 32} {:source_name "input_cuda"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$input_cuda : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$input_cuda : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$input_cuda : bool;

var {:source_name "output_hidden_cuda"} {:global} $$output_hidden_cuda : [int]int;
axiom {:array_info "$$output_hidden_cuda"} {:global} {:elem_width 32} {:source_name "output_hidden_cuda"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$output_hidden_cuda : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$output_hidden_cuda : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$output_hidden_cuda : bool;

var {:source_name "input_hidden_cuda"} {:global} $$input_hidden_cuda : [int]int;
axiom {:array_info "$$input_hidden_cuda"} {:global} {:elem_width 32} {:source_name "input_hidden_cuda"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$input_hidden_cuda : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$input_hidden_cuda : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$input_hidden_cuda : bool;

var {:source_name "hidden_partial_sum"} {:global} $$hidden_partial_sum : [int]int;
axiom {:array_info "$$hidden_partial_sum"} {:global} {:elem_width 32} {:source_name "hidden_partial_sum"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$hidden_partial_sum : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$hidden_partial_sum : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$hidden_partial_sum : bool;

var {:source_name "input_node"} {:group_shared} $$input_node : [int]int;
axiom {:array_info "$$input_node"} {:group_shared} {:elem_width 32} {:source_name "input_node"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$input_node : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$input_node : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$input_node : bool;

var {:source_name "weight_matrix"} {:group_shared} $$weight_matrix : [int]int;
axiom {:array_info "$$weight_matrix"} {:group_shared} {:elem_width 32} {:source_name "weight_matrix"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$weight_matrix : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$weight_matrix : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$weight_matrix : bool;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_y} group_id_y : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:local_id_y} local_id_y : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function FADD32(int, int) : int;
function FMUL32(int, int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_SLE(x : int, y : int) : bool {
  x <= y
}
function {:inline true} BV32_SREM(x : int, y : int) : int {
  x mod y
}
procedure {:source_name "bpnn_layerforward_ocl"} {:kernel} $bpnn_layerforward_ocl($in:int, $hid:int)
requires {:sourceloc_num 0} (if $in == 65536 then 1 else 0) != 0;
requires {:sourceloc_num 1} (if $hid == 16 then 1 else 0) != 0;
{
  var $i.0:int;
  var v0:int;
  var v1:int;
  var v2:int;
  var v3:int;
  var v4:int;
  var v5:bool;
  var v6:int;
  var v7:int;
  var v8:int;
  var v9:int;
  var v15:bool;
  var v10:bool;
  var v11:bool;
  var v12:int;
  var v13:int;
  var v14:int;
  var v16:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v0 := group_id_y;
  v1 := local_id_x;
  v2 := local_id_y;
  v3 := BV32_ADD(BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(BV32_ADD($hid, 1), 16), v0), BV32_MUL(BV32_ADD($hid, 1), v2)), v1), 1), BV32_ADD($hid, 1));
  v4 := BV32_ADD(BV32_ADD(BV32_MUL(16, v0), v2), 1);
  v5 := v1 == 0;
  goto $truebb, $falsebb;
$1:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  assert {:sourceloc} {:sourceloc_num 4} true;
  v6 := $$input_cuda[v4];
  assert {:sourceloc} {:sourceloc_num 5} true;
  $$input_node[v2] := v6;
  goto $2;
$2:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  call {:sourceloc_num 7} $bugle_barrier(-1, 0);
  assert {:sourceloc} {:sourceloc_num 8} true;
  v7 := $$input_hidden_cuda[v3];
  assert {:sourceloc} {:sourceloc_num 9} true;
  $$weight_matrix[BV32_ADD(BV32_MUL(v2, 16), v1)] := v7;
  call {:sourceloc_num 10} $bugle_barrier(-1, 0);
  assert {:sourceloc} {:sourceloc_num 11} true;
  v8 := $$weight_matrix[BV32_ADD(BV32_MUL(v2, 16), v1)];
  assert {:sourceloc} {:sourceloc_num 12} true;
  v9 := $$input_node[v2];
  assert {:sourceloc} {:sourceloc_num 13} true;
  $$weight_matrix[BV32_ADD(BV32_MUL(v2, 16), v1)] := FMUL32(v8, v9);
  call {:sourceloc_num 14} $bugle_barrier(-1, 0);
  $i.0 := 1;
  goto $3;
$3:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  v10 := BV32_SLE($i.0, 16);
  goto $truebb0, $falsebb0;
$4:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  v11 := BV32_SREM(v2, $i.0) == 0;
  goto $truebb1, $falsebb1;
$5:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  assert {:sourceloc} {:sourceloc_num 18} true;
  v12 := $$weight_matrix[BV32_ADD(BV32_MUL(v2, 16), v1)];
  assert {:sourceloc} {:sourceloc_num 19} true;
  v13 := $$weight_matrix[BV32_ADD(BV32_MUL(BV32_ADD(v2, BV32_SDIV($i.0, 2)), 16), v1)];
  assert {:sourceloc} {:sourceloc_num 20} true;
  $$weight_matrix[BV32_ADD(BV32_MUL(v2, 16), v1)] := FADD32(v12, v13);
  goto $6;
$6:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  call {:sourceloc_num 22} $bugle_barrier(-1, 0);
  goto $7;
$7:
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  $i.0 := BV32_MUL($i.0, 2);
  goto $3;
$8:
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  assert {:sourceloc} {:sourceloc_num 25} true;
  v14 := $$weight_matrix[BV32_ADD(BV32_MUL(v2, 16), v1)];
  assert {:sourceloc} {:sourceloc_num 26} true;
  $$input_hidden_cuda[v3] := v14;
  call {:sourceloc_num 27} $bugle_barrier(-1, 0);
  v15 := v1 == 0;
  goto $truebb2, $falsebb2;
$9:
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  assert {:sourceloc} {:sourceloc_num 29} true;
  v16 := $$weight_matrix[BV32_ADD(BV32_MUL(v1, 16), v2)];
  assert {:sourceloc} {:sourceloc_num 30} true;
  $$hidden_partial_sum[BV32_ADD(BV32_MUL(v0, $hid), v2)] := v16;
  goto $10;
$10:
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  return;
$truebb:
  assume {:partition} v5;
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  goto $1;
$falsebb:
  assume {:partition} !v5;
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  goto $2;
$truebb0:
  assume {:partition} v10;
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  goto $4;
$falsebb0:
  assume {:partition} !v10;
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  goto $8;
$truebb1:
  assume {:partition} v11;
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  goto $5;
$falsebb1:
  assume {:partition} !v11;
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  goto $6;
$truebb2:
  assume {:partition} v15;
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  goto $9;
$falsebb2:
  assume {:partition} !v15;
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  goto $10;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:int, $1:int);
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 16 then 1 else 0) != 0;
axiom (if group_size_y == 16 then 1 else 0) != 0;
axiom (if num_groups_x == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 4096 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
