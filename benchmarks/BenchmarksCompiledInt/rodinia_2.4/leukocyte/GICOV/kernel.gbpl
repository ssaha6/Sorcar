type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "grad_x"} {:global} $$grad_x : [int]int;
axiom {:array_info "$$grad_x"} {:global} {:elem_width 32} {:source_name "grad_x"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$grad_x : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$grad_x : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$grad_x : bool;

var {:source_name "grad_y"} {:global} $$grad_y : [int]int;
axiom {:array_info "$$grad_y"} {:global} {:elem_width 32} {:source_name "grad_y"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$grad_y : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$grad_y : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$grad_y : bool;

var {:source_name "c_sin_angle"} {:constant} $$c_sin_angle : [int]int;
axiom {:array_info "$$c_sin_angle"} {:constant} {:elem_width 32} {:source_name "c_sin_angle"} {:source_elem_width 32} {:source_dimensions "*"} true;

var {:source_name "c_cos_angle"} {:constant} $$c_cos_angle : [int]int;
axiom {:array_info "$$c_cos_angle"} {:constant} {:elem_width 32} {:source_name "c_cos_angle"} {:source_elem_width 32} {:source_dimensions "*"} true;

var {:source_name "c_tX"} {:constant} $$c_tX : [int]int;
axiom {:array_info "$$c_tX"} {:constant} {:elem_width 32} {:source_name "c_tX"} {:source_elem_width 32} {:source_dimensions "*"} true;

var {:source_name "c_tY"} {:constant} $$c_tY : [int]int;
axiom {:array_info "$$c_tY"} {:constant} {:elem_width 32} {:source_name "c_tY"} {:source_elem_width 32} {:source_dimensions "*"} true;

var {:source_name "gicov"} {:global} $$gicov : [int]int;
axiom {:array_info "$$gicov"} {:global} {:elem_width 32} {:source_name "gicov"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$gicov : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$gicov : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$gicov : bool;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function FADD32(int, int) : int;
function FDIV32(int, int) : int;
function FLT32(int, int) : bool;
function FMUL32(int, int) : int;
function FSUB32(int, int) : int;
function SI32_TO_FP32(int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_SGE(x : int, y : int) : bool {
  x >= y
}
function {:inline true} BV32_SLT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV32_SREM(x : int, y : int) : int {
  x mod y
}
procedure {:source_name "GICOV_kernel"} {:kernel} $GICOV_kernel($grad_m:int, $width:int, $height:int)
requires {:sourceloc_num 0} (if $grad_m == 219 then 1 else 0) != 0;
requires {:sourceloc_num 1} (if $width == 175 then 1 else 0) != 0;
requires {:sourceloc_num 2} (if $height == 596 then 1 else 0) != 0;
{
  var $k.0:int;
  var $max_GICOV.0:int;
  var $n.0:int;
  var $sum.0:int;
  var $M2.0:int;
  var $mean.0:int;
  var $max_GICOV.1:int;
  var v16:int;
  var v0:int;
  var v1:bool;
  var v2:int;
  var v3:int;
  var v4:bool;
  var v5:bool;
  var v6:int;
  var v7:int;
  var v8:int;
  var v9:int;
  var v10:int;
  var v11:int;
  var v12:int;
  var v13:int;
  var v14:int;
  var v15:int;
  var v17:int;
  var v18:bool;
$0:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  v1 := BV32_SGE(v0, BV32_MUL($width, $height));
  goto $truebb, $falsebb;
$1:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  goto $13;
$2:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  v2 := BV32_ADD(BV32_SDIV(v0, $width), 22);
  v3 := BV32_ADD(BV32_SREM(v0, $width), 22);
  $k.0, $max_GICOV.0 := 0, 0;
  goto $3;
$3:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  v4 := BV32_SLT($k.0, 7);
  goto $truebb0, $falsebb0;
$4:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  $n.0, $sum.0, $M2.0, $mean.0 := 0, 0, 0, 0;
  goto $5;
$5:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  v5 := BV32_SLT($n.0, 150);
  goto $truebb1, $falsebb1;
$6:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  assert {:sourceloc} {:sourceloc_num 10} true;
  v6 := $$c_tY[BV32_ADD(BV32_MUL($k.0, 150), $n.0)];
  assert {:sourceloc} {:sourceloc_num 11} true;
  v7 := $$c_tX[BV32_ADD(BV32_MUL($k.0, 150), $n.0)];
  v8 := BV32_ADD(BV32_MUL(BV32_ADD(v2, v7), $grad_m), BV32_ADD(v3, v6));
  assert {:sourceloc} {:sourceloc_num 12} true;
  v9 := $$grad_x[v8];
  assert {:sourceloc} {:sourceloc_num 13} true;
  v10 := $$c_cos_angle[$n.0];
  assert {:sourceloc} {:sourceloc_num 14} true;
  v11 := $$grad_y[v8];
  assert {:sourceloc} {:sourceloc_num 15} true;
  v12 := $$c_sin_angle[$n.0];
  v13 := FADD32(FMUL32(v9, v10), FMUL32(v11, v12));
  v14 := FSUB32(v13, $mean.0);
  v15 := FADD32($mean.0, FDIV32(v14, SI32_TO_FP32(BV32_ADD($n.0, 1))));
  goto $7;
$7:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  $n.0, $sum.0, $M2.0, $mean.0 := BV32_ADD($n.0, 1), FADD32($sum.0, v13), FADD32(FMUL32(v14, FSUB32(v13, v15)), $M2.0), v15;
  goto $5;
$8:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  v16 := FDIV32($sum.0, 1125515264);
  v17 := FDIV32($M2.0, 1125449728);
  v18 := FLT32($max_GICOV.0, FDIV32(FMUL32(v16, v16), v17));
  goto $truebb2, $falsebb2;
$9:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  $max_GICOV.1 := FDIV32(FMUL32(v16, v16), v17);
  goto $10;
$10:
  assert {:block_sourceloc} {:sourceloc_num 19} true;
  goto $11;
$11:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  $k.0, $max_GICOV.0 := BV32_ADD($k.0, 1), $max_GICOV.1;
  goto $3;
$12:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  assert {:sourceloc} {:sourceloc_num 22} true;
  $$gicov[BV32_ADD(BV32_MUL(v2, $grad_m), v3)] := $max_GICOV.0;
  goto $13;
$13:
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  return;
$truebb:
  assume {:partition} v1;
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  goto $1;
$falsebb:
  assume {:partition} !v1;
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  goto $2;
$truebb0:
  assume {:partition} v4;
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  goto $4;
$falsebb0:
  assume {:partition} !v4;
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  goto $12;
$truebb1:
  assume {:partition} v5;
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  goto $6;
$falsebb1:
  assume {:partition} !v5;
  assert {:block_sourceloc} {:sourceloc_num 29} true;
  goto $8;
$truebb2:
  assume {:partition} v18;
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  goto $9;
$falsebb2:
  assume {:partition} !v18;
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  $max_GICOV.1 := $max_GICOV.0;
  goto $10;
}
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 256 then 1 else 0) != 0;
axiom (if num_groups_x == 408 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
