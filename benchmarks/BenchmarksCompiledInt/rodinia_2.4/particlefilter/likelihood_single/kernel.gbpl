type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
procedure _ATOMIC_OP8(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "arrayX"} {:global} $$arrayX : [int]int;
axiom {:array_info "$$arrayX"} {:global} {:elem_width 32} {:source_name "arrayX"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$arrayX : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$arrayX : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$arrayX : bool;

var {:source_name "arrayY"} {:global} $$arrayY : [int]int;
axiom {:array_info "$$arrayY"} {:global} {:elem_width 32} {:source_name "arrayY"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$arrayY : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$arrayY : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$arrayY : bool;

var {:source_name "xj"} {:global} $$xj : [int]int;
axiom {:array_info "$$xj"} {:global} {:elem_width 32} {:source_name "xj"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$xj : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$xj : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$xj : bool;

var {:source_name "yj"} {:global} $$yj : [int]int;
axiom {:array_info "$$yj"} {:global} {:elem_width 32} {:source_name "yj"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$yj : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$yj : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$yj : bool;

var {:source_name "CDF"} {:global} $$CDF : [int]int;
axiom {:array_info "$$CDF"} {:global} {:elem_width 32} {:source_name "CDF"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$CDF : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$CDF : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$CDF : bool;

var {:source_name "ind"} {:global} $$ind : [int]int;
axiom {:array_info "$$ind"} {:global} {:elem_width 32} {:source_name "ind"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$ind : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$ind : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$ind : bool;

var {:source_name "objxy"} {:global} $$objxy : [int]int;
axiom {:array_info "$$objxy"} {:global} {:elem_width 32} {:source_name "objxy"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$objxy : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$objxy : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$objxy : bool;

var {:source_name "likelihood"} {:global} $$likelihood : [int]int;
axiom {:array_info "$$likelihood"} {:global} {:elem_width 32} {:source_name "likelihood"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$likelihood : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$likelihood : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$likelihood : bool;

var {:source_name "I"} {:global} $$I : [int]int;
axiom {:array_info "$$I"} {:global} {:elem_width 8} {:source_name "I"} {:source_elem_width 8} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 8} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$I : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 8} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$I : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 8} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$I : bool;

var {:source_name "u"} {:global} $$u : [int]int;
axiom {:array_info "$$u"} {:global} {:elem_width 32} {:source_name "u"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$u : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$u : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$u : bool;

var {:source_name "weights"} {:global} $$weights : [int]int;
axiom {:array_info "$$weights"} {:global} {:elem_width 32} {:source_name "weights"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$weights : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$weights : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$weights : bool;

var {:source_name "seed"} {:global} $$seed : [int]int;
axiom {:array_info "$$seed"} {:global} {:elem_width 32} {:source_name "seed"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$seed : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$seed : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$seed : bool;

var {:source_name "partial_sums"} {:global} $$partial_sums : [int]int;
axiom {:array_info "$$partial_sums"} {:global} {:elem_width 32} {:source_name "partial_sums"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$partial_sums : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$partial_sums : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$partial_sums : bool;

var {:source_name "buffer"} {:group_shared} $$buffer : [int]int;
axiom {:array_info "$$buffer"} {:group_shared} {:elem_width 32} {:source_name "buffer"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$buffer : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$buffer : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$buffer : bool;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function  BV32_LSHR(int, int) : int;
function FABS32(int) : int;
function FADD32(int, int) : int;
function FADD64(int, int) : int;
function FCOS32(int) : int;
function FDIV32(int, int) : int;
function FDIV64(int, int) : int;
function FEXP32(int) : int;
function FLOG32(int) : int;
function FLT32(int, int) : bool;
function FMUL32(int, int) : int;
function FMUL64(int, int) : int;
function FP32_CONV64(int) : int;
function FP32_TO_SI32(int) : int;
function FP64_CONV32(int) : int;
function FPOW32(int, int) : int;
function FSQRT32(int) : int;
function FSUB32(int, int) : int;
function FSUB64(int, int) : int;
function SI32_TO_FP32(int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SGE(x : int, y : int) : bool {
  x >= y
}
function {:inline true} BV32_SGT(x : int, y : int) : bool {
  x > y
}
function {:inline true} BV32_SLT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV32_SREM(x : int, y : int) : int {
  x mod y
}
function {:inline true} BV32_SUB(x : int, y : int) : int {
  x - y
}
function {:inline true} BV32_UDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_UGT(x : int, y : int) : bool {
  x > y
}
function {:inline true} BV32_ULT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV8_ZEXT32(x : int) : int {
  x
}
procedure {:source_name "likelihood_kernel"} {:kernel} $likelihood_kernel($Nparticles:int, $countOnes:int, $max_size:int, $k:int, $IszY:int, $Nfr:int)
requires {:sourceloc_num 0} (if $Nparticles == 400000 then 1 else 0) != 0;
requires {:sourceloc_num 1} (if $countOnes == 69 then 1 else 0) != 0;
{
  var $y.0:int;
  var $.01:int;
  var $.0:int;
  var $likelihoodSum.i.0:int;
  var $x.i.0:int;
  var $s.0:int;
  var v9:int;
  var v0:int;
  var v1:int;
  var v2:int;
  var v3:bool;
  var v4:int;
  var v5:int;
  var v6:int;
  var v7:int;
  var v8:int;
  var v10:int;
  var v11:int;
  var v12:int;
  var v13:int;
  var v14:int;
  var v15:int;
  var v16:bool;
  var v17:bool;
  var v18:int;
  var v19:int;
  var v20:bool;
  var v21:int;
  var v22:int;
  var v23:int;
  var v24:bool;
  var v25:int;
  var v26:int;
  var v27:int;
  var v28:bool;
  var v29:bool;
  var v30:int;
  var v31:int;
  var v32:int;
  var v33:int;
  var v34:int;
  var v35:int;
  var v36:int;
  var v37:bool;
  var v38:int;
  var v39:bool;
  var v40:bool;
  var v41:int;
  var v42:int;
  var v43:bool;
  var v44:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v0 := group_id_x;
  v1 := local_id_x;
  v2 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  v3 := BV32_SLT(v2, $Nparticles);
  goto $truebb, $falsebb;
$1:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  assert {:sourceloc} {:sourceloc_num 4} true;
  v4 := $$xj[v2];
  assert {:sourceloc} {:sourceloc_num 5} true;
  $$arrayX[v2] := v4;
  assert {:sourceloc} {:sourceloc_num 6} true;
  v5 := $$yj[v2];
  assert {:sourceloc} {:sourceloc_num 7} true;
  $$arrayY[v2] := v5;
  assert {:sourceloc} {:sourceloc_num 8} true;
  $$weights[v2] := FDIV32(1065353216, SI32_TO_FP32($Nparticles));
  assert {:sourceloc} {:sourceloc_num 9} true;
  v6 := $$arrayX[v2];
  assert {:sourceloc} {:sourceloc_num 10} true;
  v7 := $$seed[v2];
  assert {:sourceloc} {:sourceloc_num 11} true;
  $$seed[v2] := BV32_SREM(BV32_ADD(BV32_MUL(1103515245, v7), 12345), 2147483647);
  assert {:sourceloc} {:sourceloc_num 12} true;
  v8 := $$seed[v2];
  assert {:sourceloc} {:sourceloc_num 13} true;
  v9 := $$seed[v2];
  assert {:sourceloc} {:sourceloc_num 14} true;
  $$seed[v2] := BV32_SREM(BV32_ADD(BV32_MUL(1103515245, v9), 12345), 2147483647);
  assert {:sourceloc} {:sourceloc_num 15} true;
  v10 := $$seed[v2];
  assert {:sourceloc} {:sourceloc_num 16} true;
  $$arrayX[v2] := FP64_CONV32(FADD64(FADD64(FP32_CONV64(v6), 4607182418800017408), FMUL64(4617315517961601024, FP32_CONV64(FMUL32(FSQRT32(FMUL32(-1073741824, FMUL32(FLOG32(FABS32(FDIV32(SI32_TO_FP32(v8), SI32_TO_FP32(2147483647)))), 1060205080))), FCOS32(FMUL32(FMUL32(1073741824, 1078530011), FABS32(FDIV32(SI32_TO_FP32(v10), SI32_TO_FP32(2147483647))))))))));
  assert {:sourceloc} {:sourceloc_num 17} true;
  v11 := $$arrayY[v2];
  assert {:sourceloc} {:sourceloc_num 18} true;
  v12 := $$seed[v2];
  assert {:sourceloc} {:sourceloc_num 19} true;
  $$seed[v2] := BV32_SREM(BV32_ADD(BV32_MUL(1103515245, v12), 12345), 2147483647);
  assert {:sourceloc} {:sourceloc_num 20} true;
  v13 := $$seed[v2];
  assert {:sourceloc} {:sourceloc_num 21} true;
  v14 := $$seed[v2];
  assert {:sourceloc} {:sourceloc_num 22} true;
  $$seed[v2] := BV32_SREM(BV32_ADD(BV32_MUL(1103515245, v14), 12345), 2147483647);
  assert {:sourceloc} {:sourceloc_num 23} true;
  v15 := $$seed[v2];
  assert {:sourceloc} {:sourceloc_num 24} true;
  $$arrayY[v2] := FP64_CONV32(FADD64(FSUB64(FP32_CONV64(v11), 4611686018427387904), FMUL64(4611686018427387904, FP32_CONV64(FMUL32(FSQRT32(FMUL32(-1073741824, FMUL32(FLOG32(FABS32(FDIV32(SI32_TO_FP32(v13), SI32_TO_FP32(2147483647)))), 1060205080))), FCOS32(FMUL32(FMUL32(1073741824, 1078530011), FABS32(FDIV32(SI32_TO_FP32(v15), SI32_TO_FP32(2147483647))))))))));
  goto $2;
$2:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  call {:sourceloc_num 26} $bugle_barrier(0, -1);
  v16 := BV32_SLT(v2, $Nparticles);
  goto $truebb0, $falsebb0;
$3:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  $y.0 := 0;
  goto $4;
$4:
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 29} (if (_WRITE_HAS_OCCURRED_$$ind ==> BV32_ULT(BV32_SUB(BV32_UDIV(BV32_MUL(4, _WATCHED_OFFSET), 4), BV32_MUL(v2, $countOnes)), $countOnes)) then 1 else 0) != 0;
  v17 := BV32_SLT($y.0, $countOnes);
  goto $truebb1, $falsebb1;
$5:
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  assert {:sourceloc} {:sourceloc_num 31} true;
  v18 := $$arrayX[v2];
  v19 := FP32_TO_SI32(v18);
  v20 := FLT32(FSUB32(v18, SI32_TO_FP32(v19)), 1056964608);
  goto $truebb2, $falsebb2;
$6:
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  $.01 := SI32_TO_FP32(v19);
  goto $dev_round_float.exit;
$7:
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  $.01 := SI32_TO_FP32(v19);
  goto $dev_round_float.exit;
$dev_round_float.exit:
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  assert {:sourceloc} {:sourceloc_num 35} true;
  v21 := $$objxy[BV32_ADD(BV32_MUL($y.0, 2), 1)];
  assert {:sourceloc} {:sourceloc_num 36} true;
  v22 := $$arrayY[v2];
  v23 := FP32_TO_SI32(v22);
  v24 := FLT32(FSUB32(v22, SI32_TO_FP32(v23)), 1056964608);
  goto $truebb3, $falsebb3;
$8:
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  $.0 := SI32_TO_FP32(v23);
  goto $dev_round_float.exit15;
$9:
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  $.0 := SI32_TO_FP32(v23);
  goto $dev_round_float.exit15;
$dev_round_float.exit15:
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  assert {:sourceloc} {:sourceloc_num 40} true;
  v25 := $$objxy[BV32_MUL($y.0, 2)];
  v26 := BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(FP32_TO_SI32(FADD32($.01, SI32_TO_FP32(v21))), $IszY), $Nfr), BV32_MUL(FP32_TO_SI32(FADD32($.0, SI32_TO_FP32(v25))), $Nfr)), $k);
  assert {:sourceloc} {:sourceloc_num 41} true;
  $$ind[BV32_ADD(BV32_MUL(v2, $countOnes), $y.0)] := (if BV32_SGT(v26, 0) then v26 else BV32_SUB(0, v26));
  assert {:sourceloc} {:sourceloc_num 42} true;
  v27 := $$ind[BV32_ADD(BV32_MUL(v2, $countOnes), $y.0)];
  v28 := BV32_SGE(v27, $max_size);
  goto $truebb4, $falsebb4;
$10:
  assert {:block_sourceloc} {:sourceloc_num 43} true;
  assert {:sourceloc} {:sourceloc_num 44} true;
  $$ind[BV32_ADD(BV32_MUL(v2, $countOnes), $y.0)] := 0;
  goto $11;
$11:
  assert {:block_sourceloc} {:sourceloc_num 45} true;
  goto $12;
$12:
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  $y.0 := BV32_ADD($y.0, 1);
  goto $4;
$13:
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  $likelihoodSum.i.0, $x.i.0 := 0, 0;
  goto $14;
$14:
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  v29 := BV32_SLT($x.i.0, $countOnes);
  goto $truebb5, $falsebb5;
$15:
  assert {:block_sourceloc} {:sourceloc_num 49} true;
  assert {:sourceloc} {:sourceloc_num 50} true;
  v30 := $$ind[BV32_ADD(BV32_MUL(v2, $countOnes), $x.i.0)];
  assert {:sourceloc} {:sourceloc_num 51} true;
  v31 := $$I[v30];
  assert {:sourceloc} {:sourceloc_num 52} true;
  v32 := $$ind[BV32_ADD(BV32_MUL(v2, $countOnes), $x.i.0)];
  assert {:sourceloc} {:sourceloc_num 53} true;
  v33 := $$I[v32];
  $likelihoodSum.i.0, $x.i.0 := FP64_CONV32(FADD64(FP32_CONV64($likelihoodSum.i.0), FDIV64(FP32_CONV64(FSUB32(FPOW32(SI32_TO_FP32(BV32_SUB(BV8_ZEXT32(v31), 100)), 1073741824), FPOW32(SI32_TO_FP32(BV32_SUB(BV8_ZEXT32(v33), 228)), 1073741824))), 4632233691727265792))), BV32_ADD($x.i.0, 1);
  goto $14;
$calcLikelihoodSum.exit:
  assert {:block_sourceloc} {:sourceloc_num 54} true;
  assert {:sourceloc} {:sourceloc_num 55} true;
  $$likelihood[v2] := $likelihoodSum.i.0;
  assert {:sourceloc} {:sourceloc_num 56} true;
  v34 := $$likelihood[v2];
  assert {:sourceloc} {:sourceloc_num 57} true;
  $$likelihood[v2] := FSUB32(FDIV32(v34, SI32_TO_FP32($countOnes)), 1133903872);
  assert {:sourceloc} {:sourceloc_num 58} true;
  v35 := $$weights[v2];
  assert {:sourceloc} {:sourceloc_num 59} true;
  v36 := $$likelihood[v2];
  assert {:sourceloc} {:sourceloc_num 60} true;
  $$weights[v2] := FMUL32(v35, FEXP32(FMUL32(v36, 1069066811)));
  goto $16;
$16:
  assert {:block_sourceloc} {:sourceloc_num 61} true;
  assert {:sourceloc} {:sourceloc_num 62} true;
  $$buffer[v1] := 0;
  call {:sourceloc_num 63} $bugle_barrier(-1, -1);
  v37 := BV32_SLT(v2, $Nparticles);
  goto $truebb6, $falsebb6;
$17:
  assert {:block_sourceloc} {:sourceloc_num 64} true;
  assert {:sourceloc} {:sourceloc_num 65} true;
  v38 := $$weights[v2];
  assert {:sourceloc} {:sourceloc_num 66} true;
  $$buffer[v1] := v38;
  goto $18;
$18:
  assert {:block_sourceloc} {:sourceloc_num 67} true;
  call {:sourceloc_num 68} $bugle_barrier(-1, 0);
  $s.0 := BV32_UDIV(group_size_x, 2);
  goto $19;
$19:
  assert {:block_sourceloc} {:sourceloc_num 69} true;
  v39 := BV32_UGT($s.0, 0);
  goto $truebb7, $falsebb7;
$20:
  assert {:block_sourceloc} {:sourceloc_num 70} true;
  v40 := BV32_ULT(v1, $s.0);
  goto $truebb8, $falsebb8;
$21:
  assert {:block_sourceloc} {:sourceloc_num 71} true;
  assert {:sourceloc} {:sourceloc_num 72} true;
  v41 := $$buffer[BV32_ADD(v1, $s.0)];
  assert {:sourceloc} {:sourceloc_num 73} true;
  v42 := $$buffer[v1];
  assert {:sourceloc} {:sourceloc_num 74} true;
  $$buffer[v1] := FADD32(v42, v41);
  goto $22;
$22:
  assert {:block_sourceloc} {:sourceloc_num 75} true;
  call {:sourceloc_num 76} $bugle_barrier(-1, 0);
  goto $23;
$23:
  assert {:block_sourceloc} {:sourceloc_num 77} true;
  $s.0 := BV32_LSHR($s.0, 1);
  goto $19;
$24:
  assert {:block_sourceloc} {:sourceloc_num 78} true;
  v43 := v1 == 0;
  goto $truebb9, $falsebb9;
$25:
  assert {:block_sourceloc} {:sourceloc_num 79} true;
  assert {:sourceloc} {:sourceloc_num 80} true;
  v44 := $$buffer[0];
  assert {:sourceloc} {:sourceloc_num 81} true;
  $$partial_sums[v0] := v44;
  goto $26;
$26:
  assert {:block_sourceloc} {:sourceloc_num 82} true;
  return;
$truebb:
  assume {:partition} v3;
  assert {:block_sourceloc} {:sourceloc_num 83} true;
  goto $1;
$falsebb:
  assume {:partition} !v3;
  assert {:block_sourceloc} {:sourceloc_num 84} true;
  goto $2;
$truebb0:
  assume {:partition} v16;
  assert {:block_sourceloc} {:sourceloc_num 85} true;
  goto $3;
$falsebb0:
  assume {:partition} !v16;
  assert {:block_sourceloc} {:sourceloc_num 86} true;
  goto $16;
$truebb1:
  assume {:partition} v17;
  assert {:block_sourceloc} {:sourceloc_num 87} true;
  goto $5;
$falsebb1:
  assume {:partition} !v17;
  assert {:block_sourceloc} {:sourceloc_num 88} true;
  goto $13;
$truebb2:
  assume {:partition} v20;
  assert {:block_sourceloc} {:sourceloc_num 89} true;
  goto $6;
$falsebb2:
  assume {:partition} !v20;
  assert {:block_sourceloc} {:sourceloc_num 90} true;
  goto $7;
$truebb3:
  assume {:partition} v24;
  assert {:block_sourceloc} {:sourceloc_num 91} true;
  goto $8;
$falsebb3:
  assume {:partition} !v24;
  assert {:block_sourceloc} {:sourceloc_num 92} true;
  goto $9;
$truebb4:
  assume {:partition} v28;
  assert {:block_sourceloc} {:sourceloc_num 93} true;
  goto $10;
$falsebb4:
  assume {:partition} !v28;
  assert {:block_sourceloc} {:sourceloc_num 94} true;
  goto $11;
$truebb5:
  assume {:partition} v29;
  assert {:block_sourceloc} {:sourceloc_num 95} true;
  goto $15;
$falsebb5:
  assume {:partition} !v29;
  assert {:block_sourceloc} {:sourceloc_num 96} true;
  goto $calcLikelihoodSum.exit;
$truebb6:
  assume {:partition} v37;
  assert {:block_sourceloc} {:sourceloc_num 97} true;
  goto $17;
$falsebb6:
  assume {:partition} !v37;
  assert {:block_sourceloc} {:sourceloc_num 98} true;
  goto $18;
$truebb7:
  assume {:partition} v39;
  assert {:block_sourceloc} {:sourceloc_num 99} true;
  goto $20;
$falsebb7:
  assume {:partition} !v39;
  assert {:block_sourceloc} {:sourceloc_num 100} true;
  goto $24;
$truebb8:
  assume {:partition} v40;
  assert {:block_sourceloc} {:sourceloc_num 101} true;
  goto $21;
$falsebb8:
  assume {:partition} !v40;
  assert {:block_sourceloc} {:sourceloc_num 102} true;
  goto $22;
$truebb9:
  assume {:partition} v43;
  assert {:block_sourceloc} {:sourceloc_num 103} true;
  goto $25;
$falsebb9:
  assume {:partition} !v43;
  assert {:block_sourceloc} {:sourceloc_num 104} true;
  goto $26;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:int, $1:int);
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 512 then 1 else 0) != 0;
axiom (if num_groups_x == 782 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
