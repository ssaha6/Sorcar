type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "variables"} {:global} $$variables : [int]int;
axiom {:array_info "$$variables"} {:global} {:elem_width 32} {:source_name "variables"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$variables : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$variables : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$variables : bool;

var {:source_name "areas"} {:global} $$areas : [int]int;
axiom {:array_info "$$areas"} {:global} {:elem_width 32} {:source_name "areas"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$areas : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$areas : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$areas : bool;

var {:source_name "step_factors"} {:global} $$step_factors : [int]int;
axiom {:array_info "$$step_factors"} {:global} {:elem_width 32} {:source_name "step_factors"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$step_factors : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$step_factors : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$step_factors : bool;

var {:source_name "velocity.i"} $$velocity.i : [int]int;
axiom {:array_info "$$velocity.i"} {:elem_width 32} {:source_name "velocity.i"} {:source_elem_width 96} {:source_dimensions "1"} true;

var {:source_name "momentum.i"} $$momentum.i : [int]int;
axiom {:array_info "$$momentum.i"} {:elem_width 32} {:source_name "momentum.i"} {:source_elem_width 96} {:source_dimensions "1"} true;

var {:source_name "momentum"} $$momentum : [int]int;
axiom {:array_info "$$momentum"} {:elem_width 32} {:source_name "momentum"} {:source_elem_width 96} {:source_dimensions "1"} true;

var {:source_name "velocity"} $$velocity : [int]int;
axiom {:array_info "$$velocity"} {:elem_width 32} {:source_name "velocity"} {:source_elem_width 96} {:source_dimensions "1"} true;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function FADD32(int, int) : int;
function FDIV32(int, int) : int;
function FMUL32(int, int) : int;
function FSQRT32(int) : int;
function FSUB32(int, int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
procedure {:source_name "compute_step_factor"} {:kernel} $compute_step_factor($nelr:int)
{
  var v6:int;
  var v0:int;
  var v1:int;
  var v2:int;
  var v3:int;
  var v4:int;
  var v13:int;
  var v5:int;
  var v7:int;
  var v8:int;
  var v9:int;
  var v10:int;
  var v11:int;
  var v12:int;
  var v14:int;
  var v15:int;
  var v16:int;
  var v17:int;
  var v18:int;
  var v19:int;
  var v20:int;
  var v21:int;
  var v22:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  assert {:sourceloc} {:sourceloc_num 1} true;
  v1 := $$variables[BV32_ADD(v0, BV32_MUL(0, $nelr))];
  assert {:sourceloc} {:sourceloc_num 2} true;
  v2 := $$variables[BV32_ADD(v0, $nelr)];
  assert {:sourceloc} {:sourceloc_num 3} true;
  $$momentum[0] := v2;
  assert {:sourceloc} {:sourceloc_num 4} true;
  v3 := $$variables[BV32_ADD(v0, BV32_MUL(2, $nelr))];
  assert {:sourceloc} {:sourceloc_num 5} true;
  $$momentum[1] := v3;
  assert {:sourceloc} {:sourceloc_num 6} true;
  v4 := $$variables[BV32_ADD(v0, BV32_MUL(3, $nelr))];
  assert {:sourceloc} {:sourceloc_num 7} true;
  $$momentum[2] := v4;
  assert {:sourceloc} {:sourceloc_num 8} true;
  v5 := $$variables[BV32_ADD(v0, BV32_MUL(4, $nelr))];
  assert {:sourceloc} {:sourceloc_num 9} true;
  v6 := $$momentum[0];
  assert {:sourceloc} {:sourceloc_num 10} true;
  v7 := $$momentum[1];
  assert {:sourceloc} {:sourceloc_num 11} true;
  v8 := $$momentum[2];
  assert {:sourceloc} {:sourceloc_num 12} true;
  $$momentum.i[0] := v6;
  assert {:sourceloc} {:sourceloc_num 13} true;
  $$momentum.i[1] := v7;
  assert {:sourceloc} {:sourceloc_num 14} true;
  $$momentum.i[2] := v8;
  assert {:sourceloc} {:sourceloc_num 15} true;
  v9 := $$momentum.i[0];
  assert {:sourceloc} {:sourceloc_num 16} true;
  $$velocity[0] := FDIV32(v9, v1);
  assert {:sourceloc} {:sourceloc_num 17} true;
  v10 := $$momentum.i[1];
  assert {:sourceloc} {:sourceloc_num 18} true;
  $$velocity[1] := FDIV32(v10, v1);
  assert {:sourceloc} {:sourceloc_num 19} true;
  v11 := $$momentum.i[2];
  assert {:sourceloc} {:sourceloc_num 20} true;
  $$velocity[2] := FDIV32(v11, v1);
  assert {:sourceloc} {:sourceloc_num 21} true;
  v12 := $$velocity[0];
  assert {:sourceloc} {:sourceloc_num 22} true;
  v13 := $$velocity[1];
  assert {:sourceloc} {:sourceloc_num 23} true;
  v14 := $$velocity[2];
  assert {:sourceloc} {:sourceloc_num 24} true;
  $$velocity.i[0] := v12;
  assert {:sourceloc} {:sourceloc_num 25} true;
  $$velocity.i[1] := v13;
  assert {:sourceloc} {:sourceloc_num 26} true;
  $$velocity.i[2] := v14;
  assert {:sourceloc} {:sourceloc_num 27} true;
  v15 := $$velocity.i[0];
  assert {:sourceloc} {:sourceloc_num 28} true;
  v16 := $$velocity.i[0];
  assert {:sourceloc} {:sourceloc_num 29} true;
  v17 := $$velocity.i[1];
  assert {:sourceloc} {:sourceloc_num 30} true;
  v18 := $$velocity.i[1];
  assert {:sourceloc} {:sourceloc_num 31} true;
  v19 := $$velocity.i[2];
  assert {:sourceloc} {:sourceloc_num 32} true;
  v20 := $$velocity.i[2];
  v21 := FADD32(FMUL32(v19, v20), FADD32(FMUL32(v15, v16), FMUL32(v17, v18)));
  assert {:sourceloc} {:sourceloc_num 33} true;
  v22 := $$areas[v0];
  assert {:sourceloc} {:sourceloc_num 34} true;
  $$step_factors[v0] := FDIV32(1056964608, FMUL32(FSQRT32(v22), FADD32(FSQRT32(v21), FSQRT32(FDIV32(FMUL32(1068708659, FMUL32(1053609164, FADD32(FMUL32(FSUB32(-2147483648, FMUL32(1056964608, v1)), v21), v5))), v1)))));
  return;
}
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 192 then 1 else 0) != 0;
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if num_groups_x == 506 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
