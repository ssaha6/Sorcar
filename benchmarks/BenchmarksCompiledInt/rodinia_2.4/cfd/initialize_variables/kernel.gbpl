type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "variables"} {:global} $$variables : [int]int;
axiom {:array_info "$$variables"} {:global} {:elem_width 32} {:source_name "variables"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$variables : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$variables : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$variables : bool;

var {:source_name "ff_variable"} {:constant} $$ff_variable : [int]int;
axiom {:array_info "$$ff_variable"} {:constant} {:elem_width 32} {:source_name "ff_variable"} {:source_elem_width 32} {:source_dimensions "*"} true;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SLT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV32_UDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_UREM(x : int, y : int) : int {
  x mod y
}
procedure {:source_name "initialize_variables"} {:kernel} $initialize_variables($nelr:int)
requires {:sourceloc_num 0} (if $nelr == 97152 then 1 else 0) != 0;
{
  var $j.0:int;
  var v0:bool;
  var v1:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  $j.0 := 0;
  goto $1;
$1:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  assert {:originated_from_invariant} {:sourceloc_num 3} (if (_WRITE_HAS_OCCURRED_$$variables ==> BV32_UREM(BV32_UDIV(BV32_MUL(4, _WATCHED_OFFSET), 4), $nelr) == BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x)) then 1 else 0) != 0;
  v0 := BV32_SLT($j.0, 5);
  goto $truebb, $falsebb;
$2:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  assert {:sourceloc} {:sourceloc_num 5} true;
  v1 := $$ff_variable[$j.0];
  assert {:sourceloc} {:sourceloc_num 6} true;
  $$variables[BV32_ADD(BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x), BV32_MUL($j.0, $nelr))] := v1;
  goto $3;
$3:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  $j.0 := BV32_ADD($j.0, 1);
  goto $1;
$4:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  return;
$truebb:
  assume {:partition} v0;
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  goto $2;
$falsebb:
  assume {:partition} !v0;
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  goto $4;
}
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 192 then 1 else 0) != 0;
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if num_groups_x == 506 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
