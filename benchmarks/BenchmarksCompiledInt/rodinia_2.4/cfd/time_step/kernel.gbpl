type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "old_variables"} {:global} $$old_variables : [int]int;
axiom {:array_info "$$old_variables"} {:global} {:elem_width 32} {:source_name "old_variables"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$old_variables : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$old_variables : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$old_variables : bool;

var {:source_name "variables"} {:global} $$variables : [int]int;
axiom {:array_info "$$variables"} {:global} {:elem_width 32} {:source_name "variables"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$variables : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$variables : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$variables : bool;

var {:source_name "step_factors"} {:global} $$step_factors : [int]int;
axiom {:array_info "$$step_factors"} {:global} {:elem_width 32} {:source_name "step_factors"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$step_factors : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$step_factors : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$step_factors : bool;

var {:source_name "fluxes"} {:global} $$fluxes : [int]int;
axiom {:array_info "$$fluxes"} {:global} {:elem_width 32} {:source_name "fluxes"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$fluxes : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$fluxes : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$fluxes : bool;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function FADD32(int, int) : int;
function FDIV32(int, int) : int;
function FMUL32(int, int) : int;
function SI32_TO_FP32(int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SUB(x : int, y : int) : int {
  x - y
}
procedure {:source_name "time_step"} {:kernel} $time_step($j:int, $nelr:int)
requires {:sourceloc_num 0} (if $nelr == 97152 then 1 else 0) != 0;
{
  var v0:int;
  var v1:int;
  var v2:int;
  var v3:int;
  var v4:int;
  var v5:int;
  var v6:int;
  var v7:int;
  var v8:int;
  var v9:int;
  var v10:int;
  var v11:int;
  var v12:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  assert {:sourceloc} {:sourceloc_num 2} true;
  v1 := $$step_factors[v0];
  v2 := FDIV32(v1, SI32_TO_FP32(BV32_SUB(4, $j)));
  assert {:sourceloc} {:sourceloc_num 3} true;
  v3 := $$old_variables[BV32_ADD(v0, BV32_MUL(0, $nelr))];
  assert {:sourceloc} {:sourceloc_num 4} true;
  v4 := $$fluxes[BV32_ADD(v0, BV32_MUL(0, $nelr))];
  assert {:sourceloc} {:sourceloc_num 5} true;
  $$variables[BV32_ADD(v0, BV32_MUL(0, $nelr))] := FADD32(FMUL32(v2, v4), v3);
  assert {:sourceloc} {:sourceloc_num 6} true;
  v5 := $$old_variables[BV32_ADD(v0, BV32_MUL(4, $nelr))];
  assert {:sourceloc} {:sourceloc_num 7} true;
  v6 := $$fluxes[BV32_ADD(v0, BV32_MUL(4, $nelr))];
  assert {:sourceloc} {:sourceloc_num 8} true;
  $$variables[BV32_ADD(v0, BV32_MUL(4, $nelr))] := FADD32(FMUL32(v2, v6), v5);
  assert {:sourceloc} {:sourceloc_num 9} true;
  v7 := $$old_variables[BV32_ADD(v0, $nelr)];
  assert {:sourceloc} {:sourceloc_num 10} true;
  v8 := $$fluxes[BV32_ADD(v0, $nelr)];
  assert {:sourceloc} {:sourceloc_num 11} true;
  $$variables[BV32_ADD(v0, $nelr)] := FADD32(FMUL32(v2, v8), v7);
  assert {:sourceloc} {:sourceloc_num 12} true;
  v9 := $$old_variables[BV32_ADD(v0, BV32_MUL(2, $nelr))];
  assert {:sourceloc} {:sourceloc_num 13} true;
  v10 := $$fluxes[BV32_ADD(v0, BV32_MUL(2, $nelr))];
  assert {:sourceloc} {:sourceloc_num 14} true;
  $$variables[BV32_ADD(v0, BV32_MUL(2, $nelr))] := FADD32(FMUL32(v2, v10), v9);
  assert {:sourceloc} {:sourceloc_num 15} true;
  v11 := $$old_variables[BV32_ADD(v0, BV32_MUL(3, $nelr))];
  assert {:sourceloc} {:sourceloc_num 16} true;
  v12 := $$fluxes[BV32_ADD(v0, BV32_MUL(3, $nelr))];
  assert {:sourceloc} {:sourceloc_num 17} true;
  $$variables[BV32_ADD(v0, BV32_MUL(3, $nelr))] := FADD32(FMUL32(v2, v12), v11);
  return;
}
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 192 then 1 else 0) != 0;
axiom (if num_groups_x == 506 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
