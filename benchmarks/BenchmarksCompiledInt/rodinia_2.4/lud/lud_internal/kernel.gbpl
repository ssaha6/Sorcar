type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "m"} {:global} $$m : [int]int;
axiom {:array_info "$$m"} {:global} {:elem_width 32} {:source_name "m"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$m : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$m : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$m : bool;

var {:source_name "peri_row"} {:group_shared} $$peri_row : [int]int;
axiom {:array_info "$$peri_row"} {:group_shared} {:elem_width 32} {:source_name "peri_row"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$peri_row : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$peri_row : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$peri_row : bool;

var {:source_name "peri_col"} {:group_shared} $$peri_col : [int]int;
axiom {:array_info "$$peri_col"} {:group_shared} {:elem_width 32} {:source_name "peri_col"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$peri_col : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$peri_col : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$peri_col : bool;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_id_y} group_id_y : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:local_id_y} local_id_y : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function FADD32(int, int) : int;
function FMUL32(int, int) : int;
function FSUB32(int, int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SLT(x : int, y : int) : bool {
  x < y
}
procedure {:source_name "lud_internal"} {:kernel} $lud_internal($matrix_dim:int, $offset:int)
requires {:sourceloc_num 0} (if $matrix_dim == 1024 then 1 else 0) != 0;
requires {:sourceloc_num 1} (if $offset == 0 then 1 else 0) != 0;
{
  var $i.0:int;
  var $sum.0:int;
  var v0:int;
  var v1:int;
  var v2:int;
  var v3:int;
  var v4:int;
  var v5:int;
  var v6:bool;
  var v7:int;
  var v8:int;
  var v9:int;
  var v10:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v0 := local_id_x;
  v1 := local_id_y;
  v2 := BV32_ADD($offset, BV32_MUL(BV32_ADD(group_id_y, 1), 16));
  v3 := BV32_ADD($offset, BV32_MUL(BV32_ADD(group_id_x, 1), 16));
  assert {:sourceloc} {:sourceloc_num 3} true;
  v4 := $$m[BV32_ADD(BV32_ADD(BV32_MUL(BV32_ADD($offset, v1), $matrix_dim), v3), v0)];
  assert {:sourceloc} {:sourceloc_num 4} true;
  $$peri_row[BV32_ADD(BV32_MUL(v1, 16), v0)] := v4;
  assert {:sourceloc} {:sourceloc_num 5} true;
  v5 := $$m[BV32_ADD(BV32_ADD(BV32_MUL(BV32_ADD(v2, v1), $matrix_dim), $offset), v0)];
  assert {:sourceloc} {:sourceloc_num 6} true;
  $$peri_col[BV32_ADD(BV32_MUL(v1, 16), v0)] := v5;
  call {:sourceloc_num 7} $bugle_barrier(-1, 0);
  $i.0, $sum.0 := 0, 0;
  goto $1;
$1:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  v6 := BV32_SLT($i.0, 16);
  goto $truebb, $falsebb;
$2:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  assert {:sourceloc} {:sourceloc_num 10} true;
  v7 := $$peri_col[BV32_ADD(BV32_MUL(v1, 16), $i.0)];
  assert {:sourceloc} {:sourceloc_num 11} true;
  v8 := $$peri_row[BV32_ADD(BV32_MUL($i.0, 16), v0)];
  goto $3;
$3:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  $i.0, $sum.0 := BV32_ADD($i.0, 1), FADD32($sum.0, FMUL32(v7, v8));
  goto $1;
$4:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  v9 := BV32_ADD(BV32_ADD(BV32_MUL(BV32_ADD(v2, v1), $matrix_dim), v3), v0);
  assert {:sourceloc} {:sourceloc_num 14} true;
  v10 := $$m[v9];
  assert {:sourceloc} {:sourceloc_num 15} true;
  $$m[v9] := FSUB32(v10, $sum.0);
  return;
$truebb:
  assume {:partition} v6;
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  goto $2;
$falsebb:
  assume {:partition} !v6;
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  goto $4;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:int, $1:int);
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 16 then 1 else 0) != 0;
axiom (if group_size_y == 16 then 1 else 0) != 0;
axiom (if num_groups_x == 63 then 1 else 0) != 0;
axiom (if num_groups_y == 63 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
