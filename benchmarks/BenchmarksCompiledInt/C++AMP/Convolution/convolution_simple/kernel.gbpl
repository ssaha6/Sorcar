type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "v_img"} {:global} $$v_img : [int]int;
axiom {:array_info "$$v_img"} {:global} {:elem_width 32} {:source_name "v_img"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$v_img : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$v_img : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$v_img : bool;

var {:source_name "v_filter"} {:global} $$v_filter : [int]int;
axiom {:array_info "$$v_filter"} {:global} {:elem_width 32} {:source_name "v_filter"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$v_filter : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$v_filter : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$v_filter : bool;

var {:source_name "v_result"} {:global} $$v_result : [int]int;
axiom {:array_info "$$v_result"} {:global} {:elem_width 32} {:source_name "v_result"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$v_result : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$v_result : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$v_result : bool;

const _WATCHED_OFFSET : int;
const {:group_id_x} group_id_x : int;
const {:group_id_y} group_id_y : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:local_id_y} local_id_y : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function FADD32(int, int) : int;
function FMUL32(int, int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SLE(x : int, y : int) : bool {
  x <= y
}
function {:inline true} BV32_UGT(x : int, y : int) : bool {
  x > y
}
procedure {:source_name "convolution_simple"} {:kernel} $_Z18convolution_simplePfS_S_()
{
  var $sum.i.0:int;
  var $k.i.0:int;
  var $0:int;
  var v0:bool;
  var v1:bool;
  var v2:int;
  var v3:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  $sum.i.0, $k.i.0 := 0, -7;
  goto $1;
$1:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  v0 := BV32_SLE($k.i.0, 7);
  goto $truebb, $falsebb;
$2:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v1 := BV32_UGT(BV32_ADD(BV32_ADD(BV32_MUL(group_size_y, group_id_y), local_id_y), $k.i.0), 511);
  goto $truebb0, $falsebb0;
$3:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  $0 := 511;
  goto $5;
$4:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  $0 := BV32_ADD(BV32_ADD(BV32_MUL(group_size_y, group_id_y), local_id_y), $k.i.0);
  goto $5;
$5:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  assert {:sourceloc} {:sourceloc_num 6} true;
  v2 := $$v_img[BV32_ADD(BV32_MUL($0, 512), BV32_ADD(BV32_MUL(group_size_x, group_id_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 7} true;
  v3 := $$v_filter[BV32_ADD($k.i.0, 7)];
  $sum.i.0, $k.i.0 := FADD32($sum.i.0, FMUL32(v2, v3)), BV32_ADD($k.i.0, 1);
  goto $1;
$_ZL22convolution_dim_simplePKfS0_.exit:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  assert {:sourceloc} {:sourceloc_num 9} true;
  $$v_result[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(group_size_y, group_id_y), local_id_y), 512), BV32_ADD(BV32_MUL(group_size_x, group_id_x), local_id_x))] := $sum.i.0;
  return;
$truebb:
  assume {:partition} v0;
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  goto $2;
$falsebb:
  assume {:partition} !v0;
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  goto $_ZL22convolution_dim_simplePKfS0_.exit;
$truebb0:
  assume {:partition} v1;
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  goto $3;
$falsebb0:
  assume {:partition} !v1;
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  goto $4;
}
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 128 then 1 else 0) != 0;
axiom (if group_size_y == 128 then 1 else 0) != 0;
axiom (if num_groups_x == 4 then 1 else 0) != 0;
axiom (if num_groups_y == 4 then 1 else 0) != 0;
