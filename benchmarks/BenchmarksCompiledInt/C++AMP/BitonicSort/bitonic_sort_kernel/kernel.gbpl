type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "data"} {:global} $$data : [int]int;
axiom {:array_info "$$data"} {:global} {:elem_width 32} {:source_name "data"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$data : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$data : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$data : bool;

var {:source_name "sh_data"} {:group_shared} $$_ZZ19bitonic_sort_kernelPfjjE7sh_data : [int]int;
axiom {:array_info "$$_ZZ19bitonic_sort_kernelPfjjE7sh_data"} {:group_shared} {:elem_width 32} {:source_name "sh_data"} {:source_elem_width 32} {:source_dimensions "512"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ19bitonic_sort_kernelPfjjE7sh_data : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ19bitonic_sort_kernelPfjjE7sh_data : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ19bitonic_sort_kernelPfjjE7sh_data : bool;

const _WATCHED_OFFSET : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function  BV32_LSHR(int, int) : int;
function FEQ32(int, int) : bool;
function FLT32(int, int) : bool;
function {:inline true} BV1_ZEXT32(x : int) : int {
  x
}
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_AND(x : int, y : int) : int {
  if x == y then x else (if x == 0 || y == 0 then 0 else BV32_AND_UF(x, y))
}
function BV32_AND_UF(int, int) : int;
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_OR(x : int, y : int) : int {
  if x == y then x else (if x == 0 then y else (if y == 0 then x else BV32_OR_UF(x, y)))
}
function BV32_OR_UF(int, int) : int;
function {:inline true} BV32_UGT(x : int, y : int) : bool {
  x > y
}
function {:inline true} BV32_XOR(x : int, y : int) : int {
  if x == y then 0 else (if x == 0 then y else (if y == 0 then x else BV32_XOR_UF(x, y)))
}
function BV32_XOR_UF(int, int) : int;
procedure {:source_name "bitonic_sort_kernel"} {:kernel} $_Z19bitonic_sort_kernelPfjj($ulevel:int, $ulevelmask:int)
{
  var $j.0:int;
  var $0:int;
  var v2:bool;
  var v0:int;
  var v1:int;
  var v3:int;
  var v4:int;
  var v5:bool;
  var v6:int;
  var v7:int;
  var v8:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  assert {:sourceloc} {:sourceloc_num 1} true;
  v1 := $$data[v0];
  assert {:sourceloc} {:sourceloc_num 2} true;
  $$_ZZ19bitonic_sort_kernelPfjjE7sh_data[local_id_x] := v1;
  call {:sourceloc_num 3} $bugle_barrier(-1, -1);
  $j.0 := BV32_LSHR($ulevel, 1);
  goto $1;
$1:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  v2 := BV32_UGT($j.0, 0);
  goto $truebb, $falsebb;
$2:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  assert {:sourceloc} {:sourceloc_num 6} true;
  v3 := $$_ZZ19bitonic_sort_kernelPfjjE7sh_data[BV32_AND(local_id_x, BV32_XOR($j.0, -1))];
  assert {:sourceloc} {:sourceloc_num 7} true;
  v4 := $$_ZZ19bitonic_sort_kernelPfjjE7sh_data[BV32_OR(local_id_x, $j.0)];
  v5 := BV1_ZEXT32((if FEQ32(v3, v4) || FLT32(v3, v4) then 1 else 0)) == BV1_ZEXT32((if BV32_AND($ulevelmask, v0) != 0 then 1 else 0));
  goto $truebb0, $falsebb0;
$3:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  assert {:sourceloc} {:sourceloc_num 9} true;
  v6 := $$_ZZ19bitonic_sort_kernelPfjjE7sh_data[BV32_XOR(local_id_x, $j.0)];
  $0 := v6;
  goto $5;
$4:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  assert {:sourceloc} {:sourceloc_num 11} true;
  v7 := $$_ZZ19bitonic_sort_kernelPfjjE7sh_data[local_id_x];
  $0 := v7;
  goto $5;
$5:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  call {:sourceloc_num 13} $bugle_barrier(-1, -1);
  assert {:sourceloc} {:sourceloc_num 14} true;
  $$_ZZ19bitonic_sort_kernelPfjjE7sh_data[local_id_x] := $0;
  call {:sourceloc_num 15} $bugle_barrier(-1, -1);
  goto $6;
$6:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  $j.0 := BV32_LSHR($j.0, 1);
  goto $1;
$7:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  assert {:sourceloc} {:sourceloc_num 18} true;
  v8 := $$_ZZ19bitonic_sort_kernelPfjjE7sh_data[local_id_x];
  assert {:sourceloc} {:sourceloc_num 19} true;
  $$data[v0] := v8;
  return;
$truebb:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  goto $2;
$falsebb:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  goto $7;
$truebb0:
  assume {:partition} v5;
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  goto $3;
$falsebb0:
  assume {:partition} !v5;
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  goto $4;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:int, $1:int);
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 512 then 1 else 0) != 0;
axiom (if num_groups_x == 512 then 1 else 0) != 0;
