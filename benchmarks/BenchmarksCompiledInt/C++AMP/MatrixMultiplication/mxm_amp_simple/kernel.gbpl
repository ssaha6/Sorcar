type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "va"} {:global} $$va : [int]int;
axiom {:array_info "$$va"} {:global} {:elem_width 32} {:source_name "va"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$va : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$va : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$va : bool;

var {:source_name "vb"} {:global} $$vb : [int]int;
axiom {:array_info "$$vb"} {:global} {:elem_width 32} {:source_name "vb"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$vb : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$vb : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$vb : bool;

var {:source_name "vresult"} {:global} $$vresult : [int]int;
axiom {:array_info "$$vresult"} {:global} {:elem_width 32} {:source_name "vresult"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$vresult : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$vresult : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$vresult : bool;

const _WATCHED_OFFSET : int;
const {:group_id_x} group_id_x : int;
const {:group_id_y} group_id_y : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:local_id_y} local_id_y : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function FADD32(int, int) : int;
function FMUL32(int, int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SLT(x : int, y : int) : bool {
  x < y
}
procedure {:source_name "mxm_amp_simple"} {:kernel} $_Z14mxm_amp_simplePKfS0_Pf()
{
  var $result.0:int;
  var $i.0:int;
  var v0:bool;
  var v1:int;
  var v2:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  $result.0, $i.0 := 0, 0;
  goto $1;
$1:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  v0 := BV32_SLT($i.0, 256);
  goto $truebb, $falsebb;
$2:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  assert {:sourceloc} {:sourceloc_num 3} true;
  v1 := $$va[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(group_id_y, group_size_y), local_id_y), 256), $i.0)];
  assert {:sourceloc} {:sourceloc_num 4} true;
  v2 := $$vb[BV32_ADD(BV32_MUL($i.0, 256), BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  goto $3;
$3:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  $result.0, $i.0 := FADD32($result.0, FMUL32(v1, v2)), BV32_ADD($i.0, 1);
  goto $1;
$4:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  assert {:sourceloc} {:sourceloc_num 7} true;
  $$vresult[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(group_id_y, group_size_y), local_id_y), 256), BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := $result.0;
  return;
$truebb:
  assume {:partition} v0;
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  goto $2;
$falsebb:
  assume {:partition} !v0;
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  goto $4;
}
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 64 then 1 else 0) != 0;
axiom (if group_size_y == 64 then 1 else 0) != 0;
axiom (if num_groups_x == 4 then 1 else 0) != 0;
axiom (if num_groups_y == 4 then 1 else 0) != 0;
