type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "graph"} {:global} $$graph : [int]int;
axiom {:array_info "$$graph"} {:global} {:elem_width 32} {:source_name "graph"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$graph : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$graph : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$graph : bool;

var {:source_name "primary_block_buffer"} {:group_shared} $$_ZZ32transitive_closure_stage1_kernelPjiE20primary_block_buffer : [int]int;
axiom {:array_info "$$_ZZ32transitive_closure_stage1_kernelPjiE20primary_block_buffer"} {:group_shared} {:elem_width 32} {:source_name "primary_block_buffer"} {:source_elem_width 32} {:source_dimensions "8,8"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,8"} _READ_HAS_OCCURRED_$$_ZZ32transitive_closure_stage1_kernelPjiE20primary_block_buffer : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,8"} _WRITE_HAS_OCCURRED_$$_ZZ32transitive_closure_stage1_kernelPjiE20primary_block_buffer : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,8"} _ATOMIC_HAS_OCCURRED_$$_ZZ32transitive_closure_stage1_kernelPjiE20primary_block_buffer : bool;

const _WATCHED_OFFSET : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:local_id_y} local_id_y : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_ULT(x : int, y : int) : bool {
  x < y
}
procedure {:source_name "transitive_closure_stage1_kernel"} {:kernel} $_Z32transitive_closure_stage1_kernelPji($passnum:int)
{
  var $k.0:int;
  var v0:int;
  var v1:int;
  var v2:int;
  var v3:bool;
  var v4:int;
  var v5:bool;
  var v6:int;
  var v7:bool;
  var v8:int;
  var v9:bool;
  var v10:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  v0 := BV32_ADD(BV32_MUL($passnum, 8), local_id_y);
  v1 := BV32_ADD(BV32_MUL($passnum, 8), local_id_x);
  assert {:sourceloc} {:sourceloc_num 1} true;
  v2 := $$graph[BV32_ADD(BV32_MUL(v0, 64), v1)];
  assert {:sourceloc} {:sourceloc_num 2} true;
  $$_ZZ32transitive_closure_stage1_kernelPjiE20primary_block_buffer[BV32_ADD(BV32_MUL(local_id_y, 8), local_id_x)] := v2;
  call {:sourceloc_num 3} $bugle_barrier(-1, -1);
  $k.0 := 0;
  goto $1;
$1:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  v3 := BV32_ULT($k.0, 8);
  goto $truebb, $falsebb;
$2:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  assert {:sourceloc} {:sourceloc_num 6} true;
  v4 := $$_ZZ32transitive_closure_stage1_kernelPjiE20primary_block_buffer[BV32_ADD(BV32_MUL(local_id_y, 8), local_id_x)];
  v5 := v4 == 0;
  goto $truebb0, $falsebb0;
$3:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  assert {:sourceloc} {:sourceloc_num 8} true;
  v6 := $$_ZZ32transitive_closure_stage1_kernelPjiE20primary_block_buffer[BV32_ADD(BV32_MUL(local_id_y, 8), $k.0)];
  v7 := v6 != 0;
  goto $truebb1, $falsebb1;
$4:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  assert {:sourceloc} {:sourceloc_num 10} true;
  v8 := $$_ZZ32transitive_closure_stage1_kernelPjiE20primary_block_buffer[BV32_ADD(BV32_MUL($k.0, 8), local_id_x)];
  v9 := v8 != 0;
  goto $truebb2, $falsebb2;
$5:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  assert {:sourceloc} {:sourceloc_num 12} true;
  $$_ZZ32transitive_closure_stage1_kernelPjiE20primary_block_buffer[BV32_ADD(BV32_MUL(local_id_y, 8), local_id_x)] := BV32_ADD(BV32_ADD(BV32_MUL($passnum, 8), $k.0), 2);
  goto $6;
$6:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  goto $7;
$7:
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  call {:sourceloc_num 15} $bugle_barrier(-1, -1);
  goto $8;
$8:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  $k.0 := BV32_ADD($k.0, 1);
  goto $1;
$9:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  assert {:sourceloc} {:sourceloc_num 18} true;
  v10 := $$_ZZ32transitive_closure_stage1_kernelPjiE20primary_block_buffer[BV32_ADD(BV32_MUL(local_id_y, 8), local_id_x)];
  assert {:sourceloc} {:sourceloc_num 19} true;
  $$graph[BV32_ADD(BV32_MUL(v0, 64), v1)] := v10;
  return;
$truebb:
  assume {:partition} v3;
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  goto $2;
$falsebb:
  assume {:partition} !v3;
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  goto $9;
$truebb0:
  assume {:partition} v5;
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  goto $3;
$falsebb0:
  assume {:partition} !v5;
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  goto $7;
$truebb1:
  assume {:partition} v7;
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  goto $4;
$falsebb1:
  assume {:partition} !v7;
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  goto $6;
$truebb2:
  assume {:partition} v9;
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  goto $5;
$falsebb2:
  assume {:partition} !v9;
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  goto $6;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:int, $1:int);
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 8 then 1 else 0) != 0;
axiom (if group_size_y == 8 then 1 else 0) != 0;
axiom (if num_groups_x == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
