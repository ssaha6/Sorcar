type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "graph"} {:global} $$graph : [int]int;
axiom {:array_info "$$graph"} {:global} {:elem_width 32} {:source_name "graph"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$graph : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$graph : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$graph : bool;

var {:source_name "primary_block_buffer"} {:group_shared} $$_ZZ32transitive_closure_stage2_kernelPjiE20primary_block_buffer : [int]int;
axiom {:array_info "$$_ZZ32transitive_closure_stage2_kernelPjiE20primary_block_buffer"} {:group_shared} {:elem_width 32} {:source_name "primary_block_buffer"} {:source_elem_width 32} {:source_dimensions "8,8"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,8"} _READ_HAS_OCCURRED_$$_ZZ32transitive_closure_stage2_kernelPjiE20primary_block_buffer : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,8"} _WRITE_HAS_OCCURRED_$$_ZZ32transitive_closure_stage2_kernelPjiE20primary_block_buffer : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,8"} _ATOMIC_HAS_OCCURRED_$$_ZZ32transitive_closure_stage2_kernelPjiE20primary_block_buffer : bool;

var {:source_name "curr_block_buffer"} {:group_shared} $$_ZZ32transitive_closure_stage2_kernelPjiE17curr_block_buffer : [int]int;
axiom {:array_info "$$_ZZ32transitive_closure_stage2_kernelPjiE17curr_block_buffer"} {:group_shared} {:elem_width 32} {:source_name "curr_block_buffer"} {:source_elem_width 32} {:source_dimensions "8,8"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,8"} _READ_HAS_OCCURRED_$$_ZZ32transitive_closure_stage2_kernelPjiE17curr_block_buffer : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,8"} _WRITE_HAS_OCCURRED_$$_ZZ32transitive_closure_stage2_kernelPjiE17curr_block_buffer : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,8"} _ATOMIC_HAS_OCCURRED_$$_ZZ32transitive_closure_stage2_kernelPjiE17curr_block_buffer : bool;

const _WATCHED_OFFSET : int;
const {:group_id_x} group_id_x : int;
const {:group_id_y} group_id_y : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:local_id_y} local_id_y : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_ULT(x : int, y : int) : bool {
  x < y
}
procedure {:source_name "transitive_closure_stage2_kernel"} {:kernel} $_Z32transitive_closure_stage2_kernelPji($passnum:int)
{
  var $group_id1.0:int;
  var $group_id0.1:int;
  var $group_id1.1:int;
  var $group_id0.0:int;
  var $k.0:int;
  var v0:int;
  var v1:bool;
  var v2:bool;
  var v3:bool;
  var v4:int;
  var v5:int;
  var v6:int;
  var v7:bool;
  var v8:int;
  var v9:bool;
  var v10:bool;
  var v11:int;
  var v12:bool;
  var v13:int;
  var v14:bool;
  var v15:int;
  var v16:bool;
  var v17:int;
  var v18:bool;
  var v19:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  assert {:sourceloc} {:sourceloc_num 1} true;
  v0 := $$graph[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL($passnum, 8), local_id_y), 64), BV32_ADD(BV32_MUL($passnum, 8), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 2} true;
  $$_ZZ32transitive_closure_stage2_kernelPjiE20primary_block_buffer[BV32_ADD(BV32_MUL(local_id_y, 8), local_id_x)] := v0;
  v1 := group_id_y == 0;
  goto $truebb, $falsebb;
$1:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  v2 := BV32_ULT(group_id_x, $passnum);
  goto $truebb0, $falsebb0;
$2:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  $group_id1.0 := group_id_x;
  goto $4;
$3:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  $group_id1.0 := BV32_ADD(group_id_x, 1);
  goto $4;
$4:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  $group_id0.1, $group_id1.1 := $passnum, $group_id1.0;
  goto $9;
$5:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  v3 := BV32_ULT(group_id_x, $passnum);
  goto $truebb1, $falsebb1;
$6:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  $group_id0.0 := group_id_x;
  goto $8;
$7:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  $group_id0.0 := BV32_ADD(group_id_x, 1);
  goto $8;
$8:
  assert {:block_sourceloc} true;
  $group_id0.1, $group_id1.1 := $group_id0.0, $passnum;
  goto $9;
$9:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  v4 := BV32_ADD(BV32_MUL($group_id0.1, 8), local_id_y);
  v5 := BV32_ADD(BV32_MUL($group_id1.1, 8), local_id_x);
  assert {:sourceloc} {:sourceloc_num 11} true;
  v6 := $$graph[BV32_ADD(BV32_MUL(v4, 64), v5)];
  assert {:sourceloc} {:sourceloc_num 12} true;
  $$_ZZ32transitive_closure_stage2_kernelPjiE17curr_block_buffer[BV32_ADD(BV32_MUL(local_id_y, 8), local_id_x)] := v6;
  call {:sourceloc_num 13} $bugle_barrier(-1, -1);
  $k.0 := 0;
  goto $10;
$10:
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  v7 := BV32_ULT($k.0, 8);
  goto $truebb2, $falsebb2;
$11:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  assert {:sourceloc} {:sourceloc_num 16} true;
  v8 := $$_ZZ32transitive_closure_stage2_kernelPjiE17curr_block_buffer[BV32_ADD(BV32_MUL(local_id_y, 8), local_id_x)];
  v9 := v8 == 0;
  goto $truebb3, $falsebb3;
$12:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  v10 := group_id_y == 0;
  goto $truebb4, $falsebb4;
$13:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  assert {:sourceloc} {:sourceloc_num 19} true;
  v11 := $$_ZZ32transitive_closure_stage2_kernelPjiE20primary_block_buffer[BV32_ADD(BV32_MUL(local_id_y, 8), $k.0)];
  v12 := v11 != 0;
  goto $truebb5, $falsebb5;
$14:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  assert {:sourceloc} {:sourceloc_num 21} true;
  v13 := $$_ZZ32transitive_closure_stage2_kernelPjiE17curr_block_buffer[BV32_ADD(BV32_MUL($k.0, 8), local_id_x)];
  v14 := v13 != 0;
  goto $truebb6, $falsebb6;
$15:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  assert {:sourceloc} {:sourceloc_num 23} true;
  $$_ZZ32transitive_closure_stage2_kernelPjiE17curr_block_buffer[BV32_ADD(BV32_MUL(local_id_y, 8), local_id_x)] := BV32_ADD(BV32_ADD(BV32_MUL($passnum, 8), $k.0), 2);
  goto $16;
$16:
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  goto $21;
$17:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  assert {:sourceloc} {:sourceloc_num 26} true;
  v15 := $$_ZZ32transitive_closure_stage2_kernelPjiE17curr_block_buffer[BV32_ADD(BV32_MUL(local_id_y, 8), $k.0)];
  v16 := v15 != 0;
  goto $truebb7, $falsebb7;
$18:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  assert {:sourceloc} {:sourceloc_num 28} true;
  v17 := $$_ZZ32transitive_closure_stage2_kernelPjiE20primary_block_buffer[BV32_ADD(BV32_MUL($k.0, 8), local_id_x)];
  v18 := v17 != 0;
  goto $truebb8, $falsebb8;
$19:
  assert {:block_sourceloc} {:sourceloc_num 29} true;
  assert {:sourceloc} {:sourceloc_num 30} true;
  $$_ZZ32transitive_closure_stage2_kernelPjiE17curr_block_buffer[BV32_ADD(BV32_MUL(local_id_y, 8), local_id_x)] := BV32_ADD(BV32_ADD(BV32_MUL($passnum, 8), $k.0), 2);
  goto $20;
$20:
  assert {:block_sourceloc} true;
  goto $21;
$21:
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  goto $22;
$22:
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  call {:sourceloc_num 33} $bugle_barrier(-1, -1);
  goto $23;
$23:
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  $k.0 := BV32_ADD($k.0, 1);
  goto $10;
$24:
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  assert {:sourceloc} {:sourceloc_num 36} true;
  v19 := $$_ZZ32transitive_closure_stage2_kernelPjiE17curr_block_buffer[BV32_ADD(BV32_MUL(local_id_y, 8), local_id_x)];
  assert {:sourceloc} {:sourceloc_num 37} true;
  $$graph[BV32_ADD(BV32_MUL(v4, 64), v5)] := v19;
  return;
$truebb:
  assume {:partition} v1;
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  goto $1;
$falsebb:
  assume {:partition} !v1;
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  goto $5;
$truebb0:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 40} true;
  goto $2;
$falsebb0:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 41} true;
  goto $3;
$truebb1:
  assume {:partition} v3;
  assert {:block_sourceloc} {:sourceloc_num 42} true;
  goto $6;
$falsebb1:
  assume {:partition} !v3;
  assert {:block_sourceloc} {:sourceloc_num 43} true;
  goto $7;
$truebb2:
  assume {:partition} v7;
  assert {:block_sourceloc} {:sourceloc_num 44} true;
  goto $11;
$falsebb2:
  assume {:partition} !v7;
  assert {:block_sourceloc} {:sourceloc_num 45} true;
  goto $24;
$truebb3:
  assume {:partition} v9;
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  goto $12;
$falsebb3:
  assume {:partition} !v9;
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  goto $22;
$truebb4:
  assume {:partition} v10;
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  goto $13;
$falsebb4:
  assume {:partition} !v10;
  assert {:block_sourceloc} {:sourceloc_num 49} true;
  goto $17;
$truebb5:
  assume {:partition} v12;
  assert {:block_sourceloc} {:sourceloc_num 50} true;
  goto $14;
$falsebb5:
  assume {:partition} !v12;
  assert {:block_sourceloc} {:sourceloc_num 51} true;
  goto $16;
$truebb6:
  assume {:partition} v14;
  assert {:block_sourceloc} {:sourceloc_num 52} true;
  goto $15;
$falsebb6:
  assume {:partition} !v14;
  assert {:block_sourceloc} {:sourceloc_num 53} true;
  goto $16;
$truebb7:
  assume {:partition} v16;
  assert {:block_sourceloc} {:sourceloc_num 54} true;
  goto $18;
$falsebb7:
  assume {:partition} !v16;
  assert {:block_sourceloc} {:sourceloc_num 55} true;
  goto $20;
$truebb8:
  assume {:partition} v18;
  assert {:block_sourceloc} {:sourceloc_num 56} true;
  goto $19;
$falsebb8:
  assume {:partition} !v18;
  assert {:block_sourceloc} {:sourceloc_num 57} true;
  goto $20;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:int, $1:int);
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 8 then 1 else 0) != 0;
axiom (if group_size_y == 8 then 1 else 0) != 0;
axiom (if num_groups_x == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
