type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "total_masks"} {:global} $$total_masks : [int]int;
axiom {:array_info "$$total_masks"} {:global} {:elem_width 32} {:source_name "total_masks"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$total_masks : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$total_masks : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$total_masks : bool;

var {:source_name "total_l_masks"} {:global} $$total_l_masks : [int]int;
axiom {:array_info "$$total_l_masks"} {:global} {:elem_width 32} {:source_name "total_l_masks"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$total_l_masks : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$total_l_masks : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$total_l_masks : bool;

var {:source_name "total_r_masks"} {:global} $$total_r_masks : [int]int;
axiom {:array_info "$$total_r_masks"} {:global} {:elem_width 32} {:source_name "total_r_masks"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$total_r_masks : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$total_r_masks : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$total_r_masks : bool;

var {:source_name "results"} {:global} $$results : [int]int;
axiom {:array_info "$$results"} {:global} {:elem_width 32} {:source_name "results"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$results : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$results : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$results : bool;

var {:source_name "mask"} {:group_shared} $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE4mask : [int]int;
axiom {:array_info "$$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE4mask"} {:group_shared} {:elem_width 32} {:source_name "mask"} {:source_elem_width 32} {:source_dimensions "96,10"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,10"} _READ_HAS_OCCURRED_$$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE4mask : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,10"} _WRITE_HAS_OCCURRED_$$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE4mask : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,10"} _ATOMIC_HAS_OCCURRED_$$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE4mask : bool;

var {:source_name "l_mask"} {:group_shared} $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE6l_mask : [int]int;
axiom {:array_info "$$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE6l_mask"} {:group_shared} {:elem_width 32} {:source_name "l_mask"} {:source_elem_width 32} {:source_dimensions "96,10"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,10"} _READ_HAS_OCCURRED_$$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE6l_mask : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,10"} _WRITE_HAS_OCCURRED_$$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE6l_mask : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,10"} _ATOMIC_HAS_OCCURRED_$$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE6l_mask : bool;

var {:source_name "r_mask"} {:group_shared} $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE6r_mask : [int]int;
axiom {:array_info "$$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE6r_mask"} {:group_shared} {:elem_width 32} {:source_name "r_mask"} {:source_elem_width 32} {:source_dimensions "96,10"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,10"} _READ_HAS_OCCURRED_$$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE6r_mask : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,10"} _WRITE_HAS_OCCURRED_$$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE6r_mask : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,10"} _ATOMIC_HAS_OCCURRED_$$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE6r_mask : bool;

var {:source_name "m"} {:group_shared} $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE1m : [int]int;
axiom {:array_info "$$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE1m"} {:group_shared} {:elem_width 32} {:source_name "m"} {:source_elem_width 32} {:source_dimensions "96,10"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,10"} _READ_HAS_OCCURRED_$$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE1m : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,10"} _WRITE_HAS_OCCURRED_$$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE1m : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,10"} _ATOMIC_HAS_OCCURRED_$$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE1m : bool;

var {:source_name "sum"} {:group_shared} $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum : [int]int;
axiom {:array_info "$$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum"} {:group_shared} {:elem_width 32} {:source_name "sum"} {:source_elem_width 32} {:source_dimensions "96"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum : bool;

const _WATCHED_OFFSET : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function  BV32_LSHR(int, int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_AND(x : int, y : int) : int {
  if x == y then x else (if x == 0 || y == 0 then 0 else BV32_AND_UF(x, y))
}
function BV32_AND_UF(int, int) : int;
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_OR(x : int, y : int) : int {
  if x == y then x else (if x == 0 then y else (if y == 0 then x else BV32_OR_UF(x, y)))
}
function BV32_OR_UF(int, int) : int;
function {:inline true} BV32_SGE(x : int, y : int) : bool {
  x >= y
}
function {:inline true} BV32_SHL(x : int, y : int) : int {
  if x >= 0 && y == 1 then x*2 else BV32_SHL_UF(x,y)
}
function BV32_SHL_UF(int, int) : int;
function {:inline true} BV32_SLT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV32_SUB(x : int, y : int) : int {
  x - y
}
function {:inline true} BV32_XOR(x : int, y : int) : int {
  if x == y then 0 else (if x == 0 then y else (if y == 0 then x else BV32_XOR_UF(x, y)))
}
function BV32_XOR_UF(int, int) : int;
procedure {:source_name "solve_nqueen_cuda_kernel"} {:kernel} $_Z24solve_nqueen_cuda_kerneliiPjS_S_S_i($n:int, $mark:int, $total_conditions:int)
{
  var $total.0:int;
  var $i.0:int;
  var $total.3:int;
  var $i.3:int;
  var $total.1:int;
  var $i.1:int;
  var $total.2:int;
  var $i.2:int;
  var v0:int;
  var v2:bool;
  var v1:int;
  var v3:int;
  var v4:int;
  var v5:int;
  var v6:int;
  var v7:int;
  var v8:int;
  var v9:bool;
  var v11:bool;
  var v10:int;
  var v12:int;
  var v13:int;
  var v14:int;
  var v15:int;
  var v16:bool;
  var v17:bool;
  var v18:int;
  var v19:int;
  var v20:int;
  var v21:int;
  var v22:int;
  var v23:int;
  var v24:bool;
  var v25:bool;
  var v26:int;
  var v27:int;
  var v28:bool;
  var v29:int;
  var v30:int;
  var v31:bool;
  var v32:int;
  var v33:int;
  var v34:bool;
  var v35:int;
  var v36:int;
  var v37:bool;
  var v38:int;
  var v39:int;
  var v40:bool;
  var v41:int;
  var v42:int;
  var v43:bool;
  var v44:int;
  var v45:int;
  var v46:bool;
  var v47:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  v1 := BV32_SUB(BV32_SHL(1, $n), 1);
  v2 := BV32_SLT(v0, $total_conditions);
  goto $truebb, $falsebb;
$1:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  assert {:sourceloc} {:sourceloc_num 2} true;
  v3 := $$total_masks[v0];
  assert {:sourceloc} {:sourceloc_num 3} true;
  $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE4mask[BV32_MUL(local_id_x, 10)] := v3;
  assert {:sourceloc} {:sourceloc_num 4} true;
  v4 := $$total_l_masks[v0];
  assert {:sourceloc} {:sourceloc_num 5} true;
  $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE6l_mask[BV32_MUL(local_id_x, 10)] := v4;
  assert {:sourceloc} {:sourceloc_num 6} true;
  v5 := $$total_r_masks[v0];
  assert {:sourceloc} {:sourceloc_num 7} true;
  $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE6r_mask[BV32_MUL(local_id_x, 10)] := v5;
  assert {:sourceloc} {:sourceloc_num 8} true;
  v6 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE4mask[BV32_MUL(local_id_x, 10)];
  assert {:sourceloc} {:sourceloc_num 9} true;
  v7 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE6l_mask[BV32_MUL(local_id_x, 10)];
  assert {:sourceloc} {:sourceloc_num 10} true;
  v8 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE6r_mask[BV32_MUL(local_id_x, 10)];
  assert {:sourceloc} {:sourceloc_num 11} true;
  $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE1m[BV32_MUL(local_id_x, 10)] := BV32_OR(BV32_OR(v6, v7), v8);
  $total.0, $i.0 := 0, 0;
  goto $2;
$2:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  v9 := BV32_SGE($i.0, 0);
  goto $truebb0, $falsebb0;
$3:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  assert {:sourceloc} {:sourceloc_num 14} true;
  v10 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE1m[BV32_ADD(BV32_MUL(local_id_x, 10), $i.0)];
  v11 := BV32_AND(v10, v1) == v1;
  goto $truebb1, $falsebb1;
$4:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  $total.3, $i.3 := $total.0, BV32_ADD($i.0, -1);
  goto $12;
$5:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  assert {:sourceloc} {:sourceloc_num 17} true;
  v12 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE1m[BV32_ADD(BV32_MUL(local_id_x, 10), $i.0)];
  assert {:sourceloc} {:sourceloc_num 18} true;
  v13 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE1m[BV32_ADD(BV32_MUL(local_id_x, 10), $i.0)];
  v14 := BV32_AND(BV32_ADD(v12, 1), BV32_XOR(v13, -1));
  assert {:sourceloc} {:sourceloc_num 19} true;
  v15 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE1m[BV32_ADD(BV32_MUL(local_id_x, 10), $i.0)];
  assert {:sourceloc} {:sourceloc_num 20} true;
  $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE1m[BV32_ADD(BV32_MUL(local_id_x, 10), $i.0)] := BV32_OR(v15, v14);
  v16 := BV32_AND(v14, v1) != 0;
  goto $truebb2, $falsebb2;
$6:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  v17 := BV32_ADD($i.0, 1) == $mark;
  goto $truebb3, $falsebb3;
$7:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  $total.1, $i.1 := BV32_ADD($total.0, 1), BV32_ADD($i.0, -1);
  goto $9;
$8:
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  assert {:sourceloc} {:sourceloc_num 24} true;
  v18 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE4mask[BV32_ADD(BV32_MUL(local_id_x, 10), $i.0)];
  assert {:sourceloc} {:sourceloc_num 25} true;
  $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE4mask[BV32_ADD(BV32_MUL(local_id_x, 10), BV32_ADD($i.0, 1))] := BV32_OR(v18, v14);
  assert {:sourceloc} {:sourceloc_num 26} true;
  v19 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE6l_mask[BV32_ADD(BV32_MUL(local_id_x, 10), $i.0)];
  assert {:sourceloc} {:sourceloc_num 27} true;
  $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE6l_mask[BV32_ADD(BV32_MUL(local_id_x, 10), BV32_ADD($i.0, 1))] := BV32_SHL(BV32_OR(v19, v14), 1);
  assert {:sourceloc} {:sourceloc_num 28} true;
  v20 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE6r_mask[BV32_ADD(BV32_MUL(local_id_x, 10), $i.0)];
  assert {:sourceloc} {:sourceloc_num 29} true;
  $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE6r_mask[BV32_ADD(BV32_MUL(local_id_x, 10), BV32_ADD($i.0, 1))] := BV32_LSHR(BV32_OR(v20, v14), 1);
  assert {:sourceloc} {:sourceloc_num 30} true;
  v21 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE4mask[BV32_ADD(BV32_MUL(local_id_x, 10), BV32_ADD($i.0, 1))];
  assert {:sourceloc} {:sourceloc_num 31} true;
  v22 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE6l_mask[BV32_ADD(BV32_MUL(local_id_x, 10), BV32_ADD($i.0, 1))];
  assert {:sourceloc} {:sourceloc_num 32} true;
  v23 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE6r_mask[BV32_ADD(BV32_MUL(local_id_x, 10), BV32_ADD($i.0, 1))];
  assert {:sourceloc} {:sourceloc_num 33} true;
  $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE1m[BV32_ADD(BV32_MUL(local_id_x, 10), BV32_ADD($i.0, 1))] := BV32_OR(BV32_OR(v21, v22), v23);
  $total.1, $i.1 := $total.0, BV32_ADD($i.0, 1);
  goto $9;
$9:
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  $total.2, $i.2 := $total.1, $i.1;
  goto $11;
$10:
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  $total.2, $i.2 := $total.0, BV32_ADD($i.0, -1);
  goto $11;
$11:
  assert {:block_sourceloc} true;
  $total.3, $i.3 := $total.2, $i.2;
  goto $12;
$12:
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  $total.0, $i.0 := $total.3, $i.3;
  goto $2;
$13:
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  assert {:sourceloc} {:sourceloc_num 38} true;
  $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum[local_id_x] := $total.0;
  goto $15;
$14:
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  assert {:sourceloc} {:sourceloc_num 40} true;
  $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum[local_id_x] := 0;
  goto $15;
$15:
  assert {:block_sourceloc} {:sourceloc_num 41} true;
  call {:sourceloc_num 42} $bugle_barrier(-1, -1);
  v24 := BV32_SLT(local_id_x, 64);
  goto $truebb4, $falsebb4;
$16:
  assert {:block_sourceloc} {:sourceloc_num 43} true;
  v25 := BV32_SLT(BV32_ADD(local_id_x, 64), 96);
  goto $truebb5, $falsebb5;
$17:
  assert {:block_sourceloc} {:sourceloc_num 44} true;
  assert {:sourceloc} {:sourceloc_num 45} true;
  v26 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum[BV32_ADD(local_id_x, 64)];
  assert {:sourceloc} {:sourceloc_num 46} true;
  v27 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum[local_id_x];
  assert {:sourceloc} {:sourceloc_num 47} true;
  $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum[local_id_x] := BV32_ADD(v27, v26);
  goto $18;
$18:
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  call {:sourceloc_num 49} $bugle_barrier(-1, -1);
  v28 := BV32_SLT(local_id_x, 32);
  goto $truebb6, $falsebb6;
$19:
  assert {:block_sourceloc} {:sourceloc_num 50} true;
  assert {:sourceloc} {:sourceloc_num 51} true;
  v29 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum[BV32_ADD(local_id_x, 32)];
  assert {:sourceloc} {:sourceloc_num 52} true;
  v30 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum[local_id_x];
  assert {:sourceloc} {:sourceloc_num 53} true;
  $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum[local_id_x] := BV32_ADD(v30, v29);
  goto $20;
$20:
  assert {:block_sourceloc} {:sourceloc_num 54} true;
  call {:sourceloc_num 55} $bugle_barrier(-1, -1);
  v31 := BV32_SLT(local_id_x, 16);
  goto $truebb7, $falsebb7;
$21:
  assert {:block_sourceloc} {:sourceloc_num 56} true;
  assert {:sourceloc} {:sourceloc_num 57} true;
  v32 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum[BV32_ADD(local_id_x, 16)];
  assert {:sourceloc} {:sourceloc_num 58} true;
  v33 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum[local_id_x];
  assert {:sourceloc} {:sourceloc_num 59} true;
  $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum[local_id_x] := BV32_ADD(v33, v32);
  goto $22;
$22:
  assert {:block_sourceloc} {:sourceloc_num 60} true;
  call {:sourceloc_num 61} $bugle_barrier(-1, -1);
  v34 := BV32_SLT(local_id_x, 8);
  goto $truebb8, $falsebb8;
$23:
  assert {:block_sourceloc} {:sourceloc_num 62} true;
  assert {:sourceloc} {:sourceloc_num 63} true;
  v35 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum[BV32_ADD(local_id_x, 8)];
  assert {:sourceloc} {:sourceloc_num 64} true;
  v36 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum[local_id_x];
  assert {:sourceloc} {:sourceloc_num 65} true;
  $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum[local_id_x] := BV32_ADD(v36, v35);
  goto $24;
$24:
  assert {:block_sourceloc} {:sourceloc_num 66} true;
  call {:sourceloc_num 67} $bugle_barrier(-1, -1);
  v37 := BV32_SLT(local_id_x, 4);
  goto $truebb9, $falsebb9;
$25:
  assert {:block_sourceloc} {:sourceloc_num 68} true;
  assert {:sourceloc} {:sourceloc_num 69} true;
  v38 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum[BV32_ADD(local_id_x, 4)];
  assert {:sourceloc} {:sourceloc_num 70} true;
  v39 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum[local_id_x];
  assert {:sourceloc} {:sourceloc_num 71} true;
  $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum[local_id_x] := BV32_ADD(v39, v38);
  goto $26;
$26:
  assert {:block_sourceloc} {:sourceloc_num 72} true;
  call {:sourceloc_num 73} $bugle_barrier(-1, -1);
  v40 := BV32_SLT(local_id_x, 2);
  goto $truebb10, $falsebb10;
$27:
  assert {:block_sourceloc} {:sourceloc_num 74} true;
  assert {:sourceloc} {:sourceloc_num 75} true;
  v41 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum[BV32_ADD(local_id_x, 2)];
  assert {:sourceloc} {:sourceloc_num 76} true;
  v42 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum[local_id_x];
  assert {:sourceloc} {:sourceloc_num 77} true;
  $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum[local_id_x] := BV32_ADD(v42, v41);
  goto $28;
$28:
  assert {:block_sourceloc} {:sourceloc_num 78} true;
  call {:sourceloc_num 79} $bugle_barrier(-1, -1);
  v43 := BV32_SLT(local_id_x, 1);
  goto $truebb11, $falsebb11;
$29:
  assert {:block_sourceloc} {:sourceloc_num 80} true;
  assert {:sourceloc} {:sourceloc_num 81} true;
  v44 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum[BV32_ADD(local_id_x, 1)];
  assert {:sourceloc} {:sourceloc_num 82} true;
  v45 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum[local_id_x];
  assert {:sourceloc} {:sourceloc_num 83} true;
  $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum[local_id_x] := BV32_ADD(v45, v44);
  goto $30;
$30:
  assert {:block_sourceloc} {:sourceloc_num 84} true;
  call {:sourceloc_num 85} $bugle_barrier(-1, -1);
  v46 := local_id_x == 0;
  goto $truebb12, $falsebb12;
$31:
  assert {:block_sourceloc} {:sourceloc_num 86} true;
  assert {:sourceloc} {:sourceloc_num 87} true;
  v47 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum[0];
  assert {:sourceloc} {:sourceloc_num 88} true;
  $$results[group_id_x] := v47;
  goto $32;
$32:
  assert {:block_sourceloc} {:sourceloc_num 89} true;
  return;
$truebb:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 90} true;
  goto $1;
$falsebb:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 91} true;
  goto $14;
$truebb0:
  assume {:partition} v9;
  assert {:block_sourceloc} {:sourceloc_num 92} true;
  goto $3;
$falsebb0:
  assume {:partition} !v9;
  assert {:block_sourceloc} {:sourceloc_num 93} true;
  goto $13;
$truebb1:
  assume {:partition} v11;
  assert {:block_sourceloc} {:sourceloc_num 94} true;
  goto $4;
$falsebb1:
  assume {:partition} !v11;
  assert {:block_sourceloc} {:sourceloc_num 95} true;
  goto $5;
$truebb2:
  assume {:partition} v16;
  assert {:block_sourceloc} {:sourceloc_num 96} true;
  goto $6;
$falsebb2:
  assume {:partition} !v16;
  assert {:block_sourceloc} {:sourceloc_num 97} true;
  goto $10;
$truebb3:
  assume {:partition} v17;
  assert {:block_sourceloc} {:sourceloc_num 98} true;
  goto $7;
$falsebb3:
  assume {:partition} !v17;
  assert {:block_sourceloc} {:sourceloc_num 99} true;
  goto $8;
$truebb4:
  assume {:partition} v24;
  assert {:block_sourceloc} {:sourceloc_num 100} true;
  goto $16;
$falsebb4:
  assume {:partition} !v24;
  assert {:block_sourceloc} {:sourceloc_num 101} true;
  goto $18;
$truebb5:
  assume {:partition} v25;
  assert {:block_sourceloc} {:sourceloc_num 102} true;
  goto $17;
$falsebb5:
  assume {:partition} !v25;
  assert {:block_sourceloc} {:sourceloc_num 103} true;
  goto $18;
$truebb6:
  assume {:partition} v28;
  assert {:block_sourceloc} {:sourceloc_num 104} true;
  goto $19;
$falsebb6:
  assume {:partition} !v28;
  assert {:block_sourceloc} {:sourceloc_num 105} true;
  goto $20;
$truebb7:
  assume {:partition} v31;
  assert {:block_sourceloc} {:sourceloc_num 106} true;
  goto $21;
$falsebb7:
  assume {:partition} !v31;
  assert {:block_sourceloc} {:sourceloc_num 107} true;
  goto $22;
$truebb8:
  assume {:partition} v34;
  assert {:block_sourceloc} {:sourceloc_num 108} true;
  goto $23;
$falsebb8:
  assume {:partition} !v34;
  assert {:block_sourceloc} {:sourceloc_num 109} true;
  goto $24;
$truebb9:
  assume {:partition} v37;
  assert {:block_sourceloc} {:sourceloc_num 110} true;
  goto $25;
$falsebb9:
  assume {:partition} !v37;
  assert {:block_sourceloc} {:sourceloc_num 111} true;
  goto $26;
$truebb10:
  assume {:partition} v40;
  assert {:block_sourceloc} {:sourceloc_num 112} true;
  goto $27;
$falsebb10:
  assume {:partition} !v40;
  assert {:block_sourceloc} {:sourceloc_num 113} true;
  goto $28;
$truebb11:
  assume {:partition} v43;
  assert {:block_sourceloc} {:sourceloc_num 114} true;
  goto $29;
$falsebb11:
  assume {:partition} !v43;
  assert {:block_sourceloc} {:sourceloc_num 115} true;
  goto $30;
$truebb12:
  assume {:partition} v46;
  assert {:block_sourceloc} {:sourceloc_num 116} true;
  goto $31;
$falsebb12:
  assume {:partition} !v46;
  assert {:block_sourceloc} {:sourceloc_num 117} true;
  goto $32;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:int, $1:int);
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 96 then 1 else 0) != 0;
axiom (if num_groups_x == 96 then 1 else 0) != 0;
