type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "d_u1"} {:global} $$d_u1 : [int]int;
axiom {:array_info "$$d_u1"} {:global} {:elem_width 32} {:source_name "d_u1"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_u1 : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_u1 : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_u1 : bool;

var {:source_name "d_u2"} {:global} $$d_u2 : [int]int;
axiom {:array_info "$$d_u2"} {:global} {:elem_width 32} {:source_name "d_u2"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_u2 : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_u2 : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_u2 : bool;

var {:source_name "u1"} {:group_shared} $$_ZZ13GPU_laplace3diiiiPfS_E2u1 : [int]int;
axiom {:array_info "$$_ZZ13GPU_laplace3diiiiPfS_E2u1"} {:group_shared} {:elem_width 32} {:source_name "u1"} {:source_elem_width 32} {:source_dimensions "612"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ13GPU_laplace3diiiiPfS_E2u1 : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ13GPU_laplace3diiiiPfS_E2u1 : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ13GPU_laplace3diiiiPfS_E2u1 : bool;

const _WATCHED_OFFSET : int;
const {:group_id_x} group_id_x : int;
const {:group_id_y} group_id_y : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:local_id_y} local_id_y : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function FADD32(int, int) : int;
function FMUL32(int, int) : int;
function {:inline true} BV1_XOR(x : int, y : int) : int {
  if (x == 1 || x == -1) && (y == 1 || y == -1) then 0 else (
    if (x == 1 || x == -1) && y == 0 then 1 else (
      if x == 0 && (y == 1 || y == -1) then 1 else (
        if x == y then 0 else BV1_XOR_UF(x, y))))
}
function BV1_XOR_UF(int, int) : int;
function {:inline true} BV1_ZEXT32(x : int) : int {
  x
}
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_AND(x : int, y : int) : int {
  if x == y then x else (if x == 0 || y == 0 then 0 else BV32_AND_UF(x, y))
}
function BV32_AND_UF(int, int) : int;
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_OR(x : int, y : int) : int {
  if x == y then x else (if x == 0 then y else (if y == 0 then x else BV32_OR_UF(x, y)))
}
function BV32_OR_UF(int, int) : int;
function {:inline true} BV32_SDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_SGE(x : int, y : int) : bool {
  x >= y
}
function {:inline true} BV32_SLT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV32_SREM(x : int, y : int) : int {
  x mod y
}
function {:inline true} BV32_SUB(x : int, y : int) : int {
  x - y
}
function {:inline true} BV32_UDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_ULT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV32_UREM(x : int, y : int) : int {
  x mod y
}
procedure {:source_name "GPU_laplace3d"} {:kernel} $_Z13GPU_laplace3diiiiPfS_($NX:int, $NY:int, $NZ:int, $pitch:int)
requires {:sourceloc_num 0} (if $NX == 100 then 1 else 0) != 0;
requires {:sourceloc_num 1} (if $NY == 100 then 1 else 0) != 0;
requires {:sourceloc_num 2} (if $NZ == 100 then 1 else 0) != 0;
requires {:sourceloc_num 3} (if $pitch == 128 then 1 else 0) != 0;
{
  var $indg_h.0:int;
  var $ind_h.0:int;
  var $halo.0:int;
  var $i.0:int;
  var $j.0:int;
  var $0:int;
  var $1:int;
  var $indg.0:int;
  var $indg_h.1:int;
  var $indg0.0:int;
  var $k.0:int;
  var $indg.1:int;
  var $indg0.1:int;
  var $indg_h.2:int;
  var $u2.0:int;
  var v0:int;
  var v1:int;
  var v2:int;
  var v3:bool;
  var v21:int;
  var v50:int;
  var v49:int;
  var v4:bool;
  var v5:int;
  var v6:int;
  var v7:bool;
  var v8:bool;
  var v9:bool;
  var v11:int;
  var v10:int;
  var v12:int;
  var v13:int;
  var v14:int;
  var v15:bool;
  var v16:int;
  var v17:bool;
  var v18:int;
  var v19:bool;
  var v20:int;
  var v22:bool;
  var v23:bool;
  var v24:int;
  var v25:int;
  var v26:int;
  var v27:bool;
  var v28:int;
  var v29:bool;
  var v30:int;
  var v31:int;
  var v32:int;
  var v33:bool;
  var v34:int;
  var v35:bool;
  var v36:bool;
  var v37:bool;
  var v38:bool;
  var v39:bool;
  var v40:bool;
  var v41:bool;
  var v42:int;
  var v43:int;
  var v44:int;
  var v45:int;
  var v46:int;
  var v47:int;
  var v48:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  v0 := BV32_SUB($NZ, 1);
  v1 := BV32_ADD(local_id_x, BV32_MUL(local_id_y, 32));
  v2 := BV1_ZEXT32((if BV32_SLT(v1, 76) then 1 else 0));
  v3 := v2 != 0;
  goto $truebb, $falsebb;
$1:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  v4 := BV32_ULT(local_id_y, 2);
  goto $truebb0, $falsebb0;
$2:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  $i.0, $j.0 := local_id_x, BV32_SUB(BV32_MUL(local_id_y, 5), 1);
  goto $4;
$3:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  $i.0, $j.0 := BV32_SUB(BV32_MUL(BV32_SREM(v1, 2), 33), 1), BV32_SUB(BV32_SUB(BV32_SDIV(v1, 2), 32), 1);
  goto $4;
$4:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  v5 := BV32_ADD($i.0, BV32_MUL(group_id_x, 32));
  v6 := BV32_ADD($j.0, BV32_MUL(group_id_y, 4));
  v7 := BV32_SGE(v5, 0);
  goto $truebb1, $falsebb1;
$5:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  v8 := BV32_SLT(v5, $NX);
  goto $truebb2, $falsebb2;
$6:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  v9 := BV32_SGE(v6, 0);
  goto $truebb3, $falsebb3;
$7:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  $0 := (if BV32_SLT(v6, $NY) then 1 else 0);
  goto $8;
$8:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  $indg_h.0, $ind_h.0, $halo.0 := BV32_ADD(v5, BV32_MUL(v6, $pitch)), BV32_ADD(BV32_ADD(BV32_ADD($i.0, 1), BV32_MUL(BV32_ADD($j.0, 1), 34)), 204), BV1_ZEXT32($0);
  goto $9;
$9:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  v10 := BV32_ADD(BV32_ADD(local_id_x, 1), BV32_MUL(BV32_ADD(local_id_y, 1), 34));
  v11 := BV32_ADD(v10, 204);
  v12 := BV32_ADD(local_id_x, BV32_MUL(group_id_x, 32));
  v13 := BV32_ADD(local_id_y, BV32_MUL(group_id_y, 4));
  v14 := BV32_ADD(v12, BV32_MUL(v13, $pitch));
  v15 := BV32_SLT(v12, $NX);
  goto $truebb4, $falsebb4;
$10:
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  $1 := (if BV32_SLT(v13, $NY) then 1 else 0);
  goto $11;
$11:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  v16 := BV1_ZEXT32($1);
  v17 := v16 != 0;
  goto $truebb5, $falsebb5;
$12:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  assert {:sourceloc} {:sourceloc_num 17} true;
  v18 := $$d_u1[v14];
  assert {:sourceloc} {:sourceloc_num 18} true;
  $$_ZZ13GPU_laplace3diiiiPfS_E2u1[BV32_ADD(v10, 408)] := v18;
  goto $13;
$13:
  assert {:block_sourceloc} {:sourceloc_num 19} true;
  v19 := $halo.0 != 0;
  goto $truebb6, $falsebb6;
$14:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  assert {:sourceloc} {:sourceloc_num 21} true;
  v20 := $$d_u1[$indg_h.0];
  assert {:sourceloc} {:sourceloc_num 22} true;
  $$_ZZ13GPU_laplace3diiiiPfS_E2u1[BV32_ADD($ind_h.0, 204)] := v20;
  goto $15;
$15:
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  havoc v21;
  $indg.0, $indg_h.1, $indg0.0, $k.0 := v14, $indg_h.0, v21, 0;
  goto $16;
$16:
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  assert {:originated_from_invariant} {:sourceloc_num 25} (if (v16 != 0 ==> $indg.0 == BV32_ADD(BV32_ADD(v12, BV32_MUL(v13, $pitch)), BV32_MUL(BV32_MUL($k.0, $NY), $pitch))) then 1 else 0) != 0;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 26} (if (_WRITE_HAS_OCCURRED_$$d_u2 ==> BV32_UREM(BV32_SUB(BV32_UDIV(BV32_MUL(4, _WATCHED_OFFSET), 4), BV32_ADD(v12, BV32_MUL(v13, $pitch))), BV32_MUL($NY, $pitch)) == 0) then 1 else 0) != 0;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 27} (if (_WRITE_HAS_OCCURRED_$$d_u2 ==> BV32_ULT(BV32_UDIV(BV32_SUB(BV32_UDIV(BV32_MUL(4, _WATCHED_OFFSET), 4), BV32_ADD(v12, BV32_MUL(v13, $pitch))), BV32_MUL($NY, $pitch)), $NZ)) then 1 else 0) != 0;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 28} (if (_WRITE_HAS_OCCURRED_$$_ZZ13GPU_laplace3diiiiPfS_E2u1 ==> BV32_AND(BV32_AND(BV1_ZEXT32((if (BV32_AND(v16, BV1_ZEXT32(BV1_XOR((if $halo.0 != 0 then 1 else 0), -1))) != 0 ==> BV32_UDIV(BV32_MUL(4, _WATCHED_OFFSET), 4) == BV32_ADD(v10, 408)) then 1 else 0)), BV1_ZEXT32((if (BV32_AND(BV1_ZEXT32(BV1_XOR((if v16 != 0 then 1 else 0), -1)), $halo.0) != 0 ==> BV32_UDIV(BV32_MUL(4, _WATCHED_OFFSET), 4) == BV32_ADD($ind_h.0, 204)) then 1 else 0))), BV1_ZEXT32((if (BV32_AND(v16, $halo.0) != 0 ==> BV32_OR(BV1_ZEXT32((if BV32_UDIV(BV32_MUL(4, _WATCHED_OFFSET), 4) == BV32_ADD(v10, 408) then 1 else 0)), BV1_ZEXT32((if BV32_UDIV(BV32_MUL(4, _WATCHED_OFFSET), 4) == BV32_ADD($ind_h.0, 204) then 1 else 0))) != 0) then 1 else 0))) != 0) then 1 else 0) != 0;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 29} (if (BV32_AND(BV1_ZEXT32(BV1_XOR((if v16 != 0 then 1 else 0), -1)), BV1_ZEXT32(BV1_XOR((if $halo.0 != 0 then 1 else 0), -1))) != 0 ==> BV1_XOR((if _WRITE_HAS_OCCURRED_$$_ZZ13GPU_laplace3diiiiPfS_E2u1 then 1 else 0), -1) == 1) then 1 else 0) != 0;
  v22 := BV32_SLT($k.0, $NZ);
  goto $truebb7, $falsebb7;
$17:
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  v23 := v16 != 0;
  goto $truebb8, $falsebb8;
$18:
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  v24 := BV32_ADD($indg.0, BV32_MUL($NY, $pitch));
  assert {:sourceloc} {:sourceloc_num 32} true;
  v25 := $$_ZZ13GPU_laplace3diiiiPfS_E2u1[v11];
  assert {:sourceloc} {:sourceloc_num 33} true;
  $$_ZZ13GPU_laplace3diiiiPfS_E2u1[BV32_SUB(v11, 204)] := v25;
  assert {:sourceloc} {:sourceloc_num 34} true;
  v26 := $$_ZZ13GPU_laplace3diiiiPfS_E2u1[BV32_ADD(v10, 408)];
  assert {:sourceloc} {:sourceloc_num 35} true;
  $$_ZZ13GPU_laplace3diiiiPfS_E2u1[v11] := v26;
  v27 := BV32_SLT($k.0, v0);
  goto $truebb9, $falsebb9;
$19:
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  assert {:sourceloc} {:sourceloc_num 37} true;
  v28 := $$d_u1[v24];
  assert {:sourceloc} {:sourceloc_num 38} true;
  $$_ZZ13GPU_laplace3diiiiPfS_E2u1[BV32_ADD(v10, 408)] := v28;
  goto $20;
$20:
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  $indg.1, $indg0.1 := v24, $indg.0;
  goto $21;
$21:
  assert {:block_sourceloc} {:sourceloc_num 40} true;
  v29 := $halo.0 != 0;
  goto $truebb10, $falsebb10;
$22:
  assert {:block_sourceloc} {:sourceloc_num 41} true;
  v30 := BV32_ADD($indg_h.1, BV32_MUL($NY, $pitch));
  assert {:sourceloc} {:sourceloc_num 42} true;
  v31 := $$_ZZ13GPU_laplace3diiiiPfS_E2u1[$ind_h.0];
  assert {:sourceloc} {:sourceloc_num 43} true;
  $$_ZZ13GPU_laplace3diiiiPfS_E2u1[BV32_SUB($ind_h.0, 204)] := v31;
  assert {:sourceloc} {:sourceloc_num 44} true;
  v32 := $$_ZZ13GPU_laplace3diiiiPfS_E2u1[BV32_ADD($ind_h.0, 204)];
  assert {:sourceloc} {:sourceloc_num 45} true;
  $$_ZZ13GPU_laplace3diiiiPfS_E2u1[$ind_h.0] := v32;
  v33 := BV32_SLT($k.0, v0);
  goto $truebb11, $falsebb11;
$23:
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  assert {:sourceloc} {:sourceloc_num 47} true;
  v34 := $$d_u1[v30];
  assert {:sourceloc} {:sourceloc_num 48} true;
  $$_ZZ13GPU_laplace3diiiiPfS_E2u1[BV32_ADD($ind_h.0, 204)] := v34;
  goto $24;
$24:
  assert {:block_sourceloc} {:sourceloc_num 49} true;
  $indg_h.2 := v30;
  goto $25;
$25:
  assert {:block_sourceloc} {:sourceloc_num 50} true;
  call {:sourceloc_num 51} $bugle_barrier(-1, -1);
  v35 := v16 != 0;
  goto $truebb12, $falsebb12;
$26:
  assert {:block_sourceloc} {:sourceloc_num 52} true;
  v36 := v12 == 0;
  goto $truebb13, $falsebb13;
$27:
  assert {:block_sourceloc} {:sourceloc_num 53} true;
  v37 := v12 == BV32_SUB($NX, 1);
  goto $truebb14, $falsebb14;
$28:
  assert {:block_sourceloc} {:sourceloc_num 54} true;
  v38 := v13 == 0;
  goto $truebb15, $falsebb15;
$29:
  assert {:block_sourceloc} {:sourceloc_num 55} true;
  v39 := v13 == BV32_SUB($NY, 1);
  goto $truebb16, $falsebb16;
$30:
  assert {:block_sourceloc} {:sourceloc_num 56} true;
  v40 := $k.0 == 0;
  goto $truebb17, $falsebb17;
$31:
  assert {:block_sourceloc} {:sourceloc_num 57} true;
  v41 := $k.0 == v0;
  goto $truebb18, $falsebb18;
$32:
  assert {:block_sourceloc} {:sourceloc_num 58} true;
  assert {:sourceloc} {:sourceloc_num 59} true;
  v42 := $$_ZZ13GPU_laplace3diiiiPfS_E2u1[v11];
  $u2.0 := v42;
  goto $34;
$33:
  assert {:block_sourceloc} {:sourceloc_num 60} true;
  assert {:sourceloc} {:sourceloc_num 61} true;
  v43 := $$_ZZ13GPU_laplace3diiiiPfS_E2u1[BV32_SUB(v11, 1)];
  assert {:sourceloc} {:sourceloc_num 62} true;
  v44 := $$_ZZ13GPU_laplace3diiiiPfS_E2u1[BV32_ADD(v10, 205)];
  assert {:sourceloc} {:sourceloc_num 63} true;
  v45 := $$_ZZ13GPU_laplace3diiiiPfS_E2u1[BV32_SUB(v11, 34)];
  assert {:sourceloc} {:sourceloc_num 64} true;
  v46 := $$_ZZ13GPU_laplace3diiiiPfS_E2u1[BV32_ADD(v10, 238)];
  assert {:sourceloc} {:sourceloc_num 65} true;
  v47 := $$_ZZ13GPU_laplace3diiiiPfS_E2u1[BV32_SUB(v11, 204)];
  assert {:sourceloc} {:sourceloc_num 66} true;
  v48 := $$_ZZ13GPU_laplace3diiiiPfS_E2u1[BV32_ADD(v10, 408)];
  $u2.0 := FMUL32(FADD32(FADD32(FADD32(FADD32(FADD32(v43, v44), v45), v46), v47), v48), 1042983595);
  goto $34;
$34:
  assert {:block_sourceloc} {:sourceloc_num 67} true;
  assert {:sourceloc} {:sourceloc_num 68} true;
  $$d_u2[$indg0.1] := $u2.0;
  goto $35;
$35:
  assert {:block_sourceloc} {:sourceloc_num 69} true;
  call {:sourceloc_num 70} $bugle_barrier(-1, -1);
  goto $36;
$36:
  assert {:block_sourceloc} {:sourceloc_num 71} true;
  $indg.0, $indg_h.1, $indg0.0, $k.0 := $indg.1, $indg_h.2, $indg0.1, BV32_ADD($k.0, 1);
  goto $16;
$37:
  assert {:block_sourceloc} {:sourceloc_num 72} true;
  return;
$truebb:
  assume {:partition} v3;
  assert {:block_sourceloc} {:sourceloc_num 73} true;
  goto $1;
$falsebb:
  assume {:partition} !v3;
  assert {:block_sourceloc} {:sourceloc_num 74} true;
  havoc v49;
  havoc v50;
  $indg_h.0, $ind_h.0, $halo.0 := v49, v50, v2;
  goto $9;
$truebb0:
  assume {:partition} v4;
  assert {:block_sourceloc} {:sourceloc_num 75} true;
  goto $2;
$falsebb0:
  assume {:partition} !v4;
  assert {:block_sourceloc} {:sourceloc_num 76} true;
  goto $3;
$truebb1:
  assume {:partition} v7;
  assert {:block_sourceloc} {:sourceloc_num 77} true;
  goto $5;
$falsebb1:
  assume {:partition} !v7;
  assert {:block_sourceloc} {:sourceloc_num 78} true;
  $0 := 0;
  goto $8;
$truebb2:
  assume {:partition} v8;
  assert {:block_sourceloc} {:sourceloc_num 79} true;
  goto $6;
$falsebb2:
  assume {:partition} !v8;
  assert {:block_sourceloc} {:sourceloc_num 80} true;
  $0 := 0;
  goto $8;
$truebb3:
  assume {:partition} v9;
  assert {:block_sourceloc} {:sourceloc_num 81} true;
  goto $7;
$falsebb3:
  assume {:partition} !v9;
  assert {:block_sourceloc} {:sourceloc_num 82} true;
  $0 := 0;
  goto $8;
$truebb4:
  assume {:partition} v15;
  assert {:block_sourceloc} {:sourceloc_num 83} true;
  goto $10;
$falsebb4:
  assume {:partition} !v15;
  assert {:block_sourceloc} {:sourceloc_num 84} true;
  $1 := 0;
  goto $11;
$truebb5:
  assume {:partition} v17;
  assert {:block_sourceloc} {:sourceloc_num 85} true;
  goto $12;
$falsebb5:
  assume {:partition} !v17;
  assert {:block_sourceloc} {:sourceloc_num 86} true;
  goto $13;
$truebb6:
  assume {:partition} v19;
  assert {:block_sourceloc} {:sourceloc_num 87} true;
  goto $14;
$falsebb6:
  assume {:partition} !v19;
  assert {:block_sourceloc} {:sourceloc_num 88} true;
  goto $15;
$truebb7:
  assume {:partition} v22;
  assert {:block_sourceloc} {:sourceloc_num 89} true;
  goto $17;
$falsebb7:
  assume {:partition} !v22;
  assert {:block_sourceloc} {:sourceloc_num 90} true;
  goto $37;
$truebb8:
  assume {:partition} v23;
  assert {:block_sourceloc} {:sourceloc_num 91} true;
  goto $18;
$falsebb8:
  assume {:partition} !v23;
  assert {:block_sourceloc} {:sourceloc_num 92} true;
  $indg.1, $indg0.1 := $indg.0, $indg0.0;
  goto $21;
$truebb9:
  assume {:partition} v27;
  assert {:block_sourceloc} {:sourceloc_num 93} true;
  goto $19;
$falsebb9:
  assume {:partition} !v27;
  assert {:block_sourceloc} {:sourceloc_num 94} true;
  goto $20;
$truebb10:
  assume {:partition} v29;
  assert {:block_sourceloc} {:sourceloc_num 95} true;
  goto $22;
$falsebb10:
  assume {:partition} !v29;
  assert {:block_sourceloc} {:sourceloc_num 96} true;
  $indg_h.2 := $indg_h.1;
  goto $25;
$truebb11:
  assume {:partition} v33;
  assert {:block_sourceloc} {:sourceloc_num 97} true;
  goto $23;
$falsebb11:
  assume {:partition} !v33;
  assert {:block_sourceloc} {:sourceloc_num 98} true;
  goto $24;
$truebb12:
  assume {:partition} v35;
  assert {:block_sourceloc} {:sourceloc_num 99} true;
  goto $26;
$falsebb12:
  assume {:partition} !v35;
  assert {:block_sourceloc} {:sourceloc_num 100} true;
  goto $35;
$truebb13:
  assume {:partition} v36;
  assert {:block_sourceloc} {:sourceloc_num 101} true;
  goto $32;
$falsebb13:
  assume {:partition} !v36;
  assert {:block_sourceloc} {:sourceloc_num 102} true;
  goto $27;
$truebb14:
  assume {:partition} v37;
  assert {:block_sourceloc} {:sourceloc_num 103} true;
  goto $32;
$falsebb14:
  assume {:partition} !v37;
  assert {:block_sourceloc} {:sourceloc_num 104} true;
  goto $28;
$truebb15:
  assume {:partition} v38;
  assert {:block_sourceloc} {:sourceloc_num 105} true;
  goto $32;
$falsebb15:
  assume {:partition} !v38;
  assert {:block_sourceloc} {:sourceloc_num 106} true;
  goto $29;
$truebb16:
  assume {:partition} v39;
  assert {:block_sourceloc} {:sourceloc_num 107} true;
  goto $32;
$falsebb16:
  assume {:partition} !v39;
  assert {:block_sourceloc} {:sourceloc_num 108} true;
  goto $30;
$truebb17:
  assume {:partition} v40;
  assert {:block_sourceloc} {:sourceloc_num 109} true;
  goto $32;
$falsebb17:
  assume {:partition} !v40;
  assert {:block_sourceloc} {:sourceloc_num 110} true;
  goto $31;
$truebb18:
  assume {:partition} v41;
  assert {:block_sourceloc} {:sourceloc_num 111} true;
  goto $32;
$falsebb18:
  assume {:partition} !v41;
  assert {:block_sourceloc} {:sourceloc_num 112} true;
  goto $33;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:int, $1:int);
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 32 then 1 else 0) != 0;
axiom (if group_size_y == 4 then 1 else 0) != 0;
axiom (if num_groups_x == 4 then 1 else 0) != 0;
axiom (if num_groups_y == 25 then 1 else 0) != 0;
