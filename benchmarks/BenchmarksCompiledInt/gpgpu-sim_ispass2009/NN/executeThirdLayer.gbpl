type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "Layer3_Neurons_GPU"} {:global} $$Layer3_Neurons_GPU : [int]int;
axiom {:array_info "$$Layer3_Neurons_GPU"} {:global} {:elem_width 32} {:source_name "Layer3_Neurons_GPU"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$Layer3_Neurons_GPU : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$Layer3_Neurons_GPU : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$Layer3_Neurons_GPU : bool;

var {:source_name "Layer3_Weights_GPU"} {:global} $$Layer3_Weights_GPU : [int]int;
axiom {:array_info "$$Layer3_Weights_GPU"} {:global} {:elem_width 32} {:source_name "Layer3_Weights_GPU"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$Layer3_Weights_GPU : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$Layer3_Weights_GPU : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$Layer3_Weights_GPU : bool;

var {:source_name "Layer4_Neurons_GPU"} {:global} $$Layer4_Neurons_GPU : [int]int;
axiom {:array_info "$$Layer4_Neurons_GPU"} {:global} {:elem_width 32} {:source_name "Layer4_Neurons_GPU"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$Layer4_Neurons_GPU : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$Layer4_Neurons_GPU : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$Layer4_Neurons_GPU : bool;

const _WATCHED_OFFSET : int;
const {:group_id_x} group_id_x : int;
const {:group_id_y} group_id_y : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function FADD32(int, int) : int;
function FMUL32(int, int) : int;
function FMUL64(int, int) : int;
function FP32_CONV64(int) : int;
function FP64_CONV32(int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SLT(x : int, y : int) : bool {
  x < y
}
procedure {:source_name "executeThirdLayer"} {:kernel} $_Z17executeThirdLayerPfS_S_()
{
  var $result.0:int;
  var $i.0:int;
  var v0:int;
  var v1:int;
  var v2:bool;
  var v3:int;
  var v4:int;
  var v5:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  v0 := BV32_MUL(group_id_x, 1251);
  assert {:sourceloc} {:sourceloc_num 1} true;
  v1 := $$Layer3_Weights_GPU[v0];
  $result.0, $i.0 := FADD32(0, v1), 0;
  goto $1;
$1:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v2 := BV32_SLT($i.0, 1250);
  goto $truebb, $falsebb;
$2:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  assert {:sourceloc} {:sourceloc_num 4} true;
  v3 := $$Layer3_Neurons_GPU[BV32_ADD($i.0, BV32_MUL(1250, group_id_y))];
  assert {:sourceloc} {:sourceloc_num 5} true;
  v4 := $$Layer3_Weights_GPU[BV32_ADD(BV32_ADD(v0, 1), $i.0)];
  goto $3;
$3:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  $result.0, $i.0 := FADD32($result.0, FMUL32(v3, v4)), BV32_ADD($i.0, 1);
  goto $1;
$4:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  call {:sourceloc_num 8}   v5 := $tanhf(FP64_CONV32(FMUL64(4604180019078461075, FP32_CONV64($result.0))));
  assert {:sourceloc} {:sourceloc_num 9} true;
  $$Layer4_Neurons_GPU[BV32_ADD(group_id_x, BV32_MUL(100, group_id_y))] := FP64_CONV32(FMUL64(4610406545773251946, FP32_CONV64(v5)));
  return;
$truebb:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  goto $2;
$falsebb:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  goto $4;
}
procedure {:source_name "tanhf"} $tanhf($0:int) returns ($ret:int);
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 1 then 1 else 0) != 0;
axiom (if num_groups_x == 100 then 1 else 0) != 0;
axiom (if num_groups_y == 10 then 1 else 0) != 0;
