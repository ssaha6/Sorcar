type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
procedure _ATOMIC_OP8(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "d_Result"} {:global} $$d_Result : [int]int;
axiom {:array_info "$$d_Result"} {:global} {:elem_width 32} {:source_name "d_Result"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_Result : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_Result : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_Result : bool;

var {:source_name "d_Data"} {:global} $$d_Data : [int]int;
axiom {:array_info "$$d_Data"} {:global} {:elem_width 32} {:source_name "d_Data"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_Data : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_Data : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_Data : bool;

var {:source_name "s_Hist"} {:group_shared} $$_ZZ17histogram64KernelPjS_iE6s_Hist : [int]int;
axiom {:array_info "$$_ZZ17histogram64KernelPjS_iE6s_Hist"} {:group_shared} {:elem_width 8} {:source_name "s_Hist"} {:source_elem_width 8} {:source_dimensions "8192"} true;
var {:race_checking} {:group_shared} {:elem_width 8} {:source_elem_width 8} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ17histogram64KernelPjS_iE6s_Hist : bool;
var {:race_checking} {:group_shared} {:elem_width 8} {:source_elem_width 8} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ17histogram64KernelPjS_iE6s_Hist : bool;
var {:race_checking} {:group_shared} {:elem_width 8} {:source_elem_width 8} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ17histogram64KernelPjS_iE6s_Hist : bool;

const _WATCHED_OFFSET : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function  BV32_LSHR(int, int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_AND(x : int, y : int) : int {
  if x == y then x else (if x == 0 || y == 0 then 0 else BV32_AND_UF(x, y))
}
function BV32_AND_UF(int, int) : int;
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_OR(x : int, y : int) : int {
  if x == y then x else (if x == 0 then y else (if y == 0 then x else BV32_OR_UF(x, y)))
}
function BV32_OR_UF(int, int) : int;
function {:inline true} BV32_SHL(x : int, y : int) : int {
  if x >= 0 && y == 1 then x*2 else BV32_SHL_UF(x,y)
}
function BV32_SHL_UF(int, int) : int;
function {:inline true} BV32_SLT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV32_SUB(x : int, y : int) : int {
  x - y
}
function {:inline true} BV32_ULT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV8_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV8_ZEXT32(x : int) : int {
  x
}
procedure {:source_name "histogram64Kernel"} {:kernel} $_Z17histogram64KernelPjS_i($dataN:int)
{
  var $i.0:int;
  var $data4.0:int;
  var $pos.0:int;
  var $sum.0:int;
  var $j.0:int;
  var $accumPos.0:int;
  var $accumPos.1:int;
  var v0:int;
  var v15:int;
  var v1:bool;
  var v2:int;
  var v3:bool;
  var v4:int;
  var v5:int;
  var v6:int;
  var v7:int;
  var v8:int;
  var v9:int;
  var v10:int;
  var v11:int;
  var v12:int;
  var v13:bool;
  var v14:bool;
  var v16:int;
  var v17:bool;
$0:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  v0 := BV32_OR(BV32_OR(BV32_LSHR(BV32_AND(local_id_x, -64), 0), BV32_SHL(BV32_AND(local_id_x, 15), 2)), BV32_LSHR(BV32_AND(local_id_x, 48), 4));
  $i.0 := 0;
  goto $1;
$1:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  v1 := BV32_SLT($i.0, 16);
  goto $truebb, $falsebb;
$2:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  assert {:sourceloc} {:sourceloc_num 3} true;
  $$_ZZ17histogram64KernelPjS_iE6s_Hist[BV32_ADD(local_id_x, BV32_MUL($i.0, 128))] := 0;
  goto $3;
$3:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  $i.0 := BV32_ADD($i.0, 1);
  goto $1;
$4:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  call {:sourceloc_num 6} $bugle_barrier(-1, -1);
  havoc v2;
  $data4.0, $pos.0 := v2, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  goto $5;
$5:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 8} (if (-1 == 1 ==> (_READ_HAS_OCCURRED_$$_ZZ17histogram64KernelPjS_iE6s_Hist ==> BV32_AND(127, BV32_SUB(_WATCHED_OFFSET, BV32_MUL(BV32_AND(BV32_LSHR($data4.0, 26), 63), 128))) == v0)) then 1 else 0) != 0;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 9} (if (-1 == 1 ==> (_WRITE_HAS_OCCURRED_$$_ZZ17histogram64KernelPjS_iE6s_Hist ==> BV32_AND(127, BV32_SUB(_WATCHED_OFFSET, BV32_MUL(BV32_AND(BV32_LSHR($data4.0, 26), 63), 128))) == v0)) then 1 else 0) != 0;
  v3 := BV32_SLT($pos.0, $dataN);
  goto $truebb0, $falsebb0;
$6:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  assert {:sourceloc} {:sourceloc_num 11} true;
  v4 := $$d_Data[$pos.0];
  v5 := BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v4, 2), 63), 128));
  assert {:sourceloc} {:sourceloc_num 12} true;
  v6 := $$_ZZ17histogram64KernelPjS_iE6s_Hist[v5];
  assert {:sourceloc} {:sourceloc_num 13} true;
  $$_ZZ17histogram64KernelPjS_iE6s_Hist[v5] := BV8_ADD(v6, 1);
  v7 := BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v4, 10), 63), 128));
  assert {:sourceloc} {:sourceloc_num 14} true;
  v8 := $$_ZZ17histogram64KernelPjS_iE6s_Hist[v7];
  assert {:sourceloc} {:sourceloc_num 15} true;
  $$_ZZ17histogram64KernelPjS_iE6s_Hist[v7] := BV8_ADD(v8, 1);
  v9 := BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v4, 18), 63), 128));
  assert {:sourceloc} {:sourceloc_num 16} true;
  v10 := $$_ZZ17histogram64KernelPjS_iE6s_Hist[v9];
  assert {:sourceloc} {:sourceloc_num 17} true;
  $$_ZZ17histogram64KernelPjS_iE6s_Hist[v9] := BV8_ADD(v10, 1);
  v11 := BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v4, 26), 63), 128));
  assert {:sourceloc} {:sourceloc_num 18} true;
  v12 := $$_ZZ17histogram64KernelPjS_iE6s_Hist[v11];
  assert {:sourceloc} {:sourceloc_num 19} true;
  $$_ZZ17histogram64KernelPjS_iE6s_Hist[v11] := BV8_ADD(v12, 1);
  goto $7;
$7:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  $data4.0, $pos.0 := v4, BV32_ADD($pos.0, BV32_MUL(group_size_x, num_groups_x));
  goto $5;
$8:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  call {:sourceloc_num 22} $bugle_barrier(-1, -1);
  v13 := BV32_ULT(local_id_x, 64);
  goto $truebb1, $falsebb1;
$9:
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  $sum.0, $j.0, $accumPos.0 := 0, 0, BV32_MUL(BV32_AND(local_id_x, 15), 4);
  goto $10;
$10:
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  v14 := BV32_SLT($j.0, 128);
  goto $truebb2, $falsebb2;
$11:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  assert {:sourceloc} {:sourceloc_num 26} true;
  v15 := $$_ZZ17histogram64KernelPjS_iE6s_Hist[BV32_ADD(BV32_MUL(local_id_x, 128), $accumPos.0)];
  v16 := BV32_ADD($accumPos.0, 1);
  v17 := v16 == 128;
  goto $truebb3, $falsebb3;
$12:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  $accumPos.1 := 0;
  goto $13;
$13:
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  goto $14;
$14:
  assert {:block_sourceloc} {:sourceloc_num 29} true;
  $sum.0, $j.0, $accumPos.0 := BV32_ADD($sum.0, BV8_ZEXT32(v15)), BV32_ADD($j.0, 1), $accumPos.1;
  goto $10;
$15:
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  assert {:sourceloc} {:sourceloc_num 31} true;
  $$d_Result[BV32_ADD(BV32_MUL(group_id_x, 64), local_id_x)] := $sum.0;
  goto $16;
$16:
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  return;
$truebb:
  assume {:partition} v1;
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  goto $2;
$falsebb:
  assume {:partition} !v1;
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  goto $4;
$truebb0:
  assume {:partition} v3;
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  goto $6;
$falsebb0:
  assume {:partition} !v3;
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  goto $8;
$truebb1:
  assume {:partition} v13;
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  goto $9;
$falsebb1:
  assume {:partition} !v13;
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  goto $16;
$truebb2:
  assume {:partition} v14;
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  goto $11;
$falsebb2:
  assume {:partition} !v14;
  assert {:block_sourceloc} {:sourceloc_num 40} true;
  goto $15;
$truebb3:
  assume {:partition} v17;
  assert {:block_sourceloc} {:sourceloc_num 41} true;
  goto $12;
$falsebb3:
  assume {:partition} !v17;
  assert {:block_sourceloc} {:sourceloc_num 42} true;
  $accumPos.1 := v16;
  goto $13;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:int, $1:int);
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 128 then 1 else 0) != 0;
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if num_groups_x == 64 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
