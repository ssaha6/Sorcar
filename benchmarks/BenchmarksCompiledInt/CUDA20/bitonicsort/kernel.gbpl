type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "values"} {:global} $$values : [int]int;
axiom {:array_info "$$values"} {:global} {:elem_width 32} {:source_name "values"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$values : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$values : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$values : bool;

var {:source_name "shared"} {:group_shared} $$shared : [int]int;
axiom {:array_info "$$shared"} {:group_shared} {:elem_width 32} {:source_name "shared"} {:source_elem_width 32} {:source_dimensions "32"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$shared : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$shared : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$shared : bool;

const _WATCHED_OFFSET : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function {:inline true} BV32_AND(x : int, y : int) : int {
  if x == y then x else (if x == 0 || y == 0 then 0 else BV32_AND_UF(x, y))
}
function BV32_AND_UF(int, int) : int;
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SGT(x : int, y : int) : bool {
  x > y
}
function {:inline true} BV32_SLT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV32_UDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_UGT(x : int, y : int) : bool {
  x > y
}
function {:inline true} BV32_ULE(x : int, y : int) : bool {
  x <= y
}
function {:inline true} BV32_XOR(x : int, y : int) : int {
  if x == y then 0 else (if x == 0 then y else (if y == 0 then x else BV32_XOR_UF(x, y)))
}
function BV32_XOR_UF(int, int) : int;
procedure {:source_name "BitonicKernel"} {:kernel} $_Z13BitonicKernelPi()
{
  var $k.0:int;
  var $j.0:int;
  var v1:bool;
  var v2:bool;
  var v0:int;
  var v3:int;
  var v4:bool;
  var v5:bool;
  var v6:int;
  var v8:bool;
  var v7:int;
  var v9:int;
  var v10:int;
  var v11:int;
  var v12:int;
  var v14:bool;
  var v13:int;
  var v15:int;
  var v16:int;
  var v17:int;
  var v18:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  assert {:sourceloc} {:sourceloc_num 1} true;
  v0 := $$values[local_id_x];
  assert {:sourceloc} {:sourceloc_num 2} true;
  $$shared[local_id_x] := v0;
  call {:sourceloc_num 3} $bugle_barrier(-1, -1);
  $k.0 := 2;
  goto $1;
$1:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  v1 := BV32_ULE($k.0, 32);
  goto $truebb, $falsebb;
$2:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  $j.0 := BV32_UDIV($k.0, 2);
  goto $3;
$3:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  v2 := BV32_UGT($j.0, 0);
  goto $truebb0, $falsebb0;
$4:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  v3 := BV32_XOR(local_id_x, $j.0);
  v4 := BV32_UGT(v3, local_id_x);
  goto $truebb1, $falsebb1;
$5:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  v5 := BV32_AND(local_id_x, $k.0) == 0;
  goto $truebb2, $falsebb2;
$6:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  assert {:sourceloc} {:sourceloc_num 10} true;
  v6 := $$shared[local_id_x];
  assert {:sourceloc} {:sourceloc_num 11} true;
  v7 := $$shared[v3];
  v8 := BV32_SGT(v6, v7);
  goto $truebb3, $falsebb3;
$7:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  assert {:sourceloc} {:sourceloc_num 13} true;
  v9 := $$shared[local_id_x];
  assert {:sourceloc} {:sourceloc_num 14} true;
  v10 := $$shared[v3];
  assert {:sourceloc} {:sourceloc_num 15} true;
  $$shared[local_id_x] := v10;
  assert {:sourceloc} {:sourceloc_num 16} true;
  v11 := $$shared[local_id_x];
  assert {:sourceloc} {:sourceloc_num 17} true;
  $$shared[v3] := v11;
  goto $8;
$8:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  goto $12;
$9:
  assert {:block_sourceloc} {:sourceloc_num 19} true;
  assert {:sourceloc} {:sourceloc_num 20} true;
  v12 := $$shared[local_id_x];
  assert {:sourceloc} {:sourceloc_num 21} true;
  v13 := $$shared[v3];
  v14 := BV32_SLT(v12, v13);
  goto $truebb4, $falsebb4;
$10:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  assert {:sourceloc} {:sourceloc_num 23} true;
  v15 := $$shared[local_id_x];
  assert {:sourceloc} {:sourceloc_num 24} true;
  v16 := $$shared[v3];
  assert {:sourceloc} {:sourceloc_num 25} true;
  $$shared[local_id_x] := v16;
  assert {:sourceloc} {:sourceloc_num 26} true;
  v17 := $$shared[local_id_x];
  assert {:sourceloc} {:sourceloc_num 27} true;
  $$shared[v3] := v17;
  goto $11;
$11:
  assert {:block_sourceloc} true;
  goto $12;
$12:
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  goto $13;
$13:
  assert {:block_sourceloc} {:sourceloc_num 29} true;
  call {:sourceloc_num 30} $bugle_barrier(-1, -1);
  goto $14;
$14:
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  $j.0 := BV32_UDIV($j.0, 2);
  goto $3;
$15:
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  goto $16;
$16:
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  $k.0 := BV32_MUL($k.0, 2);
  goto $1;
$17:
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  assert {:sourceloc} {:sourceloc_num 35} true;
  v18 := $$shared[local_id_x];
  assert {:sourceloc} {:sourceloc_num 36} true;
  $$values[local_id_x] := v18;
  return;
$truebb:
  assume {:partition} v1;
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  goto $2;
$falsebb:
  assume {:partition} !v1;
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  goto $17;
$truebb0:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  goto $4;
$falsebb0:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 40} true;
  goto $15;
$truebb1:
  assume {:partition} v4;
  assert {:block_sourceloc} {:sourceloc_num 41} true;
  goto $5;
$falsebb1:
  assume {:partition} !v4;
  assert {:block_sourceloc} {:sourceloc_num 42} true;
  goto $13;
$truebb2:
  assume {:partition} v5;
  assert {:block_sourceloc} {:sourceloc_num 43} true;
  goto $6;
$falsebb2:
  assume {:partition} !v5;
  assert {:block_sourceloc} {:sourceloc_num 44} true;
  goto $9;
$truebb3:
  assume {:partition} v8;
  assert {:block_sourceloc} {:sourceloc_num 45} true;
  goto $7;
$falsebb3:
  assume {:partition} !v8;
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  goto $8;
$truebb4:
  assume {:partition} v14;
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  goto $10;
$falsebb4:
  assume {:partition} !v14;
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  goto $11;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:int, $1:int);
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 32 then 1 else 0) != 0;
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if num_groups_x == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
