type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "g_odata"} {:global} $$g_odata : [int]int;
axiom {:array_info "$$g_odata"} {:global} {:elem_width 32} {:source_name "g_odata"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$g_odata : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$g_odata : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$g_odata : bool;

var {:source_name "g_idata"} {:global} $$g_idata : [int]int;
axiom {:array_info "$$g_idata"} {:global} {:elem_width 32} {:source_name "g_idata"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$g_idata : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$g_idata : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$g_idata : bool;

var {:source_name "temp"} {:group_shared} $$_ZZ14scanBestKernelPfS_iE4temp : [int]int;
axiom {:array_info "$$_ZZ14scanBestKernelPfS_iE4temp"} {:group_shared} {:elem_width 32} {:source_name "temp"} {:source_elem_width 32} {:source_dimensions "64"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ14scanBestKernelPfS_iE4temp : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ14scanBestKernelPfS_iE4temp : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ14scanBestKernelPfS_iE4temp : bool;

const _WATCHED_OFFSET : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function  BV32_ASHR(int, int) : int;
function FADD32(int, int) : int;
function {:inline true} BV1_ZEXT32(x : int) : int {
  x
}
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_AND(x : int, y : int) : int {
  if x == y then x else (if x == 0 || y == 0 then 0 else BV32_AND_UF(x, y))
}
function BV32_AND_UF(int, int) : int;
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_SGT(x : int, y : int) : bool {
  x > y
}
function {:inline true} BV32_SLT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV32_SUB(x : int, y : int) : int {
  x - y
}
procedure {:source_name "scanBestKernel"} {:kernel} $_Z14scanBestKernelPfS_i($n:int)
requires {:sourceloc_num 0} (if $n == BV32_MUL(group_size_x, 2) then 1 else 0) != 0;
requires {:sourceloc_num 1} (if BV32_AND($n, BV32_SUB($n, 1)) == 0 then 1 else 0) != 0;
{
  var $offset.0:int;
  var $d.0:int;
  var $offset.1:int;
  var $d1.0:int;
  var v0:int;
  var v1:int;
  var v2:int;
  var v23:int;
  var v24:int;
  var v3:int;
  var v4:int;
  var v5:bool;
  var v6:int;
  var v7:bool;
  var v8:int;
  var v9:int;
  var v10:int;
  var v11:int;
  var v12:int;
  var v13:bool;
  var v14:int;
  var v15:bool;
  var v16:int;
  var v17:bool;
  var v18:int;
  var v19:int;
  var v20:int;
  var v21:int;
  var v22:int;
  var v25:int;
  var v26:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v0 := BV32_ADD(local_id_x, BV32_ASHR($n, 1));
  v1 := BV32_ASHR(local_id_x, 4);
  v2 := BV32_ASHR(v0, 4);
  assert {:sourceloc} {:sourceloc_num 3} true;
  v3 := $$g_idata[local_id_x];
  assert {:sourceloc} {:sourceloc_num 4} true;
  $$_ZZ14scanBestKernelPfS_iE4temp[BV32_ADD(local_id_x, v1)] := v3;
  assert {:sourceloc} {:sourceloc_num 5} true;
  v4 := $$g_idata[v0];
  assert {:sourceloc} {:sourceloc_num 6} true;
  $$_ZZ14scanBestKernelPfS_iE4temp[BV32_ADD(v0, v2)] := v4;
  call {:sourceloc_num 7} $bugle_barrier(-1, -1);
  $offset.0, $d.0 := 1, BV32_ASHR($n, 1);
  goto $1;
$1:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  assert {:originated_from_invariant} {:sourceloc_num 9} (if (BV32_AND(BV1_ZEXT32((if $d.0 == 0 then 1 else 0)), BV1_ZEXT32((if _WRITE_HAS_OCCURRED_$$_ZZ14scanBestKernelPfS_iE4temp then 1 else 0))) != 0 ==> local_id_x == 0) then 1 else 0) != 0;
  assert {:originated_from_invariant} {:sourceloc_num 10} (if (BV32_AND(BV1_ZEXT32((if $d.0 == 0 then 1 else 0)), BV1_ZEXT32((if _READ_HAS_OCCURRED_$$_ZZ14scanBestKernelPfS_iE4temp then 1 else 0))) != 0 ==> local_id_x == 0) then 1 else 0) != 0;
  v5 := BV32_SGT($d.0, 0);
  goto $truebb, $falsebb;
$2:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  call {:sourceloc_num 12} $bugle_barrier(-1, -1);
  v6 := BV32_MUL($offset.0, 2);
  v7 := BV32_SLT(local_id_x, $d.0);
  goto $truebb0, $falsebb0;
$3:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  v8 := BV32_SUB(BV32_MUL(BV32_SDIV(v6, 2), BV32_ADD(BV32_MUL(2, local_id_x), 1)), 1);
  v9 := BV32_SUB(BV32_MUL(BV32_SDIV(v6, 2), BV32_ADD(BV32_MUL(2, local_id_x), 2)), 1);
  v10 := BV32_ADD(v9, BV32_ASHR(v9, 4));
  assert {:sourceloc} {:sourceloc_num 14} true;
  v11 := $$_ZZ14scanBestKernelPfS_iE4temp[BV32_ADD(v8, BV32_ASHR(v8, 4))];
  assert {:sourceloc} {:sourceloc_num 15} true;
  v12 := $$_ZZ14scanBestKernelPfS_iE4temp[v10];
  assert {:sourceloc} {:sourceloc_num 16} true;
  $$_ZZ14scanBestKernelPfS_iE4temp[v10] := FADD32(v12, v11);
  goto $4;
$4:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  goto $5;
$5:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  $offset.0, $d.0 := v6, BV32_ASHR($d.0, 1);
  goto $1;
$6:
  assert {:block_sourceloc} {:sourceloc_num 19} true;
  v13 := local_id_x == 0;
  goto $truebb1, $falsebb1;
$7:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  v14 := BV32_SUB($n, 1);
  assert {:sourceloc} {:sourceloc_num 21} true;
  $$_ZZ14scanBestKernelPfS_iE4temp[BV32_ADD(v14, BV32_ASHR(v14, 4))] := 0;
  goto $8;
$8:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  $offset.1, $d1.0 := $offset.0, 1;
  goto $9;
$9:
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  v15 := BV32_SLT($d1.0, $n);
  goto $truebb2, $falsebb2;
$10:
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  v16 := BV32_SDIV($offset.1, 2);
  call {:sourceloc_num 25} $bugle_barrier(-1, -1);
  v17 := BV32_SLT(local_id_x, $d1.0);
  goto $truebb3, $falsebb3;
$11:
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  v18 := BV32_SUB(BV32_MUL(v16, BV32_ADD(BV32_MUL(2, local_id_x), 1)), 1);
  v19 := BV32_SUB(BV32_MUL(v16, BV32_ADD(BV32_MUL(2, local_id_x), 2)), 1);
  v20 := BV32_ADD(v18, BV32_ASHR(v18, 4));
  v21 := BV32_ADD(v19, BV32_ASHR(v19, 4));
  assert {:sourceloc} {:sourceloc_num 27} true;
  v22 := $$_ZZ14scanBestKernelPfS_iE4temp[v20];
  assert {:sourceloc} {:sourceloc_num 28} true;
  v23 := $$_ZZ14scanBestKernelPfS_iE4temp[v21];
  assert {:sourceloc} {:sourceloc_num 29} true;
  $$_ZZ14scanBestKernelPfS_iE4temp[v20] := v23;
  assert {:sourceloc} {:sourceloc_num 30} true;
  v24 := $$_ZZ14scanBestKernelPfS_iE4temp[v21];
  assert {:sourceloc} {:sourceloc_num 31} true;
  $$_ZZ14scanBestKernelPfS_iE4temp[v21] := FADD32(v24, v22);
  goto $12;
$12:
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  goto $13;
$13:
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  $offset.1, $d1.0 := v16, BV32_MUL($d1.0, 2);
  goto $9;
$14:
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  call {:sourceloc_num 35} $bugle_barrier(-1, -1);
  assert {:sourceloc} {:sourceloc_num 36} true;
  v25 := $$_ZZ14scanBestKernelPfS_iE4temp[BV32_ADD(local_id_x, v1)];
  assert {:sourceloc} {:sourceloc_num 37} true;
  $$g_odata[local_id_x] := v25;
  assert {:sourceloc} {:sourceloc_num 38} true;
  v26 := $$_ZZ14scanBestKernelPfS_iE4temp[BV32_ADD(v0, v2)];
  assert {:sourceloc} {:sourceloc_num 39} true;
  $$g_odata[v0] := v26;
  return;
$truebb:
  assume {:partition} v5;
  assert {:block_sourceloc} {:sourceloc_num 40} true;
  goto $2;
$falsebb:
  assume {:partition} !v5;
  assert {:block_sourceloc} {:sourceloc_num 41} true;
  goto $6;
$truebb0:
  assume {:partition} v7;
  assert {:block_sourceloc} {:sourceloc_num 42} true;
  goto $3;
$falsebb0:
  assume {:partition} !v7;
  assert {:block_sourceloc} {:sourceloc_num 43} true;
  goto $4;
$truebb1:
  assume {:partition} v13;
  assert {:block_sourceloc} {:sourceloc_num 44} true;
  goto $7;
$falsebb1:
  assume {:partition} !v13;
  assert {:block_sourceloc} {:sourceloc_num 45} true;
  goto $8;
$truebb2:
  assume {:partition} v15;
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  goto $10;
$falsebb2:
  assume {:partition} !v15;
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  goto $14;
$truebb3:
  assume {:partition} v17;
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  goto $11;
$falsebb3:
  assume {:partition} !v17;
  assert {:block_sourceloc} {:sourceloc_num 49} true;
  goto $12;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:int, $1:int);
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 32 then 1 else 0) != 0;
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if num_groups_x == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
