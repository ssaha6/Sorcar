type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP8(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "blk_sad"} {:global} $$blk_sad : [int]int;
axiom {:array_info "$$blk_sad"} {:global} {:elem_width 8} {:source_name "blk_sad"} {:source_elem_width 16} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 16} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$blk_sad : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 16} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$blk_sad : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 16} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$blk_sad : bool;
const $arrayId$$blk_sad : arrayId;
axiom $arrayId$$blk_sad == 1bv2;

type ptr = bv32;
type arrayId = bv2;

function {:inline true} MKPTR(base: arrayId, offset: int) : ptr {
  base ++ offset[30:0]
}

function {:inline true} base#MKPTR(p: ptr) : arrayId {
  p[32:30]
}

function {:inline true} offset#MKPTR(p : ptr) : bv32 {
  0bv2++p[30:0]
}

const $arrayId$$null$ : arrayId;
axiom $arrayId$$null$ == 0bv2;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_id_y} group_id_y : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:local_id_y} local_id_y : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function  BV32_ASHR(int, int) : int;
function  BV32_LSHR(int, int) : int;
function BV_CONCAT(int, int) : int;
function BV_EXTRACT(int, int, int) : int;
function {:inline true} BV16_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV1_ZEXT32(x : int) : int {
  x
}
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_AND(x : int, y : int) : int {
  if x == y then x else (if x == 0 || y == 0 then 0 else BV32_AND_UF(x, y))
}
function BV32_AND_UF(int, int) : int;
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_OR(x : int, y : int) : int {
  if x == y then x else (if x == 0 then y else (if y == 0 then x else BV32_OR_UF(x, y)))
}
function BV32_OR_UF(int, int) : int;
function {:inline true} BV32_SHL(x : int, y : int) : int {
  if x >= 0 && y == 1 then x*2 else BV32_SHL_UF(x,y)
}
function BV32_SHL_UF(int, int) : int;
function {:inline true} BV32_SLT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV32_SUB(x : int, y : int) : int {
  x - y
}
function {:inline true} BV32_UDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_ULT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV32_UREM(x : int, y : int) : int {
  x mod y
}
procedure {:source_name "larger_sad_calc_8"} {:kernel} $larger_sad_calc_8($mb_width:int, $mb_height:int)
requires {:sourceloc_num 0} (if $mb_width == num_groups_x then 1 else 0) != 0;
requires {:sourceloc_num 1} (if $mb_height == num_groups_y then 1 else 0) != 0;
{
  var $bo_5.0:ptr;
  var $bo_4.0:ptr;
  var $search_pos.0:int;
  var v1:int;
  var v3:int;
  var v2:int;
  var v41:ptr;
  var v40:ptr;
  var v0:int;
  var v18:int;
  var v19:int;
  var v20:int;
  var v21:int;
  var v22:int;
  var v23:int;
  var v24:int;
  var v25:int;
  var v26:int;
  var v27:int;
  var v28:int;
  var v29:int;
  var v30:int;
  var v31:int;
  var v32:int;
  var v33:int;
  var v34:int;
  var v35:int;
  var v36:int;
  var v37:int;
  var v5:bool;
  var v8:int;
  var v6:int;
  var v7:int;
  var v9:int;
  var v10:int;
  var v11:int;
  var v12:int;
  var v13:int;
  var v14:int;
  var v15:int;
  var v16:int;
  var v17:int;
  var v4:bool;
  var v38:int;
  var v39:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v0 := BV32_AND(local_id_y, 1);
  v1 := BV32_LSHR(local_id_y, 1);
  v2 := BV32_MUL(BV32_ASHR(BV32_SHL($mb_height, 8), 8), BV32_ASHR(BV32_SHL($mb_width, 8), 8));
  v3 := BV32_MUL(BV32_ADD(BV32_MUL(BV32_ASHR(BV32_SHL($mb_width, 8), 8), BV32_ASHR(BV32_SHL(group_id_y, 8), 8)), group_id_x), 1096);
  v4 := BV32_SLT(v1, 100);
  goto $truebb, $falsebb;
$1:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  $bo_5.0, $bo_4.0 := MKPTR($arrayId$$blk_sad, BV32_ADD(BV32_MUL(BV32_MUL(BV32_ADD(BV32_ADD(BV32_SHL(v2, 3), v2), BV32_ADD(BV32_MUL(v1, 4), v0)), 1096), 2), BV32_MUL(BV32_MUL(v3, 8), 2))), MKPTR($arrayId$$blk_sad, BV32_ADD(BV32_MUL(BV32_MUL(BV32_ADD(BV32_ADD(BV32_SHL(v2, 2), v2), BV32_ADD(BV32_MUL(v1, 2), v0)), 1096), 2), BV32_MUL(BV32_MUL(v3, 4), 2)));
  goto $2;
$2:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  $search_pos.0 := local_id_x;
  goto $3;
$3:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 6} (if (_READ_HAS_OCCURRED_$$blk_sad ==> BV32_OR(BV32_OR(BV32_OR(BV1_ZEXT32((if BV32_ULT(BV32_UDIV(BV32_SUB(_WATCHED_OFFSET, BV32_ADD(BV32_MUL(BV32_MUL(BV32_ADD(BV32_MUL(25, BV32_ASHR(BV32_SHL(v2, 8), 8)), BV32_ADD(BV32_MUL(v1, 8), BV32_MUL(v0, 2))), 1096), 2), BV32_MUL(BV32_MUL(v3, 16), 2))), 4), 545) then 1 else 0)), BV1_ZEXT32((if BV32_ULT(BV32_SUB(BV32_UDIV(BV32_SUB(_WATCHED_OFFSET, BV32_ADD(BV32_MUL(BV32_MUL(BV32_ADD(BV32_MUL(25, BV32_ASHR(BV32_SHL(v2, 8), 8)), BV32_ADD(BV32_MUL(v1, 8), BV32_MUL(v0, 2))), 1096), 2), BV32_MUL(BV32_MUL(v3, 16), 2))), 4), 548), 545) then 1 else 0))), BV1_ZEXT32((if BV32_ULT(BV32_SUB(BV32_UDIV(BV32_SUB(_WATCHED_OFFSET, BV32_ADD(BV32_MUL(BV32_MUL(BV32_ADD(BV32_MUL(25, BV32_ASHR(BV32_SHL(v2, 8), 8)), BV32_ADD(BV32_MUL(v1, 8), BV32_MUL(v0, 2))), 1096), 2), BV32_MUL(BV32_MUL(v3, 16), 2))), 4), 2192), 545) then 1 else 0))), BV1_ZEXT32((if BV32_ULT(BV32_SUB(BV32_UDIV(BV32_SUB(_WATCHED_OFFSET, BV32_ADD(BV32_MUL(BV32_MUL(BV32_ADD(BV32_MUL(25, BV32_ASHR(BV32_SHL(v2, 8), 8)), BV32_ADD(BV32_MUL(v1, 8), BV32_MUL(v0, 2))), 1096), 2), BV32_MUL(BV32_MUL(v3, 16), 2))), 4), 2740), 545) then 1 else 0))) != 0) then 1 else 0) != 0;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 7} (if (_WRITE_HAS_OCCURRED_$$blk_sad ==> BV32_OR(BV32_OR(BV32_OR(BV32_OR(BV32_AND(BV1_ZEXT32((if BV32_ULT(BV32_UDIV(BV32_SUB(_WATCHED_OFFSET, BV32_ADD(BV32_MUL(BV32_MUL(BV32_ADD(BV32_ADD(BV32_SHL(v2, 4), v2), BV32_ADD(BV32_MUL(v1, 4), BV32_MUL(v0, 2))), 1096), 2), BV32_MUL(BV32_MUL(v3, 8), 2))), 4), 545) then 1 else 0)), BV1_ZEXT32((if BV32_UREM(BV32_UDIV(BV32_SUB(_WATCHED_OFFSET, BV32_ADD(BV32_MUL(BV32_MUL(BV32_ADD(BV32_ADD(BV32_SHL(v2, 4), v2), BV32_ADD(BV32_MUL(v1, 4), BV32_MUL(v0, 2))), 1096), 2), BV32_MUL(BV32_MUL(v3, 8), 2))), 4), 32) == local_id_x then 1 else 0))), BV32_AND(BV1_ZEXT32((if BV32_ULT(BV32_SUB(BV32_UDIV(BV32_SUB(_WATCHED_OFFSET, BV32_ADD(BV32_MUL(BV32_MUL(BV32_ADD(BV32_ADD(BV32_SHL(v2, 4), v2), BV32_ADD(BV32_MUL(v1, 4), BV32_MUL(v0, 2))), 1096), 2), BV32_MUL(BV32_MUL(v3, 8), 2))), 4), 548), 545) then 1 else 0)), BV1_ZEXT32((if BV32_UREM(BV32_SUB(BV32_UDIV(BV32_SUB(_WATCHED_OFFSET, BV32_ADD(BV32_MUL(BV32_MUL(BV32_ADD(BV32_ADD(BV32_SHL(v2, 4), v2), BV32_ADD(BV32_MUL(v1, 4), BV32_MUL(v0, 2))), 1096), 2), BV32_MUL(BV32_MUL(v3, 8), 2))), 4), 548), 32) == local_id_x then 1 else 0)))), BV32_AND(BV1_ZEXT32((if BV32_ULT(BV32_UDIV(BV32_SUB(_WATCHED_OFFSET, offset#MKPTR($bo_5.0)), 4), 545) then 1 else 0)), BV1_ZEXT32((if BV32_UREM(BV32_UDIV(BV32_SUB(_WATCHED_OFFSET, offset#MKPTR($bo_5.0)), 4), 32) == local_id_x then 1 else 0)))), BV32_AND(BV1_ZEXT32((if BV32_ULT(BV32_SUB(BV32_UDIV(BV32_SUB(_WATCHED_OFFSET, offset#MKPTR($bo_5.0)), 4), 1096), 545) then 1 else 0)), BV1_ZEXT32((if BV32_UREM(BV32_SUB(BV32_UDIV(BV32_SUB(_WATCHED_OFFSET, offset#MKPTR($bo_5.0)), 4), 1096), 32) == local_id_x then 1 else 0)))), BV32_AND(BV1_ZEXT32((if BV32_ULT(BV32_UDIV(BV32_SUB(_WATCHED_OFFSET, offset#MKPTR($bo_4.0)), 4), 545) then 1 else 0)), BV1_ZEXT32((if BV32_UREM(BV32_UDIV(BV32_SUB(_WATCHED_OFFSET, offset#MKPTR($bo_4.0)), 4), 32) == local_id_x then 1 else 0)))) != 0) then 1 else 0) != 0;
  v5 := BV32_SLT($search_pos.0, 545);
  goto $truebb0, $falsebb0;
$4:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  assert {:sourceloc} {:sourceloc_num 9} true;
  v6 := $$blk_sad[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(BV32_ADD(BV32_MUL(25, BV32_ASHR(BV32_SHL(v2, 8), 8)), BV32_ADD(BV32_MUL(v1, 8), BV32_MUL(v0, 2))), 1096), 2), BV32_MUL(BV32_MUL(v3, 16), 2)), BV32_MUL(BV32_MUL($search_pos.0, 2), 2))];
  assert {:sourceloc} {:sourceloc_num 10} true;
  v7 := $$blk_sad[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(BV32_ADD(BV32_MUL(25, BV32_ASHR(BV32_SHL(v2, 8), 8)), BV32_ADD(BV32_MUL(v1, 8), BV32_MUL(v0, 2))), 1096), 2), BV32_MUL(BV32_MUL(v3, 16), 2)), BV32_MUL(BV32_MUL($search_pos.0, 2), 2)), 1)];
  v8 := BV_CONCAT(v7, v6);
  assert {:sourceloc} {:sourceloc_num 11} true;
  v9 := $$blk_sad[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(BV32_ADD(BV32_MUL(25, BV32_ASHR(BV32_SHL(v2, 8), 8)), BV32_ADD(BV32_MUL(v1, 8), BV32_MUL(v0, 2))), 1096), 2), BV32_MUL(BV32_MUL(v3, 16), 2)), BV32_MUL(BV32_ADD(BV32_MUL($search_pos.0, 2), 1), 2))];
  assert {:sourceloc} {:sourceloc_num 12} true;
  v10 := $$blk_sad[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(BV32_ADD(BV32_MUL(25, BV32_ASHR(BV32_SHL(v2, 8), 8)), BV32_ADD(BV32_MUL(v1, 8), BV32_MUL(v0, 2))), 1096), 2), BV32_MUL(BV32_MUL(v3, 16), 2)), BV32_MUL(BV32_ADD(BV32_MUL($search_pos.0, 2), 1), 2)), 1)];
  v11 := BV_CONCAT(v10, v9);
  assert {:sourceloc} {:sourceloc_num 13} true;
  v12 := $$blk_sad[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(BV32_ADD(BV32_MUL(25, BV32_ASHR(BV32_SHL(v2, 8), 8)), BV32_ADD(BV32_MUL(v1, 8), BV32_MUL(v0, 2))), 1096), 2), BV32_MUL(BV32_MUL(v3, 16), 2)), BV32_MUL(BV32_MUL(BV32_ADD($search_pos.0, 548), 2), 2))];
  assert {:sourceloc} {:sourceloc_num 14} true;
  v13 := $$blk_sad[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(BV32_ADD(BV32_MUL(25, BV32_ASHR(BV32_SHL(v2, 8), 8)), BV32_ADD(BV32_MUL(v1, 8), BV32_MUL(v0, 2))), 1096), 2), BV32_MUL(BV32_MUL(v3, 16), 2)), BV32_MUL(BV32_MUL(BV32_ADD($search_pos.0, 548), 2), 2)), 1)];
  v14 := BV_CONCAT(v13, v12);
  assert {:sourceloc} {:sourceloc_num 15} true;
  v15 := $$blk_sad[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(BV32_ADD(BV32_MUL(25, BV32_ASHR(BV32_SHL(v2, 8), 8)), BV32_ADD(BV32_MUL(v1, 8), BV32_MUL(v0, 2))), 1096), 2), BV32_MUL(BV32_MUL(v3, 16), 2)), BV32_MUL(BV32_ADD(BV32_MUL(BV32_ADD($search_pos.0, 548), 2), 1), 2))];
  assert {:sourceloc} {:sourceloc_num 16} true;
  v16 := $$blk_sad[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(BV32_ADD(BV32_MUL(25, BV32_ASHR(BV32_SHL(v2, 8), 8)), BV32_ADD(BV32_MUL(v1, 8), BV32_MUL(v0, 2))), 1096), 2), BV32_MUL(BV32_MUL(v3, 16), 2)), BV32_MUL(BV32_ADD(BV32_MUL(BV32_ADD($search_pos.0, 548), 2), 1), 2)), 1)];
  v17 := BV_CONCAT(v16, v15);
  assert {:sourceloc} {:sourceloc_num 17} true;
  v18 := $$blk_sad[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(BV32_ADD(BV32_MUL(25, BV32_ASHR(BV32_SHL(v2, 8), 8)), BV32_ADD(BV32_MUL(v1, 8), BV32_MUL(v0, 2))), 1096), 2), BV32_MUL(BV32_MUL(v3, 16), 2)), BV32_MUL(BV32_MUL(BV32_ADD($search_pos.0, 2192), 2), 2))];
  assert {:sourceloc} {:sourceloc_num 18} true;
  v19 := $$blk_sad[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(BV32_ADD(BV32_MUL(25, BV32_ASHR(BV32_SHL(v2, 8), 8)), BV32_ADD(BV32_MUL(v1, 8), BV32_MUL(v0, 2))), 1096), 2), BV32_MUL(BV32_MUL(v3, 16), 2)), BV32_MUL(BV32_MUL(BV32_ADD($search_pos.0, 2192), 2), 2)), 1)];
  v20 := BV_CONCAT(v19, v18);
  assert {:sourceloc} {:sourceloc_num 19} true;
  v21 := $$blk_sad[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(BV32_ADD(BV32_MUL(25, BV32_ASHR(BV32_SHL(v2, 8), 8)), BV32_ADD(BV32_MUL(v1, 8), BV32_MUL(v0, 2))), 1096), 2), BV32_MUL(BV32_MUL(v3, 16), 2)), BV32_MUL(BV32_ADD(BV32_MUL(BV32_ADD($search_pos.0, 2192), 2), 1), 2))];
  assert {:sourceloc} {:sourceloc_num 20} true;
  v22 := $$blk_sad[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(BV32_ADD(BV32_MUL(25, BV32_ASHR(BV32_SHL(v2, 8), 8)), BV32_ADD(BV32_MUL(v1, 8), BV32_MUL(v0, 2))), 1096), 2), BV32_MUL(BV32_MUL(v3, 16), 2)), BV32_MUL(BV32_ADD(BV32_MUL(BV32_ADD($search_pos.0, 2192), 2), 1), 2)), 1)];
  v23 := BV_CONCAT(v22, v21);
  assert {:sourceloc} {:sourceloc_num 21} true;
  v24 := $$blk_sad[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(BV32_ADD(BV32_MUL(25, BV32_ASHR(BV32_SHL(v2, 8), 8)), BV32_ADD(BV32_MUL(v1, 8), BV32_MUL(v0, 2))), 1096), 2), BV32_MUL(BV32_MUL(v3, 16), 2)), BV32_MUL(BV32_MUL(BV32_ADD($search_pos.0, 2740), 2), 2))];
  assert {:sourceloc} {:sourceloc_num 22} true;
  v25 := $$blk_sad[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(BV32_ADD(BV32_MUL(25, BV32_ASHR(BV32_SHL(v2, 8), 8)), BV32_ADD(BV32_MUL(v1, 8), BV32_MUL(v0, 2))), 1096), 2), BV32_MUL(BV32_MUL(v3, 16), 2)), BV32_MUL(BV32_MUL(BV32_ADD($search_pos.0, 2740), 2), 2)), 1)];
  v26 := BV_CONCAT(v25, v24);
  assert {:sourceloc} {:sourceloc_num 23} true;
  v27 := $$blk_sad[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(BV32_ADD(BV32_MUL(25, BV32_ASHR(BV32_SHL(v2, 8), 8)), BV32_ADD(BV32_MUL(v1, 8), BV32_MUL(v0, 2))), 1096), 2), BV32_MUL(BV32_MUL(v3, 16), 2)), BV32_MUL(BV32_ADD(BV32_MUL(BV32_ADD($search_pos.0, 2740), 2), 1), 2))];
  assert {:sourceloc} {:sourceloc_num 24} true;
  v28 := $$blk_sad[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(BV32_ADD(BV32_MUL(25, BV32_ASHR(BV32_SHL(v2, 8), 8)), BV32_ADD(BV32_MUL(v1, 8), BV32_MUL(v0, 2))), 1096), 2), BV32_MUL(BV32_MUL(v3, 16), 2)), BV32_MUL(BV32_ADD(BV32_MUL(BV32_ADD($search_pos.0, 2740), 2), 1), 2)), 1)];
  v29 := BV_CONCAT(v28, v27);
  v30 := BV16_ADD(v8, v20);
  v31 := BV16_ADD(v11, v23);
  assert {:sourceloc} {:sourceloc_num 25} true;
  $$blk_sad[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(BV32_ADD(BV32_ADD(BV32_SHL(v2, 4), v2), BV32_ADD(BV32_MUL(v1, 4), BV32_MUL(v0, 2))), 1096), 2), BV32_MUL(BV32_MUL(v3, 8), 2)), BV32_MUL($search_pos.0, 4))] := BV_EXTRACT(v30, 8, 0);
  assert {:sourceloc} {:sourceloc_num 26} true;
  $$blk_sad[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(BV32_ADD(BV32_ADD(BV32_SHL(v2, 4), v2), BV32_ADD(BV32_MUL(v1, 4), BV32_MUL(v0, 2))), 1096), 2), BV32_MUL(BV32_MUL(v3, 8), 2)), BV32_MUL($search_pos.0, 4)), 1)] := BV_EXTRACT(v30, 16, 8);
  assert {:sourceloc} {:sourceloc_num 27} true;
  $$blk_sad[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(BV32_ADD(BV32_ADD(BV32_SHL(v2, 4), v2), BV32_ADD(BV32_MUL(v1, 4), BV32_MUL(v0, 2))), 1096), 2), BV32_MUL(BV32_MUL(v3, 8), 2)), BV32_MUL($search_pos.0, 4)), 2)] := BV_EXTRACT(v31, 8, 0);
  assert {:sourceloc} {:sourceloc_num 28} true;
  $$blk_sad[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(BV32_ADD(BV32_ADD(BV32_SHL(v2, 4), v2), BV32_ADD(BV32_MUL(v1, 4), BV32_MUL(v0, 2))), 1096), 2), BV32_MUL(BV32_MUL(v3, 8), 2)), BV32_MUL($search_pos.0, 4)), 3)] := BV_EXTRACT(v31, 16, 8);
  v32 := BV16_ADD(v14, v26);
  v33 := BV16_ADD(v17, v29);
  assert {:sourceloc} {:sourceloc_num 29} true;
  $$blk_sad[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(BV32_ADD(BV32_ADD(BV32_SHL(v2, 4), v2), BV32_ADD(BV32_MUL(v1, 4), BV32_MUL(v0, 2))), 1096), 2), BV32_MUL(BV32_MUL(v3, 8), 2)), BV32_MUL(BV32_ADD($search_pos.0, 548), 4))] := BV_EXTRACT(v32, 8, 0);
  assert {:sourceloc} {:sourceloc_num 30} true;
  $$blk_sad[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(BV32_ADD(BV32_ADD(BV32_SHL(v2, 4), v2), BV32_ADD(BV32_MUL(v1, 4), BV32_MUL(v0, 2))), 1096), 2), BV32_MUL(BV32_MUL(v3, 8), 2)), BV32_MUL(BV32_ADD($search_pos.0, 548), 4)), 1)] := BV_EXTRACT(v32, 16, 8);
  assert {:sourceloc} {:sourceloc_num 31} true;
  $$blk_sad[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(BV32_ADD(BV32_ADD(BV32_SHL(v2, 4), v2), BV32_ADD(BV32_MUL(v1, 4), BV32_MUL(v0, 2))), 1096), 2), BV32_MUL(BV32_MUL(v3, 8), 2)), BV32_MUL(BV32_ADD($search_pos.0, 548), 4)), 2)] := BV_EXTRACT(v33, 8, 0);
  assert {:sourceloc} {:sourceloc_num 32} true;
  $$blk_sad[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(BV32_ADD(BV32_ADD(BV32_SHL(v2, 4), v2), BV32_ADD(BV32_MUL(v1, 4), BV32_MUL(v0, 2))), 1096), 2), BV32_MUL(BV32_MUL(v3, 8), 2)), BV32_MUL(BV32_ADD($search_pos.0, 548), 4)), 3)] := BV_EXTRACT(v33, 16, 8);
  v34 := BV16_ADD(v8, v14);
  v35 := BV16_ADD(v11, v17);
  if (base#MKPTR($bo_5.0) == $arrayId$$blk_sad) {
    assert {:sourceloc} {:sourceloc_num 33} true;
    $$blk_sad[BV32_ADD(offset#MKPTR($bo_5.0), BV32_MUL($search_pos.0, 4))] := BV_EXTRACT(v34, 8, 0);
  } else {
    assert {:bad_pointer_access} {:sourceloc_num 34} false;
  }
  if (base#MKPTR($bo_5.0) == $arrayId$$blk_sad) {
    assert {:sourceloc} {:sourceloc_num 35} true;
    $$blk_sad[BV32_ADD(BV32_ADD(offset#MKPTR($bo_5.0), BV32_MUL($search_pos.0, 4)), 1)] := BV_EXTRACT(v34, 16, 8);
  } else {
    assert {:bad_pointer_access} {:sourceloc_num 36} false;
  }
  if (base#MKPTR($bo_5.0) == $arrayId$$blk_sad) {
    assert {:sourceloc} {:sourceloc_num 37} true;
    $$blk_sad[BV32_ADD(BV32_ADD(offset#MKPTR($bo_5.0), BV32_MUL($search_pos.0, 4)), 2)] := BV_EXTRACT(v35, 8, 0);
  } else {
    assert {:bad_pointer_access} {:sourceloc_num 38} false;
  }
  if (base#MKPTR($bo_5.0) == $arrayId$$blk_sad) {
    assert {:sourceloc} {:sourceloc_num 39} true;
    $$blk_sad[BV32_ADD(BV32_ADD(offset#MKPTR($bo_5.0), BV32_MUL($search_pos.0, 4)), 3)] := BV_EXTRACT(v35, 16, 8);
  } else {
    assert {:bad_pointer_access} {:sourceloc_num 40} false;
  }
  v36 := BV16_ADD(v20, v26);
  v37 := BV16_ADD(v23, v29);
  if (base#MKPTR($bo_5.0) == $arrayId$$blk_sad) {
    assert {:sourceloc} {:sourceloc_num 41} true;
    $$blk_sad[BV32_ADD(offset#MKPTR($bo_5.0), BV32_MUL(BV32_ADD($search_pos.0, 1096), 4))] := BV_EXTRACT(v36, 8, 0);
  } else {
    assert {:bad_pointer_access} {:sourceloc_num 42} false;
  }
  if (base#MKPTR($bo_5.0) == $arrayId$$blk_sad) {
    assert {:sourceloc} {:sourceloc_num 43} true;
    $$blk_sad[BV32_ADD(BV32_ADD(offset#MKPTR($bo_5.0), BV32_MUL(BV32_ADD($search_pos.0, 1096), 4)), 1)] := BV_EXTRACT(v36, 16, 8);
  } else {
    assert {:bad_pointer_access} {:sourceloc_num 44} false;
  }
  if (base#MKPTR($bo_5.0) == $arrayId$$blk_sad) {
    assert {:sourceloc} {:sourceloc_num 45} true;
    $$blk_sad[BV32_ADD(BV32_ADD(offset#MKPTR($bo_5.0), BV32_MUL(BV32_ADD($search_pos.0, 1096), 4)), 2)] := BV_EXTRACT(v37, 8, 0);
  } else {
    assert {:bad_pointer_access} {:sourceloc_num 46} false;
  }
  if (base#MKPTR($bo_5.0) == $arrayId$$blk_sad) {
    assert {:sourceloc} {:sourceloc_num 47} true;
    $$blk_sad[BV32_ADD(BV32_ADD(offset#MKPTR($bo_5.0), BV32_MUL(BV32_ADD($search_pos.0, 1096), 4)), 3)] := BV_EXTRACT(v37, 16, 8);
  } else {
    assert {:bad_pointer_access} {:sourceloc_num 48} false;
  }
  v38 := BV16_ADD(BV16_ADD(v8, v14), BV16_ADD(v20, v26));
  v39 := BV16_ADD(BV16_ADD(v11, v17), BV16_ADD(v23, v29));
  if (base#MKPTR($bo_4.0) == $arrayId$$blk_sad) {
    assert {:sourceloc} {:sourceloc_num 49} true;
    $$blk_sad[BV32_ADD(offset#MKPTR($bo_4.0), BV32_MUL($search_pos.0, 4))] := BV_EXTRACT(v38, 8, 0);
  } else {
    assert {:bad_pointer_access} {:sourceloc_num 50} false;
  }
  if (base#MKPTR($bo_4.0) == $arrayId$$blk_sad) {
    assert {:sourceloc} {:sourceloc_num 51} true;
    $$blk_sad[BV32_ADD(BV32_ADD(offset#MKPTR($bo_4.0), BV32_MUL($search_pos.0, 4)), 1)] := BV_EXTRACT(v38, 16, 8);
  } else {
    assert {:bad_pointer_access} {:sourceloc_num 52} false;
  }
  if (base#MKPTR($bo_4.0) == $arrayId$$blk_sad) {
    assert {:sourceloc} {:sourceloc_num 53} true;
    $$blk_sad[BV32_ADD(BV32_ADD(offset#MKPTR($bo_4.0), BV32_MUL($search_pos.0, 4)), 2)] := BV_EXTRACT(v39, 8, 0);
  } else {
    assert {:bad_pointer_access} {:sourceloc_num 54} false;
  }
  if (base#MKPTR($bo_4.0) == $arrayId$$blk_sad) {
    assert {:sourceloc} {:sourceloc_num 55} true;
    $$blk_sad[BV32_ADD(BV32_ADD(offset#MKPTR($bo_4.0), BV32_MUL($search_pos.0, 4)), 3)] := BV_EXTRACT(v39, 16, 8);
  } else {
    assert {:bad_pointer_access} {:sourceloc_num 56} false;
  }
  goto $5;
$5:
  assert {:block_sourceloc} {:sourceloc_num 57} true;
  $search_pos.0 := BV32_ADD($search_pos.0, 32);
  goto $3;
$6:
  assert {:block_sourceloc} {:sourceloc_num 58} true;
  return;
$truebb:
  assume {:partition} v4;
  assert {:block_sourceloc} {:sourceloc_num 59} true;
  goto $1;
$falsebb:
  assume {:partition} !v4;
  assert {:block_sourceloc} {:sourceloc_num 60} true;
  havoc v40;
  havoc v41;
  $bo_5.0, $bo_4.0 := v40, v41;
  goto $2;
$truebb0:
  assume {:partition} v5;
  assert {:block_sourceloc} {:sourceloc_num 61} true;
  goto $4;
$falsebb0:
  assume {:partition} !v5;
  assert {:block_sourceloc} {:sourceloc_num 62} true;
  goto $6;
}
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 32 then 1 else 0) != 0;
axiom (if group_size_y == 4 then 1 else 0) != 0;
axiom (if num_groups_x == 11 then 1 else 0) != 0;
axiom (if num_groups_y == 9 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
