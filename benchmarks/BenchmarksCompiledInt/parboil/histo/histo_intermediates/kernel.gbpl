type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
procedure _ATOMIC_OP8(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "input"} {:global} $$input : [int]int;
axiom {:array_info "$$input"} {:global} {:elem_width 32} {:source_name "input"} {:source_elem_width 64} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 64} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$input : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 64} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$input : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 64} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$input : bool;

var {:source_name "sm_mappings"} {:global} $$sm_mappings : [int]int;
axiom {:array_info "$$sm_mappings"} {:global} {:elem_width 8} {:source_name "sm_mappings"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$sm_mappings : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$sm_mappings : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$sm_mappings : bool;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function  BV32_LSHR(int, int) : int;
function BV_EXTRACT(int, int, int) : int;
function {:inline true} BV1_XOR(x : int, y : int) : int {
  if (x == 1 || x == -1) && (y == 1 || y == -1) then 0 else (
    if (x == 1 || x == -1) && y == 0 then 1 else (
      if x == 0 && (y == 1 || y == -1) then 1 else (
        if x == y then 0 else BV1_XOR_UF(x, y))))
}
function BV1_XOR_UF(int, int) : int;
function {:inline true} BV1_ZEXT32(x : int) : int {
  x
}
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_AND(x : int, y : int) : int {
  if x == y then x else (if x == 0 || y == 0 then 0 else BV32_AND_UF(x, y))
}
function BV32_AND_UF(int, int) : int;
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_OR(x : int, y : int) : int {
  if x == y then x else (if x == 0 then y else (if y == 0 then x else BV32_OR_UF(x, y)))
}
function BV32_OR_UF(int, int) : int;
function {:inline true} BV32_SLT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV32_SUB(x : int, y : int) : int {
  x - y
}
function {:inline true} BV32_UDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_ULT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV32_UREM(x : int, y : int) : int {
  x mod y
}
function {:inline true} BV8_ZEXT32(x : int) : int {
  x
}
procedure {:source_name "histo_intermediates_kernel"} {:kernel} $histo_intermediates_kernel($height:int, $width:int, $input_pitch:int)
requires {:sourceloc_num 0} (if $width == 996 then 1 else 0) != 0;
{
  var $0:int;
  var $load_bin.0:int;
  var $store.0:int;
  var $i.0:int;
  var v3:bool;
  var v1:int;
  var v0:int;
  var v5:int;
  var v2:int;
  var v4:bool;
  var v7:bool;
  var v6:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  v0 := local_id_x;
  v1 := group_size_x;
  v2 := BV32_MUL(16, group_id_x);
  v3 := BV32_UREM($width, 2) != 0;
  goto $truebb, $falsebb;
$1:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  $0 := (if v0 == BV32_SUB(v1, 1) then 1 else 0);
  goto $2;
$2:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  $load_bin.0, $store.0, $i.0 := BV32_ADD(BV32_MUL(BV32_MUL(v2, $input_pitch), 2), BV32_MUL(v0, 2)), BV32_ADD(BV32_MUL(v2, $width), v0), 0;
  goto $3;
$3:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 5} (if (_WRITE_HAS_OCCURRED_$$sm_mappings ==> BV32_OR(BV32_AND(BV1_ZEXT32((if BV32_UREM(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 4), BV32_ADD(BV32_MUL(v2, $width), v0)), $width) == 0 then 1 else 0)), BV1_ZEXT32((if BV32_ULT(BV32_UDIV(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 4), BV32_ADD(BV32_MUL(v2, $width), v0)), $width), 16) then 1 else 0))), BV1_ZEXT32((if (BV1_XOR($0, -1) == 1 ==> BV32_AND(BV1_ZEXT32((if BV32_UREM(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 4), BV32_ADD(BV32_ADD(BV32_MUL(v2, $width), v0), v1)), $width) == 0 then 1 else 0)), BV1_ZEXT32((if BV32_ULT(BV32_UDIV(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 4), BV32_ADD(BV32_ADD(BV32_MUL(v2, $width), v0), v1)), $width), 16) then 1 else 0))) != 0) then 1 else 0))) != 0) then 1 else 0) != 0;
  assert {:originated_from_invariant} {:sourceloc_num 6} (if $store.0 == BV32_ADD(BV32_ADD(BV32_MUL(v2, $width), v0), BV32_MUL($i.0, $width)) then 1 else 0) != 0;
  v4 := BV32_SLT($i.0, 16);
  goto $truebb0, $falsebb0;
$4:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  assert {:sourceloc} {:sourceloc_num 8} true;
  v5 := $$input[$load_bin.0];
  assert {:sourceloc} {:sourceloc_num 9} true;
  v6 := $$input[BV32_ADD($load_bin.0, 1)];
  assert {:sourceloc} {:sourceloc_num 10} true;
  $$sm_mappings[BV32_MUL($store.0, 4)] := BV_EXTRACT(BV32_UDIV(v5, 24576), 8, 0);
  assert {:sourceloc} {:sourceloc_num 11} true;
  $$sm_mappings[BV32_ADD(BV32_MUL($store.0, 4), 1)] := BV_EXTRACT(BV32_UREM(BV32_LSHR(v5, 10), 24), 8, 0);
  assert {:sourceloc} {:sourceloc_num 12} true;
  $$sm_mappings[BV32_ADD(BV32_MUL($store.0, 4), 2)] := BV_EXTRACT(BV32_UREM(BV32_LSHR(v5, 2), 256), 8, 0);
  assert {:sourceloc} {:sourceloc_num 13} true;
  $$sm_mappings[BV32_ADD(BV32_MUL($store.0, 4), 3)] := BV_EXTRACT(BV32_MUL(BV8_ZEXT32(BV_EXTRACT(BV32_UREM(v5, 4), 8, 0)), 8), 8, 0);
  v7 := $0 == 1;
  goto $truebb1, $falsebb1;
$5:
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  assert {:sourceloc} {:sourceloc_num 15} true;
  $$sm_mappings[BV32_MUL(BV32_ADD($store.0, v1), 4)] := BV_EXTRACT(BV32_UDIV(v6, 24576), 8, 0);
  assert {:sourceloc} {:sourceloc_num 16} true;
  $$sm_mappings[BV32_ADD(BV32_MUL(BV32_ADD($store.0, v1), 4), 1)] := BV_EXTRACT(BV32_UREM(BV32_LSHR(v6, 10), 24), 8, 0);
  assert {:sourceloc} {:sourceloc_num 17} true;
  $$sm_mappings[BV32_ADD(BV32_MUL(BV32_ADD($store.0, v1), 4), 2)] := BV_EXTRACT(BV32_UREM(BV32_LSHR(v6, 2), 256), 8, 0);
  assert {:sourceloc} {:sourceloc_num 18} true;
  $$sm_mappings[BV32_ADD(BV32_MUL(BV32_ADD($store.0, v1), 4), 3)] := BV_EXTRACT(BV32_MUL(BV8_ZEXT32(BV_EXTRACT(BV32_UREM(v6, 4), 8, 0)), 8), 8, 0);
  goto $6;
$6:
  assert {:block_sourceloc} {:sourceloc_num 19} true;
  goto $7;
$7:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  $load_bin.0, $store.0, $i.0 := BV32_ADD($load_bin.0, BV32_MUL($input_pitch, 2)), BV32_ADD($store.0, $width), BV32_ADD($i.0, 1);
  goto $3;
$8:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  return;
$truebb:
  assume {:partition} v3;
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  goto $1;
$falsebb:
  assume {:partition} !v3;
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  $0 := 0;
  goto $2;
$truebb0:
  assume {:partition} v4;
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  goto $4;
$falsebb0:
  assume {:partition} !v4;
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  goto $8;
$truebb1:
  assume {:partition} v7;
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  goto $6;
$falsebb1:
  assume {:partition} !v7;
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  goto $5;
}
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 498 then 1 else 0) != 0;
axiom (if num_groups_x == 65 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
