type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
procedure _ATOMIC_OP8(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "global_subhisto"} {:global} $$global_subhisto : [int]int;
axiom {:array_info "$$global_subhisto"} {:global} {:elem_width 32} {:source_name "global_subhisto"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$global_subhisto : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$global_subhisto : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$global_subhisto : bool;

var {:source_name "global_histo"} {:global} $$global_histo : [int]int;
axiom {:array_info "$$global_histo"} {:global} {:elem_width 8} {:source_name "global_histo"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$global_histo : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$global_histo : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$global_histo : bool;

var {:source_name "global_overflow"} {:global} $$global_overflow : [int]int;
axiom {:array_info "$$global_overflow"} {:global} {:elem_width 32} {:source_name "global_overflow"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$global_overflow : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$global_overflow : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$global_overflow : bool;

var {:source_name "final_histo"} {:global} $$final_histo : [int]int;
axiom {:array_info "$$final_histo"} {:global} {:elem_width 8} {:source_name "final_histo"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$final_histo : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$final_histo : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$final_histo : bool;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function BV_CONCAT(int, int) : int;
function BV_EXTRACT(int, int, int) : int;
function {:inline true} BV16_ULT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV1_ZEXT32(x : int) : int {
  x
}
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_AND(x : int, y : int) : int {
  if x == y then x else (if x == 0 || y == 0 then 0 else BV32_AND_UF(x, y))
}
function BV32_AND_UF(int, int) : int;
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_OR(x : int, y : int) : int {
  if x == y then x else (if x == 0 then y else (if y == 0 then x else BV32_OR_UF(x, y)))
}
function BV32_OR_UF(int, int) : int;
function {:inline true} BV32_SUB(x : int, y : int) : int {
  x - y
}
function {:inline true} BV32_UDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_ULE(x : int, y : int) : bool {
  x <= y
}
function {:inline true} BV32_ULT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV32_UREM(x : int, y : int) : int {
  x mod y
}
procedure {:source_name "histo_final_kernel"} {:kernel} $histo_final_kernel($sm_range_min:int, $sm_range_max:int, $histo_height:int, $histo_width:int)
requires {:sourceloc_num 0} (if $sm_range_min == 1 then 1 else 0) != 0;
requires {:sourceloc_num 1} (if $sm_range_max == 2 then 1 else 0) != 0;
requires {:sourceloc_num 2} (if $histo_height == 4096 then 1 else 0) != 0;
requires {:sourceloc_num 3} (if $histo_width == 256 then 1 else 0) != 0;
{
  var $i.0:int;
  var $i1.0:int;
  var $i4.0:int;
  var v3:int;
  var v5:bool;
  var v4:int;
  var v2:int;
  var v9:int;
  var v10:int;
  var v11:int;
  var v12:int;
  var v13:int;
  var v25:int;
  var v26:int;
  var v14:int;
  var v1:int;
  var v6:int;
  var v7:int;
  var v8:int;
  var v18:bool;
  var v19:int;
  var v20:int;
  var v21:int;
  var v22:int;
  var v23:int;
  var v24:int;
  var v0:int;
  var v17:int;
  var v27:bool;
  var v36:int;
  var v37:int;
  var v38:int;
  var v28:int;
  var v29:int;
  var v30:int;
  var v31:int;
  var v32:int;
  var v33:int;
  var v34:int;
  var v35:int;
  var v39:int;
  var v15:int;
  var v16:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  v0 := group_size_x;
  v1 := num_groups_x;
  v2 := BV32_ADD(local_id_x, BV32_MUL(group_id_x, v0));
  v3 := BV32_MUL($sm_range_min, 24576);
  v4 := BV32_MUL(BV32_ADD(BV32_SUB($sm_range_max, $sm_range_min), 1), 24576);
  $i.0 := v2;
  goto $1;
$1:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  assert {:originated_from_invariant} {:sourceloc_num 6} (if BV32_UREM(BV32_SUB($i.0, v2), BV32_MUL(v1, v0)) == 0 then 1 else 0) != 0;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 7} (if (_READ_HAS_OCCURRED_$$global_histo ==> BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_ULT(v2, BV32_UDIV(v3, 4)) then 1 else 0)), BV1_ZEXT32((if BV32_UREM(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 8), v2), BV32_MUL(v1, v0)) == 0 then 1 else 0))), BV1_ZEXT32((if BV32_ULE(BV32_UDIV(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 8), v2), BV32_MUL(v1, v0)), BV32_UDIV(BV32_SUB(BV32_UDIV(v3, 4), v2), BV32_MUL(v1, v0))) then 1 else 0))) != 0) then 1 else 0) != 0;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 8} (if (_WRITE_HAS_OCCURRED_$$global_histo ==> BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_ULT(v2, BV32_UDIV(v3, 4)) then 1 else 0)), BV1_ZEXT32((if BV32_UREM(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 8), v2), BV32_MUL(v1, v0)) == 0 then 1 else 0))), BV1_ZEXT32((if BV32_ULE(BV32_UDIV(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 8), v2), BV32_MUL(v1, v0)), BV32_UDIV(BV32_SUB(BV32_UDIV(v3, 4), v2), BV32_MUL(v1, v0))) then 1 else 0))) != 0) then 1 else 0) != 0;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 9} (if (_WRITE_HAS_OCCURRED_$$final_histo ==> BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_ULT(v2, BV32_UDIV(v3, 4)) then 1 else 0)), BV1_ZEXT32((if BV32_UREM(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 4), v2), BV32_MUL(v1, v0)) == 0 then 1 else 0))), BV1_ZEXT32((if BV32_ULE(BV32_UDIV(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 4), v2), BV32_MUL(v1, v0)), BV32_UDIV(BV32_SUB(BV32_UDIV(v3, 4), v2), BV32_MUL(v1, v0))) then 1 else 0))) != 0) then 1 else 0) != 0;
  v5 := BV32_ULT($i.0, BV32_UDIV(v3, 4));
  goto $truebb, $falsebb;
$2:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  assert {:sourceloc} {:sourceloc_num 11} true;
  v6 := $$global_histo[BV32_MUL($i.0, 8)];
  assert {:sourceloc} {:sourceloc_num 12} true;
  v7 := $$global_histo[BV32_ADD(BV32_MUL($i.0, 8), 1)];
  assert {:sourceloc} {:sourceloc_num 13} true;
  v8 := $$global_histo[BV32_ADD(BV32_MUL($i.0, 8), 2)];
  assert {:sourceloc} {:sourceloc_num 14} true;
  v9 := $$global_histo[BV32_ADD(BV32_MUL($i.0, 8), 3)];
  assert {:sourceloc} {:sourceloc_num 15} true;
  v10 := $$global_histo[BV32_ADD(BV32_MUL($i.0, 8), 4)];
  assert {:sourceloc} {:sourceloc_num 16} true;
  v11 := $$global_histo[BV32_ADD(BV32_MUL($i.0, 8), 5)];
  assert {:sourceloc} {:sourceloc_num 17} true;
  v12 := $$global_histo[BV32_ADD(BV32_MUL($i.0, 8), 6)];
  assert {:sourceloc} {:sourceloc_num 18} true;
  v13 := $$global_histo[BV32_ADD(BV32_MUL($i.0, 8), 7)];
  assert {:sourceloc} {:sourceloc_num 19} true;
  $$global_histo[BV32_MUL($i.0, 8)] := 0;
  assert {:sourceloc} {:sourceloc_num 20} true;
  $$global_histo[BV32_ADD(BV32_MUL($i.0, 8), 1)] := 0;
  assert {:sourceloc} {:sourceloc_num 21} true;
  $$global_histo[BV32_ADD(BV32_MUL($i.0, 8), 2)] := 0;
  assert {:sourceloc} {:sourceloc_num 22} true;
  $$global_histo[BV32_ADD(BV32_MUL($i.0, 8), 3)] := 0;
  assert {:sourceloc} {:sourceloc_num 23} true;
  $$global_histo[BV32_ADD(BV32_MUL($i.0, 8), 4)] := 0;
  assert {:sourceloc} {:sourceloc_num 24} true;
  $$global_histo[BV32_ADD(BV32_MUL($i.0, 8), 5)] := 0;
  assert {:sourceloc} {:sourceloc_num 25} true;
  $$global_histo[BV32_ADD(BV32_MUL($i.0, 8), 6)] := 0;
  assert {:sourceloc} {:sourceloc_num 26} true;
  $$global_histo[BV32_ADD(BV32_MUL($i.0, 8), 7)] := 0;
  v14 := BV_CONCAT(v7, v6);
  v15 := BV_CONCAT(v9, v8);
  v16 := BV_CONCAT(v11, v10);
  v17 := BV_CONCAT(v13, v12);
  assert {:sourceloc} {:sourceloc_num 27} true;
  $$final_histo[BV32_MUL($i.0, 4)] := BV_EXTRACT((if BV16_ULT(v14, 255) then v14 else 255), 8, 0);
  assert {:sourceloc} {:sourceloc_num 28} true;
  $$final_histo[BV32_ADD(BV32_MUL($i.0, 4), 1)] := BV_EXTRACT((if BV16_ULT(v15, 255) then v15 else 255), 8, 0);
  assert {:sourceloc} {:sourceloc_num 29} true;
  $$final_histo[BV32_ADD(BV32_MUL($i.0, 4), 2)] := BV_EXTRACT((if BV16_ULT(v16, 255) then v16 else 255), 8, 0);
  assert {:sourceloc} {:sourceloc_num 30} true;
  $$final_histo[BV32_ADD(BV32_MUL($i.0, 4), 3)] := BV_EXTRACT((if BV16_ULT(v17, 255) then v17 else 255), 8, 0);
  goto $3;
$3:
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  $i.0 := BV32_ADD($i.0, BV32_MUL(v1, v0));
  goto $1;
$4:
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  $i1.0 := BV32_ADD(BV32_UDIV(v3, 4), v2);
  goto $5;
$5:
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  assert {:originated_from_invariant} {:sourceloc_num 34} (if BV32_UREM(BV32_SUB($i1.0, BV32_ADD(BV32_UDIV(v3, 4), v2)), BV32_MUL(v1, v0)) == 0 then 1 else 0) != 0;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 35} (if (_READ_HAS_OCCURRED_$$global_overflow ==> BV32_UREM(BV32_SUB(BV32_UDIV(BV32_MUL(4, _WATCHED_OFFSET), 16), BV32_ADD(BV32_UDIV(v3, 4), v2)), BV32_MUL(v1, v0)) == 0) then 1 else 0) != 0;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 36} (if (_WRITE_HAS_OCCURRED_$$global_overflow ==> BV32_UREM(BV32_SUB(BV32_UDIV(BV32_MUL(4, _WATCHED_OFFSET), 16), BV32_ADD(BV32_UDIV(v3, 4), v2)), BV32_MUL(v1, v0)) == 0) then 1 else 0) != 0;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 37} (if (_WRITE_HAS_OCCURRED_$$final_histo ==> BV32_OR(BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_ULT(v2, BV32_UDIV(v3, 4)) then 1 else 0)), BV1_ZEXT32((if BV32_UREM(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 4), v2), BV32_MUL(v1, v0)) == 0 then 1 else 0))), BV1_ZEXT32((if BV32_ULE(BV32_UDIV(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 4), v2), BV32_MUL(v1, v0)), BV32_UDIV(BV32_SUB(BV32_UDIV(v3, 4), v2), BV32_MUL(v1, v0))) then 1 else 0))), BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_ULT(BV32_ADD(BV32_UDIV(v3, 4), v2), BV32_UDIV(BV32_ADD(v3, v4), 4)) then 1 else 0)), BV1_ZEXT32((if BV32_UREM(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 4), BV32_ADD(BV32_UDIV(v3, 4), v2)), BV32_MUL(v1, v0)) == 0 then 1 else 0))), BV1_ZEXT32((if BV32_ULE(BV32_UDIV(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 4), BV32_ADD(BV32_UDIV(v3, 4), v2)), BV32_MUL(v1, v0)), BV32_UDIV(BV32_SUB(BV32_UDIV(BV32_ADD(v3, v4), 4), BV32_ADD(BV32_UDIV(v3, 4), v2)), BV32_MUL(v1, v0))) then 1 else 0)))) != 0) then 1 else 0) != 0;
  v18 := BV32_ULT($i1.0, BV32_UDIV(BV32_ADD(v3, v4), 4));
  goto $truebb0, $falsebb0;
$6:
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  assert {:sourceloc} {:sourceloc_num 39} true;
  v19 := $$global_overflow[BV32_MUL($i1.0, 4)];
  assert {:sourceloc} {:sourceloc_num 40} true;
  v20 := $$global_overflow[BV32_ADD(BV32_MUL($i1.0, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 41} true;
  v21 := $$global_overflow[BV32_ADD(BV32_MUL($i1.0, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 42} true;
  v22 := $$global_overflow[BV32_ADD(BV32_MUL($i1.0, 4), 3)];
  assert {:sourceloc} {:sourceloc_num 43} true;
  $$global_overflow[BV32_MUL($i1.0, 4)] := 0;
  assert {:sourceloc} {:sourceloc_num 44} true;
  $$global_overflow[BV32_ADD(BV32_MUL($i1.0, 4), 1)] := 0;
  assert {:sourceloc} {:sourceloc_num 45} true;
  $$global_overflow[BV32_ADD(BV32_MUL($i1.0, 4), 2)] := 0;
  assert {:sourceloc} {:sourceloc_num 46} true;
  $$global_overflow[BV32_ADD(BV32_MUL($i1.0, 4), 3)] := 0;
  assert {:sourceloc} {:sourceloc_num 47} true;
  v23 := $$global_subhisto[BV32_MUL($i1.0, 4)];
  assert {:sourceloc} {:sourceloc_num 48} true;
  v24 := $$global_subhisto[BV32_ADD(BV32_MUL($i1.0, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 49} true;
  v25 := $$global_subhisto[BV32_ADD(BV32_MUL($i1.0, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 50} true;
  v26 := $$global_subhisto[BV32_ADD(BV32_MUL($i1.0, 4), 3)];
  assert {:sourceloc} {:sourceloc_num 51} true;
  $$final_histo[BV32_MUL($i1.0, 4)] := BV_EXTRACT((if BV32_ULT(v23, 255) then v23 else 255), 8, 0);
  assert {:sourceloc} {:sourceloc_num 52} true;
  $$final_histo[BV32_ADD(BV32_MUL($i1.0, 4), 1)] := BV_EXTRACT((if BV32_ULT(v24, 255) then v24 else 255), 8, 0);
  assert {:sourceloc} {:sourceloc_num 53} true;
  $$final_histo[BV32_ADD(BV32_MUL($i1.0, 4), 2)] := BV_EXTRACT((if BV32_ULT(v25, 255) then v25 else 255), 8, 0);
  assert {:sourceloc} {:sourceloc_num 54} true;
  $$final_histo[BV32_ADD(BV32_MUL($i1.0, 4), 3)] := BV_EXTRACT((if BV32_ULT(v26, 255) then v26 else 255), 8, 0);
  goto $7;
$7:
  assert {:block_sourceloc} {:sourceloc_num 55} true;
  $i1.0 := BV32_ADD($i1.0, BV32_MUL(v1, v0));
  goto $5;
$8:
  assert {:block_sourceloc} {:sourceloc_num 56} true;
  $i4.0 := BV32_ADD(BV32_UDIV(BV32_ADD(v3, v4), 4), v2);
  goto $9;
$9:
  assert {:block_sourceloc} {:sourceloc_num 57} true;
  assert {:originated_from_invariant} {:sourceloc_num 58} (if BV32_UREM(BV32_SUB($i4.0, BV32_ADD(BV32_UDIV(BV32_ADD(v3, v4), 4), v2)), BV32_MUL(v1, v0)) == 0 then 1 else 0) != 0;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 59} (if (_READ_HAS_OCCURRED_$$global_histo ==> BV32_OR(BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_ULT(v2, BV32_UDIV(v3, 4)) then 1 else 0)), BV1_ZEXT32((if BV32_UREM(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 8), v2), BV32_MUL(v1, v0)) == 0 then 1 else 0))), BV1_ZEXT32((if BV32_ULE(BV32_UDIV(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 8), v2), BV32_MUL(v1, v0)), BV32_UDIV(BV32_SUB(BV32_UDIV(v3, 4), v2), BV32_MUL(v1, v0))) then 1 else 0))), BV32_AND(BV1_ZEXT32((if BV32_UREM(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 8), BV32_ADD(BV32_UDIV(BV32_ADD(v3, v4), 4), v2)), BV32_MUL(v1, v0)) == 0 then 1 else 0)), BV1_ZEXT32((if BV32_ULE(BV32_UDIV(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 8), BV32_ADD(BV32_UDIV(BV32_ADD(v3, v4), 4), v2)), BV32_MUL(v1, v0)), BV32_UDIV(BV32_SUB(BV32_UDIV(BV32_MUL($histo_height, $histo_width), 4), BV32_ADD(BV32_UDIV(BV32_ADD(v3, v4), 4), v2)), BV32_MUL(v1, v0))) then 1 else 0)))) != 0) then 1 else 0) != 0;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 60} (if (_WRITE_HAS_OCCURRED_$$global_histo ==> BV32_OR(BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_ULT(v2, BV32_UDIV(v3, 4)) then 1 else 0)), BV1_ZEXT32((if BV32_UREM(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 8), v2), BV32_MUL(v1, v0)) == 0 then 1 else 0))), BV1_ZEXT32((if BV32_ULE(BV32_UDIV(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 8), v2), BV32_MUL(v1, v0)), BV32_UDIV(BV32_SUB(BV32_UDIV(v3, 4), v2), BV32_MUL(v1, v0))) then 1 else 0))), BV32_AND(BV1_ZEXT32((if BV32_UREM(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 8), BV32_ADD(BV32_UDIV(BV32_ADD(v3, v4), 4), v2)), BV32_MUL(v1, v0)) == 0 then 1 else 0)), BV1_ZEXT32((if BV32_ULE(BV32_UDIV(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 8), BV32_ADD(BV32_UDIV(BV32_ADD(v3, v4), 4), v2)), BV32_MUL(v1, v0)), BV32_UDIV(BV32_SUB(BV32_UDIV(BV32_MUL($histo_height, $histo_width), 4), BV32_ADD(BV32_UDIV(BV32_ADD(v3, v4), 4), v2)), BV32_MUL(v1, v0))) then 1 else 0)))) != 0) then 1 else 0) != 0;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 61} (if (_WRITE_HAS_OCCURRED_$$final_histo ==> BV32_OR(BV32_OR(BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_ULT(v2, BV32_UDIV(v3, 4)) then 1 else 0)), BV1_ZEXT32((if BV32_UREM(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 4), v2), BV32_MUL(v1, v0)) == 0 then 1 else 0))), BV1_ZEXT32((if BV32_ULE(BV32_UDIV(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 4), v2), BV32_MUL(v1, v0)), BV32_UDIV(BV32_SUB(BV32_UDIV(v3, 4), v2), BV32_MUL(v1, v0))) then 1 else 0))), BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_ULT(BV32_ADD(BV32_UDIV(v3, 4), v2), BV32_UDIV(BV32_ADD(v3, v4), 4)) then 1 else 0)), BV1_ZEXT32((if BV32_UREM(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 4), BV32_ADD(BV32_UDIV(v3, 4), v2)), BV32_MUL(v1, v0)) == 0 then 1 else 0))), BV1_ZEXT32((if BV32_ULE(BV32_UDIV(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 4), BV32_ADD(BV32_UDIV(v3, 4), v2)), BV32_MUL(v1, v0)), BV32_UDIV(BV32_SUB(BV32_UDIV(BV32_ADD(v3, v4), 4), BV32_ADD(BV32_UDIV(v3, 4), v2)), BV32_MUL(v1, v0))) then 1 else 0)))), BV32_AND(BV1_ZEXT32((if BV32_UREM(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 4), BV32_ADD(BV32_UDIV(BV32_ADD(v3, v4), 4), v2)), BV32_MUL(v1, v0)) == 0 then 1 else 0)), BV1_ZEXT32((if BV32_ULE(BV32_UDIV(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 4), BV32_ADD(BV32_UDIV(BV32_ADD(v3, v4), 4), v2)), BV32_MUL(v1, v0)), BV32_UDIV(BV32_SUB(BV32_UDIV(BV32_MUL($histo_height, $histo_width), 4), BV32_ADD(BV32_UDIV(BV32_ADD(v3, v4), 4), v2)), BV32_MUL(v1, v0))) then 1 else 0)))) != 0) then 1 else 0) != 0;
  v27 := BV32_ULT($i4.0, BV32_UDIV(BV32_MUL($histo_height, $histo_width), 4));
  goto $truebb1, $falsebb1;
$10:
  assert {:block_sourceloc} {:sourceloc_num 62} true;
  assert {:sourceloc} {:sourceloc_num 63} true;
  v28 := $$global_histo[BV32_MUL($i4.0, 8)];
  assert {:sourceloc} {:sourceloc_num 64} true;
  v29 := $$global_histo[BV32_ADD(BV32_MUL($i4.0, 8), 1)];
  assert {:sourceloc} {:sourceloc_num 65} true;
  v30 := $$global_histo[BV32_ADD(BV32_MUL($i4.0, 8), 2)];
  assert {:sourceloc} {:sourceloc_num 66} true;
  v31 := $$global_histo[BV32_ADD(BV32_MUL($i4.0, 8), 3)];
  assert {:sourceloc} {:sourceloc_num 67} true;
  v32 := $$global_histo[BV32_ADD(BV32_MUL($i4.0, 8), 4)];
  assert {:sourceloc} {:sourceloc_num 68} true;
  v33 := $$global_histo[BV32_ADD(BV32_MUL($i4.0, 8), 5)];
  assert {:sourceloc} {:sourceloc_num 69} true;
  v34 := $$global_histo[BV32_ADD(BV32_MUL($i4.0, 8), 6)];
  assert {:sourceloc} {:sourceloc_num 70} true;
  v35 := $$global_histo[BV32_ADD(BV32_MUL($i4.0, 8), 7)];
  assert {:sourceloc} {:sourceloc_num 71} true;
  $$global_histo[BV32_MUL($i4.0, 8)] := 0;
  assert {:sourceloc} {:sourceloc_num 72} true;
  $$global_histo[BV32_ADD(BV32_MUL($i4.0, 8), 1)] := 0;
  assert {:sourceloc} {:sourceloc_num 73} true;
  $$global_histo[BV32_ADD(BV32_MUL($i4.0, 8), 2)] := 0;
  assert {:sourceloc} {:sourceloc_num 74} true;
  $$global_histo[BV32_ADD(BV32_MUL($i4.0, 8), 3)] := 0;
  assert {:sourceloc} {:sourceloc_num 75} true;
  $$global_histo[BV32_ADD(BV32_MUL($i4.0, 8), 4)] := 0;
  assert {:sourceloc} {:sourceloc_num 76} true;
  $$global_histo[BV32_ADD(BV32_MUL($i4.0, 8), 5)] := 0;
  assert {:sourceloc} {:sourceloc_num 77} true;
  $$global_histo[BV32_ADD(BV32_MUL($i4.0, 8), 6)] := 0;
  assert {:sourceloc} {:sourceloc_num 78} true;
  $$global_histo[BV32_ADD(BV32_MUL($i4.0, 8), 7)] := 0;
  v36 := BV_CONCAT(v29, v28);
  v37 := BV_CONCAT(v31, v30);
  v38 := BV_CONCAT(v33, v32);
  v39 := BV_CONCAT(v35, v34);
  assert {:sourceloc} {:sourceloc_num 79} true;
  $$final_histo[BV32_MUL($i4.0, 4)] := BV_EXTRACT((if BV16_ULT(v36, 255) then v36 else 255), 8, 0);
  assert {:sourceloc} {:sourceloc_num 80} true;
  $$final_histo[BV32_ADD(BV32_MUL($i4.0, 4), 1)] := BV_EXTRACT((if BV16_ULT(v37, 255) then v37 else 255), 8, 0);
  assert {:sourceloc} {:sourceloc_num 81} true;
  $$final_histo[BV32_ADD(BV32_MUL($i4.0, 4), 2)] := BV_EXTRACT((if BV16_ULT(v38, 255) then v38 else 255), 8, 0);
  assert {:sourceloc} {:sourceloc_num 82} true;
  $$final_histo[BV32_ADD(BV32_MUL($i4.0, 4), 3)] := BV_EXTRACT((if BV16_ULT(v39, 255) then v39 else 255), 8, 0);
  goto $11;
$11:
  assert {:block_sourceloc} {:sourceloc_num 83} true;
  $i4.0 := BV32_ADD($i4.0, BV32_MUL(v1, v0));
  goto $9;
$12:
  assert {:block_sourceloc} {:sourceloc_num 84} true;
  return;
$truebb:
  assume {:partition} v5;
  assert {:block_sourceloc} {:sourceloc_num 85} true;
  goto $2;
$falsebb:
  assume {:partition} !v5;
  assert {:block_sourceloc} {:sourceloc_num 86} true;
  goto $4;
$truebb0:
  assume {:partition} v18;
  assert {:block_sourceloc} {:sourceloc_num 87} true;
  goto $6;
$falsebb0:
  assume {:partition} !v18;
  assert {:block_sourceloc} {:sourceloc_num 88} true;
  goto $8;
$truebb1:
  assume {:partition} v27;
  assert {:block_sourceloc} {:sourceloc_num 89} true;
  goto $10;
$falsebb1:
  assume {:partition} !v27;
  assert {:block_sourceloc} {:sourceloc_num 90} true;
  goto $12;
}
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 512 then 1 else 0) != 0;
axiom (if num_groups_x == 42 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
