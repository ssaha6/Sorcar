type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "srcGrid"} {:global} $$srcGrid : [int]int;
axiom {:array_info "$$srcGrid"} {:global} {:elem_width 32} {:source_name "srcGrid"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$srcGrid : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$srcGrid : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$srcGrid : bool;

var {:source_name "dstGrid"} {:global} $$dstGrid : [int]int;
axiom {:array_info "$$dstGrid"} {:global} {:elem_width 32} {:source_name "dstGrid"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$dstGrid : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$dstGrid : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$dstGrid : bool;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_id_y} group_id_y : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function FADD32(int, int) : int;
function FDIV32(int, int) : int;
function FMUL32(int, int) : int;
function FSUB32(int, int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_AND(x : int, y : int) : int {
  if x == y then x else (if x == 0 || y == 0 then 0 else BV32_AND_UF(x, y))
}
function BV32_AND_UF(int, int) : int;
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
procedure {:source_name "performStreamCollide_kernel"} {:kernel} $performStreamCollide_kernel()
{
  var $tempWT.0:int;
  var $tempEB.0:int;
  var $tempET.0:int;
  var $tempSB.0:int;
  var $tempST.0:int;
  var $tempNB.0:int;
  var $tempNT.0:int;
  var $tempSW.0:int;
  var $tempSE.0:int;
  var $tempNW.0:int;
  var $tempNE.0:int;
  var $tempB.0:int;
  var $tempT.0:int;
  var $tempW.0:int;
  var $tempE.0:int;
  var $tempS.0:int;
  var $tempN.0:int;
  var $tempC.0:int;
  var $tempWB.0:int;
  var $ux.0:int;
  var $uy.0:int;
  var $uz.0:int;
  var v0:int;
  var v1:int;
  var v2:int;
  var v3:int;
  var v4:int;
  var v5:int;
  var v6:int;
  var v7:int;
  var v8:int;
  var v9:int;
  var v10:int;
  var v11:int;
  var v12:int;
  var v13:int;
  var v14:int;
  var v15:int;
  var v16:int;
  var v17:int;
  var v18:int;
  var v19:int;
  var v20:int;
  var v21:int;
  var v22:int;
  var v23:bool;
  var v24:int;
  var v25:int;
  var v26:bool;
  var v27:int;
  var v28:int;
  var v29:int;
  var v30:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  v0 := local_id_x;
  v1 := group_id_x;
  v2 := group_id_y;
  assert {:sourceloc} {:sourceloc_num 1} true;
  v3 := $$srcGrid[BV32_ADD(614400, BV32_MUL(20, BV32_ADD(BV32_ADD(v0, BV32_MUL(v1, 128)), BV32_MUL(BV32_MUL(v2, 128), 120))))];
  assert {:sourceloc} {:sourceloc_num 2} true;
  v4 := $$srcGrid[BV32_ADD(BV32_MUL(20, BV32_ADD(BV32_ADD(v0, BV32_MUL(BV32_ADD(-1, v1), 128)), BV32_MUL(BV32_MUL(v2, 128), 120))), 614401)];
  assert {:sourceloc} {:sourceloc_num 3} true;
  v5 := $$srcGrid[BV32_ADD(BV32_MUL(20, BV32_ADD(BV32_ADD(v0, BV32_MUL(BV32_ADD(1, v1), 128)), BV32_MUL(BV32_MUL(v2, 128), 120))), 614402)];
  assert {:sourceloc} {:sourceloc_num 4} true;
  v6 := $$srcGrid[BV32_ADD(BV32_MUL(20, BV32_ADD(BV32_ADD(BV32_ADD(-1, v0), BV32_MUL(v1, 128)), BV32_MUL(BV32_MUL(v2, 128), 120))), 614403)];
  assert {:sourceloc} {:sourceloc_num 5} true;
  v7 := $$srcGrid[BV32_ADD(BV32_MUL(20, BV32_ADD(BV32_ADD(BV32_ADD(1, v0), BV32_MUL(v1, 128)), BV32_MUL(BV32_MUL(v2, 128), 120))), 614404)];
  assert {:sourceloc} {:sourceloc_num 6} true;
  v8 := $$srcGrid[BV32_ADD(BV32_MUL(20, BV32_ADD(BV32_ADD(v0, BV32_MUL(v1, 128)), BV32_MUL(BV32_MUL(BV32_ADD(-1, v2), 128), 120))), 614405)];
  assert {:sourceloc} {:sourceloc_num 7} true;
  v9 := $$srcGrid[BV32_ADD(BV32_MUL(20, BV32_ADD(BV32_ADD(v0, BV32_MUL(v1, 128)), BV32_MUL(BV32_MUL(BV32_ADD(1, v2), 128), 120))), 614406)];
  assert {:sourceloc} {:sourceloc_num 8} true;
  v10 := $$srcGrid[BV32_ADD(BV32_MUL(20, BV32_ADD(BV32_ADD(BV32_ADD(-1, v0), BV32_MUL(BV32_ADD(-1, v1), 128)), BV32_MUL(BV32_MUL(v2, 128), 120))), 614407)];
  assert {:sourceloc} {:sourceloc_num 9} true;
  v11 := $$srcGrid[BV32_ADD(BV32_MUL(20, BV32_ADD(BV32_ADD(BV32_ADD(1, v0), BV32_MUL(BV32_ADD(-1, v1), 128)), BV32_MUL(BV32_MUL(v2, 128), 120))), 614408)];
  assert {:sourceloc} {:sourceloc_num 10} true;
  v12 := $$srcGrid[BV32_ADD(BV32_MUL(20, BV32_ADD(BV32_ADD(BV32_ADD(-1, v0), BV32_MUL(BV32_ADD(1, v1), 128)), BV32_MUL(BV32_MUL(v2, 128), 120))), 614409)];
  assert {:sourceloc} {:sourceloc_num 11} true;
  v13 := $$srcGrid[BV32_ADD(BV32_MUL(20, BV32_ADD(BV32_ADD(BV32_ADD(1, v0), BV32_MUL(BV32_ADD(1, v1), 128)), BV32_MUL(BV32_MUL(v2, 128), 120))), 614410)];
  assert {:sourceloc} {:sourceloc_num 12} true;
  v14 := $$srcGrid[BV32_ADD(BV32_MUL(20, BV32_ADD(BV32_ADD(v0, BV32_MUL(BV32_ADD(-1, v1), 128)), BV32_MUL(BV32_MUL(BV32_ADD(-1, v2), 128), 120))), 614411)];
  assert {:sourceloc} {:sourceloc_num 13} true;
  v15 := $$srcGrid[BV32_ADD(BV32_MUL(20, BV32_ADD(BV32_ADD(v0, BV32_MUL(BV32_ADD(-1, v1), 128)), BV32_MUL(BV32_MUL(BV32_ADD(1, v2), 128), 120))), 614412)];
  assert {:sourceloc} {:sourceloc_num 14} true;
  v16 := $$srcGrid[BV32_ADD(BV32_MUL(20, BV32_ADD(BV32_ADD(v0, BV32_MUL(BV32_ADD(1, v1), 128)), BV32_MUL(BV32_MUL(BV32_ADD(-1, v2), 128), 120))), 614413)];
  assert {:sourceloc} {:sourceloc_num 15} true;
  v17 := $$srcGrid[BV32_ADD(BV32_MUL(20, BV32_ADD(BV32_ADD(v0, BV32_MUL(BV32_ADD(1, v1), 128)), BV32_MUL(BV32_MUL(BV32_ADD(1, v2), 128), 120))), 614414)];
  assert {:sourceloc} {:sourceloc_num 16} true;
  v18 := $$srcGrid[BV32_ADD(BV32_MUL(20, BV32_ADD(BV32_ADD(BV32_ADD(-1, v0), BV32_MUL(v1, 128)), BV32_MUL(BV32_MUL(BV32_ADD(-1, v2), 128), 120))), 614415)];
  assert {:sourceloc} {:sourceloc_num 17} true;
  v19 := $$srcGrid[BV32_ADD(BV32_MUL(20, BV32_ADD(BV32_ADD(BV32_ADD(-1, v0), BV32_MUL(v1, 128)), BV32_MUL(BV32_MUL(BV32_ADD(1, v2), 128), 120))), 614416)];
  assert {:sourceloc} {:sourceloc_num 18} true;
  v20 := $$srcGrid[BV32_ADD(BV32_MUL(20, BV32_ADD(BV32_ADD(BV32_ADD(1, v0), BV32_MUL(v1, 128)), BV32_MUL(BV32_MUL(BV32_ADD(-1, v2), 128), 120))), 614417)];
  assert {:sourceloc} {:sourceloc_num 19} true;
  v21 := $$srcGrid[BV32_ADD(BV32_MUL(20, BV32_ADD(BV32_ADD(BV32_ADD(1, v0), BV32_MUL(v1, 128)), BV32_MUL(BV32_MUL(BV32_ADD(1, v2), 128), 120))), 614418)];
  assert {:sourceloc} {:sourceloc_num 20} true;
  v22 := $$srcGrid[BV32_ADD(BV32_MUL(20, BV32_ADD(BV32_ADD(v0, BV32_MUL(v1, 128)), BV32_MUL(BV32_MUL(v2, 128), 120))), 614419)];
  v23 := BV32_AND(v22, 1) != 0;
  goto $truebb, $falsebb;
$1:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  $tempWT.0, $tempEB.0, $tempET.0, $tempSB.0, $tempST.0, $tempNB.0, $tempNT.0, $tempSW.0, $tempSE.0, $tempNW.0, $tempNE.0, $tempB.0, $tempT.0, $tempW.0, $tempE.0, $tempS.0, $tempN.0, $tempC.0, $tempWB.0 := v19, v20, v21, v14, v15, v16, v17, v10, v11, v12, v13, v8, v9, v6, v7, v4, v5, v3, v18;
  goto $5;
$2:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  v24 := FADD32(FADD32(FADD32(FADD32(FADD32(FADD32(FADD32(FADD32(FADD32(FADD32(FADD32(FADD32(FADD32(FADD32(FADD32(FADD32(FADD32(FADD32(v3, v4), v5), v6), v7), v8), v9), v10), v11), v12), v13), v14), v15), v16), v17), v18), v19), v20), v21);
  assert {:sourceloc} {:sourceloc_num 23} true;
  v25 := $$srcGrid[BV32_ADD(BV32_MUL(20, BV32_ADD(BV32_ADD(v0, BV32_MUL(v1, 128)), BV32_MUL(BV32_MUL(v2, 128), 120))), 614419)];
  v26 := BV32_AND(v25, 2) != 0;
  goto $truebb0, $falsebb0;
$3:
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  $ux.0, $uy.0, $uz.0 := 1000593162, 990057071, 0;
  goto $4;
$4:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  v27 := FADD32(FMUL32(1069547520, FADD32(FMUL32($uz.0, $uz.0), FADD32(FMUL32($ux.0, $ux.0), FMUL32($uy.0, $uy.0)))), -1082130432);
  v28 := FMUL32(1073322394, v24);
  v29 := FMUL32(1029934649, v28);
  v30 := FMUL32(1021546041, v28);
  $tempWT.0, $tempEB.0, $tempET.0, $tempSB.0, $tempST.0, $tempNB.0, $tempNT.0, $tempSW.0, $tempSE.0, $tempNW.0, $tempNE.0, $tempB.0, $tempT.0, $tempW.0, $tempE.0, $tempS.0, $tempN.0, $tempC.0, $tempWB.0 := FADD32(FMUL32(-1082969292, v20), FMUL32(v30, FADD32(FMUL32(FADD32(FSUB32(-2147483648, $ux.0), $uz.0), FADD32(FMUL32(1083179008, FADD32(FSUB32(-2147483648, $ux.0), $uz.0)), 1077936128)), FSUB32(-2147483648, v27)))), FADD32(FMUL32(-1082969292, v19), FMUL32(v30, FADD32(FMUL32(FSUB32($ux.0, $uz.0), FADD32(FMUL32(1083179008, FSUB32($ux.0, $uz.0)), 1077936128)), FSUB32(-2147483648, v27)))), FADD32(FMUL32(-1082969292, v18), FMUL32(v30, FADD32(FMUL32(FADD32($ux.0, $uz.0), FADD32(FMUL32(1083179008, FADD32($ux.0, $uz.0)), 1077936128)), FSUB32(-2147483648, v27)))), FADD32(FMUL32(-1082969292, v17), FMUL32(v30, FADD32(FMUL32(FSUB32(FSUB32(-2147483648, $uy.0), $uz.0), FADD32(FMUL32(1083179008, FSUB32(FSUB32(-2147483648, $uy.0), $uz.0)), 1077936128)), FSUB32(-2147483648, v27)))), FADD32(FMUL32(-1082969292, v16), FMUL32(v30, FADD32(FMUL32(FADD32(FSUB32(-2147483648, $uy.0), $uz.0), FADD32(FMUL32(1083179008, FADD32(FSUB32(-2147483648, $uy.0), $uz.0)), 1077936128)), FSUB32(-2147483648, v27)))), FADD32(FMUL32(-1082969292, v15), FMUL32(v30, FADD32(FMUL32(FSUB32($uy.0, $uz.0), FADD32(FMUL32(1083179008, FSUB32($uy.0, $uz.0)), 1077936128)), FSUB32(-2147483648, v27)))), FADD32(FMUL32(-1082969292, v14), FMUL32(v30, FADD32(FMUL32(FADD32($uy.0, $uz.0), FADD32(FMUL32(1083179008, FADD32($uy.0, $uz.0)), 1077936128)), FSUB32(-2147483648, v27)))), FADD32(FMUL32(-1082969292, v13), FMUL32(v30, FADD32(FMUL32(FSUB32(FSUB32(-2147483648, $ux.0), $uy.0), FADD32(FMUL32(1083179008, FSUB32(FSUB32(-2147483648, $ux.0), $uy.0)), 1077936128)), FSUB32(-2147483648, v27)))), FADD32(FMUL32(-1082969292, v12), FMUL32(v30, FADD32(FMUL32(FSUB32($ux.0, $uy.0), FADD32(FMUL32(1083179008, FSUB32($ux.0, $uy.0)), 1077936128)), FSUB32(-2147483648, v27)))), FADD32(FMUL32(-1082969292, v11), FMUL32(v30, FADD32(FMUL32(FADD32(FSUB32(-2147483648, $ux.0), $uy.0), FADD32(FMUL32(1083179008, FADD32(FSUB32(-2147483648, $ux.0), $uy.0)), 1077936128)), FSUB32(-2147483648, v27)))), FADD32(FMUL32(-1082969292, v10), FMUL32(v30, FADD32(FMUL32(FADD32($ux.0, $uy.0), FADD32(FMUL32(1083179008, FADD32($ux.0, $uy.0)), 1077936128)), FSUB32(-2147483648, v27)))), FADD32(FMUL32(-1082969292, v9), FMUL32(v29, FADD32(FMUL32($uz.0, FADD32(FMUL32(1083179008, $uz.0), -1069547520)), FSUB32(-2147483648, v27)))), FADD32(FMUL32(-1082969292, v8), FMUL32(v29, FADD32(FMUL32($uz.0, FADD32(FMUL32(1083179008, $uz.0), 1077936128)), FSUB32(-2147483648, v27)))), FADD32(FMUL32(-1082969292, v7), FMUL32(v29, FADD32(FMUL32($ux.0, FADD32(FMUL32(1083179008, $ux.0), -1069547520)), FSUB32(-2147483648, v27)))), FADD32(FMUL32(-1082969292, v6), FMUL32(v29, FADD32(FMUL32($ux.0, FADD32(FMUL32(1083179008, $ux.0), 1077936128)), FSUB32(-2147483648, v27)))), FADD32(FMUL32(-1082969292, v5), FMUL32(v29, FADD32(FMUL32($uy.0, FADD32(FMUL32(1083179008, $uy.0), -1069547520)), FSUB32(-2147483648, v27)))), FADD32(FMUL32(-1082969292, v4), FMUL32(v29, FADD32(FMUL32($uy.0, FADD32(FMUL32(1083179008, $uy.0), 1077936128)), FSUB32(-2147483648, v27)))), FADD32(FMUL32(-1082969292, v3), FMUL32(FMUL32(1051372203, v28), FSUB32(-2147483648, v27))), FADD32(FMUL32(-1082969292, v21), FMUL32(v30, FADD32(FMUL32(FSUB32(FSUB32(-2147483648, $ux.0), $uz.0), FADD32(FMUL32(1083179008, FSUB32(FSUB32(-2147483648, $ux.0), $uz.0)), 1077936128)), FSUB32(-2147483648, v27))));
  goto $5;
$5:
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  assert {:sourceloc} {:sourceloc_num 27} true;
  $$dstGrid[BV32_ADD(614400, BV32_MUL(20, BV32_ADD(BV32_ADD(v0, BV32_MUL(v1, 128)), BV32_MUL(BV32_MUL(v2, 128), 120))))] := $tempC.0;
  assert {:sourceloc} {:sourceloc_num 28} true;
  $$dstGrid[BV32_ADD(BV32_MUL(20, BV32_ADD(BV32_ADD(v0, BV32_MUL(v1, 128)), BV32_MUL(BV32_MUL(v2, 128), 120))), 614401)] := $tempN.0;
  assert {:sourceloc} {:sourceloc_num 29} true;
  $$dstGrid[BV32_ADD(BV32_MUL(20, BV32_ADD(BV32_ADD(v0, BV32_MUL(v1, 128)), BV32_MUL(BV32_MUL(v2, 128), 120))), 614402)] := $tempS.0;
  assert {:sourceloc} {:sourceloc_num 30} true;
  $$dstGrid[BV32_ADD(BV32_MUL(20, BV32_ADD(BV32_ADD(v0, BV32_MUL(v1, 128)), BV32_MUL(BV32_MUL(v2, 128), 120))), 614403)] := $tempE.0;
  assert {:sourceloc} {:sourceloc_num 31} true;
  $$dstGrid[BV32_ADD(BV32_MUL(20, BV32_ADD(BV32_ADD(v0, BV32_MUL(v1, 128)), BV32_MUL(BV32_MUL(v2, 128), 120))), 614404)] := $tempW.0;
  assert {:sourceloc} {:sourceloc_num 32} true;
  $$dstGrid[BV32_ADD(BV32_MUL(20, BV32_ADD(BV32_ADD(v0, BV32_MUL(v1, 128)), BV32_MUL(BV32_MUL(v2, 128), 120))), 614405)] := $tempT.0;
  assert {:sourceloc} {:sourceloc_num 33} true;
  $$dstGrid[BV32_ADD(BV32_MUL(20, BV32_ADD(BV32_ADD(v0, BV32_MUL(v1, 128)), BV32_MUL(BV32_MUL(v2, 128), 120))), 614406)] := $tempB.0;
  assert {:sourceloc} {:sourceloc_num 34} true;
  $$dstGrid[BV32_ADD(BV32_MUL(20, BV32_ADD(BV32_ADD(v0, BV32_MUL(v1, 128)), BV32_MUL(BV32_MUL(v2, 128), 120))), 614407)] := $tempNE.0;
  assert {:sourceloc} {:sourceloc_num 35} true;
  $$dstGrid[BV32_ADD(BV32_MUL(20, BV32_ADD(BV32_ADD(v0, BV32_MUL(v1, 128)), BV32_MUL(BV32_MUL(v2, 128), 120))), 614408)] := $tempNW.0;
  assert {:sourceloc} {:sourceloc_num 36} true;
  $$dstGrid[BV32_ADD(BV32_MUL(20, BV32_ADD(BV32_ADD(v0, BV32_MUL(v1, 128)), BV32_MUL(BV32_MUL(v2, 128), 120))), 614409)] := $tempSE.0;
  assert {:sourceloc} {:sourceloc_num 37} true;
  $$dstGrid[BV32_ADD(BV32_MUL(20, BV32_ADD(BV32_ADD(v0, BV32_MUL(v1, 128)), BV32_MUL(BV32_MUL(v2, 128), 120))), 614410)] := $tempSW.0;
  assert {:sourceloc} {:sourceloc_num 38} true;
  $$dstGrid[BV32_ADD(BV32_MUL(20, BV32_ADD(BV32_ADD(v0, BV32_MUL(v1, 128)), BV32_MUL(BV32_MUL(v2, 128), 120))), 614411)] := $tempNT.0;
  assert {:sourceloc} {:sourceloc_num 39} true;
  $$dstGrid[BV32_ADD(BV32_MUL(20, BV32_ADD(BV32_ADD(v0, BV32_MUL(v1, 128)), BV32_MUL(BV32_MUL(v2, 128), 120))), 614412)] := $tempNB.0;
  assert {:sourceloc} {:sourceloc_num 40} true;
  $$dstGrid[BV32_ADD(BV32_MUL(20, BV32_ADD(BV32_ADD(v0, BV32_MUL(v1, 128)), BV32_MUL(BV32_MUL(v2, 128), 120))), 614413)] := $tempST.0;
  assert {:sourceloc} {:sourceloc_num 41} true;
  $$dstGrid[BV32_ADD(BV32_MUL(20, BV32_ADD(BV32_ADD(v0, BV32_MUL(v1, 128)), BV32_MUL(BV32_MUL(v2, 128), 120))), 614414)] := $tempSB.0;
  assert {:sourceloc} {:sourceloc_num 42} true;
  $$dstGrid[BV32_ADD(BV32_MUL(20, BV32_ADD(BV32_ADD(v0, BV32_MUL(v1, 128)), BV32_MUL(BV32_MUL(v2, 128), 120))), 614415)] := $tempET.0;
  assert {:sourceloc} {:sourceloc_num 43} true;
  $$dstGrid[BV32_ADD(BV32_MUL(20, BV32_ADD(BV32_ADD(v0, BV32_MUL(v1, 128)), BV32_MUL(BV32_MUL(v2, 128), 120))), 614416)] := $tempEB.0;
  assert {:sourceloc} {:sourceloc_num 44} true;
  $$dstGrid[BV32_ADD(BV32_MUL(20, BV32_ADD(BV32_ADD(v0, BV32_MUL(v1, 128)), BV32_MUL(BV32_MUL(v2, 128), 120))), 614417)] := $tempWT.0;
  assert {:sourceloc} {:sourceloc_num 45} true;
  $$dstGrid[BV32_ADD(BV32_MUL(20, BV32_ADD(BV32_ADD(v0, BV32_MUL(v1, 128)), BV32_MUL(BV32_MUL(v2, 128), 120))), 614418)] := $tempWB.0;
  return;
$truebb:
  assume {:partition} v23;
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  goto $1;
$falsebb:
  assume {:partition} !v23;
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  goto $2;
$truebb0:
  assume {:partition} v26;
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  goto $3;
$falsebb0:
  assume {:partition} !v26;
  assert {:block_sourceloc} {:sourceloc_num 49} true;
  $ux.0, $uy.0, $uz.0 := FDIV32(FSUB32(FSUB32(FADD32(FADD32(FSUB32(FADD32(FSUB32(FADD32(FSUB32(v6, v7), v10), v11), v12), v13), v18), v19), v20), v21), v24), FDIV32(FSUB32(FSUB32(FADD32(FADD32(FSUB32(FSUB32(FADD32(FADD32(FSUB32(v4, v5), v10), v11), v12), v13), v14), v15), v16), v17), v24), FDIV32(FSUB32(FADD32(FSUB32(FADD32(FSUB32(FADD32(FSUB32(FADD32(FSUB32(v8, v9), v14), v15), v16), v17), v18), v19), v20), v21), v24);
  goto $4;
}
axiom (if group_size_x == 120 then 1 else 0) != 0;
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_x == 120 then 1 else 0) != 0;
axiom (if num_groups_y == 150 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
