type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "x"} {:global} $$x : [int]int;
axiom {:array_info "$$x"} {:global} {:elem_width 32} {:source_name "x"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$x : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$x : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$x : bool;

var {:source_name "y"} {:global} $$y : [int]int;
axiom {:array_info "$$y"} {:global} {:elem_width 32} {:source_name "y"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$y : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$y : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$y : bool;

var {:source_name "z"} {:global} $$z : [int]int;
axiom {:array_info "$$z"} {:global} {:elem_width 32} {:source_name "z"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$z : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$z : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$z : bool;

var {:source_name "Qr"} {:global} $$Qr : [int]int;
axiom {:array_info "$$Qr"} {:global} {:elem_width 32} {:source_name "Qr"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$Qr : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$Qr : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$Qr : bool;

var {:source_name "Qi"} {:global} $$Qi : [int]int;
axiom {:array_info "$$Qi"} {:global} {:elem_width 32} {:source_name "Qi"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$Qi : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$Qi : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$Qi : bool;

var {:source_name "ck"} {:global} $$ck : [int]int;
axiom {:array_info "$$ck"} {:global} {:elem_width 32} {:source_name "ck"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$ck : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$ck : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$ck : bool;

var {:source_name "sX"} $$sX : [int]int;
axiom {:array_info "$$sX"} {:elem_width 32} {:source_name "sX"} {:source_elem_width 32} {:source_dimensions "4"} true;

var {:source_name "sY"} $$sY : [int]int;
axiom {:array_info "$$sY"} {:elem_width 32} {:source_name "sY"} {:source_elem_width 32} {:source_dimensions "4"} true;

var {:source_name "sZ"} $$sZ : [int]int;
axiom {:array_info "$$sZ"} {:elem_width 32} {:source_name "sZ"} {:source_elem_width 32} {:source_dimensions "4"} true;

var {:source_name "sQr"} $$sQr : [int]int;
axiom {:array_info "$$sQr"} {:elem_width 32} {:source_name "sQr"} {:source_elem_width 32} {:source_dimensions "4"} true;

var {:source_name "sQi"} $$sQi : [int]int;
axiom {:array_info "$$sQi"} {:elem_width 32} {:source_name "sQi"} {:source_elem_width 32} {:source_dimensions "4"} true;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function FADD32(int, int) : int;
function FCOS32(int) : int;
function FMUL32(int, int) : int;
function FSIN32(int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SLT(x : int, y : int) : bool {
  x < y
}
procedure {:source_name "ComputeQ_GPU"} {:kernel} $ComputeQ_GPU($numK:int, $kGlobalIndex:int)
{
  var $tx.0:int;
  var $kIndex.0:int;
  var $.0:int;
  var $0:int;
  var $tx1.0:int;
  var $tx2.0:int;
  var v0:bool;
  var v1:int;
  var v2:int;
  var v3:int;
  var v4:int;
  var v5:int;
  var v6:int;
  var v7:bool;
  var v8:bool;
  var v9:int;
  var v10:int;
  var v11:int;
  var v12:int;
  var v13:bool;
  var v14:int;
  var v15:int;
  var v16:int;
  var v17:int;
  var v18:int;
  var v19:int;
  var v20:bool;
  var v21:int;
  var v22:int;
  var v23:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  $tx.0 := 0;
  goto $1;
$1:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  v0 := BV32_SLT($tx.0, 4);
  goto $truebb, $falsebb;
$2:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v1 := BV32_ADD(BV32_ADD(BV32_MUL(group_id_x, 256), BV32_MUL(4, local_id_x)), $tx.0);
  assert {:sourceloc} {:sourceloc_num 3} true;
  v2 := $$x[v1];
  assert {:sourceloc} {:sourceloc_num 4} true;
  $$sX[$tx.0] := v2;
  assert {:sourceloc} {:sourceloc_num 5} true;
  v3 := $$y[v1];
  assert {:sourceloc} {:sourceloc_num 6} true;
  $$sY[$tx.0] := v3;
  assert {:sourceloc} {:sourceloc_num 7} true;
  v4 := $$z[v1];
  assert {:sourceloc} {:sourceloc_num 8} true;
  $$sZ[$tx.0] := v4;
  assert {:sourceloc} {:sourceloc_num 9} true;
  v5 := $$Qr[v1];
  assert {:sourceloc} {:sourceloc_num 10} true;
  $$sQr[$tx.0] := v5;
  assert {:sourceloc} {:sourceloc_num 11} true;
  v6 := $$Qi[v1];
  assert {:sourceloc} {:sourceloc_num 12} true;
  $$sQi[$tx.0] := v6;
  goto $3;
$3:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  $tx.0 := BV32_ADD($tx.0, 1);
  goto $1;
$4:
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  $kIndex.0, $.0 := 0, $kGlobalIndex;
  goto $5;
$5:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  v7 := BV32_SLT($kIndex.0, 1024);
  goto $truebb0, $falsebb0;
$6:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  $0 := (if BV32_SLT($.0, $numK) then 1 else 0);
  goto $7;
$7:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  v8 := $0 == 1;
  goto $truebb1, $falsebb1;
$8:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  assert {:sourceloc} {:sourceloc_num 19} true;
  v9 := $$ck[BV32_MUL($kIndex.0, 4)];
  assert {:sourceloc} {:sourceloc_num 20} true;
  v10 := $$ck[BV32_ADD(BV32_MUL($kIndex.0, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 21} true;
  v11 := $$ck[BV32_ADD(BV32_MUL($kIndex.0, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 22} true;
  v12 := $$ck[BV32_ADD(BV32_MUL($kIndex.0, 4), 3)];
  $tx1.0 := 0;
  goto $9;
$9:
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  v13 := BV32_SLT($tx1.0, 4);
  goto $truebb2, $falsebb2;
$10:
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  assert {:sourceloc} {:sourceloc_num 25} true;
  v14 := $$sX[$tx1.0];
  assert {:sourceloc} {:sourceloc_num 26} true;
  v15 := $$sY[$tx1.0];
  assert {:sourceloc} {:sourceloc_num 27} true;
  v16 := $$sZ[$tx1.0];
  v17 := FMUL32(1086918619, FADD32(FMUL32(v11, v16), FADD32(FMUL32(v9, v14), FMUL32(v10, v15))));
  assert {:sourceloc} {:sourceloc_num 28} true;
  v18 := $$sQr[$tx1.0];
  assert {:sourceloc} {:sourceloc_num 29} true;
  $$sQr[$tx1.0] := FADD32(v18, FMUL32(v12, FCOS32(v17)));
  assert {:sourceloc} {:sourceloc_num 30} true;
  v19 := $$sQi[$tx1.0];
  assert {:sourceloc} {:sourceloc_num 31} true;
  $$sQi[$tx1.0] := FADD32(v19, FMUL32(v12, FSIN32(v17)));
  goto $11;
$11:
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  $tx1.0 := BV32_ADD($tx1.0, 1);
  goto $9;
$12:
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  goto $13;
$13:
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  $kIndex.0, $.0 := BV32_ADD($kIndex.0, 1), BV32_ADD($.0, 1);
  goto $5;
$14:
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  $tx2.0 := 0;
  goto $15;
$15:
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  v20 := BV32_SLT($tx2.0, 4);
  goto $truebb3, $falsebb3;
$16:
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  v21 := BV32_ADD(BV32_ADD(BV32_MUL(group_id_x, 256), BV32_MUL(4, local_id_x)), $tx2.0);
  assert {:sourceloc} {:sourceloc_num 38} true;
  v22 := $$sQr[$tx2.0];
  assert {:sourceloc} {:sourceloc_num 39} true;
  $$Qr[v21] := v22;
  assert {:sourceloc} {:sourceloc_num 40} true;
  v23 := $$sQi[$tx2.0];
  assert {:sourceloc} {:sourceloc_num 41} true;
  $$Qi[v21] := v23;
  goto $17;
$17:
  assert {:block_sourceloc} {:sourceloc_num 42} true;
  $tx2.0 := BV32_ADD($tx2.0, 1);
  goto $15;
$18:
  assert {:block_sourceloc} {:sourceloc_num 43} true;
  return;
$truebb:
  assume {:partition} v0;
  assert {:block_sourceloc} {:sourceloc_num 44} true;
  goto $2;
$falsebb:
  assume {:partition} !v0;
  assert {:block_sourceloc} {:sourceloc_num 45} true;
  goto $4;
$truebb0:
  assume {:partition} v7;
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  goto $6;
$falsebb0:
  assume {:partition} !v7;
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  $0 := 0;
  goto $7;
$truebb1:
  assume {:partition} v8;
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  goto $8;
$falsebb1:
  assume {:partition} !v8;
  assert {:block_sourceloc} {:sourceloc_num 49} true;
  goto $14;
$truebb2:
  assume {:partition} v13;
  assert {:block_sourceloc} {:sourceloc_num 50} true;
  goto $10;
$falsebb2:
  assume {:partition} !v13;
  assert {:block_sourceloc} {:sourceloc_num 51} true;
  goto $12;
$truebb3:
  assume {:partition} v20;
  assert {:block_sourceloc} {:sourceloc_num 52} true;
  goto $16;
$falsebb3:
  assume {:partition} !v20;
  assert {:block_sourceloc} {:sourceloc_num 53} true;
  goto $18;
}
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 64 then 1 else 0) != 0;
axiom (if num_groups_x == 128 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
