type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "A0"} {:global} $$A0 : [int]int;
axiom {:array_info "$$A0"} {:global} {:elem_width 32} {:source_name "A0"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$A0 : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$A0 : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$A0 : bool;

var {:source_name "Anext"} {:global} $$Anext : [int]int;
axiom {:array_info "$$Anext"} {:global} {:elem_width 32} {:source_name "Anext"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$Anext : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$Anext : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$Anext : bool;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_id_y} group_id_y : int;
const {:group_id_z} group_id_z : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:local_id_y} local_id_y : int;
const {:local_id_z} local_id_z : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function FADD32(int, int) : int;
function FMUL32(int, int) : int;
function FSUB32(int, int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SLT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV32_SUB(x : int, y : int) : int {
  x - y
}
procedure {:source_name "naive_kernel"} {:kernel} $naive_kernel($c0:int, $c1:int, $nx:int, $ny:int, $nz:int)
requires {:sourceloc_num 0} (if $nx == 512 then 1 else 0) != 0;
requires {:sourceloc_num 1} (if $ny == 512 then 1 else 0) != 0;
{
  var v0:int;
  var v1:int;
  var v2:int;
  var v3:int;
  var v4:int;
  var v5:int;
  var v6:bool;
  var v7:int;
  var v8:int;
  var v9:int;
  var v10:int;
  var v11:int;
  var v12:int;
  var v13:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  v1 := BV32_ADD(v0, 1);
  v2 := BV32_ADD(BV32_MUL(group_id_y, group_size_y), local_id_y);
  v3 := BV32_ADD(v2, 1);
  v4 := BV32_ADD(BV32_MUL(group_id_z, group_size_z), local_id_z);
  v5 := BV32_ADD(v4, 1);
  v6 := BV32_SLT(v1, BV32_SUB($nx, 1));
  goto $truebb, $falsebb;
$1:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  assert {:sourceloc} {:sourceloc_num 4} true;
  v7 := $$A0[BV32_ADD(v1, BV32_MUL($nx, BV32_ADD(v3, BV32_MUL($ny, BV32_ADD(v4, 2)))))];
  assert {:sourceloc} {:sourceloc_num 5} true;
  v8 := $$A0[BV32_ADD(v1, BV32_MUL($nx, BV32_ADD(v3, BV32_MUL($ny, BV32_SUB(v5, 1)))))];
  assert {:sourceloc} {:sourceloc_num 6} true;
  v9 := $$A0[BV32_ADD(v1, BV32_MUL($nx, BV32_ADD(BV32_ADD(v2, 2), BV32_MUL($ny, v5))))];
  assert {:sourceloc} {:sourceloc_num 7} true;
  v10 := $$A0[BV32_ADD(v1, BV32_MUL($nx, BV32_ADD(BV32_SUB(v3, 1), BV32_MUL($ny, v5))))];
  assert {:sourceloc} {:sourceloc_num 8} true;
  v11 := $$A0[BV32_ADD(BV32_ADD(v0, 2), BV32_MUL($nx, BV32_ADD(v3, BV32_MUL($ny, v5))))];
  assert {:sourceloc} {:sourceloc_num 9} true;
  v12 := $$A0[BV32_ADD(BV32_SUB(v1, 1), BV32_MUL($nx, BV32_ADD(v3, BV32_MUL($ny, v5))))];
  assert {:sourceloc} {:sourceloc_num 10} true;
  v13 := $$A0[BV32_ADD(v1, BV32_MUL($nx, BV32_ADD(v3, BV32_MUL($ny, v5))))];
  assert {:sourceloc} {:sourceloc_num 11} true;
  $$Anext[BV32_ADD(v1, BV32_MUL($nx, BV32_ADD(v3, BV32_MUL($ny, v5))))] := FADD32(FMUL32($c1, FADD32(FADD32(FADD32(FADD32(FADD32(v7, v8), v9), v10), v11), v12)), FSUB32(-2147483648, FMUL32(v13, $c0)));
  goto $2;
$2:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  return;
$truebb:
  assume {:partition} v6;
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  goto $1;
$falsebb:
  assume {:partition} !v6;
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  goto $2;
}
axiom (if group_size_x == 256 then 1 else 0) != 0;
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_x == 2 then 1 else 0) != 0;
axiom (if num_groups_y == 510 then 1 else 0) != 0;
axiom (if num_groups_z == 62 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
