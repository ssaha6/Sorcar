type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "keys"} {:global} $$keys : [int]int;
axiom {:array_info "$$keys"} {:global} {:elem_width 32} {:source_name "keys"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$keys : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$keys : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$keys : bool;

var {:source_name "values"} {:global} $$values : [int]int;
axiom {:array_info "$$values"} {:global} {:elem_width 32} {:source_name "values"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$values : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$values : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$values : bool;

var {:source_name "histo"} {:global} $$histo : [int]int;
axiom {:array_info "$$histo"} {:global} {:elem_width 32} {:source_name "histo"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$histo : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$histo : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$histo : bool;

var {:source_name "histo_s"} {:group_shared} $$splitSort.histo_s : [int]int;
axiom {:array_info "$$splitSort.histo_s"} {:group_shared} {:elem_width 32} {:source_name "histo_s"} {:source_elem_width 32} {:source_dimensions "16"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$splitSort.histo_s : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$splitSort.histo_s : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$splitSort.histo_s : bool;

var {:source_name "flags"} {:group_shared} $$splitSort.flags : [int]int;
axiom {:array_info "$$splitSort.flags"} {:group_shared} {:elem_width 32} {:source_name "flags"} {:source_elem_width 32} {:source_dimensions "1105"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$splitSort.flags : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$splitSort.flags : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$splitSort.flags : bool;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function  BV32_LSHR(int, int) : int;
function BV_CONCAT(int, int) : int;
function BV_EXTRACT(int, int, int) : int;
function {:inline true} BV16_ZEXT32(x : int) : int {
  x
}
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_AND(x : int, y : int) : int {
  if x == y then x else (if x == 0 || y == 0 then 0 else BV32_AND_UF(x, y))
}
function BV32_AND_UF(int, int) : int;
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_SHL(x : int, y : int) : int {
  if x >= 0 && y == 1 then x*2 else BV32_SHL_UF(x,y)
}
function BV32_SHL_UF(int, int) : int;
function {:inline true} BV32_SLT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV32_SUB(x : int, y : int) : int {
  x - y
}
function {:inline true} BV32_UGT(x : int, y : int) : bool {
  x > y
}
function {:inline true} BV32_ULE(x : int, y : int) : bool {
  x <= y
}
function {:inline true} BV32_ULT(x : int, y : int) : bool {
  x < y
}
procedure {:source_name "splitSort"} {:kernel} $splitSort($numElems:int, $iter:int)
{
  var $lkey.0:int;
  var $lvalue.0:int;
  var $index.0:int;
  var $i.0:int;
  var $d.i.0:int;
  var $stride.i.0:int;
  var $d1.i.0:int;
  var $stride.i.1:int;
  var $0:int;
  var $1:int;
  var $2:int;
  var $3:int;
  var v0:int;
  var v1:int;
  var v2:bool;
  var v105:int;
  var v43:int;
  var v3:int;
  var v4:int;
  var v5:int;
  var v6:int;
  var v7:int;
  var v8:int;
  var v9:int;
  var v10:int;
  var v11:bool;
  var v12:int;
  var v13:int;
  var v14:int;
  var v15:int;
  var v16:bool;
  var v17:int;
  var v18:int;
  var v19:int;
  var v20:int;
  var v21:int;
  var v22:int;
  var v23:int;
  var v24:int;
  var v25:int;
  var v26:int;
  var v27:int;
  var v28:int;
  var v29:int;
  var v30:int;
  var v31:int;
  var v32:int;
  var v33:int;
  var v34:int;
  var v35:int;
  var v36:bool;
  var v37:bool;
  var v39:int;
  var v38:int;
  var v40:int;
  var v41:int;
  var v42:int;
  var v44:int;
  var v45:bool;
  var v46:int;
  var v47:int;
  var v48:int;
  var v49:int;
  var v50:int;
  var v51:bool;
  var v52:int;
  var v53:bool;
  var v55:int;
  var v54:int;
  var v56:int;
  var v57:int;
  var v58:int;
  var v59:int;
  var v60:int;
  var v61:int;
  var v62:int;
  var v63:int;
  var v64:int;
  var v65:int;
  var v66:int;
  var v67:int;
  var v68:int;
  var v69:int;
  var v70:int;
  var v71:int;
  var v72:int;
  var v73:int;
  var v74:int;
  var v75:int;
  var v76:int;
  var v77:int;
  var v78:int;
  var v79:int;
  var v80:int;
  var v81:int;
  var v85:int;
  var v89:int;
  var v82:int;
  var v83:int;
  var v84:int;
  var v86:int;
  var v87:int;
  var v88:int;
  var v90:int;
  var v91:int;
  var v92:int;
  var v93:int;
  var v94:int;
  var v95:int;
  var v96:bool;
  var v97:int;
  var v98:bool;
  var v99:int;
  var v100:bool;
  var v101:bool;
  var v102:bool;
  var v103:bool;
  var v104:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  v0 := local_id_x;
  v1 := BV32_ADD(BV32_MUL(BV32_MUL(group_id_x, 4), 256), BV32_MUL(4, local_id_x));
  v2 := BV32_ULT(v1, $numElems);
  goto $truebb, $falsebb;
$1:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  assert {:sourceloc} {:sourceloc_num 2} true;
  v3 := $$keys[v1];
  assert {:sourceloc} {:sourceloc_num 3} true;
  v4 := $$keys[BV32_ADD(v1, 1)];
  assert {:sourceloc} {:sourceloc_num 4} true;
  v5 := $$keys[BV32_ADD(v1, 2)];
  assert {:sourceloc} {:sourceloc_num 5} true;
  v6 := $$keys[BV32_ADD(v1, 3)];
  assert {:sourceloc} {:sourceloc_num 6} true;
  v7 := $$values[v1];
  assert {:sourceloc} {:sourceloc_num 7} true;
  v8 := $$values[BV32_ADD(v1, 1)];
  assert {:sourceloc} {:sourceloc_num 8} true;
  v9 := $$values[BV32_ADD(v1, 2)];
  assert {:sourceloc} {:sourceloc_num 9} true;
  v10 := $$values[BV32_ADD(v1, 3)];
  $lkey.0, $lvalue.0 := BV_CONCAT(BV_CONCAT(BV_CONCAT(v6, v5), v4), v3), BV_CONCAT(BV_CONCAT(BV_CONCAT(v10, v9), v8), v7);
  goto $2;
$2:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  v11 := BV32_ULT(v0, 16);
  goto $truebb0, $falsebb0;
$3:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  assert {:sourceloc} {:sourceloc_num 12} true;
  $$splitSort.histo_s[v0] := 0;
  goto $4;
$4:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  call {:sourceloc_num 14} $bugle_barrier(-1, 0);
  assert {:sourceloc} {:sourceloc_num 15} true;
  call {:atomic} {:atomic_function "__bugle_atomic_add_local_uint"} {:arg1 1} {:parts 1} {:part 1} v12, $$splitSort.histo_s := _ATOMIC_OP32($$splitSort.histo_s, BV32_SDIV(BV32_MUL(BV32_LSHR(BV32_AND(BV_EXTRACT($lkey.0, 32, 0), BV32_SUB(BV32_SHL(1, BV32_AND(BV32_MUL(4, BV32_ADD($iter, 1)), 31)), 1)), BV32_AND(BV32_MUL(4, $iter), 31)), 4), 4));
  assert {:sourceloc} {:sourceloc_num 16} true;
  call {:atomic} {:atomic_function "__bugle_atomic_add_local_uint"} {:arg1 1} {:parts 1} {:part 1} v13, $$splitSort.histo_s := _ATOMIC_OP32($$splitSort.histo_s, BV32_SDIV(BV32_MUL(BV32_LSHR(BV32_AND(BV_EXTRACT($lkey.0, 64, 32), BV32_SUB(BV32_SHL(1, BV32_AND(BV32_MUL(4, BV32_ADD($iter, 1)), 31)), 1)), BV32_AND(BV32_MUL(4, $iter), 31)), 4), 4));
  assert {:sourceloc} {:sourceloc_num 17} true;
  call {:atomic} {:atomic_function "__bugle_atomic_add_local_uint"} {:arg1 1} {:parts 1} {:part 1} v14, $$splitSort.histo_s := _ATOMIC_OP32($$splitSort.histo_s, BV32_SDIV(BV32_MUL(BV32_LSHR(BV32_AND(BV_EXTRACT($lkey.0, 96, 64), BV32_SUB(BV32_SHL(1, BV32_AND(BV32_MUL(4, BV32_ADD($iter, 1)), 31)), 1)), BV32_AND(BV32_MUL(4, $iter), 31)), 4), 4));
  assert {:sourceloc} {:sourceloc_num 18} true;
  call {:atomic} {:atomic_function "__bugle_atomic_add_local_uint"} {:arg1 1} {:parts 1} {:part 1} v15, $$splitSort.histo_s := _ATOMIC_OP32($$splitSort.histo_s, BV32_SDIV(BV32_MUL(BV32_LSHR(BV32_AND(BV_EXTRACT($lkey.0, 128, 96), BV32_SUB(BV32_SHL(1, BV32_AND(BV32_MUL(4, BV32_ADD($iter, 1)), 31)), 1)), BV32_AND(BV32_MUL(4, $iter), 31)), 4), 4));
  $index.0, $i.0 := BV_CONCAT(BV_CONCAT(BV_CONCAT(BV32_ADD(BV32_MUL(4, v0), 3), BV32_ADD(BV32_MUL(4, v0), 2)), BV32_ADD(BV32_MUL(4, v0), 1)), BV32_MUL(4, v0)), BV32_MUL(4, $iter);
  goto $5;
$5:
  assert {:block_sourceloc} {:sourceloc_num 19} true;
  v16 := BV32_SLT($i.0, BV32_MUL(4, BV32_ADD($iter, 1)));
  goto $truebb1, $falsebb1;
$6:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  v17 := BV32_AND(BV32_LSHR(BV_EXTRACT($lkey.0, 32, 0), BV32_AND($i.0, 31)), 1);
  v18 := BV32_AND(BV32_LSHR(BV_EXTRACT($lkey.0, 64, 32), BV32_AND($i.0, 31)), 1);
  v19 := BV32_AND(BV32_LSHR(BV_EXTRACT($lkey.0, 96, 64), BV32_AND($i.0, 31)), 1);
  v20 := BV32_AND(BV32_LSHR(BV_EXTRACT($lkey.0, 128, 96), BV32_AND($i.0, 31)), 1);
  v21 := BV32_ADD(4, BV_EXTRACT($index.0, 32, 0));
  assert {:sourceloc} {:sourceloc_num 21} true;
  $$splitSort.flags[BV32_ADD(BV_EXTRACT($index.0, 32, 0), BV32_LSHR(BV32_LSHR(BV_EXTRACT($index.0, 32, 0), BV32_AND((if BV32_ULT(v21, 24) then v21 else 24), 31)), 8))] := BV32_SHL(1, BV32_AND(BV32_MUL(16, v17), 31));
  v22 := BV32_ADD(4, BV_EXTRACT($index.0, 64, 32));
  assert {:sourceloc} {:sourceloc_num 22} true;
  $$splitSort.flags[BV32_ADD(BV_EXTRACT($index.0, 64, 32), BV32_LSHR(BV32_LSHR(BV_EXTRACT($index.0, 64, 32), BV32_AND((if BV32_ULT(v22, 24) then v22 else 24), 31)), 8))] := BV32_SHL(1, BV32_AND(BV32_MUL(16, v18), 31));
  v23 := BV32_ADD(4, BV_EXTRACT($index.0, 96, 64));
  assert {:sourceloc} {:sourceloc_num 23} true;
  $$splitSort.flags[BV32_ADD(BV_EXTRACT($index.0, 96, 64), BV32_LSHR(BV32_LSHR(BV_EXTRACT($index.0, 96, 64), BV32_AND((if BV32_ULT(v23, 24) then v23 else 24), 31)), 8))] := BV32_SHL(1, BV32_AND(BV32_MUL(16, v19), 31));
  v24 := BV32_ADD(4, BV_EXTRACT($index.0, 128, 96));
  assert {:sourceloc} {:sourceloc_num 24} true;
  $$splitSort.flags[BV32_ADD(BV_EXTRACT($index.0, 128, 96), BV32_LSHR(BV32_LSHR(BV_EXTRACT($index.0, 128, 96), BV32_AND((if BV32_ULT(v24, 24) then v24 else 24), 31)), 8))] := BV32_SHL(1, BV32_AND(BV32_MUL(16, v20), 31));
  v25 := local_id_x;
  call {:sourceloc_num 25} $bugle_barrier(-1, 0);
  v26 := BV32_ADD(4, BV32_MUL(2, v25));
  assert {:sourceloc} {:sourceloc_num 26} true;
  v27 := $$splitSort.flags[BV32_ADD(BV32_MUL(2, v25), BV32_LSHR(BV32_LSHR(BV32_MUL(2, v25), BV32_AND((if BV32_ULT(v26, 24) then v26 else 24), 31)), 8))];
  v28 := BV32_ADD(BV32_MUL(2, v25), 5);
  v29 := BV32_ADD(BV32_ADD(BV32_MUL(2, v25), 1), BV32_LSHR(BV32_LSHR(BV32_ADD(BV32_MUL(2, v25), 1), BV32_AND((if BV32_ULT(v28, 24) then v28 else 24), 31)), 8));
  assert {:sourceloc} {:sourceloc_num 27} true;
  v30 := $$splitSort.flags[v29];
  assert {:sourceloc} {:sourceloc_num 28} true;
  $$splitSort.flags[v29] := BV32_ADD(v30, v27);
  v31 := BV32_ADD(4, BV32_MUL(2, BV32_ADD(group_size_x, v25)));
  assert {:sourceloc} {:sourceloc_num 29} true;
  v32 := $$splitSort.flags[BV32_ADD(BV32_MUL(2, BV32_ADD(group_size_x, v25)), BV32_LSHR(BV32_LSHR(BV32_MUL(2, BV32_ADD(group_size_x, v25)), BV32_AND((if BV32_ULT(v31, 24) then v31 else 24), 31)), 8))];
  v33 := BV32_ADD(BV32_MUL(2, BV32_ADD(group_size_x, v25)), 5);
  v34 := BV32_ADD(BV32_ADD(BV32_MUL(2, BV32_ADD(group_size_x, v25)), 1), BV32_LSHR(BV32_LSHR(BV32_ADD(BV32_MUL(2, BV32_ADD(group_size_x, v25)), 1), BV32_AND((if BV32_ULT(v33, 24) then v33 else 24), 31)), 8));
  assert {:sourceloc} {:sourceloc_num 30} true;
  v35 := $$splitSort.flags[v34];
  assert {:sourceloc} {:sourceloc_num 31} true;
  $$splitSort.flags[v34] := BV32_ADD(v35, v32);
  $d.i.0, $stride.i.0 := group_size_x, 2;
  goto $7;
$7:
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  v36 := BV32_UGT($d.i.0, 0);
  goto $truebb2, $falsebb2;
$8:
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  call {:sourceloc_num 34} $bugle_barrier(-1, 0);
  v37 := BV32_ULT(v25, $d.i.0);
  goto $truebb3, $falsebb3;
$9:
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  v38 := BV32_SUB(BV32_ADD(BV32_MUL(BV32_MUL(2, $stride.i.0), v25), $stride.i.0), 1);
  v39 := BV32_ADD(v38, $stride.i.0);
  v40 := BV32_ADD(4, v38);
  v41 := BV32_ADD(4, v39);
  v42 := BV32_ADD(v39, BV32_LSHR(BV32_LSHR(v39, BV32_AND((if BV32_ULT(v41, 24) then v41 else 24), 31)), 8));
  assert {:sourceloc} {:sourceloc_num 36} true;
  v43 := $$splitSort.flags[BV32_ADD(v38, BV32_LSHR(BV32_LSHR(v38, BV32_AND((if BV32_ULT(v40, 24) then v40 else 24), 31)), 8))];
  assert {:sourceloc} {:sourceloc_num 37} true;
  v44 := $$splitSort.flags[v42];
  assert {:sourceloc} {:sourceloc_num 38} true;
  $$splitSort.flags[v42] := BV32_ADD(v44, v43);
  goto $10;
$10:
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  $d.i.0, $stride.i.0 := BV32_LSHR($d.i.0, 1), BV32_MUL($stride.i.0, 2);
  goto $7;
$11:
  assert {:block_sourceloc} {:sourceloc_num 40} true;
  v45 := v25 == 0;
  goto $truebb4, $falsebb4;
$12:
  assert {:block_sourceloc} {:sourceloc_num 41} true;
  v46 := BV32_SUB(BV32_MUL(4, group_size_x), 1);
  v47 := BV32_ADD(4, v46);
  v48 := BV32_ADD(v46, BV32_LSHR(BV32_LSHR(v46, BV32_AND((if BV32_ULT(v47, 24) then v47 else 24), 31)), 8));
  assert {:sourceloc} {:sourceloc_num 42} true;
  v49 := $$splitSort.flags[v48];
  v50 := BV32_ADD(4, BV32_MUL(4, group_size_x));
  assert {:sourceloc} {:sourceloc_num 43} true;
  $$splitSort.flags[BV32_ADD(BV32_MUL(4, group_size_x), BV32_LSHR(BV32_LSHR(BV32_MUL(4, group_size_x), BV32_AND((if BV32_ULT(v50, 24) then v50 else 24), 31)), 8))] := v49;
  assert {:sourceloc} {:sourceloc_num 44} true;
  $$splitSort.flags[v48] := 0;
  goto $13;
$13:
  assert {:block_sourceloc} {:sourceloc_num 45} true;
  $d1.i.0, $stride.i.1 := 1, $stride.i.0;
  goto $14;
$14:
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  v51 := BV32_ULE($d1.i.0, group_size_x);
  goto $truebb5, $falsebb5;
$15:
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  v52 := BV32_LSHR($stride.i.1, 1);
  call {:sourceloc_num 48} $bugle_barrier(-1, 0);
  v53 := BV32_ULT(v25, $d1.i.0);
  goto $truebb6, $falsebb6;
$16:
  assert {:block_sourceloc} {:sourceloc_num 49} true;
  v54 := BV32_SUB(BV32_ADD(BV32_MUL(BV32_MUL(2, v52), v25), v52), 1);
  v55 := BV32_ADD(v54, v52);
  v56 := BV32_ADD(4, v54);
  v57 := BV32_ADD(v54, BV32_LSHR(BV32_LSHR(v54, BV32_AND((if BV32_ULT(v56, 24) then v56 else 24), 31)), 8));
  v58 := BV32_ADD(4, v55);
  v59 := BV32_ADD(v55, BV32_LSHR(BV32_LSHR(v55, BV32_AND((if BV32_ULT(v58, 24) then v58 else 24), 31)), 8));
  assert {:sourceloc} {:sourceloc_num 50} true;
  v60 := $$splitSort.flags[v57];
  assert {:sourceloc} {:sourceloc_num 51} true;
  v61 := $$splitSort.flags[v59];
  assert {:sourceloc} {:sourceloc_num 52} true;
  $$splitSort.flags[v57] := v61;
  assert {:sourceloc} {:sourceloc_num 53} true;
  v62 := $$splitSort.flags[v59];
  assert {:sourceloc} {:sourceloc_num 54} true;
  $$splitSort.flags[v59] := BV32_ADD(v62, v60);
  goto $17;
$17:
  assert {:block_sourceloc} {:sourceloc_num 55} true;
  $d1.i.0, $stride.i.1 := BV32_MUL($d1.i.0, 2), v52;
  goto $14;
$scan.exit:
  assert {:block_sourceloc} {:sourceloc_num 56} true;
  call {:sourceloc_num 57} $bugle_barrier(-1, 0);
  v63 := BV32_ADD(4, BV32_MUL(2, v25));
  assert {:sourceloc} {:sourceloc_num 58} true;
  v64 := $$splitSort.flags[BV32_ADD(BV32_MUL(2, v25), BV32_LSHR(BV32_LSHR(BV32_MUL(2, v25), BV32_AND((if BV32_ULT(v63, 24) then v63 else 24), 31)), 8))];
  v65 := BV32_ADD(BV32_MUL(2, v25), 5);
  assert {:sourceloc} {:sourceloc_num 59} true;
  v66 := $$splitSort.flags[BV32_ADD(BV32_ADD(BV32_MUL(2, v25), 1), BV32_LSHR(BV32_LSHR(BV32_ADD(BV32_MUL(2, v25), 1), BV32_AND((if BV32_ULT(v65, 24) then v65 else 24), 31)), 8))];
  v67 := BV32_ADD(4, BV32_MUL(2, v25));
  assert {:sourceloc} {:sourceloc_num 60} true;
  $$splitSort.flags[BV32_ADD(BV32_MUL(2, v25), BV32_LSHR(BV32_LSHR(BV32_MUL(2, v25), BV32_AND((if BV32_ULT(v67, 24) then v67 else 24), 31)), 8))] := v66;
  v68 := BV32_ADD(BV32_MUL(2, v25), 5);
  v69 := BV32_ADD(BV32_ADD(BV32_MUL(2, v25), 1), BV32_LSHR(BV32_LSHR(BV32_ADD(BV32_MUL(2, v25), 1), BV32_AND((if BV32_ULT(v68, 24) then v68 else 24), 31)), 8));
  assert {:sourceloc} {:sourceloc_num 61} true;
  v70 := $$splitSort.flags[v69];
  assert {:sourceloc} {:sourceloc_num 62} true;
  $$splitSort.flags[v69] := BV32_ADD(v70, v64);
  v71 := BV32_ADD(4, BV32_MUL(2, BV32_ADD(group_size_x, v25)));
  assert {:sourceloc} {:sourceloc_num 63} true;
  v72 := $$splitSort.flags[BV32_ADD(BV32_MUL(2, BV32_ADD(group_size_x, v25)), BV32_LSHR(BV32_LSHR(BV32_MUL(2, BV32_ADD(group_size_x, v25)), BV32_AND((if BV32_ULT(v71, 24) then v71 else 24), 31)), 8))];
  v73 := BV32_ADD(BV32_MUL(2, BV32_ADD(group_size_x, v25)), 5);
  assert {:sourceloc} {:sourceloc_num 64} true;
  v74 := $$splitSort.flags[BV32_ADD(BV32_ADD(BV32_MUL(2, BV32_ADD(group_size_x, v25)), 1), BV32_LSHR(BV32_LSHR(BV32_ADD(BV32_MUL(2, BV32_ADD(group_size_x, v25)), 1), BV32_AND((if BV32_ULT(v73, 24) then v73 else 24), 31)), 8))];
  v75 := BV32_ADD(4, BV32_MUL(2, BV32_ADD(group_size_x, v25)));
  assert {:sourceloc} {:sourceloc_num 65} true;
  $$splitSort.flags[BV32_ADD(BV32_MUL(2, BV32_ADD(group_size_x, v25)), BV32_LSHR(BV32_LSHR(BV32_MUL(2, BV32_ADD(group_size_x, v25)), BV32_AND((if BV32_ULT(v75, 24) then v75 else 24), 31)), 8))] := v74;
  v76 := BV32_ADD(BV32_MUL(2, BV32_ADD(group_size_x, v25)), 5);
  v77 := BV32_ADD(BV32_ADD(BV32_MUL(2, BV32_ADD(group_size_x, v25)), 1), BV32_LSHR(BV32_LSHR(BV32_ADD(BV32_MUL(2, BV32_ADD(group_size_x, v25)), 1), BV32_AND((if BV32_ULT(v76, 24) then v76 else 24), 31)), 8));
  assert {:sourceloc} {:sourceloc_num 66} true;
  v78 := $$splitSort.flags[v77];
  assert {:sourceloc} {:sourceloc_num 67} true;
  $$splitSort.flags[v77] := BV32_ADD(v78, v72);
  call {:sourceloc_num 68} $bugle_barrier(-1, 0);
  v79 := BV32_ADD(4, BV_EXTRACT($index.0, 32, 0));
  assert {:sourceloc} {:sourceloc_num 69} true;
  v80 := $$splitSort.flags[BV32_ADD(BV_EXTRACT($index.0, 32, 0), BV32_LSHR(BV32_LSHR(BV_EXTRACT($index.0, 32, 0), BV32_AND((if BV32_ULT(v79, 24) then v79 else 24), 31)), 8))];
  v81 := BV_EXTRACT($index.0, 64, 32);
  v82 := BV32_ADD(4, v81);
  assert {:sourceloc} {:sourceloc_num 70} true;
  v83 := $$splitSort.flags[BV32_ADD(v81, BV32_LSHR(BV32_LSHR(v81, BV32_AND((if BV32_ULT(v82, 24) then v82 else 24), 31)), 8))];
  v84 := BV32_AND(BV32_LSHR(v83, BV32_AND(BV32_MUL(16, v18), 31)), 65535);
  v85 := BV_EXTRACT($index.0, 96, 64);
  v86 := BV32_ADD(4, v85);
  assert {:sourceloc} {:sourceloc_num 71} true;
  v87 := $$splitSort.flags[BV32_ADD(v85, BV32_LSHR(BV32_LSHR(v85, BV32_AND((if BV32_ULT(v86, 24) then v86 else 24), 31)), 8))];
  v88 := BV32_AND(BV32_LSHR(v87, BV32_AND(BV32_MUL(16, v19), 31)), 65535);
  v89 := BV_EXTRACT($index.0, 128, 96);
  v90 := BV32_ADD(4, v89);
  assert {:sourceloc} {:sourceloc_num 72} true;
  v91 := $$splitSort.flags[BV32_ADD(v89, BV32_LSHR(BV32_LSHR(v89, BV32_AND((if BV32_ULT(v90, 24) then v90 else 24), 31)), 8))];
  v92 := BV32_AND(BV32_LSHR(v91, BV32_AND(BV32_MUL(16, v20), 31)), 65535);
  v93 := BV32_ADD(4, BV32_MUL(4, group_size_x));
  assert {:sourceloc} {:sourceloc_num 73} true;
  v94 := $$splitSort.flags[BV32_ADD(BV32_MUL(4, group_size_x), BV32_LSHR(BV32_LSHR(BV32_MUL(4, group_size_x), BV32_AND((if BV32_ULT(v93, 24) then v93 else 24), 31)), 8))];
  v95 := BV_EXTRACT(BV32_AND(v94, 65535), 16, 0);
  v96 := v17 != 0;
  goto $truebb7, $falsebb7;
$18:
  assert {:block_sourceloc} {:sourceloc_num 74} true;
  $0 := BV16_ZEXT32(v95);
  goto $20;
$19:
  assert {:block_sourceloc} {:sourceloc_num 75} true;
  $0 := 0;
  goto $20;
$20:
  assert {:block_sourceloc} {:sourceloc_num 76} true;
  v97 := BV32_ADD(BV32_AND(BV32_LSHR(v80, BV32_AND(BV32_MUL(16, v17), 31)), 65535), $0);
  v98 := v18 != 0;
  goto $truebb8, $falsebb8;
$21:
  assert {:block_sourceloc} {:sourceloc_num 77} true;
  $1 := BV16_ZEXT32(v95);
  goto $23;
$22:
  assert {:block_sourceloc} {:sourceloc_num 78} true;
  $1 := 0;
  goto $23;
$23:
  assert {:block_sourceloc} {:sourceloc_num 79} true;
  v99 := BV32_ADD(v84, $1);
  v100 := v19 != 0;
  goto $truebb9, $falsebb9;
$24:
  assert {:block_sourceloc} {:sourceloc_num 80} true;
  $2 := BV16_ZEXT32(v95);
  goto $26;
$25:
  assert {:block_sourceloc} {:sourceloc_num 81} true;
  $2 := 0;
  goto $26;
$26:
  assert {:block_sourceloc} {:sourceloc_num 82} true;
  v101 := v20 != 0;
  goto $truebb10, $falsebb10;
$27:
  assert {:block_sourceloc} {:sourceloc_num 83} true;
  $3 := BV16_ZEXT32(v95);
  goto $29;
$28:
  assert {:block_sourceloc} {:sourceloc_num 84} true;
  $3 := 0;
  goto $29;
$29:
  assert {:block_sourceloc} {:sourceloc_num 85} true;
  call {:sourceloc_num 86} $bugle_barrier(-1, 0);
  goto $30;
$30:
  assert {:block_sourceloc} {:sourceloc_num 87} true;
  $index.0, $i.0 := BV_CONCAT(BV_CONCAT(BV_CONCAT(BV32_ADD(v92, $3), BV32_ADD(v88, $2)), v99), v97), BV32_ADD($i.0, 1);
  goto $5;
$31:
  assert {:block_sourceloc} {:sourceloc_num 88} true;
  v102 := BV32_ULT(v1, $numElems);
  goto $truebb11, $falsebb11;
$32:
  assert {:block_sourceloc} {:sourceloc_num 89} true;
  assert {:sourceloc} {:sourceloc_num 90} true;
  $$keys[BV32_ADD(BV32_MUL(BV32_MUL(group_id_x, 4), 256), BV_EXTRACT($index.0, 32, 0))] := BV_EXTRACT($lkey.0, 32, 0);
  assert {:sourceloc} {:sourceloc_num 91} true;
  $$keys[BV32_ADD(BV32_MUL(BV32_MUL(group_id_x, 4), 256), BV_EXTRACT($index.0, 64, 32))] := BV_EXTRACT($lkey.0, 64, 32);
  assert {:sourceloc} {:sourceloc_num 92} true;
  $$keys[BV32_ADD(BV32_MUL(BV32_MUL(group_id_x, 4), 256), BV_EXTRACT($index.0, 96, 64))] := BV_EXTRACT($lkey.0, 96, 64);
  assert {:sourceloc} {:sourceloc_num 93} true;
  $$keys[BV32_ADD(BV32_MUL(BV32_MUL(group_id_x, 4), 256), BV_EXTRACT($index.0, 128, 96))] := BV_EXTRACT($lkey.0, 128, 96);
  assert {:sourceloc} {:sourceloc_num 94} true;
  $$values[BV32_ADD(BV32_MUL(BV32_MUL(group_id_x, 4), 256), BV_EXTRACT($index.0, 32, 0))] := BV_EXTRACT($lvalue.0, 32, 0);
  assert {:sourceloc} {:sourceloc_num 95} true;
  $$values[BV32_ADD(BV32_MUL(BV32_MUL(group_id_x, 4), 256), BV_EXTRACT($index.0, 64, 32))] := BV_EXTRACT($lvalue.0, 64, 32);
  assert {:sourceloc} {:sourceloc_num 96} true;
  $$values[BV32_ADD(BV32_MUL(BV32_MUL(group_id_x, 4), 256), BV_EXTRACT($index.0, 96, 64))] := BV_EXTRACT($lvalue.0, 96, 64);
  assert {:sourceloc} {:sourceloc_num 97} true;
  $$values[BV32_ADD(BV32_MUL(BV32_MUL(group_id_x, 4), 256), BV_EXTRACT($index.0, 128, 96))] := BV_EXTRACT($lvalue.0, 128, 96);
  goto $33;
$33:
  assert {:block_sourceloc} {:sourceloc_num 98} true;
  v103 := BV32_ULT(v0, 16);
  goto $truebb12, $falsebb12;
$34:
  assert {:block_sourceloc} {:sourceloc_num 99} true;
  assert {:sourceloc} {:sourceloc_num 100} true;
  v104 := $$splitSort.histo_s[v0];
  assert {:sourceloc} {:sourceloc_num 101} true;
  $$histo[BV32_ADD(BV32_MUL(num_groups_x, local_id_x), group_id_x)] := v104;
  goto $35;
$35:
  assert {:block_sourceloc} {:sourceloc_num 102} true;
  return;
$truebb:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 103} true;
  goto $1;
$falsebb:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 104} true;
  havoc v105;
  $lkey.0, $lvalue.0 := -1, v105;
  goto $2;
$truebb0:
  assume {:partition} v11;
  assert {:block_sourceloc} {:sourceloc_num 105} true;
  goto $3;
$falsebb0:
  assume {:partition} !v11;
  assert {:block_sourceloc} {:sourceloc_num 106} true;
  goto $4;
$truebb1:
  assume {:partition} v16;
  assert {:block_sourceloc} {:sourceloc_num 107} true;
  goto $6;
$falsebb1:
  assume {:partition} !v16;
  assert {:block_sourceloc} {:sourceloc_num 108} true;
  goto $31;
$truebb2:
  assume {:partition} v36;
  assert {:block_sourceloc} {:sourceloc_num 109} true;
  goto $8;
$falsebb2:
  assume {:partition} !v36;
  assert {:block_sourceloc} {:sourceloc_num 110} true;
  goto $11;
$truebb3:
  assume {:partition} v37;
  assert {:block_sourceloc} {:sourceloc_num 111} true;
  goto $9;
$falsebb3:
  assume {:partition} !v37;
  assert {:block_sourceloc} {:sourceloc_num 112} true;
  goto $10;
$truebb4:
  assume {:partition} v45;
  assert {:block_sourceloc} {:sourceloc_num 113} true;
  goto $12;
$falsebb4:
  assume {:partition} !v45;
  assert {:block_sourceloc} {:sourceloc_num 114} true;
  goto $13;
$truebb5:
  assume {:partition} v51;
  assert {:block_sourceloc} {:sourceloc_num 115} true;
  goto $15;
$falsebb5:
  assume {:partition} !v51;
  assert {:block_sourceloc} {:sourceloc_num 116} true;
  goto $scan.exit;
$truebb6:
  assume {:partition} v53;
  assert {:block_sourceloc} {:sourceloc_num 117} true;
  goto $16;
$falsebb6:
  assume {:partition} !v53;
  assert {:block_sourceloc} {:sourceloc_num 118} true;
  goto $17;
$truebb7:
  assume {:partition} v96;
  assert {:block_sourceloc} {:sourceloc_num 119} true;
  goto $18;
$falsebb7:
  assume {:partition} !v96;
  assert {:block_sourceloc} {:sourceloc_num 120} true;
  goto $19;
$truebb8:
  assume {:partition} v98;
  assert {:block_sourceloc} {:sourceloc_num 121} true;
  goto $21;
$falsebb8:
  assume {:partition} !v98;
  assert {:block_sourceloc} {:sourceloc_num 122} true;
  goto $22;
$truebb9:
  assume {:partition} v100;
  assert {:block_sourceloc} {:sourceloc_num 123} true;
  goto $24;
$falsebb9:
  assume {:partition} !v100;
  assert {:block_sourceloc} {:sourceloc_num 124} true;
  goto $25;
$truebb10:
  assume {:partition} v101;
  assert {:block_sourceloc} {:sourceloc_num 125} true;
  goto $27;
$falsebb10:
  assume {:partition} !v101;
  assert {:block_sourceloc} {:sourceloc_num 126} true;
  goto $28;
$truebb11:
  assume {:partition} v102;
  assert {:block_sourceloc} {:sourceloc_num 127} true;
  goto $32;
$falsebb11:
  assume {:partition} !v102;
  assert {:block_sourceloc} {:sourceloc_num 128} true;
  goto $33;
$truebb12:
  assume {:partition} v103;
  assert {:block_sourceloc} {:sourceloc_num 129} true;
  goto $34;
$falsebb12:
  assume {:partition} !v103;
  assert {:block_sourceloc} {:sourceloc_num 130} true;
  goto $35;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:int, $1:int);
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 256 then 1 else 0) != 0;
axiom (if num_groups_x == 2594 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
