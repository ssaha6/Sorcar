type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "data"} {:global} $$data : [int]int;
axiom {:array_info "$$data"} {:global} {:elem_width 32} {:source_name "data"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$data : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$data : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$data : bool;

var {:source_name "newData"} {:global} $$newData : [int]int;
axiom {:array_info "$$newData"} {:global} {:elem_width 32} {:source_name "newData"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$newData : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$newData : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$newData : bool;

var {:source_name "sh"} {:group_shared} $$sh : [int]int;
axiom {:array_info "$$sh"} {:group_shared} {:elem_width 32} {:source_name "sh"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$sh : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$sh : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$sh : bool;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_id_y} group_id_y : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:local_id_y} local_id_y : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function FADD32(int, int) : int;
function FMUL32(int, int) : int;
function {:inline true} BV1_ZEXT32(x : int) : int {
  x
}
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_OR(x : int, y : int) : int {
  if x == y then x else (if x == 0 then y else (if y == 0 then x else BV32_OR_UF(x, y)))
}
function BV32_OR_UF(int, int) : int;
function {:inline true} BV32_SLT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV32_SREM(x : int, y : int) : int {
  x mod y
}
function {:inline true} BV32_SUB(x : int, y : int) : int {
  x - y
}
function {:inline true} BV32_UDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_ULT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV32_UREM(x : int, y : int) : int {
  x mod y
}
procedure {:source_name "StencilKernel"} {:kernel} $StencilKernel($alignment:int, $wCenter:int, $wCardinal:int, $wDiagonal:int)
requires {:sourceloc_num 0} (if $alignment == 16 then 1 else 0) != 0;
{
  var $0:int;
  var $i.0:int;
  var $i1.0:int;
  var $i4.0:int;
  var $i7.0:int;
  var v0:int;
  var v1:int;
  var v2:int;
  var v3:int;
  var v4:int;
  var v5:int;
  var v6:bool;
  var v7:int;
  var v8:bool;
  var v9:int;
  var v10:bool;
  var v11:bool;
  var v12:int;
  var v13:bool;
  var v14:bool;
  var v15:int;
  var v16:bool;
  var v17:int;
  var v18:int;
  var v19:int;
  var v20:int;
  var v21:int;
  var v22:int;
  var v23:int;
  var v24:int;
  var v25:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  v0 := local_id_x;
  v1 := local_id_y;
  v2 := group_size_y;
  v3 := BV32_ADD(BV32_MUL(group_id_x, 8), v0);
  v4 := BV32_ADD(BV32_MUL(group_id_y, v2), v1);
  v5 := BV32_ADD(BV32_MUL(num_groups_y, v2), 2);
  v6 := BV32_SREM(v5, $alignment) == 0;
  goto $truebb, $falsebb;
$1:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  $0 := 0;
  goto $3;
$2:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  $0 := BV32_SUB($alignment, BV32_SREM(v5, $alignment));
  goto $3;
$3:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  v7 := BV32_SUB(BV32_ADD(v5, $0), 2);
  $i.0 := 0;
  goto $4;
$4:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 6} (if (_WRITE_HAS_OCCURRED_$$sh ==> BV32_ULT(BV32_SUB(BV32_UDIV(BV32_SUB(BV32_UDIV(BV32_MUL(4, _WATCHED_OFFSET), 4), BV32_ADD(v1, 1)), BV32_ADD(v2, 2)), v0), 10)) then 1 else 0) != 0;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 7} (if (_WRITE_HAS_OCCURRED_$$sh ==> BV32_UREM(BV32_SUB(BV32_UDIV(BV32_MUL(4, _WATCHED_OFFSET), 4), BV32_ADD(v1, 1)), BV32_ADD(v2, 2)) == 0) then 1 else 0) != 0;
  v8 := BV32_SLT($i.0, 10);
  goto $truebb0, $falsebb0;
$5:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  assert {:sourceloc} {:sourceloc_num 9} true;
  v9 := $$data[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(BV32_SUB(v3, 1), $i.0), 1), BV32_ADD(v7, 2)), BV32_ADD(v4, 1))];
  assert {:sourceloc} {:sourceloc_num 10} true;
  $$sh[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(BV32_SUB(v0, 1), $i.0), 1), BV32_ADD(v2, 2)), BV32_ADD(v1, 1))] := v9;
  goto $6;
$6:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  $i.0 := BV32_ADD($i.0, 1);
  goto $4;
$7:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  v10 := v1 == 0;
  goto $truebb1, $falsebb1;
$8:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  $i1.0 := 0;
  goto $9;
$9:
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 15} (if (_WRITE_HAS_OCCURRED_$$sh ==> BV32_OR(BV1_ZEXT32((if BV32_UREM(BV32_SUB(BV32_UDIV(BV32_MUL(4, _WATCHED_OFFSET), 4), BV32_ADD(v1, 1)), BV32_ADD(v2, 2)) == 0 then 1 else 0)), BV1_ZEXT32((if BV32_UREM(BV32_SUB(BV32_UDIV(BV32_MUL(4, _WATCHED_OFFSET), 4), v1), BV32_ADD(v2, 2)) == 0 then 1 else 0))) != 0) then 1 else 0) != 0;
  v11 := BV32_SLT($i1.0, 10);
  goto $truebb2, $falsebb2;
$10:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  assert {:sourceloc} {:sourceloc_num 17} true;
  v12 := $$data[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(BV32_SUB(v3, 1), $i1.0), 1), BV32_ADD(v7, 2)), BV32_ADD(BV32_SUB(v4, 1), 1))];
  assert {:sourceloc} {:sourceloc_num 18} true;
  $$sh[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(BV32_SUB(v0, 1), $i1.0), 1), BV32_ADD(v2, 2)), BV32_ADD(BV32_SUB(v1, 1), 1))] := v12;
  goto $11;
$11:
  assert {:block_sourceloc} {:sourceloc_num 19} true;
  $i1.0 := BV32_ADD($i1.0, 1);
  goto $9;
$12:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  goto $20;
$13:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  v13 := v1 == BV32_SUB(v2, 1);
  goto $truebb3, $falsebb3;
$14:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  $i4.0 := 0;
  goto $15;
$15:
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 24} (if (_WRITE_HAS_OCCURRED_$$sh ==> BV32_OR(BV32_OR(BV1_ZEXT32((if BV32_UREM(BV32_SUB(BV32_UDIV(BV32_MUL(4, _WATCHED_OFFSET), 4), BV32_ADD(v1, 1)), BV32_ADD(v2, 2)) == 0 then 1 else 0)), BV1_ZEXT32((if BV32_UREM(BV32_SUB(BV32_UDIV(BV32_MUL(4, _WATCHED_OFFSET), 4), BV32_ADD(v1, 2)), BV32_ADD(v2, 2)) == 0 then 1 else 0))), BV1_ZEXT32((if BV32_UREM(BV32_SUB(BV32_UDIV(BV32_MUL(4, _WATCHED_OFFSET), 4), v1), BV32_ADD(v2, 2)) == 0 then 1 else 0))) != 0) then 1 else 0) != 0;
  v14 := BV32_SLT($i4.0, 10);
  goto $truebb4, $falsebb4;
$16:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  assert {:sourceloc} {:sourceloc_num 26} true;
  v15 := $$data[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(BV32_SUB(v3, 1), $i4.0), 1), BV32_ADD(v7, 2)), BV32_ADD(v4, 2))];
  assert {:sourceloc} {:sourceloc_num 27} true;
  $$sh[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(BV32_SUB(v0, 1), $i4.0), 1), BV32_ADD(v2, 2)), BV32_ADD(v1, 2))] := v15;
  goto $17;
$17:
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  $i4.0 := BV32_ADD($i4.0, 1);
  goto $15;
$18:
  assert {:block_sourceloc} {:sourceloc_num 29} true;
  goto $19;
$19:
  assert {:block_sourceloc} true;
  goto $20;
$20:
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  call {:sourceloc_num 31} $bugle_barrier(-1, 0);
  $i7.0 := 0;
  goto $21;
$21:
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 33} (if (_WRITE_HAS_OCCURRED_$$newData ==> BV32_ULT(BV32_SUB(BV32_UDIV(BV32_SUB(BV32_UDIV(BV32_MUL(4, _WATCHED_OFFSET), 4), BV32_ADD(v4, 1)), BV32_ADD(v7, 2)), BV32_ADD(v3, 1)), 8)) then 1 else 0) != 0;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 34} (if (_WRITE_HAS_OCCURRED_$$newData ==> BV32_UREM(BV32_SUB(BV32_UDIV(BV32_MUL(4, _WATCHED_OFFSET), 4), BV32_ADD(v4, 1)), BV32_ADD(v7, 2)) == 0) then 1 else 0) != 0;
  v16 := BV32_SLT($i7.0, 8);
  goto $truebb5, $falsebb5;
$22:
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  assert {:sourceloc} {:sourceloc_num 36} true;
  v17 := $$sh[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(v0, $i7.0), 1), BV32_ADD(v2, 2)), BV32_ADD(v1, 1))];
  assert {:sourceloc} {:sourceloc_num 37} true;
  v18 := $$sh[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(BV32_SUB(v0, 1), $i7.0), 1), BV32_ADD(v2, 2)), BV32_ADD(v1, 1))];
  assert {:sourceloc} {:sourceloc_num 38} true;
  v19 := $$sh[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(BV32_ADD(v0, 1), $i7.0), 1), BV32_ADD(v2, 2)), BV32_ADD(v1, 1))];
  assert {:sourceloc} {:sourceloc_num 39} true;
  v20 := $$sh[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(v0, $i7.0), 1), BV32_ADD(v2, 2)), BV32_ADD(v1, 2))];
  assert {:sourceloc} {:sourceloc_num 40} true;
  v21 := $$sh[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(v0, $i7.0), 1), BV32_ADD(v2, 2)), BV32_ADD(BV32_SUB(v1, 1), 1))];
  assert {:sourceloc} {:sourceloc_num 41} true;
  v22 := $$sh[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(BV32_SUB(v0, 1), $i7.0), 1), BV32_ADD(v2, 2)), BV32_ADD(v1, 2))];
  assert {:sourceloc} {:sourceloc_num 42} true;
  v23 := $$sh[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(BV32_ADD(v0, 1), $i7.0), 1), BV32_ADD(v2, 2)), BV32_ADD(v1, 2))];
  assert {:sourceloc} {:sourceloc_num 43} true;
  v24 := $$sh[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(BV32_SUB(v0, 1), $i7.0), 1), BV32_ADD(v2, 2)), BV32_ADD(BV32_SUB(v1, 1), 1))];
  assert {:sourceloc} {:sourceloc_num 44} true;
  v25 := $$sh[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(BV32_ADD(v0, 1), $i7.0), 1), BV32_ADD(v2, 2)), BV32_ADD(BV32_SUB(v1, 1), 1))];
  assert {:sourceloc} {:sourceloc_num 45} true;
  $$newData[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(v3, $i7.0), 1), BV32_ADD(v7, 2)), BV32_ADD(v4, 1))] := FADD32(FMUL32($wDiagonal, FADD32(FADD32(FADD32(v22, v23), v24), v25)), FADD32(FMUL32($wCenter, v17), FMUL32($wCardinal, FADD32(FADD32(FADD32(v18, v19), v20), v21))));
  goto $23;
$23:
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  $i7.0 := BV32_ADD($i7.0, 1);
  goto $21;
$24:
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  return;
$truebb:
  assume {:partition} v6;
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  goto $1;
$falsebb:
  assume {:partition} !v6;
  assert {:block_sourceloc} {:sourceloc_num 49} true;
  goto $2;
$truebb0:
  assume {:partition} v8;
  assert {:block_sourceloc} {:sourceloc_num 50} true;
  goto $5;
$falsebb0:
  assume {:partition} !v8;
  assert {:block_sourceloc} {:sourceloc_num 51} true;
  goto $7;
$truebb1:
  assume {:partition} v10;
  assert {:block_sourceloc} {:sourceloc_num 52} true;
  goto $8;
$falsebb1:
  assume {:partition} !v10;
  assert {:block_sourceloc} {:sourceloc_num 53} true;
  goto $13;
$truebb2:
  assume {:partition} v11;
  assert {:block_sourceloc} {:sourceloc_num 54} true;
  goto $10;
$falsebb2:
  assume {:partition} !v11;
  assert {:block_sourceloc} {:sourceloc_num 55} true;
  goto $12;
$truebb3:
  assume {:partition} v13;
  assert {:block_sourceloc} {:sourceloc_num 56} true;
  goto $14;
$falsebb3:
  assume {:partition} !v13;
  assert {:block_sourceloc} {:sourceloc_num 57} true;
  goto $19;
$truebb4:
  assume {:partition} v14;
  assert {:block_sourceloc} {:sourceloc_num 58} true;
  goto $16;
$falsebb4:
  assume {:partition} !v14;
  assert {:block_sourceloc} {:sourceloc_num 59} true;
  goto $18;
$truebb5:
  assume {:partition} v16;
  assert {:block_sourceloc} {:sourceloc_num 60} true;
  goto $22;
$falsebb5:
  assume {:partition} !v16;
  assert {:block_sourceloc} {:sourceloc_num 61} true;
  goto $24;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:int, $1:int);
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 1 then 1 else 0) != 0;
axiom (if group_size_y == 256 then 1 else 0) != 0;
axiom (if num_groups_x == 64 then 1 else 0) != 0;
axiom (if num_groups_y == 2 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
