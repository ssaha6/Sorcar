type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "dest"} {:global} $$dest : [int]int;
axiom {:array_info "$$dest"} {:global} {:elem_width 32} {:source_name "dest"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$dest : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$dest : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$dest : bool;

var {:source_name "src"} {:global} $$src : [int]int;
axiom {:array_info "$$src"} {:global} {:elem_width 32} {:source_name "src"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$src : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$src : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$src : bool;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SLT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV32_SUB(x : int, y : int) : int {
  x - y
}
function {:inline true} BV32_UDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_ULT(x : int, y : int) : bool {
  x < y
}
procedure {:source_name "CopyRect"} {:kernel} $CopyRect($doffset:int, $dpitch:int, $soffset:int, $spitch:int, $width:int, $height:int)
requires {:sourceloc_num 0} (if $doffset == 514 then 1 else 0) != 0;
requires {:sourceloc_num 1} (if $dpitch == 514 then 1 else 0) != 0;
requires {:sourceloc_num 2} (if $width == 514 then 1 else 0) != 0;
{
  var $c.0:int;
  var v3:int;
  var v0:int;
  var v1:bool;
  var v2:bool;
$0:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  v1 := BV32_SLT(v0, $height);
  goto $truebb, $falsebb;
$1:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  $c.0 := 0;
  goto $2;
$2:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 6} (if (_WRITE_HAS_OCCURRED_$$dest ==> BV32_ULT(BV32_SUB(BV32_UDIV(BV32_MUL(4, _WATCHED_OFFSET), 4), BV32_ADD($doffset, BV32_MUL(v0, $dpitch))), $width)) then 1 else 0) != 0;
  v2 := BV32_SLT($c.0, $width);
  goto $truebb0, $falsebb0;
$3:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  assert {:sourceloc} {:sourceloc_num 8} true;
  v3 := $$src[BV32_ADD($soffset, BV32_ADD(BV32_MUL(v0, $spitch), $c.0))];
  assert {:sourceloc} {:sourceloc_num 9} true;
  $$dest[BV32_ADD($doffset, BV32_ADD(BV32_MUL(v0, $dpitch), $c.0))] := v3;
  goto $4;
$4:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  $c.0 := BV32_ADD($c.0, 1);
  goto $2;
$5:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  goto $6;
$6:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  return;
$truebb:
  assume {:partition} v1;
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  goto $1;
$falsebb:
  assume {:partition} !v1;
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  goto $6;
$truebb0:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  goto $3;
$falsebb0:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  goto $5;
}
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 514 then 1 else 0) != 0;
axiom (if num_groups_x == 1 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
