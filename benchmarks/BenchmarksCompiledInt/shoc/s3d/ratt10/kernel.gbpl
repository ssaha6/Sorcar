type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "T"} {:global} $$T : [int]int;
axiom {:array_info "$$T"} {:global} {:elem_width 32} {:source_name "T"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$T : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$T : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$T : bool;

var {:source_name "RKLOW"} {:global} $$RKLOW : [int]int;
axiom {:array_info "$$RKLOW"} {:global} {:elem_width 32} {:source_name "RKLOW"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$RKLOW : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$RKLOW : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$RKLOW : bool;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function FADD32(int, int) : int;
function FDIV32(int, int) : int;
function FEXP32(int) : int;
function FLOG32(int) : int;
function FMUL32(int, int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
procedure {:source_name "ratt10_kernel"} {:kernel} $ratt10_kernel($TCONV:int)
{
  var v0:int;
  var v1:int;
  var v2:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  assert {:sourceloc} {:sourceloc_num 1} true;
  v0 := $$T[BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x)];
  v1 := FMUL32(v0, $TCONV);
  v2 := FMUL32(FLOG32(v1), 1060205080);
  assert {:sourceloc} {:sourceloc_num 2} true;
  $$RKLOW[BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x)] := FEXP32(FMUL32(FADD32(FMUL32(1146478073, FDIV32(1065353216, v1)), FADD32(FMUL32(-1083808154, v2), 1109990950)), 1069066811));
  assert {:sourceloc} {:sourceloc_num 3} true;
  $$RKLOW[BV32_ADD(13824, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FEXP32(FMUL32(FADD32(FMUL32(-953823661, FDIV32(1065353216, v1)), FADD32(FMUL32(-1067785912, v2), 1115630636)), 1069066811));
  assert {:sourceloc} {:sourceloc_num 4} true;
  $$RKLOW[BV32_ADD(27648, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FEXP32(FMUL32(FADD32(FMUL32(-999059825, FDIV32(1065353216, v1)), FADD32(FMUL32(-1066443735, v2), 1115876481)), 1069066811));
  assert {:sourceloc} {:sourceloc_num 5} true;
  $$RKLOW[BV32_ADD(41472, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FEXP32(FMUL32(FADD32(FMUL32(-1003272868, FDIV32(1065353216, v1)), FADD32(FMUL32(-1071351071, v2), 1113472931)), 1069066811));
  assert {:sourceloc} {:sourceloc_num 6} true;
  $$RKLOW[BV32_ADD(55296, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FEXP32(FMUL32(FADD32(FMUL32(-1004880585, FDIV32(1065353216, v1)), FADD32(FMUL32(-1068960317, v2), 1115510000)), 1069066811));
  assert {:sourceloc} {:sourceloc_num 7} true;
  $$RKLOW[BV32_ADD(69120, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FEXP32(FMUL32(FADD32(FMUL32(-983620312, FDIV32(1065353216, v1)), FADD32(FMUL32(-1063025377, v2), 1117385503)), 1069066811));
  assert {:sourceloc} {:sourceloc_num 8} true;
  $$RKLOW[BV32_ADD(82944, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FEXP32(FMUL32(FADD32(FMUL32(-986784216, FDIV32(1065353216, v1)), FADD32(FMUL32(-1063675494, v2), 1116453734)), 1069066811));
  assert {:sourceloc} {:sourceloc_num 9} true;
  $$RKLOW[BV32_ADD(96768, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FEXP32(FMUL32(FADD32(FMUL32(-996574424, FDIV32(1065353216, v1)), FADD32(FMUL32(-1063759380, v2), 1117374691)), 1069066811));
  assert {:sourceloc} {:sourceloc_num 10} true;
  $$RKLOW[BV32_ADD(110592, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FEXP32(FMUL32(FADD32(FMUL32(-987732357, FDIV32(1065353216, v1)), FADD32(FMUL32(-1055299469, v2), 1121886214)), 1069066811));
  assert {:sourceloc} {:sourceloc_num 11} true;
  $$RKLOW[BV32_ADD(124416, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FEXP32(FMUL32(FADD32(FMUL32(-985423841, FDIV32(1065353216, v1)), FADD32(FMUL32(-1055213486, v2), 1122461317)), 1069066811));
  assert {:sourceloc} {:sourceloc_num 12} true;
  $$RKLOW[BV32_ADD(138240, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FEXP32(FMUL32(FADD32(FMUL32(-960273475, FDIV32(1065353216, v1)), FADD32(FMUL32(-1088170230, v2), 1108196685)), 1069066811));
  assert {:sourceloc} {:sourceloc_num 13} true;
  $$RKLOW[BV32_ADD(152064, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FEXP32(FMUL32(FADD32(FMUL32(-963855098, FDIV32(1065353216, v1)), FADD32(FMUL32(-1067869798, v2), 1115452016)), 1069066811));
  assert {:sourceloc} {:sourceloc_num 14} true;
  $$RKLOW[BV32_ADD(165888, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FEXP32(FMUL32(FADD32(FMUL32(-977591750, FDIV32(1065353216, v1)), FADD32(FMUL32(-1057719583, v2), 1119845219)), 1069066811));
  assert {:sourceloc} {:sourceloc_num 15} true;
  $$RKLOW[BV32_ADD(179712, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FEXP32(FMUL32(FADD32(FMUL32(-992946755, FDIV32(1065353216, v1)), FADD32(FMUL32(-1065940419, v2), 1116394491)), 1069066811));
  assert {:sourceloc} {:sourceloc_num 16} true;
  $$RKLOW[BV32_ADD(193536, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FEXP32(FMUL32(FADD32(FMUL32(-979787108, FDIV32(1065353216, v1)), FADD32(FMUL32(-1052833219, v2), 1124532326)), 1069066811));
  assert {:sourceloc} {:sourceloc_num 17} true;
  $$RKLOW[BV32_ADD(207360, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FEXP32(FMUL32(FADD32(FMUL32(-988556827, FDIV32(1065353216, v1)), FADD32(FMUL32(-1058438906, v2), 1119282722)), 1069066811));
  assert {:sourceloc} {:sourceloc_num 18} true;
  $$RKLOW[BV32_ADD(221184, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FEXP32(FMUL32(FADD32(FMUL32(-951825609, FDIV32(1065353216, v1)), FADD32(FMUL32(-1055590973, v2), 1122641532)), 1069066811));
  assert {:sourceloc} {:sourceloc_num 19} true;
  $$RKLOW[BV32_ADD(235008, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FEXP32(FMUL32(FADD32(FMUL32(-983877959, FDIV32(1065353216, v1)), FADD32(FMUL32(-1057761526, v2), 1119995939)), 1069066811));
  assert {:sourceloc} {:sourceloc_num 20} true;
  $$RKLOW[BV32_ADD(248832, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FEXP32(FMUL32(FADD32(FMUL32(-984465394, FDIV32(1065353216, v1)), FADD32(FMUL32(-1058893988, v2), 1119760433)), 1069066811));
  assert {:sourceloc} {:sourceloc_num 21} true;
  $$RKLOW[BV32_ADD(262656, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FEXP32(FMUL32(FADD32(FMUL32(-985943669, FDIV32(1065353216, v1)), FADD32(FMUL32(-1052770304, v2), 1124757687)), 1069066811));
  assert {:sourceloc} {:sourceloc_num 22} true;
  $$RKLOW[BV32_ADD(276480, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FEXP32(FMUL32(FADD32(FMUL32(-983816124, FDIV32(1065353216, v1)), FADD32(FMUL32(-1059774792, v2), 1119005234)), 1069066811));
  return;
}
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 128 then 1 else 0) != 0;
axiom (if num_groups_x == 108 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
