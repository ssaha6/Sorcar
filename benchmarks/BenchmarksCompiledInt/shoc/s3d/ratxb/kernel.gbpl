type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "T"} {:global} $$T : [int]int;
axiom {:array_info "$$T"} {:global} {:elem_width 32} {:source_name "T"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$T : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$T : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$T : bool;

var {:source_name "C"} {:global} $$C : [int]int;
axiom {:array_info "$$C"} {:global} {:elem_width 32} {:source_name "C"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$C : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$C : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$C : bool;

var {:source_name "RF"} {:global} $$RF : [int]int;
axiom {:array_info "$$RF"} {:global} {:elem_width 32} {:source_name "RF"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$RF : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$RF : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$RF : bool;

var {:source_name "RB"} {:global} $$RB : [int]int;
axiom {:array_info "$$RB"} {:global} {:elem_width 32} {:source_name "RB"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$RB : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$RB : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$RB : bool;

var {:source_name "RKLOW"} {:global} $$RKLOW : [int]int;
axiom {:array_info "$$RKLOW"} {:global} {:elem_width 32} {:source_name "RKLOW"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$RKLOW : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$RKLOW : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$RKLOW : bool;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function FADD32(int, int) : int;
function FADD64(int, int) : int;
function FDIV32(int, int) : int;
function FDIV64(int, int) : int;
function FEXP32(int) : int;
function FLT32(int, int) : bool;
function FMUL32(int, int) : int;
function FMUL64(int, int) : int;
function FP32_CONV64(int) : int;
function FP64_CONV32(int) : int;
function FSUB32(int, int) : int;
function FSUB64(int, int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SUB(x : int, y : int) : int {
  x - y
}
function {:inline true} BV32_ULE(x : int, y : int) : bool {
  x <= y
}
procedure {:source_name "ratxb_kernel"} {:kernel} $ratxb_kernel($TCONV:int)
{
  var $CTOT.0:int;
  var $k.0:int;
  var v0:int;
  var v1:int;
  var v2:bool;
  var v3:int;
  var v4:int;
  var v5:int;
  var v6:int;
  var v7:int;
  var v8:int;
  var v9:int;
  var v10:int;
  var v11:int;
  var v12:int;
  var v13:int;
  var v14:int;
  var v15:int;
  var v16:int;
  var v17:int;
  var v18:int;
  var v19:int;
  var v20:int;
  var v21:int;
  var v22:int;
  var v23:int;
  var v24:int;
  var v25:int;
  var v26:int;
  var v27:int;
  var v28:int;
  var v29:int;
  var v30:int;
  var v31:int;
  var v32:int;
  var v33:int;
  var v34:int;
  var v35:int;
  var v36:int;
  var v37:int;
  var v38:int;
  var v39:int;
  var v40:int;
  var v41:int;
  var v42:int;
  var v43:int;
  var v44:int;
  var v45:int;
  var v46:int;
  var v47:int;
  var v48:int;
  var v49:int;
  var v50:int;
  var v51:int;
  var v52:int;
  var v53:int;
  var v54:int;
  var v55:int;
  var v56:int;
  var v57:int;
  var v58:int;
  var v59:int;
  var v60:int;
  var v104:int;
  var v61:int;
  var v62:int;
  var v63:int;
  var v64:int;
  var v65:int;
  var v66:int;
  var v67:int;
  var v68:int;
  var v69:int;
  var v70:int;
  var v71:int;
  var v72:int;
  var v73:int;
  var v74:int;
  var v75:int;
  var v76:int;
  var v77:int;
  var v78:int;
  var v79:int;
  var v80:int;
  var v81:int;
  var v82:int;
  var v83:int;
  var v84:int;
  var v85:int;
  var v86:int;
  var v87:int;
  var v88:int;
  var v89:int;
  var v90:int;
  var v91:int;
  var v92:int;
  var v93:int;
  var v94:int;
  var v95:int;
  var v96:int;
  var v97:int;
  var v98:int;
  var v99:int;
  var v100:int;
  var v101:int;
  var v102:int;
  var v103:int;
  var v105:int;
  var v106:int;
  var v107:int;
  var v108:int;
  var v109:int;
  var v110:int;
  var v111:int;
  var v112:int;
  var v113:int;
  var v114:int;
  var v115:int;
  var v116:int;
  var v117:int;
  var v118:int;
  var v119:int;
  var v120:int;
  var v121:int;
  var v122:int;
  var v123:int;
  var v124:int;
  var v125:int;
  var v126:int;
  var v127:int;
  var v128:int;
  var v129:int;
  var v130:int;
  var v131:int;
  var v132:int;
  var v133:int;
  var v134:int;
  var v135:int;
  var v136:int;
  var v137:int;
  var v138:int;
  var v139:int;
  var v140:int;
  var v141:int;
  var v142:int;
  var v143:int;
  var v144:int;
  var v145:int;
  var v146:int;
  var v147:int;
  var v148:int;
  var v149:int;
  var v150:int;
  var v151:int;
  var v152:int;
  var v153:int;
  var v154:int;
  var v155:int;
  var v156:int;
  var v157:int;
  var v158:int;
  var v159:int;
  var v160:int;
  var v161:int;
  var v162:int;
  var v163:int;
  var v164:int;
  var v165:int;
  var v166:int;
  var v167:int;
  var v168:int;
  var v169:int;
  var v170:int;
  var v171:int;
  var v172:int;
  var v173:int;
  var v174:int;
  var v175:int;
  var v176:int;
  var v177:int;
  var v178:int;
  var v179:int;
  var v180:int;
  var v181:int;
  var v182:int;
  var v183:int;
  var v184:int;
  var v185:int;
  var v186:int;
  var v187:int;
  var v188:int;
  var v189:int;
  var v190:int;
  var v191:int;
  var v192:int;
  var v193:int;
  var v194:int;
  var v195:int;
  var v196:int;
  var v197:int;
  var v198:int;
  var v199:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  assert {:sourceloc} {:sourceloc_num 1} true;
  v0 := $$T[BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x)];
  v1 := FMUL32(v0, $TCONV);
  $CTOT.0, $k.0 := 0, 1;
  goto $1;
$1:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v2 := BV32_ULE($k.0, 22);
  goto $truebb, $falsebb;
$2:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  assert {:sourceloc} {:sourceloc_num 4} true;
  v3 := $$C[BV32_ADD(BV32_MUL(BV32_SUB($k.0, 1), 13824), BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  goto $3;
$3:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  $CTOT.0, $k.0 := FADD32($CTOT.0, v3), BV32_ADD($k.0, 1);
  goto $1;
$4:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  assert {:sourceloc} {:sourceloc_num 7} true;
  v4 := $$C[BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x)];
  assert {:sourceloc} {:sourceloc_num 8} true;
  v5 := $$C[BV32_ADD(69120, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 9} true;
  v6 := $$C[BV32_ADD(124416, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 10} true;
  v7 := $$C[BV32_ADD(152064, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 11} true;
  v8 := $$C[BV32_ADD(207360, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 12} true;
  v9 := $$C[BV32_ADD(179712, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 13} true;
  v10 := $$C[BV32_ADD(193536, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  v11 := FP64_CONV32(FADD64(FMUL64(4611686018427387904, FP32_CONV64(v10)), FADD64(FMUL64(4611686018427387904, FP32_CONV64(v9)), FADD64(FMUL64(4611686018427387904, FP32_CONV64(v8)), FP32_CONV64(FSUB32(FADD32(FSUB32(FSUB32($CTOT.0, v4), v5), v6), v7))))));
  assert {:sourceloc} {:sourceloc_num 14} true;
  v12 := $$C[BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x)];
  assert {:sourceloc} {:sourceloc_num 15} true;
  v13 := $$C[BV32_ADD(69120, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 16} true;
  v14 := $$C[BV32_ADD(124416, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 17} true;
  v15 := $$C[BV32_ADD(207360, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 18} true;
  v16 := $$C[BV32_ADD(179712, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 19} true;
  v17 := $$C[BV32_ADD(193536, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  v18 := FP64_CONV32(FADD64(FMUL64(4611686018427387904, FP32_CONV64(v17)), FADD64(FMUL64(4611686018427387904, FP32_CONV64(v16)), FADD64(FMUL64(4611686018427387904, FP32_CONV64(v15)), FP32_CONV64(FADD32(FADD32(FMUL32(1076468122, v13), FADD32(FMUL32(-1098236559, v12), $CTOT.0)), v14))))));
  assert {:sourceloc} {:sourceloc_num 20} true;
  v19 := $$C[BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x)];
  assert {:sourceloc} {:sourceloc_num 21} true;
  v20 := $$C[BV32_ADD(69120, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 22} true;
  v21 := $$C[BV32_ADD(124416, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 23} true;
  v22 := $$C[BV32_ADD(138240, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 24} true;
  v23 := $$C[BV32_ADD(152064, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 25} true;
  v24 := $$C[BV32_ADD(207360, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 26} true;
  v25 := $$C[BV32_ADD(179712, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 27} true;
  v26 := $$C[BV32_ADD(193536, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  v27 := FP64_CONV32(FADD64(FADD64(FADD64(FADD64(FADD64(FADD64(FADD64(FMUL64(4617315517961601024, FP32_CONV64(v20)), FP32_CONV64(FADD32($CTOT.0, v19))), FP32_CONV64(v21)), FMUL64(4602678819172646912, FP32_CONV64(v22))), FP32_CONV64(v23)), FMUL64(4611686018427387904, FP32_CONV64(v24))), FMUL64(4611686018427387904, FP32_CONV64(v25))), FMUL64(4611686018427387904, FP32_CONV64(v26))));
  assert {:sourceloc} {:sourceloc_num 28} true;
  v28 := $$C[BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x)];
  assert {:sourceloc} {:sourceloc_num 29} true;
  v29 := $$C[BV32_ADD(69120, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 30} true;
  v30 := $$C[BV32_ADD(124416, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 31} true;
  v31 := $$C[BV32_ADD(138240, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 32} true;
  v32 := $$C[BV32_ADD(152064, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 33} true;
  v33 := $$C[BV32_ADD(207360, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 34} true;
  v34 := $$C[BV32_ADD(179712, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 35} true;
  v35 := $$C[BV32_ADD(193536, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  v36 := FP64_CONV32(FADD64(FMUL64(4611686018427387904, FP32_CONV64(v35)), FADD64(FMUL64(4611686018427387904, FP32_CONV64(v34)), FADD64(FMUL64(4611686018427387904, FP32_CONV64(v33)), FP32_CONV64(FADD32(FADD32(FADD32(FADD32(FMUL32(1097229926, v29), FADD32(FMUL32(1068708659, v28), $CTOT.0)), v30), FMUL32(1061158912, v31)), FMUL32(1076258406, v32)))))));
  assert {:sourceloc} {:sourceloc_num 36} true;
  v37 := $$C[BV32_ADD(41472, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 37} true;
  v38 := $$C[BV32_ADD(69120, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 38} true;
  v39 := $$C[BV32_ADD(138240, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 39} true;
  v40 := $$C[BV32_ADD(152064, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 40} true;
  v41 := $$C[BV32_ADD(207360, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 41} true;
  v42 := $$C[BV32_ADD(290304, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 42} true;
  v43 := $$C[BV32_ADD(179712, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 43} true;
  v44 := $$C[BV32_ADD(193536, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  v45 := FP64_CONV32(FADD64(FADD64(FSUB64(FADD64(FMUL64(4602678819172646912, FP32_CONV64(v41)), FADD64(FMUL64(4602678819172646912, FP32_CONV64(v40)), FP32_CONV64(FSUB32(FSUB32(FSUB32($CTOT.0, v37), v38), FMUL32(1048576000, v39))))), FP32_CONV64(v42)), FMUL64(4611686018427387904, FP32_CONV64(v43))), FMUL64(4611686018427387904, FP32_CONV64(v44))));
  assert {:sourceloc} {:sourceloc_num 44} true;
  v46 := $$C[BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x)];
  assert {:sourceloc} {:sourceloc_num 45} true;
  v47 := $$C[BV32_ADD(41472, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 46} true;
  v48 := $$C[BV32_ADD(69120, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 47} true;
  v49 := $$C[BV32_ADD(124416, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 48} true;
  v50 := $$C[BV32_ADD(138240, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 49} true;
  v51 := $$C[BV32_ADD(152064, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 50} true;
  v52 := $$C[BV32_ADD(207360, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 51} true;
  v53 := $$C[BV32_ADD(179712, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 52} true;
  v54 := $$C[BV32_ADD(193536, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  v55 := FP64_CONV32(FADD64(FADD64(FADD64(FADD64(FADD64(FADD64(FADD64(FMUL64(4617315517961601024, FP32_CONV64(v48)), FADD64(FMUL64(4617315517961601024, FP32_CONV64(v47)), FP32_CONV64(FADD32($CTOT.0, v46)))), FP32_CONV64(v49)), FMUL64(4602678819172646912, FP32_CONV64(v50))), FP32_CONV64(FMUL32(1075838976, v51))), FMUL64(4611686018427387904, FP32_CONV64(v52))), FMUL64(4611686018427387904, FP32_CONV64(v53))), FMUL64(4611686018427387904, FP32_CONV64(v54))));
  assert {:sourceloc} {:sourceloc_num 53} true;
  v56 := $$C[BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x)];
  assert {:sourceloc} {:sourceloc_num 54} true;
  v57 := $$C[BV32_ADD(69120, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 55} true;
  v58 := $$C[BV32_ADD(124416, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 56} true;
  v59 := $$C[BV32_ADD(138240, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 57} true;
  v60 := $$C[BV32_ADD(152064, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 58} true;
  v61 := $$C[BV32_ADD(207360, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 59} true;
  v62 := $$RF[BV32_ADD(55296, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 60} true;
  v63 := $$C[BV32_ADD(13824, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 61} true;
  v64 := $$C[BV32_ADD(13824, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 62} true;
  $$RF[BV32_ADD(55296, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FMUL32(FMUL32(FMUL32(v62, v11), v63), v64);
  assert {:sourceloc} {:sourceloc_num 63} true;
  v65 := $$RB[BV32_ADD(55296, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 64} true;
  v66 := $$C[BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x)];
  assert {:sourceloc} {:sourceloc_num 65} true;
  $$RB[BV32_ADD(55296, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FMUL32(FMUL32(v65, v11), v66);
  assert {:sourceloc} {:sourceloc_num 66} true;
  v67 := $$RF[BV32_ADD(110592, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 67} true;
  v68 := $$C[BV32_ADD(13824, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 68} true;
  v69 := $$C[BV32_ADD(55296, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 69} true;
  $$RF[BV32_ADD(110592, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FMUL32(FMUL32(FMUL32(v67, v18), v68), v69);
  assert {:sourceloc} {:sourceloc_num 70} true;
  v70 := $$RB[BV32_ADD(110592, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 71} true;
  v71 := $$C[BV32_ADD(69120, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 72} true;
  $$RB[BV32_ADD(110592, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FMUL32(FMUL32(v70, v18), v71);
  assert {:sourceloc} {:sourceloc_num 73} true;
  v72 := $$RF[BV32_ADD(124416, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 74} true;
  v73 := $$C[BV32_ADD(27648, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 75} true;
  v74 := $$C[BV32_ADD(13824, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 76} true;
  $$RF[BV32_ADD(124416, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FMUL32(FMUL32(FMUL32(v72, v27), v73), v74);
  assert {:sourceloc} {:sourceloc_num 77} true;
  v75 := $$RB[BV32_ADD(124416, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 78} true;
  v76 := $$C[BV32_ADD(55296, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 79} true;
  $$RB[BV32_ADD(124416, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FMUL32(FMUL32(v75, v27), v76);
  assert {:sourceloc} {:sourceloc_num 80} true;
  v77 := $$RF[BV32_ADD(138240, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 81} true;
  v78 := $$C[BV32_ADD(27648, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 82} true;
  v79 := $$C[BV32_ADD(27648, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 83} true;
  $$RF[BV32_ADD(138240, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FMUL32(FMUL32(FMUL32(v77, v36), v78), v79);
  assert {:sourceloc} {:sourceloc_num 84} true;
  v80 := $$RB[BV32_ADD(138240, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 85} true;
  v81 := $$C[BV32_ADD(41472, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 86} true;
  $$RB[BV32_ADD(138240, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FMUL32(FMUL32(v80, v36), v81);
  assert {:sourceloc} {:sourceloc_num 87} true;
  v82 := $$RF[BV32_ADD(152064, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 88} true;
  v83 := $$C[BV32_ADD(13824, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 89} true;
  v84 := $$C[BV32_ADD(41472, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 90} true;
  $$RF[BV32_ADD(152064, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FMUL32(FMUL32(FMUL32(v82, v45), v83), v84);
  assert {:sourceloc} {:sourceloc_num 91} true;
  v85 := $$RB[BV32_ADD(152064, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 92} true;
  v86 := $$C[BV32_ADD(82944, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 93} true;
  $$RB[BV32_ADD(152064, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FMUL32(FMUL32(v85, v45), v86);
  assert {:sourceloc} {:sourceloc_num 94} true;
  v87 := $$RF[BV32_ADD(387072, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 95} true;
  v88 := $$C[BV32_ADD(138240, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 96} true;
  v89 := $$C[BV32_ADD(27648, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 97} true;
  $$RF[BV32_ADD(387072, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FMUL32(FMUL32(FMUL32(v87, v55), v88), v89);
  assert {:sourceloc} {:sourceloc_num 98} true;
  v90 := $$RB[BV32_ADD(387072, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 99} true;
  v91 := $$C[BV32_ADD(152064, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 100} true;
  $$RB[BV32_ADD(387072, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FMUL32(FMUL32(v90, v55), v91);
  assert {:sourceloc} {:sourceloc_num 101} true;
  v92 := $$RF[BV32_ADD(622080, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 102} true;
  $$RF[BV32_ADD(622080, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FMUL32(v92, v27);
  assert {:sourceloc} {:sourceloc_num 103} true;
  v93 := $$RB[BV32_ADD(622080, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 104} true;
  v94 := $$C[BV32_ADD(138240, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 105} true;
  v95 := $$C[BV32_ADD(13824, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 106} true;
  $$RB[BV32_ADD(622080, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FMUL32(FMUL32(FMUL32(v93, v27), v94), v95);
  assert {:sourceloc} {:sourceloc_num 107} true;
  v96 := $$RF[BV32_ADD(1658880, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 108} true;
  v97 := $$C[BV32_ADD(179712, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 109} true;
  v98 := $$C[BV32_ADD(110592, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 110} true;
  $$RF[BV32_ADD(1658880, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FMUL32(FMUL32(FMUL32(v96, $CTOT.0), v97), v98);
  assert {:sourceloc} {:sourceloc_num 111} true;
  v99 := $$RB[BV32_ADD(1658880, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 112} true;
  v100 := $$C[BV32_ADD(262656, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 113} true;
  $$RB[BV32_ADD(1658880, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FMUL32(FMUL32(v99, $CTOT.0), v100);
  assert {:sourceloc} {:sourceloc_num 114} true;
  v101 := $$RKLOW[BV32_ADD(165888, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 115} true;
  v102 := $$RF[BV32_ADD(1728000, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  v103 := FMUL32(v101, FMUL32(v27, FDIV32(1065353216, v102)));
  call {:sourceloc_num 116}   v104 := $__log10_float((if FLT32(v103, 8388608) then 8388608 else v103));
  v105 := FADD32(FADD32(FMUL32(1059699294, FEXP32(FMUL32(FMUL32(FSUB32(-2147483648, v1), 974754284), 1069066811))), FMUL32(1051495236, FEXP32(FMUL32(FMUL32(FSUB32(-2147483648, v1), 967038730), 1069066811)))), FEXP32(FMUL32(FMUL32(-981395456, FDIV32(1065353216, v1)), 1069066811)));
  call {:sourceloc_num 117}   v106 := $__log10_float((if FLT32(v105, 8388608) then 8388608 else v105));
  v107 := FP64_CONV32(FSUB64(FP32_CONV64(v104), FADD64(FMUL64(4604210043045952881, FP32_CONV64(v106)), 4600877379321698714)));
  v108 := FP64_CONV32(FMUL64(FP32_CONV64(v107), FDIV64(4607182418800017408, FADD64(FMUL64(-4629159984981585428, FP32_CONV64(v107)), FP32_CONV64(FP64_CONV32(FADD64(FMUL64(-4614973646155368366, FP32_CONV64(v106)), 4604930618986332160)))))));
  v109 := FMUL32(FEXP32(FMUL32(FP64_CONV32(FMUL64(FP32_CONV64(v106), FDIV64(4607182418800017408, FADD64(4607182418800017408, FP32_CONV64(FMUL32(v108, v108)))))), 1079286392)), FP64_CONV32(FMUL64(FP32_CONV64(v103), FDIV64(4607182418800017408, FADD64(4607182418800017408, FP32_CONV64(v103))))));
  assert {:sourceloc} {:sourceloc_num 118} true;
  v110 := $$RF[BV32_ADD(1728000, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 119} true;
  $$RF[BV32_ADD(1728000, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FMUL32(v110, v109);
  assert {:sourceloc} {:sourceloc_num 120} true;
  v111 := $$RB[BV32_ADD(1728000, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 121} true;
  $$RB[BV32_ADD(1728000, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FMUL32(v111, v109);
  assert {:sourceloc} {:sourceloc_num 122} true;
  v112 := $$RKLOW[BV32_ADD(179712, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 123} true;
  v113 := $$RF[BV32_ADD(1810944, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  v114 := FMUL32(v112, FMUL32(v27, FDIV32(1065353216, v113)));
  call {:sourceloc_num 124}   v115 := $__log10_float((if FLT32(v114, 8388608) then 8388608 else v114));
  v116 := FADD32(FADD32(FMUL32(1046428516, FEXP32(FMUL32(FMUL32(FSUB32(-2147483648, v1), 1000205063), 1069066811))), FMUL32(1061695783, FEXP32(FMUL32(FMUL32(FSUB32(-2147483648, v1), 969203955), 1069066811)))), FEXP32(FMUL32(FMUL32(-977373184, FDIV32(1065353216, v1)), 1069066811)));
  call {:sourceloc_num 125}   v117 := $__log10_float((if FLT32(v116, 8388608) then 8388608 else v116));
  v118 := FP64_CONV32(FSUB64(FP32_CONV64(v115), FADD64(FMUL64(4604210043045952881, FP32_CONV64(v117)), 4600877379321698714)));
  v119 := FP64_CONV32(FMUL64(FP32_CONV64(v118), FDIV64(4607182418800017408, FADD64(FMUL64(-4629159984981585428, FP32_CONV64(v118)), FP32_CONV64(FP64_CONV32(FADD64(FMUL64(-4614973646155368366, FP32_CONV64(v117)), 4604930618986332160)))))));
  v120 := FMUL32(FEXP32(FMUL32(FP64_CONV32(FMUL64(FP32_CONV64(v117), FDIV64(4607182418800017408, FADD64(4607182418800017408, FP32_CONV64(FMUL32(v119, v119)))))), 1079286392)), FP64_CONV32(FMUL64(FP32_CONV64(v114), FDIV64(4607182418800017408, FADD64(4607182418800017408, FP32_CONV64(v114))))));
  assert {:sourceloc} {:sourceloc_num 126} true;
  v121 := $$RF[BV32_ADD(1810944, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 127} true;
  $$RF[BV32_ADD(1810944, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FMUL32(v121, v120);
  assert {:sourceloc} {:sourceloc_num 128} true;
  v122 := $$RB[BV32_ADD(1810944, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 129} true;
  $$RB[BV32_ADD(1810944, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FMUL32(v122, v120);
  assert {:sourceloc} {:sourceloc_num 130} true;
  v123 := $$RKLOW[BV32_ADD(193536, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 131} true;
  v124 := $$RF[BV32_ADD(1990656, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  v125 := FMUL32(v123, FMUL32(v27, FDIV32(1065353216, v124)));
  call {:sourceloc_num 132}   v126 := $__log10_float((if FLT32(v125, 8388608) then 8388608 else v125));
  v127 := FADD32(FADD32(FMUL32(1062417203, FEXP32(FMUL32(FMUL32(FSUB32(-2147483648, v1), 977504980), 1069066811))), FMUL32(1043542835, FEXP32(FMUL32(FMUL32(FSUB32(-2147483648, v1), 931909477), 1069066811)))), FEXP32(FMUL32(FMUL32(-971083981, FDIV32(1065353216, v1)), 1069066811)));
  call {:sourceloc_num 133}   v128 := $__log10_float((if FLT32(v127, 8388608) then 8388608 else v127));
  v129 := FP64_CONV32(FSUB64(FP32_CONV64(v126), FADD64(FMUL64(4604210043045952881, FP32_CONV64(v128)), 4600877379321698714)));
  v130 := FP64_CONV32(FMUL64(FP32_CONV64(v129), FDIV64(4607182418800017408, FADD64(FMUL64(-4629159984981585428, FP32_CONV64(v129)), FP32_CONV64(FP64_CONV32(FADD64(FMUL64(-4614973646155368366, FP32_CONV64(v128)), 4604930618986332160)))))));
  v131 := FMUL32(FEXP32(FMUL32(FP64_CONV32(FMUL64(FP32_CONV64(v128), FDIV64(4607182418800017408, FADD64(4607182418800017408, FP32_CONV64(FMUL32(v130, v130)))))), 1079286392)), FP64_CONV32(FMUL64(FP32_CONV64(v125), FDIV64(4607182418800017408, FADD64(4607182418800017408, FP32_CONV64(v125))))));
  assert {:sourceloc} {:sourceloc_num 134} true;
  v132 := $$RF[BV32_ADD(1990656, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 135} true;
  $$RF[BV32_ADD(1990656, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FMUL32(v132, v131);
  assert {:sourceloc} {:sourceloc_num 136} true;
  v133 := $$RB[BV32_ADD(1990656, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 137} true;
  $$RB[BV32_ADD(1990656, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FMUL32(v133, v131);
  assert {:sourceloc} {:sourceloc_num 138} true;
  v134 := $$RKLOW[BV32_ADD(207360, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 139} true;
  v135 := $$RF[BV32_ADD(2032128, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  v136 := FMUL32(v134, FMUL32(v27, FDIV32(1065353216, v135)));
  call {:sourceloc_num 140}   v137 := $__log10_float((if FLT32(v136, 8388608) then 8388608 else v136));
  v138 := FADD32(FADD32(FMUL32(1055286886, FEXP32(FMUL32(FMUL32(FSUB32(-2147483648, v1), 954966675), 1069066811))), FMUL32(1057803469, FEXP32(FMUL32(FMUL32(FSUB32(-2147483648, v1), 963710285), 1069066811)))), FEXP32(FMUL32(FMUL32(-975020032, FDIV32(1065353216, v1)), 1069066811)));
  call {:sourceloc_num 141}   v139 := $__log10_float((if FLT32(v138, 8388608) then 8388608 else v138));
  v140 := FP64_CONV32(FSUB64(FP32_CONV64(v137), FADD64(FMUL64(4604210043045952881, FP32_CONV64(v139)), 4600877379321698714)));
  v141 := FP64_CONV32(FMUL64(FP32_CONV64(v140), FDIV64(4607182418800017408, FADD64(FMUL64(-4629159984981585428, FP32_CONV64(v140)), FP32_CONV64(FP64_CONV32(FADD64(FMUL64(-4614973646155368366, FP32_CONV64(v139)), 4604930618986332160)))))));
  v142 := FMUL32(FEXP32(FMUL32(FP64_CONV32(FMUL64(FP32_CONV64(v139), FDIV64(4607182418800017408, FADD64(4607182418800017408, FP32_CONV64(FMUL32(v141, v141)))))), 1079286392)), FP64_CONV32(FMUL64(FP32_CONV64(v136), FDIV64(4607182418800017408, FADD64(4607182418800017408, FP32_CONV64(v136))))));
  assert {:sourceloc} {:sourceloc_num 142} true;
  v143 := $$RF[BV32_ADD(2032128, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 143} true;
  $$RF[BV32_ADD(2032128, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FMUL32(v143, v142);
  assert {:sourceloc} {:sourceloc_num 144} true;
  v144 := $$RB[BV32_ADD(2032128, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 145} true;
  $$RB[BV32_ADD(2032128, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FMUL32(v144, v142);
  assert {:sourceloc} {:sourceloc_num 146} true;
  v145 := $$RKLOW[BV32_ADD(221184, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 147} true;
  v146 := $$RF[BV32_ADD(2128896, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  v147 := FMUL32(v145, FMUL32(v27, FDIV32(1065353216, v146)));
  call {:sourceloc_num 148}   v148 := $__log10_float((if FLT32(v147, 8388608) then 8388608 else v147));
  v149 := FADD32(FADD32(FMUL32(1049096094, FEXP32(FMUL32(FMUL32(FSUB32(-2147483648, v1), 1001786209), 1069066811))), FMUL32(1060898865, FEXP32(FMUL32(FMUL32(FSUB32(-2147483648, v1), 981288827), 1069066811)))), FEXP32(FMUL32(FMUL32(-978761728, FDIV32(1065353216, v1)), 1069066811)));
  call {:sourceloc_num 149}   v150 := $__log10_float((if FLT32(v149, 8388608) then 8388608 else v149));
  v151 := FP64_CONV32(FSUB64(FP32_CONV64(v148), FADD64(FMUL64(4604210043045952881, FP32_CONV64(v150)), 4600877379321698714)));
  v152 := FP64_CONV32(FMUL64(FP32_CONV64(v151), FDIV64(4607182418800017408, FADD64(FMUL64(-4629159984981585428, FP32_CONV64(v151)), FP32_CONV64(FP64_CONV32(FADD64(FMUL64(-4614973646155368366, FP32_CONV64(v150)), 4604930618986332160)))))));
  v153 := FMUL32(FEXP32(FMUL32(FP64_CONV32(FMUL64(FP32_CONV64(v150), FDIV64(4607182418800017408, FADD64(4607182418800017408, FP32_CONV64(FMUL32(v152, v152)))))), 1079286392)), FP64_CONV32(FMUL64(FP32_CONV64(v147), FDIV64(4607182418800017408, FADD64(4607182418800017408, FP32_CONV64(v147))))));
  assert {:sourceloc} {:sourceloc_num 150} true;
  v154 := $$RF[BV32_ADD(2128896, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 151} true;
  $$RF[BV32_ADD(2128896, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FMUL32(v154, v153);
  assert {:sourceloc} {:sourceloc_num 152} true;
  v155 := $$RB[BV32_ADD(2128896, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 153} true;
  $$RB[BV32_ADD(2128896, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FMUL32(v155, v153);
  assert {:sourceloc} {:sourceloc_num 154} true;
  v156 := $$RKLOW[BV32_ADD(235008, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 155} true;
  v157 := $$RF[BV32_ADD(2142720, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  v158 := FMUL32(v156, FMUL32(v27, FDIV32(1065353216, v157)));
  call {:sourceloc_num 156}   v159 := $__log10_float((if FLT32(v158, 8388608) then 8388608 else v158));
  v160 := FADD32(FADD32(FMUL32(1019893672, FEXP32(FMUL32(FMUL32(FSUB32(-2147483648, v1), 1000081857), 1069066811))), FMUL32(1064938819, FEXP32(FMUL32(FMUL32(FSUB32(-2147483648, v1), 981808136), 1069066811)))), FEXP32(FMUL32(FMUL32(-980897792, FDIV32(1065353216, v1)), 1069066811)));
  call {:sourceloc_num 157}   v161 := $__log10_float((if FLT32(v160, 8388608) then 8388608 else v160));
  v162 := FP64_CONV32(FSUB64(FP32_CONV64(v159), FADD64(FMUL64(4604210043045952881, FP32_CONV64(v161)), 4600877379321698714)));
  v163 := FP64_CONV32(FMUL64(FP32_CONV64(v162), FDIV64(4607182418800017408, FADD64(FMUL64(-4629159984981585428, FP32_CONV64(v162)), FP32_CONV64(FP64_CONV32(FADD64(FMUL64(-4614973646155368366, FP32_CONV64(v161)), 4604930618986332160)))))));
  v164 := FMUL32(FEXP32(FMUL32(FP64_CONV32(FMUL64(FP32_CONV64(v161), FDIV64(4607182418800017408, FADD64(4607182418800017408, FP32_CONV64(FMUL32(v163, v163)))))), 1079286392)), FP64_CONV32(FMUL64(FP32_CONV64(v158), FDIV64(4607182418800017408, FADD64(4607182418800017408, FP32_CONV64(v158))))));
  assert {:sourceloc} {:sourceloc_num 158} true;
  v165 := $$RF[BV32_ADD(2142720, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 159} true;
  $$RF[BV32_ADD(2142720, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FMUL32(v165, v164);
  assert {:sourceloc} {:sourceloc_num 160} true;
  v166 := $$RB[BV32_ADD(2142720, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 161} true;
  $$RB[BV32_ADD(2142720, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FMUL32(v166, v164);
  assert {:sourceloc} {:sourceloc_num 162} true;
  v167 := $$RKLOW[BV32_ADD(248832, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 163} true;
  v168 := $$RF[BV32_ADD(2336256, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  v169 := FMUL32(v167, FMUL32(v27, FDIV32(1065353216, v168)));
  call {:sourceloc_num 164}   v170 := $__log10_float((if FLT32(v169, 8388608) then 8388608 else v169));
  v171 := FADD32(FADD32(FMUL32(1042388563, FEXP32(FMUL32(FMUL32(FSUB32(-2147483648, v1), 1006834287), 1069066811))), FMUL32(1062705771, FEXP32(FMUL32(FMUL32(FSUB32(-2147483648, v1), 971785647), 1069066811)))), FEXP32(FMUL32(FMUL32(-975761408, FDIV32(1065353216, v1)), 1069066811)));
  call {:sourceloc_num 165}   v172 := $__log10_float((if FLT32(v171, 8388608) then 8388608 else v171));
  v173 := FP64_CONV32(FSUB64(FP32_CONV64(v170), FADD64(FMUL64(4604210043045952881, FP32_CONV64(v172)), 4600877379321698714)));
  v174 := FP64_CONV32(FMUL64(FP32_CONV64(v173), FDIV64(4607182418800017408, FADD64(FMUL64(-4629159984981585428, FP32_CONV64(v173)), FP32_CONV64(FP64_CONV32(FADD64(FMUL64(-4614973646155368366, FP32_CONV64(v172)), 4604930618986332160)))))));
  v175 := FMUL32(FEXP32(FMUL32(FP64_CONV32(FMUL64(FP32_CONV64(v172), FDIV64(4607182418800017408, FADD64(4607182418800017408, FP32_CONV64(FMUL32(v174, v174)))))), 1079286392)), FP64_CONV32(FMUL64(FP32_CONV64(v169), FDIV64(4607182418800017408, FADD64(4607182418800017408, FP32_CONV64(v169))))));
  assert {:sourceloc} {:sourceloc_num 166} true;
  v176 := $$RF[BV32_ADD(2336256, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 167} true;
  $$RF[BV32_ADD(2336256, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FMUL32(v176, v175);
  assert {:sourceloc} {:sourceloc_num 168} true;
  v177 := $$RB[BV32_ADD(2336256, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 169} true;
  $$RB[BV32_ADD(2336256, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FMUL32(v177, v175);
  assert {:sourceloc} {:sourceloc_num 170} true;
  v178 := $$RKLOW[BV32_ADD(262656, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 171} true;
  v179 := $$RF[BV32_ADD(2543616, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  v180 := FMUL32(v178, FMUL32(v27, FDIV32(1065353216, v179)));
  call {:sourceloc_num 172}   v181 := $__log10_float((if FLT32(v180, 8388608) then 8388608 else v180));
  v182 := FP64_CONV32(FADD64(FADD64(FMUL64(4581421828931458171, FP32_CONV64(FEXP32(FMUL32(FMUL32(FSUB32(-2147483648, v1), 980356407), 1069066811)))), FP32_CONV64(FMUL32(1065017672, FEXP32(FMUL32(FMUL32(FSUB32(-2147483648, v1), 980356407), 1069066811))))), FP32_CONV64(FEXP32(FMUL32(FMUL32(-975807488, FDIV32(1065353216, v1)), 1069066811)))));
  call {:sourceloc_num 173}   v183 := $__log10_float((if FLT32(v182, 8388608) then 8388608 else v182));
  v184 := FP64_CONV32(FSUB64(FP32_CONV64(v181), FADD64(FMUL64(4604210043045952881, FP32_CONV64(v183)), 4600877379321698714)));
  v185 := FP64_CONV32(FMUL64(FP32_CONV64(v184), FDIV64(4607182418800017408, FADD64(FMUL64(-4629159984981585428, FP32_CONV64(v184)), FP32_CONV64(FP64_CONV32(FADD64(FMUL64(-4614973646155368366, FP32_CONV64(v183)), 4604930618986332160)))))));
  v186 := FMUL32(FEXP32(FMUL32(FP64_CONV32(FMUL64(FP32_CONV64(v183), FDIV64(4607182418800017408, FADD64(4607182418800017408, FP32_CONV64(FMUL32(v185, v185)))))), 1079286392)), FP64_CONV32(FMUL64(FP32_CONV64(v180), FDIV64(4607182418800017408, FADD64(4607182418800017408, FP32_CONV64(v180))))));
  assert {:sourceloc} {:sourceloc_num 174} true;
  v187 := $$RF[BV32_ADD(2543616, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 175} true;
  $$RF[BV32_ADD(2543616, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FMUL32(v187, v186);
  assert {:sourceloc} {:sourceloc_num 176} true;
  v188 := $$RB[BV32_ADD(2543616, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 177} true;
  $$RB[BV32_ADD(2543616, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FMUL32(v188, v186);
  assert {:sourceloc} {:sourceloc_num 178} true;
  v189 := $$RKLOW[BV32_ADD(276480, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 179} true;
  v190 := $$RF[BV32_ADD(2612736, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  v191 := FMUL32(v189, FMUL32(FP64_CONV32(FADD64(FADD64(FADD64(FADD64(FADD64(FMUL64(4617315517961601024, FP32_CONV64(v57)), FP32_CONV64(FADD32($CTOT.0, v56))), FP32_CONV64(v58)), FMUL64(4602678819172646912, FP32_CONV64(v59))), FP32_CONV64(v60)), FMUL64(4611686018427387904, FP32_CONV64(v61)))), FDIV32(1065353216, v190)));
  call {:sourceloc_num 180}   v192 := $__log10_float((if FLT32(v191, 8388608) then 8388608 else v191));
  v193 := FP64_CONV32(FADD64(FADD64(FMUL64(0, FP32_CONV64(FEXP32(FMUL32(FMUL32(FSUB32(-2147483648, v1), 981668463), 1069066811)))), FMUL64(4607182418800017408, FP32_CONV64(FEXP32(FMUL32(FMUL32(FSUB32(-2147483648, v1), 977804324), 1069066811))))), FP32_CONV64(FEXP32(FMUL32(FMUL32(-952377088, FDIV32(1065353216, v1)), 1069066811)))));
  call {:sourceloc_num 181}   v194 := $__log10_float((if FLT32(v193, 8388608) then 8388608 else v193));
  v195 := FP64_CONV32(FSUB64(FP32_CONV64(v192), FADD64(FMUL64(4604210043045952881, FP32_CONV64(v194)), 4600877379321698714)));
  v196 := FP64_CONV32(FMUL64(FP32_CONV64(v195), FDIV64(4607182418800017408, FADD64(FMUL64(-4629159984981585428, FP32_CONV64(v195)), FP32_CONV64(FP64_CONV32(FADD64(FMUL64(-4614973646155368366, FP32_CONV64(v194)), 4604930618986332160)))))));
  v197 := FMUL32(FEXP32(FMUL32(FP64_CONV32(FMUL64(FP32_CONV64(v194), FDIV64(4607182418800017408, FADD64(4607182418800017408, FP32_CONV64(FMUL32(v196, v196)))))), 1079286392)), FP64_CONV32(FMUL64(FP32_CONV64(v191), FDIV64(4607182418800017408, FADD64(4607182418800017408, FP32_CONV64(v191))))));
  assert {:sourceloc} {:sourceloc_num 182} true;
  v198 := $$RF[BV32_ADD(2612736, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 183} true;
  $$RF[BV32_ADD(2612736, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FMUL32(v198, v197);
  assert {:sourceloc} {:sourceloc_num 184} true;
  v199 := $$RB[BV32_ADD(2612736, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 185} true;
  $$RB[BV32_ADD(2612736, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))] := FMUL32(v199, v197);
  return;
$truebb:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 186} true;
  goto $2;
$falsebb:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 187} true;
  goto $4;
}
procedure {:source_name "__log10_float"} $__log10_float($0:int) returns ($ret:int);
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 128 then 1 else 0) != 0;
axiom (if num_groups_x == 108 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
