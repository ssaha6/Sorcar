type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "force"} {:global} $$force : [int]int;
axiom {:array_info "$$force"} {:global} {:elem_width 32} {:source_name "force"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$force : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$force : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$force : bool;

var {:source_name "position"} {:global} $$position : [int]int;
axiom {:array_info "$$position"} {:global} {:elem_width 32} {:source_name "position"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$position : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$position : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$position : bool;

var {:source_name "neighList"} {:global} $$neighList : [int]int;
axiom {:array_info "$$neighList"} {:global} {:elem_width 32} {:source_name "neighList"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$neighList : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$neighList : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$neighList : bool;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function BV_CONCAT(int, int) : int;
function BV_EXTRACT(int, int, int) : int;
function FADD32(int, int) : int;
function FDIV32(int, int) : int;
function FLT32(int, int) : bool;
function FMUL32(int, int) : int;
function FSUB32(int, int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SLT(x : int, y : int) : bool {
  x < y
}
procedure {:source_name "compute_lj_force"} {:kernel} $compute_lj_force($neighCount:int, $cutsq:int, $lj1:int, $lj2:int, $inum:int)
requires {:sourceloc_num 0} (if $neighCount == 128 then 1 else 0) != 0;
requires {:sourceloc_num 1} (if $inum == 12288 then 1 else 0) != 0;
{
  var $f.0:int;
  var $j.0:int;
  var $f.1:int;
  var v0:int;
  var v1:int;
  var v2:int;
  var v3:int;
  var v4:int;
  var v5:bool;
  var v6:int;
  var v7:int;
  var v8:int;
  var v9:int;
  var v10:int;
  var v11:int;
  var v12:int;
  var v13:int;
  var v14:int;
  var v15:bool;
  var v16:int;
  var v17:int;
  var v18:int;
  var v19:int;
  var v20:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  assert {:sourceloc} {:sourceloc_num 3} true;
  v1 := $$position[BV32_MUL(v0, 4)];
  assert {:sourceloc} {:sourceloc_num 4} true;
  v2 := $$position[BV32_ADD(BV32_MUL(v0, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 5} true;
  v3 := $$position[BV32_ADD(BV32_MUL(v0, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 6} true;
  v4 := $$position[BV32_ADD(BV32_MUL(v0, 4), 3)];
  $f.0, $j.0 := 0, 0;
  goto $1;
$1:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  v5 := BV32_SLT($j.0, $neighCount);
  goto $truebb, $falsebb;
$2:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  assert {:sourceloc} {:sourceloc_num 9} true;
  v6 := $$neighList[BV32_ADD(BV32_MUL($j.0, $inum), v0)];
  assert {:sourceloc} {:sourceloc_num 10} true;
  v7 := $$position[BV32_MUL(v6, 4)];
  assert {:sourceloc} {:sourceloc_num 11} true;
  v8 := $$position[BV32_ADD(BV32_MUL(v6, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 12} true;
  v9 := $$position[BV32_ADD(BV32_MUL(v6, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 13} true;
  v10 := $$position[BV32_ADD(BV32_MUL(v6, 4), 3)];
  v11 := FSUB32(v1, v7);
  v12 := FSUB32(v2, v8);
  v13 := FSUB32(v3, v9);
  v14 := FADD32(FMUL32(v13, v13), FADD32(FMUL32(v11, v11), FMUL32(v12, v12)));
  v15 := FLT32(v14, $cutsq);
  goto $truebb0, $falsebb0;
$3:
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  v16 := FDIV32(1065353216, v14);
  v17 := FMUL32(FMUL32(v16, v16), v16);
  v18 := FMUL32(FMUL32(v16, v17), FADD32(FMUL32($lj1, v17), FSUB32(-2147483648, $lj2)));
  v19 := BV_EXTRACT($f.0, 64, 32);
  v20 := BV_EXTRACT($f.0, 96, 64);
  $f.1 := BV_CONCAT(BV_CONCAT(BV_CONCAT(BV_EXTRACT($f.0, 128, 96), FADD32(v20, FMUL32(v13, v18))), FADD32(v19, FMUL32(v12, v18))), FADD32(BV_EXTRACT($f.0, 32, 0), FMUL32(v11, v18)));
  goto $4;
$4:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  $f.0, $j.0 := $f.1, BV32_ADD($j.0, 1);
  goto $1;
$5:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  assert {:sourceloc} {:sourceloc_num 17} true;
  $$force[BV32_MUL(v0, 4)] := BV_EXTRACT($f.0, 32, 0);
  assert {:sourceloc} {:sourceloc_num 18} true;
  $$force[BV32_ADD(BV32_MUL(v0, 4), 1)] := BV_EXTRACT($f.0, 64, 32);
  assert {:sourceloc} {:sourceloc_num 19} true;
  $$force[BV32_ADD(BV32_MUL(v0, 4), 2)] := BV_EXTRACT($f.0, 96, 64);
  assert {:sourceloc} {:sourceloc_num 20} true;
  $$force[BV32_ADD(BV32_MUL(v0, 4), 3)] := BV_EXTRACT($f.0, 128, 96);
  return;
$truebb:
  assume {:partition} v5;
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  goto $2;
$falsebb:
  assume {:partition} !v5;
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  goto $5;
$truebb0:
  assume {:partition} v15;
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  goto $3;
$falsebb0:
  assume {:partition} !v15;
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  $f.1 := $f.0;
  goto $4;
}
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 128 then 1 else 0) != 0;
axiom (if num_groups_x == 96 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
