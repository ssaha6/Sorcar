type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "in"} {:global} $$in : [int]int;
axiom {:array_info "$$in"} {:global} {:elem_width 32} {:source_name "in"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$in : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$in : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$in : bool;

var {:source_name "isums"} {:global} $$isums : [int]int;
axiom {:array_info "$$isums"} {:global} {:elem_width 32} {:source_name "isums"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$isums : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$isums : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$isums : bool;

var {:source_name "lmem"} {:group_shared} $$lmem : [int]int;
axiom {:array_info "$$lmem"} {:group_shared} {:elem_width 32} {:source_name "lmem"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$lmem : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$lmem : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$lmem : bool;

var {:source_name "digit_counts"} $$digit_counts : [int]int;
axiom {:array_info "$$digit_counts"} {:elem_width 32} {:source_name "digit_counts"} {:source_elem_width 32} {:source_dimensions "16"} true;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function  BV32_LSHR(int, int) : int;
function {:inline true} BV1_XOR(x : int, y : int) : int {
  if (x == 1 || x == -1) && (y == 1 || y == -1) then 0 else (
    if (x == 1 || x == -1) && y == 0 then 1 else (
      if x == 0 && (y == 1 || y == -1) then 1 else (
        if x == y then 0 else BV1_XOR_UF(x, y))))
}
function BV1_XOR_UF(int, int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_AND(x : int, y : int) : int {
  if x == y then x else (if x == 0 || y == 0 then 0 else BV32_AND_UF(x, y))
}
function BV32_AND_UF(int, int) : int;
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_SLT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV32_SUB(x : int, y : int) : int {
  x - y
}
function {:inline true} BV32_UDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_UGT(x : int, y : int) : bool {
  x > y
}
function {:inline true} BV32_ULT(x : int, y : int) : bool {
  x < y
}
procedure {:source_name "reduce"} {:kernel} $reduce($n:int, $shift:int)
requires {:sourceloc_num 0} (if $n == 262144 then 1 else 0) != 0;
{
  var $0:int;
  var $i.0:int;
  var $d.0:int;
  var $s.0:int;
  var v0:int;
  var v1:int;
  var v2:bool;
  var v3:int;
  var v4:bool;
  var v5:int;
  var v6:int;
  var v7:int;
  var v8:bool;
  var v9:int;
  var v10:bool;
  var v11:bool;
  var v12:int;
  var v13:int;
  var v14:bool;
  var v15:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  v0 := BV32_MUL(BV32_UDIV(BV32_SDIV($n, 4), num_groups_x), 4);
  v1 := BV32_MUL(group_id_x, v0);
  v2 := group_id_x == BV32_SUB(num_groups_x, 1);
  goto $truebb, $falsebb;
$1:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  $0 := $n;
  goto $3;
$2:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  $0 := BV32_ADD(v1, v0);
  goto $3;
$3:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  v3 := local_id_x;
  assert {:sourceloc} {:sourceloc_num 5} true;
  $$digit_counts[0] := 0;
  assert {:sourceloc} {:sourceloc_num 6} true;
  $$digit_counts[1] := 0;
  assert {:sourceloc} {:sourceloc_num 7} true;
  $$digit_counts[2] := 0;
  assert {:sourceloc} {:sourceloc_num 8} true;
  $$digit_counts[3] := 0;
  assert {:sourceloc} {:sourceloc_num 9} true;
  $$digit_counts[4] := 0;
  assert {:sourceloc} {:sourceloc_num 10} true;
  $$digit_counts[5] := 0;
  assert {:sourceloc} {:sourceloc_num 11} true;
  $$digit_counts[6] := 0;
  assert {:sourceloc} {:sourceloc_num 12} true;
  $$digit_counts[7] := 0;
  assert {:sourceloc} {:sourceloc_num 13} true;
  $$digit_counts[8] := 0;
  assert {:sourceloc} {:sourceloc_num 14} true;
  $$digit_counts[9] := 0;
  assert {:sourceloc} {:sourceloc_num 15} true;
  $$digit_counts[10] := 0;
  assert {:sourceloc} {:sourceloc_num 16} true;
  $$digit_counts[11] := 0;
  assert {:sourceloc} {:sourceloc_num 17} true;
  $$digit_counts[12] := 0;
  assert {:sourceloc} {:sourceloc_num 18} true;
  $$digit_counts[13] := 0;
  assert {:sourceloc} {:sourceloc_num 19} true;
  $$digit_counts[14] := 0;
  assert {:sourceloc} {:sourceloc_num 20} true;
  $$digit_counts[15] := 0;
  $i.0 := BV32_ADD(v1, v3);
  goto $4;
$4:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  v4 := BV32_SLT($i.0, $0);
  goto $truebb0, $falsebb0;
$5:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  assert {:sourceloc} {:sourceloc_num 23} true;
  v5 := $$in[$i.0];
  v6 := BV32_AND(BV32_LSHR(v5, BV32_AND($shift, 31)), 15);
  assert {:sourceloc} {:sourceloc_num 24} true;
  v7 := $$digit_counts[v6];
  assert {:sourceloc} {:sourceloc_num 25} true;
  $$digit_counts[v6] := BV32_ADD(v7, 1);
  $i.0 := BV32_ADD($i.0, group_size_x);
  goto $4;
$6:
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  $d.0 := 0;
  goto $7;
$7:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  assert {:originated_from_invariant} {:sourceloc_num 28} (if (v3 != 0 ==> BV1_XOR((if _WRITE_HAS_OCCURRED_$$isums then 1 else 0), -1) == 1) then 1 else 0) != 0;
  assert {:originated_from_invariant} {:sourceloc_num 29} (if (v3 != 0 ==> BV1_XOR((if _READ_HAS_OCCURRED_$$lmem then 1 else 0), -1) == 1) then 1 else 0) != 0;
  v8 := BV32_SLT($d.0, 16);
  goto $truebb1, $falsebb1;
$8:
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  assert {:sourceloc} {:sourceloc_num 31} true;
  v9 := $$digit_counts[$d.0];
  assert {:sourceloc} {:sourceloc_num 32} true;
  $$lmem[v3] := v9;
  call {:sourceloc_num 33} $bugle_barrier(-1, 0);
  $s.0 := BV32_UDIV(group_size_x, 2);
  goto $9;
$9:
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  v10 := BV32_UGT($s.0, 0);
  goto $truebb2, $falsebb2;
$10:
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  v11 := BV32_ULT(v3, $s.0);
  goto $truebb3, $falsebb3;
$11:
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  assert {:sourceloc} {:sourceloc_num 37} true;
  v12 := $$lmem[BV32_ADD(v3, $s.0)];
  assert {:sourceloc} {:sourceloc_num 38} true;
  v13 := $$lmem[v3];
  assert {:sourceloc} {:sourceloc_num 39} true;
  $$lmem[v3] := BV32_ADD(v13, v12);
  goto $12;
$12:
  assert {:block_sourceloc} {:sourceloc_num 40} true;
  call {:sourceloc_num 41} $bugle_barrier(-1, 0);
  goto $13;
$13:
  assert {:block_sourceloc} {:sourceloc_num 42} true;
  $s.0 := BV32_LSHR($s.0, 1);
  goto $9;
$14:
  assert {:block_sourceloc} {:sourceloc_num 43} true;
  v14 := v3 == 0;
  goto $truebb4, $falsebb4;
$15:
  assert {:block_sourceloc} {:sourceloc_num 44} true;
  assert {:sourceloc} {:sourceloc_num 45} true;
  v15 := $$lmem[0];
  assert {:sourceloc} {:sourceloc_num 46} true;
  $$isums[BV32_ADD(BV32_MUL($d.0, num_groups_x), group_id_x)] := v15;
  goto $16;
$16:
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  goto $17;
$17:
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  $d.0 := BV32_ADD($d.0, 1);
  goto $7;
$18:
  assert {:block_sourceloc} {:sourceloc_num 49} true;
  return;
$truebb:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 50} true;
  goto $1;
$falsebb:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 51} true;
  goto $2;
$truebb0:
  assume {:partition} v4;
  assert {:block_sourceloc} {:sourceloc_num 52} true;
  goto $5;
$falsebb0:
  assume {:partition} !v4;
  assert {:block_sourceloc} {:sourceloc_num 53} true;
  goto $6;
$truebb1:
  assume {:partition} v8;
  assert {:block_sourceloc} {:sourceloc_num 54} true;
  goto $8;
$falsebb1:
  assume {:partition} !v8;
  assert {:block_sourceloc} {:sourceloc_num 55} true;
  goto $18;
$truebb2:
  assume {:partition} v10;
  assert {:block_sourceloc} {:sourceloc_num 56} true;
  goto $10;
$falsebb2:
  assume {:partition} !v10;
  assert {:block_sourceloc} {:sourceloc_num 57} true;
  goto $14;
$truebb3:
  assume {:partition} v11;
  assert {:block_sourceloc} {:sourceloc_num 58} true;
  goto $11;
$falsebb3:
  assume {:partition} !v11;
  assert {:block_sourceloc} {:sourceloc_num 59} true;
  goto $12;
$truebb4:
  assume {:partition} v14;
  assert {:block_sourceloc} {:sourceloc_num 60} true;
  goto $15;
$falsebb4:
  assume {:partition} !v14;
  assert {:block_sourceloc} {:sourceloc_num 61} true;
  goto $16;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:int, $1:int);
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 256 then 1 else 0) != 0;
axiom (if num_groups_x == 64 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
