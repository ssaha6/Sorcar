type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP64(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "data"} {:global} $$data : [int]int;
axiom {:array_info "$$data"} {:global} {:elem_width 64} {:source_name "data"} {:source_elem_width 64} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$data : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$data : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$data : bool;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function BV_CONCAT(int, int) : int;
function BV_EXTRACT(int, int, int) : int;
function FADD64(int, int) : int;
function FMUL64(int, int) : int;
function FSUB64(int, int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SLT(x : int, y : int) : bool {
  x < y
}
procedure {:source_name "Mul2"} {:kernel} $Mul2($nIters:int)
{
  var $s0.0:int;
  var $j.0:int;
  var v0:int;
  var v1:int;
  var v2:int;
  var v3:int;
  var v4:bool;
  var v5:int;
  var v6:int;
  var v7:int;
  var v8:int;
  var v9:int;
  var v10:int;
  var v11:int;
  var v12:int;
  var v13:int;
  var v14:int;
  var v26:int;
  var v15:int;
  var v16:int;
  var v17:int;
  var v18:int;
  var v19:int;
  var v20:int;
  var v21:int;
  var v22:int;
  var v23:int;
  var v24:int;
  var v25:int;
  var v47:int;
  var v48:int;
  var v27:int;
  var v28:int;
  var v29:int;
  var v30:int;
  var v31:int;
  var v32:int;
  var v33:int;
  var v34:int;
  var v35:int;
  var v36:int;
  var v37:int;
  var v38:int;
  var v39:int;
  var v40:int;
  var v41:int;
  var v42:int;
  var v43:int;
  var v44:int;
  var v45:int;
  var v46:int;
  var v49:int;
  var v50:int;
  var v51:int;
  var v52:int;
  var v53:int;
  var v54:int;
  var v55:int;
  var v56:int;
  var v57:int;
  var v58:int;
  var v59:int;
  var v60:int;
  var v61:int;
  var v62:int;
  var v63:int;
  var v64:int;
  var v65:int;
  var v66:int;
  var v67:int;
  var v68:int;
  var v69:int;
  var v70:int;
  var v71:int;
  var v72:int;
  var v73:int;
  var v74:int;
  var v75:int;
  var v76:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  assert {:sourceloc} {:sourceloc_num 1} true;
  v1 := $$data[v0];
  assert {:sourceloc} {:sourceloc_num 2} true;
  v2 := $$data[v0];
  v3 := FADD64(FSUB64(v1, v2), 4607173411716726784);
  $s0.0, $j.0 := BV_CONCAT(FADD64(v3, 4591870180066957722), FADD64(v3, 0)), 0;
  goto $1;
$1:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  v4 := BV32_SLT($j.0, $nIters);
  goto $truebb, $falsebb;
$2:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  v5 := FMUL64(FMUL64(BV_EXTRACT($s0.0, 64, 0), BV_EXTRACT($s0.0, 64, 0)), 4607227454753341440);
  v6 := FMUL64(FMUL64(BV_EXTRACT($s0.0, 128, 64), BV_EXTRACT($s0.0, 128, 64)), 4607227454753341440);
  v7 := FMUL64(FMUL64(v5, v5), 4607227454753341440);
  v8 := FMUL64(FMUL64(v6, v6), 4607227454753341440);
  v9 := FMUL64(FMUL64(v7, v7), 4607227454753341440);
  v10 := FMUL64(FMUL64(v8, v8), 4607227454753341440);
  v11 := FMUL64(FMUL64(v9, v9), 4607227454753341440);
  v12 := FMUL64(FMUL64(v10, v10), 4607227454753341440);
  v13 := FMUL64(FMUL64(v11, v11), 4607227454753341440);
  v14 := FMUL64(FMUL64(v12, v12), 4607227454753341440);
  v15 := FMUL64(FMUL64(v13, v13), 4607227454753341440);
  v16 := FMUL64(FMUL64(v14, v14), 4607227454753341440);
  v17 := FMUL64(FMUL64(v15, v15), 4607227454753341440);
  v18 := FMUL64(FMUL64(v16, v16), 4607227454753341440);
  v19 := FMUL64(FMUL64(v17, v17), 4607227454753341440);
  v20 := FMUL64(FMUL64(v18, v18), 4607227454753341440);
  v21 := FMUL64(FMUL64(v19, v19), 4607227454753341440);
  v22 := FMUL64(FMUL64(v20, v20), 4607227454753341440);
  v23 := FMUL64(FMUL64(v21, v21), 4607227454753341440);
  v24 := FMUL64(FMUL64(v22, v22), 4607227454753341440);
  v25 := FMUL64(FMUL64(v23, v23), 4607227454753341440);
  v26 := FMUL64(FMUL64(v24, v24), 4607227454753341440);
  v27 := FMUL64(FMUL64(v25, v25), 4607227454753341440);
  v28 := FMUL64(FMUL64(v26, v26), 4607227454753341440);
  v29 := FMUL64(FMUL64(v27, v27), 4607227454753341440);
  v30 := FMUL64(FMUL64(v28, v28), 4607227454753341440);
  v31 := FMUL64(FMUL64(v29, v29), 4607227454753341440);
  v32 := FMUL64(FMUL64(v30, v30), 4607227454753341440);
  v33 := FMUL64(FMUL64(v31, v31), 4607227454753341440);
  v34 := FMUL64(FMUL64(v32, v32), 4607227454753341440);
  v35 := FMUL64(FMUL64(v33, v33), 4607227454753341440);
  v36 := FMUL64(FMUL64(v34, v34), 4607227454753341440);
  v37 := FMUL64(FMUL64(v35, v35), 4607227454753341440);
  v38 := FMUL64(FMUL64(v36, v36), 4607227454753341440);
  v39 := FMUL64(FMUL64(v37, v37), 4607227454753341440);
  v40 := FMUL64(FMUL64(v38, v38), 4607227454753341440);
  v41 := FMUL64(FMUL64(v39, v39), 4607227454753341440);
  v42 := FMUL64(FMUL64(v40, v40), 4607227454753341440);
  v43 := FMUL64(FMUL64(v41, v41), 4607227454753341440);
  v44 := FMUL64(FMUL64(v42, v42), 4607227454753341440);
  v45 := FMUL64(FMUL64(v43, v43), 4607227454753341440);
  v46 := FMUL64(FMUL64(v44, v44), 4607227454753341440);
  v47 := FMUL64(FMUL64(v45, v45), 4607227454753341440);
  v48 := FMUL64(FMUL64(v46, v46), 4607227454753341440);
  v49 := FMUL64(FMUL64(v47, v47), 4607227454753341440);
  v50 := FMUL64(FMUL64(v48, v48), 4607227454753341440);
  v51 := FMUL64(FMUL64(v49, v49), 4607227454753341440);
  v52 := FMUL64(FMUL64(v50, v50), 4607227454753341440);
  v53 := FMUL64(FMUL64(v51, v51), 4607227454753341440);
  v54 := FMUL64(FMUL64(v52, v52), 4607227454753341440);
  v55 := FMUL64(FMUL64(v53, v53), 4607227454753341440);
  v56 := FMUL64(FMUL64(v54, v54), 4607227454753341440);
  v57 := FMUL64(FMUL64(v55, v55), 4607227454753341440);
  v58 := FMUL64(FMUL64(v56, v56), 4607227454753341440);
  v59 := FMUL64(FMUL64(v57, v57), 4607227454753341440);
  v60 := FMUL64(FMUL64(v58, v58), 4607227454753341440);
  v61 := FMUL64(FMUL64(v59, v59), 4607227454753341440);
  v62 := FMUL64(FMUL64(v60, v60), 4607227454753341440);
  v63 := FMUL64(FMUL64(v61, v61), 4607227454753341440);
  v64 := FMUL64(FMUL64(v62, v62), 4607227454753341440);
  v65 := FMUL64(FMUL64(v63, v63), 4607227454753341440);
  v66 := FMUL64(FMUL64(v64, v64), 4607227454753341440);
  v67 := FMUL64(FMUL64(v65, v65), 4607227454753341440);
  v68 := FMUL64(FMUL64(v66, v66), 4607227454753341440);
  v69 := FMUL64(FMUL64(v67, v67), 4607227454753341440);
  v70 := FMUL64(FMUL64(v68, v68), 4607227454753341440);
  v71 := FMUL64(FMUL64(v69, v69), 4607227454753341440);
  v72 := FMUL64(FMUL64(v70, v70), 4607227454753341440);
  v73 := FMUL64(FMUL64(v71, v71), 4607227454753341440);
  v74 := FMUL64(FMUL64(v72, v72), 4607227454753341440);
  v75 := FMUL64(FMUL64(v73, v73), 4607227454753341440);
  v76 := FMUL64(FMUL64(v74, v74), 4607227454753341440);
  goto $3;
$3:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  $s0.0, $j.0 := BV_CONCAT(FMUL64(FMUL64(v76, v76), 4607227454753341440), FMUL64(FMUL64(v75, v75), 4607227454753341440)), BV32_ADD($j.0, 1);
  goto $1;
$4:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  assert {:sourceloc} {:sourceloc_num 7} true;
  $$data[v0] := FADD64(BV_EXTRACT($s0.0, 64, 0), BV_EXTRACT($s0.0, 128, 64));
  return;
$truebb:
  assume {:partition} v4;
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  goto $2;
$falsebb:
  assume {:partition} !v4;
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  goto $4;
}
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 128 then 1 else 0) != 0;
axiom (if num_groups_x == 16384 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
