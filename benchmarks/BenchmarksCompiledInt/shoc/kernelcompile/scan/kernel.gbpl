type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "g_odata"} {:global} $$g_odata : [int]int;
axiom {:array_info "$$g_odata"} {:global} {:elem_width 32} {:source_name "g_odata"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$g_odata : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$g_odata : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$g_odata : bool;

var {:source_name "g_idata"} {:global} $$g_idata : [int]int;
axiom {:array_info "$$g_idata"} {:global} {:elem_width 32} {:source_name "g_idata"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$g_idata : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$g_idata : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$g_idata : bool;

var {:source_name "g_blockSums"} {:global} $$g_blockSums : [int]int;
axiom {:array_info "$$g_blockSums"} {:global} {:elem_width 32} {:source_name "g_blockSums"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$g_blockSums : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$g_blockSums : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$g_blockSums : bool;

var {:source_name "s_data"} {:group_shared} $$s_data : [int]int;
axiom {:array_info "$$s_data"} {:group_shared} {:elem_width 32} {:source_name "s_data"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$s_data : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$s_data : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$s_data : bool;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function  BV32_ASHR(int, int) : int;
function  BV32_LSHR(int, int) : int;
function FADD32(int, int) : int;
function {:inline true} BV1_ZEXT32(x : int) : int {
  x
}
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_AND(x : int, y : int) : int {
  if x == y then x else (if x == 0 || y == 0 then 0 else BV32_AND_UF(x, y))
}
function BV32_AND_UF(int, int) : int;
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SGT(x : int, y : int) : bool {
  x > y
}
function {:inline true} BV32_SHL(x : int, y : int) : int {
  if x >= 0 && y == 1 then x*2 else BV32_SHL_UF(x,y)
}
function BV32_SHL_UF(int, int) : int;
function {:inline true} BV32_SLT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV32_SUB(x : int, y : int) : int {
  x - y
}
function {:inline true} BV32_ULE(x : int, y : int) : bool {
  x <= y
}
procedure {:source_name "scan"} {:kernel} $scan($n:int, $blockIndex:int, $baseIndex:int, $storeSum:int)
{
  var $bIndex.0:int;
  var $stride.0:int;
  var $d.0:int;
  var $0:int;
  var $stride.1:int;
  var $d1.0:int;
  var v3:int;
  var v4:int;
  var v5:int;
  var v0:bool;
  var v1:int;
  var v2:int;
  var v6:bool;
  var v7:int;
  var v8:bool;
  var v9:bool;
  var v11:int;
  var v10:int;
  var v12:int;
  var v13:int;
  var v14:bool;
  var v15:bool;
  var v16:int;
  var v17:bool;
  var v18:int;
  var v19:bool;
  var v20:int;
  var v21:bool;
  var v23:int;
  var v22:int;
  var v24:int;
  var v25:int;
  var v26:int;
  var v28:bool;
  var v27:int;
  var v29:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  v0 := $baseIndex == 0;
  goto $truebb, $falsebb;
$1:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  $bIndex.0 := BV32_MUL(group_id_x, BV32_SHL(group_size_x, 1));
  goto $3;
$2:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  $bIndex.0 := $baseIndex;
  goto $3;
$3:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  v1 := local_id_x;
  v2 := BV32_ADD($bIndex.0, v1);
  v3 := BV32_ADD(v2, group_size_x);
  v4 := BV32_ADD(v1, group_size_x);
  assert {:sourceloc} {:sourceloc_num 4} true;
  v5 := $$g_idata[v2];
  assert {:sourceloc} {:sourceloc_num 5} true;
  $$s_data[v1] := v5;
  v6 := BV32_SLT(v4, $n);
  goto $truebb0, $falsebb0;
$4:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  assert {:sourceloc} {:sourceloc_num 7} true;
  v7 := $$g_idata[v3];
  assert {:sourceloc} {:sourceloc_num 8} true;
  $$s_data[v4] := v7;
  goto $6;
$5:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  assert {:sourceloc} {:sourceloc_num 10} true;
  $$s_data[v4] := 0;
  goto $6;
$6:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  $stride.0, $d.0 := 1, group_size_x;
  goto $7;
$7:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  assert {:originated_from_invariant} {:sourceloc_num 13} (if (BV32_AND(BV1_ZEXT32((if $d.0 == 0 then 1 else 0)), BV1_ZEXT32((if _WRITE_HAS_OCCURRED_$$s_data then 1 else 0))) != 0 ==> v1 == 0) then 1 else 0) != 0;
  assert {:originated_from_invariant} {:sourceloc_num 14} (if (BV32_AND(BV1_ZEXT32((if $d.0 == 0 then 1 else 0)), BV1_ZEXT32((if _READ_HAS_OCCURRED_$$s_data then 1 else 0))) != 0 ==> v1 == 0) then 1 else 0) != 0;
  v8 := BV32_SGT($d.0, 0);
  goto $truebb1, $falsebb1;
$8:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  call {:sourceloc_num 16} $bugle_barrier(-1, 0);
  v9 := BV32_SLT(v1, $d.0);
  goto $truebb2, $falsebb2;
$9:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  v10 := BV32_SUB(BV32_ADD(BV32_MUL(BV32_MUL(2, $stride.0), v1), $stride.0), 1);
  v11 := BV32_ADD(v10, $stride.0);
  assert {:sourceloc} {:sourceloc_num 18} true;
  v12 := $$s_data[v10];
  assert {:sourceloc} {:sourceloc_num 19} true;
  v13 := $$s_data[v11];
  assert {:sourceloc} {:sourceloc_num 20} true;
  $$s_data[v11] := FADD32(v13, v12);
  goto $10;
$10:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  goto $11;
$11:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  $stride.0, $d.0 := BV32_MUL($stride.0, 2), BV32_ASHR($d.0, 1);
  goto $7;
$12:
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  v14 := $blockIndex == 0;
  goto $truebb3, $falsebb3;
$13:
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  $0 := group_id_x;
  goto $15;
$14:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  $0 := $blockIndex;
  goto $15;
$15:
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  v15 := local_id_x == 0;
  goto $truebb4, $falsebb4;
$16:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  v16 := BV32_SUB(BV32_SHL(group_size_x, 1), 1);
  v17 := $storeSum == 1;
  goto $truebb5, $falsebb5;
$17:
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  assert {:sourceloc} {:sourceloc_num 29} true;
  v18 := $$s_data[v16];
  assert {:sourceloc} {:sourceloc_num 30} true;
  $$g_blockSums[$0] := v18;
  goto $18;
$18:
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  assert {:sourceloc} {:sourceloc_num 32} true;
  $$s_data[v16] := 0;
  goto $19;
$19:
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  call {:sourceloc_num 34} $bugle_barrier(-1, 0);
  $stride.1, $d1.0 := $stride.0, 1;
  goto $20;
$20:
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  v19 := BV32_ULE($d1.0, group_size_x);
  goto $truebb6, $falsebb6;
$21:
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  v20 := BV32_LSHR($stride.1, 1);
  call {:sourceloc_num 37} $bugle_barrier(-1, 0);
  v21 := BV32_SLT(v1, $d1.0);
  goto $truebb7, $falsebb7;
$22:
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  v22 := BV32_SUB(BV32_ADD(BV32_MUL(BV32_MUL(2, v20), v1), v20), 1);
  v23 := BV32_ADD(v22, v20);
  assert {:sourceloc} {:sourceloc_num 39} true;
  v24 := $$s_data[v22];
  assert {:sourceloc} {:sourceloc_num 40} true;
  v25 := $$s_data[v23];
  assert {:sourceloc} {:sourceloc_num 41} true;
  $$s_data[v22] := v25;
  assert {:sourceloc} {:sourceloc_num 42} true;
  v26 := $$s_data[v23];
  assert {:sourceloc} {:sourceloc_num 43} true;
  $$s_data[v23] := FADD32(v26, v24);
  goto $23;
$23:
  assert {:block_sourceloc} {:sourceloc_num 44} true;
  goto $24;
$24:
  assert {:block_sourceloc} {:sourceloc_num 45} true;
  $stride.1, $d1.0 := v20, BV32_MUL($d1.0, 2);
  goto $20;
$25:
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  call {:sourceloc_num 47} $bugle_barrier(-1, 0);
  assert {:sourceloc} {:sourceloc_num 48} true;
  v27 := $$s_data[v1];
  assert {:sourceloc} {:sourceloc_num 49} true;
  $$g_odata[v2] := v27;
  v28 := BV32_SLT(v4, $n);
  goto $truebb8, $falsebb8;
$26:
  assert {:block_sourceloc} {:sourceloc_num 50} true;
  assert {:sourceloc} {:sourceloc_num 51} true;
  v29 := $$s_data[v4];
  assert {:sourceloc} {:sourceloc_num 52} true;
  $$g_odata[v3] := v29;
  goto $27;
$27:
  assert {:block_sourceloc} {:sourceloc_num 53} true;
  return;
$truebb:
  assume {:partition} v0;
  assert {:block_sourceloc} {:sourceloc_num 54} true;
  goto $1;
$falsebb:
  assume {:partition} !v0;
  assert {:block_sourceloc} {:sourceloc_num 55} true;
  goto $2;
$truebb0:
  assume {:partition} v6;
  assert {:block_sourceloc} {:sourceloc_num 56} true;
  goto $4;
$falsebb0:
  assume {:partition} !v6;
  assert {:block_sourceloc} {:sourceloc_num 57} true;
  goto $5;
$truebb1:
  assume {:partition} v8;
  assert {:block_sourceloc} {:sourceloc_num 58} true;
  goto $8;
$falsebb1:
  assume {:partition} !v8;
  assert {:block_sourceloc} {:sourceloc_num 59} true;
  goto $12;
$truebb2:
  assume {:partition} v9;
  assert {:block_sourceloc} {:sourceloc_num 60} true;
  goto $9;
$falsebb2:
  assume {:partition} !v9;
  assert {:block_sourceloc} {:sourceloc_num 61} true;
  goto $10;
$truebb3:
  assume {:partition} v14;
  assert {:block_sourceloc} {:sourceloc_num 62} true;
  goto $13;
$falsebb3:
  assume {:partition} !v14;
  assert {:block_sourceloc} {:sourceloc_num 63} true;
  goto $14;
$truebb4:
  assume {:partition} v15;
  assert {:block_sourceloc} {:sourceloc_num 64} true;
  goto $16;
$falsebb4:
  assume {:partition} !v15;
  assert {:block_sourceloc} {:sourceloc_num 65} true;
  goto $19;
$truebb5:
  assume {:partition} v17;
  assert {:block_sourceloc} {:sourceloc_num 66} true;
  goto $17;
$falsebb5:
  assume {:partition} !v17;
  assert {:block_sourceloc} {:sourceloc_num 67} true;
  goto $18;
$truebb6:
  assume {:partition} v19;
  assert {:block_sourceloc} {:sourceloc_num 68} true;
  goto $21;
$falsebb6:
  assume {:partition} !v19;
  assert {:block_sourceloc} {:sourceloc_num 69} true;
  goto $25;
$truebb7:
  assume {:partition} v21;
  assert {:block_sourceloc} {:sourceloc_num 70} true;
  goto $22;
$falsebb7:
  assume {:partition} !v21;
  assert {:block_sourceloc} {:sourceloc_num 71} true;
  goto $23;
$truebb8:
  assume {:partition} v28;
  assert {:block_sourceloc} {:sourceloc_num 72} true;
  goto $26;
$falsebb8:
  assume {:partition} !v28;
  assert {:block_sourceloc} {:sourceloc_num 73} true;
  goto $27;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:int, $1:int);
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 32 then 1 else 0) != 0;
axiom (if num_groups_x == 1 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
