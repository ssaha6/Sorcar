type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "in"} {:global} $$in : [int]int;
axiom {:array_info "$$in"} {:global} {:elem_width 32} {:source_name "in"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$in : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$in : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$in : bool;

var {:source_name "isums"} {:global} $$isums : [int]int;
axiom {:array_info "$$isums"} {:global} {:elem_width 32} {:source_name "isums"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$isums : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$isums : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$isums : bool;

var {:source_name "out"} {:global} $$out : [int]int;
axiom {:array_info "$$out"} {:global} {:elem_width 32} {:source_name "out"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$out : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$out : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$out : bool;

var {:source_name "lmem"} {:group_shared} $$lmem : [int]int;
axiom {:array_info "$$lmem"} {:group_shared} {:elem_width 32} {:source_name "lmem"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$lmem : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$lmem : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$lmem : bool;

var {:source_name "s_seed"} {:group_shared} $$bottom_scan.s_seed : [int]int;
axiom {:array_info "$$bottom_scan.s_seed"} {:group_shared} {:elem_width 32} {:source_name "s_seed"} {:source_elem_width 32} {:source_dimensions "1"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$bottom_scan.s_seed : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$bottom_scan.s_seed : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$bottom_scan.s_seed : bool;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function BV_CONCAT(int, int) : int;
function BV_EXTRACT(int, int, int) : int;
function FADD32(int, int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_SLT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV32_SUB(x : int, y : int) : int {
  x - y
}
function {:inline true} BV32_UDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_UGE(x : int, y : int) : bool {
  x >= y
}
function {:inline true} BV32_ULT(x : int, y : int) : bool {
  x < y
}
procedure {:source_name "bottom_scan"} {:kernel} $bottom_scan($n:int)
requires {:sourceloc_num 0} (if $n == 262144 then 1 else 0) != 0;
{
  var $0:int;
  var $i.0:int;
  var $window.0:int;
  var $seed.0:int;
  var $val_4.0:int;
  var $val_4.1:int;
  var $i.i.0:int;
  var v0:int;
  var v12:int;
  var v13:int;
  var v15:int;
  var v1:int;
  var v2:int;
  var v3:bool;
  var v4:int;
  var v5:int;
  var v6:bool;
  var v7:bool;
  var v8:int;
  var v9:int;
  var v10:int;
  var v11:int;
  var v14:int;
  var v16:int;
  var v17:int;
  var v18:int;
  var v19:bool;
  var v20:int;
  var v21:int;
  var v22:int;
  var v23:int;
  var v24:int;
  var v25:int;
  var v26:int;
  var v27:bool;
  var v28:bool;
  var v29:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  v0 := BV32_SDIV($n, 4);
  v1 := BV32_UDIV(v0, num_groups_x);
  v2 := BV32_MUL(group_id_x, v1);
  v3 := group_id_x == BV32_SUB(num_groups_x, 1);
  goto $truebb, $falsebb;
$1:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  $0 := v0;
  goto $3;
$2:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  $0 := BV32_ADD(v2, v1);
  goto $3;
$3:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  assert {:sourceloc} {:sourceloc_num 5} true;
  v4 := $$isums[group_id_x];
  havoc v5;
  $i.0, $window.0, $seed.0, $val_4.0 := BV32_ADD(v2, local_id_x), v2, v4, v5;
  goto $4;
$4:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 7} (if $i.0 == BV32_ADD($window.0, local_id_x) then 1 else 0) != 0;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 8} (if (_WRITE_HAS_OCCURRED_$$out ==> BV32_UGE(BV32_UDIV(BV32_MUL(4, _WATCHED_OFFSET), 16), v2)) then 1 else 0) != 0;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 9} (if (_WRITE_HAS_OCCURRED_$$out ==> BV32_ULT(BV32_UDIV(BV32_MUL(4, _WATCHED_OFFSET), 16), $0)) then 1 else 0) != 0;
  v6 := BV32_SLT($window.0, $0);
  goto $truebb0, $falsebb0;
$5:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  v7 := BV32_SLT($i.0, $0);
  goto $truebb1, $falsebb1;
$6:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  assert {:sourceloc} {:sourceloc_num 12} true;
  v8 := $$in[BV32_MUL($i.0, 4)];
  assert {:sourceloc} {:sourceloc_num 13} true;
  v9 := $$in[BV32_ADD(BV32_MUL($i.0, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 14} true;
  v10 := $$in[BV32_ADD(BV32_MUL($i.0, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 15} true;
  v11 := $$in[BV32_ADD(BV32_MUL($i.0, 4), 3)];
  $val_4.1 := BV_CONCAT(BV_CONCAT(BV_CONCAT(v11, v10), v9), v8);
  goto $8;
$7:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  $val_4.1 := 0;
  goto $8;
$8:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  v12 := FADD32(BV_EXTRACT($val_4.1, 64, 32), BV_EXTRACT($val_4.1, 32, 0));
  v13 := BV_EXTRACT($val_4.1, 96, 64);
  v14 := FADD32(v13, v12);
  v15 := BV_EXTRACT($val_4.1, 128, 96);
  v16 := FADD32(v15, v14);
  v17 := local_id_x;
  assert {:sourceloc} {:sourceloc_num 18} true;
  $$lmem[v17] := 0;
  v18 := BV32_ADD(v17, group_size_x);
  assert {:sourceloc} {:sourceloc_num 19} true;
  $$lmem[v18] := v16;
  call {:sourceloc_num 20} $bugle_barrier(-1, 0);
  $i.i.0 := 1;
  goto $9;
$9:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  v19 := BV32_ULT($i.i.0, group_size_x);
  goto $truebb2, $falsebb2;
$10:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  assert {:sourceloc} {:sourceloc_num 23} true;
  v20 := $$lmem[BV32_SUB(v18, $i.i.0)];
  call {:sourceloc_num 24} $bugle_barrier(-1, 0);
  assert {:sourceloc} {:sourceloc_num 25} true;
  v21 := $$lmem[v18];
  assert {:sourceloc} {:sourceloc_num 26} true;
  $$lmem[v18] := FADD32(v21, v20);
  call {:sourceloc_num 27} $bugle_barrier(-1, 0);
  $i.i.0 := BV32_MUL($i.i.0, 2);
  goto $9;
$scanLocalMem.exit:
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  assert {:sourceloc} {:sourceloc_num 29} true;
  v22 := $$lmem[BV32_SUB(v18, 1)];
  v23 := FADD32(BV_EXTRACT($val_4.1, 32, 0), FADD32(v22, $seed.0));
  v24 := FADD32(v12, FADD32(v22, $seed.0));
  v25 := FADD32(v14, FADD32(v22, $seed.0));
  v26 := FADD32(v16, FADD32(v22, $seed.0));
  v27 := BV32_SLT($i.0, $0);
  goto $truebb3, $falsebb3;
$11:
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  assert {:sourceloc} {:sourceloc_num 31} true;
  $$out[BV32_MUL($i.0, 4)] := v23;
  assert {:sourceloc} {:sourceloc_num 32} true;
  $$out[BV32_ADD(BV32_MUL($i.0, 4), 1)] := v24;
  assert {:sourceloc} {:sourceloc_num 33} true;
  $$out[BV32_ADD(BV32_MUL($i.0, 4), 2)] := v25;
  assert {:sourceloc} {:sourceloc_num 34} true;
  $$out[BV32_ADD(BV32_MUL($i.0, 4), 3)] := v26;
  goto $12;
$12:
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  v28 := local_id_x == BV32_SUB(group_size_x, 1);
  goto $truebb4, $falsebb4;
$13:
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  assert {:sourceloc} {:sourceloc_num 37} true;
  $$bottom_scan.s_seed[0] := v26;
  goto $14;
$14:
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  call {:sourceloc_num 39} $bugle_barrier(-1, 0);
  assert {:sourceloc} {:sourceloc_num 40} true;
  v29 := $$bottom_scan.s_seed[0];
  $i.0, $window.0, $seed.0, $val_4.0 := BV32_ADD($i.0, group_size_x), BV32_ADD($window.0, group_size_x), v29, BV_CONCAT(BV_CONCAT(BV_CONCAT(v26, v25), v24), v23);
  goto $4;
$15:
  assert {:block_sourceloc} {:sourceloc_num 41} true;
  return;
$truebb:
  assume {:partition} v3;
  assert {:block_sourceloc} {:sourceloc_num 42} true;
  goto $1;
$falsebb:
  assume {:partition} !v3;
  assert {:block_sourceloc} {:sourceloc_num 43} true;
  goto $2;
$truebb0:
  assume {:partition} v6;
  assert {:block_sourceloc} {:sourceloc_num 44} true;
  goto $5;
$falsebb0:
  assume {:partition} !v6;
  assert {:block_sourceloc} {:sourceloc_num 45} true;
  goto $15;
$truebb1:
  assume {:partition} v7;
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  goto $6;
$falsebb1:
  assume {:partition} !v7;
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  goto $7;
$truebb2:
  assume {:partition} v19;
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  goto $10;
$falsebb2:
  assume {:partition} !v19;
  assert {:block_sourceloc} {:sourceloc_num 49} true;
  goto $scanLocalMem.exit;
$truebb3:
  assume {:partition} v27;
  assert {:block_sourceloc} {:sourceloc_num 50} true;
  goto $11;
$falsebb3:
  assume {:partition} !v27;
  assert {:block_sourceloc} {:sourceloc_num 51} true;
  goto $12;
$truebb4:
  assume {:partition} v28;
  assert {:block_sourceloc} {:sourceloc_num 52} true;
  goto $13;
$falsebb4:
  assume {:partition} !v28;
  assert {:block_sourceloc} {:sourceloc_num 53} true;
  goto $14;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:int, $1:int);
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 256 then 1 else 0) != 0;
axiom (if num_groups_x == 64 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
