type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "val"} {:global} $$val : [int]int;
axiom {:array_info "$$val"} {:global} {:elem_width 32} {:source_name "val"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$val : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$val : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$val : bool;

var {:source_name "vec"} {:global} $$vec : [int]int;
axiom {:array_info "$$vec"} {:global} {:elem_width 32} {:source_name "vec"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$vec : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$vec : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$vec : bool;

var {:source_name "cols"} {:global} $$cols : [int]int;
axiom {:array_info "$$cols"} {:global} {:elem_width 32} {:source_name "cols"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$cols : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$cols : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$cols : bool;

var {:source_name "rowDelimiters"} {:global} $$rowDelimiters : [int]int;
axiom {:array_info "$$rowDelimiters"} {:global} {:elem_width 32} {:source_name "rowDelimiters"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$rowDelimiters : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$rowDelimiters : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$rowDelimiters : bool;

var {:source_name "out"} {:global} $$out : [int]int;
axiom {:array_info "$$out"} {:global} {:elem_width 32} {:source_name "out"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$out : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$out : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$out : bool;

var {:source_name "partialSums"} {:group_shared} $$spmv_csr_vector_kernel.partialSums : [int]int;
axiom {:array_info "$$spmv_csr_vector_kernel.partialSums"} {:group_shared} {:elem_width 32} {:source_name "partialSums"} {:source_elem_width 32} {:source_dimensions "128"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$spmv_csr_vector_kernel.partialSums : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$spmv_csr_vector_kernel.partialSums : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$spmv_csr_vector_kernel.partialSums : bool;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function FADD32(int, int) : int;
function FMUL32(int, int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_AND(x : int, y : int) : int {
  if x == y then x else (if x == 0 || y == 0 then 0 else BV32_AND_UF(x, y))
}
function BV32_AND_UF(int, int) : int;
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_SLT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV32_UDIV(x : int, y : int) : int {
  x div y
}
procedure {:source_name "spmv_csr_vector_kernel"} {:kernel} $spmv_csr_vector_kernel($dim:int)
requires {:sourceloc_num 0} (if $dim == 1024 then 1 else 0) != 0;
{
  var $mySum.0:int;
  var $j.0:int;
  var v8:int;
  var v0:int;
  var v1:int;
  var v10:bool;
  var v2:int;
  var v3:bool;
  var v4:int;
  var v5:int;
  var v6:bool;
  var v7:int;
  var v9:int;
  var v11:int;
  var v12:int;
  var v13:bool;
  var v14:int;
  var v15:int;
  var v22:bool;
  var v16:bool;
  var v17:int;
  var v18:int;
  var v19:bool;
  var v20:int;
  var v21:int;
  var v23:int;
  var v24:int;
  var v25:bool;
  var v26:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  v0 := local_id_x;
  v1 := BV32_AND(v0, 31);
  v2 := BV32_ADD(BV32_MUL(group_id_x, BV32_UDIV(group_size_x, 32)), BV32_SDIV(v0, 32));
  assert {:sourceloc} {:sourceloc_num 2} true;
  $$spmv_csr_vector_kernel.partialSums[v0] := 0;
  v3 := BV32_SLT(v2, $dim);
  goto $truebb, $falsebb;
$1:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  assert {:sourceloc} {:sourceloc_num 4} true;
  v4 := $$rowDelimiters[v2];
  assert {:sourceloc} {:sourceloc_num 5} true;
  v5 := $$rowDelimiters[BV32_ADD(v2, 1)];
  $mySum.0, $j.0 := 0, BV32_ADD(v4, v1);
  goto $2;
$2:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  v6 := BV32_SLT($j.0, v5);
  goto $truebb0, $falsebb0;
$3:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  assert {:sourceloc} {:sourceloc_num 8} true;
  v7 := $$cols[$j.0];
  assert {:sourceloc} {:sourceloc_num 9} true;
  v8 := $$val[$j.0];
  assert {:sourceloc} {:sourceloc_num 10} true;
  v9 := $$vec[v7];
  goto $4;
$4:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  $mySum.0, $j.0 := FADD32($mySum.0, FMUL32(v8, v9)), BV32_ADD($j.0, 32);
  goto $2;
$5:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  assert {:sourceloc} {:sourceloc_num 13} true;
  $$spmv_csr_vector_kernel.partialSums[v0] := $mySum.0;
  call {:sourceloc_num 14} $bugle_barrier(-1, 0);
  v10 := BV32_SLT(v1, 16);
  goto $truebb1, $falsebb1;
$6:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  assert {:sourceloc} {:sourceloc_num 16} true;
  v11 := $$spmv_csr_vector_kernel.partialSums[BV32_ADD(v0, 16)];
  assert {:sourceloc} {:sourceloc_num 17} true;
  v12 := $$spmv_csr_vector_kernel.partialSums[v0];
  assert {:sourceloc} {:sourceloc_num 18} true;
  $$spmv_csr_vector_kernel.partialSums[v0] := FADD32(v12, v11);
  goto $7;
$7:
  assert {:block_sourceloc} {:sourceloc_num 19} true;
  call {:sourceloc_num 20} $bugle_barrier(-1, 0);
  v13 := BV32_SLT(v1, 8);
  goto $truebb2, $falsebb2;
$8:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  assert {:sourceloc} {:sourceloc_num 22} true;
  v14 := $$spmv_csr_vector_kernel.partialSums[BV32_ADD(v0, 8)];
  assert {:sourceloc} {:sourceloc_num 23} true;
  v15 := $$spmv_csr_vector_kernel.partialSums[v0];
  assert {:sourceloc} {:sourceloc_num 24} true;
  $$spmv_csr_vector_kernel.partialSums[v0] := FADD32(v15, v14);
  goto $9;
$9:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  call {:sourceloc_num 26} $bugle_barrier(-1, 0);
  v16 := BV32_SLT(v1, 4);
  goto $truebb3, $falsebb3;
$10:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  assert {:sourceloc} {:sourceloc_num 28} true;
  v17 := $$spmv_csr_vector_kernel.partialSums[BV32_ADD(v0, 4)];
  assert {:sourceloc} {:sourceloc_num 29} true;
  v18 := $$spmv_csr_vector_kernel.partialSums[v0];
  assert {:sourceloc} {:sourceloc_num 30} true;
  $$spmv_csr_vector_kernel.partialSums[v0] := FADD32(v18, v17);
  goto $11;
$11:
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  call {:sourceloc_num 32} $bugle_barrier(-1, 0);
  v19 := BV32_SLT(v1, 2);
  goto $truebb4, $falsebb4;
$12:
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  assert {:sourceloc} {:sourceloc_num 34} true;
  v20 := $$spmv_csr_vector_kernel.partialSums[BV32_ADD(v0, 2)];
  assert {:sourceloc} {:sourceloc_num 35} true;
  v21 := $$spmv_csr_vector_kernel.partialSums[v0];
  assert {:sourceloc} {:sourceloc_num 36} true;
  $$spmv_csr_vector_kernel.partialSums[v0] := FADD32(v21, v20);
  goto $13;
$13:
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  call {:sourceloc_num 38} $bugle_barrier(-1, 0);
  v22 := BV32_SLT(v1, 1);
  goto $truebb5, $falsebb5;
$14:
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  assert {:sourceloc} {:sourceloc_num 40} true;
  v23 := $$spmv_csr_vector_kernel.partialSums[BV32_ADD(v0, 1)];
  assert {:sourceloc} {:sourceloc_num 41} true;
  v24 := $$spmv_csr_vector_kernel.partialSums[v0];
  assert {:sourceloc} {:sourceloc_num 42} true;
  $$spmv_csr_vector_kernel.partialSums[v0] := FADD32(v24, v23);
  goto $15;
$15:
  assert {:block_sourceloc} {:sourceloc_num 43} true;
  call {:sourceloc_num 44} $bugle_barrier(-1, 0);
  v25 := v1 == 0;
  goto $truebb6, $falsebb6;
$16:
  assert {:block_sourceloc} {:sourceloc_num 45} true;
  assert {:sourceloc} {:sourceloc_num 46} true;
  v26 := $$spmv_csr_vector_kernel.partialSums[v0];
  assert {:sourceloc} {:sourceloc_num 47} true;
  $$out[v2] := v26;
  goto $17;
$17:
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  goto $18;
$18:
  assert {:block_sourceloc} {:sourceloc_num 49} true;
  return;
$truebb:
  assume {:partition} v3;
  assert {:block_sourceloc} {:sourceloc_num 50} true;
  goto $1;
$falsebb:
  assume {:partition} !v3;
  assert {:block_sourceloc} {:sourceloc_num 51} true;
  goto $18;
$truebb0:
  assume {:partition} v6;
  assert {:block_sourceloc} {:sourceloc_num 52} true;
  goto $3;
$falsebb0:
  assume {:partition} !v6;
  assert {:block_sourceloc} {:sourceloc_num 53} true;
  goto $5;
$truebb1:
  assume {:partition} v10;
  assert {:block_sourceloc} {:sourceloc_num 54} true;
  goto $6;
$falsebb1:
  assume {:partition} !v10;
  assert {:block_sourceloc} {:sourceloc_num 55} true;
  goto $7;
$truebb2:
  assume {:partition} v13;
  assert {:block_sourceloc} {:sourceloc_num 56} true;
  goto $8;
$falsebb2:
  assume {:partition} !v13;
  assert {:block_sourceloc} {:sourceloc_num 57} true;
  goto $9;
$truebb3:
  assume {:partition} v16;
  assert {:block_sourceloc} {:sourceloc_num 58} true;
  goto $10;
$falsebb3:
  assume {:partition} !v16;
  assert {:block_sourceloc} {:sourceloc_num 59} true;
  goto $11;
$truebb4:
  assume {:partition} v19;
  assert {:block_sourceloc} {:sourceloc_num 60} true;
  goto $12;
$falsebb4:
  assume {:partition} !v19;
  assert {:block_sourceloc} {:sourceloc_num 61} true;
  goto $13;
$truebb5:
  assume {:partition} v22;
  assert {:block_sourceloc} {:sourceloc_num 62} true;
  goto $14;
$falsebb5:
  assume {:partition} !v22;
  assert {:block_sourceloc} {:sourceloc_num 63} true;
  goto $15;
$truebb6:
  assume {:partition} v25;
  assert {:block_sourceloc} {:sourceloc_num 64} true;
  goto $16;
$falsebb6:
  assume {:partition} !v25;
  assert {:block_sourceloc} {:sourceloc_num 65} true;
  goto $17;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:int, $1:int);
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 128 then 1 else 0) != 0;
axiom (if num_groups_x == 256 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
