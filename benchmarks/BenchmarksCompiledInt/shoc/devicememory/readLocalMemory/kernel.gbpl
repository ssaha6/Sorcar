type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "data"} {:global} $$data : [int]int;
axiom {:array_info "$$data"} {:global} {:elem_width 32} {:source_name "data"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$data : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$data : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$data : bool;

var {:source_name "output"} {:global} $$output : [int]int;
axiom {:array_info "$$output"} {:global} {:elem_width 32} {:source_name "output"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$output : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$output : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$output : bool;

var {:source_name "lbuf"} {:group_shared} $$readLocalMemory.lbuf : [int]int;
axiom {:array_info "$$readLocalMemory.lbuf"} {:group_shared} {:elem_width 32} {:source_name "lbuf"} {:source_elem_width 32} {:source_dimensions "4096"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$readLocalMemory.lbuf : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$readLocalMemory.lbuf : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$readLocalMemory.lbuf : bool;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function FADD32(int, int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_AND(x : int, y : int) : int {
  if x == y then x else (if x == 0 || y == 0 then 0 else BV32_AND_UF(x, y))
}
function BV32_AND_UF(int, int) : int;
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_SGE(x : int, y : int) : bool {
  x >= y
}
function {:inline true} BV32_SLT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV32_SUB(x : int, y : int) : int {
  x - y
}
function {:inline true} BV32_UDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_ULT(x : int, y : int) : bool {
  x < y
}
procedure {:source_name "readLocalMemory"} {:kernel} $readLocalMemory($size:int)
requires {:sourceloc_num 0} (if $size == 16777216 then 1 else 0) != 0;
{
  var $j.0:int;
  var $0:int;
  var $j.1:int;
  var $i.0:int;
  var $j.2:int;
  var $sum.0:int;
  var $s.0:int;
  var v0:int;
  var v9:int;
  var v1:int;
  var v2:int;
  var v3:int;
  var v4:int;
  var v5:bool;
  var v6:bool;
  var v7:int;
  var v8:bool;
  var v10:bool;
  var v11:int;
  var v12:int;
  var v13:int;
  var v14:int;
  var v15:int;
  var v16:int;
  var v17:int;
  var v18:int;
  var v19:int;
  var v20:int;
  var v21:int;
  var v22:int;
  var v23:int;
  var v24:int;
  var v25:int;
  var v26:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  v1 := local_id_x;
  v2 := group_size_x;
  v3 := BV32_SDIV(4096, v2);
  v4 := BV32_ADD(BV32_MUL(v2, group_id_x), BV32_MUL(v1, v3));
  $j.0 := 0;
  goto $1;
$1:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 3} (if (_WRITE_HAS_OCCURRED_$$readLocalMemory.lbuf ==> BV32_ULT(BV32_SUB(BV32_UDIV(BV32_MUL(4, _WATCHED_OFFSET), 4), BV32_MUL(v1, v3)), v3)) then 1 else 0) != 0;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 4} (if BV32_SGE($j.0, 0) then 1 else 0) != 0;
  v5 := BV32_SLT($j.0, v3);
  goto $truebb, $falsebb;
$2:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  $0 := (if BV32_SLT($j.0, BV32_SUB($size, v4)) then 1 else 0);
  goto $3;
$3:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  v6 := $0 == 1;
  goto $truebb0, $falsebb0;
$4:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  assert {:sourceloc} {:sourceloc_num 8} true;
  v7 := $$data[BV32_ADD(v4, $j.0)];
  assert {:sourceloc} {:sourceloc_num 9} true;
  $$readLocalMemory.lbuf[BV32_ADD(BV32_MUL(v1, v3), $j.0)] := v7;
  goto $5;
$5:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  $j.0 := BV32_ADD($j.0, 1);
  goto $1;
$6:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  $j.1, $i.0 := $j.0, 0;
  goto $7;
$7:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 13} (if (_WRITE_HAS_OCCURRED_$$readLocalMemory.lbuf ==> BV32_ULT(BV32_SUB(BV32_UDIV(BV32_MUL(4, _WATCHED_OFFSET), 4), BV32_MUL(v1, v3)), v3)) then 1 else 0) != 0;
  v8 := BV32_SLT($j.1, v3);
  goto $truebb1, $falsebb1;
$8:
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  assert {:sourceloc} {:sourceloc_num 15} true;
  v9 := $$data[$i.0];
  assert {:sourceloc} {:sourceloc_num 16} true;
  $$readLocalMemory.lbuf[BV32_ADD(BV32_MUL(v1, v3), $j.1)] := v9;
  goto $9;
$9:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  $j.1, $i.0 := BV32_ADD($j.1, 1), BV32_ADD($i.0, 1);
  goto $7;
$10:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  call {:sourceloc_num 19} $bugle_barrier(-1, 0);
  $j.2, $sum.0, $s.0 := 0, 0, v1;
  goto $11;
$11:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  v10 := BV32_SLT($j.2, 3000);
  goto $truebb2, $falsebb2;
$12:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  assert {:sourceloc} {:sourceloc_num 22} true;
  v11 := $$readLocalMemory.lbuf[BV32_AND($s.0, 4095)];
  assert {:sourceloc} {:sourceloc_num 23} true;
  v12 := $$readLocalMemory.lbuf[BV32_AND(BV32_ADD($s.0, 1), 4095)];
  assert {:sourceloc} {:sourceloc_num 24} true;
  v13 := $$readLocalMemory.lbuf[BV32_AND(BV32_ADD($s.0, 2), 4095)];
  assert {:sourceloc} {:sourceloc_num 25} true;
  v14 := $$readLocalMemory.lbuf[BV32_AND(BV32_ADD($s.0, 3), 4095)];
  assert {:sourceloc} {:sourceloc_num 26} true;
  v15 := $$readLocalMemory.lbuf[BV32_AND(BV32_ADD($s.0, 4), 4095)];
  assert {:sourceloc} {:sourceloc_num 27} true;
  v16 := $$readLocalMemory.lbuf[BV32_AND(BV32_ADD($s.0, 5), 4095)];
  assert {:sourceloc} {:sourceloc_num 28} true;
  v17 := $$readLocalMemory.lbuf[BV32_AND(BV32_ADD($s.0, 6), 4095)];
  assert {:sourceloc} {:sourceloc_num 29} true;
  v18 := $$readLocalMemory.lbuf[BV32_AND(BV32_ADD($s.0, 7), 4095)];
  assert {:sourceloc} {:sourceloc_num 30} true;
  v19 := $$readLocalMemory.lbuf[BV32_AND(BV32_ADD($s.0, 8), 4095)];
  assert {:sourceloc} {:sourceloc_num 31} true;
  v20 := $$readLocalMemory.lbuf[BV32_AND(BV32_ADD($s.0, 9), 4095)];
  assert {:sourceloc} {:sourceloc_num 32} true;
  v21 := $$readLocalMemory.lbuf[BV32_AND(BV32_ADD($s.0, 10), 4095)];
  assert {:sourceloc} {:sourceloc_num 33} true;
  v22 := $$readLocalMemory.lbuf[BV32_AND(BV32_ADD($s.0, 11), 4095)];
  assert {:sourceloc} {:sourceloc_num 34} true;
  v23 := $$readLocalMemory.lbuf[BV32_AND(BV32_ADD($s.0, 12), 4095)];
  assert {:sourceloc} {:sourceloc_num 35} true;
  v24 := $$readLocalMemory.lbuf[BV32_AND(BV32_ADD($s.0, 13), 4095)];
  assert {:sourceloc} {:sourceloc_num 36} true;
  v25 := $$readLocalMemory.lbuf[BV32_AND(BV32_ADD($s.0, 14), 4095)];
  assert {:sourceloc} {:sourceloc_num 37} true;
  v26 := $$readLocalMemory.lbuf[BV32_AND(BV32_ADD($s.0, 15), 4095)];
  goto $13;
$13:
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  $j.2, $sum.0, $s.0 := BV32_ADD($j.2, 1), FADD32($sum.0, FADD32(FADD32(FADD32(FADD32(FADD32(FADD32(FADD32(FADD32(FADD32(FADD32(FADD32(FADD32(FADD32(FADD32(FADD32(v11, v12), v13), v14), v15), v16), v17), v18), v19), v20), v21), v22), v23), v24), v25), v26)), BV32_AND(BV32_ADD($s.0, 16), 4095);
  goto $11;
$14:
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  assert {:sourceloc} {:sourceloc_num 40} true;
  $$output[v0] := $sum.0;
  return;
$truebb:
  assume {:partition} v5;
  assert {:block_sourceloc} {:sourceloc_num 41} true;
  goto $2;
$falsebb:
  assume {:partition} !v5;
  assert {:block_sourceloc} {:sourceloc_num 42} true;
  $0 := 0;
  goto $3;
$truebb0:
  assume {:partition} v6;
  assert {:block_sourceloc} {:sourceloc_num 43} true;
  goto $4;
$falsebb0:
  assume {:partition} !v6;
  assert {:block_sourceloc} {:sourceloc_num 44} true;
  goto $6;
$truebb1:
  assume {:partition} v8;
  assert {:block_sourceloc} {:sourceloc_num 45} true;
  goto $8;
$falsebb1:
  assume {:partition} !v8;
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  goto $10;
$truebb2:
  assume {:partition} v10;
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  goto $12;
$falsebb2:
  assume {:partition} !v10;
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  goto $14;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:int, $1:int);
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 256 then 1 else 0) != 0;
axiom (if num_groups_x == 40 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
