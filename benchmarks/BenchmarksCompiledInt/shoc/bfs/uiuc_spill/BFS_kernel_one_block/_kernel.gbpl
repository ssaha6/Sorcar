type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "frontier"} {:global} $$frontier : [int]int;
axiom {:array_info "$$frontier"} {:global} {:elem_width 32} {:source_name "frontier"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$frontier : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$frontier : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$frontier : bool;

var {:source_name "visited"} {:global} $$visited : [int]int;
axiom {:array_info "$$visited"} {:global} {:elem_width 32} {:source_name "visited"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$visited : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$visited : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$visited : bool;

var {:source_name "cost"} {:global} $$cost : [int]int;
axiom {:array_info "$$cost"} {:global} {:elem_width 32} {:source_name "cost"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$cost : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$cost : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$cost : bool;

var {:source_name "edgeArray"} {:global} $$edgeArray : [int]int;
axiom {:array_info "$$edgeArray"} {:global} {:elem_width 32} {:source_name "edgeArray"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$edgeArray : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$edgeArray : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$edgeArray : bool;

var {:source_name "edgeArrayAux"} {:global} $$edgeArrayAux : [int]int;
axiom {:array_info "$$edgeArrayAux"} {:global} {:elem_width 32} {:source_name "edgeArrayAux"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$edgeArrayAux : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$edgeArrayAux : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$edgeArrayAux : bool;

var {:source_name "frontier_length"} {:global} $$frontier_length : [int]int;
axiom {:array_info "$$frontier_length"} {:global} {:elem_width 32} {:source_name "frontier_length"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$frontier_length : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$frontier_length : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$frontier_length : bool;

var {:source_name "b_q"} {:group_shared} $$b_q : [int]int;
axiom {:array_info "$$b_q"} {:group_shared} {:elem_width 32} {:source_name "b_q"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$b_q : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$b_q : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$b_q : bool;

var {:source_name "b_q2"} {:group_shared} $$b_q2 : [int]int;
axiom {:array_info "$$b_q2"} {:group_shared} {:elem_width 32} {:source_name "b_q2"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$b_q2 : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$b_q2 : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$b_q2 : bool;

var {:source_name "b_q_length"} {:group_shared} $$BFS_kernel_one_block.b_q_length : [int]int;
axiom {:array_info "$$BFS_kernel_one_block.b_q_length"} {:group_shared} {:elem_width 32} {:source_name "b_q_length"} {:source_elem_width 32} {:source_dimensions "1"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$BFS_kernel_one_block.b_q_length : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$BFS_kernel_one_block.b_q_length : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$BFS_kernel_one_block.b_q_length : bool;

var {:source_name "b_offset"} {:group_shared} $$BFS_kernel_one_block.b_offset : [int]int;
axiom {:array_info "$$BFS_kernel_one_block.b_offset"} {:group_shared} {:elem_width 32} {:source_name "b_offset"} {:source_elem_width 32} {:source_dimensions "1"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$BFS_kernel_one_block.b_offset : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$BFS_kernel_one_block.b_offset : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$BFS_kernel_one_block.b_offset : bool;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_SUB(x : int, y : int) : int {
  x - y
}
function {:inline true} BV32_UGT(x : int, y : int) : bool {
  x > y
}
function {:inline true} BV32_ULT(x : int, y : int) : bool {
  x < y
}
procedure {:source_name "BFS_kernel_one_block"} {:kernel} $BFS_kernel_one_block($frontier_len:int, $numVertices:int, $numEdges:int, $max_local_mem:int)
requires {:sourceloc_num 0} (if $frontier_len == 1 then 1 else 0) != 0;
requires {:sourceloc_num 1} (if $max_local_mem == 1024 then 1 else 0) != 0;
{
  var $f_len.0:int;
  var $offset.0:int;
  var v0:int;
  var v1:bool;
  var v2:int;
  var v3:bool;
  var v4:bool;
  var v5:int;
  var v6:int;
  var v7:int;
  var v8:bool;
  var v9:int;
  var v10:int;
  var v11:int;
  var v12:int;
  var v13:bool;
  var v14:int;
  var v15:bool;
  var v16:int;
  var v17:bool;
  var v18:int;
  var v19:bool;
  var v20:int;
  var v21:int;
  var v22:bool;
  var v23:bool;
  var v24:int;
  var v25:bool;
  var v26:int;
  var v27:bool;
  var v28:int;
  var v29:int;
  var v30:bool;
  var v31:int;
  var v32:int;
  var v33:bool;
  var v34:int;
  var v35:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v0 := local_id_x;
  v1 := BV32_ULT(v0, $frontier_len);
  goto $truebb, $falsebb;
$1:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  assert {:sourceloc} {:sourceloc_num 4} true;
  v2 := $$frontier[v0];
  assert {:sourceloc} {:sourceloc_num 5} true;
  $$b_q[v0] := v2;
  goto $2;
$2:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  call {:sourceloc_num 7} $bugle_barrier(-1, -1);
  $f_len.0 := $frontier_len;
  goto $3;
$3:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  v3 := v0 == 0;
  goto $truebb0, $falsebb0;
$4:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  assert {:sourceloc} {:sourceloc_num 10} true;
  $$BFS_kernel_one_block.b_q_length[0] := 0;
  assert {:sourceloc} {:sourceloc_num 11} true;
  $$BFS_kernel_one_block.b_offset[0] := 0;
  goto $5;
$5:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  call {:sourceloc_num 13} $bugle_barrier(-1, -1);
  v4 := BV32_ULT(v0, $f_len.0);
  goto $truebb1, $falsebb1;
$6:
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  assert {:sourceloc} {:sourceloc_num 15} true;
  v5 := $$b_q[v0];
  assert {:sourceloc} {:sourceloc_num 16} true;
  $$visited[v5] := 0;
  assert {:sourceloc} {:sourceloc_num 17} true;
  v6 := $$edgeArray[v5];
  assert {:sourceloc} {:sourceloc_num 18} true;
  v7 := $$edgeArray[BV32_ADD(v5, 1)];
  $offset.0 := v6;
  goto $7;
$7:
  assert {:block_sourceloc} {:sourceloc_num 19} true;
  v8 := BV32_ULT($offset.0, v7);
  goto $truebb2, $falsebb2;
$8:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  assert {:sourceloc} {:sourceloc_num 21} true;
  v9 := $$edgeArrayAux[$offset.0];
  assert {:sourceloc} {:sourceloc_num 22} true;
  v10 := $$cost[v5];
  assert {:sourceloc} {:sourceloc_num 23} true;
  call {:atomic} {:atomic_function "__bugle_atomic_min_global_uint"} {:arg1 BV32_ADD(v10, 1)} {:parts 1} {:part 1} v11, $$cost := _ATOMIC_OP32($$cost, BV32_SDIV(BV32_MUL(v9, 4), 4));
  assert {:sourceloc} {:sourceloc_num 24} true;
  v12 := $$cost[v5];
  v13 := BV32_UGT(v11, BV32_ADD(v12, 1));
  goto $truebb3, $falsebb3;
$9:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  assert {:sourceloc} {:sourceloc_num 26} true;
  call {:atomic} {:atomic_function "__bugle_atomic_xchg_global_int"} {:arg1 1} {:parts 1} {:part 1} v14, $$visited := _ATOMIC_OP32($$visited, BV32_SDIV(BV32_MUL(v9, 4), 4));
  v15 := v14 == 0;
  goto $truebb4, $falsebb4;
$10:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  assert {:sourceloc} {:sourceloc_num 28} true;
  call {:atomic} {:atomic_function "__bugle_atomic_add_local_uint"} {:arg1 1} {:parts 1} {:part 1} v16, $$BFS_kernel_one_block.b_q_length := _ATOMIC_OP32($$BFS_kernel_one_block.b_q_length, 0);
  v17 := BV32_ULT(v16, $max_local_mem);
  goto $truebb5, $falsebb5;
$11:
  assert {:block_sourceloc} {:sourceloc_num 29} true;
  assert {:sourceloc} {:sourceloc_num 30} true;
  $$b_q2[v16] := v9;
  goto $13;
$12:
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  assert {:sourceloc} {:sourceloc_num 32} true;
  call {:atomic} {:atomic_function "__bugle_atomic_add_local_uint"} {:arg1 1} {:parts 1} {:part 1} v18, $$BFS_kernel_one_block.b_offset := _ATOMIC_OP32($$BFS_kernel_one_block.b_offset, 0);
  assert {:sourceloc} {:sourceloc_num 33} true;
  $$frontier[v18] := v9;
  goto $13;
$13:
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  goto $14;
$14:
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  goto $15;
$15:
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  $offset.0 := BV32_ADD($offset.0, 1);
  goto $7;
$16:
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  goto $17;
$17:
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  call {:sourceloc_num 39} $bugle_barrier(-1, -1);
  v19 := BV32_ULT(v0, $max_local_mem);
  goto $truebb6, $falsebb6;
$18:
  assert {:block_sourceloc} {:sourceloc_num 40} true;
  assert {:sourceloc} {:sourceloc_num 41} true;
  v20 := $$b_q2[v0];
  assert {:sourceloc} {:sourceloc_num 42} true;
  $$b_q[v0] := v20;
  goto $19;
$19:
  assert {:block_sourceloc} {:sourceloc_num 43} true;
  call {:sourceloc_num 44} $bugle_barrier(-1, -1);
  assert {:sourceloc} {:sourceloc_num 45} true;
  v21 := $$BFS_kernel_one_block.b_q_length[0];
  v22 := v21 == 0;
  goto $truebb7, $falsebb7;
$20:
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  v23 := v0 == 0;
  goto $truebb8, $falsebb8;
$21:
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  assert {:sourceloc} {:sourceloc_num 48} true;
  $$frontier_length[0] := 0;
  goto $22;
$22:
  assert {:block_sourceloc} {:sourceloc_num 49} true;
  goto $32;
$23:
  assert {:block_sourceloc} {:sourceloc_num 50} true;
  assert {:sourceloc} {:sourceloc_num 51} true;
  v24 := $$BFS_kernel_one_block.b_q_length[0];
  v25 := BV32_UGT(v24, group_size_x);
  goto $truebb9, $falsebb9;
$24:
  assert {:block_sourceloc} {:sourceloc_num 52} true;
  assert {:sourceloc} {:sourceloc_num 53} true;
  v26 := $$BFS_kernel_one_block.b_q_length[0];
  v27 := BV32_UGT(v26, $max_local_mem);
  goto $truebb10, $falsebb10;
$25:
  assert {:block_sourceloc} {:sourceloc_num 54} true;
  assert {:sourceloc} {:sourceloc_num 55} true;
  v28 := $$BFS_kernel_one_block.b_q_length[0];
  assert {:sourceloc} {:sourceloc_num 56} true;
  v29 := $$BFS_kernel_one_block.b_offset[0];
  v30 := BV32_ULT(v0, BV32_SUB(v28, v29));
  goto $truebb11, $falsebb11;
$26:
  assert {:block_sourceloc} {:sourceloc_num 57} true;
  assert {:sourceloc} {:sourceloc_num 58} true;
  v31 := $$b_q[v0];
  assert {:sourceloc} {:sourceloc_num 59} true;
  v32 := $$BFS_kernel_one_block.b_offset[0];
  assert {:sourceloc} {:sourceloc_num 60} true;
  $$frontier[BV32_ADD(v32, v0)] := v31;
  goto $27;
$27:
  assert {:block_sourceloc} {:sourceloc_num 61} true;
  v33 := v0 == 0;
  goto $truebb12, $falsebb12;
$28:
  assert {:block_sourceloc} {:sourceloc_num 62} true;
  assert {:sourceloc} {:sourceloc_num 63} true;
  v34 := $$BFS_kernel_one_block.b_q_length[0];
  assert {:sourceloc} {:sourceloc_num 64} true;
  $$frontier_length[0] := v34;
  goto $29;
$29:
  assert {:block_sourceloc} {:sourceloc_num 65} true;
  goto $32;
$30:
  assert {:block_sourceloc} true;
  goto $31;
$31:
  assert {:block_sourceloc} {:sourceloc_num 66} true;
  assert {:sourceloc} {:sourceloc_num 67} true;
  v35 := $$BFS_kernel_one_block.b_q_length[0];
  call {:sourceloc_num 68} $bugle_barrier(-1, -1);
  $f_len.0 := v35;
  goto $3;
$32:
  assert {:block_sourceloc} {:sourceloc_num 69} true;
  return;
$truebb:
  assume {:partition} v1;
  assert {:block_sourceloc} {:sourceloc_num 70} true;
  goto $1;
$falsebb:
  assume {:partition} !v1;
  assert {:block_sourceloc} {:sourceloc_num 71} true;
  goto $2;
$truebb0:
  assume {:partition} v3;
  assert {:block_sourceloc} {:sourceloc_num 72} true;
  goto $4;
$falsebb0:
  assume {:partition} !v3;
  assert {:block_sourceloc} {:sourceloc_num 73} true;
  goto $5;
$truebb1:
  assume {:partition} v4;
  assert {:block_sourceloc} {:sourceloc_num 74} true;
  goto $6;
$falsebb1:
  assume {:partition} !v4;
  assert {:block_sourceloc} {:sourceloc_num 75} true;
  goto $17;
$truebb2:
  assume {:partition} v8;
  assert {:block_sourceloc} {:sourceloc_num 76} true;
  goto $8;
$falsebb2:
  assume {:partition} !v8;
  assert {:block_sourceloc} {:sourceloc_num 77} true;
  goto $16;
$truebb3:
  assume {:partition} v13;
  assert {:block_sourceloc} {:sourceloc_num 78} true;
  goto $9;
$falsebb3:
  assume {:partition} !v13;
  assert {:block_sourceloc} {:sourceloc_num 79} true;
  goto $15;
$truebb4:
  assume {:partition} v15;
  assert {:block_sourceloc} {:sourceloc_num 80} true;
  goto $10;
$falsebb4:
  assume {:partition} !v15;
  assert {:block_sourceloc} {:sourceloc_num 81} true;
  goto $14;
$truebb5:
  assume {:partition} v17;
  assert {:block_sourceloc} {:sourceloc_num 82} true;
  goto $11;
$falsebb5:
  assume {:partition} !v17;
  assert {:block_sourceloc} {:sourceloc_num 83} true;
  goto $12;
$truebb6:
  assume {:partition} v19;
  assert {:block_sourceloc} {:sourceloc_num 84} true;
  goto $18;
$falsebb6:
  assume {:partition} !v19;
  assert {:block_sourceloc} {:sourceloc_num 85} true;
  goto $19;
$truebb7:
  assume {:partition} v22;
  assert {:block_sourceloc} {:sourceloc_num 86} true;
  goto $20;
$falsebb7:
  assume {:partition} !v22;
  assert {:block_sourceloc} {:sourceloc_num 87} true;
  goto $23;
$truebb8:
  assume {:partition} v23;
  assert {:block_sourceloc} {:sourceloc_num 88} true;
  goto $21;
$falsebb8:
  assume {:partition} !v23;
  assert {:block_sourceloc} {:sourceloc_num 89} true;
  goto $22;
$truebb9:
  assume {:partition} v25;
  assert {:block_sourceloc} {:sourceloc_num 90} true;
  goto $25;
$falsebb9:
  assume {:partition} !v25;
  assert {:block_sourceloc} {:sourceloc_num 91} true;
  goto $24;
$truebb10:
  assume {:partition} v27;
  assert {:block_sourceloc} {:sourceloc_num 92} true;
  goto $25;
$falsebb10:
  assume {:partition} !v27;
  assert {:block_sourceloc} {:sourceloc_num 93} true;
  goto $30;
$truebb11:
  assume {:partition} v30;
  assert {:block_sourceloc} {:sourceloc_num 94} true;
  goto $26;
$falsebb11:
  assume {:partition} !v30;
  assert {:block_sourceloc} {:sourceloc_num 95} true;
  goto $27;
$truebb12:
  assume {:partition} v33;
  assert {:block_sourceloc} {:sourceloc_num 96} true;
  goto $28;
$falsebb12:
  assume {:partition} !v33;
  assert {:block_sourceloc} {:sourceloc_num 97} true;
  goto $29;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:int, $1:int);
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 1024 then 1 else 0) != 0;
axiom (if num_groups_x == 1 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
