type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "levels"} {:global} $$levels : [int]int;
axiom {:array_info "$$levels"} {:global} {:elem_width 32} {:source_name "levels"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$levels : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$levels : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$levels : bool;

var {:source_name "edgeArray"} {:global} $$edgeArray : [int]int;
axiom {:array_info "$$edgeArray"} {:global} {:elem_width 32} {:source_name "edgeArray"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$edgeArray : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$edgeArray : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$edgeArray : bool;

var {:source_name "edgeArrayAux"} {:global} $$edgeArrayAux : [int]int;
axiom {:array_info "$$edgeArrayAux"} {:global} {:elem_width 32} {:source_name "edgeArrayAux"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$edgeArrayAux : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$edgeArrayAux : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$edgeArrayAux : bool;

var {:source_name "flag"} {:global} $$flag : [int]int;
axiom {:array_info "$$flag"} {:global} {:elem_width 32} {:source_name "flag"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$flag : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$flag : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$flag : bool;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_SLT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV32_SREM(x : int, y : int) : int {
  x mod y
}
function {:inline true} BV32_SUB(x : int, y : int) : int {
  x - y
}
function {:inline true} BV32_UGE(x : int, y : int) : bool {
  x >= y
}
function {:inline true} BV32_ULT(x : int, y : int) : bool {
  x < y
}
procedure {:source_name "BFS_kernel_warp"} {:kernel} $BFS_kernel_warp($W_SZ:int, $CHUNK_SZ:int, $numVertices:int, $curr:int)
requires {:sourceloc_num 0} (if $W_SZ == 32 then 1 else 0) != 0;
requires {:sourceloc_num 1} (if $CHUNK_SZ == 32 then 1 else 0) != 0;
requires {:sourceloc_num 2} (if $numVertices == 10000 then 1 else 0) != 0;
{
  var $chk_sz.1:int;
  var $chk_sz.0:int;
  var $v.0:int;
  var $i.0:int;
  var v3:int;
  var v4:bool;
  var v0:int;
  var v1:int;
  var v2:bool;
  var v5:bool;
  var v6:int;
  var v7:bool;
  var v8:int;
  var v9:int;
  var v10:int;
  var v11:bool;
  var v12:int;
  var v13:int;
  var v14:bool;
$0:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  v1 := BV32_MUL(BV32_SDIV(v0, $W_SZ), $CHUNK_SZ);
  v2 := BV32_UGE(BV32_ADD(v1, $CHUNK_SZ), $numVertices);
  goto $truebb, $falsebb;
$1:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  v3 := BV32_ADD(BV32_SUB($numVertices, v1), 1);
  v4 := BV32_SLT(v3, 0);
  goto $truebb0, $falsebb0;
$2:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  $chk_sz.0 := 0;
  goto $3;
$3:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  $chk_sz.1 := $chk_sz.0;
  goto $4;
$4:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  $v.0 := v1;
  goto $5;
$5:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  v5 := BV32_SLT($v.0, BV32_ADD(BV32_SUB($chk_sz.1, 1), v1));
  goto $truebb1, $falsebb1;
$6:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  assert {:sourceloc} {:sourceloc_num 10} true;
  v6 := $$levels[$v.0];
  v7 := v6 == $curr;
  goto $truebb2, $falsebb2;
$7:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  assert {:sourceloc} {:sourceloc_num 12} true;
  v8 := $$edgeArray[BV32_ADD($v.0, 1)];
  assert {:sourceloc} {:sourceloc_num 13} true;
  v9 := $$edgeArray[$v.0];
  assert {:sourceloc} {:sourceloc_num 14} true;
  v10 := $$edgeArray[$v.0];
  $i.0 := BV32_SREM(v0, $W_SZ);
  goto $8;
$8:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  v11 := BV32_ULT($i.0, BV32_SUB(v8, v9));
  goto $truebb3, $falsebb3;
$9:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  assert {:sourceloc} {:sourceloc_num 17} true;
  v12 := $$edgeArrayAux[BV32_ADD($i.0, v10)];
  assert {:sourceloc} {:sourceloc_num 18} true;
  v13 := $$levels[v12];
  v14 := v13 == -1;
  goto $truebb4, $falsebb4;
$10:
  assert {:block_sourceloc} {:sourceloc_num 19} true;
  assert {:sourceloc} {:sourceloc_num 20} true;
  $$levels[v12] := BV32_ADD($curr, 1);
  assert {:sourceloc} {:sourceloc_num 21} true;
  $$flag[0] := 1;
  goto $11;
$11:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  goto $12;
$12:
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  $i.0 := BV32_ADD($i.0, $W_SZ);
  goto $8;
$13:
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  goto $14;
$14:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  goto $15;
$15:
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  $v.0 := BV32_ADD($v.0, 1);
  goto $5;
$16:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  return;
$truebb:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  goto $1;
$falsebb:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 29} true;
  $chk_sz.1 := BV32_ADD($CHUNK_SZ, 1);
  goto $4;
$truebb0:
  assume {:partition} v4;
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  goto $2;
$falsebb0:
  assume {:partition} !v4;
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  $chk_sz.0 := v3;
  goto $3;
$truebb1:
  assume {:partition} v5;
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  goto $6;
$falsebb1:
  assume {:partition} !v5;
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  goto $16;
$truebb2:
  assume {:partition} v7;
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  goto $7;
$falsebb2:
  assume {:partition} !v7;
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  goto $14;
$truebb3:
  assume {:partition} v11;
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  goto $9;
$falsebb3:
  assume {:partition} !v11;
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  goto $13;
$truebb4:
  assume {:partition} v14;
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  goto $10;
$falsebb4:
  assume {:partition} !v14;
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  goto $11;
}
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 1024 then 1 else 0) != 0;
axiom (if num_groups_x == 10 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
