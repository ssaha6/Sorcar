type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "work"} {:global} $$work : [int]int;
axiom {:array_info "$$work"} {:global} {:elem_width 32} {:source_name "work"} {:source_elem_width 64} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 64} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$work : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 64} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$work : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 64} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$work : bool;

var {:source_name "fail"} {:global} $$fail : [int]int;
axiom {:array_info "$$fail"} {:global} {:elem_width 32} {:source_name "fail"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$fail : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$fail : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$fail : bool;

var {:source_name "a"} $$a : [int]int;
axiom {:array_info "$$a"} {:elem_width 32} {:source_name "a"} {:source_elem_width 64} {:source_dimensions "8"} true;

var {:source_name "b"} $$b : [int]int;
axiom {:array_info "$$b"} {:elem_width 32} {:source_name "b"} {:source_elem_width 64} {:source_dimensions "8"} true;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function FLT32(int, int) : bool;
function FUNO32(int, int) : bool;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SLT(x : int, y : int) : bool {
  x < y
}
procedure {:source_name "chk1D_512"} {:kernel} $chk1D_512($half_n_cmplx:int)
{
  var $i.0:int;
  var $i.1:int;
  var $i.2:int;
  var v0:int;
  var v1:bool;
  var v2:int;
  var v3:int;
  var v4:bool;
  var v5:int;
  var v6:int;
  var v7:bool;
  var v8:int;
  var v9:int;
  var v10:int;
  var v11:int;
  var v12:bool;
  var v13:int;
  var v14:int;
  var v15:int;
  var v16:int;
  var v17:bool;
$0:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, 512), local_id_x);
  $i.0 := 0;
  goto $1;
$1:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  v1 := BV32_SLT($i.0, 8);
  goto $truebb, $falsebb;
$2:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  assert {:sourceloc} {:sourceloc_num 3} true;
  v2 := $$work[BV32_ADD(BV32_MUL(v0, 2), BV32_MUL(BV32_MUL($i.0, 64), 2))];
  assert {:sourceloc} {:sourceloc_num 4} true;
  v3 := $$work[BV32_ADD(BV32_ADD(BV32_MUL(v0, 2), BV32_MUL(BV32_MUL($i.0, 64), 2)), 1)];
  assert {:sourceloc} {:sourceloc_num 5} true;
  $$a[BV32_MUL($i.0, 2)] := v2;
  assert {:sourceloc} {:sourceloc_num 6} true;
  $$a[BV32_ADD(BV32_MUL($i.0, 2), 1)] := v3;
  goto $3;
$3:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  $i.0 := BV32_ADD($i.0, 1);
  goto $1;
$4:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  $i.1 := 0;
  goto $5;
$5:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  v4 := BV32_SLT($i.1, 8);
  goto $truebb0, $falsebb0;
$6:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  assert {:sourceloc} {:sourceloc_num 11} true;
  v5 := $$work[BV32_ADD(BV32_MUL(v0, 2), BV32_MUL(BV32_ADD($half_n_cmplx, BV32_MUL($i.1, 64)), 2))];
  assert {:sourceloc} {:sourceloc_num 12} true;
  v6 := $$work[BV32_ADD(BV32_ADD(BV32_MUL(v0, 2), BV32_MUL(BV32_ADD($half_n_cmplx, BV32_MUL($i.1, 64)), 2)), 1)];
  assert {:sourceloc} {:sourceloc_num 13} true;
  $$b[BV32_MUL($i.1, 2)] := v5;
  assert {:sourceloc} {:sourceloc_num 14} true;
  $$b[BV32_ADD(BV32_MUL($i.1, 2), 1)] := v6;
  goto $7;
$7:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  $i.1 := BV32_ADD($i.1, 1);
  goto $5;
$8:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  $i.2 := 0;
  goto $9;
$9:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  v7 := BV32_SLT($i.2, 8);
  goto $truebb1, $falsebb1;
$10:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  assert {:sourceloc} {:sourceloc_num 19} true;
  v8 := $$a[BV32_MUL($i.2, 2)];
  assert {:sourceloc} {:sourceloc_num 20} true;
  v9 := $$a[BV32_ADD(BV32_MUL($i.2, 2), 1)];
  assert {:sourceloc} {:sourceloc_num 21} true;
  v10 := $$b[BV32_MUL($i.2, 2)];
  assert {:sourceloc} {:sourceloc_num 22} true;
  v11 := $$b[BV32_ADD(BV32_MUL($i.2, 2), 1)];
  v12 := (FLT32(v10, v8) || FLT32(v8, v10)) || FUNO32(v8, v10);
  goto $truebb2, $falsebb2;
$11:
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  assert {:sourceloc} {:sourceloc_num 24} true;
  v13 := $$a[BV32_MUL($i.2, 2)];
  assert {:sourceloc} {:sourceloc_num 25} true;
  v14 := $$a[BV32_ADD(BV32_MUL($i.2, 2), 1)];
  assert {:sourceloc} {:sourceloc_num 26} true;
  v15 := $$b[BV32_MUL($i.2, 2)];
  assert {:sourceloc} {:sourceloc_num 27} true;
  v16 := $$b[BV32_ADD(BV32_MUL($i.2, 2), 1)];
  v17 := (FLT32(v16, v14) || FLT32(v14, v16)) || FUNO32(v14, v16);
  goto $truebb3, $falsebb3;
$12:
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  assert {:sourceloc} {:sourceloc_num 29} true;
  $$fail[0] := 1;
  goto $13;
$13:
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  goto $14;
$14:
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  $i.2 := BV32_ADD($i.2, 1);
  goto $9;
$15:
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  return;
$truebb:
  assume {:partition} v1;
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  goto $2;
$falsebb:
  assume {:partition} !v1;
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  goto $4;
$truebb0:
  assume {:partition} v4;
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  goto $6;
$falsebb0:
  assume {:partition} !v4;
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  goto $8;
$truebb1:
  assume {:partition} v7;
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  goto $10;
$falsebb1:
  assume {:partition} !v7;
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  goto $15;
$truebb2:
  assume {:partition} v12;
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  goto $12;
$falsebb2:
  assume {:partition} !v12;
  assert {:block_sourceloc} {:sourceloc_num 40} true;
  goto $11;
$truebb3:
  assume {:partition} v17;
  assert {:block_sourceloc} {:sourceloc_num 41} true;
  goto $12;
$falsebb3:
  assume {:partition} !v17;
  assert {:block_sourceloc} {:sourceloc_num 42} true;
  goto $13;
}
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 64 then 1 else 0) != 0;
axiom (if num_groups_x == 128 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
