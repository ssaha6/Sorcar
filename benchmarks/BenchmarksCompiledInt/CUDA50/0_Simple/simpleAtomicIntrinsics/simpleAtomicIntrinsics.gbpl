type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "g_odata"} {:global} $$g_odata : [int]int;
axiom {:array_info "$$g_odata"} {:global} {:elem_width 32} {:source_name "g_odata"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$g_odata : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$g_odata : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$g_odata : bool;

const _WATCHED_OFFSET : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SHL(x : int, y : int) : int {
  if x >= 0 && y == 1 then x*2 else BV32_SHL_UF(x,y)
}
function BV32_SHL_UF(int, int) : int;
function {:inline true} BV32_SUB(x : int, y : int) : int {
  x - y
}
procedure {:source_name "testKernel"} {:kernel} $_Z10testKernelPi()
{
  var v3:int;
  var v0:int;
  var v1:int;
  var v2:int;
  var v4:int;
  var v5:int;
  var v6:int;
  var v7:int;
  var v8:int;
  var v9:int;
  var v10:int;
  var v11:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  v0 := BV32_ADD(BV32_MUL(group_size_x, group_id_x), local_id_x);
  assert {:sourceloc} {:sourceloc_num 1} true;
  call {:atomic} {:atomic_function "__atomicAdd_int"} {:arg1 10} {:parts 1} {:part 1} v1, $$g_odata := _ATOMIC_OP32($$g_odata, 0);
  assert {:sourceloc} {:sourceloc_num 2} true;
  call {:atomic} {:atomic_function "__atomicSub_int"} {:arg1 10} {:parts 1} {:part 1} v2, $$g_odata := _ATOMIC_OP32($$g_odata, 1);
  assert {:sourceloc} {:sourceloc_num 3} true;
  call {:atomic} {:atomic_function "__atomicExch_int"} {:arg1 v0} {:parts 1} {:part 1} v3, $$g_odata := _ATOMIC_OP32($$g_odata, 2);
  assert {:sourceloc} {:sourceloc_num 4} true;
  call {:atomic} {:atomic_function "__atomicMax_int"} {:arg1 v0} {:parts 1} {:part 1} v4, $$g_odata := _ATOMIC_OP32($$g_odata, 3);
  assert {:sourceloc} {:sourceloc_num 5} true;
  call {:atomic} {:atomic_function "__atomicMin_int"} {:arg1 v0} {:parts 1} {:part 1} v5, $$g_odata := _ATOMIC_OP32($$g_odata, 4);
  assert {:sourceloc} {:sourceloc_num 6} true;
  call {:atomic} {:atomic_function "__atomicInc_unsigned_int"} {:arg1 17} {:parts 1} {:part 1} v6, $$g_odata := _ATOMIC_OP32($$g_odata, 5);
  assert {:sourceloc} {:sourceloc_num 7} true;
  call {:atomic} {:atomic_function "__atomicDec_unsigned_int"} {:arg1 137} {:parts 1} {:part 1} v7, $$g_odata := _ATOMIC_OP32($$g_odata, 6);
  assert {:sourceloc} {:sourceloc_num 8} true;
  call {:atomic} {:atomic_function "__atomicCAS_int"} {:arg1 BV32_SUB(v0, 1)} {:arg2 v0} {:parts 1} {:part 1} v8, $$g_odata := _ATOMIC_OP32($$g_odata, 7);
  assert {:sourceloc} {:sourceloc_num 9} true;
  call {:atomic} {:atomic_function "__atomicAnd_int"} {:arg1 BV32_ADD(BV32_MUL(2, v0), 7)} {:parts 1} {:part 1} v9, $$g_odata := _ATOMIC_OP32($$g_odata, 8);
  assert {:sourceloc} {:sourceloc_num 10} true;
  call {:atomic} {:atomic_function "__atomicOr_int"} {:arg1 BV32_SHL(1, v0)} {:parts 1} {:part 1} v10, $$g_odata := _ATOMIC_OP32($$g_odata, 9);
  assert {:sourceloc} {:sourceloc_num 11} true;
  call {:atomic} {:atomic_function "__atomicXor_int"} {:arg1 v0} {:parts 1} {:part 1} v11, $$g_odata := _ATOMIC_OP32($$g_odata, 10);
  return;
}
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 256 then 1 else 0) != 0;
axiom (if num_groups_x == 64 then 1 else 0) != 0;
