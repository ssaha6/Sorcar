type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "v"} {:global} $$v : [int]int;
axiom {:array_info "$$v"} {:global} {:elem_width 32} {:source_name "v"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$v : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$v : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$v : bool;

const _WATCHED_OFFSET : int;
type functionPtr = bv3;
const $functionId$$_Z13multiplyByTwof : functionPtr;
axiom $functionId$$_Z13multiplyByTwof == 1bv3;
const $functionId$$_Z11divideByTwof : functionPtr;
axiom $functionId$$_Z11divideByTwof == 2bv3;
const $functionId$$_Z15transformVectorPfPFffEj : functionPtr;
axiom $functionId$$_Z15transformVectorPfPFffEj == 3bv3;
const $functionId$$null$ : functionPtr;
axiom $functionId$$null$ == 0bv3;

const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function FMUL32(int, int) : int;
function {:inline true} BV1_ZEXT32(x : int) : int {
  x
}
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_OR(x : int, y : int) : int {
  if x == y then x else (if x == 0 then y else (if y == 0 then x else BV32_OR_UF(x, y)))
}
function BV32_OR_UF(int, int) : int;
function {:inline true} BV32_ULT(x : int, y : int) : bool {
  x < y
}
procedure {:source_name "multiplyByTwo"} $_Z13multiplyByTwof($number:int) returns ($ret:int)
{
$0:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  $ret := FMUL32($number, 1073741824);
  return;
}
procedure {:source_name "divideByTwo"} $_Z11divideByTwof($number:int) returns ($ret:int)
{
$0:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  $ret := FMUL32($number, 1056964608);
  return;
}
procedure {:source_name "transformVector"} {:kernel} $_Z15transformVectorPfPFffEj($f:functionPtr, $size:int)
requires {:sourceloc_num 2} (if BV32_OR(BV1_ZEXT32((if $f == $functionId$$_Z13multiplyByTwof then 1 else 0)), BV1_ZEXT32((if $f == $functionId$$_Z11divideByTwof then 1 else 0))) != 0 then 1 else 0) != 0;
{
  var v0:int;
  var v1:bool;
  var v2:int;
  var v3:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  v1 := BV32_ULT(v0, $size);
  goto $truebb, $falsebb;
$1:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  assert {:sourceloc} {:sourceloc_num 5} true;
  v2 := $$v[v0];
  if ($f == $functionId$$_Z13multiplyByTwof) {
    call {:sourceloc_num 6} v3 := $_Z13multiplyByTwof(v2);
  } else if ($f == $functionId$$_Z11divideByTwof) {
    call {:sourceloc_num 7} v3 := $_Z11divideByTwof(v2);
  } else {
    assert {:bad_pointer_access} {:sourceloc_num 8} false;
  }
  assert {:sourceloc} {:sourceloc_num 9} true;
  $$v[v0] := v3;
  goto $2;
$2:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  return;
$truebb:
  assume {:partition} v1;
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  goto $1;
$falsebb:
  assume {:partition} !v1;
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  goto $2;
}
axiom (if group_size_x == 1024 then 1 else 0) != 0;
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_x == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
