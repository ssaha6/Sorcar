type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "newPos"} {:global} $$newPos : [int]int;
axiom {:array_info "$$newPos"} {:global} {:elem_width 32} {:source_name "newPos"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$newPos : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$newPos : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$newPos : bool;

var {:source_name "oldPos"} {:global} $$oldPos : [int]int;
axiom {:array_info "$$oldPos"} {:global} {:elem_width 32} {:source_name "oldPos"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$oldPos : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$oldPos : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$oldPos : bool;

var {:source_name "vel"} {:global} $$vel : [int]int;
axiom {:array_info "$$vel"} {:global} {:elem_width 32} {:source_name "vel"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$vel : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$vel : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$vel : bool;

var {:source_name ""} $$0 : [int]int;
axiom {:array_info "$$0"} {:elem_width 32} {:source_name ""} {:source_elem_width 96} {:source_dimensions "1"} true;

var {:source_name "ai.i.i.i"} $$ai.i.i.i : [int]int;
axiom {:array_info "$$ai.i.i.i"} {:elem_width 32} {:source_name "ai.i.i.i"} {:source_elem_width 96} {:source_dimensions "1"} true;

var {:source_name "bi.i.i.i"} $$bi.i.i.i : [int]int;
axiom {:array_info "$$bi.i.i.i"} {:elem_width 32} {:source_name "bi.i.i.i"} {:source_elem_width 128} {:source_dimensions "1"} true;

var {:source_name "bj.i.i.i"} $$bj.i.i.i : [int]int;
axiom {:array_info "$$bj.i.i.i"} {:elem_width 32} {:source_name "bj.i.i.i"} {:source_elem_width 128} {:source_dimensions "1"} true;

var {:source_name "r.i.i.i"} $$r.i.i.i : [int]int;
axiom {:array_info "$$r.i.i.i"} {:elem_width 32} {:source_name "r.i.i.i"} {:source_elem_width 96} {:source_dimensions "1"} true;

var {:source_name ""} $$1 : [int]int;
axiom {:array_info "$$1"} {:elem_width 32} {:source_name ""} {:source_elem_width 96} {:source_dimensions "1"} true;

var {:source_name "iPos.i.i"} $$iPos.i.i : [int]int;
axiom {:array_info "$$iPos.i.i"} {:elem_width 32} {:source_name "iPos.i.i"} {:source_elem_width 128} {:source_dimensions "1"} true;

var {:source_name "accel.i.i"} $$accel.i.i : [int]int;
axiom {:array_info "$$accel.i.i"} {:elem_width 32} {:source_name "accel.i.i"} {:source_elem_width 96} {:source_dimensions "1"} true;

var {:source_name ""} $$2 : [int]int;
axiom {:array_info "$$2"} {:elem_width 32} {:source_name ""} {:source_elem_width 96} {:source_dimensions "1"} true;

var {:source_name ""} $$3 : [int]int;
axiom {:array_info "$$3"} {:elem_width 32} {:source_name ""} {:source_elem_width 96} {:source_dimensions "1"} true;

var {:source_name ""} $$4 : [int]int;
axiom {:array_info "$$4"} {:elem_width 32} {:source_name ""} {:source_elem_width 128} {:source_dimensions "1"} true;

var {:source_name ""} $$5 : [int]int;
axiom {:array_info "$$5"} {:elem_width 32} {:source_name ""} {:source_elem_width 128} {:source_dimensions "1"} true;

var {:source_name ""} $$6 : [int]int;
axiom {:array_info "$$6"} {:elem_width 32} {:source_name ""} {:source_elem_width 96} {:source_dimensions "1"} true;

var {:source_name "bodyPos.i"} $$bodyPos.i : [int]int;
axiom {:array_info "$$bodyPos.i"} {:elem_width 32} {:source_name "bodyPos.i"} {:source_elem_width 128} {:source_dimensions "1"} true;

var {:source_name ""} $$7 : [int]int;
axiom {:array_info "$$7"} {:elem_width 32} {:source_name ""} {:source_elem_width 96} {:source_dimensions "1"} true;

var {:source_name ""} $$8 : [int]int;
axiom {:array_info "$$8"} {:elem_width 32} {:source_name ""} {:source_elem_width 128} {:source_dimensions "1"} true;

var {:source_name ""} $$9 : [int]int;
axiom {:array_info "$$9"} {:elem_width 32} {:source_name ""} {:source_elem_width 96} {:source_dimensions "1"} true;

var {:source_name "position"} $$position : [int]int;
axiom {:array_info "$$position"} {:elem_width 32} {:source_name "position"} {:source_elem_width 128} {:source_dimensions "1"} true;

var {:source_name "accel"} $$accel : [int]int;
axiom {:array_info "$$accel"} {:elem_width 32} {:source_name "accel"} {:source_elem_width 96} {:source_dimensions "1"} true;

var {:source_name ""} $$10 : [int]int;
axiom {:array_info "$$10"} {:elem_width 32} {:source_name ""} {:source_elem_width 128} {:source_dimensions "1"} true;

var {:source_name "velocity"} $$velocity : [int]int;
axiom {:array_info "$$velocity"} {:elem_width 32} {:source_name "velocity"} {:source_elem_width 128} {:source_dimensions "1"} true;

var {:source_name "__smem"} {:group_shared} $$__smem : [int]int;
axiom {:array_info "$$__smem"} {:group_shared} {:elem_width 32} {:source_name "__smem"} {:source_elem_width 32} {:source_dimensions "0"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$__smem : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$__smem : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$__smem : bool;

var {:source_name "softeningSquared"} {:constant} $$softeningSquared : [int]int;
axiom {:array_info "$$softeningSquared"} {:constant} {:elem_width 32} {:source_name "softeningSquared"} {:source_elem_width 32} {:source_dimensions "1"} true;

const _WATCHED_OFFSET : int;
const {:group_id_x} group_id_x : int;
const {:group_id_y} group_id_y : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:local_id_y} local_id_y : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function BV_EXTRACT(int, int, int) : int;
function FADD32(int, int) : int;
function FMUL32(int, int) : int;
function FSUB32(int, int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_SUB(x : int, y : int) : int {
  x - y
}
function {:inline true} BV32_UGE(x : int, y : int) : bool {
  x >= y
}
function {:inline true} BV32_ULT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV32_ZEXT64(x : int) : int {
  x
}
function {:inline true} BV64_ADD(x : int, y : int) : int {
  x + y
}
procedure {:source_name "integrateBodies<float, false>"} {:kernel} $_Z15integrateBodiesIfLb0EEvPN4vec4IT_E4TypeES4_S4_jjffi($deviceOffset:int, $deviceNumBodies:int, $deltaTime:int, $damping:int, $totalNumBodies:int)
requires {:sourceloc_num 0} (if $deviceNumBodies == 13824 then 1 else 0) != 0;
{
  var $tile.i.0:int;
  var $0:int;
  var $j.i.i.0:int;
  var $counter.i.i.0:int;
  var v0:int;
  var v1:bool;
  var v73:int;
  var v2:int;
  var v3:int;
  var v4:int;
  var v9:int;
  var v5:int;
  var v6:int;
  var v7:int;
  var v8:int;
  var v10:int;
  var v11:int;
  var v12:int;
  var v13:int;
  var v14:bool;
  var v15:bool;
  var v16:int;
  var v17:int;
  var v18:int;
  var v22:int;
  var v19:int;
  var v20:int;
  var v21:int;
  var v23:int;
  var v24:int;
  var v25:int;
  var v26:int;
  var v27:int;
  var v28:int;
  var v29:int;
  var v30:int;
  var v31:int;
  var v32:int;
  var v33:int;
  var v34:bool;
  var v35:int;
  var v36:int;
  var v37:int;
  var v38:int;
  var v39:int;
  var v40:int;
  var v41:int;
  var v42:int;
  var v43:int;
  var v44:int;
  var v45:int;
  var v46:int;
  var v47:int;
  var v48:int;
  var v49:int;
  var v50:int;
  var v51:int;
  var v52:int;
  var v53:int;
  var v54:int;
  var v55:int;
  var v56:int;
  var v76:int;
  var v57:int;
  var v58:int;
  var v59:int;
  var v60:int;
  var v61:int;
  var v62:int;
  var v63:int;
  var v64:int;
  var v65:int;
  var v66:int;
  var v67:int;
  var v68:int;
  var v69:int;
  var v70:int;
  var v71:int;
  var v72:int;
  var v74:int;
  var v75:int;
  var v77:int;
  var v78:int;
  var v79:int;
  var v80:int;
  var v81:int;
  var v82:int;
  var v83:int;
  var v84:int;
  var v85:int;
  var v86:int;
  var v87:int;
  var v88:int;
  var v89:int;
  var v90:int;
  var v91:int;
  var v92:int;
  var v93:int;
  var v94:int;
  var v95:int;
  var v96:int;
  var v97:int;
  var v98:int;
  var v99:int;
  var v100:int;
  var v101:int;
  var v102:int;
  var v103:int;
  var v104:int;
  var v105:int;
  var v106:int;
  var v107:int;
  var v116:int;
  var v108:int;
  var v109:int;
  var v110:int;
  var v111:int;
  var v112:int;
  var v113:int;
  var v114:int;
  var v115:int;
  var v117:int;
  var v118:int;
  var v119:int;
  var v120:int;
  var v121:int;
  var v122:int;
  var v123:int;
  var v124:int;
  var v125:int;
  var v126:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  v1 := BV32_UGE(v0, $deviceNumBodies);
  goto $truebb, $falsebb;
$1:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  goto $10;
$2:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  assert {:sourceloc} {:sourceloc_num 4} true;
  v2 := $$oldPos[BV32_MUL(BV32_ADD($deviceOffset, v0), 4)];
  assert {:sourceloc} {:sourceloc_num 5} true;
  $$position[0] := v2;
  assert {:sourceloc} {:sourceloc_num 6} true;
  v3 := $$oldPos[BV32_ADD(BV32_MUL(BV32_ADD($deviceOffset, v0), 4), 1)];
  assert {:sourceloc} {:sourceloc_num 7} true;
  $$position[1] := v3;
  assert {:sourceloc} {:sourceloc_num 8} true;
  v4 := $$oldPos[BV32_ADD(BV32_MUL(BV32_ADD($deviceOffset, v0), 4), 2)];
  assert {:sourceloc} {:sourceloc_num 9} true;
  $$position[2] := v4;
  assert {:sourceloc} {:sourceloc_num 10} true;
  v5 := $$oldPos[BV32_ADD(BV32_MUL(BV32_ADD($deviceOffset, v0), 4), 3)];
  assert {:sourceloc} {:sourceloc_num 11} true;
  $$position[3] := v5;
  assert {:sourceloc} {:sourceloc_num 12} true;
  v6 := $$position[0];
  assert {:sourceloc} {:sourceloc_num 13} true;
  $$10[0] := v6;
  assert {:sourceloc} {:sourceloc_num 14} true;
  v7 := $$position[1];
  assert {:sourceloc} {:sourceloc_num 15} true;
  $$10[1] := v7;
  assert {:sourceloc} {:sourceloc_num 16} true;
  v8 := $$position[2];
  assert {:sourceloc} {:sourceloc_num 17} true;
  $$10[2] := v8;
  assert {:sourceloc} {:sourceloc_num 18} true;
  v9 := $$position[3];
  assert {:sourceloc} {:sourceloc_num 19} true;
  $$10[3] := v9;
  assert {:sourceloc} {:sourceloc_num 20} true;
  v10 := $$10[0];
  assert {:sourceloc} {:sourceloc_num 21} true;
  v11 := $$10[1];
  assert {:sourceloc} {:sourceloc_num 22} true;
  v12 := $$10[2];
  assert {:sourceloc} {:sourceloc_num 23} true;
  v13 := $$10[3];
  assert {:sourceloc} {:sourceloc_num 24} true;
  $$bodyPos.i[0] := v10;
  assert {:sourceloc} {:sourceloc_num 25} true;
  $$bodyPos.i[1] := v11;
  assert {:sourceloc} {:sourceloc_num 26} true;
  $$bodyPos.i[2] := v12;
  assert {:sourceloc} {:sourceloc_num 27} true;
  $$bodyPos.i[3] := v13;
  assert {:sourceloc} {:sourceloc_num 28} true;
  $$6[0] := 0;
  assert {:sourceloc} {:sourceloc_num 29} true;
  $$6[1] := 0;
  assert {:sourceloc} {:sourceloc_num 30} true;
  $$6[2] := 0;
  $tile.i.0 := group_id_y;
  goto $3;
$3:
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  v14 := BV32_ULT($tile.i.0, BV32_ADD(BV32_SDIV($totalNumBodies, BV32_MUL(group_size_x, group_size_y)), group_id_y));
  goto $truebb0, $falsebb0;
$4:
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  v15 := BV32_ULT(BV32_ADD(group_id_x, $tile.i.0), num_groups_x);
  goto $truebb1, $falsebb1;
$5:
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  $0 := BV32_ADD(group_id_x, $tile.i.0);
  goto $7;
$6:
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  $0 := BV32_SUB(BV32_ADD(group_id_x, $tile.i.0), num_groups_x);
  goto $7;
$7:
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  assert {:sourceloc} {:sourceloc_num 36} true;
  v16 := $$oldPos[BV32_MUL(BV32_ADD(BV32_MUL($0, group_size_x), local_id_x), 4)];
  assert {:sourceloc} {:sourceloc_num 37} true;
  $$__smem[BV32_MUL(BV32_ADD(local_id_x, BV32_MUL(group_size_x, local_id_y)), 4)] := v16;
  assert {:sourceloc} {:sourceloc_num 38} true;
  v17 := $$oldPos[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL($0, group_size_x), local_id_x), 4), 1)];
  assert {:sourceloc} {:sourceloc_num 39} true;
  $$__smem[BV32_ADD(BV32_MUL(BV32_ADD(local_id_x, BV32_MUL(group_size_x, local_id_y)), 4), 1)] := v17;
  assert {:sourceloc} {:sourceloc_num 40} true;
  v18 := $$oldPos[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL($0, group_size_x), local_id_x), 4), 2)];
  assert {:sourceloc} {:sourceloc_num 41} true;
  $$__smem[BV32_ADD(BV32_MUL(BV32_ADD(local_id_x, BV32_MUL(group_size_x, local_id_y)), 4), 2)] := v18;
  assert {:sourceloc} {:sourceloc_num 42} true;
  v19 := $$oldPos[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL($0, group_size_x), local_id_x), 4), 3)];
  assert {:sourceloc} {:sourceloc_num 43} true;
  $$__smem[BV32_ADD(BV32_MUL(BV32_ADD(local_id_x, BV32_MUL(group_size_x, local_id_y)), 4), 3)] := v19;
  call {:sourceloc_num 44} $bugle_barrier(-1, -1);
  assert {:sourceloc} {:sourceloc_num 45} true;
  v20 := $$bodyPos.i[0];
  assert {:sourceloc} {:sourceloc_num 46} true;
  $$8[0] := v20;
  assert {:sourceloc} {:sourceloc_num 47} true;
  v21 := $$bodyPos.i[1];
  assert {:sourceloc} {:sourceloc_num 48} true;
  $$8[1] := v21;
  assert {:sourceloc} {:sourceloc_num 49} true;
  v22 := $$bodyPos.i[2];
  assert {:sourceloc} {:sourceloc_num 50} true;
  $$8[2] := v22;
  assert {:sourceloc} {:sourceloc_num 51} true;
  v23 := $$bodyPos.i[3];
  assert {:sourceloc} {:sourceloc_num 52} true;
  $$8[3] := v23;
  assert {:sourceloc} {:sourceloc_num 53} true;
  v24 := $$6[0];
  assert {:sourceloc} {:sourceloc_num 54} true;
  $$9[0] := v24;
  assert {:sourceloc} {:sourceloc_num 55} true;
  v25 := $$6[1];
  assert {:sourceloc} {:sourceloc_num 56} true;
  $$9[1] := v25;
  assert {:sourceloc} {:sourceloc_num 57} true;
  v26 := $$6[2];
  assert {:sourceloc} {:sourceloc_num 58} true;
  $$9[2] := v26;
  assert {:sourceloc} {:sourceloc_num 59} true;
  v27 := $$8[0];
  assert {:sourceloc} {:sourceloc_num 60} true;
  v28 := $$8[1];
  assert {:sourceloc} {:sourceloc_num 61} true;
  v29 := $$8[2];
  assert {:sourceloc} {:sourceloc_num 62} true;
  v30 := $$8[3];
  assert {:sourceloc} {:sourceloc_num 63} true;
  v31 := $$9[0];
  assert {:sourceloc} {:sourceloc_num 64} true;
  v32 := $$9[1];
  assert {:sourceloc} {:sourceloc_num 65} true;
  v33 := $$9[2];
  assert {:sourceloc} {:sourceloc_num 66} true;
  $$iPos.i.i[0] := v27;
  assert {:sourceloc} {:sourceloc_num 67} true;
  $$iPos.i.i[1] := v28;
  assert {:sourceloc} {:sourceloc_num 68} true;
  $$iPos.i.i[2] := v29;
  assert {:sourceloc} {:sourceloc_num 69} true;
  $$iPos.i.i[3] := v30;
  assert {:sourceloc} {:sourceloc_num 70} true;
  $$accel.i.i[0] := v31;
  assert {:sourceloc} {:sourceloc_num 71} true;
  $$accel.i.i[1] := v32;
  assert {:sourceloc} {:sourceloc_num 72} true;
  $$accel.i.i[2] := v33;
  $j.i.i.0, $counter.i.i.0 := 0, 0;
  goto $8;
$8:
  assert {:block_sourceloc} {:sourceloc_num 73} true;
  v34 := BV32_ULT($counter.i.i.0, group_size_x);
  goto $truebb2, $falsebb2;
$9:
  assert {:block_sourceloc} {:sourceloc_num 74} true;
  assert {:sourceloc} {:sourceloc_num 75} true;
  v35 := $$accel.i.i[0];
  assert {:sourceloc} {:sourceloc_num 76} true;
  $$3[0] := v35;
  assert {:sourceloc} {:sourceloc_num 77} true;
  v36 := $$accel.i.i[1];
  assert {:sourceloc} {:sourceloc_num 78} true;
  $$3[1] := v36;
  assert {:sourceloc} {:sourceloc_num 79} true;
  v37 := $$accel.i.i[2];
  assert {:sourceloc} {:sourceloc_num 80} true;
  $$3[2] := v37;
  assert {:sourceloc} {:sourceloc_num 81} true;
  v38 := $$iPos.i.i[0];
  assert {:sourceloc} {:sourceloc_num 82} true;
  $$4[0] := v38;
  assert {:sourceloc} {:sourceloc_num 83} true;
  v39 := $$iPos.i.i[1];
  assert {:sourceloc} {:sourceloc_num 84} true;
  $$4[1] := v39;
  assert {:sourceloc} {:sourceloc_num 85} true;
  v40 := $$iPos.i.i[2];
  assert {:sourceloc} {:sourceloc_num 86} true;
  $$4[2] := v40;
  assert {:sourceloc} {:sourceloc_num 87} true;
  v41 := $$iPos.i.i[3];
  assert {:sourceloc} {:sourceloc_num 88} true;
  $$4[3] := v41;
  assert {:sourceloc} {:sourceloc_num 89} true;
  v42 := $$__smem[BV32_MUL(BV_EXTRACT(BV64_ADD($j.i.i.0, BV32_ZEXT64(BV32_MUL(group_size_x, local_id_y))), 32, 0), 4)];
  assert {:sourceloc} {:sourceloc_num 90} true;
  $$5[0] := v42;
  assert {:sourceloc} {:sourceloc_num 91} true;
  v43 := $$__smem[BV32_ADD(BV32_MUL(BV_EXTRACT(BV64_ADD($j.i.i.0, BV32_ZEXT64(BV32_MUL(group_size_x, local_id_y))), 32, 0), 4), 1)];
  assert {:sourceloc} {:sourceloc_num 92} true;
  $$5[1] := v43;
  assert {:sourceloc} {:sourceloc_num 93} true;
  v44 := $$__smem[BV32_ADD(BV32_MUL(BV_EXTRACT(BV64_ADD($j.i.i.0, BV32_ZEXT64(BV32_MUL(group_size_x, local_id_y))), 32, 0), 4), 2)];
  assert {:sourceloc} {:sourceloc_num 94} true;
  $$5[2] := v44;
  assert {:sourceloc} {:sourceloc_num 95} true;
  v45 := $$__smem[BV32_ADD(BV32_MUL(BV_EXTRACT(BV64_ADD($j.i.i.0, BV32_ZEXT64(BV32_MUL(group_size_x, local_id_y))), 32, 0), 4), 3)];
  assert {:sourceloc} {:sourceloc_num 96} true;
  $$5[3] := v45;
  assert {:sourceloc} {:sourceloc_num 97} true;
  v46 := $$3[0];
  assert {:sourceloc} {:sourceloc_num 98} true;
  v47 := $$3[1];
  assert {:sourceloc} {:sourceloc_num 99} true;
  v48 := $$3[2];
  assert {:sourceloc} {:sourceloc_num 100} true;
  v49 := $$4[0];
  assert {:sourceloc} {:sourceloc_num 101} true;
  v50 := $$4[1];
  assert {:sourceloc} {:sourceloc_num 102} true;
  v51 := $$4[2];
  assert {:sourceloc} {:sourceloc_num 103} true;
  v52 := $$4[3];
  assert {:sourceloc} {:sourceloc_num 104} true;
  v53 := $$5[0];
  assert {:sourceloc} {:sourceloc_num 105} true;
  v54 := $$5[1];
  assert {:sourceloc} {:sourceloc_num 106} true;
  v55 := $$5[2];
  assert {:sourceloc} {:sourceloc_num 107} true;
  v56 := $$5[3];
  assert {:sourceloc} {:sourceloc_num 108} true;
  $$ai.i.i.i[0] := v46;
  assert {:sourceloc} {:sourceloc_num 109} true;
  $$ai.i.i.i[1] := v47;
  assert {:sourceloc} {:sourceloc_num 110} true;
  $$ai.i.i.i[2] := v48;
  assert {:sourceloc} {:sourceloc_num 111} true;
  $$bi.i.i.i[0] := v49;
  assert {:sourceloc} {:sourceloc_num 112} true;
  $$bi.i.i.i[1] := v50;
  assert {:sourceloc} {:sourceloc_num 113} true;
  $$bi.i.i.i[2] := v51;
  assert {:sourceloc} {:sourceloc_num 114} true;
  $$bi.i.i.i[3] := v52;
  assert {:sourceloc} {:sourceloc_num 115} true;
  $$bj.i.i.i[0] := v53;
  assert {:sourceloc} {:sourceloc_num 116} true;
  $$bj.i.i.i[1] := v54;
  assert {:sourceloc} {:sourceloc_num 117} true;
  $$bj.i.i.i[2] := v55;
  assert {:sourceloc} {:sourceloc_num 118} true;
  $$bj.i.i.i[3] := v56;
  assert {:sourceloc} {:sourceloc_num 119} true;
  v57 := $$bj.i.i.i[0];
  assert {:sourceloc} {:sourceloc_num 120} true;
  v58 := $$bi.i.i.i[0];
  assert {:sourceloc} {:sourceloc_num 121} true;
  $$r.i.i.i[0] := FSUB32(v57, v58);
  assert {:sourceloc} {:sourceloc_num 122} true;
  v59 := $$bj.i.i.i[1];
  assert {:sourceloc} {:sourceloc_num 123} true;
  v60 := $$bi.i.i.i[1];
  assert {:sourceloc} {:sourceloc_num 124} true;
  $$r.i.i.i[1] := FSUB32(v59, v60);
  assert {:sourceloc} {:sourceloc_num 125} true;
  v61 := $$bj.i.i.i[2];
  assert {:sourceloc} {:sourceloc_num 126} true;
  v62 := $$bi.i.i.i[2];
  assert {:sourceloc} {:sourceloc_num 127} true;
  $$r.i.i.i[2] := FSUB32(v61, v62);
  assert {:sourceloc} {:sourceloc_num 128} true;
  v63 := $$r.i.i.i[0];
  assert {:sourceloc} {:sourceloc_num 129} true;
  v64 := $$r.i.i.i[0];
  assert {:sourceloc} {:sourceloc_num 130} true;
  v65 := $$r.i.i.i[1];
  assert {:sourceloc} {:sourceloc_num 131} true;
  v66 := $$r.i.i.i[1];
  assert {:sourceloc} {:sourceloc_num 132} true;
  v67 := $$r.i.i.i[2];
  assert {:sourceloc} {:sourceloc_num 133} true;
  v68 := $$r.i.i.i[2];
  assert {:sourceloc} {:sourceloc_num 134} true;
  v69 := $$softeningSquared[0];
  call {:sourceloc_num 135}   v70 := $rsqrtf(FADD32(FADD32(FADD32(FMUL32(v63, v64), FMUL32(v65, v66)), FMUL32(v67, v68)), v69));
  assert {:sourceloc} {:sourceloc_num 136} true;
  v71 := $$bj.i.i.i[3];
  v72 := FMUL32(v71, FMUL32(FMUL32(v70, v70), v70));
  assert {:sourceloc} {:sourceloc_num 137} true;
  v73 := $$r.i.i.i[0];
  assert {:sourceloc} {:sourceloc_num 138} true;
  v74 := $$ai.i.i.i[0];
  assert {:sourceloc} {:sourceloc_num 139} true;
  $$ai.i.i.i[0] := FADD32(v74, FMUL32(v73, v72));
  assert {:sourceloc} {:sourceloc_num 140} true;
  v75 := $$r.i.i.i[1];
  assert {:sourceloc} {:sourceloc_num 141} true;
  v76 := $$ai.i.i.i[1];
  assert {:sourceloc} {:sourceloc_num 142} true;
  $$ai.i.i.i[1] := FADD32(v76, FMUL32(v75, v72));
  assert {:sourceloc} {:sourceloc_num 143} true;
  v77 := $$r.i.i.i[2];
  assert {:sourceloc} {:sourceloc_num 144} true;
  v78 := $$ai.i.i.i[2];
  assert {:sourceloc} {:sourceloc_num 145} true;
  $$ai.i.i.i[2] := FADD32(v78, FMUL32(v77, v72));
  assert {:sourceloc} {:sourceloc_num 146} true;
  v79 := $$ai.i.i.i[0];
  assert {:sourceloc} {:sourceloc_num 147} true;
  $$0[0] := v79;
  assert {:sourceloc} {:sourceloc_num 148} true;
  v80 := $$ai.i.i.i[1];
  assert {:sourceloc} {:sourceloc_num 149} true;
  $$0[1] := v80;
  assert {:sourceloc} {:sourceloc_num 150} true;
  v81 := $$ai.i.i.i[2];
  assert {:sourceloc} {:sourceloc_num 151} true;
  $$0[2] := v81;
  assert {:sourceloc} {:sourceloc_num 152} true;
  v82 := $$0[0];
  assert {:sourceloc} {:sourceloc_num 153} true;
  v83 := $$0[1];
  assert {:sourceloc} {:sourceloc_num 154} true;
  v84 := $$0[2];
  assert {:sourceloc} {:sourceloc_num 155} true;
  $$2[0] := v82;
  assert {:sourceloc} {:sourceloc_num 156} true;
  $$2[1] := v83;
  assert {:sourceloc} {:sourceloc_num 157} true;
  $$2[2] := v84;
  assert {:sourceloc} {:sourceloc_num 158} true;
  v85 := $$2[0];
  assert {:sourceloc} {:sourceloc_num 159} true;
  $$accel.i.i[0] := v85;
  assert {:sourceloc} {:sourceloc_num 160} true;
  v86 := $$2[1];
  assert {:sourceloc} {:sourceloc_num 161} true;
  $$accel.i.i[1] := v86;
  assert {:sourceloc} {:sourceloc_num 162} true;
  v87 := $$2[2];
  assert {:sourceloc} {:sourceloc_num 163} true;
  $$accel.i.i[2] := v87;
  $j.i.i.0, $counter.i.i.0 := BV64_ADD($j.i.i.0, 1), BV32_ADD($counter.i.i.0, 1);
  goto $8;
$_ZL11gravitationIfEN4vec3IT_E4TypeEN4vec4IS1_E4TypeES3_.exit.i:
  assert {:block_sourceloc} {:sourceloc_num 164} true;
  assert {:sourceloc} {:sourceloc_num 165} true;
  v88 := $$accel.i.i[0];
  assert {:sourceloc} {:sourceloc_num 166} true;
  $$1[0] := v88;
  assert {:sourceloc} {:sourceloc_num 167} true;
  v89 := $$accel.i.i[1];
  assert {:sourceloc} {:sourceloc_num 168} true;
  $$1[1] := v89;
  assert {:sourceloc} {:sourceloc_num 169} true;
  v90 := $$accel.i.i[2];
  assert {:sourceloc} {:sourceloc_num 170} true;
  $$1[2] := v90;
  assert {:sourceloc} {:sourceloc_num 171} true;
  v91 := $$1[0];
  assert {:sourceloc} {:sourceloc_num 172} true;
  v92 := $$1[1];
  assert {:sourceloc} {:sourceloc_num 173} true;
  v93 := $$1[2];
  assert {:sourceloc} {:sourceloc_num 174} true;
  $$7[0] := v91;
  assert {:sourceloc} {:sourceloc_num 175} true;
  $$7[1] := v92;
  assert {:sourceloc} {:sourceloc_num 176} true;
  $$7[2] := v93;
  assert {:sourceloc} {:sourceloc_num 177} true;
  v94 := $$7[0];
  assert {:sourceloc} {:sourceloc_num 178} true;
  $$6[0] := v94;
  assert {:sourceloc} {:sourceloc_num 179} true;
  v95 := $$7[1];
  assert {:sourceloc} {:sourceloc_num 180} true;
  $$6[1] := v95;
  assert {:sourceloc} {:sourceloc_num 181} true;
  v96 := $$7[2];
  assert {:sourceloc} {:sourceloc_num 182} true;
  $$6[2] := v96;
  call {:sourceloc_num 183} $bugle_barrier(-1, -1);
  $tile.i.0 := BV32_ADD($tile.i.0, 1);
  goto $3;
$_ZL16computeBodyAccelIfLb0EEN4vec3IT_E4TypeEN4vec4IS1_E4TypeEPS6_i.exit:
  assert {:block_sourceloc} {:sourceloc_num 184} true;
  assert {:sourceloc} {:sourceloc_num 185} true;
  v97 := $$6[0];
  assert {:sourceloc} {:sourceloc_num 186} true;
  v98 := $$6[1];
  assert {:sourceloc} {:sourceloc_num 187} true;
  v99 := $$6[2];
  assert {:sourceloc} {:sourceloc_num 188} true;
  $$accel[0] := v97;
  assert {:sourceloc} {:sourceloc_num 189} true;
  $$accel[1] := v98;
  assert {:sourceloc} {:sourceloc_num 190} true;
  $$accel[2] := v99;
  assert {:sourceloc} {:sourceloc_num 191} true;
  v100 := $$vel[BV32_MUL(BV32_ADD($deviceOffset, v0), 4)];
  assert {:sourceloc} {:sourceloc_num 192} true;
  $$velocity[0] := v100;
  assert {:sourceloc} {:sourceloc_num 193} true;
  v101 := $$vel[BV32_ADD(BV32_MUL(BV32_ADD($deviceOffset, v0), 4), 1)];
  assert {:sourceloc} {:sourceloc_num 194} true;
  $$velocity[1] := v101;
  assert {:sourceloc} {:sourceloc_num 195} true;
  v102 := $$vel[BV32_ADD(BV32_MUL(BV32_ADD($deviceOffset, v0), 4), 2)];
  assert {:sourceloc} {:sourceloc_num 196} true;
  $$velocity[2] := v102;
  assert {:sourceloc} {:sourceloc_num 197} true;
  v103 := $$vel[BV32_ADD(BV32_MUL(BV32_ADD($deviceOffset, v0), 4), 3)];
  assert {:sourceloc} {:sourceloc_num 198} true;
  $$velocity[3] := v103;
  assert {:sourceloc} {:sourceloc_num 199} true;
  v104 := $$accel[0];
  assert {:sourceloc} {:sourceloc_num 200} true;
  v105 := $$velocity[0];
  assert {:sourceloc} {:sourceloc_num 201} true;
  $$velocity[0] := FADD32(v105, FMUL32(v104, $deltaTime));
  assert {:sourceloc} {:sourceloc_num 202} true;
  v106 := $$accel[1];
  assert {:sourceloc} {:sourceloc_num 203} true;
  v107 := $$velocity[1];
  assert {:sourceloc} {:sourceloc_num 204} true;
  $$velocity[1] := FADD32(v107, FMUL32(v106, $deltaTime));
  assert {:sourceloc} {:sourceloc_num 205} true;
  v108 := $$accel[2];
  assert {:sourceloc} {:sourceloc_num 206} true;
  v109 := $$velocity[2];
  assert {:sourceloc} {:sourceloc_num 207} true;
  $$velocity[2] := FADD32(v109, FMUL32(v108, $deltaTime));
  assert {:sourceloc} {:sourceloc_num 208} true;
  v110 := $$velocity[0];
  assert {:sourceloc} {:sourceloc_num 209} true;
  $$velocity[0] := FMUL32(v110, $damping);
  assert {:sourceloc} {:sourceloc_num 210} true;
  v111 := $$velocity[1];
  assert {:sourceloc} {:sourceloc_num 211} true;
  $$velocity[1] := FMUL32(v111, $damping);
  assert {:sourceloc} {:sourceloc_num 212} true;
  v112 := $$velocity[2];
  assert {:sourceloc} {:sourceloc_num 213} true;
  $$velocity[2] := FMUL32(v112, $damping);
  assert {:sourceloc} {:sourceloc_num 214} true;
  v113 := $$velocity[0];
  assert {:sourceloc} {:sourceloc_num 215} true;
  v114 := $$position[0];
  assert {:sourceloc} {:sourceloc_num 216} true;
  $$position[0] := FADD32(v114, FMUL32(v113, $deltaTime));
  assert {:sourceloc} {:sourceloc_num 217} true;
  v115 := $$velocity[1];
  assert {:sourceloc} {:sourceloc_num 218} true;
  v116 := $$position[1];
  assert {:sourceloc} {:sourceloc_num 219} true;
  $$position[1] := FADD32(v116, FMUL32(v115, $deltaTime));
  assert {:sourceloc} {:sourceloc_num 220} true;
  v117 := $$velocity[2];
  assert {:sourceloc} {:sourceloc_num 221} true;
  v118 := $$position[2];
  assert {:sourceloc} {:sourceloc_num 222} true;
  $$position[2] := FADD32(v118, FMUL32(v117, $deltaTime));
  assert {:sourceloc} {:sourceloc_num 223} true;
  v119 := $$position[0];
  assert {:sourceloc} {:sourceloc_num 224} true;
  $$newPos[BV32_MUL(BV32_ADD($deviceOffset, v0), 4)] := v119;
  assert {:sourceloc} {:sourceloc_num 225} true;
  v120 := $$position[1];
  assert {:sourceloc} {:sourceloc_num 226} true;
  $$newPos[BV32_ADD(BV32_MUL(BV32_ADD($deviceOffset, v0), 4), 1)] := v120;
  assert {:sourceloc} {:sourceloc_num 227} true;
  v121 := $$position[2];
  assert {:sourceloc} {:sourceloc_num 228} true;
  $$newPos[BV32_ADD(BV32_MUL(BV32_ADD($deviceOffset, v0), 4), 2)] := v121;
  assert {:sourceloc} {:sourceloc_num 229} true;
  v122 := $$position[3];
  assert {:sourceloc} {:sourceloc_num 230} true;
  $$newPos[BV32_ADD(BV32_MUL(BV32_ADD($deviceOffset, v0), 4), 3)] := v122;
  assert {:sourceloc} {:sourceloc_num 231} true;
  v123 := $$velocity[0];
  assert {:sourceloc} {:sourceloc_num 232} true;
  $$vel[BV32_MUL(BV32_ADD($deviceOffset, v0), 4)] := v123;
  assert {:sourceloc} {:sourceloc_num 233} true;
  v124 := $$velocity[1];
  assert {:sourceloc} {:sourceloc_num 234} true;
  $$vel[BV32_ADD(BV32_MUL(BV32_ADD($deviceOffset, v0), 4), 1)] := v124;
  assert {:sourceloc} {:sourceloc_num 235} true;
  v125 := $$velocity[2];
  assert {:sourceloc} {:sourceloc_num 236} true;
  $$vel[BV32_ADD(BV32_MUL(BV32_ADD($deviceOffset, v0), 4), 2)] := v125;
  assert {:sourceloc} {:sourceloc_num 237} true;
  v126 := $$velocity[3];
  assert {:sourceloc} {:sourceloc_num 238} true;
  $$vel[BV32_ADD(BV32_MUL(BV32_ADD($deviceOffset, v0), 4), 3)] := v126;
  goto $10;
$10:
  assert {:block_sourceloc} {:sourceloc_num 239} true;
  return;
$truebb:
  assume {:partition} v1;
  assert {:block_sourceloc} {:sourceloc_num 240} true;
  goto $1;
$falsebb:
  assume {:partition} !v1;
  assert {:block_sourceloc} {:sourceloc_num 241} true;
  goto $2;
$truebb0:
  assume {:partition} v14;
  assert {:block_sourceloc} {:sourceloc_num 242} true;
  goto $4;
$falsebb0:
  assume {:partition} !v14;
  assert {:block_sourceloc} {:sourceloc_num 243} true;
  goto $_ZL16computeBodyAccelIfLb0EEN4vec3IT_E4TypeEN4vec4IS1_E4TypeEPS6_i.exit;
$truebb1:
  assume {:partition} v15;
  assert {:block_sourceloc} {:sourceloc_num 244} true;
  goto $5;
$falsebb1:
  assume {:partition} !v15;
  assert {:block_sourceloc} {:sourceloc_num 245} true;
  goto $6;
$truebb2:
  assume {:partition} v34;
  assert {:block_sourceloc} {:sourceloc_num 246} true;
  goto $9;
$falsebb2:
  assume {:partition} !v34;
  assert {:block_sourceloc} {:sourceloc_num 247} true;
  goto $_ZL11gravitationIfEN4vec3IT_E4TypeEN4vec4IS1_E4TypeES3_.exit.i;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:int, $1:int);
procedure {:source_name "rsqrtf"} $rsqrtf($0:int) returns ($ret:int);
axiom (if group_size_x == 256 then 1 else 0) != 0;
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_x == 56 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
