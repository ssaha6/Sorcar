type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
procedure _ATOMIC_OP8(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "gridParticleHash"} {:global} $$gridParticleHash : [int]int;
axiom {:array_info "$$gridParticleHash"} {:global} {:elem_width 32} {:source_name "gridParticleHash"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$gridParticleHash : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$gridParticleHash : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$gridParticleHash : bool;

var {:source_name "gridParticleIndex"} {:global} $$gridParticleIndex : [int]int;
axiom {:array_info "$$gridParticleIndex"} {:global} {:elem_width 32} {:source_name "gridParticleIndex"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$gridParticleIndex : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$gridParticleIndex : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$gridParticleIndex : bool;

var {:source_name "pos"} {:global} $$pos : [int]int;
axiom {:array_info "$$pos"} {:global} {:elem_width 32} {:source_name "pos"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$pos : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$pos : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$pos : bool;

var {:source_name ""} $$0 : [int]int;
axiom {:array_info "$$0"} {:elem_width 32} {:source_name ""} {:source_elem_width 96} {:source_dimensions "1"} true;

var {:source_name ""} $$1 : [int]int;
axiom {:array_info "$$1"} {:elem_width 32} {:source_name ""} {:source_elem_width 96} {:source_dimensions "1"} true;

var {:source_name "p.i"} $$p.i : [int]int;
axiom {:array_info "$$p.i"} {:elem_width 32} {:source_name "p.i"} {:source_elem_width 96} {:source_dimensions "1"} true;

var {:source_name "gridPos.i"} $$gridPos.i : [int]int;
axiom {:array_info "$$gridPos.i"} {:elem_width 32} {:source_name "gridPos.i"} {:source_elem_width 96} {:source_dimensions "1"} true;

var {:source_name "p"} $$p : [int]int;
axiom {:array_info "$$p"} {:elem_width 32} {:source_name "p"} {:source_elem_width 128} {:source_dimensions "1"} true;

var {:source_name "gridPos"} $$gridPos : [int]int;
axiom {:array_info "$$gridPos"} {:elem_width 32} {:source_name "gridPos"} {:source_elem_width 96} {:source_dimensions "1"} true;

var {:source_name ""} $$2 : [int]int;
axiom {:array_info "$$2"} {:elem_width 32} {:source_name ""} {:source_elem_width 96} {:source_dimensions "1"} true;

var {:source_name ""} $$3 : [int]int;
axiom {:array_info "$$3"} {:elem_width 32} {:source_name ""} {:source_elem_width 96} {:source_dimensions "1"} true;

var {:source_name "params"} {:constant} $$params : [int]int;
axiom {:array_info "$$params"} {:constant} {:elem_width 8} {:source_name "params"} {:source_elem_width 832} {:source_dimensions "1"} true;

const _WATCHED_OFFSET : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function BV_CONCAT(int, int) : int;
function FDIV32(int, int) : int;
function FP32_CONV64(int) : int;
function FP64_TO_SI32(int) : int;
function FSUB32(int, int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_AND(x : int, y : int) : int {
  if x == y then x else (if x == 0 || y == 0 then 0 else BV32_AND_UF(x, y))
}
function BV32_AND_UF(int, int) : int;
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SUB(x : int, y : int) : int {
  x - y
}
function {:inline true} BV32_UGE(x : int, y : int) : bool {
  x >= y
}
procedure {:source_name "calcHashD"} {:kernel} $_Z9calcHashDPjS_P6float4j($numParticles:int)
{
  var v0:int;
  var v1:bool;
  var v2:int;
  var v3:int;
  var v4:int;
  var v5:int;
  var v6:int;
  var v7:int;
  var v8:int;
  var v9:int;
  var v10:int;
  var v11:int;
  var v12:int;
  var v13:int;
  var v14:int;
  var v15:int;
  var v16:int;
  var v17:int;
  var v18:int;
  var v19:int;
  var v20:int;
  var v21:int;
  var v22:int;
  var v23:int;
  var v24:int;
  var v25:int;
  var v26:int;
  var v27:int;
  var v28:int;
  var v29:int;
  var v30:int;
  var v31:int;
  var v32:int;
  var v33:int;
  var v34:int;
  var v35:int;
  var v36:int;
  var v37:int;
  var v38:int;
  var v39:int;
  var v40:int;
  var v41:int;
  var v42:int;
  var v43:int;
  var v44:int;
  var v45:int;
  var v46:int;
  var v47:int;
  var v48:int;
  var v49:int;
  var v50:int;
  var v51:int;
  var v52:int;
  var v53:int;
  var v54:int;
  var v55:int;
  var v56:int;
  var v57:int;
  var v58:int;
  var v59:int;
  var v60:int;
  var v61:int;
  var v62:int;
  var v63:int;
  var v64:int;
  var v65:int;
  var v66:int;
  var v67:int;
  var v68:int;
  var v69:int;
  var v70:int;
  var v71:int;
  var v72:int;
  var v73:int;
  var v74:int;
  var v75:int;
  var v76:int;
  var v77:int;
  var v78:int;
  var v79:int;
  var v80:int;
  var v81:int;
  var v82:int;
  var v83:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  v1 := BV32_UGE(v0, $numParticles);
  goto $truebb, $falsebb;
$1:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  goto $3;
$2:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  assert {:sourceloc} {:sourceloc_num 3} true;
  v2 := $$pos[BV32_MUL(v0, 4)];
  assert {:sourceloc} {:sourceloc_num 4} true;
  $$p[0] := v2;
  assert {:sourceloc} {:sourceloc_num 5} true;
  v3 := $$pos[BV32_ADD(BV32_MUL(v0, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 6} true;
  $$p[1] := v3;
  assert {:sourceloc} {:sourceloc_num 7} true;
  v4 := $$pos[BV32_ADD(BV32_MUL(v0, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 8} true;
  $$p[2] := v4;
  assert {:sourceloc} {:sourceloc_num 9} true;
  v5 := $$pos[BV32_ADD(BV32_MUL(v0, 4), 3)];
  assert {:sourceloc} {:sourceloc_num 10} true;
  $$p[3] := v5;
  assert {:sourceloc} {:sourceloc_num 11} true;
  v6 := $$p[0];
  assert {:sourceloc} {:sourceloc_num 12} true;
  v7 := $$p[1];
  assert {:sourceloc} {:sourceloc_num 13} true;
  v8 := $$p[2];
  assert {:sourceloc} {:sourceloc_num 14} true;
  $$0[0] := v6;
  assert {:sourceloc} {:sourceloc_num 15} true;
  $$0[1] := v7;
  assert {:sourceloc} {:sourceloc_num 16} true;
  $$0[2] := v8;
  assert {:sourceloc} {:sourceloc_num 17} true;
  v9 := $$0[0];
  assert {:sourceloc} {:sourceloc_num 18} true;
  v10 := $$0[1];
  assert {:sourceloc} {:sourceloc_num 19} true;
  v11 := $$0[2];
  assert {:sourceloc} {:sourceloc_num 20} true;
  $$2[0] := v9;
  assert {:sourceloc} {:sourceloc_num 21} true;
  $$2[1] := v10;
  assert {:sourceloc} {:sourceloc_num 22} true;
  $$2[2] := v11;
  assert {:sourceloc} {:sourceloc_num 23} true;
  v12 := $$2[0];
  assert {:sourceloc} {:sourceloc_num 24} true;
  v13 := $$2[1];
  assert {:sourceloc} {:sourceloc_num 25} true;
  v14 := $$2[2];
  assert {:sourceloc} {:sourceloc_num 26} true;
  $$p.i[0] := v12;
  assert {:sourceloc} {:sourceloc_num 27} true;
  $$p.i[1] := v13;
  assert {:sourceloc} {:sourceloc_num 28} true;
  $$p.i[2] := v14;
  assert {:sourceloc} {:sourceloc_num 29} true;
  v15 := $$p.i[0];
  assert {:sourceloc} {:sourceloc_num 30} true;
  v16 := $$params[52];
  assert {:sourceloc} {:sourceloc_num 31} true;
  v17 := $$params[53];
  assert {:sourceloc} {:sourceloc_num 32} true;
  v18 := $$params[54];
  assert {:sourceloc} {:sourceloc_num 33} true;
  v19 := $$params[55];
  assert {:sourceloc} {:sourceloc_num 34} true;
  v20 := $$params[64];
  assert {:sourceloc} {:sourceloc_num 35} true;
  v21 := $$params[65];
  assert {:sourceloc} {:sourceloc_num 36} true;
  v22 := $$params[66];
  assert {:sourceloc} {:sourceloc_num 37} true;
  v23 := $$params[67];
  call {:sourceloc_num 38}   v24 := $floor(FP32_CONV64(FDIV32(FSUB32(v15, BV_CONCAT(BV_CONCAT(BV_CONCAT(v19, v18), v17), v16)), BV_CONCAT(BV_CONCAT(BV_CONCAT(v23, v22), v21), v20))));
  assert {:sourceloc} {:sourceloc_num 39} true;
  $$1[0] := FP64_TO_SI32(v24);
  assert {:sourceloc} {:sourceloc_num 40} true;
  v25 := $$p.i[1];
  assert {:sourceloc} {:sourceloc_num 41} true;
  v26 := $$params[56];
  assert {:sourceloc} {:sourceloc_num 42} true;
  v27 := $$params[57];
  assert {:sourceloc} {:sourceloc_num 43} true;
  v28 := $$params[58];
  assert {:sourceloc} {:sourceloc_num 44} true;
  v29 := $$params[59];
  assert {:sourceloc} {:sourceloc_num 45} true;
  v30 := $$params[68];
  assert {:sourceloc} {:sourceloc_num 46} true;
  v31 := $$params[69];
  assert {:sourceloc} {:sourceloc_num 47} true;
  v32 := $$params[70];
  assert {:sourceloc} {:sourceloc_num 48} true;
  v33 := $$params[71];
  call {:sourceloc_num 49}   v34 := $floor(FP32_CONV64(FDIV32(FSUB32(v25, BV_CONCAT(BV_CONCAT(BV_CONCAT(v29, v28), v27), v26)), BV_CONCAT(BV_CONCAT(BV_CONCAT(v33, v32), v31), v30))));
  assert {:sourceloc} {:sourceloc_num 50} true;
  $$1[1] := FP64_TO_SI32(v34);
  assert {:sourceloc} {:sourceloc_num 51} true;
  v35 := $$p.i[2];
  assert {:sourceloc} {:sourceloc_num 52} true;
  v36 := $$params[60];
  assert {:sourceloc} {:sourceloc_num 53} true;
  v37 := $$params[61];
  assert {:sourceloc} {:sourceloc_num 54} true;
  v38 := $$params[62];
  assert {:sourceloc} {:sourceloc_num 55} true;
  v39 := $$params[63];
  assert {:sourceloc} {:sourceloc_num 56} true;
  v40 := $$params[72];
  assert {:sourceloc} {:sourceloc_num 57} true;
  v41 := $$params[73];
  assert {:sourceloc} {:sourceloc_num 58} true;
  v42 := $$params[74];
  assert {:sourceloc} {:sourceloc_num 59} true;
  v43 := $$params[75];
  call {:sourceloc_num 60}   v44 := $floor(FP32_CONV64(FDIV32(FSUB32(v35, BV_CONCAT(BV_CONCAT(BV_CONCAT(v39, v38), v37), v36)), BV_CONCAT(BV_CONCAT(BV_CONCAT(v43, v42), v41), v40))));
  assert {:sourceloc} {:sourceloc_num 61} true;
  $$1[2] := FP64_TO_SI32(v44);
  assert {:sourceloc} {:sourceloc_num 62} true;
  v45 := $$1[0];
  assert {:sourceloc} {:sourceloc_num 63} true;
  v46 := $$1[1];
  assert {:sourceloc} {:sourceloc_num 64} true;
  v47 := $$1[2];
  assert {:sourceloc} {:sourceloc_num 65} true;
  $$gridPos[0] := v45;
  assert {:sourceloc} {:sourceloc_num 66} true;
  $$gridPos[1] := v46;
  assert {:sourceloc} {:sourceloc_num 67} true;
  $$gridPos[2] := v47;
  assert {:sourceloc} {:sourceloc_num 68} true;
  v48 := $$gridPos[0];
  assert {:sourceloc} {:sourceloc_num 69} true;
  $$3[0] := v48;
  assert {:sourceloc} {:sourceloc_num 70} true;
  v49 := $$gridPos[1];
  assert {:sourceloc} {:sourceloc_num 71} true;
  $$3[1] := v49;
  assert {:sourceloc} {:sourceloc_num 72} true;
  v50 := $$gridPos[2];
  assert {:sourceloc} {:sourceloc_num 73} true;
  $$3[2] := v50;
  assert {:sourceloc} {:sourceloc_num 74} true;
  v51 := $$3[0];
  assert {:sourceloc} {:sourceloc_num 75} true;
  v52 := $$3[1];
  assert {:sourceloc} {:sourceloc_num 76} true;
  v53 := $$3[2];
  assert {:sourceloc} {:sourceloc_num 77} true;
  $$gridPos.i[0] := v51;
  assert {:sourceloc} {:sourceloc_num 78} true;
  $$gridPos.i[1] := v52;
  assert {:sourceloc} {:sourceloc_num 79} true;
  $$gridPos.i[2] := v53;
  assert {:sourceloc} {:sourceloc_num 80} true;
  v54 := $$gridPos.i[0];
  assert {:sourceloc} {:sourceloc_num 81} true;
  v55 := $$params[36];
  assert {:sourceloc} {:sourceloc_num 82} true;
  v56 := $$params[37];
  assert {:sourceloc} {:sourceloc_num 83} true;
  v57 := $$params[38];
  assert {:sourceloc} {:sourceloc_num 84} true;
  v58 := $$params[39];
  assert {:sourceloc} {:sourceloc_num 85} true;
  $$gridPos.i[0] := BV32_AND(v54, BV32_SUB(BV_CONCAT(BV_CONCAT(BV_CONCAT(v58, v57), v56), v55), 1));
  assert {:sourceloc} {:sourceloc_num 86} true;
  v59 := $$gridPos.i[1];
  assert {:sourceloc} {:sourceloc_num 87} true;
  v60 := $$params[40];
  assert {:sourceloc} {:sourceloc_num 88} true;
  v61 := $$params[41];
  assert {:sourceloc} {:sourceloc_num 89} true;
  v62 := $$params[42];
  assert {:sourceloc} {:sourceloc_num 90} true;
  v63 := $$params[43];
  assert {:sourceloc} {:sourceloc_num 91} true;
  $$gridPos.i[1] := BV32_AND(v59, BV32_SUB(BV_CONCAT(BV_CONCAT(BV_CONCAT(v63, v62), v61), v60), 1));
  assert {:sourceloc} {:sourceloc_num 92} true;
  v64 := $$gridPos.i[2];
  assert {:sourceloc} {:sourceloc_num 93} true;
  v65 := $$params[44];
  assert {:sourceloc} {:sourceloc_num 94} true;
  v66 := $$params[45];
  assert {:sourceloc} {:sourceloc_num 95} true;
  v67 := $$params[46];
  assert {:sourceloc} {:sourceloc_num 96} true;
  v68 := $$params[47];
  assert {:sourceloc} {:sourceloc_num 97} true;
  $$gridPos.i[2] := BV32_AND(v64, BV32_SUB(BV_CONCAT(BV_CONCAT(BV_CONCAT(v68, v67), v66), v65), 1));
  assert {:sourceloc} {:sourceloc_num 98} true;
  v69 := $$gridPos.i[2];
  assert {:sourceloc} {:sourceloc_num 99} true;
  v70 := $$params[40];
  assert {:sourceloc} {:sourceloc_num 100} true;
  v71 := $$params[41];
  assert {:sourceloc} {:sourceloc_num 101} true;
  v72 := $$params[42];
  assert {:sourceloc} {:sourceloc_num 102} true;
  v73 := $$params[43];
  assert {:sourceloc} {:sourceloc_num 103} true;
  v74 := $$params[36];
  assert {:sourceloc} {:sourceloc_num 104} true;
  v75 := $$params[37];
  assert {:sourceloc} {:sourceloc_num 105} true;
  v76 := $$params[38];
  assert {:sourceloc} {:sourceloc_num 106} true;
  v77 := $$params[39];
  assert {:sourceloc} {:sourceloc_num 107} true;
  v78 := $$gridPos.i[1];
  assert {:sourceloc} {:sourceloc_num 108} true;
  v79 := $$params[36];
  assert {:sourceloc} {:sourceloc_num 109} true;
  v80 := $$params[37];
  assert {:sourceloc} {:sourceloc_num 110} true;
  v81 := $$params[38];
  assert {:sourceloc} {:sourceloc_num 111} true;
  v82 := $$params[39];
  assert {:sourceloc} {:sourceloc_num 112} true;
  v83 := $$gridPos.i[0];
  assert {:sourceloc} {:sourceloc_num 113} true;
  $$gridParticleHash[v0] := BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v69, BV_CONCAT(BV_CONCAT(BV_CONCAT(v73, v72), v71), v70)), BV_CONCAT(BV_CONCAT(BV_CONCAT(v77, v76), v75), v74)), BV32_MUL(v78, BV_CONCAT(BV_CONCAT(BV_CONCAT(v82, v81), v80), v79))), v83);
  assert {:sourceloc} {:sourceloc_num 114} true;
  $$gridParticleIndex[v0] := v0;
  goto $3;
$3:
  assert {:block_sourceloc} {:sourceloc_num 115} true;
  return;
$truebb:
  assume {:partition} v1;
  assert {:block_sourceloc} {:sourceloc_num 116} true;
  goto $1;
$falsebb:
  assume {:partition} !v1;
  assert {:block_sourceloc} {:sourceloc_num 117} true;
  goto $2;
}
procedure {:source_name "floor"} $floor($0:int) returns ($ret:int);
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 256 then 1 else 0) != 0;
axiom (if num_groups_x == 64 then 1 else 0) != 0;
