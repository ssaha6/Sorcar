type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP8(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "v"} {:global} $$v : [int]int;
axiom {:array_info "$$v"} {:global} {:elem_width 8} {:source_name "v"} {:source_elem_width 64} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 64} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$v : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 64} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$v : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 64} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$v : bool;

var {:source_name "vterm"} $$vterm : [int]int;
axiom {:array_info "$$vterm"} {:elem_width 8} {:source_name "vterm"} {:source_elem_width 64} {:source_dimensions "1"} true;

const _WATCHED_OFFSET : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:local_id_y} local_id_y : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function BV_CONCAT(int, int) : int;
function BV_EXTRACT(int, int, int) : int;
function FADD32(int, int) : int;
function FDIV32(int, int) : int;
function FMUL32(int, int) : int;
function SI32_TO_FP32(int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SUB(x : int, y : int) : int {
  x - y
}
procedure {:source_name "addForces_k"} {:kernel} $_Z11addForces_kP6float2iiiiffij($dx:int, $dy:int, $spx:int, $spy:int, $fx:int, $fy:int, $r:int, $pitch:int)
requires {:sourceloc_num 0} (if $dx == 512 then 1 else 0) != 0;
requires {:sourceloc_num 1} (if $dy == 512 then 1 else 0) != 0;
requires {:sourceloc_num 2} (if $spx == 1 then 1 else 0) != 0;
requires {:sourceloc_num 3} (if $spy == 1 then 1 else 0) != 0;
requires {:sourceloc_num 4} (if $r == 4 then 1 else 0) != 0;
requires {:sourceloc_num 5} (if $pitch == 4096 then 1 else 0) != 0;
{
  var v5:int;
  var v6:int;
  var v7:int;
  var v8:int;
  var v9:int;
  var v10:int;
  var v11:int;
  var v12:int;
  var v13:int;
  var v14:int;
  var v0:int;
  var v1:int;
  var v2:int;
  var v3:int;
  var v4:int;
  var v15:int;
  var v16:int;
  var v17:int;
  var v18:int;
  var v19:int;
  var v20:int;
  var v21:int;
  var v22:int;
  var v23:int;
  var v24:int;
  var v25:int;
  var v26:int;
  var v27:int;
  var v28:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  assert {:sourceloc} {:sourceloc_num 7} true;
  v0 := $$v[BV32_ADD(BV32_ADD(BV32_MUL(BV32_ADD(local_id_y, $spy), $pitch), BV32_MUL(local_id_x, 8)), BV32_MUL($spx, 8))];
  assert {:sourceloc} {:sourceloc_num 8} true;
  $$vterm[0] := v0;
  assert {:sourceloc} {:sourceloc_num 9} true;
  v1 := $$v[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(BV32_ADD(local_id_y, $spy), $pitch), BV32_MUL(local_id_x, 8)), BV32_MUL($spx, 8)), 1)];
  assert {:sourceloc} {:sourceloc_num 10} true;
  $$vterm[1] := v1;
  assert {:sourceloc} {:sourceloc_num 11} true;
  v2 := $$v[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(BV32_ADD(local_id_y, $spy), $pitch), BV32_MUL(local_id_x, 8)), BV32_MUL($spx, 8)), 2)];
  assert {:sourceloc} {:sourceloc_num 12} true;
  $$vterm[2] := v2;
  assert {:sourceloc} {:sourceloc_num 13} true;
  v3 := $$v[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(BV32_ADD(local_id_y, $spy), $pitch), BV32_MUL(local_id_x, 8)), BV32_MUL($spx, 8)), 3)];
  assert {:sourceloc} {:sourceloc_num 14} true;
  $$vterm[3] := v3;
  assert {:sourceloc} {:sourceloc_num 15} true;
  v4 := $$v[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(BV32_ADD(local_id_y, $spy), $pitch), BV32_MUL(local_id_x, 8)), BV32_MUL($spx, 8)), 4)];
  assert {:sourceloc} {:sourceloc_num 16} true;
  $$vterm[4] := v4;
  assert {:sourceloc} {:sourceloc_num 17} true;
  v5 := $$v[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(BV32_ADD(local_id_y, $spy), $pitch), BV32_MUL(local_id_x, 8)), BV32_MUL($spx, 8)), 5)];
  assert {:sourceloc} {:sourceloc_num 18} true;
  $$vterm[5] := v5;
  assert {:sourceloc} {:sourceloc_num 19} true;
  v6 := $$v[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(BV32_ADD(local_id_y, $spy), $pitch), BV32_MUL(local_id_x, 8)), BV32_MUL($spx, 8)), 6)];
  assert {:sourceloc} {:sourceloc_num 20} true;
  $$vterm[6] := v6;
  assert {:sourceloc} {:sourceloc_num 21} true;
  v7 := $$v[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(BV32_ADD(local_id_y, $spy), $pitch), BV32_MUL(local_id_x, 8)), BV32_MUL($spx, 8)), 7)];
  assert {:sourceloc} {:sourceloc_num 22} true;
  $$vterm[7] := v7;
  v8 := BV32_SUB(local_id_x, $r);
  v9 := BV32_SUB(local_id_y, $r);
  v10 := FDIV32(1065353216, FADD32(FADD32(1065353216, SI32_TO_FP32(BV32_MUL(BV32_MUL(BV32_MUL(v8, v8), v8), v8))), SI32_TO_FP32(BV32_MUL(BV32_MUL(BV32_MUL(v9, v9), v9), v9))));
  assert {:sourceloc} {:sourceloc_num 23} true;
  v11 := $$vterm[0];
  assert {:sourceloc} {:sourceloc_num 24} true;
  v12 := $$vterm[1];
  assert {:sourceloc} {:sourceloc_num 25} true;
  v13 := $$vterm[2];
  assert {:sourceloc} {:sourceloc_num 26} true;
  v14 := $$vterm[3];
  v15 := FADD32(BV_CONCAT(BV_CONCAT(BV_CONCAT(v14, v13), v12), v11), FMUL32(v10, $fx));
  assert {:sourceloc} {:sourceloc_num 27} true;
  $$vterm[0] := BV_EXTRACT(v15, 8, 0);
  assert {:sourceloc} {:sourceloc_num 28} true;
  $$vterm[1] := BV_EXTRACT(v15, 16, 8);
  assert {:sourceloc} {:sourceloc_num 29} true;
  $$vterm[2] := BV_EXTRACT(v15, 24, 16);
  assert {:sourceloc} {:sourceloc_num 30} true;
  $$vterm[3] := BV_EXTRACT(v15, 32, 24);
  assert {:sourceloc} {:sourceloc_num 31} true;
  v16 := $$vterm[4];
  assert {:sourceloc} {:sourceloc_num 32} true;
  v17 := $$vterm[5];
  assert {:sourceloc} {:sourceloc_num 33} true;
  v18 := $$vterm[6];
  assert {:sourceloc} {:sourceloc_num 34} true;
  v19 := $$vterm[7];
  v20 := FADD32(BV_CONCAT(BV_CONCAT(BV_CONCAT(v19, v18), v17), v16), FMUL32(v10, $fy));
  assert {:sourceloc} {:sourceloc_num 35} true;
  $$vterm[4] := BV_EXTRACT(v20, 8, 0);
  assert {:sourceloc} {:sourceloc_num 36} true;
  $$vterm[5] := BV_EXTRACT(v20, 16, 8);
  assert {:sourceloc} {:sourceloc_num 37} true;
  $$vterm[6] := BV_EXTRACT(v20, 24, 16);
  assert {:sourceloc} {:sourceloc_num 38} true;
  $$vterm[7] := BV_EXTRACT(v20, 32, 24);
  assert {:sourceloc} {:sourceloc_num 39} true;
  v21 := $$vterm[0];
  assert {:sourceloc} {:sourceloc_num 40} true;
  $$v[BV32_ADD(BV32_ADD(BV32_MUL(BV32_ADD(local_id_y, $spy), $pitch), BV32_MUL(local_id_x, 8)), BV32_MUL($spx, 8))] := v21;
  assert {:sourceloc} {:sourceloc_num 41} true;
  v22 := $$vterm[1];
  assert {:sourceloc} {:sourceloc_num 42} true;
  $$v[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(BV32_ADD(local_id_y, $spy), $pitch), BV32_MUL(local_id_x, 8)), BV32_MUL($spx, 8)), 1)] := v22;
  assert {:sourceloc} {:sourceloc_num 43} true;
  v23 := $$vterm[2];
  assert {:sourceloc} {:sourceloc_num 44} true;
  $$v[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(BV32_ADD(local_id_y, $spy), $pitch), BV32_MUL(local_id_x, 8)), BV32_MUL($spx, 8)), 2)] := v23;
  assert {:sourceloc} {:sourceloc_num 45} true;
  v24 := $$vterm[3];
  assert {:sourceloc} {:sourceloc_num 46} true;
  $$v[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(BV32_ADD(local_id_y, $spy), $pitch), BV32_MUL(local_id_x, 8)), BV32_MUL($spx, 8)), 3)] := v24;
  assert {:sourceloc} {:sourceloc_num 47} true;
  v25 := $$vterm[4];
  assert {:sourceloc} {:sourceloc_num 48} true;
  $$v[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(BV32_ADD(local_id_y, $spy), $pitch), BV32_MUL(local_id_x, 8)), BV32_MUL($spx, 8)), 4)] := v25;
  assert {:sourceloc} {:sourceloc_num 49} true;
  v26 := $$vterm[5];
  assert {:sourceloc} {:sourceloc_num 50} true;
  $$v[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(BV32_ADD(local_id_y, $spy), $pitch), BV32_MUL(local_id_x, 8)), BV32_MUL($spx, 8)), 5)] := v26;
  assert {:sourceloc} {:sourceloc_num 51} true;
  v27 := $$vterm[6];
  assert {:sourceloc} {:sourceloc_num 52} true;
  $$v[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(BV32_ADD(local_id_y, $spy), $pitch), BV32_MUL(local_id_x, 8)), BV32_MUL($spx, 8)), 6)] := v27;
  assert {:sourceloc} {:sourceloc_num 53} true;
  v28 := $$vterm[7];
  assert {:sourceloc} {:sourceloc_num 54} true;
  $$v[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(BV32_ADD(local_id_y, $spy), $pitch), BV32_MUL(local_id_x, 8)), BV32_MUL($spx, 8)), 7)] := v28;
  return;
}
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 9 then 1 else 0) != 0;
axiom (if group_size_y == 9 then 1 else 0) != 0;
axiom (if num_groups_x == 1 then 1 else 0) != 0;
