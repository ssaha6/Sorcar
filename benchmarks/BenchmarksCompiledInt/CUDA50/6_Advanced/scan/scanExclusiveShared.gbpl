type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "d_Dst"} {:global} $$d_Dst : [int]int;
axiom {:array_info "$$d_Dst"} {:global} {:elem_width 32} {:source_name "d_Dst"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_Dst : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_Dst : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_Dst : bool;

var {:source_name "d_Src"} {:global} $$d_Src : [int]int;
axiom {:array_info "$$d_Src"} {:global} {:elem_width 32} {:source_name "d_Src"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_Src : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_Src : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_Src : bool;

var {:source_name ""} $$0 : [int]int;
axiom {:array_info "$$0"} {:elem_width 32} {:source_name ""} {:source_elem_width 128} {:source_dimensions "1"} true;

var {:source_name "idata4.i.i"} $$idata4.i.i : [int]int;
axiom {:array_info "$$idata4.i.i"} {:elem_width 32} {:source_name "idata4.i.i"} {:source_elem_width 128} {:source_dimensions "1"} true;

var {:source_name ""} $$1 : [int]int;
axiom {:array_info "$$1"} {:elem_width 32} {:source_name ""} {:source_elem_width 128} {:source_dimensions "1"} true;

var {:source_name "idata4.i"} $$idata4.i : [int]int;
axiom {:array_info "$$idata4.i"} {:elem_width 32} {:source_name "idata4.i"} {:source_elem_width 128} {:source_dimensions "1"} true;

var {:source_name ""} $$2 : [int]int;
axiom {:array_info "$$2"} {:elem_width 32} {:source_name ""} {:source_elem_width 128} {:source_dimensions "1"} true;

var {:source_name "idata4"} $$idata4 : [int]int;
axiom {:array_info "$$idata4"} {:elem_width 32} {:source_name "idata4"} {:source_elem_width 128} {:source_dimensions "1"} true;

var {:source_name "odata4"} $$odata4 : [int]int;
axiom {:array_info "$$odata4"} {:elem_width 32} {:source_name "odata4"} {:source_elem_width 128} {:source_dimensions "1"} true;

var {:source_name ""} $$3 : [int]int;
axiom {:array_info "$$3"} {:elem_width 32} {:source_name ""} {:source_elem_width 128} {:source_dimensions "1"} true;

var {:source_name "s_Data"} {:group_shared} $$_ZZ19scanExclusiveSharedP5uint4S0_jE6s_Data : [int]int;
axiom {:array_info "$$_ZZ19scanExclusiveSharedP5uint4S0_jE6s_Data"} {:group_shared} {:elem_width 32} {:source_name "s_Data"} {:source_elem_width 32} {:source_dimensions "512"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ19scanExclusiveSharedP5uint4S0_jE6s_Data : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ19scanExclusiveSharedP5uint4S0_jE6s_Data : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ19scanExclusiveSharedP5uint4S0_jE6s_Data : bool;

const _WATCHED_OFFSET : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function {:inline true} BV1_ZEXT32(x : int) : int {
  x
}
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_AND(x : int, y : int) : int {
  if x == y then x else (if x == 0 || y == 0 then 0 else BV32_AND_UF(x, y))
}
function BV32_AND_UF(int, int) : int;
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_OR(x : int, y : int) : int {
  if x == y then x else (if x == 0 then y else (if y == 0 then x else BV32_OR_UF(x, y)))
}
function BV32_OR_UF(int, int) : int;
function {:inline true} BV32_SHL(x : int, y : int) : int {
  if x >= 0 && y == 1 then x*2 else BV32_SHL_UF(x,y)
}
function BV32_SHL_UF(int, int) : int;
function {:inline true} BV32_SUB(x : int, y : int) : int {
  x - y
}
function {:inline true} BV32_UDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_ULT(x : int, y : int) : bool {
  x < y
}
procedure {:source_name "scanExclusiveShared"} {:kernel} $_Z19scanExclusiveSharedP5uint4S0_j($size:int)
requires {:sourceloc_num 0} (if BV32_AND($size, BV32_SUB($size, 1)) == 0 then 1 else 0) != 0;
{
  var $offset.i.i.i.i.0:int;
  var v60:int;
  var v61:int;
  var v62:int;
  var v63:int;
  var v0:int;
  var v1:int;
  var v2:int;
  var v3:int;
  var v4:int;
  var v5:int;
  var v6:int;
  var v7:int;
  var v8:int;
  var v9:int;
  var v10:int;
  var v11:int;
  var v12:int;
  var v13:int;
  var v14:int;
  var v15:int;
  var v16:int;
  var v17:int;
  var v18:int;
  var v19:int;
  var v20:int;
  var v21:int;
  var v22:int;
  var v23:int;
  var v24:int;
  var v25:int;
  var v26:int;
  var v27:int;
  var v28:int;
  var v29:int;
  var v30:int;
  var v31:bool;
  var v32:int;
  var v33:int;
  var v34:int;
  var v35:int;
  var v36:int;
  var v37:int;
  var v38:int;
  var v39:int;
  var v40:int;
  var v41:int;
  var v42:int;
  var v43:int;
  var v44:int;
  var v45:int;
  var v46:int;
  var v47:int;
  var v48:int;
  var v49:int;
  var v50:int;
  var v51:int;
  var v52:int;
  var v53:int;
  var v54:int;
  var v55:int;
  var v56:int;
  var v57:int;
  var v58:int;
  var v59:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  assert {:sourceloc} {:sourceloc_num 2} true;
  v1 := $$d_Src[BV32_MUL(v0, 4)];
  assert {:sourceloc} {:sourceloc_num 3} true;
  $$idata4[0] := v1;
  assert {:sourceloc} {:sourceloc_num 4} true;
  v2 := $$d_Src[BV32_ADD(BV32_MUL(v0, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 5} true;
  $$idata4[1] := v2;
  assert {:sourceloc} {:sourceloc_num 6} true;
  v3 := $$d_Src[BV32_ADD(BV32_MUL(v0, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 7} true;
  $$idata4[2] := v3;
  assert {:sourceloc} {:sourceloc_num 8} true;
  v4 := $$d_Src[BV32_ADD(BV32_MUL(v0, 4), 3)];
  assert {:sourceloc} {:sourceloc_num 9} true;
  $$idata4[3] := v4;
  assert {:sourceloc} {:sourceloc_num 10} true;
  v5 := $$idata4[0];
  assert {:sourceloc} {:sourceloc_num 11} true;
  $$3[0] := v5;
  assert {:sourceloc} {:sourceloc_num 12} true;
  v6 := $$idata4[1];
  assert {:sourceloc} {:sourceloc_num 13} true;
  $$3[1] := v6;
  assert {:sourceloc} {:sourceloc_num 14} true;
  v7 := $$idata4[2];
  assert {:sourceloc} {:sourceloc_num 15} true;
  $$3[2] := v7;
  assert {:sourceloc} {:sourceloc_num 16} true;
  v8 := $$idata4[3];
  assert {:sourceloc} {:sourceloc_num 17} true;
  $$3[3] := v8;
  assert {:sourceloc} {:sourceloc_num 18} true;
  v9 := $$3[0];
  assert {:sourceloc} {:sourceloc_num 19} true;
  v10 := $$3[1];
  assert {:sourceloc} {:sourceloc_num 20} true;
  v11 := $$3[2];
  assert {:sourceloc} {:sourceloc_num 21} true;
  v12 := $$3[3];
  assert {:sourceloc} {:sourceloc_num 22} true;
  $$idata4.i[0] := v9;
  assert {:sourceloc} {:sourceloc_num 23} true;
  $$idata4.i[1] := v10;
  assert {:sourceloc} {:sourceloc_num 24} true;
  $$idata4.i[2] := v11;
  assert {:sourceloc} {:sourceloc_num 25} true;
  $$idata4.i[3] := v12;
  assert {:sourceloc} {:sourceloc_num 26} true;
  v13 := $$idata4.i[0];
  assert {:sourceloc} {:sourceloc_num 27} true;
  $$2[0] := v13;
  assert {:sourceloc} {:sourceloc_num 28} true;
  v14 := $$idata4.i[1];
  assert {:sourceloc} {:sourceloc_num 29} true;
  $$2[1] := v14;
  assert {:sourceloc} {:sourceloc_num 30} true;
  v15 := $$idata4.i[2];
  assert {:sourceloc} {:sourceloc_num 31} true;
  $$2[2] := v15;
  assert {:sourceloc} {:sourceloc_num 32} true;
  v16 := $$idata4.i[3];
  assert {:sourceloc} {:sourceloc_num 33} true;
  $$2[3] := v16;
  assert {:sourceloc} {:sourceloc_num 34} true;
  v17 := $$2[0];
  assert {:sourceloc} {:sourceloc_num 35} true;
  v18 := $$2[1];
  assert {:sourceloc} {:sourceloc_num 36} true;
  v19 := $$2[2];
  assert {:sourceloc} {:sourceloc_num 37} true;
  v20 := $$2[3];
  assert {:sourceloc} {:sourceloc_num 38} true;
  $$idata4.i.i[0] := v17;
  assert {:sourceloc} {:sourceloc_num 39} true;
  $$idata4.i.i[1] := v18;
  assert {:sourceloc} {:sourceloc_num 40} true;
  $$idata4.i.i[2] := v19;
  assert {:sourceloc} {:sourceloc_num 41} true;
  $$idata4.i.i[3] := v20;
  assert {:sourceloc} {:sourceloc_num 42} true;
  v21 := $$idata4.i.i[0];
  assert {:sourceloc} {:sourceloc_num 43} true;
  v22 := $$idata4.i.i[1];
  assert {:sourceloc} {:sourceloc_num 44} true;
  $$idata4.i.i[1] := BV32_ADD(v22, v21);
  assert {:sourceloc} {:sourceloc_num 45} true;
  v23 := $$idata4.i.i[1];
  assert {:sourceloc} {:sourceloc_num 46} true;
  v24 := $$idata4.i.i[2];
  assert {:sourceloc} {:sourceloc_num 47} true;
  $$idata4.i.i[2] := BV32_ADD(v24, v23);
  assert {:sourceloc} {:sourceloc_num 48} true;
  v25 := $$idata4.i.i[2];
  assert {:sourceloc} {:sourceloc_num 49} true;
  v26 := $$idata4.i.i[3];
  assert {:sourceloc} {:sourceloc_num 50} true;
  $$idata4.i.i[3] := BV32_ADD(v26, v25);
  assert {:sourceloc} {:sourceloc_num 51} true;
  v27 := $$idata4.i.i[3];
  v28 := BV32_UDIV($size, 4);
  v29 := BV32_SUB(BV32_MUL(2, local_id_x), BV32_AND(local_id_x, BV32_SUB(v28, 1)));
  assert {:sourceloc} {:sourceloc_num 52} true;
  $$_ZZ19scanExclusiveSharedP5uint4S0_jE6s_Data[v29] := 0;
  v30 := BV32_ADD(v29, v28);
  assert {:sourceloc} {:sourceloc_num 53} true;
  $$_ZZ19scanExclusiveSharedP5uint4S0_jE6s_Data[v30] := v27;
  $offset.i.i.i.i.0 := 1;
  goto $1;
$1:
  assert {:block_sourceloc} {:sourceloc_num 54} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 55} (if (_WRITE_HAS_OCCURRED_$$_ZZ19scanExclusiveSharedP5uint4S0_jE6s_Data ==> BV32_OR(BV1_ZEXT32((if BV32_UDIV(BV32_MUL(4, _WATCHED_OFFSET), 4) == v30 then 1 else 0)), BV1_ZEXT32((if BV32_UDIV(BV32_MUL(4, _WATCHED_OFFSET), 4) == BV32_SUB(v30, v28) then 1 else 0))) != 0) then 1 else 0) != 0;
  v31 := BV32_ULT($offset.i.i.i.i.0, v28);
  goto $truebb, $falsebb;
$2:
  assert {:block_sourceloc} {:sourceloc_num 56} true;
  call {:sourceloc_num 57} $bugle_barrier(-1, -1);
  assert {:sourceloc} {:sourceloc_num 58} true;
  v32 := $$_ZZ19scanExclusiveSharedP5uint4S0_jE6s_Data[v30];
  assert {:sourceloc} {:sourceloc_num 59} true;
  v33 := $$_ZZ19scanExclusiveSharedP5uint4S0_jE6s_Data[BV32_SUB(v30, $offset.i.i.i.i.0)];
  call {:sourceloc_num 60} $bugle_barrier(-1, -1);
  assert {:sourceloc} {:sourceloc_num 61} true;
  $$_ZZ19scanExclusiveSharedP5uint4S0_jE6s_Data[v30] := BV32_ADD(v32, v33);
  $offset.i.i.i.i.0 := BV32_SHL($offset.i.i.i.i.0, 1);
  goto $1;
$_ZL14scan4Exclusive5uint4PVjj.exit:
  assert {:block_sourceloc} {:sourceloc_num 62} true;
  assert {:sourceloc} {:sourceloc_num 63} true;
  v34 := $$_ZZ19scanExclusiveSharedP5uint4S0_jE6s_Data[v30];
  v35 := BV32_SUB(v34, v27);
  assert {:sourceloc} {:sourceloc_num 64} true;
  v36 := $$idata4.i.i[0];
  assert {:sourceloc} {:sourceloc_num 65} true;
  $$idata4.i.i[0] := BV32_ADD(v36, v35);
  assert {:sourceloc} {:sourceloc_num 66} true;
  v37 := $$idata4.i.i[1];
  assert {:sourceloc} {:sourceloc_num 67} true;
  $$idata4.i.i[1] := BV32_ADD(v37, v35);
  assert {:sourceloc} {:sourceloc_num 68} true;
  v38 := $$idata4.i.i[2];
  assert {:sourceloc} {:sourceloc_num 69} true;
  $$idata4.i.i[2] := BV32_ADD(v38, v35);
  assert {:sourceloc} {:sourceloc_num 70} true;
  v39 := $$idata4.i.i[3];
  assert {:sourceloc} {:sourceloc_num 71} true;
  $$idata4.i.i[3] := BV32_ADD(v39, v35);
  assert {:sourceloc} {:sourceloc_num 72} true;
  v40 := $$idata4.i.i[0];
  assert {:sourceloc} {:sourceloc_num 73} true;
  $$0[0] := v40;
  assert {:sourceloc} {:sourceloc_num 74} true;
  v41 := $$idata4.i.i[1];
  assert {:sourceloc} {:sourceloc_num 75} true;
  $$0[1] := v41;
  assert {:sourceloc} {:sourceloc_num 76} true;
  v42 := $$idata4.i.i[2];
  assert {:sourceloc} {:sourceloc_num 77} true;
  $$0[2] := v42;
  assert {:sourceloc} {:sourceloc_num 78} true;
  v43 := $$idata4.i.i[3];
  assert {:sourceloc} {:sourceloc_num 79} true;
  $$0[3] := v43;
  assert {:sourceloc} {:sourceloc_num 80} true;
  v44 := $$0[0];
  assert {:sourceloc} {:sourceloc_num 81} true;
  v45 := $$0[1];
  assert {:sourceloc} {:sourceloc_num 82} true;
  v46 := $$0[2];
  assert {:sourceloc} {:sourceloc_num 83} true;
  v47 := $$0[3];
  assert {:sourceloc} {:sourceloc_num 84} true;
  $$1[0] := v44;
  assert {:sourceloc} {:sourceloc_num 85} true;
  $$1[1] := v45;
  assert {:sourceloc} {:sourceloc_num 86} true;
  $$1[2] := v46;
  assert {:sourceloc} {:sourceloc_num 87} true;
  $$1[3] := v47;
  assert {:sourceloc} {:sourceloc_num 88} true;
  v48 := $$idata4.i[0];
  assert {:sourceloc} {:sourceloc_num 89} true;
  v49 := $$1[0];
  assert {:sourceloc} {:sourceloc_num 90} true;
  $$1[0] := BV32_SUB(v49, v48);
  assert {:sourceloc} {:sourceloc_num 91} true;
  v50 := $$idata4.i[1];
  assert {:sourceloc} {:sourceloc_num 92} true;
  v51 := $$1[1];
  assert {:sourceloc} {:sourceloc_num 93} true;
  $$1[1] := BV32_SUB(v51, v50);
  assert {:sourceloc} {:sourceloc_num 94} true;
  v52 := $$idata4.i[2];
  assert {:sourceloc} {:sourceloc_num 95} true;
  v53 := $$1[2];
  assert {:sourceloc} {:sourceloc_num 96} true;
  $$1[2] := BV32_SUB(v53, v52);
  assert {:sourceloc} {:sourceloc_num 97} true;
  v54 := $$idata4.i[3];
  assert {:sourceloc} {:sourceloc_num 98} true;
  v55 := $$1[3];
  assert {:sourceloc} {:sourceloc_num 99} true;
  $$1[3] := BV32_SUB(v55, v54);
  assert {:sourceloc} {:sourceloc_num 100} true;
  v56 := $$1[0];
  assert {:sourceloc} {:sourceloc_num 101} true;
  v57 := $$1[1];
  assert {:sourceloc} {:sourceloc_num 102} true;
  v58 := $$1[2];
  assert {:sourceloc} {:sourceloc_num 103} true;
  v59 := $$1[3];
  assert {:sourceloc} {:sourceloc_num 104} true;
  $$odata4[0] := v56;
  assert {:sourceloc} {:sourceloc_num 105} true;
  $$odata4[1] := v57;
  assert {:sourceloc} {:sourceloc_num 106} true;
  $$odata4[2] := v58;
  assert {:sourceloc} {:sourceloc_num 107} true;
  $$odata4[3] := v59;
  assert {:sourceloc} {:sourceloc_num 108} true;
  v60 := $$odata4[0];
  assert {:sourceloc} {:sourceloc_num 109} true;
  $$d_Dst[BV32_MUL(v0, 4)] := v60;
  assert {:sourceloc} {:sourceloc_num 110} true;
  v61 := $$odata4[1];
  assert {:sourceloc} {:sourceloc_num 111} true;
  $$d_Dst[BV32_ADD(BV32_MUL(v0, 4), 1)] := v61;
  assert {:sourceloc} {:sourceloc_num 112} true;
  v62 := $$odata4[2];
  assert {:sourceloc} {:sourceloc_num 113} true;
  $$d_Dst[BV32_ADD(BV32_MUL(v0, 4), 2)] := v62;
  assert {:sourceloc} {:sourceloc_num 114} true;
  v63 := $$odata4[3];
  assert {:sourceloc} {:sourceloc_num 115} true;
  $$d_Dst[BV32_ADD(BV32_MUL(v0, 4), 3)] := v63;
  return;
$truebb:
  assume {:partition} v31;
  assert {:block_sourceloc} {:sourceloc_num 116} true;
  goto $2;
$falsebb:
  assume {:partition} !v31;
  assert {:block_sourceloc} {:sourceloc_num 117} true;
  goto $_ZL14scan4Exclusive5uint4PVjj.exit;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:int, $1:int);
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 256 then 1 else 0) != 0;
axiom (if num_groups_x == 6624 then 1 else 0) != 0;
