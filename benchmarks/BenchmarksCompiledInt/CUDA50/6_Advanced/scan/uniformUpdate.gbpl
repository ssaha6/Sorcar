type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "d_Data"} {:global} $$d_Data : [int]int;
axiom {:array_info "$$d_Data"} {:global} {:elem_width 32} {:source_name "d_Data"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_Data : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_Data : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_Data : bool;

var {:source_name "d_Buffer"} {:global} $$d_Buffer : [int]int;
axiom {:array_info "$$d_Buffer"} {:global} {:elem_width 32} {:source_name "d_Buffer"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_Buffer : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_Buffer : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_Buffer : bool;

var {:source_name "data4"} $$data4 : [int]int;
axiom {:array_info "$$data4"} {:elem_width 32} {:source_name "data4"} {:source_elem_width 128} {:source_dimensions "1"} true;

var {:source_name "buf"} {:group_shared} $$_ZZ13uniformUpdateP5uint4PjE3buf : [int]int;
axiom {:array_info "$$_ZZ13uniformUpdateP5uint4PjE3buf"} {:group_shared} {:elem_width 32} {:source_name "buf"} {:source_elem_width 32} {:source_dimensions "1"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ13uniformUpdateP5uint4PjE3buf : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ13uniformUpdateP5uint4PjE3buf : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ13uniformUpdateP5uint4PjE3buf : bool;

const _WATCHED_OFFSET : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
procedure {:source_name "uniformUpdate"} {:kernel} $_Z13uniformUpdateP5uint4Pj()
{
  var v0:int;
  var v1:bool;
  var v2:int;
  var v3:int;
  var v4:int;
  var v5:int;
  var v6:int;
  var v7:int;
  var v8:int;
  var v9:int;
  var v16:int;
  var v10:int;
  var v11:int;
  var v12:int;
  var v13:int;
  var v14:int;
  var v15:int;
  var v17:int;
  var v18:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  v1 := local_id_x == 0;
  goto $truebb, $falsebb;
$1:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  assert {:sourceloc} {:sourceloc_num 2} true;
  v2 := $$d_Buffer[group_id_x];
  assert {:sourceloc} {:sourceloc_num 3} true;
  $$_ZZ13uniformUpdateP5uint4PjE3buf[0] := v2;
  goto $2;
$2:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  call {:sourceloc_num 5} $bugle_barrier(-1, -1);
  assert {:sourceloc} {:sourceloc_num 6} true;
  v3 := $$d_Data[BV32_MUL(v0, 4)];
  assert {:sourceloc} {:sourceloc_num 7} true;
  $$data4[0] := v3;
  assert {:sourceloc} {:sourceloc_num 8} true;
  v4 := $$d_Data[BV32_ADD(BV32_MUL(v0, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 9} true;
  $$data4[1] := v4;
  assert {:sourceloc} {:sourceloc_num 10} true;
  v5 := $$d_Data[BV32_ADD(BV32_MUL(v0, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 11} true;
  $$data4[2] := v5;
  assert {:sourceloc} {:sourceloc_num 12} true;
  v6 := $$d_Data[BV32_ADD(BV32_MUL(v0, 4), 3)];
  assert {:sourceloc} {:sourceloc_num 13} true;
  $$data4[3] := v6;
  assert {:sourceloc} {:sourceloc_num 14} true;
  v7 := $$_ZZ13uniformUpdateP5uint4PjE3buf[0];
  assert {:sourceloc} {:sourceloc_num 15} true;
  v8 := $$data4[0];
  assert {:sourceloc} {:sourceloc_num 16} true;
  $$data4[0] := BV32_ADD(v8, v7);
  assert {:sourceloc} {:sourceloc_num 17} true;
  v9 := $$_ZZ13uniformUpdateP5uint4PjE3buf[0];
  assert {:sourceloc} {:sourceloc_num 18} true;
  v10 := $$data4[1];
  assert {:sourceloc} {:sourceloc_num 19} true;
  $$data4[1] := BV32_ADD(v10, v9);
  assert {:sourceloc} {:sourceloc_num 20} true;
  v11 := $$_ZZ13uniformUpdateP5uint4PjE3buf[0];
  assert {:sourceloc} {:sourceloc_num 21} true;
  v12 := $$data4[2];
  assert {:sourceloc} {:sourceloc_num 22} true;
  $$data4[2] := BV32_ADD(v12, v11);
  assert {:sourceloc} {:sourceloc_num 23} true;
  v13 := $$_ZZ13uniformUpdateP5uint4PjE3buf[0];
  assert {:sourceloc} {:sourceloc_num 24} true;
  v14 := $$data4[3];
  assert {:sourceloc} {:sourceloc_num 25} true;
  $$data4[3] := BV32_ADD(v14, v13);
  assert {:sourceloc} {:sourceloc_num 26} true;
  v15 := $$data4[0];
  assert {:sourceloc} {:sourceloc_num 27} true;
  $$d_Data[BV32_MUL(v0, 4)] := v15;
  assert {:sourceloc} {:sourceloc_num 28} true;
  v16 := $$data4[1];
  assert {:sourceloc} {:sourceloc_num 29} true;
  $$d_Data[BV32_ADD(BV32_MUL(v0, 4), 1)] := v16;
  assert {:sourceloc} {:sourceloc_num 30} true;
  v17 := $$data4[2];
  assert {:sourceloc} {:sourceloc_num 31} true;
  $$d_Data[BV32_ADD(BV32_MUL(v0, 4), 2)] := v17;
  assert {:sourceloc} {:sourceloc_num 32} true;
  v18 := $$data4[3];
  assert {:sourceloc} {:sourceloc_num 33} true;
  $$d_Data[BV32_ADD(BV32_MUL(v0, 4), 3)] := v18;
  return;
$truebb:
  assume {:partition} v1;
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  goto $1;
$falsebb:
  assume {:partition} !v1;
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  goto $2;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:int, $1:int);
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 256 then 1 else 0) != 0;
axiom (if num_groups_x == 6624 then 1 else 0) != 0;
