type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "d_RanksA"} {:global} $$d_RanksA : [int]int;
axiom {:array_info "$$d_RanksA"} {:global} {:elem_width 32} {:source_name "d_RanksA"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_RanksA : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_RanksA : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_RanksA : bool;

var {:source_name "d_RanksB"} {:global} $$d_RanksB : [int]int;
axiom {:array_info "$$d_RanksB"} {:global} {:elem_width 32} {:source_name "d_RanksB"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_RanksB : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_RanksB : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_RanksB : bool;

var {:source_name "d_SrcKey"} {:global} $$d_SrcKey : [int]int;
axiom {:array_info "$$d_SrcKey"} {:global} {:elem_width 32} {:source_name "d_SrcKey"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_SrcKey : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_SrcKey : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_SrcKey : bool;

const _WATCHED_OFFSET : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function  BV32_LSHR(int, int) : int;
function {:inline true} BV1_ZEXT32(x : int) : int {
  x
}
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_AND(x : int, y : int) : int {
  if x == y then x else (if x == 0 || y == 0 then 0 else BV32_AND_UF(x, y))
}
function BV32_AND_UF(int, int) : int;
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SHL(x : int, y : int) : int {
  if x >= 0 && y == 1 then x*2 else BV32_SHL_UF(x,y)
}
function BV32_SHL_UF(int, int) : int;
function {:inline true} BV32_SUB(x : int, y : int) : int {
  x - y
}
function {:inline true} BV32_UDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_UGE(x : int, y : int) : bool {
  x >= y
}
function {:inline true} BV32_UGT(x : int, y : int) : bool {
  x > y
}
function {:inline true} BV32_ULE(x : int, y : int) : bool {
  x <= y
}
function {:inline true} BV32_ULT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV32_UREM(x : int, y : int) : int {
  x mod y
}
procedure BV32_CTLZ(val : int, isZeroUndef : bool) returns (count : int);
procedure {:source_name "generateSampleRanksKernel<1>"} {:kernel} $_Z25generateSampleRanksKernelILj1EEvPjS0_S0_jjj($stride:int, $N:int, $threadCount:int)
requires {:sourceloc_num 0} (if BV32_AND($stride, BV1_ZEXT32((if BV32_SUB($stride, 1) == 0 then 1 else 0))) != 0 then 1 else 0) != 0;
{
  var $0:int;
  var $1:int;
  var $2:int;
  var $.0:int;
  var $pos.i2.0:int;
  var $.01:int;
  var $3:int;
  var $pos.i2.1:int;
  var $.03:int;
  var $.02:int;
  var $pos.i.0:int;
  var $4:int;
  var $pos.i.1:int;
  var v1:bool;
  var v0:int;
  var v3:int;
  var v2:int;
  var v4:int;
  var v5:int;
  var v6:bool;
  var v7:bool;
  var v8:bool;
  var v9:bool;
  var v10:int;
  var v11:int;
  var v12:bool;
  var v13:bool;
  var v14:bool;
  var v15:int;
  var v16:bool;
  var v17:bool;
  var v18:int;
  var v19:int;
  var v20:bool;
  var v21:bool;
  var v22:bool;
  var v23:int;
  var v24:bool;
$0:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  v1 := BV32_UGE(v0, $threadCount);
  goto $truebb, $falsebb;
$1:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  goto $33;
$2:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  v2 := BV32_AND(v0, BV32_SUB(BV32_UDIV($stride, 128), 1));
  v3 := BV32_MUL(BV32_SUB(v0, v2), 256);
  v4 := BV32_UDIV(v3, 128);
  v5 := BV32_UDIV(v3, 128);
  v6 := BV32_ULT($stride, BV32_SUB(BV32_SUB($N, v3), $stride));
  goto $truebb0, $falsebb0;
$3:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  $0 := $stride;
  goto $5;
$4:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  $0 := BV32_SUB(BV32_SUB($N, v3), $stride);
  goto $5;
$5:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  v7 := BV32_UREM($stride, 128) == 0;
  goto $truebb1, $falsebb1;
$6:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  $1 := BV32_UDIV($stride, 128);
  goto $_ZL14getSampleCountj.exit;
$7:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  $1 := BV32_ADD(BV32_UDIV($stride, 128), 1);
  goto $_ZL14getSampleCountj.exit;
$_ZL14getSampleCountj.exit:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  v8 := BV32_UREM($0, 128) == 0;
  goto $truebb2, $falsebb2;
$8:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  $2 := BV32_UDIV($0, 128);
  goto $_ZL14getSampleCountj.exit1;
$9:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  $2 := BV32_ADD(BV32_UDIV($0, 128), 1);
  goto $_ZL14getSampleCountj.exit1;
$_ZL14getSampleCountj.exit1:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  v9 := BV32_ULT(v2, $1);
  goto $truebb3, $falsebb3;
$10:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  assert {:sourceloc} {:sourceloc_num 14} true;
  $$d_RanksA[BV32_ADD(v4, v2)] := BV32_MUL(v2, 128);
  assert {:sourceloc} {:sourceloc_num 15} true;
  v10 := $$d_SrcKey[BV32_ADD(v3, BV32_MUL(v2, 128))];
  call v11 := BV32_CTLZ(BV32_SUB($0, 1), false);
  v12 := $0 == 0;
  goto $truebb4, $falsebb4;
$11:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  $.0 := 0;
  goto $_ZL21binarySearchExclusiveILj1EEjjPjjj.exit;
$12:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  $pos.i2.0, $.01 := 0, BV32_SHL(1, BV32_SUB(32, v11));
  goto $13;
$13:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  v13 := BV32_UGT($.01, 0);
  goto $truebb5, $falsebb5;
$14:
  assert {:block_sourceloc} {:sourceloc_num 19} true;
  v14 := BV32_ULT(BV32_ADD($pos.i2.0, $.01), $0);
  goto $truebb6, $falsebb6;
$15:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  $3 := BV32_ADD($pos.i2.0, $.01);
  goto $17;
$16:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  $3 := $0;
  goto $17;
$17:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  assert {:sourceloc} {:sourceloc_num 23} true;
  v15 := $$d_SrcKey[BV32_ADD(BV32_ADD(v3, $stride), BV32_SUB($3, 1))];
  v16 := BV32_ULT(v15, v10);
  goto $truebb7, $falsebb7;
$18:
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  $pos.i2.1 := $3;
  goto $19;
$19:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  $pos.i2.0, $.01 := $pos.i2.1, BV32_LSHR($.01, 1);
  goto $13;
$20:
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  $.0 := $pos.i2.0;
  goto $_ZL21binarySearchExclusiveILj1EEjjPjjj.exit;
$_ZL21binarySearchExclusiveILj1EEjjPjjj.exit:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  assert {:sourceloc} {:sourceloc_num 28} true;
  $$d_RanksB[BV32_ADD(v5, v2)] := $.0;
  goto $21;
$21:
  assert {:block_sourceloc} {:sourceloc_num 29} true;
  v17 := BV32_ULT(v2, $2);
  goto $truebb8, $falsebb8;
$22:
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  assert {:sourceloc} {:sourceloc_num 31} true;
  $$d_RanksB[BV32_ADD(v5, BV32_ADD(BV32_UDIV($stride, 128), v2))] := BV32_MUL(v2, 128);
  assert {:sourceloc} {:sourceloc_num 32} true;
  v18 := $$d_SrcKey[BV32_ADD(v3, BV32_ADD($stride, BV32_MUL(v2, 128)))];
  call v19 := BV32_CTLZ(BV32_SUB($stride, 1), false);
  v20 := $stride == 0;
  goto $truebb9, $falsebb9;
$23:
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  $.03 := 0;
  goto $_ZL21binarySearchInclusiveILj1EEjjPjjj.exit;
$24:
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  $.02, $pos.i.0 := BV32_SHL(1, BV32_SUB(32, v19)), 0;
  goto $25;
$25:
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  v21 := BV32_UGT($.02, 0);
  goto $truebb10, $falsebb10;
$26:
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  v22 := BV32_ULT(BV32_ADD($pos.i.0, $.02), $stride);
  goto $truebb11, $falsebb11;
$27:
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  $4 := BV32_ADD($pos.i.0, $.02);
  goto $29;
$28:
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  $4 := $stride;
  goto $29;
$29:
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  assert {:sourceloc} {:sourceloc_num 40} true;
  v23 := $$d_SrcKey[BV32_ADD(v3, BV32_SUB($4, 1))];
  v24 := BV32_ULE(v23, v18);
  goto $truebb12, $falsebb12;
$30:
  assert {:block_sourceloc} {:sourceloc_num 41} true;
  $pos.i.1 := $4;
  goto $31;
$31:
  assert {:block_sourceloc} {:sourceloc_num 42} true;
  $.02, $pos.i.0 := BV32_LSHR($.02, 1), $pos.i.1;
  goto $25;
$32:
  assert {:block_sourceloc} {:sourceloc_num 43} true;
  $.03 := $pos.i.0;
  goto $_ZL21binarySearchInclusiveILj1EEjjPjjj.exit;
$_ZL21binarySearchInclusiveILj1EEjjPjjj.exit:
  assert {:block_sourceloc} {:sourceloc_num 44} true;
  assert {:sourceloc} {:sourceloc_num 45} true;
  $$d_RanksA[BV32_ADD(v4, BV32_ADD(BV32_UDIV($stride, 128), v2))] := $.03;
  goto $33;
$33:
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  return;
$truebb:
  assume {:partition} v1;
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  goto $1;
$falsebb:
  assume {:partition} !v1;
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  goto $2;
$truebb0:
  assume {:partition} v6;
  assert {:block_sourceloc} {:sourceloc_num 49} true;
  goto $3;
$falsebb0:
  assume {:partition} !v6;
  assert {:block_sourceloc} {:sourceloc_num 50} true;
  goto $4;
$truebb1:
  assume {:partition} v7;
  assert {:block_sourceloc} {:sourceloc_num 51} true;
  goto $6;
$falsebb1:
  assume {:partition} !v7;
  assert {:block_sourceloc} {:sourceloc_num 52} true;
  goto $7;
$truebb2:
  assume {:partition} v8;
  assert {:block_sourceloc} {:sourceloc_num 53} true;
  goto $8;
$falsebb2:
  assume {:partition} !v8;
  assert {:block_sourceloc} {:sourceloc_num 54} true;
  goto $9;
$truebb3:
  assume {:partition} v9;
  assert {:block_sourceloc} {:sourceloc_num 55} true;
  goto $10;
$falsebb3:
  assume {:partition} !v9;
  assert {:block_sourceloc} {:sourceloc_num 56} true;
  goto $21;
$truebb4:
  assume {:partition} v12;
  assert {:block_sourceloc} {:sourceloc_num 57} true;
  goto $11;
$falsebb4:
  assume {:partition} !v12;
  assert {:block_sourceloc} {:sourceloc_num 58} true;
  goto $12;
$truebb5:
  assume {:partition} v13;
  assert {:block_sourceloc} {:sourceloc_num 59} true;
  goto $14;
$falsebb5:
  assume {:partition} !v13;
  assert {:block_sourceloc} {:sourceloc_num 60} true;
  goto $20;
$truebb6:
  assume {:partition} v14;
  assert {:block_sourceloc} {:sourceloc_num 61} true;
  goto $15;
$falsebb6:
  assume {:partition} !v14;
  assert {:block_sourceloc} {:sourceloc_num 62} true;
  goto $16;
$truebb7:
  assume {:partition} v16;
  assert {:block_sourceloc} {:sourceloc_num 63} true;
  goto $18;
$falsebb7:
  assume {:partition} !v16;
  assert {:block_sourceloc} {:sourceloc_num 64} true;
  $pos.i2.1 := $pos.i2.0;
  goto $19;
$truebb8:
  assume {:partition} v17;
  assert {:block_sourceloc} {:sourceloc_num 65} true;
  goto $22;
$falsebb8:
  assume {:partition} !v17;
  assert {:block_sourceloc} {:sourceloc_num 66} true;
  goto $33;
$truebb9:
  assume {:partition} v20;
  assert {:block_sourceloc} {:sourceloc_num 67} true;
  goto $23;
$falsebb9:
  assume {:partition} !v20;
  assert {:block_sourceloc} {:sourceloc_num 68} true;
  goto $24;
$truebb10:
  assume {:partition} v21;
  assert {:block_sourceloc} {:sourceloc_num 69} true;
  goto $26;
$falsebb10:
  assume {:partition} !v21;
  assert {:block_sourceloc} {:sourceloc_num 70} true;
  goto $32;
$truebb11:
  assume {:partition} v22;
  assert {:block_sourceloc} {:sourceloc_num 71} true;
  goto $27;
$falsebb11:
  assume {:partition} !v22;
  assert {:block_sourceloc} {:sourceloc_num 72} true;
  goto $28;
$truebb12:
  assume {:partition} v24;
  assert {:block_sourceloc} {:sourceloc_num 73} true;
  goto $30;
$falsebb12:
  assume {:partition} !v24;
  assert {:block_sourceloc} {:sourceloc_num 74} true;
  $pos.i.1 := $pos.i.0;
  goto $31;
}
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 256 then 1 else 0) != 0;
axiom (if num_groups_x == 64 then 1 else 0) != 0;
