type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "odata"} {:global} $$odata : [int]int;
axiom {:array_info "$$odata"} {:global} {:elem_width 32} {:source_name "odata"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$odata : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$odata : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$odata : bool;

var {:source_name "idata"} {:global} $$idata : [int]int;
axiom {:array_info "$$idata"} {:global} {:elem_width 32} {:source_name "idata"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$idata : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$idata : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$idata : bool;

var {:source_name "tile"} {:group_shared} $$_ZZ13copySharedMemPfS_iiiE4tile : [int]int;
axiom {:array_info "$$_ZZ13copySharedMemPfS_iiiE4tile"} {:group_shared} {:elem_width 32} {:source_name "tile"} {:source_elem_width 32} {:source_dimensions "16,16"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,16"} _READ_HAS_OCCURRED_$$_ZZ13copySharedMemPfS_iiiE4tile : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,16"} _WRITE_HAS_OCCURRED_$$_ZZ13copySharedMemPfS_iiiE4tile : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,16"} _ATOMIC_HAS_OCCURRED_$$_ZZ13copySharedMemPfS_iiiE4tile : bool;

const _WATCHED_OFFSET : int;
const {:group_id_x} group_id_x : int;
const {:group_id_y} group_id_y : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:local_id_y} local_id_y : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SLT(x : int, y : int) : bool {
  x < y
}
procedure {:source_name "copySharedMem"} {:kernel} $_Z13copySharedMemPfS_iii($width:int, $height:int, $nreps:int)
requires {:sourceloc_num 0} (if $width == 1024 then 1 else 0) != 0;
requires {:sourceloc_num 1} (if $height == 1024 then 1 else 0) != 0;
requires {:sourceloc_num 2} (if $nreps == 1 then 1 else 0) != 0;
{
  var $r.0:int;
  var $i.0:int;
  var $i1.0:int;
  var v0:int;
  var v1:int;
  var v2:int;
  var v3:bool;
  var v4:bool;
  var v5:bool;
  var v6:bool;
  var v7:int;
  var v8:bool;
  var v9:bool;
  var v10:bool;
  var v11:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, 16), local_id_x);
  v1 := BV32_ADD(BV32_MUL(group_id_y, 16), local_id_y);
  v2 := BV32_ADD(v0, BV32_MUL($width, v1));
  $r.0 := 0;
  goto $1;
$1:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  v3 := BV32_SLT($r.0, $nreps);
  goto $truebb, $falsebb;
$2:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  $i.0 := 0;
  goto $3;
$3:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  v4 := BV32_SLT($i.0, 16);
  goto $truebb0, $falsebb0;
$4:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  v5 := BV32_SLT(v0, $width);
  goto $truebb1, $falsebb1;
$5:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  v6 := BV32_SLT(v1, $height);
  goto $truebb2, $falsebb2;
$6:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  assert {:sourceloc} {:sourceloc_num 10} true;
  v7 := $$idata[v2];
  assert {:sourceloc} {:sourceloc_num 11} true;
  $$_ZZ13copySharedMemPfS_iiiE4tile[BV32_ADD(BV32_MUL(local_id_y, 16), local_id_x)] := v7;
  goto $7;
$7:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  goto $8;
$8:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  $i.0 := BV32_ADD($i.0, 16);
  goto $3;
$9:
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  call {:sourceloc_num 15} $bugle_barrier(-1, -1);
  $i1.0 := 0;
  goto $10;
$10:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  v8 := BV32_SLT($i1.0, 16);
  goto $truebb3, $falsebb3;
$11:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  v9 := BV32_SLT(v0, $height);
  goto $truebb4, $falsebb4;
$12:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  v10 := BV32_SLT(v1, $width);
  goto $truebb5, $falsebb5;
$13:
  assert {:block_sourceloc} {:sourceloc_num 19} true;
  assert {:sourceloc} {:sourceloc_num 20} true;
  v11 := $$_ZZ13copySharedMemPfS_iiiE4tile[BV32_ADD(BV32_MUL(local_id_y, 16), local_id_x)];
  assert {:sourceloc} {:sourceloc_num 21} true;
  $$odata[v2] := v11;
  goto $14;
$14:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  goto $15;
$15:
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  $i1.0 := BV32_ADD($i1.0, 16);
  goto $10;
$16:
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  goto $17;
$17:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  $r.0 := BV32_ADD($r.0, 1);
  goto $1;
$18:
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  return;
$truebb:
  assume {:partition} v3;
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  goto $2;
$falsebb:
  assume {:partition} !v3;
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  goto $18;
$truebb0:
  assume {:partition} v4;
  assert {:block_sourceloc} {:sourceloc_num 29} true;
  goto $4;
$falsebb0:
  assume {:partition} !v4;
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  goto $9;
$truebb1:
  assume {:partition} v5;
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  goto $5;
$falsebb1:
  assume {:partition} !v5;
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  goto $7;
$truebb2:
  assume {:partition} v6;
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  goto $6;
$falsebb2:
  assume {:partition} !v6;
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  goto $7;
$truebb3:
  assume {:partition} v8;
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  goto $11;
$falsebb3:
  assume {:partition} !v8;
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  goto $16;
$truebb4:
  assume {:partition} v9;
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  goto $12;
$falsebb4:
  assume {:partition} !v9;
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  goto $14;
$truebb5:
  assume {:partition} v10;
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  goto $13;
$falsebb5:
  assume {:partition} !v10;
  assert {:block_sourceloc} {:sourceloc_num 40} true;
  goto $14;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:int, $1:int);
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 16 then 1 else 0) != 0;
axiom (if group_size_y == 16 then 1 else 0) != 0;
axiom (if num_groups_x == 64 then 1 else 0) != 0;
axiom (if num_groups_y == 64 then 1 else 0) != 0;
