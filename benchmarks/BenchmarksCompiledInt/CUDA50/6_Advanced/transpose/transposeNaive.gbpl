type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "odata"} {:global} $$odata : [int]int;
axiom {:array_info "$$odata"} {:global} {:elem_width 32} {:source_name "odata"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$odata : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$odata : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$odata : bool;

var {:source_name "idata"} {:global} $$idata : [int]int;
axiom {:array_info "$$idata"} {:global} {:elem_width 32} {:source_name "idata"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$idata : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$idata : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$idata : bool;

const _WATCHED_OFFSET : int;
const {:group_id_x} group_id_x : int;
const {:group_id_y} group_id_y : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:local_id_y} local_id_y : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SLT(x : int, y : int) : bool {
  x < y
}
procedure {:source_name "transposeNaive"} {:kernel} $_Z14transposeNaivePfS_iii($width:int, $height:int, $nreps:int)
requires {:sourceloc_num 0} (if $height == 1024 then 1 else 0) != 0;
{
  var $r.0:int;
  var $i.0:int;
  var v0:int;
  var v1:int;
  var v2:bool;
  var v3:bool;
  var v4:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, 16), local_id_x);
  v1 := BV32_ADD(BV32_MUL(group_id_y, 16), local_id_y);
  $r.0 := 0;
  goto $1;
$1:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v2 := BV32_SLT($r.0, $nreps);
  goto $truebb, $falsebb;
$2:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  $i.0 := 0;
  goto $3;
$3:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  v3 := BV32_SLT($i.0, 16);
  goto $truebb0, $falsebb0;
$4:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  assert {:sourceloc} {:sourceloc_num 6} true;
  v4 := $$idata[BV32_ADD(BV32_ADD(v0, BV32_MUL($width, v1)), BV32_MUL($i.0, $width))];
  assert {:sourceloc} {:sourceloc_num 7} true;
  $$odata[BV32_ADD(BV32_ADD(v1, BV32_MUL($height, v0)), $i.0)] := v4;
  goto $5;
$5:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  $i.0 := BV32_ADD($i.0, 16);
  goto $3;
$6:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  goto $7;
$7:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  $r.0 := BV32_ADD($r.0, 1);
  goto $1;
$8:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  return;
$truebb:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  goto $2;
$falsebb:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  goto $8;
$truebb0:
  assume {:partition} v3;
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  goto $4;
$falsebb0:
  assume {:partition} !v3;
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  goto $6;
}
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 16 then 1 else 0) != 0;
axiom (if group_size_y == 16 then 1 else 0) != 0;
axiom (if num_groups_x == 64 then 1 else 0) != 0;
axiom (if num_groups_y == 64 then 1 else 0) != 0;
