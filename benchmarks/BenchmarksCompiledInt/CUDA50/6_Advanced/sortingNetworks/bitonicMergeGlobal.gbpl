type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "d_DstKey"} {:global} $$d_DstKey : [int]int;
axiom {:array_info "$$d_DstKey"} {:global} {:elem_width 32} {:source_name "d_DstKey"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_DstKey : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_DstKey : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_DstKey : bool;

var {:source_name "d_DstVal"} {:global} $$d_DstVal : [int]int;
axiom {:array_info "$$d_DstVal"} {:global} {:elem_width 32} {:source_name "d_DstVal"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_DstVal : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_DstVal : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_DstVal : bool;

var {:source_name "d_SrcKey"} {:global} $$d_SrcKey : [int]int;
axiom {:array_info "$$d_SrcKey"} {:global} {:elem_width 32} {:source_name "d_SrcKey"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_SrcKey : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_SrcKey : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_SrcKey : bool;

var {:source_name "d_SrcVal"} {:global} $$d_SrcVal : [int]int;
axiom {:array_info "$$d_SrcVal"} {:global} {:elem_width 32} {:source_name "d_SrcVal"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_SrcVal : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_SrcVal : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_SrcVal : bool;

const _WATCHED_OFFSET : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function {:inline true} BV1_ZEXT32(x : int) : int {
  x
}
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_AND(x : int, y : int) : int {
  if x == y then x else (if x == 0 || y == 0 then 0 else BV32_AND_UF(x, y))
}
function BV32_AND_UF(int, int) : int;
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SUB(x : int, y : int) : int {
  x - y
}
function {:inline true} BV32_UDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_UGT(x : int, y : int) : bool {
  x > y
}
function {:inline true} BV32_XOR(x : int, y : int) : int {
  if x == y then 0 else (if x == 0 then y else (if y == 0 then x else BV32_XOR_UF(x, y)))
}
function BV32_XOR_UF(int, int) : int;
procedure {:source_name "bitonicMergeGlobal"} {:kernel} $_Z18bitonicMergeGlobalPjS_S_S_jjjj($arrayLength:int, $size:int, $stride:int, $dir:int)
requires {:sourceloc_num 0} (if $arrayLength == 2048 then 1 else 0) != 0;
requires {:sourceloc_num 1} (if $stride == 1024 then 1 else 0) != 0;
{
  var $valB.0:int;
  var $keyB.0:int;
  var $valA.0:int;
  var $keyA.0:int;
  var v0:int;
  var v1:int;
  var v2:int;
  var v3:int;
  var v4:int;
  var v5:int;
  var v6:bool;
$0:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  v1 := BV32_SUB(BV32_MUL(2, v0), BV32_AND(v0, BV32_SUB($stride, 1)));
  assert {:sourceloc} {:sourceloc_num 3} true;
  v2 := $$d_SrcKey[v1];
  assert {:sourceloc} {:sourceloc_num 4} true;
  v3 := $$d_SrcVal[v1];
  assert {:sourceloc} {:sourceloc_num 5} true;
  v4 := $$d_SrcKey[BV32_ADD(v1, $stride)];
  assert {:sourceloc} {:sourceloc_num 6} true;
  v5 := $$d_SrcVal[BV32_ADD(v1, $stride)];
  v6 := BV1_ZEXT32((if BV32_UGT(v2, v4) then 1 else 0)) == BV32_XOR($dir, BV1_ZEXT32((if BV32_AND(BV32_AND(v0, BV32_SUB(BV32_UDIV($arrayLength, 2), 1)), BV32_UDIV($size, 2)) != 0 then 1 else 0)));
  goto $truebb, $falsebb;
$1:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  $valB.0, $keyB.0, $valA.0, $keyA.0 := v3, v2, v5, v4;
  goto $_ZL10ComparatorRjS_S_S_j.exit;
$_ZL10ComparatorRjS_S_S_j.exit:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  assert {:sourceloc} {:sourceloc_num 9} true;
  $$d_DstKey[v1] := $keyA.0;
  assert {:sourceloc} {:sourceloc_num 10} true;
  $$d_DstVal[v1] := $valA.0;
  assert {:sourceloc} {:sourceloc_num 11} true;
  $$d_DstKey[BV32_ADD(v1, $stride)] := $keyB.0;
  assert {:sourceloc} {:sourceloc_num 12} true;
  $$d_DstVal[BV32_ADD(v1, $stride)] := $valB.0;
  return;
$truebb:
  assume {:partition} v6;
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  goto $1;
$falsebb:
  assume {:partition} !v6;
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  $valB.0, $keyB.0, $valA.0, $keyA.0 := v5, v4, v3, v2;
  goto $_ZL10ComparatorRjS_S_S_j.exit;
}
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 512 then 1 else 0) != 0;
axiom (if num_groups_x == 1024 then 1 else 0) != 0;
