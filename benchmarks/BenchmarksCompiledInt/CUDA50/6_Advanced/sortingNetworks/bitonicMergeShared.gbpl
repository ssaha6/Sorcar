type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "d_DstKey"} {:global} $$d_DstKey : [int]int;
axiom {:array_info "$$d_DstKey"} {:global} {:elem_width 32} {:source_name "d_DstKey"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_DstKey : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_DstKey : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_DstKey : bool;

var {:source_name "d_DstVal"} {:global} $$d_DstVal : [int]int;
axiom {:array_info "$$d_DstVal"} {:global} {:elem_width 32} {:source_name "d_DstVal"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_DstVal : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_DstVal : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_DstVal : bool;

var {:source_name "d_SrcKey"} {:global} $$d_SrcKey : [int]int;
axiom {:array_info "$$d_SrcKey"} {:global} {:elem_width 32} {:source_name "d_SrcKey"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_SrcKey : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_SrcKey : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_SrcKey : bool;

var {:source_name "d_SrcVal"} {:global} $$d_SrcVal : [int]int;
axiom {:array_info "$$d_SrcVal"} {:global} {:elem_width 32} {:source_name "d_SrcVal"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_SrcVal : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_SrcVal : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_SrcVal : bool;

var {:source_name "s_key"} {:group_shared} $$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_key : [int]int;
axiom {:array_info "$$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_key"} {:group_shared} {:elem_width 32} {:source_name "s_key"} {:source_elem_width 32} {:source_dimensions "1024"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_key : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_key : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_key : bool;

var {:source_name "s_val"} {:group_shared} $$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_val : [int]int;
axiom {:array_info "$$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_val"} {:group_shared} {:elem_width 32} {:source_name "s_val"} {:source_elem_width 32} {:source_dimensions "1024"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_val : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_val : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_val : bool;

const _WATCHED_OFFSET : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function  BV32_LSHR(int, int) : int;
function {:inline true} BV1_ZEXT32(x : int) : int {
  x
}
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_AND(x : int, y : int) : int {
  if x == y then x else (if x == 0 || y == 0 then 0 else BV32_AND_UF(x, y))
}
function BV32_AND_UF(int, int) : int;
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SUB(x : int, y : int) : int {
  x - y
}
function {:inline true} BV32_UDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_UGT(x : int, y : int) : bool {
  x > y
}
function {:inline true} BV32_XOR(x : int, y : int) : int {
  if x == y then 0 else (if x == 0 then y else (if y == 0 then x else BV32_XOR_UF(x, y)))
}
function BV32_XOR_UF(int, int) : int;
procedure {:source_name "bitonicMergeShared"} {:kernel} $_Z18bitonicMergeSharedPjS_S_S_jjj($arrayLength:int, $size:int, $dir:int)
requires {:sourceloc_num 0} (if $arrayLength == 2048 then 1 else 0) != 0;
requires {:sourceloc_num 1} (if $size == 1024 then 1 else 0) != 0;
{
  var $stride.0:int;
  var v0:int;
  var v1:int;
  var v2:int;
  var v3:int;
  var v4:int;
  var v5:int;
  var v6:int;
  var v7:int;
  var v8:bool;
  var v9:int;
  var v10:int;
  var v11:int;
  var v12:int;
  var v13:int;
  var v14:bool;
  var v15:int;
  var v16:int;
  var v17:int;
  var v18:int;
  var v19:int;
  var v20:int;
  var v21:int;
  var v22:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, 1024), local_id_x);
  v1 := BV32_ADD(BV32_MUL(group_id_x, 1024), local_id_x);
  v2 := BV32_ADD(BV32_MUL(group_id_x, 1024), local_id_x);
  v3 := BV32_ADD(BV32_MUL(group_id_x, 1024), local_id_x);
  assert {:sourceloc} {:sourceloc_num 3} true;
  v4 := $$d_SrcKey[v0];
  assert {:sourceloc} {:sourceloc_num 4} true;
  $$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_key[local_id_x] := v4;
  assert {:sourceloc} {:sourceloc_num 5} true;
  v5 := $$d_SrcVal[v1];
  assert {:sourceloc} {:sourceloc_num 6} true;
  $$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_val[local_id_x] := v5;
  assert {:sourceloc} {:sourceloc_num 7} true;
  v6 := $$d_SrcKey[BV32_ADD(v0, 512)];
  assert {:sourceloc} {:sourceloc_num 8} true;
  $$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_key[BV32_ADD(local_id_x, 512)] := v6;
  assert {:sourceloc} {:sourceloc_num 9} true;
  v7 := $$d_SrcVal[BV32_ADD(v1, 512)];
  assert {:sourceloc} {:sourceloc_num 10} true;
  $$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_val[BV32_ADD(local_id_x, 512)] := v7;
  $stride.0 := 512;
  goto $1;
$1:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  v8 := BV32_UGT($stride.0, 0);
  goto $truebb, $falsebb;
$2:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  call {:sourceloc_num 13} $bugle_barrier(-1, -1);
  v9 := BV32_SUB(BV32_MUL(2, local_id_x), BV32_AND(local_id_x, BV32_SUB($stride.0, 1)));
  v10 := BV32_ADD(v9, $stride.0);
  v11 := BV32_ADD(v9, $stride.0);
  assert {:sourceloc} {:sourceloc_num 14} true;
  v12 := $$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_key[v9];
  assert {:sourceloc} {:sourceloc_num 15} true;
  v13 := $$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_key[v10];
  v14 := BV1_ZEXT32((if BV32_UGT(v12, v13) then 1 else 0)) == BV32_XOR($dir, BV1_ZEXT32((if BV32_AND(BV32_AND(BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x), BV32_SUB(BV32_UDIV($arrayLength, 2), 1)), BV32_UDIV($size, 2)) != 0 then 1 else 0)));
  goto $truebb0, $falsebb0;
$3:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  assert {:sourceloc} {:sourceloc_num 17} true;
  v15 := $$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_key[v9];
  assert {:sourceloc} {:sourceloc_num 18} true;
  v16 := $$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_key[v10];
  assert {:sourceloc} {:sourceloc_num 19} true;
  $$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_key[v9] := v16;
  assert {:sourceloc} {:sourceloc_num 20} true;
  $$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_key[v10] := v15;
  assert {:sourceloc} {:sourceloc_num 21} true;
  v17 := $$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_val[v9];
  assert {:sourceloc} {:sourceloc_num 22} true;
  v18 := $$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_val[v11];
  assert {:sourceloc} {:sourceloc_num 23} true;
  $$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_val[v9] := v18;
  assert {:sourceloc} {:sourceloc_num 24} true;
  $$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_val[v11] := v17;
  goto $_ZL10ComparatorRjS_S_S_j.exit;
$_ZL10ComparatorRjS_S_S_j.exit:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  goto $4;
$4:
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  $stride.0 := BV32_LSHR($stride.0, 1);
  goto $1;
$5:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  call {:sourceloc_num 28} $bugle_barrier(-1, -1);
  assert {:sourceloc} {:sourceloc_num 29} true;
  v19 := $$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_key[local_id_x];
  assert {:sourceloc} {:sourceloc_num 30} true;
  $$d_DstKey[v2] := v19;
  assert {:sourceloc} {:sourceloc_num 31} true;
  v20 := $$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_val[local_id_x];
  assert {:sourceloc} {:sourceloc_num 32} true;
  $$d_DstVal[v3] := v20;
  assert {:sourceloc} {:sourceloc_num 33} true;
  v21 := $$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_key[BV32_ADD(local_id_x, 512)];
  assert {:sourceloc} {:sourceloc_num 34} true;
  $$d_DstKey[BV32_ADD(v2, 512)] := v21;
  assert {:sourceloc} {:sourceloc_num 35} true;
  v22 := $$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_val[BV32_ADD(local_id_x, 512)];
  assert {:sourceloc} {:sourceloc_num 36} true;
  $$d_DstVal[BV32_ADD(v3, 512)] := v22;
  return;
$truebb:
  assume {:partition} v8;
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  goto $2;
$falsebb:
  assume {:partition} !v8;
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  goto $5;
$truebb0:
  assume {:partition} v14;
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  goto $3;
$falsebb0:
  assume {:partition} !v14;
  assert {:block_sourceloc} {:sourceloc_num 40} true;
  goto $_ZL10ComparatorRjS_S_S_j.exit;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:int, $1:int);
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 512 then 1 else 0) != 0;
axiom (if num_groups_x == 1024 then 1 else 0) != 0;
