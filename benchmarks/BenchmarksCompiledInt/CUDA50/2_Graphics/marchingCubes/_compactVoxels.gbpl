type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "compactedVoxelArray"} {:global} $$compactedVoxelArray : [int]int;
axiom {:array_info "$$compactedVoxelArray"} {:global} {:elem_width 32} {:source_name "compactedVoxelArray"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$compactedVoxelArray : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$compactedVoxelArray : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$compactedVoxelArray : bool;

var {:source_name "voxelOccupied"} {:global} $$voxelOccupied : [int]int;
axiom {:array_info "$$voxelOccupied"} {:global} {:elem_width 32} {:source_name "voxelOccupied"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$voxelOccupied : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$voxelOccupied : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$voxelOccupied : bool;

var {:source_name "voxelOccupiedScan"} {:global} $$voxelOccupiedScan : [int]int;
axiom {:array_info "$$voxelOccupiedScan"} {:global} {:elem_width 32} {:source_name "voxelOccupiedScan"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$voxelOccupiedScan : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$voxelOccupiedScan : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$voxelOccupiedScan : bool;

const _WATCHED_OFFSET : int;
const {:group_id_x} group_id_x : int;
const {:group_id_y} group_id_y : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function BV_CONCAT(int, int) : int;
function BV_EXTRACT(int, int, int) : int;
function __other_bv32(int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_ULE(x : int, y : int) : bool {
  x <= y
}
function {:inline true} BV32_ULT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV34_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} __add_noovfl_2(v0:int, v1:int) : int {if BV_EXTRACT(BV34_ADD(BV_CONCAT(0, v0), BV_CONCAT(0, v1)), 34, 32) == 0 then 1 else 0}
procedure {:source_name "compactVoxels"} {:kernel} $_Z13compactVoxelsPjS_S_j($numVoxels:int)
requires {:sourceloc_num 0} (if (BV32_ULT(BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(group_id_y, num_groups_x), group_id_x), group_size_x), local_id_x), __other_bv32(BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(group_id_y, num_groups_x), group_id_x), group_size_x), local_id_x))) ==> BV32_ULE(BV32_ADD($$voxelOccupiedScan[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(group_id_y, num_groups_x), group_id_x), group_size_x), local_id_x)], $$voxelOccupied[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(group_id_y, num_groups_x), group_id_x), group_size_x), local_id_x)]), $$voxelOccupiedScan[__other_bv32(BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(group_id_y, num_groups_x), group_id_x), group_size_x), local_id_x))])) then 1 else 0) != 0;
requires {:sourceloc_num 1} (if (BV32_ULT(BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(group_id_y, num_groups_x), group_id_x), group_size_x), local_id_x), __other_bv32(BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(group_id_y, num_groups_x), group_id_x), group_size_x), local_id_x))) ==> __add_noovfl_2($$voxelOccupiedScan[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(group_id_y, num_groups_x), group_id_x), group_size_x), local_id_x)], $$voxelOccupied[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(group_id_y, num_groups_x), group_id_x), group_size_x), local_id_x)]) == 1) then 1 else 0) != 0;
{
  var v0:int;
  var v1:int;
  var v2:bool;
  var v3:bool;
  var v4:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v0 := BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(group_id_y, num_groups_x), group_id_x), group_size_x), local_id_x);
  assert {:sourceloc} {:sourceloc_num 3} true;
  v1 := $$voxelOccupied[v0];
  v2 := v1 != 0;
  goto $truebb, $falsebb;
$1:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  v3 := BV32_ULT(v0, $numVoxels);
  goto $truebb0, $falsebb0;
$2:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  assert {:sourceloc} {:sourceloc_num 6} true;
  v4 := $$voxelOccupiedScan[v0];
  assert {:sourceloc} {:sourceloc_num 7} true;
  $$compactedVoxelArray[v4] := v0;
  goto $3;
$3:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  return;
$truebb:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  goto $1;
$falsebb:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  goto $3;
$truebb0:
  assume {:partition} v3;
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  goto $2;
$falsebb0:
  assume {:partition} !v3;
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  goto $3;
}
axiom (if group_size_x == 128 then 1 else 0) != 0;
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_x == 256 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
