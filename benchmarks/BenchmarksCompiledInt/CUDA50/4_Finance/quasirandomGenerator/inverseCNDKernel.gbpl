type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "d_Output"} {:global} $$d_Output : [int]int;
axiom {:array_info "$$d_Output"} {:global} {:elem_width 32} {:source_name "d_Output"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_Output : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_Output : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_Output : bool;
const $arrayId$$d_Output : arrayId;
axiom $arrayId$$d_Output == 1bv2;

var {:source_name "d_Input"} {:global} $$d_Input : [int]int;
axiom {:array_info "$$d_Input"} {:global} {:elem_width 32} {:source_name "d_Input"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_Input : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_Input : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_Input : bool;
const $arrayId$$d_Input : arrayId;
axiom $arrayId$$d_Input == 2bv2;

type ptr = bv32;
type arrayId = bv2;

function {:inline true} MKPTR(base: arrayId, offset: int) : ptr {
  base ++ offset[30:0]
}

function {:inline true} base#MKPTR(p: ptr) : arrayId {
  p[32:30]
}

function {:inline true} offset#MKPTR(p : ptr) : bv32 {
  0bv2++p[30:0]
}

const $arrayId$$null$ : arrayId;
axiom $arrayId$$null$ == 0bv2;

const _WATCHED_OFFSET : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function BV_EXTRACT(int, int, int) : int;
function FADD32(int, int) : int;
function FDIV32(int, int) : int;
function FLT32(int, int) : bool;
function FMUL32(int, int) : int;
function FSUB32(int, int) : int;
function UI32_TO_FP32(int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_UDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_ULT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV32_ZEXT64(x : int) : int {
  x
}
function {:inline true} BV64_SUB(x : int, y : int) : int {
  x - y
}
function {:inline true} BV64_UGE(x : int, y : int) : bool {
  x >= y
}
procedure {:source_name "inverseCNDKernel"} {:kernel} $_Z16inverseCNDKernelPfPjj($pathN:int)
{
  var $pos.0:int;
  var $negate.i21.0:int;
  var $.0:int;
  var $z.i20.0:int;
  var $0:int;
  var $pos1.0:int;
  var $.01:int;
  var $negate.i.0:int;
  var $z.i.0:int;
  var $1:int;
  var v3:bool;
  var v1:int;
  var v0:int;
  var v2:bool;
  var v4:int;
  var v5:bool;
  var v6:int;
  var v7:int;
  var v8:bool;
  var v9:int;
  var v10:int;
  var v11:int;
  var v12:bool;
  var v13:bool;
  var v14:int;
  var v15:bool;
  var v16:int;
  var v17:int;
  var v18:bool;
  var v19:int;
  var v20:int;
  var v21:int;
  var v22:bool;
$0:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  v0 := BV32_ADD(BV32_MUL(group_size_x, group_id_x), local_id_x);
  v1 := BV32_MUL(group_size_x, num_groups_x);
  v2 := MKPTR($arrayId$$d_Input, 0) != MKPTR($arrayId$$null$, 0);
  goto $truebb, $falsebb;
$1:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  $pos.0 := v0;
  goto $2;
$2:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v3 := BV32_ULT($pos.0, $pathN);
  goto $truebb0, $falsebb0;
$3:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  assert {:sourceloc} {:sourceloc_num 4} true;
  v4 := $$d_Input[$pos.0];
  v5 := BV64_UGE(BV32_ZEXT64(v4), 2147483648);
  goto $truebb1, $falsebb1;
$4:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  $negate.i21.0, $.0 := 1, BV_EXTRACT(BV64_SUB(4294967295, BV32_ZEXT64(v4)), 32, 0);
  goto $5;
$5:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  v6 := FADD32(FMUL32(UI32_TO_FP32($.0), 796917760), 788529152);
  v7 := FSUB32(v6, 1056964608);
  v8 := FLT32(-1093203395, v7);
  goto $truebb2, $falsebb2;
$6:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  v9 := FMUL32(v7, v7);
  $z.i20.0 := FDIV32(FMUL32(v7, FADD32(FMUL32(FADD32(FMUL32(FADD32(FMUL32(-1043626165, v9), 1109758102), v9), -1047204987), v9), 1075866777)), FADD32(FMUL32(FADD32(FMUL32(FADD32(FMUL32(FADD32(FMUL32(1078484865, v9), -1045921928), v9), 1102621373), v9), -1056468096), v9), 1065353216));
  goto $8;
$7:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  call {:sourceloc_num 9}   v10 := $__logf(v6);
  call {:sourceloc_num 10}   v11 := $__logf(FSUB32(-2147483648, v10));
  $z.i20.0 := FSUB32(-2147483648, FADD32(1051511190, FMUL32(v11, FADD32(1064953398, FMUL32(v11, FADD32(1042589753, FMUL32(v11, FADD32(1021474156, FMUL32(v11, FADD32(997962271, FMUL32(v11, FADD32(969879925, FMUL32(v11, FADD32(939980176, FMUL32(v11, FADD32(882577068, FMUL32(v11, 886349352)))))))))))))))));
  goto $8;
$8:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  v12 := BV_EXTRACT($negate.i21.0, 1, 0) == 1;
  goto $truebb3, $falsebb3;
$9:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  $0 := FSUB32(-2147483648, $z.i20.0);
  goto $_ZL13MoroInvCNDgpuj.exit26;
$10:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  $0 := $z.i20.0;
  goto $_ZL13MoroInvCNDgpuj.exit26;
$_ZL13MoroInvCNDgpuj.exit26:
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  assert {:sourceloc} {:sourceloc_num 15} true;
  $$d_Output[$pos.0] := $0;
  goto $11;
$11:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  $pos.0 := BV32_ADD($pos.0, v1);
  goto $2;
$12:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  goto $25;
$13:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  $pos1.0 := v0;
  goto $14;
$14:
  assert {:block_sourceloc} {:sourceloc_num 19} true;
  v13 := BV32_ULT($pos1.0, $pathN);
  goto $truebb4, $falsebb4;
$15:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  v14 := BV32_MUL(BV32_ADD($pos1.0, 1), BV32_UDIV(-1, BV32_ADD($pathN, 1)));
  v15 := BV64_UGE(BV32_ZEXT64(v14), 2147483648);
  goto $truebb5, $falsebb5;
$16:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  $.01, $negate.i.0 := BV_EXTRACT(BV64_SUB(4294967295, BV32_ZEXT64(v14)), 32, 0), 1;
  goto $17;
$17:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  v16 := FADD32(FMUL32(UI32_TO_FP32($.01), 796917760), 788529152);
  v17 := FSUB32(v16, 1056964608);
  v18 := FLT32(-1093203395, v17);
  goto $truebb6, $falsebb6;
$18:
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  v19 := FMUL32(v17, v17);
  $z.i.0 := FDIV32(FMUL32(v17, FADD32(FMUL32(FADD32(FMUL32(FADD32(FMUL32(-1043626165, v19), 1109758102), v19), -1047204987), v19), 1075866777)), FADD32(FMUL32(FADD32(FMUL32(FADD32(FMUL32(FADD32(FMUL32(1078484865, v19), -1045921928), v19), 1102621373), v19), -1056468096), v19), 1065353216));
  goto $20;
$19:
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  call {:sourceloc_num 25}   v20 := $__logf(v16);
  call {:sourceloc_num 26}   v21 := $__logf(FSUB32(-2147483648, v20));
  $z.i.0 := FSUB32(-2147483648, FADD32(1051511190, FMUL32(v21, FADD32(1064953398, FMUL32(v21, FADD32(1042589753, FMUL32(v21, FADD32(1021474156, FMUL32(v21, FADD32(997962271, FMUL32(v21, FADD32(969879925, FMUL32(v21, FADD32(939980176, FMUL32(v21, FADD32(882577068, FMUL32(v21, 886349352)))))))))))))))));
  goto $20;
$20:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  v22 := BV_EXTRACT($negate.i.0, 1, 0) == 1;
  goto $truebb7, $falsebb7;
$21:
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  $1 := FSUB32(-2147483648, $z.i.0);
  goto $_ZL13MoroInvCNDgpuj.exit;
$22:
  assert {:block_sourceloc} {:sourceloc_num 29} true;
  $1 := $z.i.0;
  goto $_ZL13MoroInvCNDgpuj.exit;
$_ZL13MoroInvCNDgpuj.exit:
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  assert {:sourceloc} {:sourceloc_num 31} true;
  $$d_Output[$pos1.0] := $1;
  goto $23;
$23:
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  $pos1.0 := BV32_ADD($pos1.0, v1);
  goto $14;
$24:
  assert {:block_sourceloc} true;
  goto $25;
$25:
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  return;
$truebb:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  goto $1;
$falsebb:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  goto $13;
$truebb0:
  assume {:partition} v3;
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  goto $3;
$falsebb0:
  assume {:partition} !v3;
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  goto $12;
$truebb1:
  assume {:partition} v5;
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  goto $4;
$falsebb1:
  assume {:partition} !v5;
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  $negate.i21.0, $.0 := 0, v4;
  goto $5;
$truebb2:
  assume {:partition} v8;
  assert {:block_sourceloc} {:sourceloc_num 40} true;
  goto $6;
$falsebb2:
  assume {:partition} !v8;
  assert {:block_sourceloc} {:sourceloc_num 41} true;
  goto $7;
$truebb3:
  assume {:partition} v12;
  assert {:block_sourceloc} {:sourceloc_num 42} true;
  goto $9;
$falsebb3:
  assume {:partition} !v12;
  assert {:block_sourceloc} {:sourceloc_num 43} true;
  goto $10;
$truebb4:
  assume {:partition} v13;
  assert {:block_sourceloc} {:sourceloc_num 44} true;
  goto $15;
$falsebb4:
  assume {:partition} !v13;
  assert {:block_sourceloc} {:sourceloc_num 45} true;
  goto $24;
$truebb5:
  assume {:partition} v15;
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  goto $16;
$falsebb5:
  assume {:partition} !v15;
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  $.01, $negate.i.0 := v14, 0;
  goto $17;
$truebb6:
  assume {:partition} v18;
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  goto $18;
$falsebb6:
  assume {:partition} !v18;
  assert {:block_sourceloc} {:sourceloc_num 49} true;
  goto $19;
$truebb7:
  assume {:partition} v22;
  assert {:block_sourceloc} {:sourceloc_num 50} true;
  goto $21;
$falsebb7:
  assume {:partition} !v22;
  assert {:block_sourceloc} {:sourceloc_num 51} true;
  goto $22;
}
procedure {:source_name "__logf"} $__logf($0:int) returns ($ret:int);
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 128 then 1 else 0) != 0;
axiom (if num_groups_x == 128 then 1 else 0) != 0;
