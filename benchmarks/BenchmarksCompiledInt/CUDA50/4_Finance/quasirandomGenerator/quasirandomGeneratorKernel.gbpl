type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "d_Output"} {:global} $$d_Output : [int]int;
axiom {:array_info "$$d_Output"} {:global} {:elem_width 32} {:source_name "d_Output"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_Output : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_Output : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_Output : bool;

var {:source_name "c_Table"} {:constant} $$_ZL7c_Table : [int]int;
axiom {:array_info "$$_ZL7c_Table"} {:constant} {:elem_width 32} {:source_name "c_Table"} {:source_elem_width 32} {:source_dimensions "3,31"} true;

const _WATCHED_OFFSET : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:local_id_y} local_id_y : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function  BV32_LSHR(int, int) : int;
function FMUL32(int, int) : int;
function UI32_TO_FP32(int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_AND(x : int, y : int) : int {
  if x == y then x else (if x == 0 || y == 0 then 0 else BV32_AND_UF(x, y))
}
function BV32_AND_UF(int, int) : int;
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SLT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV32_ULT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV32_XOR(x : int, y : int) : int {
  if x == y then 0 else (if x == 0 then y else (if y == 0 then x else BV32_XOR_UF(x, y)))
}
function BV32_XOR_UF(int, int) : int;
procedure {:source_name "quasirandomGeneratorKernel"} {:kernel} $_Z26quasirandomGeneratorKernelPfjj($seed:int, $N:int)
requires {:sourceloc_num 0} (if $N == 1048576 then 1 else 0) != 0;
{
  var $pos.0:int;
  var $result.0:int;
  var $data.0:int;
  var $bit.0:int;
  var $result.1:int;
  var v0:bool;
  var v1:bool;
  var v2:bool;
  var v3:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  $pos.0 := BV32_ADD(BV32_MUL(group_size_x, group_id_x), local_id_x);
  goto $1;
$1:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v0 := BV32_ULT($pos.0, $N);
  goto $truebb, $falsebb;
$2:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  $result.0, $data.0, $bit.0 := 0, BV32_ADD($seed, $pos.0), 0;
  goto $3;
$3:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  v1 := BV32_SLT($bit.0, 31);
  goto $truebb0, $falsebb0;
$4:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  v2 := BV32_AND($data.0, 1) != 0;
  goto $truebb1, $falsebb1;
$5:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  assert {:sourceloc} {:sourceloc_num 7} true;
  v3 := $$_ZL7c_Table[BV32_ADD(BV32_MUL(local_id_y, 31), $bit.0)];
  $result.1 := BV32_XOR($result.0, v3);
  goto $6;
$6:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  goto $7;
$7:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  $result.0, $data.0, $bit.0 := $result.1, BV32_LSHR($data.0, 1), BV32_ADD($bit.0, 1);
  goto $3;
$8:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  assert {:sourceloc} {:sourceloc_num 11} true;
  $$d_Output[BV32_ADD(BV32_MUL(local_id_y, $N), $pos.0)] := FMUL32(UI32_TO_FP32(BV32_ADD($result.0, 1)), 805306368);
  goto $9;
$9:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  $pos.0 := BV32_ADD($pos.0, BV32_MUL(group_size_x, num_groups_x));
  goto $1;
$10:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  return;
$truebb:
  assume {:partition} v0;
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  goto $2;
$falsebb:
  assume {:partition} !v0;
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  goto $10;
$truebb0:
  assume {:partition} v1;
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  goto $4;
$falsebb0:
  assume {:partition} !v1;
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  goto $8;
$truebb1:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  goto $5;
$falsebb1:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 19} true;
  $result.1 := $result.0;
  goto $6;
}
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 128 then 1 else 0) != 0;
axiom (if group_size_y == 3 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_x == 128 then 1 else 0) != 0;
