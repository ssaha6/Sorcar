type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "rngState"} {:global} $$rngState : [int]int;
axiom {:array_info "$$rngState"} {:global} {:elem_width 32} {:source_name "rngState"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$rngState : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$rngState : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$rngState : bool;

const _WATCHED_OFFSET : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
procedure {:source_name "rngSetupStates"} {:kernel} $_Z14rngSetupStatesP17curandStateXORWOWyy($seed:int, $offset:int)
{
  var v0:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  call {:sourceloc_num 1}   v0 := $_Z19__bugle_random_uintv();
  assert {:sourceloc} {:sourceloc_num 2} true;
  $$rngState[BV32_ADD(local_id_x, BV32_MUL(group_id_x, group_size_x))] := v0;
  return;
}
procedure {:source_name "_Z19__bugle_random_uintv"} $_Z19__bugle_random_uintv() returns ($ret:int);
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 256 then 1 else 0) != 0;
axiom (if num_groups_x == 256 then 1 else 0) != 0;
