type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
procedure _ATOMIC_OP8(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "od"} {:global} $$od : [int]int;
axiom {:array_info "$$od"} {:global} {:elem_width 32} {:source_name "od"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$od : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$od : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$od : bool;

var {:source_name ""} $$0 : [int]int;
axiom {:array_info "$$0"} {:elem_width 8} {:source_name ""} {:source_elem_width 96} {:source_dimensions "1"} true;

var {:source_name ""} $$1 : [int]int;
axiom {:array_info "$$1"} {:elem_width 8} {:source_name ""} {:source_elem_width 96} {:source_dimensions "1"} true;

var {:source_name ""} $$2 : [int]int;
axiom {:array_info "$$2"} {:elem_width 8} {:source_name ""} {:source_elem_width 96} {:source_dimensions "1"} true;

var {:source_name "tex"} {:global} $$tex : [int]int;
axiom {:array_info "$$tex"} {:global} {:elem_width 8} {:source_name "tex"} {:source_elem_width 96} {:source_dimensions "1"} true;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 96} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$tex : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 96} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$tex : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 96} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$tex : bool;

const _WATCHED_OFFSET : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function BV_CONCAT(int, int) : int;
function FADD32(int, int) : int;
function FDIV32(int, int) : int;
function FMUL32(int, int) : int;
function FSUB32(int, int) : int;
function SI32_TO_FP32(int) : int;
function UI32_TO_FP32(int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SHL(x : int, y : int) : int {
  if x >= 0 && y == 1 then x*2 else BV32_SHL_UF(x,y)
}
function BV32_SHL_UF(int, int) : int;
function {:inline true} BV32_SLE(x : int, y : int) : bool {
  x <= y
}
function {:inline true} BV32_SLT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV32_SUB(x : int, y : int) : int {
  x - y
}
procedure {:source_name "d_boxfilter_y_tex"} {:kernel} $_Z17d_boxfilter_y_texPfiii($w:int, $h:int, $r:int)
requires {:sourceloc_num 0} (if $w == 1024 then 1 else 0) != 0;
requires {:sourceloc_num 1} (if $h == 1024 then 1 else 0) != 0;
{
  var $t.0:int;
  var $y.0:int;
  var $t.1:int;
  var $y1.0:int;
  var v0:int;
  var v1:int;
  var v2:bool;
  var v3:int;
  var v4:int;
  var v5:int;
  var v6:int;
  var v11:int;
  var v7:int;
  var v8:int;
  var v9:int;
  var v10:int;
  var v12:int;
  var v13:int;
  var v14:int;
  var v15:int;
  var v16:int;
  var v17:int;
  var v18:int;
  var v19:int;
  var v20:int;
  var v21:int;
  var v22:int;
  var v23:int;
  var v24:int;
  var v25:int;
  var v26:int;
  var v27:int;
  var v28:bool;
  var v29:int;
  var v30:int;
  var v31:int;
  var v32:int;
  var v37:int;
  var v33:int;
  var v34:int;
  var v35:int;
  var v36:int;
  var v38:int;
  var v39:int;
  var v40:int;
  var v41:int;
  var v42:int;
  var v43:int;
  var v44:int;
  var v64:int;
  var v65:int;
  var v45:int;
  var v46:int;
  var v47:int;
  var v48:int;
  var v49:int;
  var v50:int;
  var v51:int;
  var v52:int;
  var v53:int;
  var v63:int;
  var v54:int;
  var v55:int;
  var v56:int;
  var v57:int;
  var v58:int;
  var v59:int;
  var v60:int;
  var v61:int;
  var v62:int;
  var v66:int;
  var v67:int;
  var v68:int;
  var v69:int;
  var v70:int;
  var v71:int;
  var v72:int;
  var v73:int;
  var v74:int;
  var v75:int;
  var v76:int;
  var v77:int;
  var v78:int;
  var v79:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v0 := FDIV32(1065353216, SI32_TO_FP32(BV32_ADD(BV32_SHL($r, 1), 1)));
  v1 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  $t.0, $y.0 := 0, BV32_SUB(0, $r);
  goto $1;
$1:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  v2 := BV32_SLE($y.0, $r);
  goto $truebb, $falsebb;
$2:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  assert {:sourceloc} {:sourceloc_num 5} true;
  v3 := $$tex[0];
  assert {:sourceloc} {:sourceloc_num 6} true;
  $$0[0] := v3;
  assert {:sourceloc} {:sourceloc_num 7} true;
  v4 := $$tex[1];
  assert {:sourceloc} {:sourceloc_num 8} true;
  $$0[1] := v4;
  assert {:sourceloc} {:sourceloc_num 9} true;
  v5 := $$tex[2];
  assert {:sourceloc} {:sourceloc_num 10} true;
  $$0[2] := v5;
  assert {:sourceloc} {:sourceloc_num 11} true;
  v6 := $$tex[3];
  assert {:sourceloc} {:sourceloc_num 12} true;
  $$0[3] := v6;
  assert {:sourceloc} {:sourceloc_num 13} true;
  v7 := $$tex[4];
  assert {:sourceloc} {:sourceloc_num 14} true;
  $$0[4] := v7;
  assert {:sourceloc} {:sourceloc_num 15} true;
  v8 := $$tex[5];
  assert {:sourceloc} {:sourceloc_num 16} true;
  $$0[5] := v8;
  assert {:sourceloc} {:sourceloc_num 17} true;
  v9 := $$tex[6];
  assert {:sourceloc} {:sourceloc_num 18} true;
  $$0[6] := v9;
  assert {:sourceloc} {:sourceloc_num 19} true;
  v10 := $$tex[7];
  assert {:sourceloc} {:sourceloc_num 20} true;
  $$0[7] := v10;
  assert {:sourceloc} {:sourceloc_num 21} true;
  v11 := $$tex[8];
  assert {:sourceloc} {:sourceloc_num 22} true;
  $$0[8] := v11;
  assert {:sourceloc} {:sourceloc_num 23} true;
  v12 := $$tex[9];
  assert {:sourceloc} {:sourceloc_num 24} true;
  $$0[9] := v12;
  assert {:sourceloc} {:sourceloc_num 25} true;
  v13 := $$tex[10];
  assert {:sourceloc} {:sourceloc_num 26} true;
  $$0[10] := v13;
  assert {:sourceloc} {:sourceloc_num 27} true;
  v14 := $$tex[11];
  assert {:sourceloc} {:sourceloc_num 28} true;
  $$0[11] := v14;
  assert {:sourceloc} {:sourceloc_num 29} true;
  v15 := $$0[0];
  assert {:sourceloc} {:sourceloc_num 30} true;
  v16 := $$0[1];
  assert {:sourceloc} {:sourceloc_num 31} true;
  v17 := $$0[2];
  assert {:sourceloc} {:sourceloc_num 32} true;
  v18 := $$0[3];
  assert {:sourceloc} {:sourceloc_num 33} true;
  v19 := $$0[4];
  assert {:sourceloc} {:sourceloc_num 34} true;
  v20 := $$0[5];
  assert {:sourceloc} {:sourceloc_num 35} true;
  v21 := $$0[6];
  assert {:sourceloc} {:sourceloc_num 36} true;
  v22 := $$0[7];
  assert {:sourceloc} {:sourceloc_num 37} true;
  v23 := $$0[8];
  assert {:sourceloc} {:sourceloc_num 38} true;
  v24 := $$0[9];
  assert {:sourceloc} {:sourceloc_num 39} true;
  v25 := $$0[10];
  assert {:sourceloc} {:sourceloc_num 40} true;
  v26 := $$0[11];
  call {:sourceloc_num 41}   v27 := $_Z5tex2DIfET_7textureIS0_Li2EL19cudaTextureReadMode0EEff(BV_CONCAT(BV_CONCAT(BV_CONCAT(v18, v17), v16), v15), BV_CONCAT(BV_CONCAT(BV_CONCAT(v22, v21), v20), v19), BV_CONCAT(BV_CONCAT(BV_CONCAT(v26, v25), v24), v23), UI32_TO_FP32(v1), SI32_TO_FP32($y.0));
  goto $3;
$3:
  assert {:block_sourceloc} {:sourceloc_num 42} true;
  $t.0, $y.0 := FADD32($t.0, v27), BV32_ADD($y.0, 1);
  goto $1;
$4:
  assert {:block_sourceloc} {:sourceloc_num 43} true;
  assert {:sourceloc} {:sourceloc_num 44} true;
  $$od[v1] := FMUL32($t.0, v0);
  $t.1, $y1.0 := $t.0, 1;
  goto $5;
$5:
  assert {:block_sourceloc} {:sourceloc_num 45} true;
  v28 := BV32_SLT($y1.0, $h);
  goto $truebb0, $falsebb0;
$6:
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  assert {:sourceloc} {:sourceloc_num 47} true;
  v29 := $$tex[0];
  assert {:sourceloc} {:sourceloc_num 48} true;
  $$1[0] := v29;
  assert {:sourceloc} {:sourceloc_num 49} true;
  v30 := $$tex[1];
  assert {:sourceloc} {:sourceloc_num 50} true;
  $$1[1] := v30;
  assert {:sourceloc} {:sourceloc_num 51} true;
  v31 := $$tex[2];
  assert {:sourceloc} {:sourceloc_num 52} true;
  $$1[2] := v31;
  assert {:sourceloc} {:sourceloc_num 53} true;
  v32 := $$tex[3];
  assert {:sourceloc} {:sourceloc_num 54} true;
  $$1[3] := v32;
  assert {:sourceloc} {:sourceloc_num 55} true;
  v33 := $$tex[4];
  assert {:sourceloc} {:sourceloc_num 56} true;
  $$1[4] := v33;
  assert {:sourceloc} {:sourceloc_num 57} true;
  v34 := $$tex[5];
  assert {:sourceloc} {:sourceloc_num 58} true;
  $$1[5] := v34;
  assert {:sourceloc} {:sourceloc_num 59} true;
  v35 := $$tex[6];
  assert {:sourceloc} {:sourceloc_num 60} true;
  $$1[6] := v35;
  assert {:sourceloc} {:sourceloc_num 61} true;
  v36 := $$tex[7];
  assert {:sourceloc} {:sourceloc_num 62} true;
  $$1[7] := v36;
  assert {:sourceloc} {:sourceloc_num 63} true;
  v37 := $$tex[8];
  assert {:sourceloc} {:sourceloc_num 64} true;
  $$1[8] := v37;
  assert {:sourceloc} {:sourceloc_num 65} true;
  v38 := $$tex[9];
  assert {:sourceloc} {:sourceloc_num 66} true;
  $$1[9] := v38;
  assert {:sourceloc} {:sourceloc_num 67} true;
  v39 := $$tex[10];
  assert {:sourceloc} {:sourceloc_num 68} true;
  $$1[10] := v39;
  assert {:sourceloc} {:sourceloc_num 69} true;
  v40 := $$tex[11];
  assert {:sourceloc} {:sourceloc_num 70} true;
  $$1[11] := v40;
  assert {:sourceloc} {:sourceloc_num 71} true;
  v41 := $$1[0];
  assert {:sourceloc} {:sourceloc_num 72} true;
  v42 := $$1[1];
  assert {:sourceloc} {:sourceloc_num 73} true;
  v43 := $$1[2];
  assert {:sourceloc} {:sourceloc_num 74} true;
  v44 := $$1[3];
  assert {:sourceloc} {:sourceloc_num 75} true;
  v45 := $$1[4];
  assert {:sourceloc} {:sourceloc_num 76} true;
  v46 := $$1[5];
  assert {:sourceloc} {:sourceloc_num 77} true;
  v47 := $$1[6];
  assert {:sourceloc} {:sourceloc_num 78} true;
  v48 := $$1[7];
  assert {:sourceloc} {:sourceloc_num 79} true;
  v49 := $$1[8];
  assert {:sourceloc} {:sourceloc_num 80} true;
  v50 := $$1[9];
  assert {:sourceloc} {:sourceloc_num 81} true;
  v51 := $$1[10];
  assert {:sourceloc} {:sourceloc_num 82} true;
  v52 := $$1[11];
  call {:sourceloc_num 83}   v53 := $_Z5tex2DIfET_7textureIS0_Li2EL19cudaTextureReadMode0EEff(BV_CONCAT(BV_CONCAT(BV_CONCAT(v44, v43), v42), v41), BV_CONCAT(BV_CONCAT(BV_CONCAT(v48, v47), v46), v45), BV_CONCAT(BV_CONCAT(BV_CONCAT(v52, v51), v50), v49), UI32_TO_FP32(v1), SI32_TO_FP32(BV32_ADD($y1.0, $r)));
  assert {:sourceloc} {:sourceloc_num 84} true;
  v54 := $$tex[0];
  assert {:sourceloc} {:sourceloc_num 85} true;
  $$2[0] := v54;
  assert {:sourceloc} {:sourceloc_num 86} true;
  v55 := $$tex[1];
  assert {:sourceloc} {:sourceloc_num 87} true;
  $$2[1] := v55;
  assert {:sourceloc} {:sourceloc_num 88} true;
  v56 := $$tex[2];
  assert {:sourceloc} {:sourceloc_num 89} true;
  $$2[2] := v56;
  assert {:sourceloc} {:sourceloc_num 90} true;
  v57 := $$tex[3];
  assert {:sourceloc} {:sourceloc_num 91} true;
  $$2[3] := v57;
  assert {:sourceloc} {:sourceloc_num 92} true;
  v58 := $$tex[4];
  assert {:sourceloc} {:sourceloc_num 93} true;
  $$2[4] := v58;
  assert {:sourceloc} {:sourceloc_num 94} true;
  v59 := $$tex[5];
  assert {:sourceloc} {:sourceloc_num 95} true;
  $$2[5] := v59;
  assert {:sourceloc} {:sourceloc_num 96} true;
  v60 := $$tex[6];
  assert {:sourceloc} {:sourceloc_num 97} true;
  $$2[6] := v60;
  assert {:sourceloc} {:sourceloc_num 98} true;
  v61 := $$tex[7];
  assert {:sourceloc} {:sourceloc_num 99} true;
  $$2[7] := v61;
  assert {:sourceloc} {:sourceloc_num 100} true;
  v62 := $$tex[8];
  assert {:sourceloc} {:sourceloc_num 101} true;
  $$2[8] := v62;
  assert {:sourceloc} {:sourceloc_num 102} true;
  v63 := $$tex[9];
  assert {:sourceloc} {:sourceloc_num 103} true;
  $$2[9] := v63;
  assert {:sourceloc} {:sourceloc_num 104} true;
  v64 := $$tex[10];
  assert {:sourceloc} {:sourceloc_num 105} true;
  $$2[10] := v64;
  assert {:sourceloc} {:sourceloc_num 106} true;
  v65 := $$tex[11];
  assert {:sourceloc} {:sourceloc_num 107} true;
  $$2[11] := v65;
  assert {:sourceloc} {:sourceloc_num 108} true;
  v66 := $$2[0];
  assert {:sourceloc} {:sourceloc_num 109} true;
  v67 := $$2[1];
  assert {:sourceloc} {:sourceloc_num 110} true;
  v68 := $$2[2];
  assert {:sourceloc} {:sourceloc_num 111} true;
  v69 := $$2[3];
  assert {:sourceloc} {:sourceloc_num 112} true;
  v70 := $$2[4];
  assert {:sourceloc} {:sourceloc_num 113} true;
  v71 := $$2[5];
  assert {:sourceloc} {:sourceloc_num 114} true;
  v72 := $$2[6];
  assert {:sourceloc} {:sourceloc_num 115} true;
  v73 := $$2[7];
  assert {:sourceloc} {:sourceloc_num 116} true;
  v74 := $$2[8];
  assert {:sourceloc} {:sourceloc_num 117} true;
  v75 := $$2[9];
  assert {:sourceloc} {:sourceloc_num 118} true;
  v76 := $$2[10];
  assert {:sourceloc} {:sourceloc_num 119} true;
  v77 := $$2[11];
  call {:sourceloc_num 120}   v78 := $_Z5tex2DIfET_7textureIS0_Li2EL19cudaTextureReadMode0EEff(BV_CONCAT(BV_CONCAT(BV_CONCAT(v69, v68), v67), v66), BV_CONCAT(BV_CONCAT(BV_CONCAT(v73, v72), v71), v70), BV_CONCAT(BV_CONCAT(BV_CONCAT(v77, v76), v75), v74), UI32_TO_FP32(v1), SI32_TO_FP32(BV32_SUB(BV32_SUB($y1.0, $r), 1)));
  v79 := FSUB32(FADD32($t.1, v53), v78);
  assert {:sourceloc} {:sourceloc_num 121} true;
  $$od[BV32_ADD(BV32_MUL($y1.0, $w), v1)] := FMUL32(v79, v0);
  goto $7;
$7:
  assert {:block_sourceloc} {:sourceloc_num 122} true;
  $t.1, $y1.0 := v79, BV32_ADD($y1.0, 1);
  goto $5;
$8:
  assert {:block_sourceloc} {:sourceloc_num 123} true;
  return;
$truebb:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 124} true;
  goto $2;
$falsebb:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 125} true;
  goto $4;
$truebb0:
  assume {:partition} v28;
  assert {:block_sourceloc} {:sourceloc_num 126} true;
  goto $6;
$falsebb0:
  assume {:partition} !v28;
  assert {:block_sourceloc} {:sourceloc_num 127} true;
  goto $8;
}
procedure {:source_name "_Z5tex2DIfET_7textureIS0_Li2EL19cudaTextureReadMode0EEff"} $_Z5tex2DIfET_7textureIS0_Li2EL19cudaTextureReadMode0EEff($0:int, $1:int, $2:int, $3:int, $4:int) returns ($ret:int);
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 64 then 1 else 0) != 0;
axiom (if num_groups_x == 16 then 1 else 0) != 0;
