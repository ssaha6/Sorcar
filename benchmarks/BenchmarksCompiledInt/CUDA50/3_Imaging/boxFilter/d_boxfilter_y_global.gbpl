type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "id"} {:global} $$id : [int]int;
axiom {:array_info "$$id"} {:global} {:elem_width 32} {:source_name "id"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$id : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$id : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$id : bool;

var {:source_name "od"} {:global} $$od : [int]int;
axiom {:array_info "$$od"} {:global} {:elem_width 32} {:source_name "od"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$od : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$od : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$od : bool;

const _WATCHED_OFFSET : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function FADD32(int, int) : int;
function FDIV32(int, int) : int;
function FMUL32(int, int) : int;
function FSUB32(int, int) : int;
function SI32_TO_FP32(int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SHL(x : int, y : int) : int {
  if x >= 0 && y == 1 then x*2 else BV32_SHL_UF(x,y)
}
function BV32_SHL_UF(int, int) : int;
function {:inline true} BV32_SLT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV32_SUB(x : int, y : int) : int {
  x - y
}
procedure {:source_name "d_boxfilter_y_global"} {:kernel} $_Z20d_boxfilter_y_globalPfS_iii($w:int, $h:int, $r:int)
requires {:sourceloc_num 0} (if $w == 1024 then 1 else 0) != 0;
requires {:sourceloc_num 1} (if $h == 1024 then 1 else 0) != 0;
requires {:sourceloc_num 2} (if $r == 14 then 1 else 0) != 0;
{
  var $t.i.0:int;
  var $y.i.0:int;
  var $t.i.1:int;
  var $y1.i.0:int;
  var $t.i.2:int;
  var $y2.i.0:int;
  var $t.i.3:int;
  var $y3.i.0:int;
  var v0:int;
  var v1:int;
  var v2:int;
  var v3:bool;
  var v4:int;
  var v5:bool;
  var v6:int;
  var v7:int;
  var v8:int;
  var v9:bool;
  var v10:int;
  var v11:int;
  var v12:int;
  var v13:bool;
  var v14:int;
  var v15:int;
  var v16:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  v1 := FDIV32(1065353216, SI32_TO_FP32(BV32_ADD(BV32_SHL($r, 1), 1)));
  assert {:sourceloc} {:sourceloc_num 4} true;
  v2 := $$id[v0];
  $t.i.0, $y.i.0 := FMUL32(v2, SI32_TO_FP32($r)), 0;
  goto $1;
$1:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  v3 := BV32_SLT($y.i.0, BV32_ADD($r, 1));
  goto $truebb, $falsebb;
$2:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  assert {:sourceloc} {:sourceloc_num 7} true;
  v4 := $$id[BV32_ADD(v0, BV32_MUL($y.i.0, $w))];
  $t.i.0, $y.i.0 := FADD32($t.i.0, v4), BV32_ADD($y.i.0, 1);
  goto $1;
$3:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  assert {:sourceloc} {:sourceloc_num 9} true;
  $$od[v0] := FMUL32($t.i.0, v1);
  $t.i.1, $y1.i.0 := $t.i.0, 1;
  goto $4;
$4:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  v5 := BV32_SLT($y1.i.0, BV32_ADD($r, 1));
  goto $truebb0, $falsebb0;
$5:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  assert {:sourceloc} {:sourceloc_num 12} true;
  v6 := $$id[BV32_ADD(v0, BV32_MUL(BV32_ADD($y1.i.0, $r), $w))];
  assert {:sourceloc} {:sourceloc_num 13} true;
  v7 := $$id[v0];
  v8 := FSUB32(FADD32($t.i.1, v6), v7);
  assert {:sourceloc} {:sourceloc_num 14} true;
  $$od[BV32_ADD(v0, BV32_MUL($y1.i.0, $w))] := FMUL32(v8, v1);
  $t.i.1, $y1.i.0 := v8, BV32_ADD($y1.i.0, 1);
  goto $4;
$6:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  $t.i.2, $y2.i.0 := $t.i.1, BV32_ADD($r, 1);
  goto $7;
$7:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  v9 := BV32_SLT($y2.i.0, BV32_SUB($h, $r));
  goto $truebb1, $falsebb1;
$8:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  assert {:sourceloc} {:sourceloc_num 18} true;
  v10 := $$id[BV32_ADD(v0, BV32_MUL(BV32_ADD($y2.i.0, $r), $w))];
  assert {:sourceloc} {:sourceloc_num 19} true;
  v11 := $$id[BV32_ADD(v0, BV32_SUB(BV32_MUL(BV32_SUB($y2.i.0, $r), $w), $w))];
  v12 := FSUB32(FADD32($t.i.2, v10), v11);
  assert {:sourceloc} {:sourceloc_num 20} true;
  $$od[BV32_ADD(v0, BV32_MUL($y2.i.0, $w))] := FMUL32(v12, v1);
  $t.i.2, $y2.i.0 := v12, BV32_ADD($y2.i.0, 1);
  goto $7;
$9:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  $t.i.3, $y3.i.0 := $t.i.2, BV32_SUB($h, $r);
  goto $10;
$10:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  v13 := BV32_SLT($y3.i.0, $h);
  goto $truebb2, $falsebb2;
$11:
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  assert {:sourceloc} {:sourceloc_num 24} true;
  v14 := $$id[BV32_ADD(v0, BV32_MUL(BV32_SUB($h, 1), $w))];
  assert {:sourceloc} {:sourceloc_num 25} true;
  v15 := $$id[BV32_ADD(v0, BV32_SUB(BV32_MUL(BV32_SUB($y3.i.0, $r), $w), $w))];
  v16 := FSUB32(FADD32($t.i.3, v14), v15);
  assert {:sourceloc} {:sourceloc_num 26} true;
  $$od[BV32_ADD(v0, BV32_MUL($y3.i.0, $w))] := FMUL32(v16, v1);
  $t.i.3, $y3.i.0 := v16, BV32_ADD($y3.i.0, 1);
  goto $10;
$_ZL13d_boxfilter_yPfS_iii.exit:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  return;
$truebb:
  assume {:partition} v3;
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  goto $2;
$falsebb:
  assume {:partition} !v3;
  assert {:block_sourceloc} {:sourceloc_num 29} true;
  goto $3;
$truebb0:
  assume {:partition} v5;
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  goto $5;
$falsebb0:
  assume {:partition} !v5;
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  goto $6;
$truebb1:
  assume {:partition} v9;
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  goto $8;
$falsebb1:
  assume {:partition} !v9;
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  goto $9;
$truebb2:
  assume {:partition} v13;
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  goto $11;
$falsebb2:
  assume {:partition} !v13;
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  goto $_ZL13d_boxfilter_yPfS_iii.exit;
}
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 64 then 1 else 0) != 0;
axiom (if num_groups_x == 16 then 1 else 0) != 0;
