type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
procedure _ATOMIC_OP8(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "d_PartialHistograms"} {:global} $$d_PartialHistograms : [int]int;
axiom {:array_info "$$d_PartialHistograms"} {:global} {:elem_width 32} {:source_name "d_PartialHistograms"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_PartialHistograms : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_PartialHistograms : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_PartialHistograms : bool;

var {:source_name "d_Data"} {:global} $$d_Data : [int]int;
axiom {:array_info "$$d_Data"} {:global} {:elem_width 32} {:source_name "d_Data"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_Data : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_Data : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_Data : bool;

var {:source_name "data"} $$data : [int]int;
axiom {:array_info "$$data"} {:elem_width 32} {:source_name "data"} {:source_elem_width 128} {:source_dimensions "1"} true;

var {:source_name "s_Hist"} {:group_shared} $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist : [int]int;
axiom {:array_info "$$_ZZ17histogram64KernelPjP5uint4jE6s_Hist"} {:group_shared} {:elem_width 8} {:source_name "s_Hist"} {:source_elem_width 8} {:source_dimensions "4096"} true;
var {:race_checking} {:group_shared} {:elem_width 8} {:source_elem_width 8} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ17histogram64KernelPjP5uint4jE6s_Hist : bool;
var {:race_checking} {:group_shared} {:elem_width 8} {:source_elem_width 8} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ17histogram64KernelPjP5uint4jE6s_Hist : bool;
var {:race_checking} {:group_shared} {:elem_width 8} {:source_elem_width 8} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ17histogram64KernelPjP5uint4jE6s_Hist : bool;

const _WATCHED_OFFSET : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function  BV32_LSHR(int, int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_AND(x : int, y : int) : int {
  if x == y then x else (if x == 0 || y == 0 then 0 else BV32_AND_UF(x, y))
}
function BV32_AND_UF(int, int) : int;
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_OR(x : int, y : int) : int {
  if x == y then x else (if x == 0 then y else (if y == 0 then x else BV32_OR_UF(x, y)))
}
function BV32_OR_UF(int, int) : int;
function {:inline true} BV32_SHL(x : int, y : int) : int {
  if x >= 0 && y == 1 then x*2 else BV32_SHL_UF(x,y)
}
function BV32_SHL_UF(int, int) : int;
function {:inline true} BV32_SUB(x : int, y : int) : int {
  x - y
}
function {:inline true} BV32_UDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_ULT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV32_UREM(x : int, y : int) : int {
  x mod y
}
function {:inline true} BV8_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV8_ZEXT32(x : int) : int {
  x
}
procedure {:source_name "histogram64Kernel"} {:kernel} $_Z17histogram64KernelPjP5uint4j($dataCount:int)
{
  var $i.0:int;
  var $pos.0:int;
  var $sum.0:int;
  var $pos1.0:int;
  var $i2.0:int;
  var v0:int;
  var v1:bool;
  var v2:bool;
  var v3:int;
  var v4:int;
  var v5:int;
  var v6:int;
  var v7:int;
  var v8:int;
  var v9:int;
  var v10:int;
  var v11:int;
  var v12:int;
  var v13:int;
  var v14:int;
  var v15:int;
  var v16:int;
  var v17:int;
  var v18:int;
  var v19:int;
  var v20:int;
  var v21:int;
  var v22:int;
  var v23:int;
  var v24:int;
  var v25:int;
  var v26:int;
  var v27:bool;
  var v28:int;
  var v29:bool;
  var v30:int;
  var v31:int;
  var v32:int;
  var v33:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  v0 := BV32_OR(BV32_OR(BV32_SHL(BV32_AND(local_id_x, -64), 0), BV32_SHL(BV32_AND(local_id_x, 15), 2)), BV32_LSHR(BV32_AND(local_id_x, 48), 4));
  $i.0 := 0;
  goto $1;
$1:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  v1 := BV32_ULT($i.0, 16);
  goto $truebb, $falsebb;
$2:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  assert {:sourceloc} {:sourceloc_num 3} true;
  $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_MUL(BV32_ADD(local_id_x, BV32_MUL($i.0, 64)), 4)] := 0;
  assert {:sourceloc} {:sourceloc_num 4} true;
  $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(BV32_MUL(BV32_ADD(local_id_x, BV32_MUL($i.0, 64)), 4), 1)] := 0;
  assert {:sourceloc} {:sourceloc_num 5} true;
  $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(BV32_MUL(BV32_ADD(local_id_x, BV32_MUL($i.0, 64)), 4), 2)] := 0;
  assert {:sourceloc} {:sourceloc_num 6} true;
  $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(BV32_MUL(BV32_ADD(local_id_x, BV32_MUL($i.0, 64)), 4), 3)] := 0;
  goto $3;
$3:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  $i.0 := BV32_ADD($i.0, 1);
  goto $1;
$4:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  call {:sourceloc_num 9} $bugle_barrier(-1, -1);
  $pos.0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  goto $5;
$5:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 11} (if (_WRITE_HAS_OCCURRED_$$_ZZ17histogram64KernelPjP5uint4jE6s_Hist ==> BV32_UREM(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 1), v0), 64) == 0) then 1 else 0) != 0;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 12} (if (_READ_HAS_OCCURRED_$$_ZZ17histogram64KernelPjP5uint4jE6s_Hist ==> BV32_UREM(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 1), v0), 64) == 0) then 1 else 0) != 0;
  v2 := BV32_ULT($pos.0, $dataCount);
  goto $truebb0, $falsebb0;
$6:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  assert {:sourceloc} {:sourceloc_num 14} true;
  v3 := $$d_Data[BV32_MUL($pos.0, 4)];
  assert {:sourceloc} {:sourceloc_num 15} true;
  $$data[0] := v3;
  assert {:sourceloc} {:sourceloc_num 16} true;
  v4 := $$d_Data[BV32_ADD(BV32_MUL($pos.0, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 17} true;
  $$data[1] := v4;
  assert {:sourceloc} {:sourceloc_num 18} true;
  v5 := $$d_Data[BV32_ADD(BV32_MUL($pos.0, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 19} true;
  $$data[2] := v5;
  assert {:sourceloc} {:sourceloc_num 20} true;
  v6 := $$d_Data[BV32_ADD(BV32_MUL($pos.0, 4), 3)];
  assert {:sourceloc} {:sourceloc_num 21} true;
  $$data[3] := v6;
  assert {:sourceloc} {:sourceloc_num 22} true;
  v7 := $$data[0];
  assert {:sourceloc} {:sourceloc_num 23} true;
  v8 := $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v7, 2), 63), 64))];
  assert {:sourceloc} {:sourceloc_num 24} true;
  $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v7, 2), 63), 64))] := BV8_ADD(v8, 1);
  assert {:sourceloc} {:sourceloc_num 25} true;
  v9 := $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v7, 10), 63), 64))];
  assert {:sourceloc} {:sourceloc_num 26} true;
  $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v7, 10), 63), 64))] := BV8_ADD(v9, 1);
  assert {:sourceloc} {:sourceloc_num 27} true;
  v10 := $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v7, 18), 63), 64))];
  assert {:sourceloc} {:sourceloc_num 28} true;
  $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v7, 18), 63), 64))] := BV8_ADD(v10, 1);
  assert {:sourceloc} {:sourceloc_num 29} true;
  v11 := $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v7, 26), 63), 64))];
  assert {:sourceloc} {:sourceloc_num 30} true;
  $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v7, 26), 63), 64))] := BV8_ADD(v11, 1);
  assert {:sourceloc} {:sourceloc_num 31} true;
  v12 := $$data[1];
  assert {:sourceloc} {:sourceloc_num 32} true;
  v13 := $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v12, 2), 63), 64))];
  assert {:sourceloc} {:sourceloc_num 33} true;
  $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v12, 2), 63), 64))] := BV8_ADD(v13, 1);
  assert {:sourceloc} {:sourceloc_num 34} true;
  v14 := $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v12, 10), 63), 64))];
  assert {:sourceloc} {:sourceloc_num 35} true;
  $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v12, 10), 63), 64))] := BV8_ADD(v14, 1);
  assert {:sourceloc} {:sourceloc_num 36} true;
  v15 := $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v12, 18), 63), 64))];
  assert {:sourceloc} {:sourceloc_num 37} true;
  $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v12, 18), 63), 64))] := BV8_ADD(v15, 1);
  assert {:sourceloc} {:sourceloc_num 38} true;
  v16 := $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v12, 26), 63), 64))];
  assert {:sourceloc} {:sourceloc_num 39} true;
  $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v12, 26), 63), 64))] := BV8_ADD(v16, 1);
  assert {:sourceloc} {:sourceloc_num 40} true;
  v17 := $$data[2];
  assert {:sourceloc} {:sourceloc_num 41} true;
  v18 := $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v17, 2), 63), 64))];
  assert {:sourceloc} {:sourceloc_num 42} true;
  $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v17, 2), 63), 64))] := BV8_ADD(v18, 1);
  assert {:sourceloc} {:sourceloc_num 43} true;
  v19 := $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v17, 10), 63), 64))];
  assert {:sourceloc} {:sourceloc_num 44} true;
  $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v17, 10), 63), 64))] := BV8_ADD(v19, 1);
  assert {:sourceloc} {:sourceloc_num 45} true;
  v20 := $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v17, 18), 63), 64))];
  assert {:sourceloc} {:sourceloc_num 46} true;
  $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v17, 18), 63), 64))] := BV8_ADD(v20, 1);
  assert {:sourceloc} {:sourceloc_num 47} true;
  v21 := $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v17, 26), 63), 64))];
  assert {:sourceloc} {:sourceloc_num 48} true;
  $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v17, 26), 63), 64))] := BV8_ADD(v21, 1);
  assert {:sourceloc} {:sourceloc_num 49} true;
  v22 := $$data[3];
  assert {:sourceloc} {:sourceloc_num 50} true;
  v23 := $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v22, 2), 63), 64))];
  assert {:sourceloc} {:sourceloc_num 51} true;
  $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v22, 2), 63), 64))] := BV8_ADD(v23, 1);
  assert {:sourceloc} {:sourceloc_num 52} true;
  v24 := $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v22, 10), 63), 64))];
  assert {:sourceloc} {:sourceloc_num 53} true;
  $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v22, 10), 63), 64))] := BV8_ADD(v24, 1);
  assert {:sourceloc} {:sourceloc_num 54} true;
  v25 := $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v22, 18), 63), 64))];
  assert {:sourceloc} {:sourceloc_num 55} true;
  $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v22, 18), 63), 64))] := BV8_ADD(v25, 1);
  assert {:sourceloc} {:sourceloc_num 56} true;
  v26 := $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v22, 26), 63), 64))];
  assert {:sourceloc} {:sourceloc_num 57} true;
  $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v22, 26), 63), 64))] := BV8_ADD(v26, 1);
  goto $7;
$7:
  assert {:block_sourceloc} {:sourceloc_num 58} true;
  $pos.0 := BV32_ADD($pos.0, BV32_MUL(group_size_x, num_groups_x));
  goto $5;
$8:
  assert {:block_sourceloc} {:sourceloc_num 59} true;
  call {:sourceloc_num 60} $bugle_barrier(-1, -1);
  v27 := BV32_ULT(local_id_x, 64);
  goto $truebb1, $falsebb1;
$9:
  assert {:block_sourceloc} {:sourceloc_num 61} true;
  v28 := BV32_MUL(local_id_x, 64);
  $sum.0, $pos1.0, $i2.0 := 0, BV32_MUL(4, BV32_AND(local_id_x, 15)), 0;
  goto $10;
$10:
  assert {:block_sourceloc} {:sourceloc_num 62} true;
  v29 := BV32_ULT($i2.0, 16);
  goto $truebb2, $falsebb2;
$11:
  assert {:block_sourceloc} {:sourceloc_num 63} true;
  assert {:sourceloc} {:sourceloc_num 64} true;
  v30 := $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v28, $pos1.0)];
  assert {:sourceloc} {:sourceloc_num 65} true;
  v31 := $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v28, BV32_ADD($pos1.0, 1))];
  assert {:sourceloc} {:sourceloc_num 66} true;
  v32 := $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v28, BV32_ADD($pos1.0, 2))];
  assert {:sourceloc} {:sourceloc_num 67} true;
  v33 := $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v28, BV32_ADD($pos1.0, 3))];
  goto $12;
$12:
  assert {:block_sourceloc} {:sourceloc_num 68} true;
  $sum.0, $pos1.0, $i2.0 := BV32_ADD($sum.0, BV32_ADD(BV32_ADD(BV32_ADD(BV8_ZEXT32(v30), BV8_ZEXT32(v31)), BV8_ZEXT32(v32)), BV8_ZEXT32(v33))), BV32_AND(BV32_ADD($pos1.0, 4), 63), BV32_ADD($i2.0, 1);
  goto $10;
$13:
  assert {:block_sourceloc} {:sourceloc_num 69} true;
  assert {:sourceloc} {:sourceloc_num 70} true;
  $$d_PartialHistograms[BV32_ADD(BV32_MUL(group_id_x, 64), local_id_x)] := $sum.0;
  goto $14;
$14:
  assert {:block_sourceloc} {:sourceloc_num 71} true;
  return;
$truebb:
  assume {:partition} v1;
  assert {:block_sourceloc} {:sourceloc_num 72} true;
  goto $2;
$falsebb:
  assume {:partition} !v1;
  assert {:block_sourceloc} {:sourceloc_num 73} true;
  goto $4;
$truebb0:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 74} true;
  goto $6;
$falsebb0:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 75} true;
  goto $8;
$truebb1:
  assume {:partition} v27;
  assert {:block_sourceloc} {:sourceloc_num 76} true;
  goto $9;
$falsebb1:
  assume {:partition} !v27;
  assert {:block_sourceloc} {:sourceloc_num 77} true;
  goto $14;
$truebb2:
  assume {:partition} v29;
  assert {:block_sourceloc} {:sourceloc_num 78} true;
  goto $11;
$falsebb2:
  assume {:partition} !v29;
  assert {:block_sourceloc} {:sourceloc_num 79} true;
  goto $13;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:int, $1:int);
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 64 then 1 else 0) != 0;
axiom (if num_groups_x == 4370 then 1 else 0) != 0;
