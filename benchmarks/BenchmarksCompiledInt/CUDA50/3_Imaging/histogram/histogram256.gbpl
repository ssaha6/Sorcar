type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "d_PartialHistograms"} {:global} $$d_PartialHistograms : [int]int;
axiom {:array_info "$$d_PartialHistograms"} {:global} {:elem_width 32} {:source_name "d_PartialHistograms"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_PartialHistograms : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_PartialHistograms : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_PartialHistograms : bool;

var {:source_name "d_Data"} {:global} $$d_Data : [int]int;
axiom {:array_info "$$d_Data"} {:global} {:elem_width 32} {:source_name "d_Data"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_Data : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_Data : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_Data : bool;

var {:source_name "s_Hist"} {:group_shared} $$_ZZ18histogram256KernelPjS_jE6s_Hist : [int]int;
axiom {:array_info "$$_ZZ18histogram256KernelPjS_jE6s_Hist"} {:group_shared} {:elem_width 32} {:source_name "s_Hist"} {:source_elem_width 32} {:source_dimensions "1536"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ18histogram256KernelPjS_jE6s_Hist : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ18histogram256KernelPjS_jE6s_Hist : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ18histogram256KernelPjS_jE6s_Hist : bool;

const _WATCHED_OFFSET : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function  BV32_LSHR(int, int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_AND(x : int, y : int) : int {
  if x == y then x else (if x == 0 || y == 0 then 0 else BV32_AND_UF(x, y))
}
function BV32_AND_UF(int, int) : int;
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_UDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_ULT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV32_UREM(x : int, y : int) : int {
  x mod y
}
procedure {:source_name "histogram256Kernel"} {:kernel} $_Z18histogram256KernelPjS_j($dataCount:int)
{
  var $i.0:int;
  var $pos.0:int;
  var $bin.0:int;
  var $sum.0:int;
  var $i1.0:int;
  var v3:int;
  var v0:bool;
  var v1:bool;
  var v2:int;
  var v4:int;
  var v5:int;
  var v6:int;
  var v7:bool;
  var v8:bool;
  var v9:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  $i.0 := 0;
  goto $1;
$1:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  assert {:originated_from_invariant} {:sourceloc_num 2} (if (_WRITE_HAS_OCCURRED_$$_ZZ18histogram256KernelPjS_jE6s_Hist ==> BV32_UREM(BV32_UDIV(BV32_MUL(4, _WATCHED_OFFSET), 4), 192) == local_id_x) then 1 else 0) != 0;
  v0 := BV32_ULT($i.0, 8);
  goto $truebb, $falsebb;
$2:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  assert {:sourceloc} {:sourceloc_num 4} true;
  $$_ZZ18histogram256KernelPjS_jE6s_Hist[BV32_ADD(local_id_x, BV32_MUL($i.0, 192))] := 0;
  goto $3;
$3:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  $i.0 := BV32_ADD($i.0, 1);
  goto $1;
$4:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  call {:sourceloc_num 7} $bugle_barrier(-1, -1);
  $pos.0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  goto $5;
$5:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  v1 := BV32_ULT($pos.0, $dataCount);
  goto $truebb0, $falsebb0;
$6:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  assert {:sourceloc} {:sourceloc_num 10} true;
  v2 := $$d_Data[$pos.0];
  assert {:sourceloc} {:sourceloc_num 11} true;
  call {:atomic} {:atomic_function "__atomicAdd_unsigned_int"} {:arg1 1} {:parts 1} {:part 1} v3, $$_ZZ18histogram256KernelPjS_jE6s_Hist := _ATOMIC_OP32($$_ZZ18histogram256KernelPjS_jE6s_Hist, BV32_SDIV(BV32_ADD(BV32_MUL(BV32_MUL(BV32_LSHR(local_id_x, 5), 256), 4), BV32_MUL(BV32_AND(v2, 255), 4)), 4));
  assert {:sourceloc} {:sourceloc_num 12} true;
  call {:atomic} {:atomic_function "__atomicAdd_unsigned_int"} {:arg1 1} {:parts 1} {:part 1} v4, $$_ZZ18histogram256KernelPjS_jE6s_Hist := _ATOMIC_OP32($$_ZZ18histogram256KernelPjS_jE6s_Hist, BV32_SDIV(BV32_ADD(BV32_MUL(BV32_MUL(BV32_LSHR(local_id_x, 5), 256), 4), BV32_MUL(BV32_AND(BV32_LSHR(v2, 8), 255), 4)), 4));
  assert {:sourceloc} {:sourceloc_num 13} true;
  call {:atomic} {:atomic_function "__atomicAdd_unsigned_int"} {:arg1 1} {:parts 1} {:part 1} v5, $$_ZZ18histogram256KernelPjS_jE6s_Hist := _ATOMIC_OP32($$_ZZ18histogram256KernelPjS_jE6s_Hist, BV32_SDIV(BV32_ADD(BV32_MUL(BV32_MUL(BV32_LSHR(local_id_x, 5), 256), 4), BV32_MUL(BV32_AND(BV32_LSHR(v2, 16), 255), 4)), 4));
  assert {:sourceloc} {:sourceloc_num 14} true;
  call {:atomic} {:atomic_function "__atomicAdd_unsigned_int"} {:arg1 1} {:parts 1} {:part 1} v6, $$_ZZ18histogram256KernelPjS_jE6s_Hist := _ATOMIC_OP32($$_ZZ18histogram256KernelPjS_jE6s_Hist, BV32_SDIV(BV32_ADD(BV32_MUL(BV32_MUL(BV32_LSHR(local_id_x, 5), 256), 4), BV32_MUL(BV32_AND(BV32_LSHR(v2, 24), 255), 4)), 4));
  goto $7;
$7:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  $pos.0 := BV32_ADD($pos.0, BV32_MUL(group_size_x, num_groups_x));
  goto $5;
$8:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  call {:sourceloc_num 17} $bugle_barrier(-1, -1);
  $bin.0 := local_id_x;
  goto $9;
$9:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 19} (if BV32_UREM($bin.0, group_size_x) == local_id_x then 1 else 0) != 0;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 20} (if (_WRITE_HAS_OCCURRED_$$d_PartialHistograms ==> BV32_UREM(BV32_UREM(BV32_UDIV(BV32_MUL(4, _WATCHED_OFFSET), 4), 256), group_size_x) == local_id_x) then 1 else 0) != 0;
  v7 := BV32_ULT($bin.0, 256);
  goto $truebb1, $falsebb1;
$10:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  $sum.0, $i1.0 := 0, 0;
  goto $11;
$11:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  v8 := BV32_ULT($i1.0, 6);
  goto $truebb2, $falsebb2;
$12:
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  assert {:sourceloc} {:sourceloc_num 24} true;
  v9 := $$_ZZ18histogram256KernelPjS_jE6s_Hist[BV32_ADD($bin.0, BV32_MUL($i1.0, 256))];
  goto $13;
$13:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  $sum.0, $i1.0 := BV32_ADD($sum.0, v9), BV32_ADD($i1.0, 1);
  goto $11;
$14:
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  assert {:sourceloc} {:sourceloc_num 27} true;
  $$d_PartialHistograms[BV32_ADD(BV32_MUL(group_id_x, 256), $bin.0)] := $sum.0;
  goto $15;
$15:
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  $bin.0 := BV32_ADD($bin.0, 192);
  goto $9;
$16:
  assert {:block_sourceloc} {:sourceloc_num 29} true;
  return;
$truebb:
  assume {:partition} v0;
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  goto $2;
$falsebb:
  assume {:partition} !v0;
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  goto $4;
$truebb0:
  assume {:partition} v1;
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  goto $6;
$falsebb0:
  assume {:partition} !v1;
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  goto $8;
$truebb1:
  assume {:partition} v7;
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  goto $10;
$falsebb1:
  assume {:partition} !v7;
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  goto $16;
$truebb2:
  assume {:partition} v8;
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  goto $12;
$falsebb2:
  assume {:partition} !v8;
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  goto $14;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:int, $1:int);
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 192 then 1 else 0) != 0;
axiom (if num_groups_x == 240 then 1 else 0) != 0;
