type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
procedure _ATOMIC_OP8(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "out"} {:global} $$out : [int]int;
axiom {:array_info "$$out"} {:global} {:elem_width 32} {:source_name "out"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$out : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$out : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$out : bool;

var {:source_name ""} $$0 : [int]int;
axiom {:array_info "$$0"} {:elem_width 8} {:source_name ""} {:source_elem_width 96} {:source_dimensions "1"} true;

var {:source_name "texCoarse"} {:global} $$texCoarse : [int]int;
axiom {:array_info "$$texCoarse"} {:global} {:elem_width 8} {:source_name "texCoarse"} {:source_elem_width 96} {:source_dimensions "1"} true;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 96} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$texCoarse : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 96} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$texCoarse : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 96} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$texCoarse : bool;

const _WATCHED_OFFSET : int;
const {:group_id_x} group_id_x : int;
const {:group_id_y} group_id_y : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:local_id_y} local_id_y : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function BV_CONCAT(int, int) : int;
function FADD32(int, int) : int;
function FDIV32(int, int) : int;
function FMUL32(int, int) : int;
function SI32_TO_FP32(int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SGE(x : int, y : int) : bool {
  x >= y
}
procedure {:source_name "UpscaleKernel"} {:kernel} $_Z13UpscaleKerneliiifPf($width:int, $height:int, $stride:int, $scale:int)
requires {:sourceloc_num 0} (if $width == 320 then 1 else 0) != 0;
requires {:sourceloc_num 1} (if $height == 240 then 1 else 0) != 0;
requires {:sourceloc_num 2} (if $stride == 320 then 1 else 0) != 0;
{
  var v0:int;
  var v1:int;
  var v2:bool;
  var v3:bool;
  var v8:int;
  var v4:int;
  var v5:int;
  var v6:int;
  var v7:int;
  var v9:int;
  var v10:int;
  var v11:int;
  var v12:int;
  var v13:int;
  var v14:int;
  var v15:int;
  var v16:int;
  var v17:int;
  var v18:int;
  var v19:int;
  var v20:int;
  var v21:int;
  var v22:int;
  var v23:int;
  var v24:int;
  var v25:int;
  var v26:int;
  var v27:int;
  var v28:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  v0 := BV32_ADD(local_id_x, BV32_MUL(group_id_x, group_size_x));
  v1 := BV32_ADD(local_id_y, BV32_MUL(group_id_y, group_size_y));
  v2 := BV32_SGE(v0, $width);
  goto $truebb, $falsebb;
$1:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  v3 := BV32_SGE(v1, $height);
  goto $truebb0, $falsebb0;
$2:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  goto $4;
$3:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  assert {:sourceloc} {:sourceloc_num 7} true;
  v4 := $$texCoarse[0];
  assert {:sourceloc} {:sourceloc_num 8} true;
  $$0[0] := v4;
  assert {:sourceloc} {:sourceloc_num 9} true;
  v5 := $$texCoarse[1];
  assert {:sourceloc} {:sourceloc_num 10} true;
  $$0[1] := v5;
  assert {:sourceloc} {:sourceloc_num 11} true;
  v6 := $$texCoarse[2];
  assert {:sourceloc} {:sourceloc_num 12} true;
  $$0[2] := v6;
  assert {:sourceloc} {:sourceloc_num 13} true;
  v7 := $$texCoarse[3];
  assert {:sourceloc} {:sourceloc_num 14} true;
  $$0[3] := v7;
  assert {:sourceloc} {:sourceloc_num 15} true;
  v8 := $$texCoarse[4];
  assert {:sourceloc} {:sourceloc_num 16} true;
  $$0[4] := v8;
  assert {:sourceloc} {:sourceloc_num 17} true;
  v9 := $$texCoarse[5];
  assert {:sourceloc} {:sourceloc_num 18} true;
  $$0[5] := v9;
  assert {:sourceloc} {:sourceloc_num 19} true;
  v10 := $$texCoarse[6];
  assert {:sourceloc} {:sourceloc_num 20} true;
  $$0[6] := v10;
  assert {:sourceloc} {:sourceloc_num 21} true;
  v11 := $$texCoarse[7];
  assert {:sourceloc} {:sourceloc_num 22} true;
  $$0[7] := v11;
  assert {:sourceloc} {:sourceloc_num 23} true;
  v12 := $$texCoarse[8];
  assert {:sourceloc} {:sourceloc_num 24} true;
  $$0[8] := v12;
  assert {:sourceloc} {:sourceloc_num 25} true;
  v13 := $$texCoarse[9];
  assert {:sourceloc} {:sourceloc_num 26} true;
  $$0[9] := v13;
  assert {:sourceloc} {:sourceloc_num 27} true;
  v14 := $$texCoarse[10];
  assert {:sourceloc} {:sourceloc_num 28} true;
  $$0[10] := v14;
  assert {:sourceloc} {:sourceloc_num 29} true;
  v15 := $$texCoarse[11];
  assert {:sourceloc} {:sourceloc_num 30} true;
  $$0[11] := v15;
  assert {:sourceloc} {:sourceloc_num 31} true;
  v16 := $$0[0];
  assert {:sourceloc} {:sourceloc_num 32} true;
  v17 := $$0[1];
  assert {:sourceloc} {:sourceloc_num 33} true;
  v18 := $$0[2];
  assert {:sourceloc} {:sourceloc_num 34} true;
  v19 := $$0[3];
  assert {:sourceloc} {:sourceloc_num 35} true;
  v20 := $$0[4];
  assert {:sourceloc} {:sourceloc_num 36} true;
  v21 := $$0[5];
  assert {:sourceloc} {:sourceloc_num 37} true;
  v22 := $$0[6];
  assert {:sourceloc} {:sourceloc_num 38} true;
  v23 := $$0[7];
  assert {:sourceloc} {:sourceloc_num 39} true;
  v24 := $$0[8];
  assert {:sourceloc} {:sourceloc_num 40} true;
  v25 := $$0[9];
  assert {:sourceloc} {:sourceloc_num 41} true;
  v26 := $$0[10];
  assert {:sourceloc} {:sourceloc_num 42} true;
  v27 := $$0[11];
  call {:sourceloc_num 43}   v28 := $_Z5tex2DIfET_7textureIS0_Li2EL19cudaTextureReadMode0EEff(BV_CONCAT(BV_CONCAT(BV_CONCAT(v19, v18), v17), v16), BV_CONCAT(BV_CONCAT(BV_CONCAT(v23, v22), v21), v20), BV_CONCAT(BV_CONCAT(BV_CONCAT(v27, v26), v25), v24), FDIV32(FADD32(SI32_TO_FP32(v0), 1056964608), SI32_TO_FP32($width)), FDIV32(FADD32(SI32_TO_FP32(v1), 1056964608), SI32_TO_FP32($height)));
  assert {:sourceloc} {:sourceloc_num 44} true;
  $$out[BV32_ADD(v0, BV32_MUL(v1, $stride))] := FMUL32(v28, $scale);
  goto $4;
$4:
  assert {:block_sourceloc} {:sourceloc_num 45} true;
  return;
$truebb:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  goto $2;
$falsebb:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  goto $1;
$truebb0:
  assume {:partition} v3;
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  goto $2;
$falsebb0:
  assume {:partition} !v3;
  assert {:block_sourceloc} {:sourceloc_num 49} true;
  goto $3;
}
procedure {:source_name "_Z5tex2DIfET_7textureIS0_Li2EL19cudaTextureReadMode0EEff"} $_Z5tex2DIfET_7textureIS0_Li2EL19cudaTextureReadMode0EEff($0:int, $1:int, $2:int, $3:int, $4:int) returns ($ret:int);
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 32 then 1 else 0) != 0;
axiom (if group_size_y == 8 then 1 else 0) != 0;
axiom (if num_groups_x == 10 then 1 else 0) != 0;
axiom (if num_groups_y == 30 then 1 else 0) != 0;
