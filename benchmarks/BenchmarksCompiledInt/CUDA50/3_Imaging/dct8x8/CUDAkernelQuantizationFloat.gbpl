type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
procedure _ATOMIC_OP16(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "SrcDst"} {:global} $$SrcDst : [int]int;
axiom {:array_info "$$SrcDst"} {:global} {:elem_width 32} {:source_name "SrcDst"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$SrcDst : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$SrcDst : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$SrcDst : bool;

var {:source_name "Q"} {:constant} $$Q : [int]int;
axiom {:array_info "$$Q"} {:constant} {:elem_width 16} {:source_name "Q"} {:source_elem_width 16} {:source_dimensions "64"} true;

const _WATCHED_OFFSET : int;
const {:group_id_x} group_id_x : int;
const {:group_id_y} group_id_y : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:local_id_y} local_id_y : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function FDIV32(int, int) : int;
function FMUL32(int, int) : int;
function FP32_CONV64(int) : int;
function FP64_CONV32(int) : int;
function SI16_TO_FP32(int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
procedure {:source_name "CUDAkernelQuantizationFloat"} {:kernel} $_Z27CUDAkernelQuantizationFloatPfi($Stride:int)
requires {:sourceloc_num 0} (if $Stride == 512 then 1 else 0) != 0;
{
  var v0:int;
  var v1:int;
  var v2:int;
  var v3:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  assert {:sourceloc} {:sourceloc_num 2} true;
  v0 := $$SrcDst[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(group_id_y, 8), local_id_y), $Stride), BV32_ADD(BV32_MUL(group_id_x, 8), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 3} true;
  v1 := $$Q[BV32_ADD(BV32_MUL(local_id_y, 8), local_id_x)];
  v2 := SI16_TO_FP32(v1);
  call {:sourceloc_num 4}   v3 := $round(FP32_CONV64(FDIV32(v0, v2)));
  assert {:sourceloc} {:sourceloc_num 5} true;
  $$SrcDst[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(group_id_y, 8), local_id_y), $Stride), BV32_ADD(BV32_MUL(group_id_x, 8), local_id_x))] := FMUL32(FP64_CONV32(v3), v2);
  return;
}
procedure {:source_name "round"} $round($0:int) returns ($ret:int);
axiom (if group_size_x == 8 then 1 else 0) != 0;
axiom (if group_size_y == 8 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_x == 64 then 1 else 0) != 0;
axiom (if num_groups_y == 64 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
