type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP8(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "SrcDst"} {:global} $$SrcDst : [int]int;
axiom {:array_info "$$SrcDst"} {:global} {:elem_width 8} {:source_name "SrcDst"} {:source_elem_width 16} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 16} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$SrcDst : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 16} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$SrcDst : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 16} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$SrcDst : bool;

var {:source_name "sh0.i"} $$sh0.i : [int]int;
axiom {:array_info "$$sh0.i"} {:elem_width 8} {:source_name "sh0.i"} {:source_elem_width 32} {:source_dimensions "1"} true;

var {:source_name "sh1.i"} $$sh1.i : [int]int;
axiom {:array_info "$$sh1.i"} {:elem_width 8} {:source_name "sh1.i"} {:source_elem_width 32} {:source_dimensions "1"} true;

var {:source_name "sh2.i"} $$sh2.i : [int]int;
axiom {:array_info "$$sh2.i"} {:elem_width 8} {:source_name "sh2.i"} {:source_elem_width 32} {:source_dimensions "1"} true;

var {:source_name "sh3.i"} $$sh3.i : [int]int;
axiom {:array_info "$$sh3.i"} {:elem_width 8} {:source_name "sh3.i"} {:source_elem_width 32} {:source_dimensions "1"} true;

var {:source_name "block"} {:group_shared} $$_ZZ19CUDAkernelShortIDCTPsiE5block : [int]int;
axiom {:array_info "$$_ZZ19CUDAkernelShortIDCTPsiE5block"} {:group_shared} {:elem_width 8} {:source_name "block"} {:source_elem_width 16} {:source_dimensions "1088"} true;
var {:race_checking} {:group_shared} {:elem_width 8} {:source_elem_width 16} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ19CUDAkernelShortIDCTPsiE5block : bool;
var {:race_checking} {:group_shared} {:elem_width 8} {:source_elem_width 16} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ19CUDAkernelShortIDCTPsiE5block : bool;
var {:race_checking} {:group_shared} {:elem_width 8} {:source_elem_width 16} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ19CUDAkernelShortIDCTPsiE5block : bool;

const _WATCHED_OFFSET : int;
const {:group_id_x} group_id_x : int;
const {:group_id_y} group_id_y : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:local_id_y} local_id_y : int;
const {:local_id_z} local_id_z : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function  BV32_ASHR(int, int) : int;
function BV16_SEXT32(int) : int;
function BV_CONCAT(int, int) : int;
function BV_EXTRACT(int, int, int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_AND(x : int, y : int) : int {
  if x == y then x else (if x == 0 || y == 0 then 0 else BV32_AND_UF(x, y))
}
function BV32_AND_UF(int, int) : int;
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_OR(x : int, y : int) : int {
  if x == y then x else (if x == 0 then y else (if y == 0 then x else BV32_OR_UF(x, y)))
}
function BV32_OR_UF(int, int) : int;
function {:inline true} BV32_SDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_SHL(x : int, y : int) : int {
  if x >= 0 && y == 1 then x*2 else BV32_SHL_UF(x,y)
}
function BV32_SHL_UF(int, int) : int;
function {:inline true} BV32_SLT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV32_SUB(x : int, y : int) : int {
  x - y
}
function {:inline true} BV32_UDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_ULT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV32_UREM(x : int, y : int) : int {
  x mod y
}
procedure {:source_name "CUDAkernelShortIDCT"} {:kernel} $_Z19CUDAkernelShortIDCTPsi($ImgStride:int)
requires {:sourceloc_num 0} (if $ImgStride == 512 then 1 else 0) != 0;
{
  var $i.0:int;
  var $i1.0:int;
  var v41:int;
  var v42:int;
  var v52:int;
  var v70:int;
  var v71:int;
  var v72:int;
  var v73:int;
  var v8:int;
  var v115:int;
  var v120:int;
  var v28:int;
  var v31:int;
  var v105:int;
  var v106:int;
  var v74:int;
  var v75:int;
  var v116:int;
  var v118:int;
  var v15:int;
  var v114:int;
  var v14:int;
  var v27:int;
  var v13:int;
  var v29:int;
  var v19:int;
  var v20:int;
  var v21:int;
  var v37:int;
  var v35:int;
  var v22:int;
  var v38:int;
  var v23:int;
  var v24:int;
  var v3:bool;
  var v9:int;
  var v47:int;
  var v36:int;
  var v39:int;
  var v49:int;
  var v40:int;
  var v33:int;
  var v34:int;
  var v55:int;
  var v4:int;
  var v5:int;
  var v6:int;
  var v7:int;
  var v104:int;
  var v66:int;
  var v103:int;
  var v1:int;
  var v89:int;
  var v90:int;
  var v91:int;
  var v57:int;
  var v92:int;
  var v93:int;
  var v94:int;
  var v95:int;
  var v96:int;
  var v58:int;
  var v59:int;
  var v60:int;
  var v61:int;
  var v97:int;
  var v98:int;
  var v62:int;
  var v63:int;
  var v64:int;
  var v65:int;
  var v99:int;
  var v100:int;
  var v101:int;
  var v102:int;
  var v83:int;
  var v84:int;
  var v85:int;
  var v43:int;
  var v48:int;
  var v44:int;
  var v45:int;
  var v10:int;
  var v11:int;
  var v32:int;
  var v53:int;
  var v12:int;
  var v2:bool;
  var v51:int;
  var v16:int;
  var v17:int;
  var v18:int;
  var v0:int;
  var v46:int;
  var v56:int;
  var v81:int;
  var v82:int;
  var v76:int;
  var v77:int;
  var v78:int;
  var v79:int;
  var v80:int;
  var v86:int;
  var v87:int;
  var v88:int;
  var v113:int;
  var v107:int;
  var v108:int;
  var v109:int;
  var v110:int;
  var v111:int;
  var v112:int;
  var v67:int;
  var v68:int;
  var v69:int;
  var v54:int;
  var v50:int;
  var v30:int;
  var v25:int;
  var v26:int;
  var v117:int;
  var v119:int;
  var v121:int;
  var v122:int;
  var v123:int;
  var v124:int;
  var v125:int;
  var v126:int;
  var v127:int;
  var v128:int;
  var v129:int;
  var v130:int;
  var v131:int;
  var v132:int;
  var v133:int;
  var v134:int;
  var v135:int;
  var v136:int;
  var v137:int;
  var v138:int;
  var v139:int;
  var v140:bool;
  var v141:bool;
  var v142:int;
  var v143:int;
  var v144:int;
  var v145:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  v0 := BV32_ADD(BV32_MUL(local_id_y, 8), local_id_x);
  v1 := BV32_MUL(local_id_z, 8);
  v2 := BV32_SLT(v0, 16);
  goto $truebb, $falsebb;
$1:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  $i.0 := 0;
  goto $2;
$2:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 4} (if (_WRITE_HAS_OCCURRED_$$_ZZ19CUDAkernelShortIDCTPsiE5block ==> BV32_UREM(BV32_UDIV(BV32_SUB(_WATCHED_OFFSET, BV32_MUL(BV32_ADD(BV32_MUL(v1, 34), BV32_MUL(v0, 2)), 2)), 4), 17) == 0) then 1 else 0) != 0;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 5} (if (_WRITE_HAS_OCCURRED_$$_ZZ19CUDAkernelShortIDCTPsiE5block ==> BV32_ULT(BV32_UDIV(BV32_UDIV(BV32_SUB(_WATCHED_OFFSET, BV32_MUL(BV32_ADD(BV32_MUL(v1, 34), BV32_MUL(v0, 2)), 2)), 4), 17), 8)) then 1 else 0) != 0;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 6} (if (_READ_HAS_OCCURRED_$$SrcDst ==> BV32_UREM(BV32_UDIV(BV32_SUB(_WATCHED_OFFSET, BV32_MUL(BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(group_id_y, 32), v1), $ImgStride), BV32_ADD(BV32_MUL(group_id_x, 32), BV32_MUL(v0, 2))), 2)), 4), BV32_SDIV($ImgStride, 2)) == 0) then 1 else 0) != 0;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 7} (if (_READ_HAS_OCCURRED_$$SrcDst ==> BV32_ULT(BV32_UDIV(BV32_UDIV(BV32_SUB(_WATCHED_OFFSET, BV32_MUL(BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(group_id_y, 32), v1), $ImgStride), BV32_ADD(BV32_MUL(group_id_x, 32), BV32_MUL(v0, 2))), 2)), 4), BV32_SDIV($ImgStride, 2)), 8)) then 1 else 0) != 0;
  v3 := BV32_SLT($i.0, 8);
  goto $truebb0, $falsebb0;
$3:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  assert {:sourceloc} {:sourceloc_num 9} true;
  v4 := $$SrcDst[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(group_id_y, 32), v1), $ImgStride), BV32_ADD(BV32_MUL(group_id_x, 32), BV32_MUL(v0, 2))), 2), BV32_MUL(BV32_MUL($i.0, BV32_SDIV($ImgStride, 2)), 4))];
  assert {:sourceloc} {:sourceloc_num 10} true;
  v5 := $$SrcDst[BV32_ADD(BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(group_id_y, 32), v1), $ImgStride), BV32_ADD(BV32_MUL(group_id_x, 32), BV32_MUL(v0, 2))), 2), BV32_MUL(BV32_MUL($i.0, BV32_SDIV($ImgStride, 2)), 4)), 1)];
  assert {:sourceloc} {:sourceloc_num 11} true;
  v6 := $$SrcDst[BV32_ADD(BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(group_id_y, 32), v1), $ImgStride), BV32_ADD(BV32_MUL(group_id_x, 32), BV32_MUL(v0, 2))), 2), BV32_MUL(BV32_MUL($i.0, BV32_SDIV($ImgStride, 2)), 4)), 2)];
  assert {:sourceloc} {:sourceloc_num 12} true;
  v7 := $$SrcDst[BV32_ADD(BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(group_id_y, 32), v1), $ImgStride), BV32_ADD(BV32_MUL(group_id_x, 32), BV32_MUL(v0, 2))), 2), BV32_MUL(BV32_MUL($i.0, BV32_SDIV($ImgStride, 2)), 4)), 3)];
  assert {:sourceloc} {:sourceloc_num 13} true;
  $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(v1, 34), BV32_MUL(v0, 2)), 2), BV32_MUL(BV32_MUL($i.0, 17), 4))] := v4;
  assert {:sourceloc} {:sourceloc_num 14} true;
  $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(v1, 34), BV32_MUL(v0, 2)), 2), BV32_MUL(BV32_MUL($i.0, 17), 4)), 1)] := v5;
  assert {:sourceloc} {:sourceloc_num 15} true;
  $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(v1, 34), BV32_MUL(v0, 2)), 2), BV32_MUL(BV32_MUL($i.0, 17), 4)), 2)] := v6;
  assert {:sourceloc} {:sourceloc_num 16} true;
  $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(v1, 34), BV32_MUL(v0, 2)), 2), BV32_MUL(BV32_MUL($i.0, 17), 4)), 3)] := v7;
  goto $4;
$4:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  $i.0 := BV32_ADD($i.0, 1);
  goto $2;
$5:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  goto $6;
$6:
  assert {:block_sourceloc} {:sourceloc_num 19} true;
  call {:sourceloc_num 20} $bugle_barrier(-1, -1);
  assert {:sourceloc} {:sourceloc_num 21} true;
  v8 := $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_MUL(BV32_MUL(v1, 34), 2), BV32_MUL(BV32_OR(BV32_AND(v0, -32), BV32_AND(BV32_OR(BV32_SHL(v0, 1), BV32_AND(BV32_ASHR(v0, 4), 1)), 31)), 2))];
  assert {:sourceloc} {:sourceloc_num 22} true;
  v9 := $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v1, 34), 2), BV32_MUL(BV32_OR(BV32_AND(v0, -32), BV32_AND(BV32_OR(BV32_SHL(v0, 1), BV32_AND(BV32_ASHR(v0, 4), 1)), 31)), 2)), 1)];
  v10 := BV16_SEXT32(BV_CONCAT(v9, v8));
  assert {:sourceloc} {:sourceloc_num 23} true;
  v11 := $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v1, 34), 2), BV32_MUL(BV32_OR(BV32_AND(v0, -32), BV32_AND(BV32_OR(BV32_SHL(v0, 1), BV32_AND(BV32_ASHR(v0, 4), 1)), 31)), 2)), 68)];
  assert {:sourceloc} {:sourceloc_num 24} true;
  v12 := $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v1, 34), 2), BV32_MUL(BV32_OR(BV32_AND(v0, -32), BV32_AND(BV32_OR(BV32_SHL(v0, 1), BV32_AND(BV32_ASHR(v0, 4), 1)), 31)), 2)), 69)];
  assert {:sourceloc} {:sourceloc_num 25} true;
  v13 := $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v1, 34), 2), BV32_MUL(BV32_OR(BV32_AND(v0, -32), BV32_AND(BV32_OR(BV32_SHL(v0, 1), BV32_AND(BV32_ASHR(v0, 4), 1)), 31)), 2)), 136)];
  assert {:sourceloc} {:sourceloc_num 26} true;
  v14 := $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v1, 34), 2), BV32_MUL(BV32_OR(BV32_AND(v0, -32), BV32_AND(BV32_OR(BV32_SHL(v0, 1), BV32_AND(BV32_ASHR(v0, 4), 1)), 31)), 2)), 137)];
  v15 := BV16_SEXT32(BV_CONCAT(v14, v13));
  assert {:sourceloc} {:sourceloc_num 27} true;
  v16 := $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v1, 34), 2), BV32_MUL(BV32_OR(BV32_AND(v0, -32), BV32_AND(BV32_OR(BV32_SHL(v0, 1), BV32_AND(BV32_ASHR(v0, 4), 1)), 31)), 2)), 204)];
  assert {:sourceloc} {:sourceloc_num 28} true;
  v17 := $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v1, 34), 2), BV32_MUL(BV32_OR(BV32_AND(v0, -32), BV32_AND(BV32_OR(BV32_SHL(v0, 1), BV32_AND(BV32_ASHR(v0, 4), 1)), 31)), 2)), 205)];
  v18 := BV16_SEXT32(BV_CONCAT(v17, v16));
  assert {:sourceloc} {:sourceloc_num 29} true;
  v19 := $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v1, 34), 2), BV32_MUL(BV32_OR(BV32_AND(v0, -32), BV32_AND(BV32_OR(BV32_SHL(v0, 1), BV32_AND(BV32_ASHR(v0, 4), 1)), 31)), 2)), 272)];
  assert {:sourceloc} {:sourceloc_num 30} true;
  v20 := $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v1, 34), 2), BV32_MUL(BV32_OR(BV32_AND(v0, -32), BV32_AND(BV32_OR(BV32_SHL(v0, 1), BV32_AND(BV32_ASHR(v0, 4), 1)), 31)), 2)), 273)];
  v21 := BV16_SEXT32(BV_CONCAT(v20, v19));
  assert {:sourceloc} {:sourceloc_num 31} true;
  v22 := $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v1, 34), 2), BV32_MUL(BV32_OR(BV32_AND(v0, -32), BV32_AND(BV32_OR(BV32_SHL(v0, 1), BV32_AND(BV32_ASHR(v0, 4), 1)), 31)), 2)), 340)];
  assert {:sourceloc} {:sourceloc_num 32} true;
  v23 := $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v1, 34), 2), BV32_MUL(BV32_OR(BV32_AND(v0, -32), BV32_AND(BV32_OR(BV32_SHL(v0, 1), BV32_AND(BV32_ASHR(v0, 4), 1)), 31)), 2)), 341)];
  v24 := BV16_SEXT32(BV_CONCAT(v23, v22));
  assert {:sourceloc} {:sourceloc_num 33} true;
  v25 := $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v1, 34), 2), BV32_MUL(BV32_OR(BV32_AND(v0, -32), BV32_AND(BV32_OR(BV32_SHL(v0, 1), BV32_AND(BV32_ASHR(v0, 4), 1)), 31)), 2)), 408)];
  assert {:sourceloc} {:sourceloc_num 34} true;
  v26 := $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v1, 34), 2), BV32_MUL(BV32_OR(BV32_AND(v0, -32), BV32_AND(BV32_OR(BV32_SHL(v0, 1), BV32_AND(BV32_ASHR(v0, 4), 1)), 31)), 2)), 409)];
  v27 := BV16_SEXT32(BV_CONCAT(v26, v25));
  assert {:sourceloc} {:sourceloc_num 35} true;
  v28 := $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v1, 34), 2), BV32_MUL(BV32_OR(BV32_AND(v0, -32), BV32_AND(BV32_OR(BV32_SHL(v0, 1), BV32_AND(BV32_ASHR(v0, 4), 1)), 31)), 2)), 476)];
  assert {:sourceloc} {:sourceloc_num 36} true;
  v29 := $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v1, 34), 2), BV32_MUL(BV32_OR(BV32_AND(v0, -32), BV32_AND(BV32_OR(BV32_SHL(v0, 1), BV32_AND(BV32_ASHR(v0, 4), 1)), 31)), 2)), 477)];
  v30 := BV32_MUL(BV32_ADD(v10, v21), 23170);
  v31 := BV32_MUL(BV32_SUB(v10, v21), 23170);
  v32 := BV32_SUB(BV32_MUL(v15, 12540), BV32_MUL(v27, 30274));
  v33 := BV32_ADD(BV32_MUL(v27, 12540), BV32_MUL(v15, 30274));
  v34 := BV32_ADD(v30, v33);
  v35 := BV32_ADD(v31, v32);
  v36 := BV32_SUB(v31, v32);
  v37 := BV32_SUB(v30, v33);
  v38 := BV32_ASHR(BV32_ADD(BV32_MUL(BV32_ADD(v18, v24), 23170), 4096), 13);
  v39 := BV32_ASHR(BV32_ADD(BV32_MUL(BV32_SUB(v18, v24), 23170), 4096), 13);
  v40 := BV32_SHL(BV16_SEXT32(BV_CONCAT(v12, v11)), 2);
  v41 := BV32_SHL(BV16_SEXT32(BV_CONCAT(v29, v28)), 2);
  v42 := BV32_ADD(v40, v38);
  v43 := BV32_ADD(v41, v39);
  v44 := BV32_SUB(v40, v38);
  v45 := BV32_SUB(v41, v39);
  v46 := BV32_ADD(BV32_MUL(v42, 8035), BV32_MUL(v43, 1598));
  v47 := BV32_SUB(BV32_MUL(v42, 1598), BV32_MUL(v43, 8035));
  v48 := BV32_ADD(BV32_MUL(v44, 4551), BV32_MUL(v45, 6811));
  v49 := BV32_SUB(BV32_MUL(v44, 6811), BV32_MUL(v45, 4551));
  v50 := BV_EXTRACT(BV32_ASHR(BV32_ADD(BV32_ADD(v34, v46), 32768), 16), 16, 0);
  assert {:sourceloc} {:sourceloc_num 37} true;
  $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_MUL(BV32_MUL(v1, 34), 2), BV32_MUL(BV32_OR(BV32_AND(v0, -32), BV32_AND(BV32_OR(BV32_SHL(v0, 1), BV32_AND(BV32_ASHR(v0, 4), 1)), 31)), 2))] := BV_EXTRACT(v50, 8, 0);
  assert {:sourceloc} {:sourceloc_num 38} true;
  $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v1, 34), 2), BV32_MUL(BV32_OR(BV32_AND(v0, -32), BV32_AND(BV32_OR(BV32_SHL(v0, 1), BV32_AND(BV32_ASHR(v0, 4), 1)), 31)), 2)), 1)] := BV_EXTRACT(v50, 16, 8);
  v51 := BV_EXTRACT(BV32_ASHR(BV32_ADD(BV32_ADD(v35, v49), 32768), 16), 16, 0);
  assert {:sourceloc} {:sourceloc_num 39} true;
  $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v1, 34), 2), BV32_MUL(BV32_OR(BV32_AND(v0, -32), BV32_AND(BV32_OR(BV32_SHL(v0, 1), BV32_AND(BV32_ASHR(v0, 4), 1)), 31)), 2)), 68)] := BV_EXTRACT(v51, 8, 0);
  assert {:sourceloc} {:sourceloc_num 40} true;
  $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v1, 34), 2), BV32_MUL(BV32_OR(BV32_AND(v0, -32), BV32_AND(BV32_OR(BV32_SHL(v0, 1), BV32_AND(BV32_ASHR(v0, 4), 1)), 31)), 2)), 69)] := BV_EXTRACT(v51, 16, 8);
  v52 := BV_EXTRACT(BV32_ASHR(BV32_ADD(BV32_ADD(v36, v48), 32768), 16), 16, 0);
  assert {:sourceloc} {:sourceloc_num 41} true;
  $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v1, 34), 2), BV32_MUL(BV32_OR(BV32_AND(v0, -32), BV32_AND(BV32_OR(BV32_SHL(v0, 1), BV32_AND(BV32_ASHR(v0, 4), 1)), 31)), 2)), 136)] := BV_EXTRACT(v52, 8, 0);
  assert {:sourceloc} {:sourceloc_num 42} true;
  $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v1, 34), 2), BV32_MUL(BV32_OR(BV32_AND(v0, -32), BV32_AND(BV32_OR(BV32_SHL(v0, 1), BV32_AND(BV32_ASHR(v0, 4), 1)), 31)), 2)), 137)] := BV_EXTRACT(v52, 16, 8);
  v53 := BV_EXTRACT(BV32_ASHR(BV32_ADD(BV32_ADD(v37, v47), 32768), 16), 16, 0);
  assert {:sourceloc} {:sourceloc_num 43} true;
  $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v1, 34), 2), BV32_MUL(BV32_OR(BV32_AND(v0, -32), BV32_AND(BV32_OR(BV32_SHL(v0, 1), BV32_AND(BV32_ASHR(v0, 4), 1)), 31)), 2)), 204)] := BV_EXTRACT(v53, 8, 0);
  assert {:sourceloc} {:sourceloc_num 44} true;
  $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v1, 34), 2), BV32_MUL(BV32_OR(BV32_AND(v0, -32), BV32_AND(BV32_OR(BV32_SHL(v0, 1), BV32_AND(BV32_ASHR(v0, 4), 1)), 31)), 2)), 205)] := BV_EXTRACT(v53, 16, 8);
  v54 := BV_EXTRACT(BV32_ASHR(BV32_ADD(BV32_SUB(v37, v47), 32768), 16), 16, 0);
  assert {:sourceloc} {:sourceloc_num 45} true;
  $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v1, 34), 2), BV32_MUL(BV32_OR(BV32_AND(v0, -32), BV32_AND(BV32_OR(BV32_SHL(v0, 1), BV32_AND(BV32_ASHR(v0, 4), 1)), 31)), 2)), 272)] := BV_EXTRACT(v54, 8, 0);
  assert {:sourceloc} {:sourceloc_num 46} true;
  $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v1, 34), 2), BV32_MUL(BV32_OR(BV32_AND(v0, -32), BV32_AND(BV32_OR(BV32_SHL(v0, 1), BV32_AND(BV32_ASHR(v0, 4), 1)), 31)), 2)), 273)] := BV_EXTRACT(v54, 16, 8);
  v55 := BV_EXTRACT(BV32_ASHR(BV32_ADD(BV32_SUB(v36, v48), 32768), 16), 16, 0);
  assert {:sourceloc} {:sourceloc_num 47} true;
  $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v1, 34), 2), BV32_MUL(BV32_OR(BV32_AND(v0, -32), BV32_AND(BV32_OR(BV32_SHL(v0, 1), BV32_AND(BV32_ASHR(v0, 4), 1)), 31)), 2)), 340)] := BV_EXTRACT(v55, 8, 0);
  assert {:sourceloc} {:sourceloc_num 48} true;
  $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v1, 34), 2), BV32_MUL(BV32_OR(BV32_AND(v0, -32), BV32_AND(BV32_OR(BV32_SHL(v0, 1), BV32_AND(BV32_ASHR(v0, 4), 1)), 31)), 2)), 341)] := BV_EXTRACT(v55, 16, 8);
  v56 := BV_EXTRACT(BV32_ASHR(BV32_ADD(BV32_SUB(v35, v49), 32768), 16), 16, 0);
  assert {:sourceloc} {:sourceloc_num 49} true;
  $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v1, 34), 2), BV32_MUL(BV32_OR(BV32_AND(v0, -32), BV32_AND(BV32_OR(BV32_SHL(v0, 1), BV32_AND(BV32_ASHR(v0, 4), 1)), 31)), 2)), 408)] := BV_EXTRACT(v56, 8, 0);
  assert {:sourceloc} {:sourceloc_num 50} true;
  $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v1, 34), 2), BV32_MUL(BV32_OR(BV32_AND(v0, -32), BV32_AND(BV32_OR(BV32_SHL(v0, 1), BV32_AND(BV32_ASHR(v0, 4), 1)), 31)), 2)), 409)] := BV_EXTRACT(v56, 16, 8);
  v57 := BV_EXTRACT(BV32_ASHR(BV32_ADD(BV32_SUB(v34, v46), 32768), 16), 16, 0);
  assert {:sourceloc} {:sourceloc_num 51} true;
  $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v1, 34), 2), BV32_MUL(BV32_OR(BV32_AND(v0, -32), BV32_AND(BV32_OR(BV32_SHL(v0, 1), BV32_AND(BV32_ASHR(v0, 4), 1)), 31)), 2)), 476)] := BV_EXTRACT(v57, 8, 0);
  assert {:sourceloc} {:sourceloc_num 52} true;
  $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v1, 34), 2), BV32_MUL(BV32_OR(BV32_AND(v0, -32), BV32_AND(BV32_OR(BV32_SHL(v0, 1), BV32_AND(BV32_ASHR(v0, 4), 1)), 31)), 2)), 477)] := BV_EXTRACT(v57, 16, 8);
  call {:sourceloc_num 53} $bugle_barrier(-1, -1);
  assert {:sourceloc} {:sourceloc_num 54} true;
  v58 := $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_MUL(BV32_MUL(v0, 34), 2), BV32_MUL(v1, 2))];
  assert {:sourceloc} {:sourceloc_num 55} true;
  v59 := $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v0, 34), 2), BV32_MUL(v1, 2)), 1)];
  assert {:sourceloc} {:sourceloc_num 56} true;
  v60 := $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v0, 34), 2), BV32_MUL(v1, 2)), 2)];
  assert {:sourceloc} {:sourceloc_num 57} true;
  v61 := $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v0, 34), 2), BV32_MUL(v1, 2)), 3)];
  assert {:sourceloc} {:sourceloc_num 58} true;
  $$sh0.i[0] := v58;
  assert {:sourceloc} {:sourceloc_num 59} true;
  $$sh0.i[1] := v59;
  assert {:sourceloc} {:sourceloc_num 60} true;
  $$sh0.i[2] := v60;
  assert {:sourceloc} {:sourceloc_num 61} true;
  $$sh0.i[3] := v61;
  assert {:sourceloc} {:sourceloc_num 62} true;
  v62 := $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v0, 34), 2), BV32_MUL(v1, 2)), 4)];
  assert {:sourceloc} {:sourceloc_num 63} true;
  v63 := $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v0, 34), 2), BV32_MUL(v1, 2)), 5)];
  assert {:sourceloc} {:sourceloc_num 64} true;
  v64 := $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v0, 34), 2), BV32_MUL(v1, 2)), 6)];
  assert {:sourceloc} {:sourceloc_num 65} true;
  v65 := $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v0, 34), 2), BV32_MUL(v1, 2)), 7)];
  assert {:sourceloc} {:sourceloc_num 66} true;
  $$sh1.i[0] := v62;
  assert {:sourceloc} {:sourceloc_num 67} true;
  $$sh1.i[1] := v63;
  assert {:sourceloc} {:sourceloc_num 68} true;
  $$sh1.i[2] := v64;
  assert {:sourceloc} {:sourceloc_num 69} true;
  $$sh1.i[3] := v65;
  assert {:sourceloc} {:sourceloc_num 70} true;
  v66 := $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v0, 34), 2), BV32_MUL(v1, 2)), 8)];
  assert {:sourceloc} {:sourceloc_num 71} true;
  v67 := $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v0, 34), 2), BV32_MUL(v1, 2)), 9)];
  assert {:sourceloc} {:sourceloc_num 72} true;
  v68 := $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v0, 34), 2), BV32_MUL(v1, 2)), 10)];
  assert {:sourceloc} {:sourceloc_num 73} true;
  v69 := $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v0, 34), 2), BV32_MUL(v1, 2)), 11)];
  assert {:sourceloc} {:sourceloc_num 74} true;
  $$sh2.i[0] := v66;
  assert {:sourceloc} {:sourceloc_num 75} true;
  $$sh2.i[1] := v67;
  assert {:sourceloc} {:sourceloc_num 76} true;
  $$sh2.i[2] := v68;
  assert {:sourceloc} {:sourceloc_num 77} true;
  $$sh2.i[3] := v69;
  assert {:sourceloc} {:sourceloc_num 78} true;
  v70 := $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v0, 34), 2), BV32_MUL(v1, 2)), 12)];
  assert {:sourceloc} {:sourceloc_num 79} true;
  v71 := $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v0, 34), 2), BV32_MUL(v1, 2)), 13)];
  assert {:sourceloc} {:sourceloc_num 80} true;
  v72 := $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v0, 34), 2), BV32_MUL(v1, 2)), 14)];
  assert {:sourceloc} {:sourceloc_num 81} true;
  v73 := $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v0, 34), 2), BV32_MUL(v1, 2)), 15)];
  assert {:sourceloc} {:sourceloc_num 82} true;
  $$sh3.i[0] := v70;
  assert {:sourceloc} {:sourceloc_num 83} true;
  $$sh3.i[1] := v71;
  assert {:sourceloc} {:sourceloc_num 84} true;
  $$sh3.i[2] := v72;
  assert {:sourceloc} {:sourceloc_num 85} true;
  $$sh3.i[3] := v73;
  assert {:sourceloc} {:sourceloc_num 86} true;
  v74 := $$sh0.i[0];
  assert {:sourceloc} {:sourceloc_num 87} true;
  v75 := $$sh0.i[1];
  v76 := BV16_SEXT32(BV_CONCAT(v75, v74));
  assert {:sourceloc} {:sourceloc_num 88} true;
  v77 := $$sh0.i[2];
  assert {:sourceloc} {:sourceloc_num 89} true;
  v78 := $$sh0.i[3];
  assert {:sourceloc} {:sourceloc_num 90} true;
  v79 := $$sh1.i[0];
  assert {:sourceloc} {:sourceloc_num 91} true;
  v80 := $$sh1.i[1];
  v81 := BV16_SEXT32(BV_CONCAT(v80, v79));
  assert {:sourceloc} {:sourceloc_num 92} true;
  v82 := $$sh1.i[2];
  assert {:sourceloc} {:sourceloc_num 93} true;
  v83 := $$sh1.i[3];
  v84 := BV16_SEXT32(BV_CONCAT(v83, v82));
  assert {:sourceloc} {:sourceloc_num 94} true;
  v85 := $$sh2.i[0];
  assert {:sourceloc} {:sourceloc_num 95} true;
  v86 := $$sh2.i[1];
  v87 := BV16_SEXT32(BV_CONCAT(v86, v85));
  assert {:sourceloc} {:sourceloc_num 96} true;
  v88 := $$sh2.i[2];
  assert {:sourceloc} {:sourceloc_num 97} true;
  v89 := $$sh2.i[3];
  v90 := BV16_SEXT32(BV_CONCAT(v89, v88));
  assert {:sourceloc} {:sourceloc_num 98} true;
  v91 := $$sh3.i[0];
  assert {:sourceloc} {:sourceloc_num 99} true;
  v92 := $$sh3.i[1];
  v93 := BV16_SEXT32(BV_CONCAT(v92, v91));
  assert {:sourceloc} {:sourceloc_num 100} true;
  v94 := $$sh3.i[2];
  assert {:sourceloc} {:sourceloc_num 101} true;
  v95 := $$sh3.i[3];
  v96 := BV32_MUL(BV32_ADD(v76, v87), 23170);
  v97 := BV32_MUL(BV32_SUB(v76, v87), 23170);
  v98 := BV32_SUB(BV32_MUL(v81, 12540), BV32_MUL(v93, 30274));
  v99 := BV32_ADD(BV32_MUL(v93, 12540), BV32_MUL(v81, 30274));
  v100 := BV32_ADD(v96, v99);
  v101 := BV32_ADD(v97, v98);
  v102 := BV32_SUB(v97, v98);
  v103 := BV32_SUB(v96, v99);
  v104 := BV32_ASHR(BV32_ADD(BV32_MUL(BV32_ADD(v84, v90), 23170), 4096), 13);
  v105 := BV32_ASHR(BV32_ADD(BV32_MUL(BV32_SUB(v84, v90), 23170), 4096), 13);
  v106 := BV32_SHL(BV16_SEXT32(BV_CONCAT(v78, v77)), 2);
  v107 := BV32_SHL(BV16_SEXT32(BV_CONCAT(v95, v94)), 2);
  v108 := BV32_ADD(v106, v104);
  v109 := BV32_ADD(v107, v105);
  v110 := BV32_SUB(v106, v104);
  v111 := BV32_SUB(v107, v105);
  v112 := BV32_ADD(BV32_MUL(v108, 8035), BV32_MUL(v109, 1598));
  v113 := BV32_SUB(BV32_MUL(v108, 1598), BV32_MUL(v109, 8035));
  v114 := BV32_ADD(BV32_MUL(v110, 4551), BV32_MUL(v111, 6811));
  v115 := BV32_SUB(BV32_MUL(v110, 6811), BV32_MUL(v111, 4551));
  v116 := BV_EXTRACT(BV32_ASHR(BV32_ADD(BV32_ADD(v100, v112), 32768), 16), 16, 0);
  assert {:sourceloc} {:sourceloc_num 102} true;
  $$sh0.i[0] := BV_EXTRACT(v116, 8, 0);
  assert {:sourceloc} {:sourceloc_num 103} true;
  $$sh0.i[1] := BV_EXTRACT(v116, 16, 8);
  v117 := BV_EXTRACT(BV32_ASHR(BV32_ADD(BV32_ADD(v101, v115), 32768), 16), 16, 0);
  assert {:sourceloc} {:sourceloc_num 104} true;
  $$sh0.i[2] := BV_EXTRACT(v117, 8, 0);
  assert {:sourceloc} {:sourceloc_num 105} true;
  $$sh0.i[3] := BV_EXTRACT(v117, 16, 8);
  v118 := BV_EXTRACT(BV32_ASHR(BV32_ADD(BV32_ADD(v102, v114), 32768), 16), 16, 0);
  assert {:sourceloc} {:sourceloc_num 106} true;
  $$sh1.i[0] := BV_EXTRACT(v118, 8, 0);
  assert {:sourceloc} {:sourceloc_num 107} true;
  $$sh1.i[1] := BV_EXTRACT(v118, 16, 8);
  v119 := BV_EXTRACT(BV32_ASHR(BV32_ADD(BV32_ADD(v103, v113), 32768), 16), 16, 0);
  assert {:sourceloc} {:sourceloc_num 108} true;
  $$sh1.i[2] := BV_EXTRACT(v119, 8, 0);
  assert {:sourceloc} {:sourceloc_num 109} true;
  $$sh1.i[3] := BV_EXTRACT(v119, 16, 8);
  v120 := BV_EXTRACT(BV32_ASHR(BV32_ADD(BV32_SUB(v103, v113), 32768), 16), 16, 0);
  assert {:sourceloc} {:sourceloc_num 110} true;
  $$sh2.i[0] := BV_EXTRACT(v120, 8, 0);
  assert {:sourceloc} {:sourceloc_num 111} true;
  $$sh2.i[1] := BV_EXTRACT(v120, 16, 8);
  v121 := BV_EXTRACT(BV32_ASHR(BV32_ADD(BV32_SUB(v102, v114), 32768), 16), 16, 0);
  assert {:sourceloc} {:sourceloc_num 112} true;
  $$sh2.i[2] := BV_EXTRACT(v121, 8, 0);
  assert {:sourceloc} {:sourceloc_num 113} true;
  $$sh2.i[3] := BV_EXTRACT(v121, 16, 8);
  v122 := BV_EXTRACT(BV32_ASHR(BV32_ADD(BV32_SUB(v101, v115), 32768), 16), 16, 0);
  assert {:sourceloc} {:sourceloc_num 114} true;
  $$sh3.i[0] := BV_EXTRACT(v122, 8, 0);
  assert {:sourceloc} {:sourceloc_num 115} true;
  $$sh3.i[1] := BV_EXTRACT(v122, 16, 8);
  v123 := BV_EXTRACT(BV32_ASHR(BV32_ADD(BV32_SUB(v100, v112), 32768), 16), 16, 0);
  assert {:sourceloc} {:sourceloc_num 116} true;
  $$sh3.i[2] := BV_EXTRACT(v123, 8, 0);
  assert {:sourceloc} {:sourceloc_num 117} true;
  $$sh3.i[3] := BV_EXTRACT(v123, 16, 8);
  assert {:sourceloc} {:sourceloc_num 118} true;
  v124 := $$sh0.i[0];
  assert {:sourceloc} {:sourceloc_num 119} true;
  v125 := $$sh0.i[1];
  assert {:sourceloc} {:sourceloc_num 120} true;
  v126 := $$sh0.i[2];
  assert {:sourceloc} {:sourceloc_num 121} true;
  v127 := $$sh0.i[3];
  assert {:sourceloc} {:sourceloc_num 122} true;
  $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_MUL(BV32_MUL(v0, 34), 2), BV32_MUL(v1, 2))] := v124;
  assert {:sourceloc} {:sourceloc_num 123} true;
  $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v0, 34), 2), BV32_MUL(v1, 2)), 1)] := v125;
  assert {:sourceloc} {:sourceloc_num 124} true;
  $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v0, 34), 2), BV32_MUL(v1, 2)), 2)] := v126;
  assert {:sourceloc} {:sourceloc_num 125} true;
  $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v0, 34), 2), BV32_MUL(v1, 2)), 3)] := v127;
  assert {:sourceloc} {:sourceloc_num 126} true;
  v128 := $$sh1.i[0];
  assert {:sourceloc} {:sourceloc_num 127} true;
  v129 := $$sh1.i[1];
  assert {:sourceloc} {:sourceloc_num 128} true;
  v130 := $$sh1.i[2];
  assert {:sourceloc} {:sourceloc_num 129} true;
  v131 := $$sh1.i[3];
  assert {:sourceloc} {:sourceloc_num 130} true;
  $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v0, 34), 2), BV32_MUL(v1, 2)), 4)] := v128;
  assert {:sourceloc} {:sourceloc_num 131} true;
  $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v0, 34), 2), BV32_MUL(v1, 2)), 5)] := v129;
  assert {:sourceloc} {:sourceloc_num 132} true;
  $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v0, 34), 2), BV32_MUL(v1, 2)), 6)] := v130;
  assert {:sourceloc} {:sourceloc_num 133} true;
  $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v0, 34), 2), BV32_MUL(v1, 2)), 7)] := v131;
  assert {:sourceloc} {:sourceloc_num 134} true;
  v132 := $$sh2.i[0];
  assert {:sourceloc} {:sourceloc_num 135} true;
  v133 := $$sh2.i[1];
  assert {:sourceloc} {:sourceloc_num 136} true;
  v134 := $$sh2.i[2];
  assert {:sourceloc} {:sourceloc_num 137} true;
  v135 := $$sh2.i[3];
  assert {:sourceloc} {:sourceloc_num 138} true;
  $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v0, 34), 2), BV32_MUL(v1, 2)), 8)] := v132;
  assert {:sourceloc} {:sourceloc_num 139} true;
  $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v0, 34), 2), BV32_MUL(v1, 2)), 9)] := v133;
  assert {:sourceloc} {:sourceloc_num 140} true;
  $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v0, 34), 2), BV32_MUL(v1, 2)), 10)] := v134;
  assert {:sourceloc} {:sourceloc_num 141} true;
  $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v0, 34), 2), BV32_MUL(v1, 2)), 11)] := v135;
  assert {:sourceloc} {:sourceloc_num 142} true;
  v136 := $$sh3.i[0];
  assert {:sourceloc} {:sourceloc_num 143} true;
  v137 := $$sh3.i[1];
  assert {:sourceloc} {:sourceloc_num 144} true;
  v138 := $$sh3.i[2];
  assert {:sourceloc} {:sourceloc_num 145} true;
  v139 := $$sh3.i[3];
  assert {:sourceloc} {:sourceloc_num 146} true;
  $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v0, 34), 2), BV32_MUL(v1, 2)), 12)] := v136;
  assert {:sourceloc} {:sourceloc_num 147} true;
  $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v0, 34), 2), BV32_MUL(v1, 2)), 13)] := v137;
  assert {:sourceloc} {:sourceloc_num 148} true;
  $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v0, 34), 2), BV32_MUL(v1, 2)), 14)] := v138;
  assert {:sourceloc} {:sourceloc_num 149} true;
  $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v0, 34), 2), BV32_MUL(v1, 2)), 15)] := v139;
  call {:sourceloc_num 150} $bugle_barrier(-1, -1);
  v140 := BV32_SLT(v0, 16);
  goto $truebb1, $falsebb1;
$7:
  assert {:block_sourceloc} {:sourceloc_num 151} true;
  $i1.0 := 0;
  goto $8;
$8:
  assert {:block_sourceloc} {:sourceloc_num 152} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 153} (if (_WRITE_HAS_OCCURRED_$$SrcDst ==> BV32_UREM(BV32_UDIV(BV32_SUB(_WATCHED_OFFSET, BV32_MUL(BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(group_id_y, 32), v1), $ImgStride), BV32_ADD(BV32_MUL(group_id_x, 32), BV32_MUL(v0, 2))), 2)), 4), BV32_SDIV($ImgStride, 2)) == 0) then 1 else 0) != 0;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 154} (if (_WRITE_HAS_OCCURRED_$$SrcDst ==> BV32_ULT(BV32_UDIV(BV32_UDIV(BV32_SUB(_WATCHED_OFFSET, BV32_MUL(BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(group_id_y, 32), v1), $ImgStride), BV32_ADD(BV32_MUL(group_id_x, 32), BV32_MUL(v0, 2))), 2)), 4), BV32_SDIV($ImgStride, 2)), 8)) then 1 else 0) != 0;
  v141 := BV32_SLT($i1.0, 8);
  goto $truebb2, $falsebb2;
$9:
  assert {:block_sourceloc} {:sourceloc_num 155} true;
  assert {:sourceloc} {:sourceloc_num 156} true;
  v142 := $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(v1, 34), BV32_MUL(v0, 2)), 2), BV32_MUL(BV32_MUL($i1.0, 17), 4))];
  assert {:sourceloc} {:sourceloc_num 157} true;
  v143 := $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(v1, 34), BV32_MUL(v0, 2)), 2), BV32_MUL(BV32_MUL($i1.0, 17), 4)), 1)];
  assert {:sourceloc} {:sourceloc_num 158} true;
  v144 := $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(v1, 34), BV32_MUL(v0, 2)), 2), BV32_MUL(BV32_MUL($i1.0, 17), 4)), 2)];
  assert {:sourceloc} {:sourceloc_num 159} true;
  v145 := $$_ZZ19CUDAkernelShortIDCTPsiE5block[BV32_ADD(BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(v1, 34), BV32_MUL(v0, 2)), 2), BV32_MUL(BV32_MUL($i1.0, 17), 4)), 3)];
  assert {:sourceloc} {:sourceloc_num 160} true;
  $$SrcDst[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(group_id_y, 32), v1), $ImgStride), BV32_ADD(BV32_MUL(group_id_x, 32), BV32_MUL(v0, 2))), 2), BV32_MUL(BV32_MUL($i1.0, BV32_SDIV($ImgStride, 2)), 4))] := v142;
  assert {:sourceloc} {:sourceloc_num 161} true;
  $$SrcDst[BV32_ADD(BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(group_id_y, 32), v1), $ImgStride), BV32_ADD(BV32_MUL(group_id_x, 32), BV32_MUL(v0, 2))), 2), BV32_MUL(BV32_MUL($i1.0, BV32_SDIV($ImgStride, 2)), 4)), 1)] := v143;
  assert {:sourceloc} {:sourceloc_num 162} true;
  $$SrcDst[BV32_ADD(BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(group_id_y, 32), v1), $ImgStride), BV32_ADD(BV32_MUL(group_id_x, 32), BV32_MUL(v0, 2))), 2), BV32_MUL(BV32_MUL($i1.0, BV32_SDIV($ImgStride, 2)), 4)), 2)] := v144;
  assert {:sourceloc} {:sourceloc_num 163} true;
  $$SrcDst[BV32_ADD(BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(group_id_y, 32), v1), $ImgStride), BV32_ADD(BV32_MUL(group_id_x, 32), BV32_MUL(v0, 2))), 2), BV32_MUL(BV32_MUL($i1.0, BV32_SDIV($ImgStride, 2)), 4)), 3)] := v145;
  goto $10;
$10:
  assert {:block_sourceloc} {:sourceloc_num 164} true;
  $i1.0 := BV32_ADD($i1.0, 1);
  goto $8;
$11:
  assert {:block_sourceloc} {:sourceloc_num 165} true;
  goto $12;
$12:
  assert {:block_sourceloc} {:sourceloc_num 166} true;
  return;
$truebb:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 167} true;
  goto $1;
$falsebb:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 168} true;
  goto $6;
$truebb0:
  assume {:partition} v3;
  assert {:block_sourceloc} {:sourceloc_num 169} true;
  goto $3;
$falsebb0:
  assume {:partition} !v3;
  assert {:block_sourceloc} {:sourceloc_num 170} true;
  goto $5;
$truebb1:
  assume {:partition} v140;
  assert {:block_sourceloc} {:sourceloc_num 171} true;
  goto $7;
$falsebb1:
  assume {:partition} !v140;
  assert {:block_sourceloc} {:sourceloc_num 172} true;
  goto $12;
$truebb2:
  assume {:partition} v141;
  assert {:block_sourceloc} {:sourceloc_num 173} true;
  goto $9;
$falsebb2:
  assume {:partition} !v141;
  assert {:block_sourceloc} {:sourceloc_num 174} true;
  goto $11;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:int, $1:int);
axiom (if group_size_x == 8 then 1 else 0) != 0;
axiom (if group_size_y == 4 then 1 else 0) != 0;
axiom (if group_size_z == 4 then 1 else 0) != 0;
axiom (if num_groups_x == 16 then 1 else 0) != 0;
axiom (if num_groups_y == 16 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
