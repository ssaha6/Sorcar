type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
procedure _ATOMIC_OP8(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "Dst"} {:global} $$Dst : [int]int;
axiom {:array_info "$$Dst"} {:global} {:elem_width 32} {:source_name "Dst"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$Dst : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$Dst : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$Dst : bool;

var {:source_name ""} $$0 : [int]int;
axiom {:array_info "$$0"} {:elem_width 8} {:source_name ""} {:source_elem_width 96} {:source_dimensions "1"} true;

var {:source_name "TexSrc"} {:global} $$TexSrc : [int]int;
axiom {:array_info "$$TexSrc"} {:global} {:elem_width 8} {:source_name "TexSrc"} {:source_elem_width 96} {:source_dimensions "1"} true;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 96} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$TexSrc : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 96} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$TexSrc : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 96} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$TexSrc : bool;

var {:source_name "CurBlockLocal1"} {:group_shared} $$CurBlockLocal1 : [int]int;
axiom {:array_info "$$CurBlockLocal1"} {:group_shared} {:elem_width 32} {:source_name "CurBlockLocal1"} {:source_elem_width 32} {:source_dimensions "64"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$CurBlockLocal1 : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$CurBlockLocal1 : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$CurBlockLocal1 : bool;

var {:source_name "DCTv8matrix"} {:constant} $$DCTv8matrix : [int]int;
axiom {:array_info "$$DCTv8matrix"} {:constant} {:elem_width 32} {:source_name "DCTv8matrix"} {:source_elem_width 32} {:source_dimensions "64"} true;

var {:source_name "CurBlockLocal2"} {:group_shared} $$CurBlockLocal2 : [int]int;
axiom {:array_info "$$CurBlockLocal2"} {:group_shared} {:elem_width 32} {:source_name "CurBlockLocal2"} {:source_elem_width 32} {:source_dimensions "64"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$CurBlockLocal2 : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$CurBlockLocal2 : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$CurBlockLocal2 : bool;

const _WATCHED_OFFSET : int;
const {:group_id_x} group_id_x : int;
const {:group_id_y} group_id_y : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:local_id_y} local_id_y : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function BV_CONCAT(int, int) : int;
function FADD32(int, int) : int;
function FMUL32(int, int) : int;
function SI32_TO_FP32(int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SHL(x : int, y : int) : int {
  if x >= 0 && y == 1 then x*2 else BV32_SHL_UF(x,y)
}
function BV32_SHL_UF(int, int) : int;
function {:inline true} BV32_SLT(x : int, y : int) : bool {
  x < y
}
procedure {:source_name "CUDAkernel1DCT"} {:kernel} $_Z14CUDAkernel1DCTPfiii($ImgWidth:int, $OffsetXBlocks:int, $OffsetYBlocks:int)
requires {:sourceloc_num 0} (if $ImgWidth == 512 then 1 else 0) != 0;
{
  var $curelem.0:int;
  var $DCTv8matrixIndex.0:int;
  var $CurBlockLocal1Index.0:int;
  var $i.0:int;
  var $curelem.1:int;
  var $DCTv8matrixIndex.1:int;
  var $CurBlockLocal2Index.0:int;
  var $i1.0:int;
  var v0:int;
  var v1:int;
  var v4:int;
  var v2:int;
  var v3:int;
  var v12:int;
  var v5:int;
  var v6:int;
  var v7:int;
  var v8:int;
  var v9:int;
  var v10:int;
  var v11:int;
  var v13:int;
  var v14:int;
  var v15:int;
  var v16:int;
  var v17:int;
  var v18:int;
  var v19:int;
  var v20:int;
  var v21:int;
  var v22:int;
  var v23:int;
  var v24:int;
  var v25:int;
  var v26:int;
  var v27:bool;
  var v28:int;
  var v29:int;
  var v30:bool;
  var v31:int;
  var v32:int;
  var v33:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  v0 := BV32_ADD(group_id_x, $OffsetXBlocks);
  v1 := BV32_ADD(group_id_y, $OffsetYBlocks);
  assert {:sourceloc} {:sourceloc_num 2} true;
  v2 := $$TexSrc[0];
  assert {:sourceloc} {:sourceloc_num 3} true;
  $$0[0] := v2;
  assert {:sourceloc} {:sourceloc_num 4} true;
  v3 := $$TexSrc[1];
  assert {:sourceloc} {:sourceloc_num 5} true;
  $$0[1] := v3;
  assert {:sourceloc} {:sourceloc_num 6} true;
  v4 := $$TexSrc[2];
  assert {:sourceloc} {:sourceloc_num 7} true;
  $$0[2] := v4;
  assert {:sourceloc} {:sourceloc_num 8} true;
  v5 := $$TexSrc[3];
  assert {:sourceloc} {:sourceloc_num 9} true;
  $$0[3] := v5;
  assert {:sourceloc} {:sourceloc_num 10} true;
  v6 := $$TexSrc[4];
  assert {:sourceloc} {:sourceloc_num 11} true;
  $$0[4] := v6;
  assert {:sourceloc} {:sourceloc_num 12} true;
  v7 := $$TexSrc[5];
  assert {:sourceloc} {:sourceloc_num 13} true;
  $$0[5] := v7;
  assert {:sourceloc} {:sourceloc_num 14} true;
  v8 := $$TexSrc[6];
  assert {:sourceloc} {:sourceloc_num 15} true;
  $$0[6] := v8;
  assert {:sourceloc} {:sourceloc_num 16} true;
  v9 := $$TexSrc[7];
  assert {:sourceloc} {:sourceloc_num 17} true;
  $$0[7] := v9;
  assert {:sourceloc} {:sourceloc_num 18} true;
  v10 := $$TexSrc[8];
  assert {:sourceloc} {:sourceloc_num 19} true;
  $$0[8] := v10;
  assert {:sourceloc} {:sourceloc_num 20} true;
  v11 := $$TexSrc[9];
  assert {:sourceloc} {:sourceloc_num 21} true;
  $$0[9] := v11;
  assert {:sourceloc} {:sourceloc_num 22} true;
  v12 := $$TexSrc[10];
  assert {:sourceloc} {:sourceloc_num 23} true;
  $$0[10] := v12;
  assert {:sourceloc} {:sourceloc_num 24} true;
  v13 := $$TexSrc[11];
  assert {:sourceloc} {:sourceloc_num 25} true;
  $$0[11] := v13;
  assert {:sourceloc} {:sourceloc_num 26} true;
  v14 := $$0[0];
  assert {:sourceloc} {:sourceloc_num 27} true;
  v15 := $$0[1];
  assert {:sourceloc} {:sourceloc_num 28} true;
  v16 := $$0[2];
  assert {:sourceloc} {:sourceloc_num 29} true;
  v17 := $$0[3];
  assert {:sourceloc} {:sourceloc_num 30} true;
  v18 := $$0[4];
  assert {:sourceloc} {:sourceloc_num 31} true;
  v19 := $$0[5];
  assert {:sourceloc} {:sourceloc_num 32} true;
  v20 := $$0[6];
  assert {:sourceloc} {:sourceloc_num 33} true;
  v21 := $$0[7];
  assert {:sourceloc} {:sourceloc_num 34} true;
  v22 := $$0[8];
  assert {:sourceloc} {:sourceloc_num 35} true;
  v23 := $$0[9];
  assert {:sourceloc} {:sourceloc_num 36} true;
  v24 := $$0[10];
  assert {:sourceloc} {:sourceloc_num 37} true;
  v25 := $$0[11];
  call {:sourceloc_num 38}   v26 := $_Z5tex2DIfET_7textureIS0_Li2EL19cudaTextureReadMode0EEff(BV_CONCAT(BV_CONCAT(BV_CONCAT(v17, v16), v15), v14), BV_CONCAT(BV_CONCAT(BV_CONCAT(v21, v20), v19), v18), BV_CONCAT(BV_CONCAT(BV_CONCAT(v25, v24), v23), v22), FADD32(SI32_TO_FP32(BV32_ADD(BV32_SHL(v0, 3), local_id_x)), 1056964608), FADD32(SI32_TO_FP32(BV32_ADD(BV32_SHL(v1, 3), local_id_y)), 1056964608));
  assert {:sourceloc} {:sourceloc_num 39} true;
  $$CurBlockLocal1[BV32_ADD(BV32_SHL(local_id_y, 3), local_id_x)] := v26;
  call {:sourceloc_num 40} $bugle_barrier(-1, -1);
  $curelem.0, $DCTv8matrixIndex.0, $CurBlockLocal1Index.0, $i.0 := 0, local_id_y, local_id_x, 0;
  goto $1;
$1:
  assert {:block_sourceloc} {:sourceloc_num 41} true;
  v27 := BV32_SLT($i.0, 8);
  goto $truebb, $falsebb;
$2:
  assert {:block_sourceloc} {:sourceloc_num 42} true;
  assert {:sourceloc} {:sourceloc_num 43} true;
  v28 := $$DCTv8matrix[$DCTv8matrixIndex.0];
  assert {:sourceloc} {:sourceloc_num 44} true;
  v29 := $$CurBlockLocal1[$CurBlockLocal1Index.0];
  goto $3;
$3:
  assert {:block_sourceloc} {:sourceloc_num 45} true;
  $curelem.0, $DCTv8matrixIndex.0, $CurBlockLocal1Index.0, $i.0 := FADD32($curelem.0, FMUL32(v28, v29)), BV32_ADD($DCTv8matrixIndex.0, 8), BV32_ADD($CurBlockLocal1Index.0, 8), BV32_ADD($i.0, 1);
  goto $1;
$4:
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  assert {:sourceloc} {:sourceloc_num 47} true;
  $$CurBlockLocal2[BV32_ADD(BV32_SHL(local_id_y, 3), local_id_x)] := $curelem.0;
  call {:sourceloc_num 48} $bugle_barrier(-1, -1);
  $curelem.1, $DCTv8matrixIndex.1, $CurBlockLocal2Index.0, $i1.0 := 0, local_id_x, BV32_SHL(local_id_y, 3), 0;
  goto $5;
$5:
  assert {:block_sourceloc} {:sourceloc_num 49} true;
  v30 := BV32_SLT($i1.0, 8);
  goto $truebb0, $falsebb0;
$6:
  assert {:block_sourceloc} {:sourceloc_num 50} true;
  assert {:sourceloc} {:sourceloc_num 51} true;
  v31 := $$CurBlockLocal2[$CurBlockLocal2Index.0];
  assert {:sourceloc} {:sourceloc_num 52} true;
  v32 := $$DCTv8matrix[$DCTv8matrixIndex.1];
  goto $7;
$7:
  assert {:block_sourceloc} {:sourceloc_num 53} true;
  $curelem.1, $DCTv8matrixIndex.1, $CurBlockLocal2Index.0, $i1.0 := FADD32($curelem.1, FMUL32(v31, v32)), BV32_ADD($DCTv8matrixIndex.1, 8), BV32_ADD($CurBlockLocal2Index.0, 1), BV32_ADD($i1.0, 1);
  goto $5;
$8:
  assert {:block_sourceloc} {:sourceloc_num 54} true;
  assert {:sourceloc} {:sourceloc_num 55} true;
  $$CurBlockLocal1[BV32_ADD(BV32_SHL(local_id_y, 3), local_id_x)] := $curelem.1;
  call {:sourceloc_num 56} $bugle_barrier(-1, -1);
  assert {:sourceloc} {:sourceloc_num 57} true;
  v33 := $$CurBlockLocal1[BV32_ADD(BV32_SHL(local_id_y, 3), local_id_x)];
  assert {:sourceloc} {:sourceloc_num 58} true;
  $$Dst[BV32_ADD(BV32_MUL(BV32_ADD(BV32_SHL(v1, 3), local_id_y), $ImgWidth), BV32_ADD(BV32_SHL(v0, 3), local_id_x))] := v33;
  return;
$truebb:
  assume {:partition} v27;
  assert {:block_sourceloc} {:sourceloc_num 59} true;
  goto $2;
$falsebb:
  assume {:partition} !v27;
  assert {:block_sourceloc} {:sourceloc_num 60} true;
  goto $4;
$truebb0:
  assume {:partition} v30;
  assert {:block_sourceloc} {:sourceloc_num 61} true;
  goto $6;
$falsebb0:
  assume {:partition} !v30;
  assert {:block_sourceloc} {:sourceloc_num 62} true;
  goto $8;
}
procedure {:source_name "_Z5tex2DIfET_7textureIS0_Li2EL19cudaTextureReadMode0EEff"} $_Z5tex2DIfET_7textureIS0_Li2EL19cudaTextureReadMode0EEff($0:int, $1:int, $2:int, $3:int, $4:int) returns ($ret:int);
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:int, $1:int);
axiom (if group_size_x == 8 then 1 else 0) != 0;
axiom (if group_size_y == 8 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_x == 64 then 1 else 0) != 0;
axiom (if num_groups_y == 64 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
