type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "inSignal"} {:global} $$inSignal : [int]int;
axiom {:array_info "$$inSignal"} {:global} {:elem_width 32} {:source_name "inSignal"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$inSignal : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$inSignal : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$inSignal : bool;

var {:source_name "coefsSignal"} {:global} $$coefsSignal : [int]int;
axiom {:array_info "$$coefsSignal"} {:global} {:elem_width 32} {:source_name "coefsSignal"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$coefsSignal : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$coefsSignal : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$coefsSignal : bool;

var {:source_name "AverageSignal"} {:global} $$AverageSignal : [int]int;
axiom {:array_info "$$AverageSignal"} {:global} {:elem_width 32} {:source_name "AverageSignal"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$AverageSignal : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$AverageSignal : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$AverageSignal : bool;

var {:source_name "sharedArray"} {:group_shared} $$sharedArray : [int]int;
axiom {:array_info "$$sharedArray"} {:group_shared} {:elem_width 32} {:source_name "sharedArray"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$sharedArray : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$sharedArray : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$sharedArray : bool;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function  BV32_LSHR(int, int) : int;
function FADD32(int, int) : int;
function FDIV32(int, int) : int;
function FMUL32(int, int) : int;
function FSQRT32(int) : int;
function FSUB32(int, int) : int;
function UI32_TO_FP32(int) : int;
function {:inline true} BV1_XOR(x : int, y : int) : int {
  if (x == 1 || x == -1) && (y == 1 || y == -1) then 0 else (
    if (x == 1 || x == -1) && y == 0 then 1 else (
      if x == 0 && (y == 1 || y == -1) then 1 else (
        if x == y then 0 else BV1_XOR_UF(x, y))))
}
function BV1_XOR_UF(int, int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_AND(x : int, y : int) : int {
  if x == y then x else (if x == 0 || y == 0 then 0 else BV32_AND_UF(x, y))
}
function BV32_AND_UF(int, int) : int;
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_SHL(x : int, y : int) : int {
  if x >= 0 && y == 1 then x*2 else BV32_SHL_UF(x,y)
}
function BV32_SHL_UF(int, int) : int;
function {:inline true} BV32_SUB(x : int, y : int) : int {
  x - y
}
function {:inline true} BV32_UDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_UGE(x : int, y : int) : bool {
  x >= y
}
function {:inline true} BV32_UGT(x : int, y : int) : bool {
  x > y
}
function {:inline true} BV32_ULT(x : int, y : int) : bool {
  x < y
}
procedure {:source_name "dwtHaar1D"} {:kernel} $dwtHaar1D($tLevels:int, $signalLength:int, $levelsDone:int, $mLevels:int)
requires {:sourceloc_num 0} (if $signalLength == 1024 then 1 else 0) != 0;
requires {:sourceloc_num 1} (if $tLevels == 6 then 1 else 0) != 0;
requires {:sourceloc_num 2} (if $mLevels == 8 then 1 else 0) != 0;
{
  var $t0.0:int;
  var $t1.0:int;
  var $0:int;
  var $activeThreads.0:int;
  var $midOutPos.0:int;
  var $i.0:int;
  var $data0.0:int;
  var $data1.0:int;
  var $data0.1:int;
  var $data1.1:int;
  var $midOutPos.1:int;
  var v1:int;
  var v2:int;
  var v0:int;
  var v3:int;
  var v4:int;
  var v5:bool;
  var v6:int;
  var v7:bool;
  var v8:int;
  var v9:int;
  var v10:int;
  var v11:bool;
  var v12:bool;
  var v13:int;
  var v14:int;
  var v15:bool;
  var v16:bool;
  var v17:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  v0 := local_id_x;
  v1 := group_id_x;
  v2 := group_size_x;
  assert {:sourceloc} {:sourceloc_num 4} true;
  v3 := $$inSignal[BV32_ADD(BV32_MUL(BV32_MUL(v1, v2), 2), v0)];
  assert {:sourceloc} {:sourceloc_num 5} true;
  v4 := $$inSignal[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v1, v2), 2), v2), v0)];
  v5 := 0 == $levelsDone;
  goto $truebb, $falsebb;
$1:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  v6 := FDIV32(1065353216, FSQRT32(UI32_TO_FP32($signalLength)));
  $t0.0, $t1.0 := FMUL32(v3, v6), FMUL32(v4, v6);
  goto $2;
$2:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  assert {:sourceloc} {:sourceloc_num 8} true;
  $$sharedArray[v0] := $t0.0;
  assert {:sourceloc} {:sourceloc_num 9} true;
  $$sharedArray[BV32_ADD(v2, v0)] := $t1.0;
  call {:sourceloc_num 10} $bugle_barrier(-1, 0);
  v7 := BV32_UGT($tLevels, $mLevels);
  goto $truebb0, $falsebb0;
$3:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  $0 := $mLevels;
  goto $5;
$4:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  $0 := $tLevels;
  goto $5;
$5:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  v8 := FDIV32(1065353216, FSQRT32(1073741824));
  havoc v9;
  havoc v10;
  $activeThreads.0, $midOutPos.0, $i.0, $data0.0, $data1.0 := BV32_SDIV(BV32_SHL(1, BV32_AND($0, 31)), 2), BV32_UDIV($signalLength, 2), 0, v9, v10;
  goto $6;
$6:
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  assert {:originated_from_invariant} {:sourceloc_num 15} (if $activeThreads.0 == BV32_SDIV(BV32_SHL(1, BV32_AND(BV32_SUB($0, $i.0), 31)), 2) then 1 else 0) != 0;
  assert {:originated_from_invariant} {:sourceloc_num 16} (if (BV32_ULT(v0, $activeThreads.0) ==> $midOutPos.0 == BV32_LSHR(BV32_UDIV($signalLength, 2), BV32_AND($i.0, 31))) then 1 else 0) != 0;
  assert {:originated_from_invariant} {:sourceloc_num 17} (if (_WRITE_HAS_OCCURRED_$$coefsSignal ==> BV32_UGE(BV32_UDIV(BV32_MUL(4, _WATCHED_OFFSET), 4), BV32_ADD(BV32_ADD(BV32_SHL($midOutPos.0, 1), BV32_MUL(v1, BV32_SHL($activeThreads.0, 1))), v0))) then 1 else 0) != 0;
  assert {:originated_from_invariant} {:sourceloc_num 18} (if (BV32_UGE(v0, 16) ==> (_WRITE_HAS_OCCURRED_$$coefsSignal ==> BV32_UGE(BV32_UDIV(BV32_MUL(4, _WATCHED_OFFSET), 4), BV32_ADD(BV32_ADD(512, BV32_MUL(v1, 32)), v0)))) then 1 else 0) != 0;
  assert {:originated_from_invariant} {:sourceloc_num 19} (if (BV32_UGE(v0, 8) ==> (_WRITE_HAS_OCCURRED_$$coefsSignal ==> BV32_UGE(BV32_UDIV(BV32_MUL(4, _WATCHED_OFFSET), 4), BV32_ADD(BV32_ADD(256, BV32_MUL(v1, 16)), v0)))) then 1 else 0) != 0;
  assert {:originated_from_invariant} {:sourceloc_num 20} (if (BV32_UGE(v0, 4) ==> (_WRITE_HAS_OCCURRED_$$coefsSignal ==> BV32_UGE(BV32_UDIV(BV32_MUL(4, _WATCHED_OFFSET), 4), BV32_ADD(BV32_ADD(128, BV32_MUL(v1, 8)), v0)))) then 1 else 0) != 0;
  assert {:originated_from_invariant} {:sourceloc_num 21} (if (BV32_UGE(v0, 2) ==> (_WRITE_HAS_OCCURRED_$$coefsSignal ==> BV32_UGE(BV32_UDIV(BV32_MUL(4, _WATCHED_OFFSET), 4), BV32_ADD(BV32_ADD(64, BV32_MUL(v1, 4)), v0)))) then 1 else 0) != 0;
  assert {:originated_from_invariant} {:sourceloc_num 22} (if (BV32_UGE(v0, 1) ==> (_WRITE_HAS_OCCURRED_$$coefsSignal ==> BV32_UGE(BV32_UDIV(BV32_MUL(4, _WATCHED_OFFSET), 4), BV32_ADD(BV32_ADD(32, BV32_MUL(v1, 2)), v0)))) then 1 else 0) != 0;
  assert {:originated_from_invariant} {:sourceloc_num 23} (if (BV32_UGE(v0, BV32_SDIV(BV32_SHL(1, BV32_AND($0, 31)), 2)) ==> BV1_XOR((if _WRITE_HAS_OCCURRED_$$coefsSignal then 1 else 0), -1) == 1) then 1 else 0) != 0;
  v11 := BV32_ULT($i.0, $0);
  goto $truebb1, $falsebb1;
$7:
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  v12 := BV32_ULT(v0, $activeThreads.0);
  goto $truebb2, $falsebb2;
$8:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  assert {:sourceloc} {:sourceloc_num 26} true;
  v13 := $$sharedArray[BV32_MUL(2, v0)];
  assert {:sourceloc} {:sourceloc_num 27} true;
  v14 := $$sharedArray[BV32_ADD(BV32_MUL(2, v0), 1)];
  $data0.1, $data1.1 := v13, v14;
  goto $9;
$9:
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  call {:sourceloc_num 29} $bugle_barrier(-1, 0);
  v15 := BV32_ULT(v0, $activeThreads.0);
  goto $truebb3, $falsebb3;
$10:
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  assert {:sourceloc} {:sourceloc_num 31} true;
  $$sharedArray[v0] := FMUL32(FADD32($data0.1, $data1.1), v8);
  assert {:sourceloc} {:sourceloc_num 32} true;
  $$coefsSignal[BV32_ADD(BV32_ADD($midOutPos.0, BV32_MUL(v1, $activeThreads.0)), v0)] := FMUL32(FSUB32($data0.1, $data1.1), v8);
  $midOutPos.1 := BV32_LSHR($midOutPos.0, 1);
  goto $11;
$11:
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  call {:sourceloc_num 34} $bugle_barrier(-1, 0);
  goto $12;
$12:
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  $activeThreads.0, $midOutPos.0, $i.0, $data0.0, $data1.0 := BV32_LSHR($activeThreads.0, 1), $midOutPos.1, BV32_ADD($i.0, 1), $data0.1, $data1.1;
  goto $6;
$13:
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  v16 := 0 == v0;
  goto $truebb4, $falsebb4;
$14:
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  assert {:sourceloc} {:sourceloc_num 38} true;
  v17 := $$sharedArray[0];
  assert {:sourceloc} {:sourceloc_num 39} true;
  $$AverageSignal[v1] := v17;
  goto $15;
$15:
  assert {:block_sourceloc} {:sourceloc_num 40} true;
  return;
$truebb:
  assume {:partition} v5;
  assert {:block_sourceloc} {:sourceloc_num 41} true;
  goto $1;
$falsebb:
  assume {:partition} !v5;
  assert {:block_sourceloc} {:sourceloc_num 42} true;
  $t0.0, $t1.0 := v3, v4;
  goto $2;
$truebb0:
  assume {:partition} v7;
  assert {:block_sourceloc} {:sourceloc_num 43} true;
  goto $3;
$falsebb0:
  assume {:partition} !v7;
  assert {:block_sourceloc} {:sourceloc_num 44} true;
  goto $4;
$truebb1:
  assume {:partition} v11;
  assert {:block_sourceloc} {:sourceloc_num 45} true;
  goto $7;
$falsebb1:
  assume {:partition} !v11;
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  goto $13;
$truebb2:
  assume {:partition} v12;
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  goto $8;
$falsebb2:
  assume {:partition} !v12;
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  $data0.1, $data1.1 := $data0.0, $data1.0;
  goto $9;
$truebb3:
  assume {:partition} v15;
  assert {:block_sourceloc} {:sourceloc_num 49} true;
  goto $10;
$falsebb3:
  assume {:partition} !v15;
  assert {:block_sourceloc} {:sourceloc_num 50} true;
  $midOutPos.1 := $midOutPos.0;
  goto $11;
$truebb4:
  assume {:partition} v16;
  assert {:block_sourceloc} {:sourceloc_num 51} true;
  goto $14;
$falsebb4:
  assume {:partition} !v16;
  assert {:block_sourceloc} {:sourceloc_num 52} true;
  goto $15;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:int, $1:int);
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 512 then 1 else 0) != 0;
axiom (if num_groups_x == 2 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
