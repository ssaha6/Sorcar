type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "keys"} {:global} $$keys : [int]int;
axiom {:array_info "$$keys"} {:global} {:elem_width 32} {:source_name "keys"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$keys : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$keys : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$keys : bool;

var {:source_name "input"} {:global} $$input : [int]int;
axiom {:array_info "$$input"} {:global} {:elem_width 32} {:source_name "input"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$input : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$input : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$input : bool;

var {:source_name "output"} {:global} $$output : [int]int;
axiom {:array_info "$$output"} {:global} {:elem_width 32} {:source_name "output"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$output : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$output : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$output : bool;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_SGE(x : int, y : int) : bool {
  x >= y
}
function {:inline true} BV32_SUB(x : int, y : int) : int {
  x - y
}
function {:inline true} BV32_UDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_UGT(x : int, y : int) : bool {
  x > y
}
function {:inline true} BV32_UREM(x : int, y : int) : int {
  x mod y
}
procedure {:source_name "binarySearch_mulkeysConcurrent"} {:kernel} $binarySearch_mulkeysConcurrent($inputSize:int, $numSubdivisions:int)
{
  var $lBound.0:int;
  var $uBound.0:int;
  var $lBound.1:int;
  var $uBound.1:int;
  var v0:int;
  var v1:int;
  var v2:bool;
  var v3:int;
  var v5:bool;
  var v4:int;
  var v6:int;
  var v7:bool;
$0:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  v0 := BV32_MUL(BV32_UREM(BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x), $numSubdivisions), BV32_UDIV($inputSize, $numSubdivisions));
  assert {:sourceloc} {:sourceloc_num 1} true;
  v1 := $$keys[BV32_UDIV(BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x), $numSubdivisions)];
  $lBound.0, $uBound.0 := v0, BV32_ADD(v0, BV32_UDIV($inputSize, $numSubdivisions));
  goto $1;
$1:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v2 := BV32_SGE($uBound.0, $lBound.0);
  goto $truebb, $falsebb;
$2:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  v3 := BV32_SDIV(BV32_ADD($lBound.0, $uBound.0), 2);
  assert {:sourceloc} {:sourceloc_num 4} true;
  v4 := $$input[v3];
  v5 := v4 == v1;
  goto $truebb0, $falsebb0;
$3:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  assert {:sourceloc} {:sourceloc_num 6} true;
  $$output[BV32_UDIV(BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x), $numSubdivisions)] := v3;
  goto $9;
$4:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  assert {:sourceloc} {:sourceloc_num 8} true;
  v6 := $$input[v3];
  v7 := BV32_UGT(v6, v1);
  goto $truebb1, $falsebb1;
$5:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  $lBound.1, $uBound.1 := $lBound.0, BV32_SUB(v3, 1);
  goto $7;
$6:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  $lBound.1, $uBound.1 := BV32_ADD(v3, 1), $uBound.0;
  goto $7;
$7:
  assert {:block_sourceloc} true;
  goto $8;
$8:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  $lBound.0, $uBound.0 := $lBound.1, $uBound.1;
  goto $1;
$9:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  return;
$truebb:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  goto $2;
$falsebb:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  goto $9;
$truebb0:
  assume {:partition} v5;
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  goto $3;
$falsebb0:
  assume {:partition} !v5;
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  goto $4;
$truebb1:
  assume {:partition} v7;
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  goto $5;
$falsebb1:
  assume {:partition} !v7;
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  goto $6;
}
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 256 then 1 else 0) != 0;
axiom (if num_groups_x == 2 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
