type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "outputArray"} {:global} $$outputArray : [int]int;
axiom {:array_info "$$outputArray"} {:global} {:elem_width 32} {:source_name "outputArray"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$outputArray : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$outputArray : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$outputArray : bool;

var {:source_name "sortedArray"} {:global} $$sortedArray : [int]int;
axiom {:array_info "$$sortedArray"} {:global} {:elem_width 32} {:source_name "sortedArray"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$sortedArray : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$sortedArray : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$sortedArray : bool;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function __other_bv32(int) : int;
function {:inline true} BV1_ZEXT32(x : int) : int {
  x
}
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SUB(x : int, y : int) : int {
  x - y
}
function {:inline true} BV32_UGT(x : int, y : int) : bool {
  x > y
}
function {:inline true} BV32_ULT(x : int, y : int) : bool {
  x < y
}
procedure {:source_name "binarySearch"} {:kernel} $binarySearch($findMe:int, $globalLowerBound:int, $globalUpperBound:int, $subdivSize:int)
requires {:sourceloc_num 0} (if $subdivSize == 1024 then 1 else 0) != 0;
requires {:sourceloc_num 1} (if $globalLowerBound == 0 then 1 else 0) != 0;
{
  var v0:int;
  var v1:int;
  var v2:int;
  var v3:int;
  var v4:bool;
  var v5:bool;
  var v6:int;
  var v7:int;
  var v8:int;
  var v9:int;
  var v10:int;
  var v11:int;
  var v12:int;
  var v13:int;
  var v14:int;
  var v15:int;
  var v16:int;
  var v17:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v0 := BV32_ADD($globalLowerBound, BV32_MUL($subdivSize, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x)));
  v1 := BV32_SUB(BV32_ADD(v0, $subdivSize), 1);
  assume BV1_ZEXT32((if (BV32_ULT(v0, v1) ==> BV32_ULT($$sortedArray[v0], $$sortedArray[v1])) then 1 else 0)) != 0;
  assume BV1_ZEXT32((if (BV32_ULT(__other_bv32(v1), v0) ==> BV32_ULT($$sortedArray[__other_bv32(v1)], $$sortedArray[v0])) then 1 else 0)) != 0;
  assume BV1_ZEXT32((if (BV32_ULT(v1, __other_bv32(v0)) ==> BV32_ULT($$sortedArray[v1], $$sortedArray[__other_bv32(v0)])) then 1 else 0)) != 0;
  assert {:sourceloc} {:sourceloc_num 3} true;
  v2 := $$sortedArray[v0];
  assert {:sourceloc} {:sourceloc_num 4} true;
  v3 := $$sortedArray[v1];
  v4 := BV32_UGT(v2, $findMe);
  goto $truebb, $falsebb;
$1:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  v5 := BV32_ULT(v3, $findMe);
  goto $truebb0, $falsebb0;
$2:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  goto $4;
$3:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  assert {:sourceloc} {:sourceloc_num 8} true;
  v6 := $$outputArray[0];
  assert {:sourceloc} {:sourceloc_num 9} true;
  v7 := $$outputArray[1];
  assert {:sourceloc} {:sourceloc_num 10} true;
  v8 := $$outputArray[2];
  assert {:sourceloc} {:sourceloc_num 11} true;
  v9 := $$outputArray[3];
  assert {:sourceloc} {:sourceloc_num 12} true;
  $$outputArray[0] := v0;
  assert {:sourceloc} {:sourceloc_num 13} true;
  $$outputArray[1] := v7;
  assert {:sourceloc} {:sourceloc_num 14} true;
  $$outputArray[2] := v8;
  assert {:sourceloc} {:sourceloc_num 15} true;
  $$outputArray[3] := v9;
  assert {:sourceloc} {:sourceloc_num 16} true;
  v10 := $$outputArray[0];
  assert {:sourceloc} {:sourceloc_num 17} true;
  v11 := $$outputArray[1];
  assert {:sourceloc} {:sourceloc_num 18} true;
  v12 := $$outputArray[2];
  assert {:sourceloc} {:sourceloc_num 19} true;
  v13 := $$outputArray[3];
  assert {:sourceloc} {:sourceloc_num 20} true;
  $$outputArray[0] := v10;
  assert {:sourceloc} {:sourceloc_num 21} true;
  $$outputArray[1] := v1;
  assert {:sourceloc} {:sourceloc_num 22} true;
  $$outputArray[2] := v12;
  assert {:sourceloc} {:sourceloc_num 23} true;
  $$outputArray[3] := v13;
  assert {:sourceloc} {:sourceloc_num 24} true;
  v14 := $$outputArray[0];
  assert {:sourceloc} {:sourceloc_num 25} true;
  v15 := $$outputArray[1];
  assert {:sourceloc} {:sourceloc_num 26} true;
  v16 := $$outputArray[2];
  assert {:sourceloc} {:sourceloc_num 27} true;
  v17 := $$outputArray[3];
  assert {:sourceloc} {:sourceloc_num 28} true;
  $$outputArray[0] := v14;
  assert {:sourceloc} {:sourceloc_num 29} true;
  $$outputArray[1] := v15;
  assert {:sourceloc} {:sourceloc_num 30} true;
  $$outputArray[2] := v16;
  assert {:sourceloc} {:sourceloc_num 31} true;
  $$outputArray[3] := 1;
  goto $4;
$4:
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  return;
$truebb:
  assume {:partition} v4;
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  goto $2;
$falsebb:
  assume {:partition} !v4;
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  goto $1;
$truebb0:
  assume {:partition} v5;
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  goto $2;
$falsebb0:
  assume {:partition} !v5;
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  goto $3;
}
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 256 then 1 else 0) != 0;
axiom (if num_groups_x == 2 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
