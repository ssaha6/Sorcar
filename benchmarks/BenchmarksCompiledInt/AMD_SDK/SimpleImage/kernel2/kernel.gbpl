type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "input"} {:global} $$input : [int]int;
axiom {:array_info "$$input"} {:global} {:elem_width 32} {:source_name "input"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$input : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$input : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$input : bool;

var {:source_name "output"} {:global} $$output : [int]int;
axiom {:array_info "$$output"} {:global} {:elem_width 32} {:source_name "output"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$output : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$output : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$output : bool;

var {:source_name "imageSampler"} {:constant} $$imageSampler : [int]int;
axiom {:array_info "$$imageSampler"} {:constant} {:elem_width 32} {:source_name "imageSampler"} {:source_elem_width 32} {:source_dimensions "1"} true;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_id_y} group_id_y : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:local_id_y} local_id_y : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SGE(x : int, y : int) : bool {
  x >= y
}
function {:inline true} BV32_SLT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV32_SUB(x : int, y : int) : int {
  x - y
}
function {:inline true} BV32_UDIV(x : int, y : int) : int {
  x div y
}
procedure {:source_name "image3dCopy"} {:kernel} $image3dCopy()
requires $$imageSampler[0] == 7;
{
  var $0:int;
  var $1:int;
  var $2:int;
  var $3:int;
  var $4:int;
  var $5:int;
  var $6:int;
  var $7:int;
  var $8:int;
  var $9:int;
  var $10:int;
  var $11:int;
  var v0:int;
  var v1:int;
  var v2:int;
  var v3:bool;
  var v4:bool;
  var v5:bool;
  var v6:bool;
  var v7:int;
  var v8:int;
  var v9:int;
  var v10:int;
  var v11:int;
  var v12:int;
  var v13:int;
  var v14:bool;
  var v15:bool;
  var v16:bool;
  var v17:bool;
  var v18:int;
  var v19:int;
  var v20:int;
  var v21:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  v1 := BV32_ADD(BV32_MUL(group_id_y, group_size_y), local_id_y);
  assert {:sourceloc} {:sourceloc_num 1} true;
  v2 := $$imageSampler[0];
  v3 := BV32_SLT(v0, 0);
  goto $truebb, $falsebb;
$1:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  $0 := 0;
  goto $6;
$2:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  v4 := BV32_SGE(v0, 512);
  goto $truebb0, $falsebb0;
$3:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  $1 := 511;
  goto $5;
$4:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  $1 := v0;
  goto $5;
$5:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  $0 := $1;
  goto $6;
$6:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  v5 := BV32_SLT(v1, 0);
  goto $truebb1, $falsebb1;
$7:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  $2 := 0;
  goto $12;
$8:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  v6 := BV32_SGE(v1, 512);
  goto $truebb2, $falsebb2;
$9:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  $3 := 511;
  goto $11;
$10:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  $3 := v1;
  goto $11;
$11:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  $2 := $3;
  goto $12;
$12:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  goto $truebb3, $falsebb3;
$13:
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  $4 := 0;
  goto $_Z12read_imageuiPU3AS1Dv4_j11ocl_samplerDv4_i.exit;
$14:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  goto $truebb4, $falsebb4;
$15:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  $5 := 511;
  goto $17;
$16:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  $5 := 0;
  goto $17;
$17:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  $4 := $5;
  goto $_Z12read_imageuiPU3AS1Dv4_j11ocl_samplerDv4_i.exit;
$_Z12read_imageuiPU3AS1Dv4_j11ocl_samplerDv4_i.exit:
  assert {:block_sourceloc} {:sourceloc_num 19} true;
  assert {:sourceloc} {:sourceloc_num 20} true;
  v7 := $$input[BV32_MUL(BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL($4, 512), $2), 512), $0), 4)];
  assert {:sourceloc} {:sourceloc_num 21} true;
  v8 := $$input[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL($4, 512), $2), 512), $0), 4), 1)];
  assert {:sourceloc} {:sourceloc_num 22} true;
  v9 := $$input[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL($4, 512), $2), 512), $0), 4), 2)];
  assert {:sourceloc} {:sourceloc_num 23} true;
  v10 := $$input[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL($4, 512), $2), 512), $0), 4), 3)];
  assert {:sourceloc} {:sourceloc_num 24} true;
  v11 := $$imageSampler[0];
  v12 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  v13 := BV32_SUB(BV32_ADD(BV32_MUL(group_id_y, group_size_y), local_id_y), BV32_UDIV(BV32_MUL(group_size_y, num_groups_y), 2));
  v14 := BV32_SLT(v12, 0);
  goto $truebb5, $falsebb5;
$18:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  $6 := 0;
  goto $23;
$19:
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  v15 := BV32_SGE(v12, 512);
  goto $truebb6, $falsebb6;
$20:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  $7 := 511;
  goto $22;
$21:
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  $7 := v12;
  goto $22;
$22:
  assert {:block_sourceloc} {:sourceloc_num 29} true;
  $6 := $7;
  goto $23;
$23:
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  v16 := BV32_SLT(v13, 0);
  goto $truebb7, $falsebb7;
$24:
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  $8 := 0;
  goto $29;
$25:
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  v17 := BV32_SGE(v13, 512);
  goto $truebb8, $falsebb8;
$26:
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  $9 := 511;
  goto $28;
$27:
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  $9 := v13;
  goto $28;
$28:
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  $8 := $9;
  goto $29;
$29:
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  goto $truebb9, $falsebb9;
$30:
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  $10 := 0;
  goto $_Z12read_imageuiPU3AS1Dv4_j11ocl_samplerDv4_i.exit4;
$31:
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  goto $truebb10, $falsebb10;
$32:
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  $11 := 511;
  goto $34;
$33:
  assert {:block_sourceloc} {:sourceloc_num 40} true;
  $11 := 1;
  goto $34;
$34:
  assert {:block_sourceloc} {:sourceloc_num 41} true;
  $10 := $11;
  goto $_Z12read_imageuiPU3AS1Dv4_j11ocl_samplerDv4_i.exit4;
$_Z12read_imageuiPU3AS1Dv4_j11ocl_samplerDv4_i.exit4:
  assert {:block_sourceloc} {:sourceloc_num 42} true;
  assert {:sourceloc} {:sourceloc_num 43} true;
  v18 := $$input[BV32_MUL(BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL($10, 512), $8), 512), $6), 4)];
  assert {:sourceloc} {:sourceloc_num 44} true;
  v19 := $$input[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL($10, 512), $8), 512), $6), 4), 1)];
  assert {:sourceloc} {:sourceloc_num 45} true;
  v20 := $$input[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL($10, 512), $8), 512), $6), 4), 2)];
  assert {:sourceloc} {:sourceloc_num 46} true;
  v21 := $$input[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL($10, 512), $8), 512), $6), 4), 3)];
  assert {:sourceloc} {:sourceloc_num 47} true;
  $$output[BV32_MUL(BV32_ADD(BV32_MUL(v1, 8192), v0), 4)] := BV32_ADD(v7, v18);
  assert {:sourceloc} {:sourceloc_num 48} true;
  $$output[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(v1, 8192), v0), 4), 1)] := BV32_ADD(v8, v19);
  assert {:sourceloc} {:sourceloc_num 49} true;
  $$output[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(v1, 8192), v0), 4), 2)] := BV32_ADD(v9, v20);
  assert {:sourceloc} {:sourceloc_num 50} true;
  $$output[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(v1, 8192), v0), 4), 3)] := BV32_ADD(v10, v21);
  return;
$truebb:
  assume {:partition} v3;
  assert {:block_sourceloc} {:sourceloc_num 51} true;
  goto $1;
$falsebb:
  assume {:partition} !v3;
  assert {:block_sourceloc} {:sourceloc_num 52} true;
  goto $2;
$truebb0:
  assume {:partition} v4;
  assert {:block_sourceloc} {:sourceloc_num 53} true;
  goto $3;
$falsebb0:
  assume {:partition} !v4;
  assert {:block_sourceloc} {:sourceloc_num 54} true;
  goto $4;
$truebb1:
  assume {:partition} v5;
  assert {:block_sourceloc} {:sourceloc_num 55} true;
  goto $7;
$falsebb1:
  assume {:partition} !v5;
  assert {:block_sourceloc} {:sourceloc_num 56} true;
  goto $8;
$truebb2:
  assume {:partition} v6;
  assert {:block_sourceloc} {:sourceloc_num 57} true;
  goto $9;
$falsebb2:
  assume {:partition} !v6;
  assert {:block_sourceloc} {:sourceloc_num 58} true;
  goto $10;
$truebb3:
  assume {:partition} false;
  assert {:block_sourceloc} {:sourceloc_num 59} true;
  goto $13;
$falsebb3:
  assume {:partition} true;
  assert {:block_sourceloc} {:sourceloc_num 60} true;
  goto $14;
$truebb4:
  assume {:partition} false;
  assert {:block_sourceloc} {:sourceloc_num 61} true;
  goto $15;
$falsebb4:
  assume {:partition} true;
  assert {:block_sourceloc} {:sourceloc_num 62} true;
  goto $16;
$truebb5:
  assume {:partition} v14;
  assert {:block_sourceloc} {:sourceloc_num 63} true;
  goto $18;
$falsebb5:
  assume {:partition} !v14;
  assert {:block_sourceloc} {:sourceloc_num 64} true;
  goto $19;
$truebb6:
  assume {:partition} v15;
  assert {:block_sourceloc} {:sourceloc_num 65} true;
  goto $20;
$falsebb6:
  assume {:partition} !v15;
  assert {:block_sourceloc} {:sourceloc_num 66} true;
  goto $21;
$truebb7:
  assume {:partition} v16;
  assert {:block_sourceloc} {:sourceloc_num 67} true;
  goto $24;
$falsebb7:
  assume {:partition} !v16;
  assert {:block_sourceloc} {:sourceloc_num 68} true;
  goto $25;
$truebb8:
  assume {:partition} v17;
  assert {:block_sourceloc} {:sourceloc_num 69} true;
  goto $26;
$falsebb8:
  assume {:partition} !v17;
  assert {:block_sourceloc} {:sourceloc_num 70} true;
  goto $27;
$truebb9:
  assume {:partition} false;
  assert {:block_sourceloc} {:sourceloc_num 71} true;
  goto $30;
$falsebb9:
  assume {:partition} true;
  assert {:block_sourceloc} {:sourceloc_num 72} true;
  goto $31;
$truebb10:
  assume {:partition} false;
  assert {:block_sourceloc} {:sourceloc_num 73} true;
  goto $32;
$falsebb10:
  assume {:partition} true;
  assert {:block_sourceloc} {:sourceloc_num 74} true;
  goto $33;
}
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 256 then 1 else 0) != 0;
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if num_groups_x == 2 then 1 else 0) != 0;
axiom (if num_groups_y == 512 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
