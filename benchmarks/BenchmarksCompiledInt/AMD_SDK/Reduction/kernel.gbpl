type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "input"} {:global} $$input : [int]int;
axiom {:array_info "$$input"} {:global} {:elem_width 32} {:source_name "input"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$input : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$input : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$input : bool;

var {:source_name "output"} {:global} $$output : [int]int;
axiom {:array_info "$$output"} {:global} {:elem_width 32} {:source_name "output"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$output : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$output : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$output : bool;

var {:source_name "sdata"} {:group_shared} $$sdata : [int]int;
axiom {:array_info "$$sdata"} {:group_shared} {:elem_width 32} {:source_name "sdata"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$sdata : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$sdata : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$sdata : bool;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function  BV32_LSHR(int, int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_UGT(x : int, y : int) : bool {
  x > y
}
function {:inline true} BV32_ULT(x : int, y : int) : bool {
  x < y
}
procedure {:source_name "reduce"} {:kernel} $reduce()
{
  var $s.0:int;
  var v0:int;
  var v1:int;
  var v2:int;
  var v3:int;
  var v4:int;
  var v5:int;
  var v6:int;
  var v7:int;
  var v8:int;
  var v9:int;
  var v10:int;
  var v11:bool;
  var v12:bool;
  var v13:int;
  var v14:int;
  var v15:int;
  var v16:int;
  var v17:int;
  var v18:int;
  var v19:int;
  var v20:int;
  var v21:bool;
  var v22:int;
  var v23:int;
  var v24:int;
  var v25:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  v0 := local_id_x;
  v1 := group_id_x;
  v2 := BV32_MUL(BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x), 2);
  assert {:sourceloc} {:sourceloc_num 1} true;
  v3 := $$input[BV32_MUL(v2, 4)];
  assert {:sourceloc} {:sourceloc_num 2} true;
  v4 := $$input[BV32_ADD(BV32_MUL(v2, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 3} true;
  v5 := $$input[BV32_ADD(BV32_MUL(v2, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 4} true;
  v6 := $$input[BV32_ADD(BV32_MUL(v2, 4), 3)];
  assert {:sourceloc} {:sourceloc_num 5} true;
  v7 := $$input[BV32_MUL(BV32_ADD(v2, 1), 4)];
  assert {:sourceloc} {:sourceloc_num 6} true;
  v8 := $$input[BV32_ADD(BV32_MUL(BV32_ADD(v2, 1), 4), 1)];
  assert {:sourceloc} {:sourceloc_num 7} true;
  v9 := $$input[BV32_ADD(BV32_MUL(BV32_ADD(v2, 1), 4), 2)];
  assert {:sourceloc} {:sourceloc_num 8} true;
  v10 := $$input[BV32_ADD(BV32_MUL(BV32_ADD(v2, 1), 4), 3)];
  assert {:sourceloc} {:sourceloc_num 9} true;
  $$sdata[BV32_MUL(v0, 4)] := BV32_ADD(v3, v7);
  assert {:sourceloc} {:sourceloc_num 10} true;
  $$sdata[BV32_ADD(BV32_MUL(v0, 4), 1)] := BV32_ADD(v4, v8);
  assert {:sourceloc} {:sourceloc_num 11} true;
  $$sdata[BV32_ADD(BV32_MUL(v0, 4), 2)] := BV32_ADD(v5, v9);
  assert {:sourceloc} {:sourceloc_num 12} true;
  $$sdata[BV32_ADD(BV32_MUL(v0, 4), 3)] := BV32_ADD(v6, v10);
  call {:sourceloc_num 13} $bugle_barrier(-1, 0);
  $s.0 := BV32_LSHR(group_size_x, 1);
  goto $1;
$1:
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  v11 := BV32_UGT($s.0, 0);
  goto $truebb, $falsebb;
$2:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  v12 := BV32_ULT(v0, $s.0);
  goto $truebb0, $falsebb0;
$3:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  assert {:sourceloc} {:sourceloc_num 17} true;
  v13 := $$sdata[BV32_MUL(BV32_ADD(v0, $s.0), 4)];
  assert {:sourceloc} {:sourceloc_num 18} true;
  v14 := $$sdata[BV32_ADD(BV32_MUL(BV32_ADD(v0, $s.0), 4), 1)];
  assert {:sourceloc} {:sourceloc_num 19} true;
  v15 := $$sdata[BV32_ADD(BV32_MUL(BV32_ADD(v0, $s.0), 4), 2)];
  assert {:sourceloc} {:sourceloc_num 20} true;
  v16 := $$sdata[BV32_ADD(BV32_MUL(BV32_ADD(v0, $s.0), 4), 3)];
  assert {:sourceloc} {:sourceloc_num 21} true;
  v17 := $$sdata[BV32_MUL(v0, 4)];
  assert {:sourceloc} {:sourceloc_num 22} true;
  v18 := $$sdata[BV32_ADD(BV32_MUL(v0, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 23} true;
  v19 := $$sdata[BV32_ADD(BV32_MUL(v0, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 24} true;
  v20 := $$sdata[BV32_ADD(BV32_MUL(v0, 4), 3)];
  assert {:sourceloc} {:sourceloc_num 25} true;
  $$sdata[BV32_MUL(v0, 4)] := BV32_ADD(v17, v13);
  assert {:sourceloc} {:sourceloc_num 26} true;
  $$sdata[BV32_ADD(BV32_MUL(v0, 4), 1)] := BV32_ADD(v18, v14);
  assert {:sourceloc} {:sourceloc_num 27} true;
  $$sdata[BV32_ADD(BV32_MUL(v0, 4), 2)] := BV32_ADD(v19, v15);
  assert {:sourceloc} {:sourceloc_num 28} true;
  $$sdata[BV32_ADD(BV32_MUL(v0, 4), 3)] := BV32_ADD(v20, v16);
  goto $4;
$4:
  assert {:block_sourceloc} {:sourceloc_num 29} true;
  call {:sourceloc_num 30} $bugle_barrier(-1, 0);
  goto $5;
$5:
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  $s.0 := BV32_LSHR($s.0, 1);
  goto $1;
$6:
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  v21 := v0 == 0;
  goto $truebb1, $falsebb1;
$7:
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  assert {:sourceloc} {:sourceloc_num 34} true;
  v22 := $$sdata[0];
  assert {:sourceloc} {:sourceloc_num 35} true;
  v23 := $$sdata[1];
  assert {:sourceloc} {:sourceloc_num 36} true;
  v24 := $$sdata[2];
  assert {:sourceloc} {:sourceloc_num 37} true;
  v25 := $$sdata[3];
  assert {:sourceloc} {:sourceloc_num 38} true;
  $$output[BV32_MUL(v1, 4)] := v22;
  assert {:sourceloc} {:sourceloc_num 39} true;
  $$output[BV32_ADD(BV32_MUL(v1, 4), 1)] := v23;
  assert {:sourceloc} {:sourceloc_num 40} true;
  $$output[BV32_ADD(BV32_MUL(v1, 4), 2)] := v24;
  assert {:sourceloc} {:sourceloc_num 41} true;
  $$output[BV32_ADD(BV32_MUL(v1, 4), 3)] := v25;
  goto $8;
$8:
  assert {:block_sourceloc} {:sourceloc_num 42} true;
  return;
$truebb:
  assume {:partition} v11;
  assert {:block_sourceloc} {:sourceloc_num 43} true;
  goto $2;
$falsebb:
  assume {:partition} !v11;
  assert {:block_sourceloc} {:sourceloc_num 44} true;
  goto $6;
$truebb0:
  assume {:partition} v12;
  assert {:block_sourceloc} {:sourceloc_num 45} true;
  goto $3;
$falsebb0:
  assume {:partition} !v12;
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  goto $4;
$truebb1:
  assume {:partition} v21;
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  goto $7;
$falsebb1:
  assume {:partition} !v21;
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  goto $8;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:int, $1:int);
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 32 then 1 else 0) != 0;
axiom (if num_groups_x == 2 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
