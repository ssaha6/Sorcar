type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP8(x : [int]int, y : int) returns (z : int, A : [int]int);
procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "inputImage"} {:global} $$inputImage : [int]int;
axiom {:array_info "$$inputImage"} {:global} {:elem_width 8} {:source_name "inputImage"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$inputImage : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$inputImage : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$inputImage : bool;

var {:source_name "outputImage"} {:global} $$outputImage : [int]int;
axiom {:array_info "$$outputImage"} {:global} {:elem_width 8} {:source_name "outputImage"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$outputImage : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$outputImage : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$outputImage : bool;

var {:source_name "iv"} {:group_shared} $$noise_uniform.iv : [int]int;
axiom {:array_info "$$noise_uniform.iv"} {:group_shared} {:elem_width 32} {:source_name "iv"} {:source_elem_width 32} {:source_dimensions "256"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$noise_uniform.iv : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$noise_uniform.iv : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$noise_uniform.iv : bool;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_id_y} group_id_y : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:local_id_y} local_id_y : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function  BV8_ASHR(int, int) : int;
function BV1_SEXT32(int) : int;
function BV_EXTRACT(int, int, int) : int;
function FADD32(int, int) : int;
function FDIV32(int, int) : int;
function FLT32(int, int) : bool;
function FMUL32(int, int) : int;
function FP32_TO_SI32(int) : int;
function FP32_TO_UI8(int) : int;
function FSUB32(int, int) : int;
function SI32_TO_FP32(int) : int;
function UI8_TO_FP32(int) : int;
function {:inline true} BV1_ZEXT32(x : int) : int {
  x
}
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_SGE(x : int, y : int) : bool {
  x >= y
}
function {:inline true} BV32_SLT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV32_SUB(x : int, y : int) : int {
  x - y
}
function {:inline true} BV8_AND(x : int, y : int) : int {
  if x == y then x else (if x == 0 || y == 0 then 0 else BV8_AND_UF(x, y))
}
function BV8_AND_UF(int, int) : int;
function {:inline true} BV8_OR(x : int, y : int) : int {
  if x == y then x else (if x == 0 then y else (if y == 0 then x else BV8_OR_UF(x, y)))
}
function BV8_OR_UF(int, int) : int;
function {:inline true} BV8_XOR(x : int, y : int) : int {
  if x == y then 0 else (if x == 0 then y else (if y == 0 then x else BV8_XOR_UF(x, y)))
}
function BV8_XOR_UF(int, int) : int;
procedure {:source_name "noise_uniform"} {:kernel} $noise_uniform($factor:int)
{
  var $j.i.0:int;
  var $.0:int;
  var $.1:int;
  var v0:int;
  var v1:int;
  var v2:int;
  var v3:int;
  var v4:int;
  var v5:int;
  var v6:int;
  var v7:int;
  var v8:int;
  var v9:bool;
  var v10:int;
  var v11:int;
  var v12:bool;
  var v13:bool;
  var v14:int;
  var v15:int;
  var v16:int;
  var v17:bool;
  var v18:int;
  var v19:int;
  var v21:int;
  var v20:int;
  var v22:int;
  var v23:int;
  var v24:int;
  var v25:int;
  var v26:int;
  var v27:int;
  var v28:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  v0 := BV32_ADD(BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x), BV32_MUL(BV32_ADD(BV32_MUL(group_id_y, group_size_y), local_id_y), BV32_MUL(group_size_x, num_groups_x)));
  assert {:sourceloc} {:sourceloc_num 1} true;
  v1 := $$inputImage[BV32_MUL(v0, 4)];
  assert {:sourceloc} {:sourceloc_num 2} true;
  v2 := $$inputImage[BV32_ADD(BV32_MUL(v0, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 3} true;
  v3 := $$inputImage[BV32_ADD(BV32_MUL(v0, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 4} true;
  v4 := $$inputImage[BV32_ADD(BV32_MUL(v0, 4), 3)];
  v5 := UI8_TO_FP32(v1);
  v6 := UI8_TO_FP32(v2);
  v7 := UI8_TO_FP32(v3);
  v8 := local_id_x;
  $j.i.0, $.0 := 4, FP32_TO_SI32(FSUB32(-2147483648, FDIV32(FADD32(FADD32(FADD32(v5, v6), v7), v6), 1082130432)));
  goto $1;
$1:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  v9 := BV32_SGE($j.i.0, 0);
  goto $truebb, $falsebb;
$2:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  v10 := BV32_SDIV($.0, 127773);
  v11 := BV32_SUB(BV32_MUL(16807, BV32_SUB($.0, BV32_MUL(v10, 127773))), BV32_MUL(2836, v10));
  v12 := BV32_SLT(v11, 0);
  goto $truebb0, $falsebb0;
$3:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  $.1 := BV32_ADD(v11, 2147483647);
  goto $4;
$4:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  v13 := BV32_SLT($j.i.0, 4);
  goto $truebb1, $falsebb1;
$5:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  assert {:sourceloc} {:sourceloc_num 10} true;
  $$noise_uniform.iv[BV32_ADD(BV32_MUL(4, v8), $j.i.0)] := $.1;
  goto $6;
$6:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  $j.i.0, $.0 := BV32_ADD($j.i.0, -1), $.1;
  goto $1;
$7:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  assert {:sourceloc} {:sourceloc_num 13} true;
  v14 := $$noise_uniform.iv[BV32_MUL(4, v8)];
  v15 := BV32_SDIV($.0, 127773);
  v16 := BV32_SUB(BV32_MUL(16807, BV32_SUB($.0, BV32_MUL(v15, 127773))), BV32_MUL(2836, v15));
  v17 := BV32_SLT(v16, 0);
  goto $truebb2, $falsebb2;
$8:
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  goto $ran1.exit;
$ran1.exit:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  v18 := BV32_SDIV(v14, 536870912);
  assume BV1_ZEXT32((if BV32_SGE(v18, 0) then 1 else 0)) != 0;
  assert {:sourceloc} {:sourceloc_num 16} true;
  v19 := $$noise_uniform.iv[BV32_ADD(BV32_MUL(4, v8), v18)];
  v20 := FMUL32(FSUB32(FMUL32(805306368, SI32_TO_FP32(v19)), 1056964608), SI32_TO_FP32($factor));
  v21 := FADD32(v5, v20);
  v22 := FADD32(v6, v20);
  v23 := FADD32(v7, v20);
  v24 := FADD32(UI8_TO_FP32(v4), v20);
  v25 := BV8_ASHR(BV_EXTRACT(BV1_SEXT32((if FLT32(1132396544, v21) then 1 else 0)), 8, 0), 7);
  v26 := BV8_ASHR(BV_EXTRACT(BV1_SEXT32((if FLT32(1132396544, v22) then 1 else 0)), 8, 0), 7);
  v27 := BV8_ASHR(BV_EXTRACT(BV1_SEXT32((if FLT32(1132396544, v23) then 1 else 0)), 8, 0), 7);
  v28 := BV8_ASHR(BV_EXTRACT(BV1_SEXT32((if FLT32(1132396544, v24) then 1 else 0)), 8, 0), 7);
  assert {:sourceloc} {:sourceloc_num 17} true;
  $$outputImage[BV32_MUL(v0, 4)] := BV8_OR(BV8_AND(BV8_AND(FP32_TO_UI8(v21), BV8_XOR(BV8_ASHR(BV_EXTRACT(BV1_SEXT32((if FLT32(v21, 0) then 1 else 0)), 8, 0), 7), -1)), BV8_XOR(v25, -1)), v25);
  assert {:sourceloc} {:sourceloc_num 18} true;
  $$outputImage[BV32_ADD(BV32_MUL(v0, 4), 1)] := BV8_OR(BV8_AND(BV8_AND(FP32_TO_UI8(v22), BV8_XOR(BV8_ASHR(BV_EXTRACT(BV1_SEXT32((if FLT32(v22, 0) then 1 else 0)), 8, 0), 7), -1)), BV8_XOR(v26, -1)), v26);
  assert {:sourceloc} {:sourceloc_num 19} true;
  $$outputImage[BV32_ADD(BV32_MUL(v0, 4), 2)] := BV8_OR(BV8_AND(BV8_AND(FP32_TO_UI8(v23), BV8_XOR(BV8_ASHR(BV_EXTRACT(BV1_SEXT32((if FLT32(v23, 0) then 1 else 0)), 8, 0), 7), -1)), BV8_XOR(v27, -1)), v27);
  assert {:sourceloc} {:sourceloc_num 20} true;
  $$outputImage[BV32_ADD(BV32_MUL(v0, 4), 3)] := BV8_OR(BV8_AND(BV8_AND(FP32_TO_UI8(v24), BV8_XOR(BV8_ASHR(BV_EXTRACT(BV1_SEXT32((if FLT32(v24, 0) then 1 else 0)), 8, 0), 7), -1)), BV8_XOR(v28, -1)), v28);
  return;
$truebb:
  assume {:partition} v9;
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  goto $2;
$falsebb:
  assume {:partition} !v9;
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  goto $7;
$truebb0:
  assume {:partition} v12;
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  goto $3;
$falsebb0:
  assume {:partition} !v12;
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  $.1 := v11;
  goto $4;
$truebb1:
  assume {:partition} v13;
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  goto $5;
$falsebb1:
  assume {:partition} !v13;
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  goto $6;
$truebb2:
  assume {:partition} v17;
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  goto $8;
$falsebb2:
  assume {:partition} !v17;
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  goto $ran1.exit;
}
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 64 then 1 else 0) != 0;
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if num_groups_x == 8 then 1 else 0) != 0;
axiom (if num_groups_y == 512 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
