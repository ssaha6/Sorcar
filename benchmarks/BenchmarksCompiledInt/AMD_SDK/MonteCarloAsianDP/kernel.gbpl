type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
procedure _ATOMIC_OP64(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "randArray"} {:global} $$randArray : [int]int;
axiom {:array_info "$$randArray"} {:global} {:elem_width 32} {:source_name "randArray"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$randArray : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$randArray : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$randArray : bool;

var {:source_name "priceSamples"} {:global} $$priceSamples : [int]int;
axiom {:array_info "$$priceSamples"} {:global} {:elem_width 64} {:source_name "priceSamples"} {:source_elem_width 256} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 256} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$priceSamples : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 256} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$priceSamples : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 256} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$priceSamples : bool;

var {:source_name "pathDeriv"} {:global} $$pathDeriv : [int]int;
axiom {:array_info "$$pathDeriv"} {:global} {:elem_width 64} {:source_name "pathDeriv"} {:source_elem_width 256} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 256} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$pathDeriv : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 256} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$pathDeriv : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 256} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$pathDeriv : bool;

var {:source_name "temp.i"} $$temp.i : [int]int;
axiom {:array_info "$$temp.i"} {:elem_width 32} {:source_name "temp.i"} {:source_elem_width 128} {:source_dimensions "8"} true;

var {:source_name "attrib"} $$attrib : [int]int;
axiom {:array_info "$$attrib"} {:elem_width 64} {:source_name "attrib"} {:source_elem_width 1792} {:source_dimensions "1"} true;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_id_y} group_id_y : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:local_id_y} local_id_y : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function  BV32_LSHR(int, int) : int;
function BV_CONCAT(int, int) : int;
function BV_EXTRACT(int, int, int) : int;
function FADD64(int, int) : int;
function FCOS64(int) : int;
function FDIV64(int, int) : int;
function FEXP64(int) : int;
function FLOG64(int) : int;
function FLT64(int, int) : bool;
function FMUL64(int, int) : int;
function FSIN64(int) : int;
function FSQRT64(int) : int;
function FSUB64(int, int) : int;
function SI32_TO_FP64(int) : int;
function UI32_TO_FP64(int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_AND(x : int, y : int) : int {
  if x == y then x else (if x == 0 || y == 0 then 0 else BV32_AND_UF(x, y))
}
function BV32_AND_UF(int, int) : int;
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_OR(x : int, y : int) : int {
  if x == y then x else (if x == 0 then y else (if y == 0 then x else BV32_OR_UF(x, y)))
}
function BV32_OR_UF(int, int) : int;
function {:inline true} BV32_SHL(x : int, y : int) : int {
  if x >= 0 && y == 1 then x*2 else BV32_SHL_UF(x,y)
}
function BV32_SHL_UF(int, int) : int;
function {:inline true} BV32_SLT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV32_ULT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV32_XOR(x : int, y : int) : int {
  if x == y then 0 else (if x == 0 then y else (if y == 0 then x else BV32_XOR_UF(x, y)))
}
function BV32_XOR_UF(int, int) : int;
procedure {:source_name "calPriceVega"} {:kernel} $calPriceVega($attrib.coerce0:int, $attrib.coerce1:int, $attrib.coerce2:int, $attrib.coerce3:int, $attrib.coerce4:int, $attrib.coerce5:int, $attrib.coerce6:int, $noOfSum:int, $width:int)
requires {:sourceloc_num 0} (if $width == 256 then 1 else 0) != 0;
{
  var $nextRand.0:int;
  var $trajPrice1.0:int;
  var $trajPrice2.0:int;
  var $sumPrice1.0:int;
  var $sumPrice2.0:int;
  var $sumDeriv1.0:int;
  var $sumDeriv2.0:int;
  var $i.0:int;
  var $r1.i.0:int;
  var $r2.i.0:int;
  var $a.i.0:int;
  var $b.i.0:int;
  var $i.i.0:int;
  var $r1.i.1:int;
  var $r2.i.1:int;
  var $a.i.1:int;
  var $b.i.1:int;
  var $temp3.i.0:int;
  var $temp1.i1.0:int;
  var $temp3.i.1:int;
  var $temp1.i1.1:int;
  var $temp3.i.2:int;
  var $temp1.i1.2:int;
  var $temp3.i.3:int;
  var $temp1.i1.3:int;
  var $temp4.i.0:int;
  var $temp2.i2.0:int;
  var $temp4.i.1:int;
  var $temp2.i2.1:int;
  var $temp4.i.2:int;
  var $temp2.i2.2:int;
  var $temp4.i.3:int;
  var $temp2.i2.3:int;
  var v17:int;
  var v18:int;
  var v0:int;
  var v1:int;
  var v2:int;
  var v3:int;
  var v4:int;
  var v5:int;
  var v6:int;
  var v7:int;
  var v8:int;
  var v9:int;
  var v10:int;
  var v11:int;
  var v12:int;
  var v13:int;
  var v14:int;
  var v15:int;
  var v16:int;
  var v19:int;
  var v20:int;
  var v21:int;
  var v22:int;
  var v23:int;
  var v24:int;
  var v25:int;
  var v26:int;
  var v27:int;
  var v28:int;
  var v29:int;
  var v30:int;
  var v31:int;
  var v32:int;
  var v33:int;
  var v34:int;
  var v35:bool;
  var v37:int;
  var v36:int;
  var v38:int;
  var v39:int;
  var v41:int;
  var v40:int;
  var v42:int;
  var v43:int;
  var v44:int;
  var v46:int;
  var v45:int;
  var v47:int;
  var v48:int;
  var v49:int;
  var v50:int;
  var v51:bool;
  var v52:int;
  var v53:int;
  var v54:int;
  var v55:int;
  var v56:int;
  var v57:int;
  var v58:int;
  var v59:int;
  var v60:int;
  var v61:int;
  var v62:int;
  var v63:int;
  var v64:int;
  var v65:int;
  var v66:int;
  var v67:int;
  var v68:int;
  var v69:int;
  var v70:int;
  var v71:int;
  var v72:int;
  var v73:int;
  var v74:int;
  var v75:int;
  var v76:int;
  var v77:int;
  var v78:int;
  var v79:int;
  var v80:int;
  var v81:int;
  var v82:int;
  var v83:int;
  var v84:int;
  var v85:int;
  var v86:int;
  var v87:int;
  var v88:int;
  var v89:int;
  var v90:int;
  var v91:int;
  var v93:int;
  var v92:int;
  var v94:int;
  var v95:int;
  var v96:int;
  var v97:int;
  var v98:int;
  var v99:int;
  var v100:int;
  var v101:int;
  var v102:int;
  var v103:int;
  var v104:int;
  var v105:int;
  var v106:int;
  var v107:int;
  var v108:int;
  var v109:int;
  var v110:int;
  var v111:int;
  var v112:int;
  var v113:int;
  var v114:int;
  var v115:int;
  var v116:int;
  var v117:int;
  var v118:int;
  var v119:int;
  var v120:int;
  var v121:int;
  var v122:int;
  var v123:int;
  var v124:int;
  var v125:bool;
  var v126:bool;
  var v127:bool;
  var v128:bool;
  var v129:bool;
  var v130:bool;
  var v131:bool;
  var v132:bool;
$0:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  assert {:sourceloc} {:sourceloc_num 2} true;
  $$attrib[0] := BV_EXTRACT($attrib.coerce0, 64, 0);
  assert {:sourceloc} {:sourceloc_num 3} true;
  $$attrib[1] := BV_EXTRACT($attrib.coerce0, 128, 64);
  assert {:sourceloc} {:sourceloc_num 4} true;
  $$attrib[2] := BV_EXTRACT($attrib.coerce0, 192, 128);
  assert {:sourceloc} {:sourceloc_num 5} true;
  $$attrib[3] := BV_EXTRACT($attrib.coerce0, 256, 192);
  assert {:sourceloc} {:sourceloc_num 6} true;
  $$attrib[4] := BV_EXTRACT($attrib.coerce1, 64, 0);
  assert {:sourceloc} {:sourceloc_num 7} true;
  $$attrib[5] := BV_EXTRACT($attrib.coerce1, 128, 64);
  assert {:sourceloc} {:sourceloc_num 8} true;
  $$attrib[6] := BV_EXTRACT($attrib.coerce1, 192, 128);
  assert {:sourceloc} {:sourceloc_num 9} true;
  $$attrib[7] := BV_EXTRACT($attrib.coerce1, 256, 192);
  assert {:sourceloc} {:sourceloc_num 10} true;
  $$attrib[8] := BV_EXTRACT($attrib.coerce2, 64, 0);
  assert {:sourceloc} {:sourceloc_num 11} true;
  $$attrib[9] := BV_EXTRACT($attrib.coerce2, 128, 64);
  assert {:sourceloc} {:sourceloc_num 12} true;
  $$attrib[10] := BV_EXTRACT($attrib.coerce2, 192, 128);
  assert {:sourceloc} {:sourceloc_num 13} true;
  $$attrib[11] := BV_EXTRACT($attrib.coerce2, 256, 192);
  assert {:sourceloc} {:sourceloc_num 14} true;
  $$attrib[12] := BV_EXTRACT($attrib.coerce3, 64, 0);
  assert {:sourceloc} {:sourceloc_num 15} true;
  $$attrib[13] := BV_EXTRACT($attrib.coerce3, 128, 64);
  assert {:sourceloc} {:sourceloc_num 16} true;
  $$attrib[14] := BV_EXTRACT($attrib.coerce3, 192, 128);
  assert {:sourceloc} {:sourceloc_num 17} true;
  $$attrib[15] := BV_EXTRACT($attrib.coerce3, 256, 192);
  assert {:sourceloc} {:sourceloc_num 18} true;
  $$attrib[16] := BV_EXTRACT($attrib.coerce4, 64, 0);
  assert {:sourceloc} {:sourceloc_num 19} true;
  $$attrib[17] := BV_EXTRACT($attrib.coerce4, 128, 64);
  assert {:sourceloc} {:sourceloc_num 20} true;
  $$attrib[18] := BV_EXTRACT($attrib.coerce4, 192, 128);
  assert {:sourceloc} {:sourceloc_num 21} true;
  $$attrib[19] := BV_EXTRACT($attrib.coerce4, 256, 192);
  assert {:sourceloc} {:sourceloc_num 22} true;
  $$attrib[20] := BV_EXTRACT($attrib.coerce5, 64, 0);
  assert {:sourceloc} {:sourceloc_num 23} true;
  $$attrib[21] := BV_EXTRACT($attrib.coerce5, 128, 64);
  assert {:sourceloc} {:sourceloc_num 24} true;
  $$attrib[22] := BV_EXTRACT($attrib.coerce5, 192, 128);
  assert {:sourceloc} {:sourceloc_num 25} true;
  $$attrib[23] := BV_EXTRACT($attrib.coerce5, 256, 192);
  assert {:sourceloc} {:sourceloc_num 26} true;
  $$attrib[24] := BV_EXTRACT($attrib.coerce6, 64, 0);
  assert {:sourceloc} {:sourceloc_num 27} true;
  $$attrib[25] := BV_EXTRACT($attrib.coerce6, 128, 64);
  assert {:sourceloc} {:sourceloc_num 28} true;
  $$attrib[26] := BV_EXTRACT($attrib.coerce6, 192, 128);
  assert {:sourceloc} {:sourceloc_num 29} true;
  $$attrib[27] := BV_EXTRACT($attrib.coerce6, 256, 192);
  assert {:sourceloc} {:sourceloc_num 30} true;
  v0 := $$attrib[0];
  assert {:sourceloc} {:sourceloc_num 31} true;
  v1 := $$attrib[1];
  assert {:sourceloc} {:sourceloc_num 32} true;
  v2 := $$attrib[2];
  assert {:sourceloc} {:sourceloc_num 33} true;
  v3 := $$attrib[3];
  assert {:sourceloc} {:sourceloc_num 34} true;
  v4 := $$attrib[4];
  assert {:sourceloc} {:sourceloc_num 35} true;
  v5 := $$attrib[5];
  assert {:sourceloc} {:sourceloc_num 36} true;
  v6 := $$attrib[6];
  assert {:sourceloc} {:sourceloc_num 37} true;
  v7 := $$attrib[7];
  assert {:sourceloc} {:sourceloc_num 38} true;
  v8 := $$attrib[8];
  assert {:sourceloc} {:sourceloc_num 39} true;
  v9 := $$attrib[9];
  assert {:sourceloc} {:sourceloc_num 40} true;
  v10 := $$attrib[10];
  assert {:sourceloc} {:sourceloc_num 41} true;
  v11 := $$attrib[11];
  assert {:sourceloc} {:sourceloc_num 42} true;
  v12 := $$attrib[12];
  assert {:sourceloc} {:sourceloc_num 43} true;
  v13 := $$attrib[13];
  assert {:sourceloc} {:sourceloc_num 44} true;
  v14 := $$attrib[14];
  assert {:sourceloc} {:sourceloc_num 45} true;
  v15 := $$attrib[15];
  assert {:sourceloc} {:sourceloc_num 46} true;
  v16 := $$attrib[16];
  assert {:sourceloc} {:sourceloc_num 47} true;
  v17 := $$attrib[17];
  assert {:sourceloc} {:sourceloc_num 48} true;
  v18 := $$attrib[18];
  assert {:sourceloc} {:sourceloc_num 49} true;
  v19 := $$attrib[19];
  v20 := BV_CONCAT(BV_CONCAT(BV_CONCAT(v19, v18), v17), v16);
  assert {:sourceloc} {:sourceloc_num 50} true;
  v21 := $$attrib[20];
  assert {:sourceloc} {:sourceloc_num 51} true;
  v22 := $$attrib[21];
  assert {:sourceloc} {:sourceloc_num 52} true;
  v23 := $$attrib[22];
  assert {:sourceloc} {:sourceloc_num 53} true;
  v24 := $$attrib[23];
  assert {:sourceloc} {:sourceloc_num 54} true;
  v25 := $$attrib[24];
  assert {:sourceloc} {:sourceloc_num 55} true;
  v26 := $$attrib[25];
  assert {:sourceloc} {:sourceloc_num 56} true;
  v27 := $$attrib[26];
  assert {:sourceloc} {:sourceloc_num 57} true;
  v28 := $$attrib[27];
  v29 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  v30 := BV32_ADD(BV32_MUL(group_id_y, group_size_y), local_id_y);
  assert {:sourceloc} {:sourceloc_num 58} true;
  v31 := $$randArray[BV32_MUL(BV32_ADD(BV32_MUL(v30, $width), v29), 4)];
  assert {:sourceloc} {:sourceloc_num 59} true;
  v32 := $$randArray[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(v30, $width), v29), 4), 1)];
  assert {:sourceloc} {:sourceloc_num 60} true;
  v33 := $$randArray[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(v30, $width), v29), 4), 2)];
  assert {:sourceloc} {:sourceloc_num 61} true;
  v34 := $$randArray[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(v30, $width), v29), 4), 3)];
  $nextRand.0, $trajPrice1.0, $trajPrice2.0, $sumPrice1.0, $sumPrice2.0, $sumDeriv1.0, $sumDeriv2.0, $i.0 := BV_CONCAT(BV_CONCAT(BV_CONCAT(v34, v33), v32), v31), v20, v20, v20, v20, 0, 0, 1;
  goto $1;
$1:
  assert {:block_sourceloc} {:sourceloc_num 62} true;
  v35 := BV32_SLT($i.0, $noOfSum);
  goto $truebb, $falsebb;
$2:
  assert {:block_sourceloc} {:sourceloc_num 63} true;
  v36 := BV32_ADD(BV32_MUL(1812433253, BV32_XOR(BV_EXTRACT($nextRand.0, 32, 0), BV32_LSHR(BV_EXTRACT($nextRand.0, 32, 0), 30))), 1);
  v37 := BV32_ADD(BV32_MUL(1812433253, BV32_XOR(BV_EXTRACT($nextRand.0, 64, 32), BV32_LSHR(BV_EXTRACT($nextRand.0, 64, 32), 30))), 1);
  v38 := BV32_ADD(BV32_MUL(1812433253, BV32_XOR(BV_EXTRACT($nextRand.0, 96, 64), BV32_LSHR(BV_EXTRACT($nextRand.0, 96, 64), 30))), 1);
  v39 := BV32_ADD(BV32_MUL(1812433253, BV32_XOR(BV_EXTRACT($nextRand.0, 128, 96), BV32_LSHR(BV_EXTRACT($nextRand.0, 128, 96), 30))), 1);
  v40 := BV32_ADD(BV32_MUL(1812433253, BV32_XOR(v36, BV32_LSHR(v36, 30))), 2);
  v41 := BV32_ADD(BV32_MUL(1812433253, BV32_XOR(v37, BV32_LSHR(v37, 30))), 2);
  v42 := BV32_ADD(BV32_MUL(1812433253, BV32_XOR(v38, BV32_LSHR(v38, 30))), 2);
  v43 := BV32_ADD(BV32_MUL(1812433253, BV32_XOR(v39, BV32_LSHR(v39, 30))), 2);
  v44 := BV_CONCAT(BV_CONCAT(BV_CONCAT(v43, v42), v41), v40);
  v45 := BV32_ADD(BV32_MUL(1812433253, BV32_XOR(v40, BV32_LSHR(v40, 30))), 3);
  v46 := BV32_ADD(BV32_MUL(1812433253, BV32_XOR(v41, BV32_LSHR(v41, 30))), 3);
  v47 := BV32_ADD(BV32_MUL(1812433253, BV32_XOR(v42, BV32_LSHR(v42, 30))), 3);
  v48 := BV32_ADD(BV32_MUL(1812433253, BV32_XOR(v43, BV32_LSHR(v43, 30))), 3);
  v49 := BV_CONCAT(BV_CONCAT(BV_CONCAT(v48, v47), v46), v45);
  v50 := BV_CONCAT(BV_CONCAT(BV_CONCAT(BV32_ADD(BV32_MUL(1812433253, BV32_XOR(v48, BV32_LSHR(v48, 30))), 4), BV32_ADD(BV32_MUL(1812433253, BV32_XOR(v47, BV32_LSHR(v47, 30))), 4)), BV32_ADD(BV32_MUL(1812433253, BV32_XOR(v46, BV32_LSHR(v46, 30))), 4)), BV32_ADD(BV32_MUL(1812433253, BV32_XOR(v45, BV32_LSHR(v45, 30))), 4));
  $r1.i.0, $r2.i.0, $a.i.0, $b.i.0, $i.i.0 := 0, 0, 0, 0, 0;
  goto $3;
$3:
  assert {:block_sourceloc} {:sourceloc_num 64} true;
  v51 := BV32_ULT($i.i.0, 4);
  goto $truebb0, $falsebb0;
$4:
  assert {:block_sourceloc} {:sourceloc_num 65} true;
  goto $casebb, $casebb0, $casebb1, $casebb2, $defaultbb;
$5:
  assert {:block_sourceloc} {:sourceloc_num 66} true;
  $r1.i.1, $r2.i.1, $a.i.1, $b.i.1 := v49, v50, $nextRand.0, v44;
  goto $10;
$6:
  assert {:block_sourceloc} {:sourceloc_num 67} true;
  assert {:sourceloc} {:sourceloc_num 68} true;
  v52 := $$temp.i[0];
  assert {:sourceloc} {:sourceloc_num 69} true;
  v53 := $$temp.i[1];
  assert {:sourceloc} {:sourceloc_num 70} true;
  v54 := $$temp.i[2];
  assert {:sourceloc} {:sourceloc_num 71} true;
  v55 := $$temp.i[3];
  $r1.i.1, $r2.i.1, $a.i.1, $b.i.1 := $r2.i.0, BV_CONCAT(BV_CONCAT(BV_CONCAT(v55, v54), v53), v52), BV_CONCAT(BV_CONCAT(BV_CONCAT(v39, v38), v37), v36), v49;
  goto $10;
$7:
  assert {:block_sourceloc} {:sourceloc_num 72} true;
  assert {:sourceloc} {:sourceloc_num 73} true;
  v56 := $$temp.i[4];
  assert {:sourceloc} {:sourceloc_num 74} true;
  v57 := $$temp.i[5];
  assert {:sourceloc} {:sourceloc_num 75} true;
  v58 := $$temp.i[6];
  assert {:sourceloc} {:sourceloc_num 76} true;
  v59 := $$temp.i[7];
  $r1.i.1, $r2.i.1, $a.i.1, $b.i.1 := $r2.i.0, BV_CONCAT(BV_CONCAT(BV_CONCAT(v59, v58), v57), v56), v44, v50;
  goto $10;
$8:
  assert {:block_sourceloc} {:sourceloc_num 77} true;
  assert {:sourceloc} {:sourceloc_num 78} true;
  v60 := $$temp.i[8];
  assert {:sourceloc} {:sourceloc_num 79} true;
  v61 := $$temp.i[9];
  assert {:sourceloc} {:sourceloc_num 80} true;
  v62 := $$temp.i[10];
  assert {:sourceloc} {:sourceloc_num 81} true;
  v63 := $$temp.i[11];
  $r1.i.1, $r2.i.1, $a.i.1, $b.i.1 := $r2.i.0, BV_CONCAT(BV_CONCAT(BV_CONCAT(v63, v62), v61), v60), v49, $nextRand.0;
  goto $10;
$9:
  assert {:block_sourceloc} {:sourceloc_num 82} true;
  $r1.i.1, $r2.i.1, $a.i.1, $b.i.1 := $r1.i.0, $r2.i.0, $a.i.0, $b.i.0;
  goto $10;
$10:
  assert {:block_sourceloc} {:sourceloc_num 83} true;
  assert {:sourceloc} {:sourceloc_num 84} true;
  v64 := $$temp.i[BV32_MUL($i.i.0, 4)];
  assert {:sourceloc} {:sourceloc_num 85} true;
  v65 := $$temp.i[BV32_ADD(BV32_MUL($i.i.0, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 86} true;
  v66 := $$temp.i[BV32_ADD(BV32_MUL($i.i.0, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 87} true;
  v67 := $$temp.i[BV32_ADD(BV32_MUL($i.i.0, 4), 3)];
  assert {:sourceloc} {:sourceloc_num 88} true;
  $$temp.i[BV32_MUL($i.i.0, 4)] := BV32_XOR(BV32_XOR(BV32_XOR(BV32_XOR(BV_EXTRACT($a.i.1, 32, 0), BV32_SHL(BV_EXTRACT($a.i.1, 32, 0), 24)), BV32_AND(BV32_LSHR(BV_EXTRACT($b.i.1, 32, 0), 13), -33605633)), BV32_OR(BV32_LSHR(BV_EXTRACT($r1.i.1, 32, 0), 24), BV32_SHL(BV_EXTRACT($r1.i.1, 64, 32), 8))), BV32_SHL(BV_EXTRACT($r2.i.1, 32, 0), 15));
  assert {:sourceloc} {:sourceloc_num 89} true;
  $$temp.i[BV32_ADD(BV32_MUL($i.i.0, 4), 1)] := v65;
  assert {:sourceloc} {:sourceloc_num 90} true;
  $$temp.i[BV32_ADD(BV32_MUL($i.i.0, 4), 2)] := v66;
  assert {:sourceloc} {:sourceloc_num 91} true;
  $$temp.i[BV32_ADD(BV32_MUL($i.i.0, 4), 3)] := v67;
  assert {:sourceloc} {:sourceloc_num 92} true;
  v68 := $$temp.i[BV32_MUL($i.i.0, 4)];
  assert {:sourceloc} {:sourceloc_num 93} true;
  v69 := $$temp.i[BV32_ADD(BV32_MUL($i.i.0, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 94} true;
  v70 := $$temp.i[BV32_ADD(BV32_MUL($i.i.0, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 95} true;
  v71 := $$temp.i[BV32_ADD(BV32_MUL($i.i.0, 4), 3)];
  assert {:sourceloc} {:sourceloc_num 96} true;
  $$temp.i[BV32_MUL($i.i.0, 4)] := v68;
  assert {:sourceloc} {:sourceloc_num 97} true;
  $$temp.i[BV32_ADD(BV32_MUL($i.i.0, 4), 1)] := BV32_XOR(BV32_XOR(BV32_XOR(BV32_XOR(BV_EXTRACT($a.i.1, 64, 32), BV32_OR(BV32_SHL(BV_EXTRACT($a.i.1, 64, 32), 24), BV32_LSHR(BV_EXTRACT($a.i.1, 32, 0), 8))), BV32_AND(BV32_LSHR(BV_EXTRACT($b.i.1, 64, 32), 13), -276873347)), BV32_OR(BV32_LSHR(BV_EXTRACT($r1.i.1, 64, 32), 24), BV32_SHL(BV_EXTRACT($r1.i.1, 96, 64), 8))), BV32_SHL(BV_EXTRACT($r2.i.1, 64, 32), 15));
  assert {:sourceloc} {:sourceloc_num 98} true;
  $$temp.i[BV32_ADD(BV32_MUL($i.i.0, 4), 2)] := v70;
  assert {:sourceloc} {:sourceloc_num 99} true;
  $$temp.i[BV32_ADD(BV32_MUL($i.i.0, 4), 3)] := v71;
  assert {:sourceloc} {:sourceloc_num 100} true;
  v72 := $$temp.i[BV32_MUL($i.i.0, 4)];
  assert {:sourceloc} {:sourceloc_num 101} true;
  v73 := $$temp.i[BV32_ADD(BV32_MUL($i.i.0, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 102} true;
  v74 := $$temp.i[BV32_ADD(BV32_MUL($i.i.0, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 103} true;
  v75 := $$temp.i[BV32_ADD(BV32_MUL($i.i.0, 4), 3)];
  assert {:sourceloc} {:sourceloc_num 104} true;
  $$temp.i[BV32_MUL($i.i.0, 4)] := v72;
  assert {:sourceloc} {:sourceloc_num 105} true;
  $$temp.i[BV32_ADD(BV32_MUL($i.i.0, 4), 1)] := v73;
  assert {:sourceloc} {:sourceloc_num 106} true;
  $$temp.i[BV32_ADD(BV32_MUL($i.i.0, 4), 2)] := BV32_XOR(BV32_XOR(BV32_XOR(BV32_XOR(BV_EXTRACT($a.i.1, 96, 64), BV32_OR(BV32_SHL(BV_EXTRACT($a.i.1, 96, 64), 24), BV32_LSHR(BV_EXTRACT($a.i.1, 64, 32), 8))), BV32_AND(BV32_LSHR(BV_EXTRACT($b.i.1, 96, 64), 13), -8946819)), BV32_OR(BV32_LSHR(BV_EXTRACT($r1.i.1, 96, 64), 24), BV32_SHL(BV_EXTRACT($r1.i.1, 128, 96), 8))), BV32_SHL(BV_EXTRACT($r2.i.1, 96, 64), 15));
  assert {:sourceloc} {:sourceloc_num 107} true;
  $$temp.i[BV32_ADD(BV32_MUL($i.i.0, 4), 3)] := v75;
  assert {:sourceloc} {:sourceloc_num 108} true;
  v76 := $$temp.i[BV32_MUL($i.i.0, 4)];
  assert {:sourceloc} {:sourceloc_num 109} true;
  v77 := $$temp.i[BV32_ADD(BV32_MUL($i.i.0, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 110} true;
  v78 := $$temp.i[BV32_ADD(BV32_MUL($i.i.0, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 111} true;
  v79 := $$temp.i[BV32_ADD(BV32_MUL($i.i.0, 4), 3)];
  assert {:sourceloc} {:sourceloc_num 112} true;
  $$temp.i[BV32_MUL($i.i.0, 4)] := v76;
  assert {:sourceloc} {:sourceloc_num 113} true;
  $$temp.i[BV32_ADD(BV32_MUL($i.i.0, 4), 1)] := v77;
  assert {:sourceloc} {:sourceloc_num 114} true;
  $$temp.i[BV32_ADD(BV32_MUL($i.i.0, 4), 2)] := v78;
  assert {:sourceloc} {:sourceloc_num 115} true;
  $$temp.i[BV32_ADD(BV32_MUL($i.i.0, 4), 3)] := BV32_XOR(BV32_XOR(BV32_XOR(BV32_XOR(BV_EXTRACT($a.i.1, 128, 96), BV32_OR(BV32_SHL(BV_EXTRACT($a.i.1, 128, 96), 24), BV32_LSHR(BV_EXTRACT($a.i.1, 96, 64), 8))), BV32_AND(BV32_LSHR(BV_EXTRACT($b.i.1, 128, 96), 13), 2146958127)), BV32_LSHR(BV_EXTRACT($r1.i.1, 128, 96), 24)), BV32_SHL(BV_EXTRACT($r2.i.1, 128, 96), 15));
  $r1.i.0, $r2.i.0, $a.i.0, $b.i.0, $i.i.0 := $r1.i.1, $r2.i.1, $a.i.1, $b.i.1, BV32_ADD($i.i.0, 1);
  goto $3;
$generateRand.exit:
  assert {:block_sourceloc} {:sourceloc_num 116} true;
  assert {:sourceloc} {:sourceloc_num 117} true;
  v80 := $$temp.i[0];
  assert {:sourceloc} {:sourceloc_num 118} true;
  v81 := $$temp.i[1];
  assert {:sourceloc} {:sourceloc_num 119} true;
  v82 := $$temp.i[2];
  assert {:sourceloc} {:sourceloc_num 120} true;
  v83 := $$temp.i[3];
  assert {:sourceloc} {:sourceloc_num 121} true;
  v84 := $$temp.i[4];
  assert {:sourceloc} {:sourceloc_num 122} true;
  v85 := $$temp.i[5];
  assert {:sourceloc} {:sourceloc_num 123} true;
  v86 := $$temp.i[6];
  assert {:sourceloc} {:sourceloc_num 124} true;
  v87 := $$temp.i[7];
  v88 := FSQRT64(FMUL64(-4611686018427387904, FMUL64(FLOG64(FDIV64(UI32_TO_FP64(v80), 4751297606875873280)), 4604418534330597376)));
  v89 := FSQRT64(FMUL64(-4611686018427387904, FMUL64(FLOG64(FDIV64(UI32_TO_FP64(v81), 4751297606875873280)), 4604418534330597376)));
  v90 := FSQRT64(FMUL64(-4611686018427387904, FMUL64(FLOG64(FDIV64(UI32_TO_FP64(v82), 4751297606875873280)), 4604418534330597376)));
  v91 := FSQRT64(FMUL64(-4611686018427387904, FMUL64(FLOG64(FDIV64(UI32_TO_FP64(v83), 4751297606875873280)), 4604418534330597376)));
  v92 := FMUL64(4618760256179416337, FDIV64(UI32_TO_FP64(v84), 4751297606875873280));
  v93 := FMUL64(4618760256179416337, FDIV64(UI32_TO_FP64(v85), 4751297606875873280));
  v94 := FMUL64(4618760256179416337, FDIV64(UI32_TO_FP64(v86), 4751297606875873280));
  v95 := FMUL64(4618760256179416337, FDIV64(UI32_TO_FP64(v87), 4751297606875873280));
  assert {:sourceloc} {:sourceloc_num 125} true;
  v96 := $$temp.i[8];
  assert {:sourceloc} {:sourceloc_num 126} true;
  v97 := $$temp.i[9];
  assert {:sourceloc} {:sourceloc_num 127} true;
  v98 := $$temp.i[10];
  assert {:sourceloc} {:sourceloc_num 128} true;
  v99 := $$temp.i[11];
  v100 := FMUL64(BV_EXTRACT($trajPrice1.0, 64, 0), FEXP64(FMUL64(FADD64(FMUL64(v8, FMUL64(v88, FCOS64(v92))), v4), 4609176140021203710)));
  v101 := FMUL64(BV_EXTRACT($trajPrice1.0, 128, 64), FEXP64(FMUL64(FADD64(FMUL64(v9, FMUL64(v89, FCOS64(v93))), v5), 4609176140021203710)));
  v102 := FMUL64(BV_EXTRACT($trajPrice1.0, 192, 128), FEXP64(FMUL64(FADD64(FMUL64(v10, FMUL64(v90, FCOS64(v94))), v6), 4609176140021203710)));
  v103 := FMUL64(BV_EXTRACT($trajPrice1.0, 256, 192), FEXP64(FMUL64(FADD64(FMUL64(v11, FMUL64(v91, FCOS64(v95))), v7), 4609176140021203710)));
  v104 := FMUL64(BV_EXTRACT($trajPrice2.0, 64, 0), FEXP64(FMUL64(FADD64(FMUL64(v8, FMUL64(v88, FSIN64(v92))), v4), 4609176140021203710)));
  v105 := FMUL64(BV_EXTRACT($trajPrice2.0, 128, 64), FEXP64(FMUL64(FADD64(FMUL64(v9, FMUL64(v89, FSIN64(v93))), v5), 4609176140021203710)));
  v106 := FMUL64(BV_EXTRACT($trajPrice2.0, 192, 128), FEXP64(FMUL64(FADD64(FMUL64(v10, FMUL64(v90, FSIN64(v94))), v6), 4609176140021203710)));
  v107 := FMUL64(BV_EXTRACT($trajPrice2.0, 256, 192), FEXP64(FMUL64(FADD64(FMUL64(v11, FMUL64(v91, FSIN64(v95))), v7), 4609176140021203710)));
  v108 := SI32_TO_FP64($i.0);
  v109 := FMUL64(FMUL64(v12, v25), v108);
  v110 := FMUL64(FMUL64(v13, v26), v108);
  v111 := FMUL64(FMUL64(v14, v27), v108);
  v112 := FMUL64(FMUL64(v15, v28), v108);
  goto $11;
$11:
  assert {:block_sourceloc} {:sourceloc_num 129} true;
  $nextRand.0, $trajPrice1.0, $trajPrice2.0, $sumPrice1.0, $sumPrice2.0, $sumDeriv1.0, $sumDeriv2.0, $i.0 := BV_CONCAT(BV_CONCAT(BV_CONCAT(v99, v98), v97), v96), BV_CONCAT(BV_CONCAT(BV_CONCAT(v103, v102), v101), v100), BV_CONCAT(BV_CONCAT(BV_CONCAT(v107, v106), v105), v104), BV_CONCAT(BV_CONCAT(BV_CONCAT(FADD64(BV_EXTRACT($sumPrice1.0, 256, 192), v103), FADD64(BV_EXTRACT($sumPrice1.0, 192, 128), v102)), FADD64(BV_EXTRACT($sumPrice1.0, 128, 64), v101)), FADD64(BV_EXTRACT($sumPrice1.0, 64, 0), v100)), BV_CONCAT(BV_CONCAT(BV_CONCAT(FADD64(BV_EXTRACT($sumPrice2.0, 256, 192), v107), FADD64(BV_EXTRACT($sumPrice2.0, 192, 128), v106)), FADD64(BV_EXTRACT($sumPrice2.0, 128, 64), v105)), FADD64(BV_EXTRACT($sumPrice2.0, 64, 0), v104)), BV_CONCAT(BV_CONCAT(BV_CONCAT(FADD64(FMUL64(v103, FDIV64(FADD64(FMUL64(FLOG64(FDIV64(v103, v19)), 4604418534330597376), FSUB64(-9223372036854775808, v112)), v24)), BV_EXTRACT($sumDeriv1.0, 256, 192)), FADD64(FMUL64(v102, FDIV64(FADD64(FMUL64(FLOG64(FDIV64(v102, v18)), 4604418534330597376), FSUB64(-9223372036854775808, v111)), v23)), BV_EXTRACT($sumDeriv1.0, 192, 128))), FADD64(FMUL64(v101, FDIV64(FADD64(FMUL64(FLOG64(FDIV64(v101, v17)), 4604418534330597376), FSUB64(-9223372036854775808, v110)), v22)), BV_EXTRACT($sumDeriv1.0, 128, 64))), FADD64(FMUL64(v100, FDIV64(FADD64(FMUL64(FLOG64(FDIV64(v100, v16)), 4604418534330597376), FSUB64(-9223372036854775808, v109)), v21)), BV_EXTRACT($sumDeriv1.0, 64, 0))), BV_CONCAT(BV_CONCAT(BV_CONCAT(FADD64(FMUL64(v107, FDIV64(FADD64(FMUL64(FLOG64(FDIV64(v107, v19)), 4604418534330597376), FSUB64(-9223372036854775808, v112)), v24)), BV_EXTRACT($sumDeriv2.0, 256, 192)), FADD64(FMUL64(v106, FDIV64(FADD64(FMUL64(FLOG64(FDIV64(v106, v18)), 4604418534330597376), FSUB64(-9223372036854775808, v111)), v23)), BV_EXTRACT($sumDeriv2.0, 192, 128))), FADD64(FMUL64(v105, FDIV64(FADD64(FMUL64(FLOG64(FDIV64(v105, v17)), 4604418534330597376), FSUB64(-9223372036854775808, v110)), v22)), BV_EXTRACT($sumDeriv2.0, 128, 64))), FADD64(FMUL64(v104, FDIV64(FADD64(FMUL64(FLOG64(FDIV64(v104, v16)), 4604418534330597376), FSUB64(-9223372036854775808, v109)), v21)), BV_EXTRACT($sumDeriv2.0, 64, 0))), BV32_ADD($i.0, 1);
  goto $1;
$12:
  assert {:block_sourceloc} {:sourceloc_num 130} true;
  v113 := SI32_TO_FP64($noOfSum);
  v114 := SI32_TO_FP64($noOfSum);
  v115 := SI32_TO_FP64($noOfSum);
  v116 := SI32_TO_FP64($noOfSum);
  v117 := FSUB64(FDIV64(BV_EXTRACT($sumPrice1.0, 64, 0), v113), v0);
  v118 := FSUB64(FDIV64(BV_EXTRACT($sumPrice1.0, 128, 64), v113), v1);
  v119 := FSUB64(FDIV64(BV_EXTRACT($sumPrice1.0, 192, 128), v113), v2);
  v120 := FSUB64(FDIV64(BV_EXTRACT($sumPrice1.0, 256, 192), v113), v3);
  v121 := FSUB64(FDIV64(BV_EXTRACT($sumPrice2.0, 64, 0), v114), v0);
  v122 := FSUB64(FDIV64(BV_EXTRACT($sumPrice2.0, 128, 64), v114), v1);
  v123 := FSUB64(FDIV64(BV_EXTRACT($sumPrice2.0, 192, 128), v114), v2);
  v124 := FSUB64(FDIV64(BV_EXTRACT($sumPrice2.0, 256, 192), v114), v3);
  v125 := FLT64(0, v117);
  goto $truebb1, $falsebb1;
$13:
  assert {:block_sourceloc} {:sourceloc_num 131} true;
  $temp3.i.0, $temp1.i1.0 := BV_CONCAT(0, v117), 4607182418800017408;
  goto $14;
$14:
  assert {:block_sourceloc} {:sourceloc_num 132} true;
  v126 := FLT64(0, v118);
  goto $truebb2, $falsebb2;
$15:
  assert {:block_sourceloc} {:sourceloc_num 133} true;
  $temp3.i.1, $temp1.i1.1 := BV_CONCAT(BV_CONCAT(BV_CONCAT(BV_EXTRACT($temp3.i.0, 256, 192), BV_EXTRACT($temp3.i.0, 192, 128)), v118), BV_EXTRACT($temp3.i.0, 64, 0)), BV_CONCAT(BV_CONCAT(BV_CONCAT(BV_EXTRACT($temp1.i1.0, 256, 192), BV_EXTRACT($temp1.i1.0, 192, 128)), 4607182418800017408), BV_EXTRACT($temp1.i1.0, 64, 0));
  goto $16;
$16:
  assert {:block_sourceloc} {:sourceloc_num 134} true;
  v127 := FLT64(0, v119);
  goto $truebb3, $falsebb3;
$17:
  assert {:block_sourceloc} {:sourceloc_num 135} true;
  $temp3.i.2, $temp1.i1.2 := BV_CONCAT(BV_CONCAT(BV_CONCAT(BV_EXTRACT($temp3.i.1, 256, 192), v119), BV_EXTRACT($temp3.i.1, 128, 64)), BV_EXTRACT($temp3.i.1, 64, 0)), BV_CONCAT(BV_CONCAT(BV_CONCAT(BV_EXTRACT($temp1.i1.1, 256, 192), 4607182418800017408), BV_EXTRACT($temp1.i1.1, 128, 64)), BV_EXTRACT($temp1.i1.1, 64, 0));
  goto $18;
$18:
  assert {:block_sourceloc} {:sourceloc_num 136} true;
  v128 := FLT64(0, v120);
  goto $truebb4, $falsebb4;
$19:
  assert {:block_sourceloc} {:sourceloc_num 137} true;
  $temp3.i.3, $temp1.i1.3 := BV_CONCAT(BV_CONCAT(BV_CONCAT(v120, BV_EXTRACT($temp3.i.2, 192, 128)), BV_EXTRACT($temp3.i.2, 128, 64)), BV_EXTRACT($temp3.i.2, 64, 0)), BV_CONCAT(BV_CONCAT(BV_CONCAT(4607182418800017408, BV_EXTRACT($temp1.i1.2, 192, 128)), BV_EXTRACT($temp1.i1.2, 128, 64)), BV_EXTRACT($temp1.i1.2, 64, 0));
  goto $20;
$20:
  assert {:block_sourceloc} {:sourceloc_num 138} true;
  v129 := FLT64(0, v121);
  goto $truebb5, $falsebb5;
$21:
  assert {:block_sourceloc} {:sourceloc_num 139} true;
  $temp4.i.0, $temp2.i2.0 := BV_CONCAT(0, v121), 4607182418800017408;
  goto $22;
$22:
  assert {:block_sourceloc} {:sourceloc_num 140} true;
  v130 := FLT64(0, v122);
  goto $truebb6, $falsebb6;
$23:
  assert {:block_sourceloc} {:sourceloc_num 141} true;
  $temp4.i.1, $temp2.i2.1 := BV_CONCAT(BV_CONCAT(BV_CONCAT(BV_EXTRACT($temp4.i.0, 256, 192), BV_EXTRACT($temp4.i.0, 192, 128)), v122), BV_EXTRACT($temp4.i.0, 64, 0)), BV_CONCAT(BV_CONCAT(BV_CONCAT(BV_EXTRACT($temp2.i2.0, 256, 192), BV_EXTRACT($temp2.i2.0, 192, 128)), 4607182418800017408), BV_EXTRACT($temp2.i2.0, 64, 0));
  goto $24;
$24:
  assert {:block_sourceloc} {:sourceloc_num 142} true;
  v131 := FLT64(0, v123);
  goto $truebb7, $falsebb7;
$25:
  assert {:block_sourceloc} {:sourceloc_num 143} true;
  $temp4.i.2, $temp2.i2.2 := BV_CONCAT(BV_CONCAT(BV_CONCAT(BV_EXTRACT($temp4.i.1, 256, 192), v123), BV_EXTRACT($temp4.i.1, 128, 64)), BV_EXTRACT($temp4.i.1, 64, 0)), BV_CONCAT(BV_CONCAT(BV_CONCAT(BV_EXTRACT($temp2.i2.1, 256, 192), 4607182418800017408), BV_EXTRACT($temp2.i2.1, 128, 64)), BV_EXTRACT($temp2.i2.1, 64, 0));
  goto $26;
$26:
  assert {:block_sourceloc} {:sourceloc_num 144} true;
  v132 := FLT64(0, v124);
  goto $truebb8, $falsebb8;
$27:
  assert {:block_sourceloc} {:sourceloc_num 145} true;
  $temp4.i.3, $temp2.i2.3 := BV_CONCAT(BV_CONCAT(BV_CONCAT(v124, BV_EXTRACT($temp4.i.2, 192, 128)), BV_EXTRACT($temp4.i.2, 128, 64)), BV_EXTRACT($temp4.i.2, 64, 0)), BV_CONCAT(BV_CONCAT(BV_CONCAT(4607182418800017408, BV_EXTRACT($temp2.i2.2, 192, 128)), BV_EXTRACT($temp2.i2.2, 128, 64)), BV_EXTRACT($temp2.i2.2, 64, 0));
  goto $calOutputs.exit;
$calOutputs.exit:
  assert {:block_sourceloc} {:sourceloc_num 146} true;
  assert {:sourceloc} {:sourceloc_num 147} true;
  $$priceSamples[BV32_MUL(BV32_MUL(BV32_ADD(BV32_MUL(v30, $width), v29), 2), 4)] := BV_EXTRACT($temp3.i.3, 64, 0);
  assert {:sourceloc} {:sourceloc_num 148} true;
  $$priceSamples[BV32_ADD(BV32_MUL(BV32_MUL(BV32_ADD(BV32_MUL(v30, $width), v29), 2), 4), 1)] := BV_EXTRACT($temp3.i.3, 128, 64);
  assert {:sourceloc} {:sourceloc_num 149} true;
  $$priceSamples[BV32_ADD(BV32_MUL(BV32_MUL(BV32_ADD(BV32_MUL(v30, $width), v29), 2), 4), 2)] := BV_EXTRACT($temp3.i.3, 192, 128);
  assert {:sourceloc} {:sourceloc_num 150} true;
  $$priceSamples[BV32_ADD(BV32_MUL(BV32_MUL(BV32_ADD(BV32_MUL(v30, $width), v29), 2), 4), 3)] := BV_EXTRACT($temp3.i.3, 256, 192);
  assert {:sourceloc} {:sourceloc_num 151} true;
  $$priceSamples[BV32_MUL(BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(v30, $width), v29), 2), 1), 4)] := BV_EXTRACT($temp4.i.3, 64, 0);
  assert {:sourceloc} {:sourceloc_num 152} true;
  $$priceSamples[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(v30, $width), v29), 2), 1), 4), 1)] := BV_EXTRACT($temp4.i.3, 128, 64);
  assert {:sourceloc} {:sourceloc_num 153} true;
  $$priceSamples[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(v30, $width), v29), 2), 1), 4), 2)] := BV_EXTRACT($temp4.i.3, 192, 128);
  assert {:sourceloc} {:sourceloc_num 154} true;
  $$priceSamples[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(v30, $width), v29), 2), 1), 4), 3)] := BV_EXTRACT($temp4.i.3, 256, 192);
  assert {:sourceloc} {:sourceloc_num 155} true;
  $$pathDeriv[BV32_MUL(BV32_MUL(BV32_ADD(BV32_MUL(v30, $width), v29), 2), 4)] := FMUL64(FDIV64(BV_EXTRACT($sumDeriv1.0, 64, 0), v115), BV_EXTRACT($temp1.i1.3, 64, 0));
  assert {:sourceloc} {:sourceloc_num 156} true;
  $$pathDeriv[BV32_ADD(BV32_MUL(BV32_MUL(BV32_ADD(BV32_MUL(v30, $width), v29), 2), 4), 1)] := FMUL64(FDIV64(BV_EXTRACT($sumDeriv1.0, 128, 64), v115), BV_EXTRACT($temp1.i1.3, 128, 64));
  assert {:sourceloc} {:sourceloc_num 157} true;
  $$pathDeriv[BV32_ADD(BV32_MUL(BV32_MUL(BV32_ADD(BV32_MUL(v30, $width), v29), 2), 4), 2)] := FMUL64(FDIV64(BV_EXTRACT($sumDeriv1.0, 192, 128), v115), BV_EXTRACT($temp1.i1.3, 192, 128));
  assert {:sourceloc} {:sourceloc_num 158} true;
  $$pathDeriv[BV32_ADD(BV32_MUL(BV32_MUL(BV32_ADD(BV32_MUL(v30, $width), v29), 2), 4), 3)] := FMUL64(FDIV64(BV_EXTRACT($sumDeriv1.0, 256, 192), v115), BV_EXTRACT($temp1.i1.3, 256, 192));
  assert {:sourceloc} {:sourceloc_num 159} true;
  $$pathDeriv[BV32_MUL(BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(v30, $width), v29), 2), 1), 4)] := FMUL64(FDIV64(BV_EXTRACT($sumDeriv2.0, 64, 0), v116), BV_EXTRACT($temp2.i2.3, 64, 0));
  assert {:sourceloc} {:sourceloc_num 160} true;
  $$pathDeriv[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(v30, $width), v29), 2), 1), 4), 1)] := FMUL64(FDIV64(BV_EXTRACT($sumDeriv2.0, 128, 64), v116), BV_EXTRACT($temp2.i2.3, 128, 64));
  assert {:sourceloc} {:sourceloc_num 161} true;
  $$pathDeriv[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(v30, $width), v29), 2), 1), 4), 2)] := FMUL64(FDIV64(BV_EXTRACT($sumDeriv2.0, 192, 128), v116), BV_EXTRACT($temp2.i2.3, 192, 128));
  assert {:sourceloc} {:sourceloc_num 162} true;
  $$pathDeriv[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(v30, $width), v29), 2), 1), 4), 3)] := FMUL64(FDIV64(BV_EXTRACT($sumDeriv2.0, 256, 192), v116), BV_EXTRACT($temp2.i2.3, 256, 192));
  return;
$truebb:
  assume {:partition} v35;
  assert {:block_sourceloc} {:sourceloc_num 163} true;
  goto $2;
$falsebb:
  assume {:partition} !v35;
  assert {:block_sourceloc} {:sourceloc_num 164} true;
  goto $12;
$truebb0:
  assume {:partition} v51;
  assert {:block_sourceloc} {:sourceloc_num 165} true;
  goto $4;
$falsebb0:
  assume {:partition} !v51;
  assert {:block_sourceloc} {:sourceloc_num 166} true;
  goto $generateRand.exit;
$casebb:
  assume {:partition} $i.i.0 == 0;
  assert {:block_sourceloc} {:sourceloc_num 167} true;
  goto $5;
$casebb0:
  assume {:partition} $i.i.0 == 1;
  assert {:block_sourceloc} {:sourceloc_num 168} true;
  goto $6;
$casebb1:
  assume {:partition} $i.i.0 == 2;
  assert {:block_sourceloc} {:sourceloc_num 169} true;
  goto $7;
$casebb2:
  assume {:partition} $i.i.0 == 3;
  assert {:block_sourceloc} {:sourceloc_num 170} true;
  goto $8;
$defaultbb:
  assert {:block_sourceloc} {:sourceloc_num 171} true;
  assume {:partition} (($i.i.0 != 0 && $i.i.0 != 1) && $i.i.0 != 2) && $i.i.0 != 3;
  goto $9;
$truebb1:
  assume {:partition} v125;
  assert {:block_sourceloc} {:sourceloc_num 172} true;
  goto $13;
$falsebb1:
  assume {:partition} !v125;
  assert {:block_sourceloc} {:sourceloc_num 173} true;
  $temp3.i.0, $temp1.i1.0 := 0, 0;
  goto $14;
$truebb2:
  assume {:partition} v126;
  assert {:block_sourceloc} {:sourceloc_num 174} true;
  goto $15;
$falsebb2:
  assume {:partition} !v126;
  assert {:block_sourceloc} {:sourceloc_num 175} true;
  $temp3.i.1, $temp1.i1.1 := $temp3.i.0, $temp1.i1.0;
  goto $16;
$truebb3:
  assume {:partition} v127;
  assert {:block_sourceloc} {:sourceloc_num 176} true;
  goto $17;
$falsebb3:
  assume {:partition} !v127;
  assert {:block_sourceloc} {:sourceloc_num 177} true;
  $temp3.i.2, $temp1.i1.2 := $temp3.i.1, $temp1.i1.1;
  goto $18;
$truebb4:
  assume {:partition} v128;
  assert {:block_sourceloc} {:sourceloc_num 178} true;
  goto $19;
$falsebb4:
  assume {:partition} !v128;
  assert {:block_sourceloc} {:sourceloc_num 179} true;
  $temp3.i.3, $temp1.i1.3 := $temp3.i.2, $temp1.i1.2;
  goto $20;
$truebb5:
  assume {:partition} v129;
  assert {:block_sourceloc} {:sourceloc_num 180} true;
  goto $21;
$falsebb5:
  assume {:partition} !v129;
  assert {:block_sourceloc} {:sourceloc_num 181} true;
  $temp4.i.0, $temp2.i2.0 := 0, 0;
  goto $22;
$truebb6:
  assume {:partition} v130;
  assert {:block_sourceloc} {:sourceloc_num 182} true;
  goto $23;
$falsebb6:
  assume {:partition} !v130;
  assert {:block_sourceloc} {:sourceloc_num 183} true;
  $temp4.i.1, $temp2.i2.1 := $temp4.i.0, $temp2.i2.0;
  goto $24;
$truebb7:
  assume {:partition} v131;
  assert {:block_sourceloc} {:sourceloc_num 184} true;
  goto $25;
$falsebb7:
  assume {:partition} !v131;
  assert {:block_sourceloc} {:sourceloc_num 185} true;
  $temp4.i.2, $temp2.i2.2 := $temp4.i.1, $temp2.i2.1;
  goto $26;
$truebb8:
  assume {:partition} v132;
  assert {:block_sourceloc} {:sourceloc_num 186} true;
  goto $27;
$falsebb8:
  assume {:partition} !v132;
  assert {:block_sourceloc} {:sourceloc_num 187} true;
  $temp4.i.3, $temp2.i2.3 := $temp4.i.2, $temp2.i2.2;
  goto $calOutputs.exit;
}
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 256 then 1 else 0) != 0;
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if num_groups_x == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 512 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
