type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "pos"} {:global} $$pos : [int]int;
axiom {:array_info "$$pos"} {:global} {:elem_width 32} {:source_name "pos"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$pos : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$pos : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$pos : bool;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_id_y} group_id_y : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:local_id_y} local_id_y : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function FADD32(int, int) : int;
function FCOS32(int) : int;
function FDIV32(int, int) : int;
function FMUL32(int, int) : int;
function FSIN32(int) : int;
function UI32_TO_FP32(int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
procedure {:source_name "sineWave"} {:kernel} $sineWave($width:int, $height:int, $time:int)
requires {:sourceloc_num 0} (if $width == 512 then 1 else 0) != 0;
{
  var v0:int;
  var v1:int;
  var v2:int;
  var v3:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  v1 := BV32_ADD(BV32_MUL(group_id_y, group_size_y), local_id_y);
  v2 := FADD32(FMUL32(FDIV32(UI32_TO_FP32(v0), UI32_TO_FP32($width)), 1073741824), -1082130432);
  v3 := FADD32(FMUL32(FDIV32(UI32_TO_FP32(v1), UI32_TO_FP32($height)), 1073741824), -1082130432);
  assert {:sourceloc} {:sourceloc_num 2} true;
  $$pos[BV32_MUL(BV32_ADD(BV32_MUL(v1, $width), v0), 4)] := v2;
  assert {:sourceloc} {:sourceloc_num 3} true;
  $$pos[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(v1, $width), v0), 4), 1)] := FMUL32(FMUL32(FSIN32(FADD32(FMUL32(v2, 1082130432), $time)), FCOS32(FADD32(FMUL32(v3, 1082130432), $time))), 1056964608);
  assert {:sourceloc} {:sourceloc_num 4} true;
  $$pos[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(v1, $width), v0), 4), 2)] := v3;
  assert {:sourceloc} {:sourceloc_num 5} true;
  $$pos[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(v1, $width), v0), 4), 3)] := 1065353216;
  return;
}
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 64 then 1 else 0) != 0;
axiom (if group_size_y == 64 then 1 else 0) != 0;
axiom (if num_groups_x == 8 then 1 else 0) != 0;
axiom (if num_groups_y == 8 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
