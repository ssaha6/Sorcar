type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP8(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "input"} {:global} $$input : [int]int;
axiom {:array_info "$$input"} {:global} {:elem_width 8} {:source_name "input"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$input : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$input : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$input : bool;

var {:source_name "output"} {:global} $$output : [int]int;
axiom {:array_info "$$output"} {:global} {:elem_width 8} {:source_name "output"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$output : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$output : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$output : bool;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function BV_CONCAT(int, int) : int;
function BV_EXTRACT(int, int, int) : int;
function FADD32(int, int) : int;
function FMUL32(int, int) : int;
function FP32_TO_UI8(int) : int;
function FSUB32(int, int) : int;
function UI8_TO_FP32(int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SGT(x : int, y : int) : bool {
  x > y
}
function {:inline true} BV32_SLT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV32_SUB(x : int, y : int) : int {
  x - y
}
function {:inline true} BV32_UDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_UGE(x : int, y : int) : bool {
  x >= y
}
function {:inline true} BV32_UREM(x : int, y : int) : int {
  x mod y
}
procedure {:source_name "RecursiveGaussian_kernel"} {:kernel} $RecursiveGaussian_kernel($width:int, $height:int, $a0:int, $a1:int, $a2:int, $a3:int, $b1:int, $b2:int, $coefp:int, $coefn:int)
requires {:sourceloc_num 0} (if $width == 512 then 1 else 0) != 0;
requires {:sourceloc_num 1} (if $height == 512 then 1 else 0) != 0;
{
  var $xp.0:int;
  var $yp.0:int;
  var $yb.0:int;
  var $y.0:int;
  var $xn.0:int;
  var $xa.0:int;
  var $yn.0:int;
  var $ya.0:int;
  var $y1.0:int;
  var v0:int;
  var v1:bool;
  var v2:bool;
  var v3:int;
  var v4:int;
  var v5:int;
  var v6:int;
  var v7:int;
  var v8:int;
  var v9:int;
  var v10:int;
  var v11:int;
  var v12:int;
  var v13:int;
  var v14:int;
  var v15:int;
  var v16:int;
  var v17:int;
  var v18:int;
  var v19:int;
  var v20:int;
  var v21:int;
  var v22:int;
  var v23:int;
  var v24:int;
  var v25:int;
  var v26:int;
  var v27:int;
  var v28:bool;
  var v29:int;
  var v30:int;
  var v31:int;
  var v32:int;
  var v33:int;
  var v34:int;
  var v35:int;
  var v36:int;
  var v37:int;
  var v38:int;
  var v39:int;
  var v40:int;
  var v41:int;
  var v42:int;
  var v43:int;
  var v44:int;
  var v45:int;
  var v46:int;
  var v47:int;
  var v48:int;
  var v49:int;
  var v50:int;
  var v51:int;
  var v52:int;
  var v53:int;
  var v54:int;
  var v55:int;
  var v56:int;
  var v57:int;
  var v58:int;
  var v59:int;
  var v60:int;
  var v61:int;
  var v62:int;
  var v63:int;
  var v64:int;
  var v65:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  v1 := BV32_UGE(v0, $width);
  goto $truebb, $falsebb;
$1:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  goto $10;
$2:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  $xp.0, $yp.0, $yb.0, $y.0 := 0, 0, 0, 0;
  goto $3;
$3:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  v2 := BV32_SLT($y.0, $height);
  goto $truebb0, $falsebb0;
$4:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  v3 := BV32_ADD(v0, BV32_MUL($y.0, $width));
  assert {:sourceloc} {:sourceloc_num 7} true;
  v4 := $$input[BV32_MUL(v3, 4)];
  assert {:sourceloc} {:sourceloc_num 8} true;
  v5 := $$input[BV32_ADD(BV32_MUL(v3, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 9} true;
  v6 := $$input[BV32_ADD(BV32_MUL(v3, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 10} true;
  v7 := $$input[BV32_ADD(BV32_MUL(v3, 4), 3)];
  v8 := UI8_TO_FP32(v4);
  assert {:sourceloc} {:sourceloc_num 11} true;
  v9 := $$input[BV32_MUL(v3, 4)];
  assert {:sourceloc} {:sourceloc_num 12} true;
  v10 := $$input[BV32_ADD(BV32_MUL(v3, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 13} true;
  v11 := $$input[BV32_ADD(BV32_MUL(v3, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 14} true;
  v12 := $$input[BV32_ADD(BV32_MUL(v3, 4), 3)];
  v13 := UI8_TO_FP32(v10);
  assert {:sourceloc} {:sourceloc_num 15} true;
  v14 := $$input[BV32_MUL(v3, 4)];
  assert {:sourceloc} {:sourceloc_num 16} true;
  v15 := $$input[BV32_ADD(BV32_MUL(v3, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 17} true;
  v16 := $$input[BV32_ADD(BV32_MUL(v3, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 18} true;
  v17 := $$input[BV32_ADD(BV32_MUL(v3, 4), 3)];
  v18 := UI8_TO_FP32(v16);
  assert {:sourceloc} {:sourceloc_num 19} true;
  v19 := $$input[BV32_MUL(v3, 4)];
  assert {:sourceloc} {:sourceloc_num 20} true;
  v20 := $$input[BV32_ADD(BV32_MUL(v3, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 21} true;
  v21 := $$input[BV32_ADD(BV32_MUL(v3, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 22} true;
  v22 := $$input[BV32_ADD(BV32_MUL(v3, 4), 3)];
  v23 := UI8_TO_FP32(v22);
  v24 := FADD32(FMUL32(FSUB32(-2147483648, $b2), BV_EXTRACT($yb.0, 32, 0)), FADD32(FMUL32(FSUB32(-2147483648, $b1), BV_EXTRACT($yp.0, 32, 0)), FADD32(FMUL32($a0, v8), FMUL32($a1, BV_EXTRACT($xp.0, 32, 0)))));
  v25 := FADD32(FMUL32(FSUB32(-2147483648, $b2), BV_EXTRACT($yb.0, 64, 32)), FADD32(FMUL32(FSUB32(-2147483648, $b1), BV_EXTRACT($yp.0, 64, 32)), FADD32(FMUL32($a0, v13), FMUL32($a1, BV_EXTRACT($xp.0, 64, 32)))));
  v26 := FADD32(FMUL32(FSUB32(-2147483648, $b2), BV_EXTRACT($yb.0, 96, 64)), FADD32(FMUL32(FSUB32(-2147483648, $b1), BV_EXTRACT($yp.0, 96, 64)), FADD32(FMUL32($a0, v18), FMUL32($a1, BV_EXTRACT($xp.0, 96, 64)))));
  v27 := FADD32(FMUL32(FSUB32(-2147483648, $b2), BV_EXTRACT($yb.0, 128, 96)), FADD32(FMUL32(FSUB32(-2147483648, $b1), BV_EXTRACT($yp.0, 128, 96)), FADD32(FMUL32($a0, v23), FMUL32($a1, BV_EXTRACT($xp.0, 128, 96)))));
  assert {:sourceloc} {:sourceloc_num 23} true;
  $$output[BV32_MUL(v3, 4)] := FP32_TO_UI8(v24);
  assert {:sourceloc} {:sourceloc_num 24} true;
  $$output[BV32_ADD(BV32_MUL(v3, 4), 1)] := FP32_TO_UI8(v25);
  assert {:sourceloc} {:sourceloc_num 25} true;
  $$output[BV32_ADD(BV32_MUL(v3, 4), 2)] := FP32_TO_UI8(v26);
  assert {:sourceloc} {:sourceloc_num 26} true;
  $$output[BV32_ADD(BV32_MUL(v3, 4), 3)] := FP32_TO_UI8(v27);
  goto $5;
$5:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  $xp.0, $yp.0, $yb.0, $y.0 := BV_CONCAT(BV_CONCAT(BV_CONCAT(v23, v18), v13), v8), BV_CONCAT(BV_CONCAT(BV_CONCAT(v27, v26), v25), v24), $yp.0, BV32_ADD($y.0, 1);
  goto $3;
$6:
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  call {:sourceloc_num 29} $bugle_barrier(0, -1);
  $xn.0, $xa.0, $yn.0, $ya.0, $y1.0 := 0, 0, 0, 0, BV32_SUB($height, 1);
  goto $7;
$7:
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 31} (if (_WRITE_HAS_OCCURRED_$$output ==> BV32_UREM(BV32_UDIV(_WATCHED_OFFSET, 4), $width) == v0) then 1 else 0) != 0;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 32} (if (_READ_HAS_OCCURRED_$$output ==> BV32_UREM(BV32_UDIV(_WATCHED_OFFSET, 4), $width) == v0) then 1 else 0) != 0;
  v28 := BV32_SGT($y1.0, -1);
  goto $truebb1, $falsebb1;
$8:
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  v29 := BV32_ADD(v0, BV32_MUL($y1.0, $width));
  assert {:sourceloc} {:sourceloc_num 34} true;
  v30 := $$input[BV32_MUL(v29, 4)];
  assert {:sourceloc} {:sourceloc_num 35} true;
  v31 := $$input[BV32_ADD(BV32_MUL(v29, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 36} true;
  v32 := $$input[BV32_ADD(BV32_MUL(v29, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 37} true;
  v33 := $$input[BV32_ADD(BV32_MUL(v29, 4), 3)];
  assert {:sourceloc} {:sourceloc_num 38} true;
  v34 := $$input[BV32_MUL(v29, 4)];
  assert {:sourceloc} {:sourceloc_num 39} true;
  v35 := $$input[BV32_ADD(BV32_MUL(v29, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 40} true;
  v36 := $$input[BV32_ADD(BV32_MUL(v29, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 41} true;
  v37 := $$input[BV32_ADD(BV32_MUL(v29, 4), 3)];
  assert {:sourceloc} {:sourceloc_num 42} true;
  v38 := $$input[BV32_MUL(v29, 4)];
  assert {:sourceloc} {:sourceloc_num 43} true;
  v39 := $$input[BV32_ADD(BV32_MUL(v29, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 44} true;
  v40 := $$input[BV32_ADD(BV32_MUL(v29, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 45} true;
  v41 := $$input[BV32_ADD(BV32_MUL(v29, 4), 3)];
  assert {:sourceloc} {:sourceloc_num 46} true;
  v42 := $$input[BV32_MUL(v29, 4)];
  assert {:sourceloc} {:sourceloc_num 47} true;
  v43 := $$input[BV32_ADD(BV32_MUL(v29, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 48} true;
  v44 := $$input[BV32_ADD(BV32_MUL(v29, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 49} true;
  v45 := $$input[BV32_ADD(BV32_MUL(v29, 4), 3)];
  v46 := FADD32(FMUL32(FSUB32(-2147483648, $b2), BV_EXTRACT($ya.0, 32, 0)), FADD32(FMUL32(FSUB32(-2147483648, $b1), BV_EXTRACT($yn.0, 32, 0)), FADD32(FMUL32($a2, BV_EXTRACT($xn.0, 32, 0)), FMUL32($a3, BV_EXTRACT($xa.0, 32, 0)))));
  v47 := FADD32(FMUL32(FSUB32(-2147483648, $b2), BV_EXTRACT($ya.0, 64, 32)), FADD32(FMUL32(FSUB32(-2147483648, $b1), BV_EXTRACT($yn.0, 64, 32)), FADD32(FMUL32($a2, BV_EXTRACT($xn.0, 64, 32)), FMUL32($a3, BV_EXTRACT($xa.0, 64, 32)))));
  v48 := FADD32(FMUL32(FSUB32(-2147483648, $b2), BV_EXTRACT($ya.0, 96, 64)), FADD32(FMUL32(FSUB32(-2147483648, $b1), BV_EXTRACT($yn.0, 96, 64)), FADD32(FMUL32($a2, BV_EXTRACT($xn.0, 96, 64)), FMUL32($a3, BV_EXTRACT($xa.0, 96, 64)))));
  v49 := FADD32(FMUL32(FSUB32(-2147483648, $b2), BV_EXTRACT($ya.0, 128, 96)), FADD32(FMUL32(FSUB32(-2147483648, $b1), BV_EXTRACT($yn.0, 128, 96)), FADD32(FMUL32($a2, BV_EXTRACT($xn.0, 128, 96)), FMUL32($a3, BV_EXTRACT($xa.0, 128, 96)))));
  assert {:sourceloc} {:sourceloc_num 50} true;
  v50 := $$output[BV32_MUL(v29, 4)];
  assert {:sourceloc} {:sourceloc_num 51} true;
  v51 := $$output[BV32_ADD(BV32_MUL(v29, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 52} true;
  v52 := $$output[BV32_ADD(BV32_MUL(v29, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 53} true;
  v53 := $$output[BV32_ADD(BV32_MUL(v29, 4), 3)];
  assert {:sourceloc} {:sourceloc_num 54} true;
  v54 := $$output[BV32_MUL(v29, 4)];
  assert {:sourceloc} {:sourceloc_num 55} true;
  v55 := $$output[BV32_ADD(BV32_MUL(v29, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 56} true;
  v56 := $$output[BV32_ADD(BV32_MUL(v29, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 57} true;
  v57 := $$output[BV32_ADD(BV32_MUL(v29, 4), 3)];
  assert {:sourceloc} {:sourceloc_num 58} true;
  v58 := $$output[BV32_MUL(v29, 4)];
  assert {:sourceloc} {:sourceloc_num 59} true;
  v59 := $$output[BV32_ADD(BV32_MUL(v29, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 60} true;
  v60 := $$output[BV32_ADD(BV32_MUL(v29, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 61} true;
  v61 := $$output[BV32_ADD(BV32_MUL(v29, 4), 3)];
  assert {:sourceloc} {:sourceloc_num 62} true;
  v62 := $$output[BV32_MUL(v29, 4)];
  assert {:sourceloc} {:sourceloc_num 63} true;
  v63 := $$output[BV32_ADD(BV32_MUL(v29, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 64} true;
  v64 := $$output[BV32_ADD(BV32_MUL(v29, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 65} true;
  v65 := $$output[BV32_ADD(BV32_MUL(v29, 4), 3)];
  assert {:sourceloc} {:sourceloc_num 66} true;
  $$output[BV32_MUL(v29, 4)] := FP32_TO_UI8(FADD32(UI8_TO_FP32(v50), v46));
  assert {:sourceloc} {:sourceloc_num 67} true;
  $$output[BV32_ADD(BV32_MUL(v29, 4), 1)] := FP32_TO_UI8(FADD32(UI8_TO_FP32(v55), v47));
  assert {:sourceloc} {:sourceloc_num 68} true;
  $$output[BV32_ADD(BV32_MUL(v29, 4), 2)] := FP32_TO_UI8(FADD32(UI8_TO_FP32(v60), v48));
  assert {:sourceloc} {:sourceloc_num 69} true;
  $$output[BV32_ADD(BV32_MUL(v29, 4), 3)] := FP32_TO_UI8(FADD32(UI8_TO_FP32(v65), v49));
  goto $9;
$9:
  assert {:block_sourceloc} {:sourceloc_num 70} true;
  $xn.0, $xa.0, $yn.0, $ya.0, $y1.0 := BV_CONCAT(BV_CONCAT(BV_CONCAT(UI8_TO_FP32(v45), UI8_TO_FP32(v40)), UI8_TO_FP32(v35)), UI8_TO_FP32(v30)), $xn.0, BV_CONCAT(BV_CONCAT(BV_CONCAT(v49, v48), v47), v46), $yn.0, BV32_ADD($y1.0, -1);
  goto $7;
$10:
  assert {:block_sourceloc} {:sourceloc_num 71} true;
  return;
$truebb:
  assume {:partition} v1;
  assert {:block_sourceloc} {:sourceloc_num 72} true;
  goto $1;
$falsebb:
  assume {:partition} !v1;
  assert {:block_sourceloc} {:sourceloc_num 73} true;
  goto $2;
$truebb0:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 74} true;
  goto $4;
$falsebb0:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 75} true;
  goto $6;
$truebb1:
  assume {:partition} v28;
  assert {:block_sourceloc} {:sourceloc_num 76} true;
  goto $8;
$falsebb1:
  assume {:partition} !v28;
  assert {:block_sourceloc} {:sourceloc_num 77} true;
  goto $10;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:int, $1:int);
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 256 then 1 else 0) != 0;
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if num_groups_x == 2 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
