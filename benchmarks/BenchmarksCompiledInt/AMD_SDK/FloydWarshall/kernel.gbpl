type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "pathDistanceBuffer"} {:global} $$pathDistanceBuffer : [int]int;
axiom {:array_info "$$pathDistanceBuffer"} {:global} {:elem_width 32} {:source_name "pathDistanceBuffer"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$pathDistanceBuffer : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$pathDistanceBuffer : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$pathDistanceBuffer : bool;

var {:source_name "pathBuffer"} {:global} $$pathBuffer : [int]int;
axiom {:array_info "$$pathBuffer"} {:global} {:elem_width 32} {:source_name "pathBuffer"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$pathBuffer : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$pathBuffer : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$pathBuffer : bool;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_id_y} group_id_y : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:local_id_y} local_id_y : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function BV_CONCAT(int, int) : int;
function BV_EXTRACT(int, int, int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_ULT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV33_ADD(x : int, y : int) : int {
  x + y
}
procedure {:inline 1} $__add_noovfl_unsigned_32(x : int, y : int) returns (z : int) {
  assume BV_EXTRACT(BV33_ADD(BV_CONCAT(0, x), BV_CONCAT(0, y)), 33, 32) == 0;
  z := BV32_ADD(x, y);
}
procedure {:source_name "floydWarshallPass"} {:kernel} $floydWarshallPass($numNodes:int, $pass:int)
requires {:sourceloc_num 0} (if $numNodes == 64 then 1 else 0) != 0;
requires {:sourceloc_num 1} (if $pass == 0 then 1 else 0) != 0;
{
  var v0:int;
  var v1:int;
  var v2:int;
  var v3:int;
  var v4:int;
  var v5:int;
  var v6:bool;
$0:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  v1 := BV32_ADD(BV32_MUL(group_id_y, group_size_y), local_id_y);
  assert {:sourceloc} {:sourceloc_num 3} true;
  v2 := $$pathDistanceBuffer[BV32_ADD(BV32_MUL(v1, $numNodes), v0)];
  assert {:sourceloc} {:sourceloc_num 4} true;
  v3 := $$pathDistanceBuffer[BV32_ADD(BV32_MUL(v1, $numNodes), $pass)];
  assert {:sourceloc} {:sourceloc_num 5} true;
  v4 := $$pathDistanceBuffer[BV32_ADD(BV32_MUL($pass, $numNodes), v0)];
  call   v5 := $__add_noovfl_unsigned_32(v3, v4);
  v6 := BV32_ULT(v5, v2);
  goto $truebb, $falsebb;
$1:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  assert {:sourceloc} {:sourceloc_num 7} true;
  $$pathDistanceBuffer[BV32_ADD(BV32_MUL(v1, $numNodes), v0)] := v5;
  assert {:sourceloc} {:sourceloc_num 8} true;
  $$pathBuffer[BV32_ADD(BV32_MUL(v1, $numNodes), v0)] := $pass;
  goto $2;
$2:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  return;
$truebb:
  assume {:partition} v6;
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  goto $1;
$falsebb:
  assume {:partition} !v6;
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  goto $2;
}
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 8 then 1 else 0) != 0;
axiom (if group_size_y == 8 then 1 else 0) != 0;
axiom (if num_groups_x == 8 then 1 else 0) != 0;
axiom (if num_groups_y == 8 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
