type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "numEigenIntervals"} {:global} $$numEigenIntervals : [int]int;
axiom {:array_info "$$numEigenIntervals"} {:global} {:elem_width 32} {:source_name "numEigenIntervals"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$numEigenIntervals : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$numEigenIntervals : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$numEigenIntervals : bool;

var {:source_name "eigenIntervals"} {:global} $$eigenIntervals : [int]int;
axiom {:array_info "$$eigenIntervals"} {:global} {:elem_width 32} {:source_name "eigenIntervals"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$eigenIntervals : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$eigenIntervals : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$eigenIntervals : bool;

var {:source_name "diagonal"} {:global} $$diagonal : [int]int;
axiom {:array_info "$$diagonal"} {:global} {:elem_width 32} {:source_name "diagonal"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$diagonal : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$diagonal : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$diagonal : bool;

var {:source_name "offDiagonal"} {:global} $$offDiagonal : [int]int;
axiom {:array_info "$$offDiagonal"} {:global} {:elem_width 32} {:source_name "offDiagonal"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$offDiagonal : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$offDiagonal : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$offDiagonal : bool;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function FDIV32(int, int) : int;
function FLT32(int, int) : bool;
function FMUL32(int, int) : int;
function FP32_TO_UI32(int) : int;
function FSUB32(int, int) : int;
function UI32_TO_FP32(int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SUB(x : int, y : int) : int {
  x - y
}
function {:inline true} BV32_ULT(x : int, y : int) : bool {
  x < y
}
procedure {:source_name "calNumEigenValueInterval"} {:kernel} $calNumEigenValueInterval($width:int)
{
  var $count.i.0:int;
  var $prev_diff.i.0:int;
  var $i.i.0:int;
  var $prev_diff.i2.0:int;
  var $count.i1.0:int;
  var $i.i3.0:int;
  var v5:int;
  var v0:int;
  var v1:int;
  var v2:int;
  var v3:int;
  var v4:int;
  var v6:bool;
  var v7:int;
  var v8:int;
  var v9:int;
  var v10:int;
  var v11:int;
  var v12:int;
  var v13:bool;
  var v14:int;
  var v15:int;
  var v16:int;
  var v17:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  v1 := BV32_MUL(2, v0);
  assert {:sourceloc} {:sourceloc_num 1} true;
  v2 := $$eigenIntervals[v1];
  assert {:sourceloc} {:sourceloc_num 2} true;
  v3 := $$eigenIntervals[BV32_ADD(v1, 1)];
  assert {:sourceloc} {:sourceloc_num 3} true;
  v4 := $$diagonal[0];
  v5 := FSUB32(v4, v2);
  $count.i.0, $prev_diff.i.0, $i.i.0 := (if FLT32(v5, 0) then 1 else 0), v5, 1;
  goto $1;
$1:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  v6 := BV32_ULT($i.i.0, $width);
  goto $truebb, $falsebb;
$2:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  assert {:sourceloc} {:sourceloc_num 6} true;
  v7 := $$diagonal[$i.i.0];
  assert {:sourceloc} {:sourceloc_num 7} true;
  v8 := $$offDiagonal[BV32_SUB($i.i.0, 1)];
  assert {:sourceloc} {:sourceloc_num 8} true;
  v9 := $$offDiagonal[BV32_SUB($i.i.0, 1)];
  v10 := FSUB32(FSUB32(v7, v2), FDIV32(FMUL32(v8, v9), $prev_diff.i.0));
  $count.i.0, $prev_diff.i.0, $i.i.0 := BV32_ADD($count.i.0, (if FLT32(v10, 0) then 1 else 0)), v10, BV32_ADD($i.i.0, 1);
  goto $1;
$calNumEigenValuesLessThan.exit:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  assert {:sourceloc} {:sourceloc_num 10} true;
  v11 := $$diagonal[0];
  v12 := FSUB32(v11, v3);
  $prev_diff.i2.0, $count.i1.0, $i.i3.0 := v12, (if FLT32(v12, 0) then 1 else 0), 1;
  goto $3;
$3:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  v13 := BV32_ULT($i.i3.0, $width);
  goto $truebb0, $falsebb0;
$4:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  assert {:sourceloc} {:sourceloc_num 13} true;
  v14 := $$diagonal[$i.i3.0];
  assert {:sourceloc} {:sourceloc_num 14} true;
  v15 := $$offDiagonal[BV32_SUB($i.i3.0, 1)];
  assert {:sourceloc} {:sourceloc_num 15} true;
  v16 := $$offDiagonal[BV32_SUB($i.i3.0, 1)];
  v17 := FSUB32(FSUB32(v14, v3), FDIV32(FMUL32(v15, v16), $prev_diff.i2.0));
  $prev_diff.i2.0, $count.i1.0, $i.i3.0 := v17, BV32_ADD($count.i1.0, (if FLT32(v17, 0) then 1 else 0)), BV32_ADD($i.i3.0, 1);
  goto $3;
$calNumEigenValuesLessThan.exit5:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  assert {:sourceloc} {:sourceloc_num 17} true;
  $$numEigenIntervals[v0] := BV32_SUB(FP32_TO_UI32(UI32_TO_FP32($count.i1.0)), FP32_TO_UI32(UI32_TO_FP32($count.i.0)));
  return;
$truebb:
  assume {:partition} v6;
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  goto $2;
$falsebb:
  assume {:partition} !v6;
  assert {:block_sourceloc} {:sourceloc_num 19} true;
  goto $calNumEigenValuesLessThan.exit;
$truebb0:
  assume {:partition} v13;
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  goto $4;
$falsebb0:
  assume {:partition} !v13;
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  goto $calNumEigenValuesLessThan.exit5;
}
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 256 then 1 else 0) != 0;
axiom (if num_groups_x == 4 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
