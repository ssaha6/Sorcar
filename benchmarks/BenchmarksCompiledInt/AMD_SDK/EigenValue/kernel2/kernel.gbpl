type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "newEigenIntervals"} {:global} $$newEigenIntervals : [int]int;
axiom {:array_info "$$newEigenIntervals"} {:global} {:elem_width 32} {:source_name "newEigenIntervals"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$newEigenIntervals : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$newEigenIntervals : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$newEigenIntervals : bool;

var {:source_name "eigenIntervals"} {:global} $$eigenIntervals : [int]int;
axiom {:array_info "$$eigenIntervals"} {:global} {:elem_width 32} {:source_name "eigenIntervals"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$eigenIntervals : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$eigenIntervals : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$eigenIntervals : bool;

var {:source_name "numEigenIntervals"} {:global} $$numEigenIntervals : [int]int;
axiom {:array_info "$$numEigenIntervals"} {:global} {:elem_width 32} {:source_name "numEigenIntervals"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$numEigenIntervals : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$numEigenIntervals : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$numEigenIntervals : bool;

var {:source_name "diagonal"} {:global} $$diagonal : [int]int;
axiom {:array_info "$$diagonal"} {:global} {:elem_width 32} {:source_name "diagonal"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$diagonal : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$diagonal : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$diagonal : bool;

var {:source_name "offDiagonal"} {:global} $$offDiagonal : [int]int;
axiom {:array_info "$$offDiagonal"} {:global} {:elem_width 32} {:source_name "offDiagonal"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$offDiagonal : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$offDiagonal : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$offDiagonal : bool;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function FADD32(int, int) : int;
function FDIV32(int, int) : int;
function FEQ32(int, int) : bool;
function FLT32(int, int) : bool;
function FMUL32(int, int) : int;
function FSUB32(int, int) : int;
function UI32_TO_FP32(int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SUB(x : int, y : int) : int {
  x - y
}
function {:inline true} BV32_UGE(x : int, y : int) : bool {
  x >= y
}
function {:inline true} BV32_ULT(x : int, y : int) : bool {
  x < y
}
procedure {:source_name "recalculateEigenIntervals"} {:kernel} $recalculateEigenIntervals($width:int, $tolerance:int)
{
  var $currentIndex.0:int;
  var $index.0:int;
  var $count.i.0:int;
  var $prev_diff.i.0:int;
  var $i.i.0:int;
  var $i.i3.0:int;
  var $prev_diff.i2.0:int;
  var $count.i1.0:int;
  var v0:int;
  var v1:int;
  var v2:int;
  var v3:int;
  var v4:bool;
  var v5:int;
  var v6:int;
  var v7:int;
  var v9:bool;
  var v8:int;
  var v10:int;
  var v11:int;
  var v12:int;
  var v13:int;
  var v14:int;
  var v15:bool;
  var v16:int;
  var v17:int;
  var v18:int;
  var v19:int;
  var v22:int;
  var v20:int;
  var v21:int;
  var v23:bool;
  var v24:int;
  var v25:int;
  var v26:int;
  var v27:int;
  var v28:int;
  var v29:int;
  var v30:bool;
  var v31:int;
  var v32:int;
  var v33:bool;
  var v34:int;
  var v35:int;
  var v36:int;
  var v37:int;
  var v38:int;
  var v39:int;
  var v40:int;
  var v41:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  v1 := BV32_MUL(2, v0);
  v2 := BV32_ADD(v1, 1);
  $currentIndex.0, $index.0 := v0, 0;
  goto $1;
$1:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  assert {:sourceloc} {:sourceloc_num 2} true;
  v3 := $$numEigenIntervals[$index.0];
  v4 := BV32_UGE($currentIndex.0, v3);
  goto $truebb, $falsebb;
$2:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  assert {:sourceloc} {:sourceloc_num 4} true;
  v5 := $$numEigenIntervals[$index.0];
  $currentIndex.0, $index.0 := BV32_SUB($currentIndex.0, v5), BV32_ADD($index.0, 1);
  goto $1;
$3:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  v6 := BV32_MUL(2, $index.0);
  v7 := BV32_ADD(v6, 1);
  assert {:sourceloc} {:sourceloc_num 6} true;
  v8 := $$numEigenIntervals[$index.0];
  v9 := v8 == 1;
  goto $truebb0, $falsebb0;
$4:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  assert {:sourceloc} {:sourceloc_num 8} true;
  v10 := $$eigenIntervals[v7];
  assert {:sourceloc} {:sourceloc_num 9} true;
  v11 := $$eigenIntervals[v6];
  v12 := FDIV32(FADD32(v10, v11), 1073741824);
  assert {:sourceloc} {:sourceloc_num 10} true;
  v13 := $$diagonal[0];
  v14 := FSUB32(v13, v12);
  $count.i.0, $prev_diff.i.0, $i.i.0 := (if FLT32(v14, 0) then 1 else 0), v14, 1;
  goto $5;
$5:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  v15 := BV32_ULT($i.i.0, $width);
  goto $truebb1, $falsebb1;
$6:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  assert {:sourceloc} {:sourceloc_num 13} true;
  v16 := $$diagonal[$i.i.0];
  assert {:sourceloc} {:sourceloc_num 14} true;
  v17 := $$offDiagonal[BV32_SUB($i.i.0, 1)];
  assert {:sourceloc} {:sourceloc_num 15} true;
  v18 := $$offDiagonal[BV32_SUB($i.i.0, 1)];
  v19 := FSUB32(FSUB32(v16, v12), FDIV32(FMUL32(v17, v18), $prev_diff.i.0));
  $count.i.0, $prev_diff.i.0, $i.i.0 := BV32_ADD($count.i.0, (if FLT32(v19, 0) then 1 else 0)), v19, BV32_ADD($i.i.0, 1);
  goto $5;
$calNumEigenValuesLessThan.exit:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  assert {:sourceloc} {:sourceloc_num 17} true;
  v20 := $$eigenIntervals[v6];
  assert {:sourceloc} {:sourceloc_num 18} true;
  v21 := $$diagonal[0];
  v22 := FSUB32(v21, v20);
  $i.i3.0, $prev_diff.i2.0, $count.i1.0 := 1, v22, (if FLT32(v22, 0) then 1 else 0);
  goto $7;
$7:
  assert {:block_sourceloc} {:sourceloc_num 19} true;
  v23 := BV32_ULT($i.i3.0, $width);
  goto $truebb2, $falsebb2;
$8:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  assert {:sourceloc} {:sourceloc_num 21} true;
  v24 := $$diagonal[$i.i3.0];
  assert {:sourceloc} {:sourceloc_num 22} true;
  v25 := $$offDiagonal[BV32_SUB($i.i3.0, 1)];
  assert {:sourceloc} {:sourceloc_num 23} true;
  v26 := $$offDiagonal[BV32_SUB($i.i3.0, 1)];
  v27 := FSUB32(FSUB32(v24, v20), FDIV32(FMUL32(v25, v26), $prev_diff.i2.0));
  $i.i3.0, $prev_diff.i2.0, $count.i1.0 := BV32_ADD($i.i3.0, 1), v27, BV32_ADD($count.i1.0, (if FLT32(v27, 0) then 1 else 0));
  goto $7;
$calNumEigenValuesLessThan.exit5:
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  assert {:sourceloc} {:sourceloc_num 25} true;
  v28 := $$eigenIntervals[v7];
  assert {:sourceloc} {:sourceloc_num 26} true;
  v29 := $$eigenIntervals[v6];
  v30 := FLT32(FSUB32(v28, v29), $tolerance);
  goto $truebb3, $falsebb3;
$9:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  assert {:sourceloc} {:sourceloc_num 28} true;
  v31 := $$eigenIntervals[v6];
  assert {:sourceloc} {:sourceloc_num 29} true;
  $$newEigenIntervals[v1] := v31;
  assert {:sourceloc} {:sourceloc_num 30} true;
  v32 := $$eigenIntervals[v7];
  assert {:sourceloc} {:sourceloc_num 31} true;
  $$newEigenIntervals[v2] := v32;
  goto $14;
$10:
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  v33 := FEQ32(FSUB32(UI32_TO_FP32($count.i.0), UI32_TO_FP32($count.i1.0)), 0);
  goto $truebb4, $falsebb4;
$11:
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  assert {:sourceloc} {:sourceloc_num 34} true;
  $$newEigenIntervals[v1] := v12;
  assert {:sourceloc} {:sourceloc_num 35} true;
  v34 := $$eigenIntervals[v7];
  assert {:sourceloc} {:sourceloc_num 36} true;
  $$newEigenIntervals[v2] := v34;
  goto $13;
$12:
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  assert {:sourceloc} {:sourceloc_num 38} true;
  v35 := $$eigenIntervals[v6];
  assert {:sourceloc} {:sourceloc_num 39} true;
  $$newEigenIntervals[v1] := v35;
  assert {:sourceloc} {:sourceloc_num 40} true;
  $$newEigenIntervals[v2] := v12;
  goto $13;
$13:
  assert {:block_sourceloc} true;
  goto $14;
$14:
  assert {:block_sourceloc} {:sourceloc_num 41} true;
  goto $16;
$15:
  assert {:block_sourceloc} {:sourceloc_num 42} true;
  assert {:sourceloc} {:sourceloc_num 43} true;
  v36 := $$eigenIntervals[v7];
  assert {:sourceloc} {:sourceloc_num 44} true;
  v37 := $$eigenIntervals[v6];
  assert {:sourceloc} {:sourceloc_num 45} true;
  v38 := $$numEigenIntervals[$index.0];
  v39 := FDIV32(FSUB32(v36, v37), UI32_TO_FP32(v38));
  assert {:sourceloc} {:sourceloc_num 46} true;
  v40 := $$eigenIntervals[v6];
  assert {:sourceloc} {:sourceloc_num 47} true;
  $$newEigenIntervals[v1] := FADD32(FMUL32(v39, UI32_TO_FP32($currentIndex.0)), v40);
  assert {:sourceloc} {:sourceloc_num 48} true;
  v41 := $$newEigenIntervals[v1];
  assert {:sourceloc} {:sourceloc_num 49} true;
  $$newEigenIntervals[v2] := FADD32(v41, v39);
  goto $16;
$16:
  assert {:block_sourceloc} {:sourceloc_num 50} true;
  return;
$truebb:
  assume {:partition} v4;
  assert {:block_sourceloc} {:sourceloc_num 51} true;
  goto $2;
$falsebb:
  assume {:partition} !v4;
  assert {:block_sourceloc} {:sourceloc_num 52} true;
  goto $3;
$truebb0:
  assume {:partition} v9;
  assert {:block_sourceloc} {:sourceloc_num 53} true;
  goto $4;
$falsebb0:
  assume {:partition} !v9;
  assert {:block_sourceloc} {:sourceloc_num 54} true;
  goto $15;
$truebb1:
  assume {:partition} v15;
  assert {:block_sourceloc} {:sourceloc_num 55} true;
  goto $6;
$falsebb1:
  assume {:partition} !v15;
  assert {:block_sourceloc} {:sourceloc_num 56} true;
  goto $calNumEigenValuesLessThan.exit;
$truebb2:
  assume {:partition} v23;
  assert {:block_sourceloc} {:sourceloc_num 57} true;
  goto $8;
$falsebb2:
  assume {:partition} !v23;
  assert {:block_sourceloc} {:sourceloc_num 58} true;
  goto $calNumEigenValuesLessThan.exit5;
$truebb3:
  assume {:partition} v30;
  assert {:block_sourceloc} {:sourceloc_num 59} true;
  goto $9;
$falsebb3:
  assume {:partition} !v30;
  assert {:block_sourceloc} {:sourceloc_num 60} true;
  goto $10;
$truebb4:
  assume {:partition} v33;
  assert {:block_sourceloc} {:sourceloc_num 61} true;
  goto $11;
$falsebb4:
  assume {:partition} !v33;
  assert {:block_sourceloc} {:sourceloc_num 62} true;
  goto $12;
}
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 256 then 1 else 0) != 0;
axiom (if num_groups_x == 4 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
