type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP8(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "inputImage"} {:global} $$inputImage : [int]int;
axiom {:array_info "$$inputImage"} {:global} {:elem_width 8} {:source_name "inputImage"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$inputImage : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$inputImage : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$inputImage : bool;

var {:source_name "outputImage"} {:global} $$outputImage : [int]int;
axiom {:array_info "$$outputImage"} {:global} {:elem_width 8} {:source_name "outputImage"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$outputImage : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$outputImage : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$outputImage : bool;

var {:source_name "lds"} {:group_shared} $$lds : [int]int;
axiom {:array_info "$$lds"} {:group_shared} {:elem_width 8} {:source_name "lds"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:group_shared} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$lds : bool;
var {:race_checking} {:group_shared} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$lds : bool;
var {:race_checking} {:group_shared} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$lds : bool;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_id_y} group_id_y : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:local_id_y} local_id_y : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function BV_CONCAT(int, int) : int;
function BV_EXTRACT(int, int, int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_SGE(x : int, y : int) : bool {
  x >= y
}
function {:inline true} BV32_SLE(x : int, y : int) : bool {
  x <= y
}
function {:inline true} BV32_SLT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV32_SUB(x : int, y : int) : int {
  x - y
}
function {:inline true} BV8_ZEXT32(x : int) : int {
  x
}
procedure {:source_name "box_filter_horizontal_local"} {:kernel} $box_filter_horizontal_local($filterWidth:int)
requires {:sourceloc_num 0} (if $filterWidth == 1024 then 1 else 0) != 0;
{
  var $sum.0:int;
  var $X.0:int;
  var v0:int;
  var v1:int;
  var v2:int;
  var v3:int;
  var v4:int;
  var v5:bool;
  var v6:int;
  var v7:int;
  var v8:int;
  var v9:int;
  var v10:int;
  var v11:int;
  var v12:int;
  var v13:int;
  var v14:int;
  var v15:int;
  var v16:int;
  var v17:int;
  var v18:bool;
  var v19:bool;
  var v20:bool;
  var v21:int;
  var v22:int;
  var v23:int;
  var v24:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  v1 := BV32_MUL(group_size_x, num_groups_x);
  v2 := BV32_SDIV(BV32_SUB($filterWidth, 1), 2);
  v3 := local_id_x;
  v4 := BV32_ADD(BV32_MUL(group_size_x, group_id_x), BV32_MUL(BV32_MUL(v1, group_id_y), group_size_y));
  v5 := BV32_SLT(v3, v2);
  goto $truebb, $falsebb;
$1:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  assert {:sourceloc} {:sourceloc_num 3} true;
  v6 := $$inputImage[BV32_MUL(BV32_ADD(BV32_SUB(v4, v2), v3), 4)];
  assert {:sourceloc} {:sourceloc_num 4} true;
  v7 := $$inputImage[BV32_ADD(BV32_MUL(BV32_ADD(BV32_SUB(v4, v2), v3), 4), 1)];
  assert {:sourceloc} {:sourceloc_num 5} true;
  v8 := $$inputImage[BV32_ADD(BV32_MUL(BV32_ADD(BV32_SUB(v4, v2), v3), 4), 2)];
  assert {:sourceloc} {:sourceloc_num 6} true;
  v9 := $$inputImage[BV32_ADD(BV32_MUL(BV32_ADD(BV32_SUB(v4, v2), v3), 4), 3)];
  assert {:sourceloc} {:sourceloc_num 7} true;
  $$lds[BV32_MUL(v3, 4)] := v6;
  assert {:sourceloc} {:sourceloc_num 8} true;
  $$lds[BV32_ADD(BV32_MUL(v3, 4), 1)] := v7;
  assert {:sourceloc} {:sourceloc_num 9} true;
  $$lds[BV32_ADD(BV32_MUL(v3, 4), 2)] := v8;
  assert {:sourceloc} {:sourceloc_num 10} true;
  $$lds[BV32_ADD(BV32_MUL(v3, 4), 3)] := v9;
  assert {:sourceloc} {:sourceloc_num 11} true;
  v10 := $$inputImage[BV32_MUL(BV32_ADD(BV32_ADD(v4, v3), 256), 4)];
  assert {:sourceloc} {:sourceloc_num 12} true;
  v11 := $$inputImage[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(v4, v3), 256), 4), 1)];
  assert {:sourceloc} {:sourceloc_num 13} true;
  v12 := $$inputImage[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(v4, v3), 256), 4), 2)];
  assert {:sourceloc} {:sourceloc_num 14} true;
  v13 := $$inputImage[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(v4, v3), 256), 4), 3)];
  assert {:sourceloc} {:sourceloc_num 15} true;
  $$lds[BV32_MUL(BV32_ADD(BV32_ADD(256, v2), v3), 4)] := v10;
  assert {:sourceloc} {:sourceloc_num 16} true;
  $$lds[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(256, v2), v3), 4), 1)] := v11;
  assert {:sourceloc} {:sourceloc_num 17} true;
  $$lds[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(256, v2), v3), 4), 2)] := v12;
  assert {:sourceloc} {:sourceloc_num 18} true;
  $$lds[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(256, v2), v3), 4), 3)] := v13;
  goto $2;
$2:
  assert {:block_sourceloc} {:sourceloc_num 19} true;
  assert {:sourceloc} {:sourceloc_num 20} true;
  v14 := $$inputImage[BV32_MUL(BV32_ADD(v4, v3), 4)];
  assert {:sourceloc} {:sourceloc_num 21} true;
  v15 := $$inputImage[BV32_ADD(BV32_MUL(BV32_ADD(v4, v3), 4), 1)];
  assert {:sourceloc} {:sourceloc_num 22} true;
  v16 := $$inputImage[BV32_ADD(BV32_MUL(BV32_ADD(v4, v3), 4), 2)];
  assert {:sourceloc} {:sourceloc_num 23} true;
  v17 := $$inputImage[BV32_ADD(BV32_MUL(BV32_ADD(v4, v3), 4), 3)];
  assert {:sourceloc} {:sourceloc_num 24} true;
  $$lds[BV32_MUL(BV32_ADD(v3, v2), 4)] := v14;
  assert {:sourceloc} {:sourceloc_num 25} true;
  $$lds[BV32_ADD(BV32_MUL(BV32_ADD(v3, v2), 4), 1)] := v15;
  assert {:sourceloc} {:sourceloc_num 26} true;
  $$lds[BV32_ADD(BV32_MUL(BV32_ADD(v3, v2), 4), 2)] := v16;
  assert {:sourceloc} {:sourceloc_num 27} true;
  $$lds[BV32_ADD(BV32_MUL(BV32_ADD(v3, v2), 4), 3)] := v17;
  call {:sourceloc_num 28} $bugle_barrier(-1, 0);
  v18 := BV32_SLT(v0, v2);
  goto $truebb0, $falsebb0;
$3:
  assert {:block_sourceloc} {:sourceloc_num 29} true;
  v19 := BV32_SGE(v0, BV32_SUB(v1, v2));
  goto $truebb1, $falsebb1;
$4:
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  goto $10;
$5:
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  $sum.0, $X.0 := 0, BV32_SUB(0, v2);
  goto $6;
$6:
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  v20 := BV32_SLE($X.0, v2);
  goto $truebb2, $falsebb2;
$7:
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  assert {:sourceloc} {:sourceloc_num 34} true;
  v21 := $$lds[BV32_MUL(BV32_ADD(BV32_ADD(v3, $X.0), v2), 4)];
  assert {:sourceloc} {:sourceloc_num 35} true;
  v22 := $$lds[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(v3, $X.0), v2), 4), 1)];
  assert {:sourceloc} {:sourceloc_num 36} true;
  v23 := $$lds[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(v3, $X.0), v2), 4), 2)];
  assert {:sourceloc} {:sourceloc_num 37} true;
  v24 := $$lds[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(v3, $X.0), v2), 4), 3)];
  goto $8;
$8:
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  $sum.0, $X.0 := BV_CONCAT(BV_CONCAT(BV_CONCAT(BV32_ADD(BV_EXTRACT($sum.0, 128, 96), BV8_ZEXT32(v24)), BV32_ADD(BV_EXTRACT($sum.0, 96, 64), BV8_ZEXT32(v23))), BV32_ADD(BV_EXTRACT($sum.0, 64, 32), BV8_ZEXT32(v22))), BV32_ADD(BV_EXTRACT($sum.0, 32, 0), BV8_ZEXT32(v21))), BV32_ADD($X.0, 1);
  goto $6;
$9:
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  assert {:sourceloc} {:sourceloc_num 40} true;
  $$outputImage[BV32_MUL(BV32_ADD(v0, BV32_MUL(BV32_ADD(BV32_MUL(group_id_y, group_size_y), local_id_y), v1)), 4)] := BV_EXTRACT(BV32_SDIV(BV_EXTRACT($sum.0, 32, 0), $filterWidth), 8, 0);
  assert {:sourceloc} {:sourceloc_num 41} true;
  $$outputImage[BV32_ADD(BV32_MUL(BV32_ADD(v0, BV32_MUL(BV32_ADD(BV32_MUL(group_id_y, group_size_y), local_id_y), v1)), 4), 1)] := BV_EXTRACT(BV32_SDIV(BV_EXTRACT($sum.0, 64, 32), $filterWidth), 8, 0);
  assert {:sourceloc} {:sourceloc_num 42} true;
  $$outputImage[BV32_ADD(BV32_MUL(BV32_ADD(v0, BV32_MUL(BV32_ADD(BV32_MUL(group_id_y, group_size_y), local_id_y), v1)), 4), 2)] := BV_EXTRACT(BV32_SDIV(BV_EXTRACT($sum.0, 96, 64), $filterWidth), 8, 0);
  assert {:sourceloc} {:sourceloc_num 43} true;
  $$outputImage[BV32_ADD(BV32_MUL(BV32_ADD(v0, BV32_MUL(BV32_ADD(BV32_MUL(group_id_y, group_size_y), local_id_y), v1)), 4), 3)] := BV_EXTRACT(BV32_SDIV(BV_EXTRACT($sum.0, 128, 96), $filterWidth), 8, 0);
  goto $10;
$10:
  assert {:block_sourceloc} {:sourceloc_num 44} true;
  return;
$truebb:
  assume {:partition} v5;
  assert {:block_sourceloc} {:sourceloc_num 45} true;
  goto $1;
$falsebb:
  assume {:partition} !v5;
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  goto $2;
$truebb0:
  assume {:partition} v18;
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  goto $4;
$falsebb0:
  assume {:partition} !v18;
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  goto $3;
$truebb1:
  assume {:partition} v19;
  assert {:block_sourceloc} {:sourceloc_num 49} true;
  goto $4;
$falsebb1:
  assume {:partition} !v19;
  assert {:block_sourceloc} {:sourceloc_num 50} true;
  goto $5;
$truebb2:
  assume {:partition} v20;
  assert {:block_sourceloc} {:sourceloc_num 51} true;
  goto $7;
$falsebb2:
  assume {:partition} !v20;
  assert {:block_sourceloc} {:sourceloc_num 52} true;
  goto $9;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:int, $1:int);
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 256 then 1 else 0) != 0;
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if num_groups_x == 4 then 1 else 0) != 0;
axiom (if num_groups_y == 1024 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
