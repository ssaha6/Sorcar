type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
procedure _ATOMIC_OP8(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "inputImage"} {:global} $$inputImage : [int]int;
axiom {:array_info "$$inputImage"} {:global} {:elem_width 32} {:source_name "inputImage"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$inputImage : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$inputImage : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$inputImage : bool;

var {:source_name "outputImage"} {:global} $$outputImage : [int]int;
axiom {:array_info "$$outputImage"} {:global} {:elem_width 8} {:source_name "outputImage"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$outputImage : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$outputImage : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$outputImage : bool;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_id_y} group_id_y : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:local_id_y} local_id_y : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function BV_CONCAT(int, int) : int;
function BV_EXTRACT(int, int, int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_SGE(x : int, y : int) : bool {
  x >= y
}
function {:inline true} BV32_SGT(x : int, y : int) : bool {
  x > y
}
function {:inline true} BV32_SLT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV32_SUB(x : int, y : int) : int {
  x - y
}
function {:inline true} BV32_UDIV(x : int, y : int) : int {
  x div y
}
procedure {:source_name "box_filter"} {:kernel} $box_filter($N:int)
{
  var $sumA.0:int;
  var $sumB.0:int;
  var $sumD.0:int;
  var v0:int;
  var v14:int;
  var v1:int;
  var v2:int;
  var v3:int;
  var v4:bool;
  var v5:bool;
  var v6:bool;
  var v7:bool;
  var v8:int;
  var v9:int;
  var v15:bool;
  var v10:int;
  var v11:int;
  var v12:int;
  var v13:int;
  var v16:bool;
  var v17:int;
  var v18:int;
  var v19:int;
  var v20:int;
  var v21:bool;
  var v22:bool;
  var v23:int;
  var v24:int;
  var v25:int;
  var v26:int;
  var v27:bool;
  var v28:bool;
  var v29:int;
  var v30:int;
  var v31:int;
  var v32:int;
  var v33:int;
  var v34:int;
  var v35:int;
  var v36:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  v1 := BV32_ADD(BV32_MUL(group_id_y, group_size_y), local_id_y);
  v2 := BV32_MUL(group_size_x, num_groups_x);
  v3 := BV32_UDIV(BV32_SUB($N, 1), 2);
  v4 := BV32_SLT(v0, v3);
  goto $truebb, $falsebb;
$1:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  v5 := BV32_SLT(v1, v3);
  goto $truebb0, $falsebb0;
$2:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v6 := BV32_SGT(v0, BV32_SUB(BV32_SUB(v2, v3), 1));
  goto $truebb1, $falsebb1;
$3:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  v7 := BV32_SGT(v1, BV32_SUB(BV32_SUB(BV32_MUL(group_size_y, num_groups_y), v3), 1));
  goto $truebb2, $falsebb2;
$4:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  assert {:sourceloc} {:sourceloc_num 5} true;
  $$outputImage[BV32_MUL(BV32_ADD(v0, BV32_MUL(v1, v2)), 4)] := 0;
  assert {:sourceloc} {:sourceloc_num 6} true;
  $$outputImage[BV32_ADD(BV32_MUL(BV32_ADD(v0, BV32_MUL(v1, v2)), 4), 1)] := 0;
  assert {:sourceloc} {:sourceloc_num 7} true;
  $$outputImage[BV32_ADD(BV32_MUL(BV32_ADD(v0, BV32_MUL(v1, v2)), 4), 2)] := 0;
  assert {:sourceloc} {:sourceloc_num 8} true;
  $$outputImage[BV32_ADD(BV32_MUL(BV32_ADD(v0, BV32_MUL(v1, v2)), 4), 3)] := 0;
  goto $15;
$5:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  v8 := BV32_MUL($N, $N);
  v9 := BV32_ADD(v0, v3);
  v10 := BV32_ADD(v1, v3);
  v11 := BV32_SUB(BV32_SUB(v0, v3), 1);
  v12 := BV32_SUB(BV32_SUB(v1, v3), 1);
  v13 := BV32_SUB(BV32_SUB(v1, v3), 1);
  v14 := BV32_SUB(BV32_SUB(v0, v3), 1);
  v15 := BV32_SGE(v11, 0);
  goto $truebb3, $falsebb3;
$6:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  v16 := BV32_SGE(v12, 0);
  goto $truebb4, $falsebb4;
$7:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  assert {:sourceloc} {:sourceloc_num 12} true;
  v17 := $$inputImage[BV32_MUL(BV32_ADD(v11, BV32_MUL(v12, v2)), 4)];
  assert {:sourceloc} {:sourceloc_num 13} true;
  v18 := $$inputImage[BV32_ADD(BV32_MUL(BV32_ADD(v11, BV32_MUL(v12, v2)), 4), 1)];
  assert {:sourceloc} {:sourceloc_num 14} true;
  v19 := $$inputImage[BV32_ADD(BV32_MUL(BV32_ADD(v11, BV32_MUL(v12, v2)), 4), 2)];
  assert {:sourceloc} {:sourceloc_num 15} true;
  v20 := $$inputImage[BV32_ADD(BV32_MUL(BV32_ADD(v11, BV32_MUL(v12, v2)), 4), 3)];
  $sumA.0 := BV_CONCAT(BV_CONCAT(BV_CONCAT(v20, v19), v18), v17);
  goto $8;
$8:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  v21 := BV32_SGE(v9, 0);
  goto $truebb5, $falsebb5;
$9:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  v22 := BV32_SGE(v13, 0);
  goto $truebb6, $falsebb6;
$10:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  assert {:sourceloc} {:sourceloc_num 19} true;
  v23 := $$inputImage[BV32_MUL(BV32_ADD(v9, BV32_MUL(v13, v2)), 4)];
  assert {:sourceloc} {:sourceloc_num 20} true;
  v24 := $$inputImage[BV32_ADD(BV32_MUL(BV32_ADD(v9, BV32_MUL(v13, v2)), 4), 1)];
  assert {:sourceloc} {:sourceloc_num 21} true;
  v25 := $$inputImage[BV32_ADD(BV32_MUL(BV32_ADD(v9, BV32_MUL(v13, v2)), 4), 2)];
  assert {:sourceloc} {:sourceloc_num 22} true;
  v26 := $$inputImage[BV32_ADD(BV32_MUL(BV32_ADD(v9, BV32_MUL(v13, v2)), 4), 3)];
  $sumB.0 := BV_CONCAT(BV_CONCAT(BV_CONCAT(v26, v25), v24), v23);
  goto $11;
$11:
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  v27 := BV32_SGE(v14, 0);
  goto $truebb7, $falsebb7;
$12:
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  v28 := BV32_SGE(v10, 0);
  goto $truebb8, $falsebb8;
$13:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  assert {:sourceloc} {:sourceloc_num 26} true;
  v29 := $$inputImage[BV32_MUL(BV32_ADD(v14, BV32_MUL(v10, v2)), 4)];
  assert {:sourceloc} {:sourceloc_num 27} true;
  v30 := $$inputImage[BV32_ADD(BV32_MUL(BV32_ADD(v14, BV32_MUL(v10, v2)), 4), 1)];
  assert {:sourceloc} {:sourceloc_num 28} true;
  v31 := $$inputImage[BV32_ADD(BV32_MUL(BV32_ADD(v14, BV32_MUL(v10, v2)), 4), 2)];
  assert {:sourceloc} {:sourceloc_num 29} true;
  v32 := $$inputImage[BV32_ADD(BV32_MUL(BV32_ADD(v14, BV32_MUL(v10, v2)), 4), 3)];
  $sumD.0 := BV_CONCAT(BV_CONCAT(BV_CONCAT(v32, v31), v30), v29);
  goto $14;
$14:
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  assert {:sourceloc} {:sourceloc_num 31} true;
  v33 := $$inputImage[BV32_MUL(BV32_ADD(BV32_ADD(v0, v3), BV32_MUL(BV32_ADD(v1, v3), v2)), 4)];
  assert {:sourceloc} {:sourceloc_num 32} true;
  v34 := $$inputImage[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(v0, v3), BV32_MUL(BV32_ADD(v1, v3), v2)), 4), 1)];
  assert {:sourceloc} {:sourceloc_num 33} true;
  v35 := $$inputImage[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(v0, v3), BV32_MUL(BV32_ADD(v1, v3), v2)), 4), 2)];
  assert {:sourceloc} {:sourceloc_num 34} true;
  v36 := $$inputImage[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(v0, v3), BV32_MUL(BV32_ADD(v1, v3), v2)), 4), 3)];
  assert {:sourceloc} {:sourceloc_num 35} true;
  $$outputImage[BV32_MUL(BV32_ADD(v0, BV32_MUL(v1, v2)), 4)] := BV_EXTRACT(BV32_SDIV(BV32_SUB(BV32_SUB(BV32_ADD(BV_EXTRACT($sumA.0, 32, 0), v33), BV_EXTRACT($sumB.0, 32, 0)), BV_EXTRACT($sumD.0, 32, 0)), v8), 8, 0);
  assert {:sourceloc} {:sourceloc_num 36} true;
  $$outputImage[BV32_ADD(BV32_MUL(BV32_ADD(v0, BV32_MUL(v1, v2)), 4), 1)] := BV_EXTRACT(BV32_SDIV(BV32_SUB(BV32_SUB(BV32_ADD(BV_EXTRACT($sumA.0, 64, 32), v34), BV_EXTRACT($sumB.0, 64, 32)), BV_EXTRACT($sumD.0, 64, 32)), v8), 8, 0);
  assert {:sourceloc} {:sourceloc_num 37} true;
  $$outputImage[BV32_ADD(BV32_MUL(BV32_ADD(v0, BV32_MUL(v1, v2)), 4), 2)] := BV_EXTRACT(BV32_SDIV(BV32_SUB(BV32_SUB(BV32_ADD(BV_EXTRACT($sumA.0, 96, 64), v35), BV_EXTRACT($sumB.0, 96, 64)), BV_EXTRACT($sumD.0, 96, 64)), v8), 8, 0);
  assert {:sourceloc} {:sourceloc_num 38} true;
  $$outputImage[BV32_ADD(BV32_MUL(BV32_ADD(v0, BV32_MUL(v1, v2)), 4), 3)] := BV_EXTRACT(BV32_SDIV(BV32_SUB(BV32_SUB(BV32_ADD(BV_EXTRACT($sumA.0, 128, 96), v36), BV_EXTRACT($sumB.0, 128, 96)), BV_EXTRACT($sumD.0, 128, 96)), v8), 8, 0);
  goto $15;
$15:
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  return;
$truebb:
  assume {:partition} v4;
  assert {:block_sourceloc} {:sourceloc_num 40} true;
  goto $4;
$falsebb:
  assume {:partition} !v4;
  assert {:block_sourceloc} {:sourceloc_num 41} true;
  goto $1;
$truebb0:
  assume {:partition} v5;
  assert {:block_sourceloc} {:sourceloc_num 42} true;
  goto $4;
$falsebb0:
  assume {:partition} !v5;
  assert {:block_sourceloc} {:sourceloc_num 43} true;
  goto $2;
$truebb1:
  assume {:partition} v6;
  assert {:block_sourceloc} {:sourceloc_num 44} true;
  goto $4;
$falsebb1:
  assume {:partition} !v6;
  assert {:block_sourceloc} {:sourceloc_num 45} true;
  goto $3;
$truebb2:
  assume {:partition} v7;
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  goto $4;
$falsebb2:
  assume {:partition} !v7;
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  goto $5;
$truebb3:
  assume {:partition} v15;
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  goto $6;
$falsebb3:
  assume {:partition} !v15;
  assert {:block_sourceloc} {:sourceloc_num 49} true;
  $sumA.0 := 0;
  goto $8;
$truebb4:
  assume {:partition} v16;
  assert {:block_sourceloc} {:sourceloc_num 50} true;
  goto $7;
$falsebb4:
  assume {:partition} !v16;
  assert {:block_sourceloc} {:sourceloc_num 51} true;
  $sumA.0 := 0;
  goto $8;
$truebb5:
  assume {:partition} v21;
  assert {:block_sourceloc} {:sourceloc_num 52} true;
  goto $9;
$falsebb5:
  assume {:partition} !v21;
  assert {:block_sourceloc} {:sourceloc_num 53} true;
  $sumB.0 := 0;
  goto $11;
$truebb6:
  assume {:partition} v22;
  assert {:block_sourceloc} {:sourceloc_num 54} true;
  goto $10;
$falsebb6:
  assume {:partition} !v22;
  assert {:block_sourceloc} {:sourceloc_num 55} true;
  $sumB.0 := 0;
  goto $11;
$truebb7:
  assume {:partition} v27;
  assert {:block_sourceloc} {:sourceloc_num 56} true;
  goto $12;
$falsebb7:
  assume {:partition} !v27;
  assert {:block_sourceloc} {:sourceloc_num 57} true;
  $sumD.0 := 0;
  goto $14;
$truebb8:
  assume {:partition} v28;
  assert {:block_sourceloc} {:sourceloc_num 58} true;
  goto $13;
$falsebb8:
  assume {:partition} !v28;
  assert {:block_sourceloc} {:sourceloc_num 59} true;
  $sumD.0 := 0;
  goto $14;
}
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 256 then 1 else 0) != 0;
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if num_groups_x == 4 then 1 else 0) != 0;
axiom (if num_groups_y == 1024 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
