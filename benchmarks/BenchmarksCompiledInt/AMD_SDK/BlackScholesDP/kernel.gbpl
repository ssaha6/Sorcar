type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP64(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "randArray"} {:global} $$randArray : [int]int;
axiom {:array_info "$$randArray"} {:global} {:elem_width 64} {:source_name "randArray"} {:source_elem_width 256} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 256} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$randArray : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 256} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$randArray : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 256} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$randArray : bool;

var {:source_name "call"} {:global} $$call : [int]int;
axiom {:array_info "$$call"} {:global} {:elem_width 64} {:source_name "call"} {:source_elem_width 256} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 256} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$call : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 256} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$call : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 256} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$call : bool;

var {:source_name "put"} {:global} $$put : [int]int;
axiom {:array_info "$$put"} {:global} {:elem_width 64} {:source_name "put"} {:source_elem_width 256} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 256} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$put : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 256} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$put : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 256} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$put : bool;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_id_y} group_id_y : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:local_id_y} local_id_y : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function BV1_SEXT64(int) : int;
function FABS64(int) : int;
function FADD64(int, int) : int;
function FDIV64(int, int) : int;
function FEXP64(int) : int;
function FLOG64(int) : int;
function FLT64(int, int) : bool;
function FMUL64(int, int) : int;
function FSQRT64(int) : int;
function FSUB64(int, int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV64_AND(x : int, y : int) : int {
  if x == y then x else (if x == 0 || y == 0 then 0 else BV64_AND_UF(x, y))
}
function BV64_AND_UF(int, int) : int;
function {:inline true} BV64_OR(x : int, y : int) : int {
  if x == y then x else (if x == 0 then y else (if y == 0 then x else BV64_OR_UF(x, y)))
}
function BV64_OR_UF(int, int) : int;
function {:inline true} BV64_SLT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV64_XOR(x : int, y : int) : int {
  if x == y then 0 else (if x == 0 then y else (if y == 0 then x else BV64_XOR_UF(x, y)))
}
function BV64_XOR_UF(int, int) : int;
procedure {:source_name "blackScholes"} {:kernel} $blackScholes($width:int)
requires {:sourceloc_num 0} (if $width == 64 then 1 else 0) != 0;
{
  var v0:int;
  var v1:int;
  var v2:int;
  var v3:int;
  var v6:int;
  var v4:int;
  var v5:int;
  var v7:int;
  var v8:int;
  var v9:int;
  var v10:int;
  var v11:int;
  var v12:int;
  var v13:int;
  var v14:int;
  var v15:int;
  var v16:int;
  var v17:int;
  var v18:int;
  var v19:int;
  var v20:int;
  var v21:int;
  var v22:int;
  var v23:int;
  var v24:int;
  var v25:int;
  var v26:int;
  var v27:int;
  var v28:int;
  var v29:int;
  var v31:int;
  var v30:int;
  var v32:int;
  var v33:int;
  var v34:int;
  var v35:int;
  var v36:int;
  var v37:int;
  var v38:int;
  var v39:int;
  var v40:int;
  var v41:int;
  var v42:int;
  var v43:int;
  var v44:int;
  var v45:int;
  var v46:int;
  var v47:int;
  var v48:int;
  var v49:int;
  var v50:int;
  var v51:int;
  var v52:int;
  var v53:int;
  var v54:int;
  var v55:int;
  var v56:int;
  var v57:int;
  var v58:int;
  var v59:int;
  var v60:int;
  var v61:int;
  var v62:int;
  var v63:int;
  var v64:int;
  var v65:int;
  var v66:int;
  var v67:int;
  var v68:int;
  var v69:int;
  var v70:int;
  var v71:int;
  var v72:int;
  var v73:int;
  var v74:int;
  var v75:int;
  var v76:int;
  var v77:int;
  var v78:int;
  var v79:int;
  var v80:int;
  var v81:int;
  var v82:int;
  var v83:int;
  var v84:int;
  var v85:int;
  var v86:int;
  var v87:int;
  var v88:int;
  var v89:int;
  var v90:int;
  var v91:int;
  var v92:int;
  var v93:int;
  var v94:int;
  var v95:int;
  var v96:int;
  var v97:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  v1 := BV32_ADD(BV32_MUL(group_id_y, group_size_y), local_id_y);
  assert {:sourceloc} {:sourceloc_num 2} true;
  v2 := $$randArray[BV32_MUL(BV32_ADD(BV32_MUL(v1, $width), v0), 4)];
  assert {:sourceloc} {:sourceloc_num 3} true;
  v3 := $$randArray[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(v1, $width), v0), 4), 1)];
  assert {:sourceloc} {:sourceloc_num 4} true;
  v4 := $$randArray[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(v1, $width), v0), 4), 2)];
  assert {:sourceloc} {:sourceloc_num 5} true;
  v5 := $$randArray[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(v1, $width), v0), 4), 3)];
  v6 := FADD64(FMUL64(4621819117588971520, v2), FMUL64(4636737291354636288, FSUB64(4607182418800017408, v2)));
  v7 := FADD64(FMUL64(4621819117588971520, v3), FMUL64(4636737291354636288, FSUB64(4607182418800017408, v3)));
  v8 := FADD64(FMUL64(4621819117588971520, v4), FMUL64(4636737291354636288, FSUB64(4607182418800017408, v4)));
  v9 := FADD64(FMUL64(4621819117588971520, v5), FMUL64(4636737291354636288, FSUB64(4607182418800017408, v5)));
  v10 := FADD64(FMUL64(4621819117588971520, v2), FMUL64(4636737291354636288, FSUB64(4607182418800017408, v2)));
  v11 := FADD64(FMUL64(4621819117588971520, v3), FMUL64(4636737291354636288, FSUB64(4607182418800017408, v3)));
  v12 := FADD64(FMUL64(4621819117588971520, v4), FMUL64(4636737291354636288, FSUB64(4607182418800017408, v4)));
  v13 := FADD64(FMUL64(4621819117588971520, v5), FMUL64(4636737291354636288, FSUB64(4607182418800017408, v5)));
  v14 := FADD64(FMUL64(4607182418800017408, v2), FMUL64(4621819117588971520, FSUB64(4607182418800017408, v2)));
  v15 := FADD64(FMUL64(4607182418800017408, v3), FMUL64(4621819117588971520, FSUB64(4607182418800017408, v3)));
  v16 := FADD64(FMUL64(4607182418800017408, v4), FMUL64(4621819117588971520, FSUB64(4607182418800017408, v4)));
  v17 := FADD64(FMUL64(4607182418800017408, v5), FMUL64(4621819117588971520, FSUB64(4607182418800017408, v5)));
  v18 := FADD64(FMUL64(4576918229304087675, v2), FMUL64(4587366580439587226, FSUB64(4607182418800017408, v2)));
  v19 := FADD64(FMUL64(4576918229304087675, v3), FMUL64(4587366580439587226, FSUB64(4607182418800017408, v3)));
  v20 := FADD64(FMUL64(4576918229304087675, v4), FMUL64(4587366580439587226, FSUB64(4607182418800017408, v4)));
  v21 := FADD64(FMUL64(4576918229304087675, v5), FMUL64(4587366580439587226, FSUB64(4607182418800017408, v5)));
  v22 := FADD64(FMUL64(4576918229304087675, v2), FMUL64(4591870180066957722, FSUB64(4607182418800017408, v2)));
  v23 := FADD64(FMUL64(4576918229304087675, v3), FMUL64(4591870180066957722, FSUB64(4607182418800017408, v3)));
  v24 := FADD64(FMUL64(4576918229304087675, v4), FMUL64(4591870180066957722, FSUB64(4607182418800017408, v4)));
  v25 := FADD64(FMUL64(4576918229304087675, v5), FMUL64(4591870180066957722, FSUB64(4607182418800017408, v5)));
  v26 := FMUL64(v22, FSQRT64(v14));
  v27 := FMUL64(v23, FSQRT64(v15));
  v28 := FMUL64(v24, FSQRT64(v16));
  v29 := FMUL64(v25, FSQRT64(v17));
  v30 := FDIV64(FADD64(FMUL64(FLOG64(FDIV64(v6, v10)), 4604418534330597376), FMUL64(FADD64(v18, FDIV64(FMUL64(v22, v22), 4611686018427387904)), v14)), v26);
  v31 := FDIV64(FADD64(FMUL64(FLOG64(FDIV64(v7, v11)), 4604418534330597376), FMUL64(FADD64(v19, FDIV64(FMUL64(v23, v23), 4611686018427387904)), v15)), v27);
  v32 := FDIV64(FADD64(FMUL64(FLOG64(FDIV64(v8, v12)), 4604418534330597376), FMUL64(FADD64(v20, FDIV64(FMUL64(v24, v24), 4611686018427387904)), v16)), v28);
  v33 := FDIV64(FADD64(FMUL64(FLOG64(FDIV64(v9, v13)), 4604418534330597376), FMUL64(FADD64(v21, FDIV64(FMUL64(v25, v25), 4611686018427387904)), v17)), v29);
  v34 := FSUB64(v30, v26);
  v35 := FSUB64(v31, v27);
  v36 := FSUB64(v32, v28);
  v37 := FSUB64(v33, v29);
  v38 := FMUL64(v10, FEXP64(FMUL64(FMUL64(FSUB64(-9223372036854775808, v18), v14), 4609176140021203710)));
  v39 := FMUL64(v11, FEXP64(FMUL64(FMUL64(FSUB64(-9223372036854775808, v19), v15), 4609176140021203710)));
  v40 := FMUL64(v12, FEXP64(FMUL64(FMUL64(FSUB64(-9223372036854775808, v20), v16), 4609176140021203710)));
  v41 := FMUL64(v13, FEXP64(FMUL64(FMUL64(FSUB64(-9223372036854775808, v21), v17), 4609176140021203710)));
  v42 := FDIV64(4607182418800017408, FADD64(FMUL64(4597513799286722574, FABS64(v30)), 4607182418800017408));
  v43 := FDIV64(4607182418800017408, FADD64(FMUL64(4597513799286722574, FABS64(v31)), 4607182418800017408));
  v44 := FDIV64(4607182418800017408, FADD64(FMUL64(4597513799286722574, FABS64(v32)), 4607182418800017408));
  v45 := FDIV64(4607182418800017408, FADD64(FMUL64(4597513799286722574, FABS64(v33)), 4607182418800017408));
  v46 := FADD64(FMUL64(FSUB64(-9223372036854775808, FMUL64(FMUL64(4600858325132107264, FEXP64(FMUL64(FDIV64(FMUL64(FSUB64(-9223372036854775808, v30), v30), 4611686018427387904), 4609176140021203710))), v42)), FADD64(FMUL64(v42, FADD64(FMUL64(v42, FADD64(FMUL64(v42, FADD64(FMUL64(v42, 4608669842595391811), -4612491009938261808)), 4610701882545888872)), -4623277134873873829)), 4599425086075893996)), 4607182418800017408);
  v47 := FADD64(FMUL64(FSUB64(-9223372036854775808, FMUL64(FMUL64(4600858325132107264, FEXP64(FMUL64(FDIV64(FMUL64(FSUB64(-9223372036854775808, v31), v31), 4611686018427387904), 4609176140021203710))), v43)), FADD64(FMUL64(v43, FADD64(FMUL64(v43, FADD64(FMUL64(v43, FADD64(FMUL64(v43, 4608669842595391811), -4612491009938261808)), 4610701882545888872)), -4623277134873873829)), 4599425086075893996)), 4607182418800017408);
  v48 := FADD64(FMUL64(FSUB64(-9223372036854775808, FMUL64(FMUL64(4600858325132107264, FEXP64(FMUL64(FDIV64(FMUL64(FSUB64(-9223372036854775808, v32), v32), 4611686018427387904), 4609176140021203710))), v44)), FADD64(FMUL64(v44, FADD64(FMUL64(v44, FADD64(FMUL64(v44, FADD64(FMUL64(v44, 4608669842595391811), -4612491009938261808)), 4610701882545888872)), -4623277134873873829)), 4599425086075893996)), 4607182418800017408);
  v49 := FADD64(FMUL64(FSUB64(-9223372036854775808, FMUL64(FMUL64(4600858325132107264, FEXP64(FMUL64(FDIV64(FMUL64(FSUB64(-9223372036854775808, v33), v33), 4611686018427387904), 4609176140021203710))), v45)), FADD64(FMUL64(v45, FADD64(FMUL64(v45, FADD64(FMUL64(v45, FADD64(FMUL64(v45, 4608669842595391811), -4612491009938261808)), 4610701882545888872)), -4623277134873873829)), 4599425086075893996)), 4607182418800017408);
  v50 := BV1_SEXT64((if BV64_SLT(BV1_SEXT64((if FLT64(v30, 0) then 1 else 0)), 0) then 1 else 0));
  v51 := BV1_SEXT64((if BV64_SLT(BV1_SEXT64((if FLT64(v31, 0) then 1 else 0)), 0) then 1 else 0));
  v52 := BV1_SEXT64((if BV64_SLT(BV1_SEXT64((if FLT64(v32, 0) then 1 else 0)), 0) then 1 else 0));
  v53 := BV1_SEXT64((if BV64_SLT(BV1_SEXT64((if FLT64(v33, 0) then 1 else 0)), 0) then 1 else 0));
  v54 := FDIV64(4607182418800017408, FADD64(FMUL64(4597513799286722574, FABS64(v34)), 4607182418800017408));
  v55 := FDIV64(4607182418800017408, FADD64(FMUL64(4597513799286722574, FABS64(v35)), 4607182418800017408));
  v56 := FDIV64(4607182418800017408, FADD64(FMUL64(4597513799286722574, FABS64(v36)), 4607182418800017408));
  v57 := FDIV64(4607182418800017408, FADD64(FMUL64(4597513799286722574, FABS64(v37)), 4607182418800017408));
  v58 := FADD64(FMUL64(FSUB64(-9223372036854775808, FMUL64(FMUL64(4600858325132107264, FEXP64(FMUL64(FDIV64(FMUL64(FSUB64(-9223372036854775808, v34), v34), 4611686018427387904), 4609176140021203710))), v54)), FADD64(FMUL64(v54, FADD64(FMUL64(v54, FADD64(FMUL64(v54, FADD64(FMUL64(v54, 4608669842595391811), -4612491009938261808)), 4610701882545888872)), -4623277134873873829)), 4599425086075893996)), 4607182418800017408);
  v59 := FADD64(FMUL64(FSUB64(-9223372036854775808, FMUL64(FMUL64(4600858325132107264, FEXP64(FMUL64(FDIV64(FMUL64(FSUB64(-9223372036854775808, v35), v35), 4611686018427387904), 4609176140021203710))), v55)), FADD64(FMUL64(v55, FADD64(FMUL64(v55, FADD64(FMUL64(v55, FADD64(FMUL64(v55, 4608669842595391811), -4612491009938261808)), 4610701882545888872)), -4623277134873873829)), 4599425086075893996)), 4607182418800017408);
  v60 := FADD64(FMUL64(FSUB64(-9223372036854775808, FMUL64(FMUL64(4600858325132107264, FEXP64(FMUL64(FDIV64(FMUL64(FSUB64(-9223372036854775808, v36), v36), 4611686018427387904), 4609176140021203710))), v56)), FADD64(FMUL64(v56, FADD64(FMUL64(v56, FADD64(FMUL64(v56, FADD64(FMUL64(v56, 4608669842595391811), -4612491009938261808)), 4610701882545888872)), -4623277134873873829)), 4599425086075893996)), 4607182418800017408);
  v61 := FADD64(FMUL64(FSUB64(-9223372036854775808, FMUL64(FMUL64(4600858325132107264, FEXP64(FMUL64(FDIV64(FMUL64(FSUB64(-9223372036854775808, v37), v37), 4611686018427387904), 4609176140021203710))), v57)), FADD64(FMUL64(v57, FADD64(FMUL64(v57, FADD64(FMUL64(v57, FADD64(FMUL64(v57, 4608669842595391811), -4612491009938261808)), 4610701882545888872)), -4623277134873873829)), 4599425086075893996)), 4607182418800017408);
  v62 := BV1_SEXT64((if BV64_SLT(BV1_SEXT64((if FLT64(v34, 0) then 1 else 0)), 0) then 1 else 0));
  v63 := BV1_SEXT64((if BV64_SLT(BV1_SEXT64((if FLT64(v35, 0) then 1 else 0)), 0) then 1 else 0));
  v64 := BV1_SEXT64((if BV64_SLT(BV1_SEXT64((if FLT64(v36, 0) then 1 else 0)), 0) then 1 else 0));
  v65 := BV1_SEXT64((if BV64_SLT(BV1_SEXT64((if FLT64(v37, 0) then 1 else 0)), 0) then 1 else 0));
  assert {:sourceloc} {:sourceloc_num 6} true;
  $$call[BV32_MUL(BV32_ADD(BV32_MUL(v1, $width), v0), 4)] := FADD64(FMUL64(v6, BV64_OR(BV64_AND(v46, BV64_XOR(v50, -1)), BV64_AND(FSUB64(4607182418800017408, v46), v50))), FSUB64(-9223372036854775808, FMUL64(v38, BV64_OR(BV64_AND(v58, BV64_XOR(v62, -1)), BV64_AND(FSUB64(4607182418800017408, v58), v62)))));
  assert {:sourceloc} {:sourceloc_num 7} true;
  $$call[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(v1, $width), v0), 4), 1)] := FADD64(FMUL64(v7, BV64_OR(BV64_AND(v47, BV64_XOR(v51, -1)), BV64_AND(FSUB64(4607182418800017408, v47), v51))), FSUB64(-9223372036854775808, FMUL64(v39, BV64_OR(BV64_AND(v59, BV64_XOR(v63, -1)), BV64_AND(FSUB64(4607182418800017408, v59), v63)))));
  assert {:sourceloc} {:sourceloc_num 8} true;
  $$call[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(v1, $width), v0), 4), 2)] := FADD64(FMUL64(v8, BV64_OR(BV64_AND(v48, BV64_XOR(v52, -1)), BV64_AND(FSUB64(4607182418800017408, v48), v52))), FSUB64(-9223372036854775808, FMUL64(v40, BV64_OR(BV64_AND(v60, BV64_XOR(v64, -1)), BV64_AND(FSUB64(4607182418800017408, v60), v64)))));
  assert {:sourceloc} {:sourceloc_num 9} true;
  $$call[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(v1, $width), v0), 4), 3)] := FADD64(FMUL64(v9, BV64_OR(BV64_AND(v49, BV64_XOR(v53, -1)), BV64_AND(FSUB64(4607182418800017408, v49), v53))), FSUB64(-9223372036854775808, FMUL64(v41, BV64_OR(BV64_AND(v61, BV64_XOR(v65, -1)), BV64_AND(FSUB64(4607182418800017408, v61), v65)))));
  v66 := FSUB64(-9223372036854775808, v30);
  v67 := FSUB64(-9223372036854775808, v31);
  v68 := FSUB64(-9223372036854775808, v32);
  v69 := FSUB64(-9223372036854775808, v33);
  v70 := FDIV64(4607182418800017408, FADD64(FMUL64(4597513799286722574, FABS64(v66)), 4607182418800017408));
  v71 := FDIV64(4607182418800017408, FADD64(FMUL64(4597513799286722574, FABS64(v67)), 4607182418800017408));
  v72 := FDIV64(4607182418800017408, FADD64(FMUL64(4597513799286722574, FABS64(v68)), 4607182418800017408));
  v73 := FDIV64(4607182418800017408, FADD64(FMUL64(4597513799286722574, FABS64(v69)), 4607182418800017408));
  v74 := FADD64(FMUL64(FSUB64(-9223372036854775808, FMUL64(FMUL64(4600858325132107264, FEXP64(FMUL64(FDIV64(FMUL64(FSUB64(-9223372036854775808, v66), v66), 4611686018427387904), 4609176140021203710))), v70)), FADD64(FMUL64(v70, FADD64(FMUL64(v70, FADD64(FMUL64(v70, FADD64(FMUL64(v70, 4608669842595391811), -4612491009938261808)), 4610701882545888872)), -4623277134873873829)), 4599425086075893996)), 4607182418800017408);
  v75 := FADD64(FMUL64(FSUB64(-9223372036854775808, FMUL64(FMUL64(4600858325132107264, FEXP64(FMUL64(FDIV64(FMUL64(FSUB64(-9223372036854775808, v67), v67), 4611686018427387904), 4609176140021203710))), v71)), FADD64(FMUL64(v71, FADD64(FMUL64(v71, FADD64(FMUL64(v71, FADD64(FMUL64(v71, 4608669842595391811), -4612491009938261808)), 4610701882545888872)), -4623277134873873829)), 4599425086075893996)), 4607182418800017408);
  v76 := FADD64(FMUL64(FSUB64(-9223372036854775808, FMUL64(FMUL64(4600858325132107264, FEXP64(FMUL64(FDIV64(FMUL64(FSUB64(-9223372036854775808, v68), v68), 4611686018427387904), 4609176140021203710))), v72)), FADD64(FMUL64(v72, FADD64(FMUL64(v72, FADD64(FMUL64(v72, FADD64(FMUL64(v72, 4608669842595391811), -4612491009938261808)), 4610701882545888872)), -4623277134873873829)), 4599425086075893996)), 4607182418800017408);
  v77 := FADD64(FMUL64(FSUB64(-9223372036854775808, FMUL64(FMUL64(4600858325132107264, FEXP64(FMUL64(FDIV64(FMUL64(FSUB64(-9223372036854775808, v69), v69), 4611686018427387904), 4609176140021203710))), v73)), FADD64(FMUL64(v73, FADD64(FMUL64(v73, FADD64(FMUL64(v73, FADD64(FMUL64(v73, 4608669842595391811), -4612491009938261808)), 4610701882545888872)), -4623277134873873829)), 4599425086075893996)), 4607182418800017408);
  v78 := BV1_SEXT64((if BV64_SLT(BV1_SEXT64((if FLT64(v66, 0) then 1 else 0)), 0) then 1 else 0));
  v79 := BV1_SEXT64((if BV64_SLT(BV1_SEXT64((if FLT64(v67, 0) then 1 else 0)), 0) then 1 else 0));
  v80 := BV1_SEXT64((if BV64_SLT(BV1_SEXT64((if FLT64(v68, 0) then 1 else 0)), 0) then 1 else 0));
  v81 := BV1_SEXT64((if BV64_SLT(BV1_SEXT64((if FLT64(v69, 0) then 1 else 0)), 0) then 1 else 0));
  v82 := FSUB64(-9223372036854775808, v34);
  v83 := FSUB64(-9223372036854775808, v35);
  v84 := FSUB64(-9223372036854775808, v36);
  v85 := FSUB64(-9223372036854775808, v37);
  v86 := FDIV64(4607182418800017408, FADD64(FMUL64(4597513799286722574, FABS64(v82)), 4607182418800017408));
  v87 := FDIV64(4607182418800017408, FADD64(FMUL64(4597513799286722574, FABS64(v83)), 4607182418800017408));
  v88 := FDIV64(4607182418800017408, FADD64(FMUL64(4597513799286722574, FABS64(v84)), 4607182418800017408));
  v89 := FDIV64(4607182418800017408, FADD64(FMUL64(4597513799286722574, FABS64(v85)), 4607182418800017408));
  v90 := FADD64(FMUL64(FSUB64(-9223372036854775808, FMUL64(FMUL64(4600858325132107264, FEXP64(FMUL64(FDIV64(FMUL64(FSUB64(-9223372036854775808, v82), v82), 4611686018427387904), 4609176140021203710))), v86)), FADD64(FMUL64(v86, FADD64(FMUL64(v86, FADD64(FMUL64(v86, FADD64(FMUL64(v86, 4608669842595391811), -4612491009938261808)), 4610701882545888872)), -4623277134873873829)), 4599425086075893996)), 4607182418800017408);
  v91 := FADD64(FMUL64(FSUB64(-9223372036854775808, FMUL64(FMUL64(4600858325132107264, FEXP64(FMUL64(FDIV64(FMUL64(FSUB64(-9223372036854775808, v83), v83), 4611686018427387904), 4609176140021203710))), v87)), FADD64(FMUL64(v87, FADD64(FMUL64(v87, FADD64(FMUL64(v87, FADD64(FMUL64(v87, 4608669842595391811), -4612491009938261808)), 4610701882545888872)), -4623277134873873829)), 4599425086075893996)), 4607182418800017408);
  v92 := FADD64(FMUL64(FSUB64(-9223372036854775808, FMUL64(FMUL64(4600858325132107264, FEXP64(FMUL64(FDIV64(FMUL64(FSUB64(-9223372036854775808, v84), v84), 4611686018427387904), 4609176140021203710))), v88)), FADD64(FMUL64(v88, FADD64(FMUL64(v88, FADD64(FMUL64(v88, FADD64(FMUL64(v88, 4608669842595391811), -4612491009938261808)), 4610701882545888872)), -4623277134873873829)), 4599425086075893996)), 4607182418800017408);
  v93 := FADD64(FMUL64(FSUB64(-9223372036854775808, FMUL64(FMUL64(4600858325132107264, FEXP64(FMUL64(FDIV64(FMUL64(FSUB64(-9223372036854775808, v85), v85), 4611686018427387904), 4609176140021203710))), v89)), FADD64(FMUL64(v89, FADD64(FMUL64(v89, FADD64(FMUL64(v89, FADD64(FMUL64(v89, 4608669842595391811), -4612491009938261808)), 4610701882545888872)), -4623277134873873829)), 4599425086075893996)), 4607182418800017408);
  v94 := BV1_SEXT64((if BV64_SLT(BV1_SEXT64((if FLT64(v82, 0) then 1 else 0)), 0) then 1 else 0));
  v95 := BV1_SEXT64((if BV64_SLT(BV1_SEXT64((if FLT64(v83, 0) then 1 else 0)), 0) then 1 else 0));
  v96 := BV1_SEXT64((if BV64_SLT(BV1_SEXT64((if FLT64(v84, 0) then 1 else 0)), 0) then 1 else 0));
  v97 := BV1_SEXT64((if BV64_SLT(BV1_SEXT64((if FLT64(v85, 0) then 1 else 0)), 0) then 1 else 0));
  assert {:sourceloc} {:sourceloc_num 10} true;
  $$put[BV32_MUL(BV32_ADD(BV32_MUL(v1, $width), v0), 4)] := FADD64(FMUL64(v38, BV64_OR(BV64_AND(v90, BV64_XOR(v94, -1)), BV64_AND(FSUB64(4607182418800017408, v90), v94))), FSUB64(-9223372036854775808, FMUL64(v6, BV64_OR(BV64_AND(v74, BV64_XOR(v78, -1)), BV64_AND(FSUB64(4607182418800017408, v74), v78)))));
  assert {:sourceloc} {:sourceloc_num 11} true;
  $$put[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(v1, $width), v0), 4), 1)] := FADD64(FMUL64(v39, BV64_OR(BV64_AND(v91, BV64_XOR(v95, -1)), BV64_AND(FSUB64(4607182418800017408, v91), v95))), FSUB64(-9223372036854775808, FMUL64(v7, BV64_OR(BV64_AND(v75, BV64_XOR(v79, -1)), BV64_AND(FSUB64(4607182418800017408, v75), v79)))));
  assert {:sourceloc} {:sourceloc_num 12} true;
  $$put[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(v1, $width), v0), 4), 2)] := FADD64(FMUL64(v40, BV64_OR(BV64_AND(v92, BV64_XOR(v96, -1)), BV64_AND(FSUB64(4607182418800017408, v92), v96))), FSUB64(-9223372036854775808, FMUL64(v8, BV64_OR(BV64_AND(v76, BV64_XOR(v80, -1)), BV64_AND(FSUB64(4607182418800017408, v76), v80)))));
  assert {:sourceloc} {:sourceloc_num 13} true;
  $$put[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(v1, $width), v0), 4), 3)] := FADD64(FMUL64(v41, BV64_OR(BV64_AND(v93, BV64_XOR(v97, -1)), BV64_AND(FSUB64(4607182418800017408, v93), v97))), FSUB64(-9223372036854775808, FMUL64(v9, BV64_OR(BV64_AND(v77, BV64_XOR(v81, -1)), BV64_AND(FSUB64(4607182418800017408, v77), v81)))));
  return;
}
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 32 then 1 else 0) != 0;
axiom (if group_size_y == 32 then 1 else 0) != 0;
axiom (if num_groups_x == 2 then 1 else 0) != 0;
axiom (if num_groups_y == 2 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
