type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP8(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "output"} {:global} $$output : [int]int;
axiom {:array_info "$$output"} {:global} {:elem_width 8} {:source_name "output"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$output : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$output : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$output : bool;

var {:source_name "input"} {:global} $$input : [int]int;
axiom {:array_info "$$input"} {:global} {:elem_width 8} {:source_name "input"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$input : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$input : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$input : bool;

var {:source_name "roundKey"} {:global} $$roundKey : [int]int;
axiom {:array_info "$$roundKey"} {:global} {:elem_width 8} {:source_name "roundKey"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$roundKey : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$roundKey : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$roundKey : bool;

var {:source_name "SBox"} {:global} $$SBox : [int]int;
axiom {:array_info "$$SBox"} {:global} {:elem_width 8} {:source_name "SBox"} {:source_elem_width 8} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 8} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$SBox : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 8} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$SBox : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 8} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$SBox : bool;

var {:source_name "block0"} {:group_shared} $$block0 : [int]int;
axiom {:array_info "$$block0"} {:group_shared} {:elem_width 8} {:source_name "block0"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:group_shared} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$block0 : bool;
var {:race_checking} {:group_shared} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$block0 : bool;
var {:race_checking} {:group_shared} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$block0 : bool;

var {:source_name "block1"} {:group_shared} $$block1 : [int]int;
axiom {:array_info "$$block1"} {:group_shared} {:elem_width 8} {:source_name "block1"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:group_shared} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$block1 : bool;
var {:race_checking} {:group_shared} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$block1 : bool;
var {:race_checking} {:group_shared} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$block1 : bool;

var {:source_name "galiosCoeff"} $$galiosCoeff : [int]int;
axiom {:array_info "$$galiosCoeff"} {:elem_width 8} {:source_name "galiosCoeff"} {:source_elem_width 32} {:source_dimensions "4"} true;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_id_y} group_id_y : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:local_id_y} local_id_y : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function  BV32_ASHR(int, int) : int;
function BV_CONCAT(int, int) : int;
function BV_EXTRACT(int, int, int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_AND(x : int, y : int) : int {
  if x == y then x else (if x == 0 || y == 0 then 0 else BV32_AND_UF(x, y))
}
function BV32_AND_UF(int, int) : int;
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SHL(x : int, y : int) : int {
  if x >= 0 && y == 1 then x*2 else BV32_SHL_UF(x,y)
}
function BV32_SHL_UF(int, int) : int;
function {:inline true} BV32_SUB(x : int, y : int) : int {
  x - y
}
function {:inline true} BV32_ULT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV32_UREM(x : int, y : int) : int {
  x mod y
}
function {:inline true} BV32_XOR(x : int, y : int) : int {
  if x == y then 0 else (if x == 0 then y else (if y == 0 then x else BV32_XOR_UF(x, y)))
}
function BV32_XOR_UF(int, int) : int;
function {:inline true} BV8_XOR(x : int, y : int) : int {
  if x == y then 0 else (if x == 0 then y else (if y == 0 then x else BV8_XOR_UF(x, y)))
}
function BV8_XOR_UF(int, int) : int;
function {:inline true} BV8_ZEXT32(x : int) : int {
  x
}
procedure {:source_name "AESEncrypt"} {:kernel} $AESEncrypt($width:int, $rounds:int)
{
  var $i.0:int;
  var $tempValue.i.0:int;
  var $i.i.0:int;
  var $.021:int;
  var $.017:int;
  var $p.i.i.0:int;
  var $i.i.i.0:int;
  var $p.i.i.1:int;
  var $.122:int;
  var $i.i26.i.0:int;
  var $p.i25.i.0:int;
  var $.01:int;
  var $.0:int;
  var $p.i25.i.1:int;
  var $.1:int;
  var $i.i22.i.0:int;
  var $p.i21.i.0:int;
  var $.04:int;
  var $.02:int;
  var $p.i21.i.1:int;
  var $.13:int;
  var $i.i18.i.0:int;
  var $p.i17.i.0:int;
  var $.07:int;
  var $.05:int;
  var $p.i17.i.1:int;
  var $.16:int;
  var $x.i.0:int;
  var $y.i.0:int;
  var $z.i.0:int;
  var $w.i.0:int;
  var $k.i.0:int;
  var $i.i14.i.0:int;
  var $p.i13.i.0:int;
  var $.010:int;
  var $.08:int;
  var $p.i13.i.1:int;
  var $.19:int;
  var $i.i10.i.0:int;
  var $p.i9.i.0:int;
  var $.013:int;
  var $.011:int;
  var $p.i9.i.1:int;
  var $.112:int;
  var $i.i6.i.0:int;
  var $p.i5.i.0:int;
  var $.016:int;
  var $.014:int;
  var $p.i5.i.1:int;
  var $.115:int;
  var $i.i2.i.0:int;
  var $p.i1.i.0:int;
  var $.020:int;
  var $.018:int;
  var $p.i1.i.1:int;
  var $.119:int;
  var $i.i2.0:int;
  var $tempValue.i1.0:int;
  var v0:int;
  var v3:int;
  var v1:int;
  var v2:int;
  var v4:int;
  var v5:int;
  var v6:int;
  var v7:int;
  var v8:int;
  var v9:int;
  var v10:int;
  var v11:int;
  var v12:int;
  var v13:int;
  var v14:int;
  var v15:int;
  var v16:bool;
  var v17:int;
  var v18:int;
  var v19:int;
  var v20:int;
  var v21:int;
  var v22:int;
  var v28:int;
  var v23:int;
  var v24:int;
  var v25:int;
  var v26:int;
  var v27:int;
  var v29:bool;
  var v30:int;
  var v31:int;
  var v32:int;
  var v33:int;
  var v34:int;
  var v35:int;
  var v36:int;
  var v37:int;
  var v38:int;
  var v39:bool;
  var v40:bool;
  var v41:int;
  var v42:bool;
  var v43:int;
  var v44:int;
  var v45:int;
  var v46:int;
  var v47:int;
  var v48:int;
  var v49:int;
  var v50:int;
  var v51:bool;
  var v52:bool;
  var v53:int;
  var v54:bool;
  var v55:int;
  var v56:int;
  var v57:int;
  var v58:int;
  var v59:int;
  var v60:int;
  var v61:int;
  var v62:int;
  var v63:bool;
  var v64:bool;
  var v65:int;
  var v66:bool;
  var v67:int;
  var v68:int;
  var v69:int;
  var v70:int;
  var v71:int;
  var v72:int;
  var v73:int;
  var v74:int;
  var v75:bool;
  var v76:bool;
  var v77:int;
  var v78:bool;
  var v79:bool;
  var v80:int;
  var v81:int;
  var v82:int;
  var v83:int;
  var v84:int;
  var v85:int;
  var v86:int;
  var v87:int;
  var v88:bool;
  var v89:bool;
  var v90:int;
  var v91:bool;
  var v92:int;
  var v93:int;
  var v94:int;
  var v95:int;
  var v96:int;
  var v97:int;
  var v98:int;
  var v99:int;
  var v100:bool;
  var v101:bool;
  var v102:int;
  var v103:bool;
  var v104:int;
  var v105:int;
  var v106:int;
  var v107:int;
  var v108:int;
  var v109:int;
  var v110:int;
  var v111:int;
  var v112:bool;
  var v113:bool;
  var v114:int;
  var v115:bool;
  var v116:int;
  var v117:int;
  var v118:int;
  var v119:int;
  var v120:int;
  var v121:int;
  var v122:int;
  var v123:int;
  var v124:bool;
  var v125:bool;
  var v126:int;
  var v127:bool;
  var v128:int;
  var v129:int;
  var v130:int;
  var v131:int;
  var v132:int;
  var v133:int;
  var v134:int;
  var v135:int;
  var v136:int;
  var v137:int;
  var v138:int;
  var v139:int;
  var v140:int;
  var v141:int;
  var v147:int;
  var v142:int;
  var v143:int;
  var v144:int;
  var v145:int;
  var v146:int;
  var v148:bool;
  var v149:int;
  var v150:int;
  var v151:int;
  var v152:int;
  var v153:int;
  var v154:int;
  var v160:int;
  var v155:int;
  var v156:int;
  var v157:int;
  var v158:int;
  var v159:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  v0 := local_id_y;
  v1 := group_size_x;
  v2 := BV32_ADD(BV32_MUL(v0, v1), local_id_x);
  v3 := BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(group_id_y, group_size_y), local_id_y), BV32_MUL(group_size_x, num_groups_x)), BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x));
  assert {:sourceloc} {:sourceloc_num 1} true;
  v4 := $$input[BV32_MUL(v3, 4)];
  assert {:sourceloc} {:sourceloc_num 2} true;
  v5 := $$input[BV32_ADD(BV32_MUL(v3, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 3} true;
  v6 := $$input[BV32_ADD(BV32_MUL(v3, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 4} true;
  v7 := $$input[BV32_ADD(BV32_MUL(v3, 4), 3)];
  assert {:sourceloc} {:sourceloc_num 5} true;
  $$block0[BV32_MUL(v2, 4)] := v4;
  assert {:sourceloc} {:sourceloc_num 6} true;
  $$block0[BV32_ADD(BV32_MUL(v2, 4), 1)] := v5;
  assert {:sourceloc} {:sourceloc_num 7} true;
  $$block0[BV32_ADD(BV32_MUL(v2, 4), 2)] := v6;
  assert {:sourceloc} {:sourceloc_num 8} true;
  $$block0[BV32_ADD(BV32_MUL(v2, 4), 3)] := v7;
  assert {:sourceloc} {:sourceloc_num 9} true;
  v8 := $$roundKey[BV32_MUL(v0, 4)];
  assert {:sourceloc} {:sourceloc_num 10} true;
  v9 := $$roundKey[BV32_ADD(BV32_MUL(v0, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 11} true;
  v10 := $$roundKey[BV32_ADD(BV32_MUL(v0, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 12} true;
  v11 := $$roundKey[BV32_ADD(BV32_MUL(v0, 4), 3)];
  assert {:sourceloc} {:sourceloc_num 13} true;
  v12 := $$block0[BV32_MUL(v2, 4)];
  assert {:sourceloc} {:sourceloc_num 14} true;
  v13 := $$block0[BV32_ADD(BV32_MUL(v2, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 15} true;
  v14 := $$block0[BV32_ADD(BV32_MUL(v2, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 16} true;
  v15 := $$block0[BV32_ADD(BV32_MUL(v2, 4), 3)];
  assert {:sourceloc} {:sourceloc_num 17} true;
  $$block0[BV32_MUL(v2, 4)] := BV8_XOR(v12, v8);
  assert {:sourceloc} {:sourceloc_num 18} true;
  $$block0[BV32_ADD(BV32_MUL(v2, 4), 1)] := BV8_XOR(v13, v9);
  assert {:sourceloc} {:sourceloc_num 19} true;
  $$block0[BV32_ADD(BV32_MUL(v2, 4), 2)] := BV8_XOR(v14, v10);
  assert {:sourceloc} {:sourceloc_num 20} true;
  $$block0[BV32_ADD(BV32_MUL(v2, 4), 3)] := BV8_XOR(v15, v11);
  assert {:sourceloc} {:sourceloc_num 21} true;
  $$galiosCoeff[0] := 2;
  assert {:sourceloc} {:sourceloc_num 22} true;
  $$galiosCoeff[1] := 0;
  assert {:sourceloc} {:sourceloc_num 23} true;
  $$galiosCoeff[2] := 0;
  assert {:sourceloc} {:sourceloc_num 24} true;
  $$galiosCoeff[3] := 0;
  assert {:sourceloc} {:sourceloc_num 25} true;
  $$galiosCoeff[4] := 3;
  assert {:sourceloc} {:sourceloc_num 26} true;
  $$galiosCoeff[5] := 0;
  assert {:sourceloc} {:sourceloc_num 27} true;
  $$galiosCoeff[6] := 0;
  assert {:sourceloc} {:sourceloc_num 28} true;
  $$galiosCoeff[7] := 0;
  assert {:sourceloc} {:sourceloc_num 29} true;
  $$galiosCoeff[8] := 1;
  assert {:sourceloc} {:sourceloc_num 30} true;
  $$galiosCoeff[9] := 0;
  assert {:sourceloc} {:sourceloc_num 31} true;
  $$galiosCoeff[10] := 0;
  assert {:sourceloc} {:sourceloc_num 32} true;
  $$galiosCoeff[11] := 0;
  assert {:sourceloc} {:sourceloc_num 33} true;
  $$galiosCoeff[12] := 1;
  assert {:sourceloc} {:sourceloc_num 34} true;
  $$galiosCoeff[13] := 0;
  assert {:sourceloc} {:sourceloc_num 35} true;
  $$galiosCoeff[14] := 0;
  assert {:sourceloc} {:sourceloc_num 36} true;
  $$galiosCoeff[15] := 0;
  $i.0 := 1;
  goto $1;
$1:
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  v16 := BV32_ULT($i.0, $rounds);
  goto $truebb, $falsebb;
$2:
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  assert {:sourceloc} {:sourceloc_num 39} true;
  v17 := $$block0[BV32_MUL(v2, 4)];
  assert {:sourceloc} {:sourceloc_num 40} true;
  v18 := $$block0[BV32_ADD(BV32_MUL(v2, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 41} true;
  v19 := $$block0[BV32_ADD(BV32_MUL(v2, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 42} true;
  v20 := $$block0[BV32_ADD(BV32_MUL(v2, 4), 3)];
  assert {:sourceloc} {:sourceloc_num 43} true;
  v21 := $$SBox[BV8_ZEXT32(v17)];
  assert {:sourceloc} {:sourceloc_num 44} true;
  v22 := $$SBox[BV8_ZEXT32(v18)];
  assert {:sourceloc} {:sourceloc_num 45} true;
  v23 := $$SBox[BV8_ZEXT32(v19)];
  assert {:sourceloc} {:sourceloc_num 46} true;
  v24 := $$SBox[BV8_ZEXT32(v20)];
  assert {:sourceloc} {:sourceloc_num 47} true;
  $$block0[BV32_MUL(v2, 4)] := v21;
  assert {:sourceloc} {:sourceloc_num 48} true;
  $$block0[BV32_ADD(BV32_MUL(v2, 4), 1)] := v22;
  assert {:sourceloc} {:sourceloc_num 49} true;
  $$block0[BV32_ADD(BV32_MUL(v2, 4), 2)] := v23;
  assert {:sourceloc} {:sourceloc_num 50} true;
  $$block0[BV32_ADD(BV32_MUL(v2, 4), 3)] := v24;
  assert {:sourceloc} {:sourceloc_num 51} true;
  v25 := $$block0[BV32_MUL(v2, 4)];
  assert {:sourceloc} {:sourceloc_num 52} true;
  v26 := $$block0[BV32_ADD(BV32_MUL(v2, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 53} true;
  v27 := $$block0[BV32_ADD(BV32_MUL(v2, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 54} true;
  v28 := $$block0[BV32_ADD(BV32_MUL(v2, 4), 3)];
  $tempValue.i.0, $i.i.0 := BV_CONCAT(BV_CONCAT(BV_CONCAT(v28, v27), v26), v25), 0;
  goto $3;
$3:
  assert {:block_sourceloc} {:sourceloc_num 55} true;
  v29 := BV32_ULT($i.i.0, v0);
  goto $truebb0, $falsebb0;
$4:
  assert {:block_sourceloc} {:sourceloc_num 56} true;
  $tempValue.i.0, $i.i.0 := BV_CONCAT(BV_CONCAT(BV_CONCAT(BV_EXTRACT($tempValue.i.0, 8, 0), BV_EXTRACT($tempValue.i.0, 32, 24)), BV_EXTRACT($tempValue.i.0, 24, 16)), BV_EXTRACT($tempValue.i.0, 16, 8)), BV32_ADD($i.i.0, 1);
  goto $3;
$shiftRows.exit:
  assert {:block_sourceloc} {:sourceloc_num 57} true;
  assert {:sourceloc} {:sourceloc_num 58} true;
  $$block0[BV32_MUL(v2, 4)] := BV_EXTRACT($tempValue.i.0, 8, 0);
  assert {:sourceloc} {:sourceloc_num 59} true;
  $$block0[BV32_ADD(BV32_MUL(v2, 4), 1)] := BV_EXTRACT($tempValue.i.0, 16, 8);
  assert {:sourceloc} {:sourceloc_num 60} true;
  $$block0[BV32_ADD(BV32_MUL(v2, 4), 2)] := BV_EXTRACT($tempValue.i.0, 24, 16);
  assert {:sourceloc} {:sourceloc_num 61} true;
  $$block0[BV32_ADD(BV32_MUL(v2, 4), 3)] := BV_EXTRACT($tempValue.i.0, 32, 24);
  call {:sourceloc_num 62} $bugle_barrier(-1, 0);
  v30 := BV32_SUB(v2, BV32_MUL(v1, v0));
  assert {:sourceloc} {:sourceloc_num 63} true;
  v31 := $$block0[BV32_MUL(v30, 4)];
  assert {:sourceloc} {:sourceloc_num 64} true;
  v32 := $$block0[BV32_ADD(BV32_MUL(v30, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 65} true;
  v33 := $$block0[BV32_ADD(BV32_MUL(v30, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 66} true;
  v34 := $$block0[BV32_ADD(BV32_MUL(v30, 4), 3)];
  assert {:sourceloc} {:sourceloc_num 67} true;
  v35 := $$galiosCoeff[BV32_MUL(BV32_UREM(BV32_SUB(4, v0), 4), 4)];
  assert {:sourceloc} {:sourceloc_num 68} true;
  v36 := $$galiosCoeff[BV32_ADD(BV32_MUL(BV32_UREM(BV32_SUB(4, v0), 4), 4), 1)];
  assert {:sourceloc} {:sourceloc_num 69} true;
  v37 := $$galiosCoeff[BV32_ADD(BV32_MUL(BV32_UREM(BV32_SUB(4, v0), 4), 4), 2)];
  assert {:sourceloc} {:sourceloc_num 70} true;
  v38 := $$galiosCoeff[BV32_ADD(BV32_MUL(BV32_UREM(BV32_SUB(4, v0), 4), 4), 3)];
  $.021, $.017, $p.i.i.0, $i.i.i.0 := v31, v35, 0, 0;
  goto $5;
$5:
  assert {:block_sourceloc} {:sourceloc_num 71} true;
  v39 := BV32_ULT($i.i.i.0, 8);
  goto $truebb1, $falsebb1;
$6:
  assert {:block_sourceloc} {:sourceloc_num 72} true;
  v40 := BV32_AND(BV8_ZEXT32($.017), 1) == 1;
  goto $truebb2, $falsebb2;
$7:
  assert {:block_sourceloc} {:sourceloc_num 73} true;
  $p.i.i.1 := BV_EXTRACT(BV32_XOR(BV8_ZEXT32($p.i.i.0), BV8_ZEXT32($.021)), 8, 0);
  goto $8;
$8:
  assert {:block_sourceloc} {:sourceloc_num 74} true;
  v41 := BV_EXTRACT(BV32_SHL(BV8_ZEXT32($.021), 1), 8, 0);
  v42 := BV8_ZEXT32(BV_EXTRACT(BV32_AND(BV8_ZEXT32($.021), 128), 8, 0)) == 128;
  goto $truebb3, $falsebb3;
$9:
  assert {:block_sourceloc} {:sourceloc_num 75} true;
  $.122 := BV_EXTRACT(BV32_XOR(BV8_ZEXT32(v41), 27), 8, 0);
  goto $10;
$10:
  assert {:block_sourceloc} {:sourceloc_num 76} true;
  $.021, $.017, $p.i.i.0, $i.i.i.0 := $.122, BV_EXTRACT(BV32_ASHR(BV8_ZEXT32($.017), 1), 8, 0), $p.i.i.1, BV32_ADD($i.i.i.0, 1);
  goto $5;
$galoisMultiplication.exit.i:
  assert {:block_sourceloc} {:sourceloc_num 77} true;
  assert {:sourceloc} {:sourceloc_num 78} true;
  v43 := $$block0[BV32_MUL(v30, 4)];
  assert {:sourceloc} {:sourceloc_num 79} true;
  v44 := $$block0[BV32_ADD(BV32_MUL(v30, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 80} true;
  v45 := $$block0[BV32_ADD(BV32_MUL(v30, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 81} true;
  v46 := $$block0[BV32_ADD(BV32_MUL(v30, 4), 3)];
  assert {:sourceloc} {:sourceloc_num 82} true;
  v47 := $$galiosCoeff[BV32_MUL(BV32_UREM(BV32_SUB(4, v0), 4), 4)];
  assert {:sourceloc} {:sourceloc_num 83} true;
  v48 := $$galiosCoeff[BV32_ADD(BV32_MUL(BV32_UREM(BV32_SUB(4, v0), 4), 4), 1)];
  assert {:sourceloc} {:sourceloc_num 84} true;
  v49 := $$galiosCoeff[BV32_ADD(BV32_MUL(BV32_UREM(BV32_SUB(4, v0), 4), 4), 2)];
  assert {:sourceloc} {:sourceloc_num 85} true;
  v50 := $$galiosCoeff[BV32_ADD(BV32_MUL(BV32_UREM(BV32_SUB(4, v0), 4), 4), 3)];
  $i.i26.i.0, $p.i25.i.0, $.01, $.0 := 0, 0, v47, v44;
  goto $11;
$11:
  assert {:block_sourceloc} {:sourceloc_num 86} true;
  v51 := BV32_ULT($i.i26.i.0, 8);
  goto $truebb4, $falsebb4;
$12:
  assert {:block_sourceloc} {:sourceloc_num 87} true;
  v52 := BV32_AND(BV8_ZEXT32($.01), 1) == 1;
  goto $truebb5, $falsebb5;
$13:
  assert {:block_sourceloc} {:sourceloc_num 88} true;
  $p.i25.i.1 := BV_EXTRACT(BV32_XOR(BV8_ZEXT32($p.i25.i.0), BV8_ZEXT32($.0)), 8, 0);
  goto $14;
$14:
  assert {:block_sourceloc} {:sourceloc_num 89} true;
  v53 := BV_EXTRACT(BV32_SHL(BV8_ZEXT32($.0), 1), 8, 0);
  v54 := BV8_ZEXT32(BV_EXTRACT(BV32_AND(BV8_ZEXT32($.0), 128), 8, 0)) == 128;
  goto $truebb6, $falsebb6;
$15:
  assert {:block_sourceloc} {:sourceloc_num 90} true;
  $.1 := BV_EXTRACT(BV32_XOR(BV8_ZEXT32(v53), 27), 8, 0);
  goto $16;
$16:
  assert {:block_sourceloc} {:sourceloc_num 91} true;
  $i.i26.i.0, $p.i25.i.0, $.01, $.0 := BV32_ADD($i.i26.i.0, 1), $p.i25.i.1, BV_EXTRACT(BV32_ASHR(BV8_ZEXT32($.01), 1), 8, 0), $.1;
  goto $11;
$galoisMultiplication.exit28.i:
  assert {:block_sourceloc} {:sourceloc_num 92} true;
  assert {:sourceloc} {:sourceloc_num 93} true;
  v55 := $$block0[BV32_MUL(v30, 4)];
  assert {:sourceloc} {:sourceloc_num 94} true;
  v56 := $$block0[BV32_ADD(BV32_MUL(v30, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 95} true;
  v57 := $$block0[BV32_ADD(BV32_MUL(v30, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 96} true;
  v58 := $$block0[BV32_ADD(BV32_MUL(v30, 4), 3)];
  assert {:sourceloc} {:sourceloc_num 97} true;
  v59 := $$galiosCoeff[BV32_MUL(BV32_UREM(BV32_SUB(4, v0), 4), 4)];
  assert {:sourceloc} {:sourceloc_num 98} true;
  v60 := $$galiosCoeff[BV32_ADD(BV32_MUL(BV32_UREM(BV32_SUB(4, v0), 4), 4), 1)];
  assert {:sourceloc} {:sourceloc_num 99} true;
  v61 := $$galiosCoeff[BV32_ADD(BV32_MUL(BV32_UREM(BV32_SUB(4, v0), 4), 4), 2)];
  assert {:sourceloc} {:sourceloc_num 100} true;
  v62 := $$galiosCoeff[BV32_ADD(BV32_MUL(BV32_UREM(BV32_SUB(4, v0), 4), 4), 3)];
  $i.i22.i.0, $p.i21.i.0, $.04, $.02 := 0, 0, v59, v57;
  goto $17;
$17:
  assert {:block_sourceloc} {:sourceloc_num 101} true;
  v63 := BV32_ULT($i.i22.i.0, 8);
  goto $truebb7, $falsebb7;
$18:
  assert {:block_sourceloc} {:sourceloc_num 102} true;
  v64 := BV32_AND(BV8_ZEXT32($.04), 1) == 1;
  goto $truebb8, $falsebb8;
$19:
  assert {:block_sourceloc} {:sourceloc_num 103} true;
  $p.i21.i.1 := BV_EXTRACT(BV32_XOR(BV8_ZEXT32($p.i21.i.0), BV8_ZEXT32($.02)), 8, 0);
  goto $20;
$20:
  assert {:block_sourceloc} {:sourceloc_num 104} true;
  v65 := BV_EXTRACT(BV32_SHL(BV8_ZEXT32($.02), 1), 8, 0);
  v66 := BV8_ZEXT32(BV_EXTRACT(BV32_AND(BV8_ZEXT32($.02), 128), 8, 0)) == 128;
  goto $truebb9, $falsebb9;
$21:
  assert {:block_sourceloc} {:sourceloc_num 105} true;
  $.13 := BV_EXTRACT(BV32_XOR(BV8_ZEXT32(v65), 27), 8, 0);
  goto $22;
$22:
  assert {:block_sourceloc} {:sourceloc_num 106} true;
  $i.i22.i.0, $p.i21.i.0, $.04, $.02 := BV32_ADD($i.i22.i.0, 1), $p.i21.i.1, BV_EXTRACT(BV32_ASHR(BV8_ZEXT32($.04), 1), 8, 0), $.13;
  goto $17;
$galoisMultiplication.exit24.i:
  assert {:block_sourceloc} {:sourceloc_num 107} true;
  assert {:sourceloc} {:sourceloc_num 108} true;
  v67 := $$block0[BV32_MUL(v30, 4)];
  assert {:sourceloc} {:sourceloc_num 109} true;
  v68 := $$block0[BV32_ADD(BV32_MUL(v30, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 110} true;
  v69 := $$block0[BV32_ADD(BV32_MUL(v30, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 111} true;
  v70 := $$block0[BV32_ADD(BV32_MUL(v30, 4), 3)];
  assert {:sourceloc} {:sourceloc_num 112} true;
  v71 := $$galiosCoeff[BV32_MUL(BV32_UREM(BV32_SUB(4, v0), 4), 4)];
  assert {:sourceloc} {:sourceloc_num 113} true;
  v72 := $$galiosCoeff[BV32_ADD(BV32_MUL(BV32_UREM(BV32_SUB(4, v0), 4), 4), 1)];
  assert {:sourceloc} {:sourceloc_num 114} true;
  v73 := $$galiosCoeff[BV32_ADD(BV32_MUL(BV32_UREM(BV32_SUB(4, v0), 4), 4), 2)];
  assert {:sourceloc} {:sourceloc_num 115} true;
  v74 := $$galiosCoeff[BV32_ADD(BV32_MUL(BV32_UREM(BV32_SUB(4, v0), 4), 4), 3)];
  $i.i18.i.0, $p.i17.i.0, $.07, $.05 := 0, 0, v71, v70;
  goto $23;
$23:
  assert {:block_sourceloc} {:sourceloc_num 116} true;
  v75 := BV32_ULT($i.i18.i.0, 8);
  goto $truebb10, $falsebb10;
$24:
  assert {:block_sourceloc} {:sourceloc_num 117} true;
  v76 := BV32_AND(BV8_ZEXT32($.07), 1) == 1;
  goto $truebb11, $falsebb11;
$25:
  assert {:block_sourceloc} {:sourceloc_num 118} true;
  $p.i17.i.1 := BV_EXTRACT(BV32_XOR(BV8_ZEXT32($p.i17.i.0), BV8_ZEXT32($.05)), 8, 0);
  goto $26;
$26:
  assert {:block_sourceloc} {:sourceloc_num 119} true;
  v77 := BV_EXTRACT(BV32_SHL(BV8_ZEXT32($.05), 1), 8, 0);
  v78 := BV8_ZEXT32(BV_EXTRACT(BV32_AND(BV8_ZEXT32($.05), 128), 8, 0)) == 128;
  goto $truebb12, $falsebb12;
$27:
  assert {:block_sourceloc} {:sourceloc_num 120} true;
  $.16 := BV_EXTRACT(BV32_XOR(BV8_ZEXT32(v77), 27), 8, 0);
  goto $28;
$28:
  assert {:block_sourceloc} {:sourceloc_num 121} true;
  $i.i18.i.0, $p.i17.i.0, $.07, $.05 := BV32_ADD($i.i18.i.0, 1), $p.i17.i.1, BV_EXTRACT(BV32_ASHR(BV8_ZEXT32($.07), 1), 8, 0), $.16;
  goto $23;
$galoisMultiplication.exit20.i:
  assert {:block_sourceloc} {:sourceloc_num 122} true;
  $x.i.0, $y.i.0, $z.i.0, $w.i.0, $k.i.0 := $p.i.i.0, $p.i25.i.0, $p.i21.i.0, $p.i17.i.0, 1;
  goto $29;
$29:
  assert {:block_sourceloc} {:sourceloc_num 123} true;
  v79 := BV32_ULT($k.i.0, 4);
  goto $truebb13, $falsebb13;
$30:
  assert {:block_sourceloc} {:sourceloc_num 124} true;
  assert {:sourceloc} {:sourceloc_num 125} true;
  v80 := $$block0[BV32_MUL(BV32_ADD(BV32_MUL($k.i.0, v1), v30), 4)];
  assert {:sourceloc} {:sourceloc_num 126} true;
  v81 := $$block0[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL($k.i.0, v1), v30), 4), 1)];
  assert {:sourceloc} {:sourceloc_num 127} true;
  v82 := $$block0[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL($k.i.0, v1), v30), 4), 2)];
  assert {:sourceloc} {:sourceloc_num 128} true;
  v83 := $$block0[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL($k.i.0, v1), v30), 4), 3)];
  assert {:sourceloc} {:sourceloc_num 129} true;
  v84 := $$galiosCoeff[BV32_MUL(BV32_UREM(BV32_SUB(BV32_ADD($k.i.0, 4), v0), 4), 4)];
  assert {:sourceloc} {:sourceloc_num 130} true;
  v85 := $$galiosCoeff[BV32_ADD(BV32_MUL(BV32_UREM(BV32_SUB(BV32_ADD($k.i.0, 4), v0), 4), 4), 1)];
  assert {:sourceloc} {:sourceloc_num 131} true;
  v86 := $$galiosCoeff[BV32_ADD(BV32_MUL(BV32_UREM(BV32_SUB(BV32_ADD($k.i.0, 4), v0), 4), 4), 2)];
  assert {:sourceloc} {:sourceloc_num 132} true;
  v87 := $$galiosCoeff[BV32_ADD(BV32_MUL(BV32_UREM(BV32_SUB(BV32_ADD($k.i.0, 4), v0), 4), 4), 3)];
  $i.i14.i.0, $p.i13.i.0, $.010, $.08 := 0, 0, v84, v80;
  goto $31;
$31:
  assert {:block_sourceloc} {:sourceloc_num 133} true;
  v88 := BV32_ULT($i.i14.i.0, 8);
  goto $truebb14, $falsebb14;
$32:
  assert {:block_sourceloc} {:sourceloc_num 134} true;
  v89 := BV32_AND(BV8_ZEXT32($.010), 1) == 1;
  goto $truebb15, $falsebb15;
$33:
  assert {:block_sourceloc} {:sourceloc_num 135} true;
  $p.i13.i.1 := BV_EXTRACT(BV32_XOR(BV8_ZEXT32($p.i13.i.0), BV8_ZEXT32($.08)), 8, 0);
  goto $34;
$34:
  assert {:block_sourceloc} {:sourceloc_num 136} true;
  v90 := BV_EXTRACT(BV32_SHL(BV8_ZEXT32($.08), 1), 8, 0);
  v91 := BV8_ZEXT32(BV_EXTRACT(BV32_AND(BV8_ZEXT32($.08), 128), 8, 0)) == 128;
  goto $truebb16, $falsebb16;
$35:
  assert {:block_sourceloc} {:sourceloc_num 137} true;
  $.19 := BV_EXTRACT(BV32_XOR(BV8_ZEXT32(v90), 27), 8, 0);
  goto $36;
$36:
  assert {:block_sourceloc} {:sourceloc_num 138} true;
  $i.i14.i.0, $p.i13.i.0, $.010, $.08 := BV32_ADD($i.i14.i.0, 1), $p.i13.i.1, BV_EXTRACT(BV32_ASHR(BV8_ZEXT32($.010), 1), 8, 0), $.19;
  goto $31;
$galoisMultiplication.exit16.i:
  assert {:block_sourceloc} {:sourceloc_num 139} true;
  assert {:sourceloc} {:sourceloc_num 140} true;
  v92 := $$block0[BV32_MUL(BV32_ADD(BV32_MUL($k.i.0, v1), v30), 4)];
  assert {:sourceloc} {:sourceloc_num 141} true;
  v93 := $$block0[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL($k.i.0, v1), v30), 4), 1)];
  assert {:sourceloc} {:sourceloc_num 142} true;
  v94 := $$block0[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL($k.i.0, v1), v30), 4), 2)];
  assert {:sourceloc} {:sourceloc_num 143} true;
  v95 := $$block0[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL($k.i.0, v1), v30), 4), 3)];
  assert {:sourceloc} {:sourceloc_num 144} true;
  v96 := $$galiosCoeff[BV32_MUL(BV32_UREM(BV32_SUB(BV32_ADD($k.i.0, 4), v0), 4), 4)];
  assert {:sourceloc} {:sourceloc_num 145} true;
  v97 := $$galiosCoeff[BV32_ADD(BV32_MUL(BV32_UREM(BV32_SUB(BV32_ADD($k.i.0, 4), v0), 4), 4), 1)];
  assert {:sourceloc} {:sourceloc_num 146} true;
  v98 := $$galiosCoeff[BV32_ADD(BV32_MUL(BV32_UREM(BV32_SUB(BV32_ADD($k.i.0, 4), v0), 4), 4), 2)];
  assert {:sourceloc} {:sourceloc_num 147} true;
  v99 := $$galiosCoeff[BV32_ADD(BV32_MUL(BV32_UREM(BV32_SUB(BV32_ADD($k.i.0, 4), v0), 4), 4), 3)];
  $i.i10.i.0, $p.i9.i.0, $.013, $.011 := 0, 0, v96, v93;
  goto $37;
$37:
  assert {:block_sourceloc} {:sourceloc_num 148} true;
  v100 := BV32_ULT($i.i10.i.0, 8);
  goto $truebb17, $falsebb17;
$38:
  assert {:block_sourceloc} {:sourceloc_num 149} true;
  v101 := BV32_AND(BV8_ZEXT32($.013), 1) == 1;
  goto $truebb18, $falsebb18;
$39:
  assert {:block_sourceloc} {:sourceloc_num 150} true;
  $p.i9.i.1 := BV_EXTRACT(BV32_XOR(BV8_ZEXT32($p.i9.i.0), BV8_ZEXT32($.011)), 8, 0);
  goto $40;
$40:
  assert {:block_sourceloc} {:sourceloc_num 151} true;
  v102 := BV_EXTRACT(BV32_SHL(BV8_ZEXT32($.011), 1), 8, 0);
  v103 := BV8_ZEXT32(BV_EXTRACT(BV32_AND(BV8_ZEXT32($.011), 128), 8, 0)) == 128;
  goto $truebb19, $falsebb19;
$41:
  assert {:block_sourceloc} {:sourceloc_num 152} true;
  $.112 := BV_EXTRACT(BV32_XOR(BV8_ZEXT32(v102), 27), 8, 0);
  goto $42;
$42:
  assert {:block_sourceloc} {:sourceloc_num 153} true;
  $i.i10.i.0, $p.i9.i.0, $.013, $.011 := BV32_ADD($i.i10.i.0, 1), $p.i9.i.1, BV_EXTRACT(BV32_ASHR(BV8_ZEXT32($.013), 1), 8, 0), $.112;
  goto $37;
$galoisMultiplication.exit12.i:
  assert {:block_sourceloc} {:sourceloc_num 154} true;
  assert {:sourceloc} {:sourceloc_num 155} true;
  v104 := $$block0[BV32_MUL(BV32_ADD(BV32_MUL($k.i.0, v1), v30), 4)];
  assert {:sourceloc} {:sourceloc_num 156} true;
  v105 := $$block0[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL($k.i.0, v1), v30), 4), 1)];
  assert {:sourceloc} {:sourceloc_num 157} true;
  v106 := $$block0[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL($k.i.0, v1), v30), 4), 2)];
  assert {:sourceloc} {:sourceloc_num 158} true;
  v107 := $$block0[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL($k.i.0, v1), v30), 4), 3)];
  assert {:sourceloc} {:sourceloc_num 159} true;
  v108 := $$galiosCoeff[BV32_MUL(BV32_UREM(BV32_SUB(BV32_ADD($k.i.0, 4), v0), 4), 4)];
  assert {:sourceloc} {:sourceloc_num 160} true;
  v109 := $$galiosCoeff[BV32_ADD(BV32_MUL(BV32_UREM(BV32_SUB(BV32_ADD($k.i.0, 4), v0), 4), 4), 1)];
  assert {:sourceloc} {:sourceloc_num 161} true;
  v110 := $$galiosCoeff[BV32_ADD(BV32_MUL(BV32_UREM(BV32_SUB(BV32_ADD($k.i.0, 4), v0), 4), 4), 2)];
  assert {:sourceloc} {:sourceloc_num 162} true;
  v111 := $$galiosCoeff[BV32_ADD(BV32_MUL(BV32_UREM(BV32_SUB(BV32_ADD($k.i.0, 4), v0), 4), 4), 3)];
  $i.i6.i.0, $p.i5.i.0, $.016, $.014 := 0, 0, v108, v106;
  goto $43;
$43:
  assert {:block_sourceloc} {:sourceloc_num 163} true;
  v112 := BV32_ULT($i.i6.i.0, 8);
  goto $truebb20, $falsebb20;
$44:
  assert {:block_sourceloc} {:sourceloc_num 164} true;
  v113 := BV32_AND(BV8_ZEXT32($.016), 1) == 1;
  goto $truebb21, $falsebb21;
$45:
  assert {:block_sourceloc} {:sourceloc_num 165} true;
  $p.i5.i.1 := BV_EXTRACT(BV32_XOR(BV8_ZEXT32($p.i5.i.0), BV8_ZEXT32($.014)), 8, 0);
  goto $46;
$46:
  assert {:block_sourceloc} {:sourceloc_num 166} true;
  v114 := BV_EXTRACT(BV32_SHL(BV8_ZEXT32($.014), 1), 8, 0);
  v115 := BV8_ZEXT32(BV_EXTRACT(BV32_AND(BV8_ZEXT32($.014), 128), 8, 0)) == 128;
  goto $truebb22, $falsebb22;
$47:
  assert {:block_sourceloc} {:sourceloc_num 167} true;
  $.115 := BV_EXTRACT(BV32_XOR(BV8_ZEXT32(v114), 27), 8, 0);
  goto $48;
$48:
  assert {:block_sourceloc} {:sourceloc_num 168} true;
  $i.i6.i.0, $p.i5.i.0, $.016, $.014 := BV32_ADD($i.i6.i.0, 1), $p.i5.i.1, BV_EXTRACT(BV32_ASHR(BV8_ZEXT32($.016), 1), 8, 0), $.115;
  goto $43;
$galoisMultiplication.exit8.i:
  assert {:block_sourceloc} {:sourceloc_num 169} true;
  assert {:sourceloc} {:sourceloc_num 170} true;
  v116 := $$block0[BV32_MUL(BV32_ADD(BV32_MUL($k.i.0, v1), v30), 4)];
  assert {:sourceloc} {:sourceloc_num 171} true;
  v117 := $$block0[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL($k.i.0, v1), v30), 4), 1)];
  assert {:sourceloc} {:sourceloc_num 172} true;
  v118 := $$block0[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL($k.i.0, v1), v30), 4), 2)];
  assert {:sourceloc} {:sourceloc_num 173} true;
  v119 := $$block0[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL($k.i.0, v1), v30), 4), 3)];
  assert {:sourceloc} {:sourceloc_num 174} true;
  v120 := $$galiosCoeff[BV32_MUL(BV32_UREM(BV32_SUB(BV32_ADD($k.i.0, 4), v0), 4), 4)];
  assert {:sourceloc} {:sourceloc_num 175} true;
  v121 := $$galiosCoeff[BV32_ADD(BV32_MUL(BV32_UREM(BV32_SUB(BV32_ADD($k.i.0, 4), v0), 4), 4), 1)];
  assert {:sourceloc} {:sourceloc_num 176} true;
  v122 := $$galiosCoeff[BV32_ADD(BV32_MUL(BV32_UREM(BV32_SUB(BV32_ADD($k.i.0, 4), v0), 4), 4), 2)];
  assert {:sourceloc} {:sourceloc_num 177} true;
  v123 := $$galiosCoeff[BV32_ADD(BV32_MUL(BV32_UREM(BV32_SUB(BV32_ADD($k.i.0, 4), v0), 4), 4), 3)];
  $i.i2.i.0, $p.i1.i.0, $.020, $.018 := 0, 0, v120, v119;
  goto $49;
$49:
  assert {:block_sourceloc} {:sourceloc_num 178} true;
  v124 := BV32_ULT($i.i2.i.0, 8);
  goto $truebb23, $falsebb23;
$50:
  assert {:block_sourceloc} {:sourceloc_num 179} true;
  v125 := BV32_AND(BV8_ZEXT32($.020), 1) == 1;
  goto $truebb24, $falsebb24;
$51:
  assert {:block_sourceloc} {:sourceloc_num 180} true;
  $p.i1.i.1 := BV_EXTRACT(BV32_XOR(BV8_ZEXT32($p.i1.i.0), BV8_ZEXT32($.018)), 8, 0);
  goto $52;
$52:
  assert {:block_sourceloc} {:sourceloc_num 181} true;
  v126 := BV_EXTRACT(BV32_SHL(BV8_ZEXT32($.018), 1), 8, 0);
  v127 := BV8_ZEXT32(BV_EXTRACT(BV32_AND(BV8_ZEXT32($.018), 128), 8, 0)) == 128;
  goto $truebb25, $falsebb25;
$53:
  assert {:block_sourceloc} {:sourceloc_num 182} true;
  $.119 := BV_EXTRACT(BV32_XOR(BV8_ZEXT32(v126), 27), 8, 0);
  goto $54;
$54:
  assert {:block_sourceloc} {:sourceloc_num 183} true;
  $i.i2.i.0, $p.i1.i.0, $.020, $.018 := BV32_ADD($i.i2.i.0, 1), $p.i1.i.1, BV_EXTRACT(BV32_ASHR(BV8_ZEXT32($.020), 1), 8, 0), $.119;
  goto $49;
$galoisMultiplication.exit4.i:
  assert {:block_sourceloc} {:sourceloc_num 184} true;
  $x.i.0, $y.i.0, $z.i.0, $w.i.0, $k.i.0 := BV_EXTRACT(BV32_XOR(BV8_ZEXT32($x.i.0), BV8_ZEXT32($p.i13.i.0)), 8, 0), BV_EXTRACT(BV32_XOR(BV8_ZEXT32($y.i.0), BV8_ZEXT32($p.i9.i.0)), 8, 0), BV_EXTRACT(BV32_XOR(BV8_ZEXT32($z.i.0), BV8_ZEXT32($p.i5.i.0)), 8, 0), BV_EXTRACT(BV32_XOR(BV8_ZEXT32($w.i.0), BV8_ZEXT32($p.i1.i.0)), 8, 0), BV32_ADD($k.i.0, 1);
  goto $29;
$mixColumns.exit:
  assert {:block_sourceloc} {:sourceloc_num 185} true;
  assert {:sourceloc} {:sourceloc_num 186} true;
  $$block1[BV32_MUL(v2, 4)] := $x.i.0;
  assert {:sourceloc} {:sourceloc_num 187} true;
  $$block1[BV32_ADD(BV32_MUL(v2, 4), 1)] := $y.i.0;
  assert {:sourceloc} {:sourceloc_num 188} true;
  $$block1[BV32_ADD(BV32_MUL(v2, 4), 2)] := $z.i.0;
  assert {:sourceloc} {:sourceloc_num 189} true;
  $$block1[BV32_ADD(BV32_MUL(v2, 4), 3)] := $w.i.0;
  call {:sourceloc_num 190} $bugle_barrier(-1, 0);
  assert {:sourceloc} {:sourceloc_num 191} true;
  v128 := $$block1[BV32_MUL(v2, 4)];
  assert {:sourceloc} {:sourceloc_num 192} true;
  v129 := $$block1[BV32_ADD(BV32_MUL(v2, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 193} true;
  v130 := $$block1[BV32_ADD(BV32_MUL(v2, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 194} true;
  v131 := $$block1[BV32_ADD(BV32_MUL(v2, 4), 3)];
  assert {:sourceloc} {:sourceloc_num 195} true;
  v132 := $$roundKey[BV32_MUL(BV32_ADD(BV32_MUL($i.0, 4), v0), 4)];
  assert {:sourceloc} {:sourceloc_num 196} true;
  v133 := $$roundKey[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL($i.0, 4), v0), 4), 1)];
  assert {:sourceloc} {:sourceloc_num 197} true;
  v134 := $$roundKey[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL($i.0, 4), v0), 4), 2)];
  assert {:sourceloc} {:sourceloc_num 198} true;
  v135 := $$roundKey[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL($i.0, 4), v0), 4), 3)];
  assert {:sourceloc} {:sourceloc_num 199} true;
  $$block0[BV32_MUL(v2, 4)] := BV8_XOR(v128, v132);
  assert {:sourceloc} {:sourceloc_num 200} true;
  $$block0[BV32_ADD(BV32_MUL(v2, 4), 1)] := BV8_XOR(v129, v133);
  assert {:sourceloc} {:sourceloc_num 201} true;
  $$block0[BV32_ADD(BV32_MUL(v2, 4), 2)] := BV8_XOR(v130, v134);
  assert {:sourceloc} {:sourceloc_num 202} true;
  $$block0[BV32_ADD(BV32_MUL(v2, 4), 3)] := BV8_XOR(v131, v135);
  goto $55;
$55:
  assert {:block_sourceloc} {:sourceloc_num 203} true;
  $i.0 := BV32_ADD($i.0, 1);
  goto $1;
$56:
  assert {:block_sourceloc} {:sourceloc_num 204} true;
  assert {:sourceloc} {:sourceloc_num 205} true;
  v136 := $$block0[BV32_MUL(v2, 4)];
  assert {:sourceloc} {:sourceloc_num 206} true;
  v137 := $$block0[BV32_ADD(BV32_MUL(v2, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 207} true;
  v138 := $$block0[BV32_ADD(BV32_MUL(v2, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 208} true;
  v139 := $$block0[BV32_ADD(BV32_MUL(v2, 4), 3)];
  assert {:sourceloc} {:sourceloc_num 209} true;
  v140 := $$SBox[BV8_ZEXT32(v136)];
  assert {:sourceloc} {:sourceloc_num 210} true;
  v141 := $$SBox[BV8_ZEXT32(v137)];
  assert {:sourceloc} {:sourceloc_num 211} true;
  v142 := $$SBox[BV8_ZEXT32(v138)];
  assert {:sourceloc} {:sourceloc_num 212} true;
  v143 := $$SBox[BV8_ZEXT32(v139)];
  assert {:sourceloc} {:sourceloc_num 213} true;
  $$block0[BV32_MUL(v2, 4)] := v140;
  assert {:sourceloc} {:sourceloc_num 214} true;
  $$block0[BV32_ADD(BV32_MUL(v2, 4), 1)] := v141;
  assert {:sourceloc} {:sourceloc_num 215} true;
  $$block0[BV32_ADD(BV32_MUL(v2, 4), 2)] := v142;
  assert {:sourceloc} {:sourceloc_num 216} true;
  $$block0[BV32_ADD(BV32_MUL(v2, 4), 3)] := v143;
  assert {:sourceloc} {:sourceloc_num 217} true;
  v144 := $$block0[BV32_MUL(v2, 4)];
  assert {:sourceloc} {:sourceloc_num 218} true;
  v145 := $$block0[BV32_ADD(BV32_MUL(v2, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 219} true;
  v146 := $$block0[BV32_ADD(BV32_MUL(v2, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 220} true;
  v147 := $$block0[BV32_ADD(BV32_MUL(v2, 4), 3)];
  $i.i2.0, $tempValue.i1.0 := 0, BV_CONCAT(BV_CONCAT(BV_CONCAT(v147, v146), v145), v144);
  goto $57;
$57:
  assert {:block_sourceloc} {:sourceloc_num 221} true;
  v148 := BV32_ULT($i.i2.0, v0);
  goto $truebb26, $falsebb26;
$58:
  assert {:block_sourceloc} {:sourceloc_num 222} true;
  $i.i2.0, $tempValue.i1.0 := BV32_ADD($i.i2.0, 1), BV_CONCAT(BV_CONCAT(BV_CONCAT(BV_EXTRACT($tempValue.i1.0, 8, 0), BV_EXTRACT($tempValue.i1.0, 32, 24)), BV_EXTRACT($tempValue.i1.0, 24, 16)), BV_EXTRACT($tempValue.i1.0, 16, 8));
  goto $57;
$shiftRows.exit3:
  assert {:block_sourceloc} {:sourceloc_num 223} true;
  assert {:sourceloc} {:sourceloc_num 224} true;
  $$block0[BV32_MUL(v2, 4)] := BV_EXTRACT($tempValue.i1.0, 8, 0);
  assert {:sourceloc} {:sourceloc_num 225} true;
  $$block0[BV32_ADD(BV32_MUL(v2, 4), 1)] := BV_EXTRACT($tempValue.i1.0, 16, 8);
  assert {:sourceloc} {:sourceloc_num 226} true;
  $$block0[BV32_ADD(BV32_MUL(v2, 4), 2)] := BV_EXTRACT($tempValue.i1.0, 24, 16);
  assert {:sourceloc} {:sourceloc_num 227} true;
  $$block0[BV32_ADD(BV32_MUL(v2, 4), 3)] := BV_EXTRACT($tempValue.i1.0, 32, 24);
  assert {:sourceloc} {:sourceloc_num 228} true;
  v149 := $$roundKey[BV32_MUL(BV32_ADD(v0, BV32_MUL($rounds, 4)), 4)];
  assert {:sourceloc} {:sourceloc_num 229} true;
  v150 := $$roundKey[BV32_ADD(BV32_MUL(BV32_ADD(v0, BV32_MUL($rounds, 4)), 4), 1)];
  assert {:sourceloc} {:sourceloc_num 230} true;
  v151 := $$roundKey[BV32_ADD(BV32_MUL(BV32_ADD(v0, BV32_MUL($rounds, 4)), 4), 2)];
  assert {:sourceloc} {:sourceloc_num 231} true;
  v152 := $$roundKey[BV32_ADD(BV32_MUL(BV32_ADD(v0, BV32_MUL($rounds, 4)), 4), 3)];
  assert {:sourceloc} {:sourceloc_num 232} true;
  v153 := $$block0[BV32_MUL(v2, 4)];
  assert {:sourceloc} {:sourceloc_num 233} true;
  v154 := $$block0[BV32_ADD(BV32_MUL(v2, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 234} true;
  v155 := $$block0[BV32_ADD(BV32_MUL(v2, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 235} true;
  v156 := $$block0[BV32_ADD(BV32_MUL(v2, 4), 3)];
  assert {:sourceloc} {:sourceloc_num 236} true;
  $$block0[BV32_MUL(v2, 4)] := BV8_XOR(v153, v149);
  assert {:sourceloc} {:sourceloc_num 237} true;
  $$block0[BV32_ADD(BV32_MUL(v2, 4), 1)] := BV8_XOR(v154, v150);
  assert {:sourceloc} {:sourceloc_num 238} true;
  $$block0[BV32_ADD(BV32_MUL(v2, 4), 2)] := BV8_XOR(v155, v151);
  assert {:sourceloc} {:sourceloc_num 239} true;
  $$block0[BV32_ADD(BV32_MUL(v2, 4), 3)] := BV8_XOR(v156, v152);
  assert {:sourceloc} {:sourceloc_num 240} true;
  v157 := $$block0[BV32_MUL(v2, 4)];
  assert {:sourceloc} {:sourceloc_num 241} true;
  v158 := $$block0[BV32_ADD(BV32_MUL(v2, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 242} true;
  v159 := $$block0[BV32_ADD(BV32_MUL(v2, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 243} true;
  v160 := $$block0[BV32_ADD(BV32_MUL(v2, 4), 3)];
  assert {:sourceloc} {:sourceloc_num 244} true;
  $$output[BV32_MUL(v3, 4)] := v157;
  assert {:sourceloc} {:sourceloc_num 245} true;
  $$output[BV32_ADD(BV32_MUL(v3, 4), 1)] := v158;
  assert {:sourceloc} {:sourceloc_num 246} true;
  $$output[BV32_ADD(BV32_MUL(v3, 4), 2)] := v159;
  assert {:sourceloc} {:sourceloc_num 247} true;
  $$output[BV32_ADD(BV32_MUL(v3, 4), 3)] := v160;
  return;
$truebb:
  assume {:partition} v16;
  assert {:block_sourceloc} {:sourceloc_num 248} true;
  goto $2;
$falsebb:
  assume {:partition} !v16;
  assert {:block_sourceloc} {:sourceloc_num 249} true;
  goto $56;
$truebb0:
  assume {:partition} v29;
  assert {:block_sourceloc} {:sourceloc_num 250} true;
  goto $4;
$falsebb0:
  assume {:partition} !v29;
  assert {:block_sourceloc} {:sourceloc_num 251} true;
  goto $shiftRows.exit;
$truebb1:
  assume {:partition} v39;
  assert {:block_sourceloc} {:sourceloc_num 252} true;
  goto $6;
$falsebb1:
  assume {:partition} !v39;
  assert {:block_sourceloc} {:sourceloc_num 253} true;
  goto $galoisMultiplication.exit.i;
$truebb2:
  assume {:partition} v40;
  assert {:block_sourceloc} {:sourceloc_num 254} true;
  goto $7;
$falsebb2:
  assume {:partition} !v40;
  assert {:block_sourceloc} {:sourceloc_num 255} true;
  $p.i.i.1 := $p.i.i.0;
  goto $8;
$truebb3:
  assume {:partition} v42;
  assert {:block_sourceloc} {:sourceloc_num 256} true;
  goto $9;
$falsebb3:
  assume {:partition} !v42;
  assert {:block_sourceloc} {:sourceloc_num 257} true;
  $.122 := v41;
  goto $10;
$truebb4:
  assume {:partition} v51;
  assert {:block_sourceloc} {:sourceloc_num 258} true;
  goto $12;
$falsebb4:
  assume {:partition} !v51;
  assert {:block_sourceloc} {:sourceloc_num 259} true;
  goto $galoisMultiplication.exit28.i;
$truebb5:
  assume {:partition} v52;
  assert {:block_sourceloc} {:sourceloc_num 260} true;
  goto $13;
$falsebb5:
  assume {:partition} !v52;
  assert {:block_sourceloc} {:sourceloc_num 261} true;
  $p.i25.i.1 := $p.i25.i.0;
  goto $14;
$truebb6:
  assume {:partition} v54;
  assert {:block_sourceloc} {:sourceloc_num 262} true;
  goto $15;
$falsebb6:
  assume {:partition} !v54;
  assert {:block_sourceloc} {:sourceloc_num 263} true;
  $.1 := v53;
  goto $16;
$truebb7:
  assume {:partition} v63;
  assert {:block_sourceloc} {:sourceloc_num 264} true;
  goto $18;
$falsebb7:
  assume {:partition} !v63;
  assert {:block_sourceloc} {:sourceloc_num 265} true;
  goto $galoisMultiplication.exit24.i;
$truebb8:
  assume {:partition} v64;
  assert {:block_sourceloc} {:sourceloc_num 266} true;
  goto $19;
$falsebb8:
  assume {:partition} !v64;
  assert {:block_sourceloc} {:sourceloc_num 267} true;
  $p.i21.i.1 := $p.i21.i.0;
  goto $20;
$truebb9:
  assume {:partition} v66;
  assert {:block_sourceloc} {:sourceloc_num 268} true;
  goto $21;
$falsebb9:
  assume {:partition} !v66;
  assert {:block_sourceloc} {:sourceloc_num 269} true;
  $.13 := v65;
  goto $22;
$truebb10:
  assume {:partition} v75;
  assert {:block_sourceloc} {:sourceloc_num 270} true;
  goto $24;
$falsebb10:
  assume {:partition} !v75;
  assert {:block_sourceloc} {:sourceloc_num 271} true;
  goto $galoisMultiplication.exit20.i;
$truebb11:
  assume {:partition} v76;
  assert {:block_sourceloc} {:sourceloc_num 272} true;
  goto $25;
$falsebb11:
  assume {:partition} !v76;
  assert {:block_sourceloc} {:sourceloc_num 273} true;
  $p.i17.i.1 := $p.i17.i.0;
  goto $26;
$truebb12:
  assume {:partition} v78;
  assert {:block_sourceloc} {:sourceloc_num 274} true;
  goto $27;
$falsebb12:
  assume {:partition} !v78;
  assert {:block_sourceloc} {:sourceloc_num 275} true;
  $.16 := v77;
  goto $28;
$truebb13:
  assume {:partition} v79;
  assert {:block_sourceloc} {:sourceloc_num 276} true;
  goto $30;
$falsebb13:
  assume {:partition} !v79;
  assert {:block_sourceloc} {:sourceloc_num 277} true;
  goto $mixColumns.exit;
$truebb14:
  assume {:partition} v88;
  assert {:block_sourceloc} {:sourceloc_num 278} true;
  goto $32;
$falsebb14:
  assume {:partition} !v88;
  assert {:block_sourceloc} {:sourceloc_num 279} true;
  goto $galoisMultiplication.exit16.i;
$truebb15:
  assume {:partition} v89;
  assert {:block_sourceloc} {:sourceloc_num 280} true;
  goto $33;
$falsebb15:
  assume {:partition} !v89;
  assert {:block_sourceloc} {:sourceloc_num 281} true;
  $p.i13.i.1 := $p.i13.i.0;
  goto $34;
$truebb16:
  assume {:partition} v91;
  assert {:block_sourceloc} {:sourceloc_num 282} true;
  goto $35;
$falsebb16:
  assume {:partition} !v91;
  assert {:block_sourceloc} {:sourceloc_num 283} true;
  $.19 := v90;
  goto $36;
$truebb17:
  assume {:partition} v100;
  assert {:block_sourceloc} {:sourceloc_num 284} true;
  goto $38;
$falsebb17:
  assume {:partition} !v100;
  assert {:block_sourceloc} {:sourceloc_num 285} true;
  goto $galoisMultiplication.exit12.i;
$truebb18:
  assume {:partition} v101;
  assert {:block_sourceloc} {:sourceloc_num 286} true;
  goto $39;
$falsebb18:
  assume {:partition} !v101;
  assert {:block_sourceloc} {:sourceloc_num 287} true;
  $p.i9.i.1 := $p.i9.i.0;
  goto $40;
$truebb19:
  assume {:partition} v103;
  assert {:block_sourceloc} {:sourceloc_num 288} true;
  goto $41;
$falsebb19:
  assume {:partition} !v103;
  assert {:block_sourceloc} {:sourceloc_num 289} true;
  $.112 := v102;
  goto $42;
$truebb20:
  assume {:partition} v112;
  assert {:block_sourceloc} {:sourceloc_num 290} true;
  goto $44;
$falsebb20:
  assume {:partition} !v112;
  assert {:block_sourceloc} {:sourceloc_num 291} true;
  goto $galoisMultiplication.exit8.i;
$truebb21:
  assume {:partition} v113;
  assert {:block_sourceloc} {:sourceloc_num 292} true;
  goto $45;
$falsebb21:
  assume {:partition} !v113;
  assert {:block_sourceloc} {:sourceloc_num 293} true;
  $p.i5.i.1 := $p.i5.i.0;
  goto $46;
$truebb22:
  assume {:partition} v115;
  assert {:block_sourceloc} {:sourceloc_num 294} true;
  goto $47;
$falsebb22:
  assume {:partition} !v115;
  assert {:block_sourceloc} {:sourceloc_num 295} true;
  $.115 := v114;
  goto $48;
$truebb23:
  assume {:partition} v124;
  assert {:block_sourceloc} {:sourceloc_num 296} true;
  goto $50;
$falsebb23:
  assume {:partition} !v124;
  assert {:block_sourceloc} {:sourceloc_num 297} true;
  goto $galoisMultiplication.exit4.i;
$truebb24:
  assume {:partition} v125;
  assert {:block_sourceloc} {:sourceloc_num 298} true;
  goto $51;
$falsebb24:
  assume {:partition} !v125;
  assert {:block_sourceloc} {:sourceloc_num 299} true;
  $p.i1.i.1 := $p.i1.i.0;
  goto $52;
$truebb25:
  assume {:partition} v127;
  assert {:block_sourceloc} {:sourceloc_num 300} true;
  goto $53;
$falsebb25:
  assume {:partition} !v127;
  assert {:block_sourceloc} {:sourceloc_num 301} true;
  $.119 := v126;
  goto $54;
$truebb26:
  assume {:partition} v148;
  assert {:block_sourceloc} {:sourceloc_num 302} true;
  goto $58;
$falsebb26:
  assume {:partition} !v148;
  assert {:block_sourceloc} {:sourceloc_num 303} true;
  goto $shiftRows.exit3;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:int, $1:int);
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 64 then 1 else 0) != 0;
axiom (if group_size_y == 4 then 1 else 0) != 0;
axiom (if num_groups_x == 8 then 1 else 0) != 0;
axiom (if num_groups_y == 128 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
