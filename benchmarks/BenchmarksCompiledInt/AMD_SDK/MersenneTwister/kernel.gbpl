type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "seedArray"} {:global} $$seedArray : [int]int;
axiom {:array_info "$$seedArray"} {:global} {:elem_width 32} {:source_name "seedArray"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$seedArray : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$seedArray : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$seedArray : bool;

var {:source_name "gaussianRand"} {:global} $$gaussianRand : [int]int;
axiom {:array_info "$$gaussianRand"} {:global} {:elem_width 32} {:source_name "gaussianRand"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$gaussianRand : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$gaussianRand : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$gaussianRand : bool;

var {:source_name "temp"} $$temp : [int]int;
axiom {:array_info "$$temp"} {:elem_width 32} {:source_name "temp"} {:source_elem_width 128} {:source_dimensions "8"} true;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_id_y} group_id_y : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:local_id_y} local_id_y : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function  BV32_LSHR(int, int) : int;
function BV_CONCAT(int, int) : int;
function BV_EXTRACT(int, int, int) : int;
function FCOS32(int) : int;
function FDIV32(int, int) : int;
function FLOG32(int) : int;
function FMUL32(int, int) : int;
function FSIN32(int) : int;
function FSQRT32(int) : int;
function UI32_TO_FP32(int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_AND(x : int, y : int) : int {
  if x == y then x else (if x == 0 || y == 0 then 0 else BV32_AND_UF(x, y))
}
function BV32_AND_UF(int, int) : int;
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_OR(x : int, y : int) : int {
  if x == y then x else (if x == 0 then y else (if y == 0 then x else BV32_OR_UF(x, y)))
}
function BV32_OR_UF(int, int) : int;
function {:inline true} BV32_SHL(x : int, y : int) : int {
  if x >= 0 && y == 1 then x*2 else BV32_SHL_UF(x,y)
}
function BV32_SHL_UF(int, int) : int;
function {:inline true} BV32_UDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_UGE(x : int, y : int) : bool {
  x >= y
}
function {:inline true} BV32_ULT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV32_XOR(x : int, y : int) : int {
  if x == y then 0 else (if x == 0 then y else (if y == 0 then x else BV32_XOR_UF(x, y)))
}
function BV32_XOR_UF(int, int) : int;
procedure {:source_name "gaussianRand"} {:kernel} $gaussianRand($width:int, $mulFactor:int)
requires {:sourceloc_num 0} (if $width == 512 then 1 else 0) != 0;
requires {:sourceloc_num 1} (if $mulFactor == 1024 then 1 else 0) != 0;
{
  var $r1.0:int;
  var $r2.0:int;
  var $a.0:int;
  var $b.0:int;
  var $i.0:int;
  var $r1.1:int;
  var $r2.1:int;
  var $a.1:int;
  var $b.1:int;
  var $i.1:int;
  var v102:int;
  var v103:int;
  var v104:int;
  var v105:int;
  var v107:int;
  var v106:int;
  var v108:int;
  var v109:int;
  var v0:int;
  var v1:int;
  var v2:int;
  var v3:int;
  var v4:int;
  var v5:int;
  var v6:int;
  var v8:int;
  var v7:int;
  var v9:int;
  var v10:int;
  var v11:int;
  var v22:int;
  var v13:int;
  var v12:int;
  var v14:int;
  var v15:int;
  var v16:int;
  var v18:int;
  var v17:int;
  var v19:int;
  var v20:int;
  var v21:int;
  var v23:bool;
  var v24:int;
  var v25:int;
  var v26:int;
  var v27:int;
  var v28:int;
  var v29:int;
  var v30:int;
  var v31:int;
  var v32:int;
  var v33:int;
  var v34:int;
  var v35:int;
  var v36:int;
  var v37:int;
  var v38:int;
  var v39:int;
  var v40:int;
  var v41:int;
  var v42:int;
  var v43:int;
  var v44:int;
  var v45:int;
  var v46:int;
  var v47:int;
  var v48:int;
  var v49:int;
  var v50:int;
  var v51:int;
  var v52:int;
  var v53:int;
  var v54:int;
  var v55:int;
  var v56:int;
  var v57:int;
  var v58:int;
  var v59:int;
  var v60:int;
  var v61:int;
  var v62:int;
  var v63:int;
  var v64:int;
  var v65:int;
  var v66:int;
  var v67:int;
  var v68:int;
  var v69:int;
  var v70:int;
  var v71:int;
  var v72:int;
  var v73:int;
  var v74:int;
  var v75:int;
  var v76:int;
  var v77:int;
  var v78:int;
  var v79:int;
  var v80:int;
  var v81:int;
  var v82:int;
  var v83:int;
  var v84:int;
  var v85:int;
  var v86:int;
  var v87:int;
  var v88:int;
  var v89:int;
  var v90:int;
  var v91:int;
  var v92:int;
  var v93:bool;
  var v94:int;
  var v95:int;
  var v96:int;
  var v97:int;
  var v101:int;
  var v98:int;
  var v99:int;
  var v100:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  v1 := BV32_ADD(BV32_MUL(group_id_y, group_size_y), local_id_y);
  assert {:sourceloc} {:sourceloc_num 3} true;
  v2 := $$seedArray[BV32_MUL(BV32_ADD(BV32_MUL(v1, $width), v0), 4)];
  assert {:sourceloc} {:sourceloc_num 4} true;
  v3 := $$seedArray[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(v1, $width), v0), 4), 1)];
  assert {:sourceloc} {:sourceloc_num 5} true;
  v4 := $$seedArray[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(v1, $width), v0), 4), 2)];
  assert {:sourceloc} {:sourceloc_num 6} true;
  v5 := $$seedArray[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(v1, $width), v0), 4), 3)];
  v6 := BV_CONCAT(BV_CONCAT(BV_CONCAT(v5, v4), v3), v2);
  v7 := BV32_ADD(BV32_MUL(1812433253, BV32_XOR(v2, BV32_LSHR(v2, 30))), 1);
  v8 := BV32_ADD(BV32_MUL(1812433253, BV32_XOR(v3, BV32_LSHR(v3, 30))), 1);
  v9 := BV32_ADD(BV32_MUL(1812433253, BV32_XOR(v4, BV32_LSHR(v4, 30))), 1);
  v10 := BV32_ADD(BV32_MUL(1812433253, BV32_XOR(v5, BV32_LSHR(v5, 30))), 1);
  v11 := BV_CONCAT(BV_CONCAT(BV_CONCAT(v10, v9), v8), v7);
  v12 := BV32_ADD(BV32_MUL(1812433253, BV32_XOR(v7, BV32_LSHR(v7, 30))), 2);
  v13 := BV32_ADD(BV32_MUL(1812433253, BV32_XOR(v8, BV32_LSHR(v8, 30))), 2);
  v14 := BV32_ADD(BV32_MUL(1812433253, BV32_XOR(v9, BV32_LSHR(v9, 30))), 2);
  v15 := BV32_ADD(BV32_MUL(1812433253, BV32_XOR(v10, BV32_LSHR(v10, 30))), 2);
  v16 := BV_CONCAT(BV_CONCAT(BV_CONCAT(v15, v14), v13), v12);
  v17 := BV32_ADD(BV32_MUL(1812433253, BV32_XOR(v12, BV32_LSHR(v12, 30))), 3);
  v18 := BV32_ADD(BV32_MUL(1812433253, BV32_XOR(v13, BV32_LSHR(v13, 30))), 3);
  v19 := BV32_ADD(BV32_MUL(1812433253, BV32_XOR(v14, BV32_LSHR(v14, 30))), 3);
  v20 := BV32_ADD(BV32_MUL(1812433253, BV32_XOR(v15, BV32_LSHR(v15, 30))), 3);
  v21 := BV_CONCAT(BV_CONCAT(BV_CONCAT(v20, v19), v18), v17);
  v22 := BV_CONCAT(BV_CONCAT(BV_CONCAT(BV32_ADD(BV32_MUL(1812433253, BV32_XOR(v20, BV32_LSHR(v20, 30))), 4), BV32_ADD(BV32_MUL(1812433253, BV32_XOR(v19, BV32_LSHR(v19, 30))), 4)), BV32_ADD(BV32_MUL(1812433253, BV32_XOR(v18, BV32_LSHR(v18, 30))), 4)), BV32_ADD(BV32_MUL(1812433253, BV32_XOR(v17, BV32_LSHR(v17, 30))), 4));
  $r1.0, $r2.0, $a.0, $b.0, $i.0 := 0, 0, 0, 0, 0;
  goto $1;
$1:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  v23 := BV32_ULT($i.0, $mulFactor);
  goto $truebb, $falsebb;
$2:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  goto $casebb, $casebb0, $casebb1, $casebb2, $casebb3, $casebb4, $casebb5, $casebb6, $defaultbb;
$3:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  $r1.1, $r2.1, $a.1, $b.1 := v21, v22, v6, v16;
  goto $12;
$4:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  assert {:sourceloc} {:sourceloc_num 11} true;
  v24 := $$temp[0];
  assert {:sourceloc} {:sourceloc_num 12} true;
  v25 := $$temp[1];
  assert {:sourceloc} {:sourceloc_num 13} true;
  v26 := $$temp[2];
  assert {:sourceloc} {:sourceloc_num 14} true;
  v27 := $$temp[3];
  $r1.1, $r2.1, $a.1, $b.1 := $r2.0, BV_CONCAT(BV_CONCAT(BV_CONCAT(v27, v26), v25), v24), v11, v21;
  goto $12;
$5:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  assert {:sourceloc} {:sourceloc_num 16} true;
  v28 := $$temp[4];
  assert {:sourceloc} {:sourceloc_num 17} true;
  v29 := $$temp[5];
  assert {:sourceloc} {:sourceloc_num 18} true;
  v30 := $$temp[6];
  assert {:sourceloc} {:sourceloc_num 19} true;
  v31 := $$temp[7];
  $r1.1, $r2.1, $a.1, $b.1 := $r2.0, BV_CONCAT(BV_CONCAT(BV_CONCAT(v31, v30), v29), v28), v16, v22;
  goto $12;
$6:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  assert {:sourceloc} {:sourceloc_num 21} true;
  v32 := $$temp[8];
  assert {:sourceloc} {:sourceloc_num 22} true;
  v33 := $$temp[9];
  assert {:sourceloc} {:sourceloc_num 23} true;
  v34 := $$temp[10];
  assert {:sourceloc} {:sourceloc_num 24} true;
  v35 := $$temp[11];
  $r1.1, $r2.1, $a.1, $b.1 := $r2.0, BV_CONCAT(BV_CONCAT(BV_CONCAT(v35, v34), v33), v32), v21, v6;
  goto $12;
$7:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  assert {:sourceloc} {:sourceloc_num 26} true;
  v36 := $$temp[12];
  assert {:sourceloc} {:sourceloc_num 27} true;
  v37 := $$temp[13];
  assert {:sourceloc} {:sourceloc_num 28} true;
  v38 := $$temp[14];
  assert {:sourceloc} {:sourceloc_num 29} true;
  v39 := $$temp[15];
  $r1.1, $r2.1, $a.1, $b.1 := $r2.0, BV_CONCAT(BV_CONCAT(BV_CONCAT(v39, v38), v37), v36), v22, v11;
  goto $12;
$8:
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  assert {:sourceloc} {:sourceloc_num 31} true;
  v40 := $$temp[16];
  assert {:sourceloc} {:sourceloc_num 32} true;
  v41 := $$temp[17];
  assert {:sourceloc} {:sourceloc_num 33} true;
  v42 := $$temp[18];
  assert {:sourceloc} {:sourceloc_num 34} true;
  v43 := $$temp[19];
  assert {:sourceloc} {:sourceloc_num 35} true;
  v44 := $$temp[0];
  assert {:sourceloc} {:sourceloc_num 36} true;
  v45 := $$temp[1];
  assert {:sourceloc} {:sourceloc_num 37} true;
  v46 := $$temp[2];
  assert {:sourceloc} {:sourceloc_num 38} true;
  v47 := $$temp[3];
  assert {:sourceloc} {:sourceloc_num 39} true;
  v48 := $$temp[8];
  assert {:sourceloc} {:sourceloc_num 40} true;
  v49 := $$temp[9];
  assert {:sourceloc} {:sourceloc_num 41} true;
  v50 := $$temp[10];
  assert {:sourceloc} {:sourceloc_num 42} true;
  v51 := $$temp[11];
  $r1.1, $r2.1, $a.1, $b.1 := $r2.0, BV_CONCAT(BV_CONCAT(BV_CONCAT(v43, v42), v41), v40), BV_CONCAT(BV_CONCAT(BV_CONCAT(v47, v46), v45), v44), BV_CONCAT(BV_CONCAT(BV_CONCAT(v51, v50), v49), v48);
  goto $12;
$9:
  assert {:block_sourceloc} {:sourceloc_num 43} true;
  assert {:sourceloc} {:sourceloc_num 44} true;
  v52 := $$temp[20];
  assert {:sourceloc} {:sourceloc_num 45} true;
  v53 := $$temp[21];
  assert {:sourceloc} {:sourceloc_num 46} true;
  v54 := $$temp[22];
  assert {:sourceloc} {:sourceloc_num 47} true;
  v55 := $$temp[23];
  assert {:sourceloc} {:sourceloc_num 48} true;
  v56 := $$temp[4];
  assert {:sourceloc} {:sourceloc_num 49} true;
  v57 := $$temp[5];
  assert {:sourceloc} {:sourceloc_num 50} true;
  v58 := $$temp[6];
  assert {:sourceloc} {:sourceloc_num 51} true;
  v59 := $$temp[7];
  assert {:sourceloc} {:sourceloc_num 52} true;
  v60 := $$temp[12];
  assert {:sourceloc} {:sourceloc_num 53} true;
  v61 := $$temp[13];
  assert {:sourceloc} {:sourceloc_num 54} true;
  v62 := $$temp[14];
  assert {:sourceloc} {:sourceloc_num 55} true;
  v63 := $$temp[15];
  $r1.1, $r2.1, $a.1, $b.1 := $r2.0, BV_CONCAT(BV_CONCAT(BV_CONCAT(v55, v54), v53), v52), BV_CONCAT(BV_CONCAT(BV_CONCAT(v59, v58), v57), v56), BV_CONCAT(BV_CONCAT(BV_CONCAT(v63, v62), v61), v60);
  goto $12;
$10:
  assert {:block_sourceloc} {:sourceloc_num 56} true;
  assert {:sourceloc} {:sourceloc_num 57} true;
  v64 := $$temp[24];
  assert {:sourceloc} {:sourceloc_num 58} true;
  v65 := $$temp[25];
  assert {:sourceloc} {:sourceloc_num 59} true;
  v66 := $$temp[26];
  assert {:sourceloc} {:sourceloc_num 60} true;
  v67 := $$temp[27];
  assert {:sourceloc} {:sourceloc_num 61} true;
  v68 := $$temp[8];
  assert {:sourceloc} {:sourceloc_num 62} true;
  v69 := $$temp[9];
  assert {:sourceloc} {:sourceloc_num 63} true;
  v70 := $$temp[10];
  assert {:sourceloc} {:sourceloc_num 64} true;
  v71 := $$temp[11];
  assert {:sourceloc} {:sourceloc_num 65} true;
  v72 := $$temp[16];
  assert {:sourceloc} {:sourceloc_num 66} true;
  v73 := $$temp[17];
  assert {:sourceloc} {:sourceloc_num 67} true;
  v74 := $$temp[18];
  assert {:sourceloc} {:sourceloc_num 68} true;
  v75 := $$temp[19];
  $r1.1, $r2.1, $a.1, $b.1 := $r2.0, BV_CONCAT(BV_CONCAT(BV_CONCAT(v67, v66), v65), v64), BV_CONCAT(BV_CONCAT(BV_CONCAT(v71, v70), v69), v68), BV_CONCAT(BV_CONCAT(BV_CONCAT(v75, v74), v73), v72);
  goto $12;
$11:
  assert {:block_sourceloc} {:sourceloc_num 69} true;
  $r1.1, $r2.1, $a.1, $b.1 := $r1.0, $r2.0, $a.0, $b.0;
  goto $12;
$12:
  assert {:block_sourceloc} {:sourceloc_num 70} true;
  assert {:sourceloc} {:sourceloc_num 71} true;
  v76 := $$temp[BV32_MUL($i.0, 4)];
  assert {:sourceloc} {:sourceloc_num 72} true;
  v77 := $$temp[BV32_ADD(BV32_MUL($i.0, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 73} true;
  v78 := $$temp[BV32_ADD(BV32_MUL($i.0, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 74} true;
  v79 := $$temp[BV32_ADD(BV32_MUL($i.0, 4), 3)];
  assert {:sourceloc} {:sourceloc_num 75} true;
  $$temp[BV32_MUL($i.0, 4)] := BV32_XOR(BV32_XOR(BV32_XOR(BV32_XOR(BV_EXTRACT($a.1, 32, 0), BV32_SHL(BV_EXTRACT($a.1, 32, 0), 24)), BV32_AND(BV32_LSHR(BV_EXTRACT($b.1, 32, 0), 13), -33605633)), BV32_OR(BV32_LSHR(BV_EXTRACT($r1.1, 32, 0), 24), BV32_SHL(BV_EXTRACT($r1.1, 64, 32), 8))), BV32_SHL(BV_EXTRACT($r2.1, 32, 0), 15));
  assert {:sourceloc} {:sourceloc_num 76} true;
  $$temp[BV32_ADD(BV32_MUL($i.0, 4), 1)] := v77;
  assert {:sourceloc} {:sourceloc_num 77} true;
  $$temp[BV32_ADD(BV32_MUL($i.0, 4), 2)] := v78;
  assert {:sourceloc} {:sourceloc_num 78} true;
  $$temp[BV32_ADD(BV32_MUL($i.0, 4), 3)] := v79;
  assert {:sourceloc} {:sourceloc_num 79} true;
  v80 := $$temp[BV32_MUL($i.0, 4)];
  assert {:sourceloc} {:sourceloc_num 80} true;
  v81 := $$temp[BV32_ADD(BV32_MUL($i.0, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 81} true;
  v82 := $$temp[BV32_ADD(BV32_MUL($i.0, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 82} true;
  v83 := $$temp[BV32_ADD(BV32_MUL($i.0, 4), 3)];
  assert {:sourceloc} {:sourceloc_num 83} true;
  $$temp[BV32_MUL($i.0, 4)] := v80;
  assert {:sourceloc} {:sourceloc_num 84} true;
  $$temp[BV32_ADD(BV32_MUL($i.0, 4), 1)] := BV32_XOR(BV32_XOR(BV32_XOR(BV32_XOR(BV_EXTRACT($a.1, 64, 32), BV32_OR(BV32_SHL(BV_EXTRACT($a.1, 64, 32), 24), BV32_LSHR(BV_EXTRACT($a.1, 32, 0), 8))), BV32_AND(BV32_LSHR(BV_EXTRACT($b.1, 64, 32), 13), -276873347)), BV32_OR(BV32_LSHR(BV_EXTRACT($r1.1, 64, 32), 24), BV32_SHL(BV_EXTRACT($r1.1, 96, 64), 8))), BV32_SHL(BV_EXTRACT($r2.1, 64, 32), 15));
  assert {:sourceloc} {:sourceloc_num 85} true;
  $$temp[BV32_ADD(BV32_MUL($i.0, 4), 2)] := v82;
  assert {:sourceloc} {:sourceloc_num 86} true;
  $$temp[BV32_ADD(BV32_MUL($i.0, 4), 3)] := v83;
  assert {:sourceloc} {:sourceloc_num 87} true;
  v84 := $$temp[BV32_MUL($i.0, 4)];
  assert {:sourceloc} {:sourceloc_num 88} true;
  v85 := $$temp[BV32_ADD(BV32_MUL($i.0, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 89} true;
  v86 := $$temp[BV32_ADD(BV32_MUL($i.0, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 90} true;
  v87 := $$temp[BV32_ADD(BV32_MUL($i.0, 4), 3)];
  assert {:sourceloc} {:sourceloc_num 91} true;
  $$temp[BV32_MUL($i.0, 4)] := v84;
  assert {:sourceloc} {:sourceloc_num 92} true;
  $$temp[BV32_ADD(BV32_MUL($i.0, 4), 1)] := v85;
  assert {:sourceloc} {:sourceloc_num 93} true;
  $$temp[BV32_ADD(BV32_MUL($i.0, 4), 2)] := BV32_XOR(BV32_XOR(BV32_XOR(BV32_XOR(BV_EXTRACT($a.1, 96, 64), BV32_OR(BV32_SHL(BV_EXTRACT($a.1, 96, 64), 24), BV32_LSHR(BV_EXTRACT($a.1, 64, 32), 8))), BV32_AND(BV32_LSHR(BV_EXTRACT($b.1, 96, 64), 13), -8946819)), BV32_OR(BV32_LSHR(BV_EXTRACT($r1.1, 96, 64), 24), BV32_SHL(BV_EXTRACT($r1.1, 128, 96), 8))), BV32_SHL(BV_EXTRACT($r2.1, 96, 64), 15));
  assert {:sourceloc} {:sourceloc_num 94} true;
  $$temp[BV32_ADD(BV32_MUL($i.0, 4), 3)] := v87;
  assert {:sourceloc} {:sourceloc_num 95} true;
  v88 := $$temp[BV32_MUL($i.0, 4)];
  assert {:sourceloc} {:sourceloc_num 96} true;
  v89 := $$temp[BV32_ADD(BV32_MUL($i.0, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 97} true;
  v90 := $$temp[BV32_ADD(BV32_MUL($i.0, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 98} true;
  v91 := $$temp[BV32_ADD(BV32_MUL($i.0, 4), 3)];
  assert {:sourceloc} {:sourceloc_num 99} true;
  $$temp[BV32_MUL($i.0, 4)] := v88;
  assert {:sourceloc} {:sourceloc_num 100} true;
  $$temp[BV32_ADD(BV32_MUL($i.0, 4), 1)] := v89;
  assert {:sourceloc} {:sourceloc_num 101} true;
  $$temp[BV32_ADD(BV32_MUL($i.0, 4), 2)] := v90;
  assert {:sourceloc} {:sourceloc_num 102} true;
  $$temp[BV32_ADD(BV32_MUL($i.0, 4), 3)] := BV32_XOR(BV32_XOR(BV32_XOR(BV32_XOR(BV_EXTRACT($a.1, 128, 96), BV32_OR(BV32_SHL(BV_EXTRACT($a.1, 128, 96), 24), BV32_LSHR(BV_EXTRACT($a.1, 96, 64), 8))), BV32_AND(BV32_LSHR(BV_EXTRACT($b.1, 128, 96), 13), 2146958127)), BV32_LSHR(BV_EXTRACT($r1.1, 128, 96), 24)), BV32_SHL(BV_EXTRACT($r2.1, 128, 96), 15));
  goto $13;
$13:
  assert {:block_sourceloc} {:sourceloc_num 103} true;
  $r1.0, $r2.0, $a.0, $b.0, $i.0 := $r1.1, $r2.1, $a.1, $b.1, BV32_ADD($i.0, 1);
  goto $1;
$14:
  assert {:block_sourceloc} {:sourceloc_num 104} true;
  v92 := BV32_MUL(BV32_ADD(BV32_MUL(v1, $width), v0), $mulFactor);
  $i.1 := 0;
  goto $15;
$15:
  assert {:block_sourceloc} {:sourceloc_num 105} true;
  assert {:originated_from_invariant} {:sourceloc_num 106} (if (_WRITE_HAS_OCCURRED_$$gaussianRand ==> BV32_UGE(BV32_UDIV(BV32_MUL(4, _WATCHED_OFFSET), 16), v92)) then 1 else 0) != 0;
  assert {:originated_from_invariant} {:sourceloc_num 107} (if (_WRITE_HAS_OCCURRED_$$gaussianRand ==> BV32_ULT(BV32_UDIV(BV32_MUL(4, _WATCHED_OFFSET), 16), BV32_ADD(v92, $mulFactor))) then 1 else 0) != 0;
  v93 := BV32_ULT($i.1, BV32_UDIV($mulFactor, 2));
  goto $truebb0, $falsebb0;
$16:
  assert {:block_sourceloc} {:sourceloc_num 108} true;
  assert {:sourceloc} {:sourceloc_num 109} true;
  v94 := $$temp[BV32_MUL($i.1, 4)];
  assert {:sourceloc} {:sourceloc_num 110} true;
  v95 := $$temp[BV32_ADD(BV32_MUL($i.1, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 111} true;
  v96 := $$temp[BV32_ADD(BV32_MUL($i.1, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 112} true;
  v97 := $$temp[BV32_ADD(BV32_MUL($i.1, 4), 3)];
  assert {:sourceloc} {:sourceloc_num 113} true;
  v98 := $$temp[BV32_MUL(BV32_ADD($i.1, 1), 4)];
  assert {:sourceloc} {:sourceloc_num 114} true;
  v99 := $$temp[BV32_ADD(BV32_MUL(BV32_ADD($i.1, 1), 4), 1)];
  assert {:sourceloc} {:sourceloc_num 115} true;
  v100 := $$temp[BV32_ADD(BV32_MUL(BV32_ADD($i.1, 1), 4), 2)];
  assert {:sourceloc} {:sourceloc_num 116} true;
  v101 := $$temp[BV32_ADD(BV32_MUL(BV32_ADD($i.1, 1), 4), 3)];
  v102 := FSQRT32(FMUL32(-1073741824, FMUL32(FLOG32(FDIV32(FMUL32(UI32_TO_FP32(v94), 1065353216), 1333788672)), 1060205080)));
  v103 := FSQRT32(FMUL32(-1073741824, FMUL32(FLOG32(FDIV32(FMUL32(UI32_TO_FP32(v95), 1065353216), 1333788672)), 1060205080)));
  v104 := FSQRT32(FMUL32(-1073741824, FMUL32(FLOG32(FDIV32(FMUL32(UI32_TO_FP32(v96), 1065353216), 1333788672)), 1060205080)));
  v105 := FSQRT32(FMUL32(-1073741824, FMUL32(FLOG32(FDIV32(FMUL32(UI32_TO_FP32(v97), 1065353216), 1333788672)), 1060205080)));
  v106 := FMUL32(1086918619, FDIV32(FMUL32(UI32_TO_FP32(v98), 1065353216), 1333788672));
  v107 := FMUL32(1086918619, FDIV32(FMUL32(UI32_TO_FP32(v99), 1065353216), 1333788672));
  v108 := FMUL32(1086918619, FDIV32(FMUL32(UI32_TO_FP32(v100), 1065353216), 1333788672));
  v109 := FMUL32(1086918619, FDIV32(FMUL32(UI32_TO_FP32(v101), 1065353216), 1333788672));
  assert {:sourceloc} {:sourceloc_num 117} true;
  $$gaussianRand[BV32_MUL(BV32_ADD(v92, BV32_MUL($i.1, 2)), 4)] := FMUL32(v102, FCOS32(v106));
  assert {:sourceloc} {:sourceloc_num 118} true;
  $$gaussianRand[BV32_ADD(BV32_MUL(BV32_ADD(v92, BV32_MUL($i.1, 2)), 4), 1)] := FMUL32(v103, FCOS32(v107));
  assert {:sourceloc} {:sourceloc_num 119} true;
  $$gaussianRand[BV32_ADD(BV32_MUL(BV32_ADD(v92, BV32_MUL($i.1, 2)), 4), 2)] := FMUL32(v104, FCOS32(v108));
  assert {:sourceloc} {:sourceloc_num 120} true;
  $$gaussianRand[BV32_ADD(BV32_MUL(BV32_ADD(v92, BV32_MUL($i.1, 2)), 4), 3)] := FMUL32(v105, FCOS32(v109));
  assert {:sourceloc} {:sourceloc_num 121} true;
  $$gaussianRand[BV32_MUL(BV32_ADD(BV32_ADD(v92, BV32_MUL($i.1, 2)), 1), 4)] := FMUL32(v102, FSIN32(v106));
  assert {:sourceloc} {:sourceloc_num 122} true;
  $$gaussianRand[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(v92, BV32_MUL($i.1, 2)), 1), 4), 1)] := FMUL32(v103, FSIN32(v107));
  assert {:sourceloc} {:sourceloc_num 123} true;
  $$gaussianRand[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(v92, BV32_MUL($i.1, 2)), 1), 4), 2)] := FMUL32(v104, FSIN32(v108));
  assert {:sourceloc} {:sourceloc_num 124} true;
  $$gaussianRand[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(v92, BV32_MUL($i.1, 2)), 1), 4), 3)] := FMUL32(v105, FSIN32(v109));
  goto $17;
$17:
  assert {:block_sourceloc} {:sourceloc_num 125} true;
  $i.1 := BV32_ADD($i.1, 1);
  goto $15;
$18:
  assert {:block_sourceloc} {:sourceloc_num 126} true;
  return;
$truebb:
  assume {:partition} v23;
  assert {:block_sourceloc} {:sourceloc_num 127} true;
  goto $2;
$falsebb:
  assume {:partition} !v23;
  assert {:block_sourceloc} {:sourceloc_num 128} true;
  goto $14;
$casebb:
  assume {:partition} $i.0 == 0;
  assert {:block_sourceloc} {:sourceloc_num 129} true;
  goto $3;
$casebb0:
  assume {:partition} $i.0 == 1;
  assert {:block_sourceloc} {:sourceloc_num 130} true;
  goto $4;
$casebb1:
  assume {:partition} $i.0 == 2;
  assert {:block_sourceloc} {:sourceloc_num 131} true;
  goto $5;
$casebb2:
  assume {:partition} $i.0 == 3;
  assert {:block_sourceloc} {:sourceloc_num 132} true;
  goto $6;
$casebb3:
  assume {:partition} $i.0 == 4;
  assert {:block_sourceloc} {:sourceloc_num 133} true;
  goto $7;
$casebb4:
  assume {:partition} $i.0 == 5;
  assert {:block_sourceloc} {:sourceloc_num 134} true;
  goto $8;
$casebb5:
  assume {:partition} $i.0 == 6;
  assert {:block_sourceloc} {:sourceloc_num 135} true;
  goto $9;
$casebb6:
  assume {:partition} $i.0 == 7;
  assert {:block_sourceloc} {:sourceloc_num 136} true;
  goto $10;
$defaultbb:
  assert {:block_sourceloc} {:sourceloc_num 137} true;
  assume {:partition} (((((($i.0 != 0 && $i.0 != 1) && $i.0 != 2) && $i.0 != 3) && $i.0 != 4) && $i.0 != 5) && $i.0 != 6) && $i.0 != 7;
  goto $11;
$truebb0:
  assume {:partition} v93;
  assert {:block_sourceloc} {:sourceloc_num 138} true;
  goto $16;
$falsebb0:
  assume {:partition} !v93;
  assert {:block_sourceloc} {:sourceloc_num 139} true;
  goto $18;
}
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 64 then 1 else 0) != 0;
axiom (if group_size_y == 64 then 1 else 0) != 0;
axiom (if num_groups_x == 8 then 1 else 0) != 0;
axiom (if num_groups_y == 8 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
