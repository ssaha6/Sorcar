type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "pos"} {:global} $$pos : [int]int;
axiom {:array_info "$$pos"} {:global} {:elem_width 32} {:source_name "pos"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$pos : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$pos : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$pos : bool;

var {:source_name "vel"} {:global} $$vel : [int]int;
axiom {:array_info "$$vel"} {:global} {:elem_width 32} {:source_name "vel"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$vel : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$vel : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$vel : bool;

var {:source_name "localPos"} {:group_shared} $$localPos : [int]int;
axiom {:array_info "$$localPos"} {:group_shared} {:elem_width 32} {:source_name "localPos"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$localPos : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$localPos : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$localPos : bool;

var {:source_name "newPosition"} {:global} $$newPosition : [int]int;
axiom {:array_info "$$newPosition"} {:global} {:elem_width 32} {:source_name "newPosition"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$newPosition : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$newPosition : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$newPosition : bool;

var {:source_name "newVelocity"} {:global} $$newVelocity : [int]int;
axiom {:array_info "$$newVelocity"} {:global} {:elem_width 32} {:source_name "newVelocity"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$newVelocity : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$newVelocity : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$newVelocity : bool;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function BV_CONCAT(int, int) : int;
function BV_EXTRACT(int, int, int) : int;
function FADD32(int, int) : int;
function FDIV32(int, int) : int;
function FMUL32(int, int) : int;
function FSQRT32(int) : int;
function FSUB32(int, int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_UDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_ULT(x : int, y : int) : bool {
  x < y
}
procedure {:source_name "nbody_sim"} {:kernel} $nbody_sim($numBodies:int, $deltaTime:int, $epsSqr:int)
{
  var $acc.0:int;
  var $i.0:int;
  var $acc.1:int;
  var $j.0:int;
  var v0:int;
  var v12:bool;
  var v1:int;
  var v2:int;
  var v3:int;
  var v4:int;
  var v5:int;
  var v6:int;
  var v7:bool;
  var v8:int;
  var v9:int;
  var v10:int;
  var v11:int;
  var v13:int;
  var v14:int;
  var v15:int;
  var v16:int;
  var v17:int;
  var v18:int;
  var v19:int;
  var v20:int;
  var v21:int;
  var v22:int;
  var v23:int;
  var v24:int;
  var v25:int;
  var v26:int;
  var v27:int;
  var v28:int;
  var v29:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  v0 := local_id_x;
  v1 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  v2 := group_size_x;
  assert {:sourceloc} {:sourceloc_num 1} true;
  v3 := $$pos[BV32_MUL(v1, 4)];
  assert {:sourceloc} {:sourceloc_num 2} true;
  v4 := $$pos[BV32_ADD(BV32_MUL(v1, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 3} true;
  v5 := $$pos[BV32_ADD(BV32_MUL(v1, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 4} true;
  v6 := $$pos[BV32_ADD(BV32_MUL(v1, 4), 3)];
  $acc.0, $i.0 := 0, 0;
  goto $1;
$1:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  v7 := BV32_ULT($i.0, BV32_UDIV($numBodies, v2));
  goto $truebb, $falsebb;
$2:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  assert {:sourceloc} {:sourceloc_num 7} true;
  v8 := $$pos[BV32_MUL(BV32_ADD(BV32_MUL($i.0, v2), v0), 4)];
  assert {:sourceloc} {:sourceloc_num 8} true;
  v9 := $$pos[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL($i.0, v2), v0), 4), 1)];
  assert {:sourceloc} {:sourceloc_num 9} true;
  v10 := $$pos[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL($i.0, v2), v0), 4), 2)];
  assert {:sourceloc} {:sourceloc_num 10} true;
  v11 := $$pos[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL($i.0, v2), v0), 4), 3)];
  assert {:sourceloc} {:sourceloc_num 11} true;
  $$localPos[BV32_MUL(v0, 4)] := v8;
  assert {:sourceloc} {:sourceloc_num 12} true;
  $$localPos[BV32_ADD(BV32_MUL(v0, 4), 1)] := v9;
  assert {:sourceloc} {:sourceloc_num 13} true;
  $$localPos[BV32_ADD(BV32_MUL(v0, 4), 2)] := v10;
  assert {:sourceloc} {:sourceloc_num 14} true;
  $$localPos[BV32_ADD(BV32_MUL(v0, 4), 3)] := v11;
  call {:sourceloc_num 15} $bugle_barrier(-1, 0);
  $acc.1, $j.0 := $acc.0, 0;
  goto $3;
$3:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  v12 := BV32_ULT($j.0, v2);
  goto $truebb0, $falsebb0;
$4:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  assert {:sourceloc} {:sourceloc_num 18} true;
  v13 := $$localPos[BV32_MUL($j.0, 4)];
  assert {:sourceloc} {:sourceloc_num 19} true;
  v14 := $$localPos[BV32_ADD(BV32_MUL($j.0, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 20} true;
  v15 := $$localPos[BV32_ADD(BV32_MUL($j.0, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 21} true;
  v16 := $$localPos[BV32_ADD(BV32_MUL($j.0, 4), 3)];
  v17 := FSUB32(v13, v3);
  v18 := FSUB32(v14, v4);
  v19 := FSUB32(v15, v5);
  v20 := FDIV32(1065353216, FSQRT32(FADD32(FADD32(FMUL32(v19, v19), FADD32(FMUL32(v17, v17), FMUL32(v18, v18))), $epsSqr)));
  assert {:sourceloc} {:sourceloc_num 22} true;
  v21 := $$localPos[BV32_MUL($j.0, 4)];
  assert {:sourceloc} {:sourceloc_num 23} true;
  v22 := $$localPos[BV32_ADD(BV32_MUL($j.0, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 24} true;
  v23 := $$localPos[BV32_ADD(BV32_MUL($j.0, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 25} true;
  v24 := $$localPos[BV32_ADD(BV32_MUL($j.0, 4), 3)];
  v25 := FMUL32(v24, FMUL32(FMUL32(v20, v20), v20));
  goto $5;
$5:
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  $acc.1, $j.0 := BV_CONCAT(BV_CONCAT(BV_CONCAT(FADD32(BV_EXTRACT($acc.1, 128, 96), FMUL32(v25, FSUB32(v16, v6))), FADD32(BV_EXTRACT($acc.1, 96, 64), FMUL32(v25, v19))), FADD32(BV_EXTRACT($acc.1, 64, 32), FMUL32(v25, v18))), FADD32(BV_EXTRACT($acc.1, 32, 0), FMUL32(v25, v17))), BV32_ADD($j.0, 1);
  goto $3;
$6:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  call {:sourceloc_num 28} $bugle_barrier(-1, 0);
  goto $7;
$7:
  assert {:block_sourceloc} {:sourceloc_num 29} true;
  $acc.0, $i.0 := $acc.1, BV32_ADD($i.0, 1);
  goto $1;
$8:
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  assert {:sourceloc} {:sourceloc_num 31} true;
  v26 := $$vel[BV32_MUL(v1, 4)];
  assert {:sourceloc} {:sourceloc_num 32} true;
  v27 := $$vel[BV32_ADD(BV32_MUL(v1, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 33} true;
  v28 := $$vel[BV32_ADD(BV32_MUL(v1, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 34} true;
  v29 := $$vel[BV32_ADD(BV32_MUL(v1, 4), 3)];
  assert {:sourceloc} {:sourceloc_num 35} true;
  $$newPosition[BV32_MUL(v1, 4)] := FADD32(FMUL32(FMUL32(FMUL32(BV_EXTRACT($acc.0, 32, 0), 1056964608), $deltaTime), $deltaTime), FADD32(FMUL32(v26, $deltaTime), v3));
  assert {:sourceloc} {:sourceloc_num 36} true;
  $$newPosition[BV32_ADD(BV32_MUL(v1, 4), 1)] := FADD32(FMUL32(FMUL32(FMUL32(BV_EXTRACT($acc.0, 64, 32), 1056964608), $deltaTime), $deltaTime), FADD32(FMUL32(v27, $deltaTime), v4));
  assert {:sourceloc} {:sourceloc_num 37} true;
  $$newPosition[BV32_ADD(BV32_MUL(v1, 4), 2)] := FADD32(FMUL32(FMUL32(FMUL32(BV_EXTRACT($acc.0, 96, 64), 1056964608), $deltaTime), $deltaTime), FADD32(FMUL32(v28, $deltaTime), v5));
  assert {:sourceloc} {:sourceloc_num 38} true;
  $$newPosition[BV32_ADD(BV32_MUL(v1, 4), 3)] := v6;
  assert {:sourceloc} {:sourceloc_num 39} true;
  $$newVelocity[BV32_MUL(v1, 4)] := FADD32(FMUL32(BV_EXTRACT($acc.0, 32, 0), $deltaTime), v26);
  assert {:sourceloc} {:sourceloc_num 40} true;
  $$newVelocity[BV32_ADD(BV32_MUL(v1, 4), 1)] := FADD32(FMUL32(BV_EXTRACT($acc.0, 64, 32), $deltaTime), v27);
  assert {:sourceloc} {:sourceloc_num 41} true;
  $$newVelocity[BV32_ADD(BV32_MUL(v1, 4), 2)] := FADD32(FMUL32(BV_EXTRACT($acc.0, 96, 64), $deltaTime), v28);
  assert {:sourceloc} {:sourceloc_num 42} true;
  $$newVelocity[BV32_ADD(BV32_MUL(v1, 4), 3)] := FADD32(FMUL32(BV_EXTRACT($acc.0, 128, 96), $deltaTime), v29);
  return;
$truebb:
  assume {:partition} v7;
  assert {:block_sourceloc} {:sourceloc_num 43} true;
  goto $2;
$falsebb:
  assume {:partition} !v7;
  assert {:block_sourceloc} {:sourceloc_num 44} true;
  goto $8;
$truebb0:
  assume {:partition} v12;
  assert {:block_sourceloc} {:sourceloc_num 45} true;
  goto $4;
$falsebb0:
  assume {:partition} !v12;
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  goto $6;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:int, $1:int);
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 256 then 1 else 0) != 0;
axiom (if num_groups_x == 4 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
