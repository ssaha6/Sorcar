type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "output"} {:global} $$output : [int]int;
axiom {:array_info "$$output"} {:global} {:elem_width 32} {:source_name "output"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$output : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$output : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$output : bool;

var {:source_name "input"} {:global} $$input : [int]int;
axiom {:array_info "$$input"} {:global} {:elem_width 32} {:source_name "input"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$input : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$input : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$input : bool;

var {:source_name "mask"} {:global} $$mask : [int]int;
axiom {:array_info "$$mask"} {:global} {:elem_width 32} {:source_name "mask"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$mask : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$mask : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$mask : bool;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function BV_EXTRACT(int, int, int) : int;
function FADD32(int, int) : int;
function FMUL32(int, int) : int;
function FP32_TO_UI32(int) : int;
function UI32_TO_FP32(int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SUB(x : int, y : int) : int {
  x - y
}
function {:inline true} BV32_UDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_UGE(x : int, y : int) : bool {
  x >= y
}
function {:inline true} BV32_ULE(x : int, y : int) : bool {
  x <= y
}
function {:inline true} BV32_ULT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV32_UREM(x : int, y : int) : int {
  x mod y
}
procedure {:source_name "simpleConvolution"} {:kernel} $simpleConvolution($inputDimensions:int, $maskDimensions:int)
{
  var $0:int;
  var $1:int;
  var $2:int;
  var $3:int;
  var $sumFX.0:int;
  var $i.0:int;
  var $sumFX.1:int;
  var $j.0:int;
  var v2:int;
  var v0:int;
  var v1:int;
  var v3:int;
  var v4:int;
  var v5:int;
  var v6:int;
  var v7:int;
  var v8:bool;
  var v9:bool;
  var v10:bool;
  var v11:bool;
  var v12:bool;
  var v13:bool;
  var v14:int;
  var v15:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  v1 := BV_EXTRACT($inputDimensions, 32, 0);
  v2 := BV_EXTRACT($inputDimensions, 64, 32);
  v3 := BV32_UREM(v0, v1);
  v4 := BV32_UDIV(v0, v1);
  v5 := BV_EXTRACT($maskDimensions, 32, 0);
  v6 := BV32_UDIV(BV32_SUB(v5, 1), 2);
  v7 := BV32_UDIV(BV32_SUB(BV_EXTRACT($maskDimensions, 64, 32), 1), 2);
  v8 := BV32_ULT(v3, v6);
  goto $truebb, $falsebb;
$1:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  $0 := 0;
  goto $3;
$2:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  $0 := BV32_SUB(v3, v6);
  goto $3;
$3:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  v9 := BV32_UGE(BV32_ADD(v3, v6), v1);
  goto $truebb0, $falsebb0;
$4:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  $1 := BV32_SUB(v1, 1);
  goto $6;
$5:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  $1 := BV32_ADD(v3, v6);
  goto $6;
$6:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  v10 := BV32_ULT(v4, v7);
  goto $truebb1, $falsebb1;
$7:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  $2 := 0;
  goto $9;
$8:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  $2 := BV32_SUB(v4, v7);
  goto $9;
$9:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  v11 := BV32_UGE(BV32_ADD(v4, v7), v2);
  goto $truebb2, $falsebb2;
$10:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  $3 := BV32_SUB(v2, 1);
  goto $12;
$11:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  $3 := BV32_ADD(v4, v7);
  goto $12;
$12:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  $sumFX.0, $i.0 := 0, $0;
  goto $13;
$13:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  v12 := BV32_ULE($i.0, $1);
  goto $truebb3, $falsebb3;
$14:
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  $sumFX.1, $j.0 := $sumFX.0, $2;
  goto $15;
$15:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  v13 := BV32_ULE($j.0, $3);
  goto $truebb4, $falsebb4;
$16:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  assert {:sourceloc} {:sourceloc_num 17} true;
  v14 := $$input[BV32_ADD(BV32_MUL($j.0, v1), $i.0)];
  assert {:sourceloc} {:sourceloc_num 18} true;
  v15 := $$mask[BV32_ADD(BV32_MUL(BV32_SUB($j.0, BV32_SUB(v4, v7)), v5), BV32_SUB($i.0, BV32_SUB(v3, v6)))];
  goto $17;
$17:
  assert {:block_sourceloc} {:sourceloc_num 19} true;
  $sumFX.1, $j.0 := FADD32($sumFX.1, FMUL32(UI32_TO_FP32(v14), v15)), BV32_ADD($j.0, 1);
  goto $15;
$18:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  goto $19;
$19:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  $sumFX.0, $i.0 := $sumFX.1, BV32_ADD($i.0, 1);
  goto $13;
$20:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  assert {:sourceloc} {:sourceloc_num 23} true;
  $$output[v0] := FP32_TO_UI32(FADD32($sumFX.0, 1056964608));
  return;
$truebb:
  assume {:partition} v8;
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  goto $1;
$falsebb:
  assume {:partition} !v8;
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  goto $2;
$truebb0:
  assume {:partition} v9;
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  goto $4;
$falsebb0:
  assume {:partition} !v9;
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  goto $5;
$truebb1:
  assume {:partition} v10;
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  goto $7;
$falsebb1:
  assume {:partition} !v10;
  assert {:block_sourceloc} {:sourceloc_num 29} true;
  goto $8;
$truebb2:
  assume {:partition} v11;
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  goto $10;
$falsebb2:
  assume {:partition} !v11;
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  goto $11;
$truebb3:
  assume {:partition} v12;
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  goto $14;
$falsebb3:
  assume {:partition} !v12;
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  goto $20;
$truebb4:
  assume {:partition} v13;
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  goto $16;
$falsebb4:
  assume {:partition} !v13;
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  goto $18;
}
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 256 then 1 else 0) != 0;
axiom (if num_groups_x == 16 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
