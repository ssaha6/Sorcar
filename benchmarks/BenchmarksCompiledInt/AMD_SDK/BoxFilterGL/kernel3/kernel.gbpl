type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "input"} {:global} $$input : [int]int;
axiom {:array_info "$$input"} {:global} {:elem_width 32} {:source_name "input"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$input : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$input : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$input : bool;

var {:source_name "output"} {:global} $$output : [int]int;
axiom {:array_info "$$output"} {:global} {:elem_width 32} {:source_name "output"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$output : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$output : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$output : bool;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_id_y} group_id_y : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:local_id_y} local_id_y : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function BV_CONCAT(int, int) : int;
function BV_EXTRACT(int, int, int) : int;
function FP32_TO_SI32(int) : int;
function FPOW32(int, int) : int;
function SI32_TO_FP32(int) : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SLT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV32_SUB(x : int, y : int) : int {
  x - y
}
procedure {:source_name "horizontalSAT"} {:kernel} $horizontalSAT($i:int, $r:int, $width:int)
requires {:sourceloc_num 0} (if $width == 1024 then 1 else 0) != 0;
{
  var $sum.0:int;
  var $j.0:int;
  var v0:int;
  var v1:int;
  var v2:int;
  var v3:bool;
  var v4:bool;
  var v5:int;
  var v6:int;
  var v7:int;
  var v8:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  v1 := BV32_ADD(v0, BV32_MUL(BV32_ADD(BV32_MUL(group_id_y, group_size_y), local_id_y), $width));
  v2 := FP32_TO_SI32(FPOW32(SI32_TO_FP32($r), SI32_TO_FP32($i)));
  $sum.0, $j.0 := 0, 0;
  goto $1;
$1:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v3 := BV32_SLT($j.0, $r);
  goto $truebb, $falsebb;
$2:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  v4 := BV32_SLT(BV32_SUB(v0, BV32_MUL($j.0, v2)), 0);
  goto $truebb0, $falsebb0;
$3:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  assert {:sourceloc} {:sourceloc_num 5} true;
  $$output[BV32_MUL(v1, 4)] := BV_EXTRACT($sum.0, 32, 0);
  assert {:sourceloc} {:sourceloc_num 6} true;
  $$output[BV32_ADD(BV32_MUL(v1, 4), 1)] := BV_EXTRACT($sum.0, 64, 32);
  assert {:sourceloc} {:sourceloc_num 7} true;
  $$output[BV32_ADD(BV32_MUL(v1, 4), 2)] := BV_EXTRACT($sum.0, 96, 64);
  assert {:sourceloc} {:sourceloc_num 8} true;
  $$output[BV32_ADD(BV32_MUL(v1, 4), 3)] := BV_EXTRACT($sum.0, 128, 96);
  goto $7;
$4:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  assert {:sourceloc} {:sourceloc_num 10} true;
  v5 := $$input[BV32_MUL(BV32_SUB(v1, BV32_MUL($j.0, v2)), 4)];
  assert {:sourceloc} {:sourceloc_num 11} true;
  v6 := $$input[BV32_ADD(BV32_MUL(BV32_SUB(v1, BV32_MUL($j.0, v2)), 4), 1)];
  assert {:sourceloc} {:sourceloc_num 12} true;
  v7 := $$input[BV32_ADD(BV32_MUL(BV32_SUB(v1, BV32_MUL($j.0, v2)), 4), 2)];
  assert {:sourceloc} {:sourceloc_num 13} true;
  v8 := $$input[BV32_ADD(BV32_MUL(BV32_SUB(v1, BV32_MUL($j.0, v2)), 4), 3)];
  goto $5;
$5:
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  $sum.0, $j.0 := BV_CONCAT(BV_CONCAT(BV_CONCAT(BV32_ADD(BV_EXTRACT($sum.0, 128, 96), v8), BV32_ADD(BV_EXTRACT($sum.0, 96, 64), v7)), BV32_ADD(BV_EXTRACT($sum.0, 64, 32), v6)), BV32_ADD(BV_EXTRACT($sum.0, 32, 0), v5)), BV32_ADD($j.0, 1);
  goto $1;
$6:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  assert {:sourceloc} {:sourceloc_num 16} true;
  $$output[BV32_MUL(v1, 4)] := BV_EXTRACT($sum.0, 32, 0);
  assert {:sourceloc} {:sourceloc_num 17} true;
  $$output[BV32_ADD(BV32_MUL(v1, 4), 1)] := BV_EXTRACT($sum.0, 64, 32);
  assert {:sourceloc} {:sourceloc_num 18} true;
  $$output[BV32_ADD(BV32_MUL(v1, 4), 2)] := BV_EXTRACT($sum.0, 96, 64);
  assert {:sourceloc} {:sourceloc_num 19} true;
  $$output[BV32_ADD(BV32_MUL(v1, 4), 3)] := BV_EXTRACT($sum.0, 128, 96);
  goto $7;
$7:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  return;
$truebb:
  assume {:partition} v3;
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  goto $2;
$falsebb:
  assume {:partition} !v3;
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  goto $6;
$truebb0:
  assume {:partition} v4;
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  goto $3;
$falsebb0:
  assume {:partition} !v4;
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  goto $4;
}
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 256 then 1 else 0) != 0;
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if num_groups_x == 4 then 1 else 0) != 0;
axiom (if num_groups_y == 1024 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
