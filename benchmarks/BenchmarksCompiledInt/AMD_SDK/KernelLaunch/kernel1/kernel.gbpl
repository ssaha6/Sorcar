type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "in"} {:global} $$in : [int]int;
axiom {:array_info "$$in"} {:global} {:elem_width 32} {:source_name "in"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$in : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$in : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$in : bool;

var {:source_name "out"} {:global} $$out : [int]int;
axiom {:array_info "$$out"} {:global} {:elem_width 32} {:source_name "out"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$out : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$out : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$out : bool;

var {:source_name "lcount"} {:group_shared} $$read_kernel.lcount : [int]int;
axiom {:array_info "$$read_kernel.lcount"} {:group_shared} {:elem_width 32} {:source_name "lcount"} {:source_elem_width 32} {:source_dimensions "1"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$read_kernel.lcount : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$read_kernel.lcount : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$read_kernel.lcount : bool;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_UDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_ULT(x : int, y : int) : bool {
  x < y
}
procedure {:source_name "read_kernel"} {:kernel} $read_kernel($ni:int, $val:int, $nk:int)
{
  var $pcount.0:int;
  var $n.0:int;
  var $pcount.1:int;
  var $i.0:int;
  var $idx.0:int;
  var $pcount.2:int;
  var $pcount.3:int;
  var $pcount.4:int;
  var $pcount.5:int;
  var v0:bool;
  var v1:bool;
  var v2:bool;
  var v3:bool;
  var v4:int;
  var v5:int;
  var v6:int;
  var v7:int;
  var v8:bool;
  var v9:int;
  var v10:int;
  var v11:int;
  var v12:int;
  var v13:bool;
  var v14:int;
  var v15:int;
  var v16:int;
  var v17:int;
  var v18:bool;
  var v19:int;
  var v20:int;
  var v21:int;
  var v22:int;
  var v23:bool;
  var v24:int;
  var v25:bool;
  var v26:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  v0 := $nk == 0;
  goto $truebb, $falsebb;
$1:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  goto $22;
$2:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v1 := local_id_x == 0;
  goto $truebb0, $falsebb0;
$3:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  assert {:sourceloc} {:sourceloc_num 4} true;
  $$read_kernel.lcount[0] := 0;
  goto $4;
$4:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  call {:sourceloc_num 6} $bugle_barrier(-1, 0);
  $pcount.0, $n.0 := 0, 0;
  goto $5;
$5:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  v2 := BV32_ULT($n.0, $nk);
  goto $truebb1, $falsebb1;
$6:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  $pcount.1, $i.0, $idx.0 := $pcount.0, 0, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  goto $7;
$7:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  v3 := BV32_ULT($i.0, $ni);
  goto $truebb2, $falsebb2;
$8:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  assert {:sourceloc} {:sourceloc_num 11} true;
  v4 := $$in[BV32_MUL($idx.0, 4)];
  assert {:sourceloc} {:sourceloc_num 12} true;
  v5 := $$in[BV32_ADD(BV32_MUL($idx.0, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 13} true;
  v6 := $$in[BV32_ADD(BV32_MUL($idx.0, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 14} true;
  v7 := $$in[BV32_ADD(BV32_MUL($idx.0, 4), 3)];
  v8 := v4 == $val;
  goto $truebb3, $falsebb3;
$9:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  $pcount.2 := BV32_ADD($pcount.1, 1);
  goto $10;
$10:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  assert {:sourceloc} {:sourceloc_num 17} true;
  v9 := $$in[BV32_MUL($idx.0, 4)];
  assert {:sourceloc} {:sourceloc_num 18} true;
  v10 := $$in[BV32_ADD(BV32_MUL($idx.0, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 19} true;
  v11 := $$in[BV32_ADD(BV32_MUL($idx.0, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 20} true;
  v12 := $$in[BV32_ADD(BV32_MUL($idx.0, 4), 3)];
  v13 := v10 == $val;
  goto $truebb4, $falsebb4;
$11:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  $pcount.3 := BV32_ADD($pcount.2, 1);
  goto $12;
$12:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  assert {:sourceloc} {:sourceloc_num 23} true;
  v14 := $$in[BV32_MUL($idx.0, 4)];
  assert {:sourceloc} {:sourceloc_num 24} true;
  v15 := $$in[BV32_ADD(BV32_MUL($idx.0, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 25} true;
  v16 := $$in[BV32_ADD(BV32_MUL($idx.0, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 26} true;
  v17 := $$in[BV32_ADD(BV32_MUL($idx.0, 4), 3)];
  v18 := v16 == $val;
  goto $truebb5, $falsebb5;
$13:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  $pcount.4 := BV32_ADD($pcount.3, 1);
  goto $14;
$14:
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  assert {:sourceloc} {:sourceloc_num 29} true;
  v19 := $$in[BV32_MUL($idx.0, 4)];
  assert {:sourceloc} {:sourceloc_num 30} true;
  v20 := $$in[BV32_ADD(BV32_MUL($idx.0, 4), 1)];
  assert {:sourceloc} {:sourceloc_num 31} true;
  v21 := $$in[BV32_ADD(BV32_MUL($idx.0, 4), 2)];
  assert {:sourceloc} {:sourceloc_num 32} true;
  v22 := $$in[BV32_ADD(BV32_MUL($idx.0, 4), 3)];
  v23 := v22 == $val;
  goto $truebb6, $falsebb6;
$15:
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  $pcount.5 := BV32_ADD($pcount.4, 1);
  goto $16;
$16:
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  goto $17;
$17:
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  $pcount.1, $i.0, $idx.0 := $pcount.5, BV32_ADD($i.0, 1), BV32_ADD($idx.0, BV32_MUL(group_size_x, num_groups_x));
  goto $7;
$18:
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  goto $19;
$19:
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  $pcount.0, $n.0 := $pcount.1, BV32_ADD($n.0, 1);
  goto $5;
$20:
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  assert {:sourceloc} {:sourceloc_num 39} true;
  call {:atomic} {:atomic_function "__bugle_atomic_add_local_uint"} {:arg1 $pcount.0} {:parts 1} {:part 1} v24, $$read_kernel.lcount := _ATOMIC_OP32($$read_kernel.lcount, 0);
  call {:sourceloc_num 40} $bugle_barrier(-1, 0);
  v25 := local_id_x == 0;
  goto $truebb7, $falsebb7;
$21:
  assert {:block_sourceloc} {:sourceloc_num 41} true;
  assert {:sourceloc} {:sourceloc_num 42} true;
  v26 := $$read_kernel.lcount[0];
  assert {:sourceloc} {:sourceloc_num 43} true;
  $$out[group_id_x] := BV32_UDIV(v26, $nk);
  goto $22;
$22:
  assert {:block_sourceloc} {:sourceloc_num 44} true;
  return;
$truebb:
  assume {:partition} v0;
  assert {:block_sourceloc} {:sourceloc_num 45} true;
  goto $1;
$falsebb:
  assume {:partition} !v0;
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  goto $2;
$truebb0:
  assume {:partition} v1;
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  goto $3;
$falsebb0:
  assume {:partition} !v1;
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  goto $4;
$truebb1:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 49} true;
  goto $6;
$falsebb1:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 50} true;
  goto $20;
$truebb2:
  assume {:partition} v3;
  assert {:block_sourceloc} {:sourceloc_num 51} true;
  goto $8;
$falsebb2:
  assume {:partition} !v3;
  assert {:block_sourceloc} {:sourceloc_num 52} true;
  goto $18;
$truebb3:
  assume {:partition} v8;
  assert {:block_sourceloc} {:sourceloc_num 53} true;
  goto $9;
$falsebb3:
  assume {:partition} !v8;
  assert {:block_sourceloc} {:sourceloc_num 54} true;
  $pcount.2 := $pcount.1;
  goto $10;
$truebb4:
  assume {:partition} v13;
  assert {:block_sourceloc} {:sourceloc_num 55} true;
  goto $11;
$falsebb4:
  assume {:partition} !v13;
  assert {:block_sourceloc} {:sourceloc_num 56} true;
  $pcount.3 := $pcount.2;
  goto $12;
$truebb5:
  assume {:partition} v18;
  assert {:block_sourceloc} {:sourceloc_num 57} true;
  goto $13;
$falsebb5:
  assume {:partition} !v18;
  assert {:block_sourceloc} {:sourceloc_num 58} true;
  $pcount.4 := $pcount.3;
  goto $14;
$truebb6:
  assume {:partition} v23;
  assert {:block_sourceloc} {:sourceloc_num 59} true;
  goto $15;
$falsebb6:
  assume {:partition} !v23;
  assert {:block_sourceloc} {:sourceloc_num 60} true;
  $pcount.5 := $pcount.4;
  goto $16;
$truebb7:
  assume {:partition} v25;
  assert {:block_sourceloc} {:sourceloc_num 61} true;
  goto $21;
$falsebb7:
  assume {:partition} !v25;
  assert {:block_sourceloc} {:sourceloc_num 62} true;
  goto $22;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:int, $1:int);
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 64 then 1 else 0) != 0;
axiom (if num_groups_x == 16 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
