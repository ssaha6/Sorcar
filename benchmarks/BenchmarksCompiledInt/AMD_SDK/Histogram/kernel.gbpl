type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
procedure _ATOMIC_OP8(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "data"} {:global} $$data : [int]int;
axiom {:array_info "$$data"} {:global} {:elem_width 32} {:source_name "data"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$data : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$data : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$data : bool;

var {:source_name "sharedArray"} {:group_shared} $$sharedArray : [int]int;
axiom {:array_info "$$sharedArray"} {:group_shared} {:elem_width 8} {:source_name "sharedArray"} {:source_elem_width 8} {:source_dimensions "*"} true;
var {:race_checking} {:group_shared} {:elem_width 8} {:source_elem_width 8} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$sharedArray : bool;
var {:race_checking} {:group_shared} {:elem_width 8} {:source_elem_width 8} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$sharedArray : bool;
var {:race_checking} {:group_shared} {:elem_width 8} {:source_elem_width 8} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$sharedArray : bool;

var {:source_name "binResult"} {:global} $$binResult : [int]int;
axiom {:array_info "$$binResult"} {:global} {:elem_width 32} {:source_name "binResult"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$binResult : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$binResult : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$binResult : bool;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
function {:inline true} BV32_SLT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV32_UDIV(x : int, y : int) : int {
  x div y
}
function {:inline true} BV32_ULT(x : int, y : int) : bool {
  x < y
}
function {:inline true} BV8_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV8_ZEXT32(x : int) : int {
  x
}
procedure {:source_name "histogram256"} {:kernel} $histogram256()
{
  var $i.0:int;
  var $i1.0:int;
  var $i2.0:int;
  var $binCount.0:int;
  var $j.0:int;
  var v0:int;
  var v1:int;
  var v2:int;
  var v3:bool;
  var v4:bool;
  var v5:int;
  var v6:int;
  var v7:int;
  var v8:bool;
  var v9:bool;
  var v10:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  v0 := local_id_x;
  v1 := group_id_x;
  v2 := group_size_x;
  $i.0 := 0;
  goto $1;
$1:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  v3 := BV32_SLT($i.0, 256);
  goto $truebb, $falsebb;
$2:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  assert {:sourceloc} {:sourceloc_num 3} true;
  $$sharedArray[BV32_ADD(BV32_MUL(v0, 256), $i.0)] := 0;
  goto $3;
$3:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  $i.0 := BV32_ADD($i.0, 1);
  goto $1;
$4:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  call {:sourceloc_num 6} $bugle_barrier(-1, 0);
  $i1.0 := 0;
  goto $5;
$5:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  v4 := BV32_SLT($i1.0, 256);
  goto $truebb0, $falsebb0;
$6:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  assert {:sourceloc} {:sourceloc_num 9} true;
  v5 := $$data[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v1, v2), 256), BV32_MUL($i1.0, v2)), v0)];
  v6 := BV32_MUL(v0, 256);
  assert {:sourceloc} {:sourceloc_num 10} true;
  v7 := $$sharedArray[v6];
  assert {:sourceloc} {:sourceloc_num 11} true;
  $$sharedArray[v6] := BV8_ADD(v7, 1);
  goto $7;
$7:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  $i1.0 := BV32_ADD($i1.0, 1);
  goto $5;
$8:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  call {:sourceloc_num 14} $bugle_barrier(-1, 0);
  $i2.0 := 0;
  goto $9;
$9:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  v8 := BV32_ULT($i2.0, BV32_UDIV(256, v2));
  goto $truebb1, $falsebb1;
$10:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  $binCount.0, $j.0 := 0, 0;
  goto $11;
$11:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  v9 := BV32_ULT($j.0, v2);
  goto $truebb2, $falsebb2;
$12:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  assert {:sourceloc} {:sourceloc_num 19} true;
  v10 := $$sharedArray[BV32_ADD(BV32_ADD(BV32_MUL($j.0, 256), BV32_MUL($i2.0, v2)), v0)];
  goto $13;
$13:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  $binCount.0, $j.0 := BV32_ADD($binCount.0, BV8_ZEXT32(v10)), BV32_ADD($j.0, 1);
  goto $11;
$14:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  assert {:sourceloc} {:sourceloc_num 22} true;
  $$binResult[BV32_ADD(BV32_ADD(BV32_MUL(v1, 256), BV32_MUL($i2.0, v2)), v0)] := $binCount.0;
  goto $15;
$15:
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  $i2.0 := BV32_ADD($i2.0, 1);
  goto $9;
$16:
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  return;
$truebb:
  assume {:partition} v3;
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  goto $2;
$falsebb:
  assume {:partition} !v3;
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  goto $4;
$truebb0:
  assume {:partition} v4;
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  goto $6;
$falsebb0:
  assume {:partition} !v4;
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  goto $8;
$truebb1:
  assume {:partition} v8;
  assert {:block_sourceloc} {:sourceloc_num 29} true;
  goto $10;
$falsebb1:
  assume {:partition} !v8;
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  goto $16;
$truebb2:
  assume {:partition} v9;
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  goto $12;
$falsebb2:
  assume {:partition} !v9;
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  goto $14;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:int, $1:int);
axiom (if group_size_y == 1 then 1 else 0) != 0;
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_y == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 128 then 1 else 0) != 0;
axiom (if num_groups_x == 32 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
