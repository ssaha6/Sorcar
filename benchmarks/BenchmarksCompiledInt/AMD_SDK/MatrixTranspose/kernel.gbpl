type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [int]int, y : int) returns (z : int, A : [int]int);
var {:source_name "output"} {:global} $$output : [int]int;
axiom {:array_info "$$output"} {:global} {:elem_width 32} {:source_name "output"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$output : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$output : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$output : bool;

var {:source_name "input"} {:global} $$input : [int]int;
axiom {:array_info "$$input"} {:global} {:elem_width 32} {:source_name "input"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$input : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$input : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$input : bool;

var {:source_name "block"} {:group_shared} $$block : [int]int;
axiom {:array_info "$$block"} {:group_shared} {:elem_width 32} {:source_name "block"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$block : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$block : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$block : bool;

const _WATCHED_OFFSET : int;
const {:global_offset_x} global_offset_x : int;
const {:global_offset_y} global_offset_y : int;
const {:global_offset_z} global_offset_z : int;
const {:group_id_x} group_id_x : int;
const {:group_id_y} group_id_y : int;
const {:group_size_x} group_size_x : int;
const {:group_size_y} group_size_y : int;
const {:group_size_z} group_size_z : int;
const {:local_id_x} local_id_x : int;
const {:local_id_y} local_id_y : int;
const {:num_groups_x} num_groups_x : int;
const {:num_groups_y} num_groups_y : int;
const {:num_groups_z} num_groups_z : int;
function {:inline true} BV32_ADD(x : int, y : int) : int {
  x + y
}
function {:inline true} BV32_MUL(x : int, y : int) : int {
  x * y
}
procedure {:source_name "matrixTranspose"} {:kernel} $matrixTranspose($width:int, $height:int, $blockSize:int)
requires {:sourceloc_num 0} (if $blockSize == 16 then 1 else 0) != 0;
requires {:sourceloc_num 1} (if $width == 128 then 1 else 0) != 0;
requires {:sourceloc_num 2} (if $height == 128 then 1 else 0) != 0;
{
  var v0:int;
  var v1:int;
  var v2:int;
  var v3:int;
$0:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  v0 := local_id_x;
  v1 := local_id_y;
  assert {:sourceloc} {:sourceloc_num 4} true;
  v2 := $$input[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(group_id_y, group_size_y), local_id_y), $width), BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 5} true;
  $$block[BV32_ADD(BV32_MUL(v1, $blockSize), v0)] := v2;
  call {:sourceloc_num 6} $bugle_barrier(-1, 0);
  assert {:sourceloc} {:sourceloc_num 7} true;
  v3 := $$block[BV32_ADD(BV32_MUL(v1, $blockSize), v0)];
  assert {:sourceloc} {:sourceloc_num 8} true;
  $$output[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(group_id_x, $blockSize), v0), $height), BV32_ADD(BV32_MUL(group_id_y, $blockSize), v1))] := v3;
  return;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:int, $1:int);
axiom (if group_size_z == 1 then 1 else 0) != 0;
axiom (if num_groups_z == 1 then 1 else 0) != 0;
axiom (if group_size_x == 16 then 1 else 0) != 0;
axiom (if group_size_y == 16 then 1 else 0) != 0;
axiom (if num_groups_x == 8 then 1 else 0) != 0;
axiom (if num_groups_y == 8 then 1 else 0) != 0;
axiom (if global_offset_x == 0 then 1 else 0) != 0;
axiom (if global_offset_y == 0 then 1 else 0) != 0;
axiom (if global_offset_z == 0 then 1 else 0) != 0;
