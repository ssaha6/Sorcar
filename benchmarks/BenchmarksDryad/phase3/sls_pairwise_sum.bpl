
const {:existential true} b0000 : bool;
const {:existential true} b0001 : bool;
const {:existential true} b0002 : bool;
const {:existential true} b0003 : bool;
const {:existential true} b0004 : bool;
const {:existential true} b0005 : bool;
const {:existential true} b0006 : bool;
const {:existential true} b0007 : bool;
const {:existential true} b0008 : bool;
const {:existential true} b0009 : bool;
const {:existential true} b0010 : bool;
const {:existential true} b0011 : bool;
const {:existential true} b0012 : bool;
const {:existential true} b0013 : bool;
const {:existential true} b0014 : bool;
const {:existential true} b0015 : bool;
const {:existential true} b0016 : bool;
const {:existential true} b0017 : bool;
const {:existential true} b0018 : bool;
const {:existential true} b0019 : bool;
const {:existential true} b0020 : bool;
const {:existential true} b0021 : bool;
const {:existential true} b0022 : bool;
const {:existential true} b0023 : bool;
const {:existential true} b0024 : bool;
const {:existential true} b0025 : bool;
const {:existential true} b0026 : bool;
const {:existential true} b0027 : bool;
const {:existential true} b0028 : bool;
const {:existential true} b0029 : bool;
const {:existential true} b0030 : bool;
const {:existential true} b0031 : bool;
const {:existential true} b0032 : bool;
const {:existential true} b0033 : bool;
const {:existential true} b0034 : bool;
const {:existential true} b0035 : bool;
const {:existential true} b0036 : bool;
const {:existential true} b0037 : bool;
const {:existential true} b0038 : bool;
const {:existential true} b0039 : bool;
const {:existential true} b0040 : bool;
const {:existential true} b0041 : bool;
const {:existential true} b0042 : bool;
const {:existential true} b0043 : bool;
const {:existential true} b0044 : bool;
const {:existential true} b0045 : bool;
const {:existential true} b0046 : bool;
const {:existential true} b0047 : bool;
const {:existential true} b0048 : bool;
const {:existential true} b0049 : bool;
const {:existential true} b0050 : bool;
const {:existential true} b0051 : bool;
const {:existential true} b0052 : bool;
const {:existential true} b0053 : bool;
const {:existential true} b0054 : bool;
const {:existential true} b0055 : bool;
const {:existential true} b0056 : bool;
const {:existential true} b0057 : bool;
const {:existential true} b0058 : bool;
const {:existential true} b0059 : bool;
const {:existential true} b0060 : bool;
const {:existential true} b0061 : bool;
const {:existential true} b0062 : bool;
const {:existential true} b0063 : bool;
const {:existential true} b0064 : bool;
const {:existential true} b0065 : bool;
const {:existential true} b0066 : bool;
const {:existential true} b0067 : bool;
const {:existential true} b0068 : bool;
const {:existential true} b0069 : bool;
const {:existential true} b0070 : bool;
const {:existential true} b0071 : bool;
const {:existential true} b0072 : bool;
const {:existential true} b0073 : bool;
const {:existential true} b0074 : bool;
const {:existential true} b0075 : bool;
const {:existential true} b0076 : bool;
const {:existential true} b0077 : bool;
const {:existential true} b0078 : bool;
const {:existential true} b0079 : bool;
const {:existential true} b0080 : bool;
const {:existential true} b0081 : bool;
const {:existential true} b0082 : bool;
const {:existential true} b0083 : bool;
const {:existential true} b0084 : bool;
const {:existential true} b0085 : bool;
const {:existential true} b0086 : bool;
const {:existential true} b0087 : bool;
const {:existential true} b0088 : bool;
const {:existential true} b0089 : bool;
const {:existential true} b0090 : bool;
const {:existential true} b0091 : bool;
const {:existential true} b0092 : bool;
const {:existential true} b0093 : bool;
const {:existential true} b0094 : bool;
const {:existential true} b0095 : bool;
const {:existential true} b0096 : bool;
const {:existential true} b0097 : bool;
const {:existential true} b0098 : bool;
const {:existential true} b0099 : bool;
const {:existential true} b0100 : bool;
const {:existential true} b0101 : bool;
const {:existential true} b0102 : bool;
const {:existential true} b0103 : bool;
const {:existential true} b0104 : bool;
const {:existential true} b0105 : bool;
const {:existential true} b0106 : bool;
const {:existential true} b0107 : bool;
const {:existential true} b0108 : bool;
const {:existential true} b0109 : bool;
const {:existential true} b0110 : bool;
const {:existential true} b0111 : bool;
const {:existential true} b0112 : bool;
const {:existential true} b0113 : bool;
const {:existential true} b0114 : bool;
const {:existential true} b0115 : bool;
const {:existential true} b0116 : bool;
const {:existential true} b0117 : bool;
const {:existential true} b0118 : bool;
const {:existential true} b0119 : bool;
const {:existential true} b0120 : bool;
const {:existential true} b0121 : bool;
const {:existential true} b0122 : bool;
const {:existential true} b0123 : bool;
const {:existential true} b0124 : bool;
const {:existential true} b0125 : bool;
const {:existential true} b0126 : bool;
const {:existential true} b0127 : bool;
const {:existential true} b0128 : bool;
const {:existential true} b0129 : bool;
const {:existential true} b0130 : bool;
const {:existential true} b0131 : bool;
const {:existential true} b0132 : bool;
const {:existential true} b0133 : bool;
const {:existential true} b0134 : bool;
const {:existential true} b0135 : bool;
const {:existential true} b0136 : bool;
const {:existential true} b0137 : bool;
const {:existential true} b0138 : bool;
const {:existential true} b0139 : bool;
const {:existential true} b0140 : bool;
const {:existential true} b0141 : bool;
const {:existential true} b0142 : bool;
const {:existential true} b0143 : bool;
const {:existential true} b0144 : bool;
const {:existential true} b0145 : bool;
const {:existential true} b0146 : bool;
const {:existential true} b0147 : bool;
const {:existential true} b0148 : bool;
const {:existential true} b0149 : bool;
const {:existential true} b0150 : bool;
const {:existential true} b0151 : bool;
const {:existential true} b0152 : bool;
const {:existential true} b0153 : bool;
const {:existential true} b0154 : bool;
const {:existential true} b0155 : bool;
const {:existential true} b0156 : bool;
const {:existential true} b0157 : bool;
const {:existential true} b0158 : bool;
const {:existential true} b0159 : bool;
const {:existential true} b0160 : bool;
const {:existential true} b0161 : bool;
const {:existential true} b0162 : bool;
const {:existential true} b0163 : bool;
const {:existential true} b0164 : bool;
const {:existential true} b0165 : bool;
const {:existential true} b0166 : bool;
const {:existential true} b0167 : bool;
const {:existential true} b0168 : bool;
const {:existential true} b0169 : bool;
const {:existential true} b0170 : bool;
const {:existential true} b0171 : bool;
const {:existential true} b0172 : bool;
const {:existential true} b0173 : bool;
const {:existential true} b0174 : bool;
const {:existential true} b0175 : bool;
const {:existential true} b0176 : bool;
const {:existential true} b0177 : bool;
const {:existential true} b0178 : bool;
const {:existential true} b0179 : bool;
const {:existential true} b0180 : bool;
const {:existential true} b0181 : bool;
const {:existential true} b0182 : bool;
const {:existential true} b0183 : bool;
const {:existential true} b0184 : bool;
const {:existential true} b0185 : bool;
const {:existential true} b0186 : bool;
const {:existential true} b0187 : bool;
const {:existential true} b0188 : bool;
const {:existential true} b0189 : bool;
const {:existential true} b0190 : bool;
const {:existential true} b0191 : bool;
const {:existential true} b0192 : bool;
const {:existential true} b0193 : bool;
const {:existential true} b0194 : bool;
const {:existential true} b0195 : bool;
const {:existential true} b0196 : bool;
const {:existential true} b0197 : bool;
const {:existential true} b0198 : bool;
const {:existential true} b0199 : bool;
const {:existential true} b0200 : bool;
const {:existential true} b0201 : bool;
const {:existential true} b0202 : bool;
const {:existential true} b0203 : bool;
const {:existential true} b0204 : bool;
const {:existential true} b0205 : bool;
const {:existential true} b0206 : bool;
const {:existential true} b0207 : bool;
const {:existential true} b0208 : bool;
const {:existential true} b0209 : bool;
const {:existential true} b0210 : bool;
const {:existential true} b0211 : bool;
const {:existential true} b0212 : bool;
const {:existential true} b0213 : bool;
const {:existential true} b0214 : bool;
const {:existential true} b0215 : bool;
const {:existential true} b0216 : bool;
const {:existential true} b0217 : bool;
const {:existential true} b0218 : bool;
const {:existential true} b0219 : bool;
const {:existential true} b0220 : bool;
const {:existential true} b0221 : bool;
const {:existential true} b0222 : bool;
const {:existential true} b0223 : bool;
const {:existential true} b0224 : bool;
const {:existential true} b0225 : bool;
const {:existential true} b0226 : bool;
const {:existential true} b0227 : bool;
const {:existential true} b0228 : bool;
const {:existential true} b0229 : bool;
const {:existential true} b0230 : bool;
const {:existential true} b0231 : bool;
const {:existential true} b0232 : bool;
const {:existential true} b0233 : bool;
const {:existential true} b0234 : bool;
const {:existential true} b0235 : bool;
const {:existential true} b0236 : bool;
const {:existential true} b0237 : bool;
const {:existential true} b0238 : bool;
const {:existential true} b0239 : bool;
const {:existential true} b0240 : bool;
const {:existential true} b0241 : bool;
const {:existential true} b0242 : bool;
const {:existential true} b0243 : bool;
const {:existential true} b0244 : bool;
const {:existential true} b0245 : bool;
const {:existential true} b0246 : bool;
const {:existential true} b0247 : bool;
const {:existential true} b0248 : bool;
const {:existential true} b0249 : bool;
const {:existential true} b0250 : bool;
const {:existential true} b0251 : bool;
const {:existential true} b0252 : bool;
const {:existential true} b0253 : bool;
const {:existential true} b0254 : bool;
const {:existential true} b0255 : bool;
const {:existential true} b0256 : bool;
const {:existential true} b0257 : bool;
const {:existential true} b0258 : bool;
const {:existential true} b0259 : bool;
const {:existential true} b0260 : bool;
const {:existential true} b0261 : bool;
const {:existential true} b0262 : bool;
const {:existential true} b0263 : bool;
const {:existential true} b0264 : bool;
const {:existential true} b0265 : bool;
const {:existential true} b0266 : bool;
const {:existential true} b0267 : bool;
const {:existential true} b0268 : bool;
const {:existential true} b0269 : bool;
const {:existential true} b0270 : bool;
const {:existential true} b0271 : bool;
const {:existential true} b0272 : bool;
const {:existential true} b0273 : bool;
const {:existential true} b0274 : bool;
const {:existential true} b0275 : bool;
const {:existential true} b0276 : bool;
const {:existential true} b0277 : bool;
const {:existential true} b0278 : bool;
const {:existential true} b0279 : bool;
const {:existential true} b0280 : bool;
const {:existential true} b0281 : bool;
const {:existential true} b0282 : bool;
const {:existential true} b0283 : bool;
const {:existential true} b0284 : bool;
const {:existential true} b0285 : bool;
const {:existential true} b0286 : bool;
const {:existential true} b0287 : bool;
const {:existential true} b0288 : bool;
const {:existential true} b0289 : bool;
const {:existential true} b0290 : bool;
const {:existential true} b0291 : bool;
const {:existential true} b0292 : bool;
const {:existential true} b0293 : bool;
const {:existential true} b0294 : bool;
const {:existential true} b0295 : bool;
const {:existential true} b0296 : bool;
const {:existential true} b0297 : bool;
const {:existential true} b0298 : bool;
const {:existential true} b0299 : bool;
const {:existential true} b0300 : bool;
const {:existential true} b0301 : bool;
const {:existential true} b0302 : bool;
const {:existential true} b0303 : bool;
const {:existential true} b0304 : bool;
const {:existential true} b0305 : bool;
const {:existential true} b0306 : bool;
const {:existential true} b0307 : bool;
const {:existential true} b0308 : bool;
const {:existential true} b0309 : bool;
const {:existential true} b0310 : bool;
const {:existential true} b0311 : bool;
const {:existential true} b0312 : bool;
const {:existential true} b0313 : bool;
const {:existential true} b0314 : bool;
const {:existential true} b0315 : bool;
const {:existential true} b0316 : bool;
const {:existential true} b0317 : bool;
const {:existential true} b0318 : bool;
const {:existential true} b0319 : bool;
const {:existential true} b0320 : bool;
const {:existential true} b0321 : bool;
const {:existential true} b0322 : bool;
const {:existential true} b0323 : bool;
const {:existential true} b0324 : bool;
const {:existential true} b0325 : bool;
const {:existential true} b0326 : bool;
const {:existential true} b0327 : bool;
const {:existential true} b0328 : bool;
const {:existential true} b0329 : bool;
const {:existential true} b0330 : bool;
const {:existential true} b0331 : bool;
const {:existential true} b0332 : bool;
const {:existential true} b0333 : bool;
const {:existential true} b0334 : bool;
const {:existential true} b0335 : bool;
const {:existential true} b0336 : bool;
const {:existential true} b0337 : bool;
const {:existential true} b0338 : bool;
const {:existential true} b0339 : bool;
const {:existential true} b0340 : bool;
const {:existential true} b0341 : bool;
const {:existential true} b0342 : bool;
const {:existential true} b0343 : bool;
const {:existential true} b0344 : bool;
const {:existential true} b0345 : bool;
const {:existential true} b0346 : bool;
const {:existential true} b0347 : bool;
const {:existential true} b0348 : bool;
const {:existential true} b0349 : bool;
const {:existential true} b0350 : bool;
const {:existential true} b0351 : bool;
const {:existential true} b0352 : bool;
const {:existential true} b0353 : bool;
const {:existential true} b0354 : bool;
const {:existential true} b0355 : bool;
const {:existential true} b0356 : bool;
const {:existential true} b0357 : bool;
const {:existential true} b0358 : bool;
const {:existential true} b0359 : bool;
const {:existential true} b0360 : bool;
const {:existential true} b0361 : bool;
const {:existential true} b0362 : bool;
const {:existential true} b0363 : bool;
const {:existential true} b0364 : bool;
const {:existential true} b0365 : bool;
const {:existential true} b0366 : bool;
const {:existential true} b0367 : bool;
const {:existential true} b0368 : bool;
const {:existential true} b0369 : bool;
const {:existential true} b0370 : bool;
const {:existential true} b0371 : bool;
const {:existential true} b0372 : bool;
const {:existential true} b0373 : bool;
const {:existential true} b0374 : bool;
const {:existential true} b0375 : bool;
const {:existential true} b0376 : bool;
const {:existential true} b0377 : bool;
const {:existential true} b0378 : bool;
const {:existential true} b0379 : bool;
const {:existential true} b0380 : bool;
const {:existential true} b0381 : bool;
const {:existential true} b0382 : bool;
const {:existential true} b0383 : bool;
const {:existential true} b0384 : bool;
const {:existential true} b0385 : bool;
const {:existential true} b0386 : bool;
const {:existential true} b0387 : bool;
const {:existential true} b0388 : bool;
const {:existential true} b0389 : bool;
const {:existential true} b0390 : bool;
const {:existential true} b0391 : bool;
const {:existential true} b0392 : bool;
const {:existential true} b0393 : bool;
const {:existential true} b0394 : bool;
const {:existential true} b0395 : bool;
const {:existential true} b0396 : bool;
const {:existential true} b0397 : bool;
const {:existential true} b0398 : bool;
const {:existential true} b0399 : bool;
const {:existential true} b0400 : bool;
const {:existential true} b0401 : bool;
const {:existential true} b0402 : bool;
const {:existential true} b0403 : bool;
const {:existential true} b0404 : bool;
const {:existential true} b0405 : bool;
const {:existential true} b0406 : bool;
const {:existential true} b0407 : bool;
const {:existential true} b0408 : bool;
const {:existential true} b0409 : bool;
const {:existential true} b0410 : bool;
const {:existential true} b0411 : bool;
const {:existential true} b0412 : bool;
const {:existential true} b0413 : bool;
const {:existential true} b0414 : bool;
const {:existential true} b0415 : bool;
const {:existential true} b0416 : bool;
const {:existential true} b0417 : bool;
const {:existential true} b0418 : bool;
const {:existential true} b0419 : bool;
const {:existential true} b0420 : bool;
const {:existential true} b0421 : bool;
const {:existential true} b0422 : bool;
const {:existential true} b0423 : bool;
const {:existential true} b0424 : bool;
const {:existential true} b0425 : bool;
const {:existential true} b0426 : bool;
const {:existential true} b0427 : bool;
const {:existential true} b0428 : bool;
const {:existential true} b0429 : bool;
const {:existential true} b0430 : bool;
const {:existential true} b0431 : bool;
const {:existential true} b0432 : bool;
const {:existential true} b0433 : bool;
const {:existential true} b0434 : bool;
const {:existential true} b0435 : bool;
const {:existential true} b0436 : bool;
const {:existential true} b0437 : bool;
const {:existential true} b0438 : bool;
const {:existential true} b0439 : bool;
const {:existential true} b0440 : bool;
const {:existential true} b0441 : bool;
const {:existential true} b0442 : bool;
const {:existential true} b0443 : bool;
const {:existential true} b0444 : bool;
const {:existential true} b0445 : bool;
const {:existential true} b0446 : bool;
const {:existential true} b0447 : bool;
const {:existential true} b0448 : bool;
const {:existential true} b0449 : bool;
const {:existential true} b0450 : bool;
const {:existential true} b0451 : bool;
const {:existential true} b0452 : bool;
const {:existential true} b0453 : bool;
const {:existential true} b0454 : bool;
const {:existential true} b0455 : bool;
const {:existential true} b0456 : bool;
const {:existential true} b0457 : bool;
const {:existential true} b0458 : bool;
const {:existential true} b0459 : bool;
const {:existential true} b0460 : bool;
const {:existential true} b0461 : bool;
const {:existential true} b0462 : bool;
const {:existential true} b0463 : bool;
const {:existential true} b0464 : bool;
const {:existential true} b0465 : bool;
const {:existential true} b0466 : bool;
const {:existential true} b0467 : bool;
const {:existential true} b0468 : bool;
const {:existential true} b0469 : bool;
const {:existential true} b0470 : bool;
const {:existential true} b0471 : bool;
const {:existential true} b0472 : bool;
const {:existential true} b0473 : bool;
const {:existential true} b0474 : bool;
const {:existential true} b0475 : bool;
const {:existential true} b0476 : bool;
const {:existential true} b0477 : bool;
const {:existential true} b0478 : bool;
const {:existential true} b0479 : bool;
const {:existential true} b0480 : bool;
const {:existential true} b0481 : bool;
const {:existential true} b0482 : bool;
const {:existential true} b0483 : bool;
const {:existential true} b0484 : bool;
const {:existential true} b0485 : bool;
const {:existential true} b0486 : bool;
const {:existential true} b0487 : bool;
const {:existential true} b0488 : bool;
const {:existential true} b0489 : bool;
const {:existential true} b0490 : bool;
const {:existential true} b0491 : bool;
const {:existential true} b0492 : bool;
const {:existential true} b0493 : bool;
const {:existential true} b0494 : bool;
const {:existential true} b0495 : bool;
const {:existential true} b0496 : bool;
const {:existential true} b0497 : bool;
const {:existential true} b0498 : bool;
const {:existential true} b0499 : bool;
const {:existential true} b0500 : bool;
const {:existential true} b0501 : bool;
const {:existential true} b0502 : bool;
const {:existential true} b0503 : bool;
const {:existential true} b0504 : bool;
const {:existential true} b0505 : bool;
const {:existential true} b0506 : bool;
const {:existential true} b0507 : bool;
const {:existential true} b0508 : bool;
const {:existential true} b0509 : bool;
const {:existential true} b0510 : bool;
const {:existential true} b0511 : bool;
const {:existential true} b0512 : bool;
const {:existential true} b0513 : bool;
const {:existential true} b0514 : bool;
const {:existential true} b0515 : bool;
const {:existential true} b0516 : bool;
const {:existential true} b0517 : bool;
const {:existential true} b0518 : bool;
const {:existential true} b0519 : bool;
const {:existential true} b0520 : bool;
const {:existential true} b0521 : bool;
const {:existential true} b0522 : bool;
const {:existential true} b0523 : bool;
const {:existential true} b0524 : bool;
const {:existential true} b0525 : bool;
const {:existential true} b0526 : bool;
const {:existential true} b0527 : bool;
const {:existential true} b0528 : bool;
const {:existential true} b0529 : bool;
const {:existential true} b0530 : bool;
const {:existential true} b0531 : bool;
const {:existential true} b0532 : bool;
const {:existential true} b0533 : bool;
const {:existential true} b0534 : bool;
const {:existential true} b0535 : bool;
const {:existential true} b0536 : bool;
const {:existential true} b0537 : bool;
const {:existential true} b0538 : bool;
const {:existential true} b0539 : bool;
const {:existential true} b0540 : bool;
const {:existential true} b0541 : bool;
const {:existential true} b0542 : bool;
const {:existential true} b0543 : bool;
const {:existential true} b0544 : bool;
const {:existential true} b0545 : bool;
const {:existential true} b0546 : bool;
const {:existential true} b0547 : bool;
const {:existential true} b0548 : bool;
const {:existential true} b0549 : bool;
const {:existential true} b0550 : bool;
const {:existential true} b0551 : bool;
const {:existential true} b0552 : bool;
const {:existential true} b0553 : bool;
const {:existential true} b0554 : bool;
const {:existential true} b0555 : bool;
const {:existential true} b0556 : bool;
const {:existential true} b0557 : bool;
const {:existential true} b0558 : bool;
const {:existential true} b0559 : bool;
const {:existential true} b0560 : bool;
const {:existential true} b0561 : bool;
const {:existential true} b0562 : bool;
const {:existential true} b0563 : bool;
const {:existential true} b0564 : bool;
const {:existential true} b0565 : bool;
const {:existential true} b0566 : bool;
const {:existential true} b0567 : bool;
const {:existential true} b0568 : bool;
const {:existential true} b0569 : bool;
const {:existential true} b0570 : bool;
const {:existential true} b0571 : bool;
const {:existential true} b0572 : bool;
const {:existential true} b0573 : bool;
const {:existential true} b0574 : bool;
const {:existential true} b0575 : bool;
const {:existential true} b0576 : bool;
const {:existential true} b0577 : bool;
const {:existential true} b0578 : bool;
const {:existential true} b0579 : bool;
const {:existential true} b0580 : bool;
const {:existential true} b0581 : bool;
const {:existential true} b0582 : bool;
const {:existential true} b0583 : bool;
const {:existential true} b0584 : bool;
const {:existential true} b0585 : bool;
const {:existential true} b0586 : bool;
const {:existential true} b0587 : bool;
const {:existential true} b0588 : bool;
const {:existential true} b0589 : bool;
const {:existential true} b0590 : bool;
const {:existential true} b0591 : bool;
const {:existential true} b0592 : bool;
const {:existential true} b0593 : bool;
const {:existential true} b0594 : bool;
const {:existential true} b0595 : bool;
const {:existential true} b0596 : bool;
const {:existential true} b0597 : bool;
const {:existential true} b0598 : bool;
const {:existential true} b0599 : bool;
const {:existential true} b0600 : bool;
const {:existential true} b0601 : bool;
const {:existential true} b0602 : bool;
const {:existential true} b0603 : bool;
const {:existential true} b0604 : bool;
const {:existential true} b0605 : bool;
const {:existential true} b0606 : bool;
const {:existential true} b0607 : bool;
const {:existential true} b0608 : bool;
const {:existential true} b0609 : bool;
const {:existential true} b0610 : bool;
const {:existential true} b0611 : bool;
const {:existential true} b0612 : bool;
const {:existential true} b0613 : bool;
const {:existential true} b0614 : bool;
const {:existential true} b0615 : bool;
const {:existential true} b0616 : bool;
const {:existential true} b0617 : bool;
const {:existential true} b0618 : bool;
const {:existential true} b0619 : bool;
const {:existential true} b0620 : bool;
const {:existential true} b0621 : bool;
const {:existential true} b0622 : bool;
const {:existential true} b0623 : bool;
const {:existential true} b0624 : bool;
const {:existential true} b0625 : bool;
const {:existential true} b0626 : bool;
const {:existential true} b0627 : bool;
const {:existential true} b0628 : bool;
const {:existential true} b0629 : bool;
const {:existential true} b0630 : bool;
const {:existential true} b0631 : bool;
const {:existential true} b0632 : bool;
const {:existential true} b0633 : bool;
const {:existential true} b0634 : bool;
const {:existential true} b0635 : bool;
const {:existential true} b0636 : bool;
const {:existential true} b0637 : bool;
const {:existential true} b0638 : bool;
const {:existential true} b0639 : bool;
const {:existential true} b0640 : bool;
const {:existential true} b0641 : bool;
const {:existential true} b0642 : bool;
const {:existential true} b0643 : bool;
const {:existential true} b0644 : bool;
const {:existential true} b0645 : bool;
const {:existential true} b0646 : bool;
const {:existential true} b0647 : bool;
const {:existential true} b0648 : bool;
const {:existential true} b0649 : bool;
const {:existential true} b0650 : bool;
const {:existential true} b0651 : bool;
const {:existential true} b0652 : bool;
const {:existential true} b0653 : bool;
const {:existential true} b0654 : bool;
const {:existential true} b0655 : bool;
const {:existential true} b0656 : bool;
const {:existential true} b0657 : bool;
const {:existential true} b0658 : bool;
const {:existential true} b0659 : bool;
const {:existential true} b0660 : bool;
const {:existential true} b0661 : bool;
const {:existential true} b0662 : bool;
const {:existential true} b0663 : bool;
const {:existential true} b0664 : bool;
const {:existential true} b0665 : bool;
const {:existential true} b0666 : bool;
const {:existential true} b0667 : bool;
const {:existential true} b0668 : bool;
const {:existential true} b0669 : bool;
const {:existential true} b0670 : bool;
const {:existential true} b0671 : bool;
const {:existential true} b0672 : bool;
const {:existential true} b0673 : bool;
const {:existential true} b0674 : bool;
const {:existential true} b0675 : bool;
const {:existential true} b0676 : bool;
const {:existential true} b0677 : bool;
const {:existential true} b0678 : bool;
const {:existential true} b0679 : bool;
const {:existential true} b0680 : bool;
const {:existential true} b0681 : bool;
const {:existential true} b0682 : bool;
const {:existential true} b0683 : bool;
const {:existential true} b0684 : bool;
const {:existential true} b0685 : bool;
const {:existential true} b0686 : bool;
const {:existential true} b0687 : bool;
const {:existential true} b0688 : bool;
const {:existential true} b0689 : bool;
const {:existential true} b0690 : bool;
const {:existential true} b0691 : bool;
const {:existential true} b0692 : bool;
const {:existential true} b0693 : bool;
const {:existential true} b0694 : bool;
const {:existential true} b0695 : bool;
const {:existential true} b0696 : bool;
const {:existential true} b0697 : bool;
const {:existential true} b0698 : bool;
const {:existential true} b0699 : bool;
const {:existential true} b0700 : bool;
const {:existential true} b0701 : bool;
const {:existential true} b0702 : bool;
const {:existential true} b0703 : bool;
const {:existential true} b0704 : bool;
const {:existential true} b0705 : bool;
const {:existential true} b0706 : bool;
const {:existential true} b0707 : bool;
const {:existential true} b0708 : bool;
const {:existential true} b0709 : bool;
const {:existential true} b0710 : bool;
const {:existential true} b0711 : bool;
const {:existential true} b0712 : bool;
const {:existential true} b0713 : bool;
const {:existential true} b0714 : bool;
const {:existential true} b0715 : bool;
const {:existential true} b0716 : bool;
const {:existential true} b0717 : bool;
const {:existential true} b0718 : bool;
const {:existential true} b0719 : bool;
const {:existential true} b0720 : bool;
const {:existential true} b0721 : bool;
const {:existential true} b0722 : bool;
const {:existential true} b0723 : bool;
const {:existential true} b0724 : bool;
const {:existential true} b0725 : bool;
const {:existential true} b0726 : bool;
const {:existential true} b0727 : bool;
const {:existential true} b0728 : bool;
const {:existential true} b0729 : bool;
const {:existential true} b0730 : bool;
const {:existential true} b0731 : bool;
const {:existential true} b0732 : bool;
const {:existential true} b0733 : bool;
const {:existential true} b0734 : bool;
const {:existential true} b0735 : bool;
const {:existential true} b0736 : bool;
const {:existential true} b0737 : bool;
const {:existential true} b0738 : bool;
const {:existential true} b0739 : bool;
const {:existential true} b0740 : bool;
const {:existential true} b0741 : bool;
const {:existential true} b0742 : bool;
const {:existential true} b0743 : bool;
const {:existential true} b0744 : bool;
const {:existential true} b0745 : bool;
const {:existential true} b0746 : bool;
const {:existential true} b0747 : bool;
const {:existential true} b0748 : bool;
const {:existential true} b0749 : bool;
const {:existential true} b0750 : bool;
const {:existential true} b0751 : bool;
const {:existential true} b0752 : bool;
const {:existential true} b0753 : bool;
const {:existential true} b0754 : bool;
const {:existential true} b0755 : bool;
const {:existential true} b0756 : bool;
const {:existential true} b0757 : bool;
const {:existential true} b0758 : bool;
const {:existential true} b0759 : bool;
const {:existential true} b0760 : bool;
const {:existential true} b0761 : bool;
const {:existential true} b0762 : bool;
const {:existential true} b0763 : bool;
const {:existential true} b0764 : bool;
const {:existential true} b0765 : bool;
const {:existential true} b0766 : bool;
const {:existential true} b0767 : bool;
const {:existential true} b0768 : bool;
const {:existential true} b0769 : bool;
const {:existential true} b0770 : bool;
const {:existential true} b0771 : bool;
const {:existential true} b0772 : bool;
const {:existential true} b0773 : bool;
const {:existential true} b0774 : bool;
const {:existential true} b0775 : bool;
const {:existential true} b0776 : bool;
const {:existential true} b0777 : bool;
const {:existential true} b0778 : bool;
const {:existential true} b0779 : bool;
const {:existential true} b0780 : bool;
const {:existential true} b0781 : bool;
const {:existential true} b0782 : bool;
const {:existential true} b0783 : bool;
const {:existential true} b0784 : bool;
const {:existential true} b0785 : bool;
const {:existential true} b0786 : bool;
const {:existential true} b0787 : bool;
const {:existential true} b0788 : bool;
const {:existential true} b0789 : bool;
const {:existential true} b0790 : bool;
const {:existential true} b0791 : bool;
const {:existential true} b0792 : bool;
const {:existential true} b0793 : bool;
const {:existential true} b0794 : bool;
const {:existential true} b0795 : bool;
const {:existential true} b0796 : bool;
const {:existential true} b0797 : bool;
const {:existential true} b0798 : bool;
const {:existential true} b0799 : bool;
const {:existential true} b0800 : bool;
const {:existential true} b0801 : bool;
const {:existential true} b0802 : bool;
const {:existential true} b0803 : bool;
const {:existential true} b0804 : bool;
const {:existential true} b0805 : bool;
const {:existential true} b0806 : bool;
const {:existential true} b0807 : bool;
const {:existential true} b0808 : bool;
const {:existential true} b0809 : bool;
const {:existential true} b0810 : bool;
const {:existential true} b0811 : bool;
const {:existential true} b0812 : bool;
const {:existential true} b0813 : bool;
const {:existential true} b0814 : bool;
const {:existential true} b0815 : bool;
const {:existential true} b0816 : bool;
const {:existential true} b0817 : bool;
const {:existential true} b0818 : bool;
const {:existential true} b0819 : bool;
const {:existential true} b0820 : bool;
const {:existential true} b0821 : bool;
const {:existential true} b0822 : bool;
const {:existential true} b0823 : bool;
const {:existential true} b0824 : bool;
const {:existential true} b0825 : bool;
const {:existential true} b0826 : bool;
const {:existential true} b0827 : bool;
const {:existential true} b0828 : bool;
const {:existential true} b0829 : bool;
const {:existential true} b0830 : bool;
const {:existential true} b0831 : bool;
const {:existential true} b0832 : bool;
const {:existential true} b0833 : bool;
const {:existential true} b0834 : bool;
const {:existential true} b0835 : bool;
const {:existential true} b0836 : bool;
const {:existential true} b0837 : bool;
const {:existential true} b0838 : bool;
const {:existential true} b0839 : bool;
const {:existential true} b0840 : bool;
const {:existential true} b0841 : bool;
const {:existential true} b0842 : bool;
const {:existential true} b0843 : bool;
const {:existential true} b0844 : bool;
const {:existential true} b0845 : bool;
const {:existential true} b0846 : bool;
const {:existential true} b0847 : bool;
const {:existential true} b0848 : bool;
const {:existential true} b0849 : bool;
const {:existential true} b0850 : bool;
const {:existential true} b0851 : bool;
const {:existential true} b0852 : bool;
const {:existential true} b0853 : bool;
const {:existential true} b0854 : bool;
const {:existential true} b0855 : bool;
const {:existential true} b0856 : bool;
const {:existential true} b0857 : bool;
const {:existential true} b0858 : bool;
const {:existential true} b0859 : bool;
const {:existential true} b0860 : bool;
const {:existential true} b0861 : bool;
const {:existential true} b0862 : bool;
const {:existential true} b0863 : bool;
const {:existential true} b0864 : bool;
const {:existential true} b0865 : bool;
const {:existential true} b0866 : bool;
const {:existential true} b0867 : bool;
const {:existential true} b0868 : bool;
const {:existential true} b0869 : bool;
const {:existential true} b0870 : bool;
const {:existential true} b0871 : bool;
const {:existential true} b0872 : bool;
const {:existential true} b0873 : bool;
const {:existential true} b0874 : bool;
const {:existential true} b0875 : bool;
const {:existential true} b0876 : bool;
const {:existential true} b0877 : bool;
const {:existential true} b0878 : bool;
const {:existential true} b0879 : bool;
const {:existential true} b0880 : bool;
const {:existential true} b0881 : bool;
const {:existential true} b0882 : bool;
const {:existential true} b0883 : bool;
const {:existential true} b0884 : bool;
const {:existential true} b0885 : bool;
const {:existential true} b0886 : bool;
const {:existential true} b0887 : bool;
const {:existential true} b0888 : bool;
const {:existential true} b0889 : bool;
const {:existential true} b0890 : bool;
const {:existential true} b0891 : bool;
const {:existential true} b0892 : bool;
const {:existential true} b0893 : bool;
const {:existential true} b0894 : bool;
const {:existential true} b0895 : bool;
const {:existential true} b0896 : bool;
const {:existential true} b0897 : bool;
const {:existential true} b0898 : bool;
const {:existential true} b0899 : bool;
const {:existential true} b0900 : bool;
const {:existential true} b0901 : bool;
const {:existential true} b0902 : bool;
const {:existential true} b0903 : bool;
const {:existential true} b0904 : bool;
const {:existential true} b0905 : bool;
const {:existential true} b0906 : bool;
const {:existential true} b0907 : bool;
const {:existential true} b0908 : bool;
const {:existential true} b0909 : bool;
const {:existential true} b0910 : bool;
const {:existential true} b0911 : bool;
const {:existential true} b0912 : bool;
const {:existential true} b0913 : bool;
const {:existential true} b0914 : bool;
const {:existential true} b0915 : bool;
const {:existential true} b0916 : bool;
const {:existential true} b0917 : bool;
const {:existential true} b0918 : bool;
const {:existential true} b0919 : bool;
const {:existential true} b0920 : bool;
const {:existential true} b0921 : bool;
const {:existential true} b0922 : bool;
const {:existential true} b0923 : bool;
const {:existential true} b0924 : bool;
const {:existential true} b0925 : bool;
const {:existential true} b0926 : bool;
const {:existential true} b0927 : bool;
const {:existential true} b0928 : bool;
const {:existential true} b0929 : bool;
const {:existential true} b0930 : bool;
const {:existential true} b0931 : bool;
const {:existential true} b0932 : bool;
const {:existential true} b0933 : bool;
const {:existential true} b0934 : bool;
const {:existential true} b0935 : bool;
const {:existential true} b0936 : bool;
const {:existential true} b0937 : bool;
const {:existential true} b0938 : bool;
const {:existential true} b0939 : bool;
const {:existential true} b0940 : bool;
const {:existential true} b0941 : bool;
const {:existential true} b0942 : bool;
const {:existential true} b0943 : bool;
const {:existential true} b0944 : bool;
const {:existential true} b0945 : bool;
const {:existential true} b0946 : bool;
const {:existential true} b0947 : bool;
const {:existential true} b0948 : bool;
const {:existential true} b0949 : bool;
const {:existential true} b0950 : bool;
const {:existential true} b0951 : bool;
const {:existential true} b0952 : bool;
const {:existential true} b0953 : bool;
const {:existential true} b0954 : bool;
const {:existential true} b0955 : bool;
const {:existential true} b0956 : bool;
const {:existential true} b0957 : bool;
const {:existential true} b0958 : bool;
const {:existential true} b0959 : bool;
const {:existential true} b0960 : bool;
const {:existential true} b0961 : bool;
const {:existential true} b0962 : bool;
const {:existential true} b0963 : bool;
const {:existential true} b0964 : bool;
const {:existential true} b0965 : bool;
const {:existential true} b0966 : bool;
const {:existential true} b0967 : bool;
const {:existential true} b0968 : bool;
const {:existential true} b0969 : bool;
const {:existential true} b0970 : bool;
const {:existential true} b0971 : bool;
const {:existential true} b0972 : bool;
const {:existential true} b0973 : bool;
const {:existential true} b0974 : bool;
const {:existential true} b0975 : bool;
const {:existential true} b0976 : bool;
const {:existential true} b0977 : bool;
const {:existential true} b0978 : bool;
const {:existential true} b0979 : bool;
const {:existential true} b0980 : bool;
const {:existential true} b0981 : bool;
const {:existential true} b0982 : bool;
const {:existential true} b0983 : bool;
const {:existential true} b0984 : bool;
const {:existential true} b0985 : bool;
const {:existential true} b0986 : bool;
const {:existential true} b0987 : bool;
const {:existential true} b0988 : bool;
const {:existential true} b0989 : bool;
const {:existential true} b0990 : bool;
const {:existential true} b0991 : bool;
const {:existential true} b0992 : bool;
const {:existential true} b0993 : bool;
const {:existential true} b0994 : bool;
const {:existential true} b0995 : bool;
const {:existential true} b0996 : bool;
const {:existential true} b0997 : bool;
const {:existential true} b0998 : bool;
const {:existential true} b0999 : bool;
const {:existential true} b1000 : bool;
const {:existential true} b1001 : bool;
const {:existential true} b1002 : bool;
const {:existential true} b1003 : bool;
const {:existential true} b1004 : bool;
const {:existential true} b1005 : bool;
const {:existential true} b1006 : bool;
const {:existential true} b1007 : bool;
const {:existential true} b1008 : bool;
const {:existential true} b1009 : bool;
const {:existential true} b1010 : bool;
const {:existential true} b1011 : bool;
const {:existential true} b1012 : bool;
const {:existential true} b1013 : bool;
const {:existential true} b1014 : bool;
const {:existential true} b1015 : bool;
const {:existential true} b1016 : bool;
const {:existential true} b1017 : bool;
const {:existential true} b1018 : bool;
const {:existential true} b1019 : bool;
const {:existential true} b1020 : bool;
const {:existential true} b1021 : bool;
const {:existential true} b1022 : bool;
const {:existential true} b1023 : bool;
const {:existential true} b1024 : bool;
const {:existential true} b1025 : bool;
const {:existential true} b1026 : bool;
const {:existential true} b1027 : bool;
const {:existential true} b1028 : bool;
const {:existential true} b1029 : bool;
const {:existential true} b1030 : bool;
const {:existential true} b1031 : bool;
const {:existential true} b1032 : bool;
const {:existential true} b1033 : bool;
const {:existential true} b1034 : bool;
const {:existential true} b1035 : bool;
const {:existential true} b1036 : bool;
const {:existential true} b1037 : bool;
const {:existential true} b1038 : bool;
const {:existential true} b1039 : bool;
const {:existential true} b1040 : bool;
const {:existential true} b1041 : bool;
const {:existential true} b1042 : bool;
const {:existential true} b1043 : bool;
const {:existential true} b1044 : bool;
const {:existential true} b1045 : bool;
const {:existential true} b1046 : bool;
const {:existential true} b1047 : bool;
const {:existential true} b1048 : bool;
const {:existential true} b1049 : bool;
const {:existential true} b1050 : bool;
const {:existential true} b1051 : bool;
const {:existential true} b1052 : bool;
const {:existential true} b1053 : bool;
const {:existential true} b1054 : bool;
const {:existential true} b1055 : bool;
const {:existential true} b1056 : bool;
const {:existential true} b1057 : bool;
const {:existential true} b1058 : bool;
const {:existential true} b1059 : bool;
const {:existential true} b1060 : bool;
const {:existential true} b1061 : bool;
const {:existential true} b1062 : bool;
const {:existential true} b1063 : bool;
const {:existential true} b1064 : bool;
const {:existential true} b1065 : bool;
const {:existential true} b1066 : bool;
const {:existential true} b1067 : bool;
const {:existential true} b1068 : bool;
const {:existential true} b1069 : bool;
const {:existential true} b1070 : bool;
const {:existential true} b1071 : bool;
const {:existential true} b1072 : bool;
const {:existential true} b1073 : bool;
const {:existential true} b1074 : bool;
const {:existential true} b1075 : bool;
const {:existential true} b1076 : bool;
const {:existential true} b1077 : bool;
const {:existential true} b1078 : bool;
const {:existential true} b1079 : bool;
const {:existential true} b1080 : bool;
const {:existential true} b1081 : bool;
const {:existential true} b1082 : bool;
const {:existential true} b1083 : bool;
const {:existential true} b1084 : bool;
const {:existential true} b1085 : bool;
const {:existential true} b1086 : bool;
const {:existential true} b1087 : bool;
const {:existential true} b1088 : bool;
const {:existential true} b1089 : bool;
const {:existential true} b1090 : bool;
const {:existential true} b1091 : bool;
const {:existential true} b1092 : bool;
const {:existential true} b1093 : bool;
const {:existential true} b1094 : bool;
const {:existential true} b1095 : bool;
const {:existential true} b1096 : bool;
const {:existential true} b1097 : bool;
const {:existential true} b1098 : bool;
const {:existential true} b1099 : bool;
const {:existential true} b1100 : bool;
const {:existential true} b1101 : bool;
const {:existential true} b1102 : bool;
const {:existential true} b1103 : bool;
const {:existential true} b1104 : bool;
const {:existential true} b1105 : bool;
const {:existential true} b1106 : bool;
const {:existential true} b1107 : bool;
const {:existential true} b1108 : bool;
const {:existential true} b1109 : bool;
const {:existential true} b1110 : bool;
const {:existential true} b1111 : bool;
const {:existential true} b1112 : bool;
const {:existential true} b1113 : bool;
const {:existential true} b1114 : bool;
const {:existential true} b1115 : bool;
const {:existential true} b1116 : bool;
const {:existential true} b1117 : bool;
const {:existential true} b1118 : bool;
const {:existential true} b1119 : bool;
const {:existential true} b1120 : bool;
const {:existential true} b1121 : bool;
const {:existential true} b1122 : bool;
const {:existential true} b1123 : bool;
const {:existential true} b1124 : bool;
const {:existential true} b1125 : bool;
const {:existential true} b1126 : bool;
const {:existential true} b1127 : bool;
const {:existential true} b1128 : bool;
const {:existential true} b1129 : bool;
const {:existential true} b1130 : bool;
const {:existential true} b1131 : bool;
const {:existential true} b1132 : bool;
const {:existential true} b1133 : bool;
const {:existential true} b1134 : bool;
const {:existential true} b1135 : bool;
const {:existential true} b1136 : bool;
const {:existential true} b1137 : bool;
const {:existential true} b1138 : bool;
const {:existential true} b1139 : bool;
const {:existential true} b1140 : bool;
const {:existential true} b1141 : bool;
const {:existential true} b1142 : bool;
const {:existential true} b1143 : bool;
const {:existential true} b1144 : bool;
const {:existential true} b1145 : bool;
const {:existential true} b1146 : bool;
const {:existential true} b1147 : bool;
const {:existential true} b1148 : bool;
const {:existential true} b1149 : bool;
const {:existential true} b1150 : bool;
const {:existential true} b1151 : bool;
const {:existential true} b1152 : bool;
const {:existential true} b1153 : bool;
const {:existential true} b1154 : bool;
const {:existential true} b1155 : bool;
const {:existential true} b1156 : bool;
const {:existential true} b1157 : bool;
const {:existential true} b1158 : bool;
const {:existential true} b1159 : bool;
const {:existential true} b1160 : bool;
const {:existential true} b1161 : bool;
const {:existential true} b1162 : bool;
const {:existential true} b1163 : bool;
const {:existential true} b1164 : bool;
const {:existential true} b1165 : bool;
const {:existential true} b1166 : bool;
const {:existential true} b1167 : bool;
const {:existential true} b1168 : bool;
const {:existential true} b1169 : bool;
const {:existential true} b1170 : bool;
const {:existential true} b1171 : bool;
const {:existential true} b1172 : bool;
const {:existential true} b1173 : bool;
const {:existential true} b1174 : bool;
const {:existential true} b1175 : bool;
const {:existential true} b1176 : bool;
const {:existential true} b1177 : bool;
const {:existential true} b1178 : bool;
const {:existential true} b1179 : bool;
const {:existential true} b1180 : bool;
const {:existential true} b1181 : bool;
const {:existential true} b1182 : bool;
const {:existential true} b1183 : bool;
const {:existential true} b1184 : bool;
const {:existential true} b1185 : bool;
const {:existential true} b1186 : bool;
const {:existential true} b1187 : bool;
const {:existential true} b1188 : bool;
const {:existential true} b1189 : bool;
const {:existential true} b1190 : bool;
const {:existential true} b1191 : bool;
const {:existential true} b1192 : bool;
const {:existential true} b1193 : bool;
const {:existential true} b1194 : bool;
const {:existential true} b1195 : bool;
const {:existential true} b1196 : bool;
const {:existential true} b1197 : bool;
const {:existential true} b1198 : bool;
const {:existential true} b1199 : bool;
const {:existential true} b1200 : bool;
const {:existential true} b1201 : bool;
const {:existential true} b1202 : bool;
const {:existential true} b1203 : bool;
const {:existential true} b1204 : bool;
const {:existential true} b1205 : bool;
const {:existential true} b1206 : bool;
const {:existential true} b1207 : bool;
const {:existential true} b1208 : bool;
const {:existential true} b1209 : bool;
const {:existential true} b1210 : bool;
const {:existential true} b1211 : bool;
const {:existential true} b1212 : bool;
const {:existential true} b1213 : bool;
const {:existential true} b1214 : bool;
const {:existential true} b1215 : bool;
const {:existential true} b1216 : bool;
const {:existential true} b1217 : bool;
const {:existential true} b1218 : bool;
const {:existential true} b1219 : bool;
const {:existential true} b1220 : bool;
const {:existential true} b1221 : bool;
const {:existential true} b1222 : bool;
const {:existential true} b1223 : bool;
const {:existential true} b1224 : bool;
const {:existential true} b1225 : bool;
const {:existential true} b1226 : bool;
const {:existential true} b1227 : bool;
const {:existential true} b1228 : bool;
const {:existential true} b1229 : bool;
const {:existential true} b1230 : bool;
const {:existential true} b1231 : bool;
const {:existential true} b1232 : bool;
const {:existential true} b1233 : bool;
const {:existential true} b1234 : bool;
const {:existential true} b1235 : bool;
const {:existential true} b1236 : bool;
const {:existential true} b1237 : bool;
const {:existential true} b1238 : bool;
const {:existential true} b1239 : bool;
const {:existential true} b1240 : bool;
const {:existential true} b1241 : bool;
const {:existential true} b1242 : bool;
const {:existential true} b1243 : bool;
const {:existential true} b1244 : bool;
const {:existential true} b1245 : bool;
const {:existential true} b1246 : bool;
const {:existential true} b1247 : bool;
const {:existential true} b1248 : bool;
const {:existential true} b1249 : bool;
const {:existential true} b1250 : bool;
const {:existential true} b1251 : bool;
const {:existential true} b1252 : bool;
const {:existential true} b1253 : bool;
const {:existential true} b1254 : bool;
const {:existential true} b1255 : bool;
const {:existential true} b1256 : bool;
const {:existential true} b1257 : bool;
const {:existential true} b1258 : bool;
const {:existential true} b1259 : bool;
const {:existential true} b1260 : bool;
const {:existential true} b1261 : bool;
const {:existential true} b1262 : bool;
const {:existential true} b1263 : bool;
const {:existential true} b1264 : bool;
const {:existential true} b1265 : bool;
const {:existential true} b1266 : bool;
const {:existential true} b1267 : bool;
const {:existential true} b1268 : bool;
const {:existential true} b1269 : bool;
const {:existential true} b1270 : bool;
const {:existential true} b1271 : bool;
const {:existential true} b1272 : bool;
const {:existential true} b1273 : bool;
const {:existential true} b1274 : bool;
const {:existential true} b1275 : bool;
const {:existential true} b1276 : bool;
const {:existential true} b1277 : bool;
const {:existential true} b1278 : bool;
const {:existential true} b1279 : bool;
const {:existential true} b1280 : bool;
const {:existential true} b1281 : bool;
const {:existential true} b1282 : bool;
const {:existential true} b1283 : bool;
const {:existential true} b1284 : bool;
const {:existential true} b1285 : bool;
const {:existential true} b1286 : bool;
const {:existential true} b1287 : bool;
const {:existential true} b1288 : bool;
const {:existential true} b1289 : bool;
const {:existential true} b1290 : bool;
const {:existential true} b1291 : bool;
const {:existential true} b1292 : bool;
const {:existential true} b1293 : bool;
const {:existential true} b1294 : bool;
const {:existential true} b1295 : bool;
const {:existential true} b1296 : bool;
const {:existential true} b1297 : bool;
const {:existential true} b1298 : bool;
const {:existential true} b1299 : bool;
const {:existential true} b1300 : bool;
const {:existential true} b1301 : bool;
const {:existential true} b1302 : bool;
const {:existential true} b1303 : bool;
const {:existential true} b1304 : bool;
const {:existential true} b1305 : bool;
const {:existential true} b1306 : bool;
const {:existential true} b1307 : bool;
const {:existential true} b1308 : bool;
const {:existential true} b1309 : bool;
const {:existential true} b1310 : bool;
const {:existential true} b1311 : bool;
const {:existential true} b1312 : bool;
const {:existential true} b1313 : bool;
const {:existential true} b1314 : bool;
const {:existential true} b1315 : bool;
const {:existential true} b1316 : bool;
const {:existential true} b1317 : bool;
const {:existential true} b1318 : bool;
const {:existential true} b1319 : bool;
const {:existential true} b1320 : bool;
const {:existential true} b1321 : bool;
const {:existential true} b1322 : bool;
const {:existential true} b1323 : bool;
const {:existential true} b1324 : bool;
const {:existential true} b1325 : bool;
const {:existential true} b1326 : bool;
const {:existential true} b1327 : bool;
const {:existential true} b1328 : bool;
const {:existential true} b1329 : bool;
const {:existential true} b1330 : bool;
const {:existential true} b1331 : bool;
const {:existential true} b1332 : bool;
const {:existential true} b1333 : bool;
const {:existential true} b1334 : bool;
const {:existential true} b1335 : bool;
const {:existential true} b1336 : bool;
const {:existential true} b1337 : bool;
const {:existential true} b1338 : bool;
const {:existential true} b1339 : bool;
const {:existential true} b1340 : bool;
const {:existential true} b1341 : bool;
const {:existential true} b1342 : bool;
const {:existential true} b1343 : bool;
const {:existential true} b1344 : bool;
const {:existential true} b1345 : bool;
const {:existential true} b1346 : bool;
const {:existential true} b1347 : bool;
const {:existential true} b1348 : bool;
const {:existential true} b1349 : bool;
const {:existential true} b1350 : bool;
const {:existential true} b1351 : bool;
const {:existential true} b1352 : bool;
const {:existential true} b1353 : bool;
const {:existential true} b1354 : bool;
const {:existential true} b1355 : bool;
const {:existential true} b1356 : bool;
const {:existential true} b1357 : bool;
const {:existential true} b1358 : bool;
const {:existential true} b1359 : bool;
const {:existential true} b1360 : bool;
const {:existential true} b1361 : bool;
const {:existential true} b1362 : bool;
const {:existential true} b1363 : bool;
const {:existential true} b1364 : bool;
const {:existential true} b1365 : bool;
const {:existential true} b1366 : bool;
const {:existential true} b1367 : bool;
const {:existential true} b1368 : bool;
const {:existential true} b1369 : bool;
const {:existential true} b1370 : bool;
const {:existential true} b1371 : bool;
const {:existential true} b1372 : bool;
const {:existential true} b1373 : bool;
const {:existential true} b1374 : bool;
const {:existential true} b1375 : bool;
const {:existential true} b1376 : bool;
const {:existential true} b1377 : bool;
const {:existential true} b1378 : bool;
const {:existential true} b1379 : bool;
const {:existential true} b1380 : bool;
const {:existential true} b1381 : bool;
const {:existential true} b1382 : bool;
const {:existential true} b1383 : bool;
const {:existential true} b1384 : bool;
const {:existential true} b1385 : bool;
const {:existential true} b1386 : bool;
const {:existential true} b1387 : bool;
const {:existential true} b1388 : bool;
const {:existential true} b1389 : bool;
const {:existential true} b1390 : bool;
const {:existential true} b1391 : bool;
const {:existential true} b1392 : bool;
const {:existential true} b1393 : bool;
const {:existential true} b1394 : bool;
const {:existential true} b1395 : bool;
const {:existential true} b1396 : bool;
const {:existential true} b1397 : bool;
const {:existential true} b1398 : bool;
const {:existential true} b1399 : bool;
const {:existential true} b1400 : bool;
const {:existential true} b1401 : bool;
const {:existential true} b1402 : bool;
const {:existential true} b1403 : bool;
const {:existential true} b1404 : bool;
const {:existential true} b1405 : bool;
const {:existential true} b1406 : bool;
const {:existential true} b1407 : bool;
const {:existential true} b1408 : bool;
const {:existential true} b1409 : bool;
const {:existential true} b1410 : bool;
const {:existential true} b1411 : bool;
const {:existential true} b1412 : bool;
const {:existential true} b1413 : bool;
const {:existential true} b1414 : bool;
const {:existential true} b1415 : bool;
const {:existential true} b1416 : bool;
const {:existential true} b1417 : bool;
const {:existential true} b1418 : bool;
const {:existential true} b1419 : bool;
const {:existential true} b1420 : bool;
const {:existential true} b1421 : bool;
const {:existential true} b1422 : bool;
const {:existential true} b1423 : bool;
const {:existential true} b1424 : bool;
const {:existential true} b1425 : bool;
const {:existential true} b1426 : bool;
const {:existential true} b1427 : bool;
const {:existential true} b1428 : bool;
const {:existential true} b1429 : bool;
const {:existential true} b1430 : bool;
const {:existential true} b1431 : bool;
const {:existential true} b1432 : bool;
const {:existential true} b1433 : bool;
const {:existential true} b1434 : bool;
const {:existential true} b1435 : bool;
const {:existential true} b1436 : bool;
const {:existential true} b1437 : bool;
const {:existential true} b1438 : bool;
const {:existential true} b1439 : bool;
const {:existential true} b1440 : bool;
const {:existential true} b1441 : bool;
const {:existential true} b1442 : bool;
const {:existential true} b1443 : bool;
const {:existential true} b1444 : bool;
const {:existential true} b1445 : bool;
const {:existential true} b1446 : bool;
const {:existential true} b1447 : bool;
const {:existential true} b1448 : bool;
const {:existential true} b1449 : bool;
const {:existential true} b1450 : bool;
const {:existential true} b1451 : bool;
const {:existential true} b1452 : bool;
const {:existential true} b1453 : bool;
const {:existential true} b1454 : bool;
const {:existential true} b1455 : bool;
const {:existential true} b1456 : bool;
const {:existential true} b1457 : bool;
const {:existential true} b1458 : bool;
const {:existential true} b1459 : bool;
const {:existential true} b1460 : bool;
const {:existential true} b1461 : bool;
const {:existential true} b1462 : bool;
const {:existential true} b1463 : bool;
const {:existential true} b1464 : bool;
const {:existential true} b1465 : bool;
const {:existential true} b1466 : bool;
const {:existential true} b1467 : bool;
const {:existential true} b1468 : bool;
const {:existential true} b1469 : bool;
const {:existential true} b1470 : bool;
const {:existential true} b1471 : bool;
const {:existential true} b1472 : bool;
const {:existential true} b1473 : bool;
const {:existential true} b1474 : bool;
const {:existential true} b1475 : bool;
const {:existential true} b1476 : bool;
const {:existential true} b1477 : bool;
const {:existential true} b1478 : bool;
const {:existential true} b1479 : bool;
const {:existential true} b1480 : bool;
const {:existential true} b1481 : bool;
const {:existential true} b1482 : bool;
const {:existential true} b1483 : bool;
const {:existential true} b1484 : bool;
const {:existential true} b1485 : bool;
const {:existential true} b1486 : bool;
const {:existential true} b1487 : bool;
const {:existential true} b1488 : bool;
const {:existential true} b1489 : bool;
const {:existential true} b1490 : bool;
const {:existential true} b1491 : bool;
const {:existential true} b1492 : bool;
const {:existential true} b1493 : bool;
const {:existential true} b1494 : bool;
const {:existential true} b1495 : bool;
const {:existential true} b1496 : bool;
const {:existential true} b1497 : bool;
const {:existential true} b1498 : bool;
const {:existential true} b1499 : bool;
const {:existential true} b1500 : bool;
const {:existential true} b1501 : bool;
const {:existential true} b1502 : bool;
const {:existential true} b1503 : bool;
const {:existential true} b1504 : bool;
const {:existential true} b1505 : bool;
const {:existential true} b1506 : bool;
const {:existential true} b1507 : bool;
const {:existential true} b1508 : bool;
const {:existential true} b1509 : bool;
const {:existential true} b1510 : bool;
const {:existential true} b1511 : bool;
const {:existential true} b1512 : bool;
const {:existential true} b1513 : bool;
const {:existential true} b1514 : bool;
const {:existential true} b1515 : bool;
const {:existential true} b1516 : bool;
const {:existential true} b1517 : bool;
const {:existential true} b1518 : bool;
const {:existential true} b1519 : bool;
const {:existential true} b1520 : bool;
const {:existential true} b1521 : bool;
const {:existential true} b1522 : bool;
const {:existential true} b1523 : bool;
const {:existential true} b1524 : bool;
const {:existential true} b1525 : bool;
const {:existential true} b1526 : bool;
const {:existential true} b1527 : bool;
const {:existential true} b1528 : bool;
const {:existential true} b1529 : bool;
const {:existential true} b1530 : bool;
const {:existential true} b1531 : bool;
const {:existential true} b1532 : bool;
const {:existential true} b1533 : bool;
const {:existential true} b1534 : bool;
const {:existential true} b1535 : bool;
const {:existential true} b1536 : bool;
const {:existential true} b1537 : bool;
const {:existential true} b1538 : bool;
const {:existential true} b1539 : bool;
const {:existential true} b1540 : bool;
const {:existential true} b1541 : bool;
const {:existential true} b1542 : bool;
const {:existential true} b1543 : bool;
const {:existential true} b1544 : bool;
const {:existential true} b1545 : bool;
const {:existential true} b1546 : bool;
const {:existential true} b1547 : bool;
const {:existential true} b1548 : bool;
const {:existential true} b1549 : bool;
const {:existential true} b1550 : bool;
const {:existential true} b1551 : bool;
const {:existential true} b1552 : bool;
const {:existential true} b1553 : bool;
const {:existential true} b1554 : bool;
const {:existential true} b1555 : bool;
const {:existential true} b1556 : bool;
const {:existential true} b1557 : bool;
const {:existential true} b1558 : bool;
const {:existential true} b1559 : bool;
const {:existential true} b1560 : bool;
const {:existential true} b1561 : bool;
const {:existential true} b1562 : bool;
const {:existential true} b1563 : bool;
const {:existential true} b1564 : bool;
const {:existential true} b1565 : bool;
const {:existential true} b1566 : bool;
const {:existential true} b1567 : bool;
const {:existential true} b1568 : bool;
const {:existential true} b1569 : bool;
const {:existential true} b1570 : bool;
const {:existential true} b1571 : bool;
const {:existential true} b1572 : bool;
const {:existential true} b1573 : bool;
const {:existential true} b1574 : bool;
const {:existential true} b1575 : bool;
const {:existential true} b1576 : bool;
const {:existential true} b1577 : bool;
const {:existential true} b1578 : bool;
const {:existential true} b1579 : bool;
const {:existential true} b1580 : bool;
const {:existential true} b1581 : bool;
const {:existential true} b1582 : bool;
const {:existential true} b1583 : bool;
const {:existential true} b1584 : bool;
const {:existential true} b1585 : bool;
const {:existential true} b1586 : bool;
const {:existential true} b1587 : bool;
const {:existential true} b1588 : bool;
const {:existential true} b1589 : bool;
const {:existential true} b1590 : bool;
const {:existential true} b1591 : bool;
const {:existential true} b1592 : bool;
const {:existential true} b1593 : bool;
const {:existential true} b1594 : bool;
const {:existential true} b1595 : bool;
const {:existential true} b1596 : bool;
const {:existential true} b1597 : bool;
const {:existential true} b1598 : bool;
const {:existential true} b1599 : bool;
const {:existential true} b1600 : bool;
const {:existential true} b1601 : bool;
const {:existential true} b1602 : bool;
const {:existential true} b1603 : bool;
const {:existential true} b1604 : bool;
const {:existential true} b1605 : bool;
const {:existential true} b1606 : bool;
const {:existential true} b1607 : bool;
const {:existential true} b1608 : bool;
const {:existential true} b1609 : bool;
const {:existential true} b1610 : bool;
const {:existential true} b1611 : bool;
const {:existential true} b1612 : bool;
const {:existential true} b1613 : bool;
const {:existential true} b1614 : bool;
const {:existential true} b1615 : bool;
const {:existential true} b1616 : bool;
const {:existential true} b1617 : bool;
const {:existential true} b1618 : bool;
const {:existential true} b1619 : bool;
const {:existential true} b1620 : bool;
const {:existential true} b1621 : bool;
const {:existential true} b1622 : bool;
const {:existential true} b1623 : bool;
const {:existential true} b1624 : bool;
const {:existential true} b1625 : bool;
const {:existential true} b1626 : bool;
const {:existential true} b1627 : bool;
const {:existential true} b1628 : bool;
const {:existential true} b1629 : bool;
const {:existential true} b1630 : bool;
const {:existential true} b1631 : bool;
const {:existential true} b1632 : bool;
const {:existential true} b1633 : bool;
const {:existential true} b1634 : bool;
const {:existential true} b1635 : bool;
const {:existential true} b1636 : bool;
const {:existential true} b1637 : bool;
const {:existential true} b1638 : bool;
const {:existential true} b1639 : bool;
const {:existential true} b1640 : bool;
const {:existential true} b1641 : bool;
const {:existential true} b1642 : bool;
const {:existential true} b1643 : bool;
const {:existential true} b1644 : bool;
const {:existential true} b1645 : bool;
const {:existential true} b1646 : bool;
const {:existential true} b1647 : bool;
const {:existential true} b1648 : bool;
const {:existential true} b1649 : bool;
const {:existential true} b1650 : bool;
const {:existential true} b1651 : bool;
const {:existential true} b1652 : bool;
const {:existential true} b1653 : bool;
const {:existential true} b1654 : bool;
const {:existential true} b1655 : bool;
const {:existential true} b1656 : bool;
const {:existential true} b1657 : bool;
const {:existential true} b1658 : bool;
const {:existential true} b1659 : bool;
const {:existential true} b1660 : bool;
const {:existential true} b1661 : bool;
const {:existential true} b1662 : bool;
const {:existential true} b1663 : bool;
const {:existential true} b1664 : bool;
const {:existential true} b1665 : bool;
const {:existential true} b1666 : bool;
const {:existential true} b1667 : bool;
const {:existential true} b1668 : bool;
const {:existential true} b1669 : bool;
const {:existential true} b1670 : bool;
const {:existential true} b1671 : bool;
const {:existential true} b1672 : bool;
const {:existential true} b1673 : bool;
const {:existential true} b1674 : bool;
const {:existential true} b1675 : bool;
const {:existential true} b1676 : bool;
const {:existential true} b1677 : bool;
const {:existential true} b1678 : bool;
const {:existential true} b1679 : bool;
const {:existential true} b1680 : bool;
const {:existential true} b1681 : bool;
const {:existential true} b1682 : bool;
const {:existential true} b1683 : bool;
const {:existential true} b1684 : bool;
const {:existential true} b1685 : bool;
const {:existential true} b1686 : bool;
const {:existential true} b1687 : bool;
const {:existential true} b1688 : bool;
const {:existential true} b1689 : bool;
const {:existential true} b1690 : bool;
const {:existential true} b1691 : bool;
const {:existential true} b1692 : bool;
const {:existential true} b1693 : bool;
const {:existential true} b1694 : bool;
const {:existential true} b1695 : bool;
const {:existential true} b1696 : bool;
const {:existential true} b1697 : bool;
const {:existential true} b1698 : bool;
const {:existential true} b1699 : bool;
const {:existential true} b1700 : bool;
const {:existential true} b1701 : bool;
const {:existential true} b1702 : bool;
const {:existential true} b1703 : bool;
const {:existential true} b1704 : bool;
const {:existential true} b1705 : bool;
const {:existential true} b1706 : bool;
const {:existential true} b1707 : bool;
const {:existential true} b1708 : bool;
const {:existential true} b1709 : bool;
const {:existential true} b1710 : bool;
const {:existential true} b1711 : bool;
const {:existential true} b1712 : bool;
const {:existential true} b1713 : bool;
const {:existential true} b1714 : bool;
const {:existential true} b1715 : bool;
const {:existential true} b1716 : bool;
const {:existential true} b1717 : bool;
const {:existential true} b1718 : bool;
const {:existential true} b1719 : bool;
const {:existential true} b1720 : bool;
const {:existential true} b1721 : bool;
const {:existential true} b1722 : bool;
const {:existential true} b1723 : bool;
const {:existential true} b1724 : bool;
const {:existential true} b1725 : bool;
const {:existential true} b1726 : bool;
const {:existential true} b1727 : bool;
const {:existential true} b1728 : bool;
const {:existential true} b1729 : bool;
const {:existential true} b1730 : bool;
const {:existential true} b1731 : bool;
const {:existential true} b1732 : bool;
const {:existential true} b1733 : bool;
const {:existential true} b1734 : bool;
const {:existential true} b1735 : bool;
const {:existential true} b1736 : bool;
const {:existential true} b1737 : bool;
const {:existential true} b1738 : bool;
const {:existential true} b1739 : bool;
const {:existential true} b1740 : bool;
const {:existential true} b1741 : bool;
const {:existential true} b1742 : bool;
const {:existential true} b1743 : bool;
const {:existential true} b1744 : bool;
const {:existential true} b1745 : bool;
const {:existential true} b1746 : bool;
const {:existential true} b1747 : bool;
const {:existential true} b1748 : bool;
const {:existential true} b1749 : bool;
const {:existential true} b1750 : bool;
const {:existential true} b1751 : bool;
const {:existential true} b1752 : bool;
const {:existential true} b1753 : bool;
const {:existential true} b1754 : bool;
const {:existential true} b1755 : bool;
const {:existential true} b1756 : bool;
const {:existential true} b1757 : bool;
const {:existential true} b1758 : bool;
const {:existential true} b1759 : bool;
const {:existential true} b1760 : bool;
const {:existential true} b1761 : bool;
const {:existential true} b1762 : bool;
const {:existential true} b1763 : bool;
const {:existential true} b1764 : bool;
const {:existential true} b1765 : bool;
const {:existential true} b1766 : bool;
const {:existential true} b1767 : bool;
const {:existential true} b1768 : bool;
const {:existential true} b1769 : bool;
const {:existential true} b1770 : bool;
const {:existential true} b1771 : bool;
const {:existential true} b1772 : bool;
const {:existential true} b1773 : bool;
const {:existential true} b1774 : bool;
const {:existential true} b1775 : bool;
const {:existential true} b1776 : bool;
const {:existential true} b1777 : bool;
const {:existential true} b1778 : bool;
const {:existential true} b1779 : bool;
const {:existential true} b1780 : bool;
const {:existential true} b1781 : bool;
const {:existential true} b1782 : bool;
const {:existential true} b1783 : bool;
const {:existential true} b1784 : bool;
const {:existential true} b1785 : bool;
const {:existential true} b1786 : bool;
const {:existential true} b1787 : bool;
const {:existential true} b1788 : bool;
const {:existential true} b1789 : bool;
const {:existential true} b1790 : bool;
const {:existential true} b1791 : bool;
const {:existential true} b1792 : bool;
const {:existential true} b1793 : bool;
const {:existential true} b1794 : bool;
const {:existential true} b1795 : bool;
const {:existential true} b1796 : bool;
const {:existential true} b1797 : bool;
const {:existential true} b1798 : bool;
const {:existential true} b1799 : bool;
const {:existential true} b1800 : bool;
const {:existential true} b1801 : bool;
const {:existential true} b1802 : bool;
const {:existential true} b1803 : bool;
const {:existential true} b1804 : bool;
const {:existential true} b1805 : bool;
const {:existential true} b1806 : bool;
const {:existential true} b1807 : bool;
const {:existential true} b1808 : bool;
const {:existential true} b1809 : bool;
const {:existential true} b1810 : bool;
const {:existential true} b1811 : bool;
const {:existential true} b1812 : bool;
const {:existential true} b1813 : bool;
const {:existential true} b1814 : bool;
const {:existential true} b1815 : bool;
const {:existential true} b1816 : bool;
const {:existential true} b1817 : bool;
const {:existential true} b1818 : bool;
const {:existential true} b1819 : bool;
const {:existential true} b1820 : bool;
const {:existential true} b1821 : bool;
const {:existential true} b1822 : bool;
const {:existential true} b1823 : bool;
const {:existential true} b1824 : bool;
const {:existential true} b1825 : bool;
const {:existential true} b1826 : bool;
const {:existential true} b1827 : bool;
const {:existential true} b1828 : bool;
const {:existential true} b1829 : bool;
const {:existential true} b1830 : bool;
const {:existential true} b1831 : bool;
const {:existential true} b1832 : bool;
const {:existential true} b1833 : bool;
const {:existential true} b1834 : bool;
const {:existential true} b1835 : bool;
const {:existential true} b1836 : bool;
const {:existential true} b1837 : bool;
const {:existential true} b1838 : bool;
const {:existential true} b1839 : bool;
const {:existential true} b1840 : bool;
const {:existential true} b1841 : bool;
const {:existential true} b1842 : bool;
const {:existential true} b1843 : bool;
const {:existential true} b1844 : bool;
const {:existential true} b1845 : bool;
const {:existential true} b1846 : bool;
const {:existential true} b1847 : bool;
const {:existential true} b1848 : bool;
const {:existential true} b1849 : bool;
const {:existential true} b1850 : bool;
const {:existential true} b1851 : bool;
const {:existential true} b1852 : bool;
const {:existential true} b1853 : bool;
const {:existential true} b1854 : bool;
const {:existential true} b1855 : bool;
const {:existential true} b1856 : bool;
const {:existential true} b1857 : bool;
const {:existential true} b1858 : bool;
const {:existential true} b1859 : bool;
const {:existential true} b1860 : bool;
const {:existential true} b1861 : bool;
const {:existential true} b1862 : bool;
const {:existential true} b1863 : bool;
const {:existential true} b1864 : bool;
const {:existential true} b1865 : bool;
const {:existential true} b1866 : bool;
const {:existential true} b1867 : bool;
const {:existential true} b1868 : bool;
const {:existential true} b1869 : bool;
const {:existential true} b1870 : bool;
const {:existential true} b1871 : bool;
const {:existential true} b1872 : bool;
const {:existential true} b1873 : bool;
const {:existential true} b1874 : bool;
const {:existential true} b1875 : bool;
const {:existential true} b1876 : bool;
const {:existential true} b1877 : bool;
const {:existential true} b1878 : bool;
const {:existential true} b1879 : bool;
const {:existential true} b1880 : bool;
const {:existential true} b1881 : bool;
const {:existential true} b1882 : bool;
const {:existential true} b1883 : bool;
const {:existential true} b1884 : bool;
const {:existential true} b1885 : bool;
const {:existential true} b1886 : bool;
const {:existential true} b1887 : bool;
const {:existential true} b1888 : bool;
const {:existential true} b1889 : bool;
const {:existential true} b1890 : bool;
const {:existential true} b1891 : bool;
const {:existential true} b1892 : bool;
const {:existential true} b1893 : bool;
const {:existential true} b1894 : bool;
const {:existential true} b1895 : bool;
const {:existential true} b1896 : bool;
const {:existential true} b1897 : bool;
const {:existential true} b1898 : bool;
const {:existential true} b1899 : bool;
const {:existential true} b1900 : bool;
const {:existential true} b1901 : bool;
const {:existential true} b1902 : bool;
const {:existential true} b1903 : bool;
const {:existential true} b1904 : bool;
const {:existential true} b1905 : bool;
const {:existential true} b1906 : bool;
const {:existential true} b1907 : bool;
const {:existential true} b1908 : bool;
const {:existential true} b1909 : bool;
const {:existential true} b1910 : bool;
const {:existential true} b1911 : bool;
const {:existential true} b1912 : bool;
const {:existential true} b1913 : bool;
const {:existential true} b1914 : bool;
const {:existential true} b1915 : bool;
const {:existential true} b1916 : bool;
const {:existential true} b1917 : bool;
const {:existential true} b1918 : bool;
const {:existential true} b1919 : bool;
const {:existential true} b1920 : bool;
const {:existential true} b1921 : bool;
const {:existential true} b1922 : bool;
const {:existential true} b1923 : bool;
const {:existential true} b1924 : bool;
const {:existential true} b1925 : bool;
const {:existential true} b1926 : bool;
const {:existential true} b1927 : bool;
const {:existential true} b1928 : bool;
const {:existential true} b1929 : bool;
const {:existential true} b1930 : bool;
const {:existential true} b1931 : bool;
const {:existential true} b1932 : bool;
const {:existential true} b1933 : bool;
const {:existential true} b1934 : bool;
const {:existential true} b1935 : bool;
const {:existential true} b1936 : bool;
const {:existential true} b1937 : bool;
const {:existential true} b1938 : bool;
const {:existential true} b1939 : bool;
const {:existential true} b1940 : bool;
const {:existential true} b1941 : bool;
const {:existential true} b1942 : bool;
const {:existential true} b1943 : bool;
const {:existential true} b1944 : bool;
const {:existential true} b1945 : bool;
const {:existential true} b1946 : bool;
const {:existential true} b1947 : bool;
const {:existential true} b1948 : bool;
const {:existential true} b1949 : bool;
const {:existential true} b1950 : bool;
const {:existential true} b1951 : bool;
const {:existential true} b1952 : bool;
const {:existential true} b1953 : bool;
const {:existential true} b1954 : bool;
const {:existential true} b1955 : bool;
const {:existential true} b1956 : bool;
const {:existential true} b1957 : bool;
const {:existential true} b1958 : bool;
const {:existential true} b1959 : bool;
const {:existential true} b1960 : bool;
const {:existential true} b1961 : bool;
const {:existential true} b1962 : bool;
const {:existential true} b1963 : bool;
const {:existential true} b1964 : bool;
const {:existential true} b1965 : bool;
const {:existential true} b1966 : bool;
const {:existential true} b1967 : bool;
const {:existential true} b1968 : bool;
const {:existential true} b1969 : bool;
const {:existential true} b1970 : bool;
const {:existential true} b1971 : bool;
const {:existential true} b1972 : bool;
const {:existential true} b1973 : bool;
const {:existential true} b1974 : bool;
const {:existential true} b1975 : bool;
const {:existential true} b1976 : bool;
const {:existential true} b1977 : bool;
const {:existential true} b1978 : bool;
const {:existential true} b1979 : bool;
const {:existential true} b1980 : bool;
const {:existential true} b1981 : bool;
const {:existential true} b1982 : bool;
const {:existential true} b1983 : bool;
const {:existential true} b1984 : bool;
const {:existential true} b1985 : bool;
const {:existential true} b1986 : bool;
const {:existential true} b1987 : bool;
const {:existential true} b1988 : bool;
const {:existential true} b1989 : bool;
const {:existential true} b1990 : bool;
const {:existential true} b1991 : bool;
const {:existential true} b1992 : bool;
const {:existential true} b1993 : bool;
const {:existential true} b1994 : bool;
const {:existential true} b1995 : bool;
const {:existential true} b1996 : bool;
const {:existential true} b1997 : bool;
const {:existential true} b1998 : bool;
const {:existential true} b1999 : bool;
const {:existential true} b2000 : bool;
const {:existential true} b2001 : bool;
const {:existential true} b2002 : bool;
const {:existential true} b2003 : bool;
const {:existential true} b2004 : bool;
const {:existential true} b2005 : bool;
const {:existential true} b2006 : bool;
const {:existential true} b2007 : bool;
const {:existential true} b2008 : bool;
const {:existential true} b2009 : bool;
const {:existential true} b2010 : bool;
const {:existential true} b2011 : bool;
const {:existential true} b2012 : bool;
const {:existential true} b2013 : bool;
const {:existential true} b2014 : bool;
const {:existential true} b2015 : bool;
const {:existential true} b2016 : bool;
const {:existential true} b2017 : bool;
const {:existential true} b2018 : bool;
const {:existential true} b2019 : bool;
const {:existential true} b2020 : bool;
const {:existential true} b2021 : bool;
const {:existential true} b2022 : bool;
const {:existential true} b2023 : bool;
const {:existential true} b2024 : bool;
const {:existential true} b2025 : bool;
const {:existential true} b2026 : bool;
const {:existential true} b2027 : bool;
const {:existential true} b2028 : bool;
const {:existential true} b2029 : bool;
const {:existential true} b2030 : bool;
const {:existential true} b2031 : bool;
const {:existential true} b2032 : bool;
const {:existential true} b2033 : bool;
const {:existential true} b2034 : bool;
const {:existential true} b2035 : bool;
const {:existential true} b2036 : bool;
const {:existential true} b2037 : bool;
const {:existential true} b2038 : bool;
const {:existential true} b2039 : bool;
const {:existential true} b2040 : bool;
const {:existential true} b2041 : bool;
const {:existential true} b2042 : bool;
const {:existential true} b2043 : bool;
const {:existential true} b2044 : bool;
const {:existential true} b2045 : bool;
const {:existential true} b2046 : bool;
const {:existential true} b2047 : bool;
const {:existential true} b2048 : bool;
const {:existential true} b2049 : bool;
const {:existential true} b2050 : bool;
const {:existential true} b2051 : bool;
const {:existential true} b2052 : bool;
const {:existential true} b2053 : bool;
const {:existential true} b2054 : bool;
const {:existential true} b2055 : bool;
const {:existential true} b2056 : bool;
const {:existential true} b2057 : bool;
const {:existential true} b2058 : bool;
const {:existential true} b2059 : bool;
const {:existential true} b2060 : bool;
const {:existential true} b2061 : bool;
const {:existential true} b2062 : bool;
const {:existential true} b2063 : bool;
const {:existential true} b2064 : bool;
const {:existential true} b2065 : bool;
const {:existential true} b2066 : bool;
const {:existential true} b2067 : bool;
const {:existential true} b2068 : bool;
const {:existential true} b2069 : bool;
const {:existential true} b2070 : bool;
const {:existential true} b2071 : bool;
const {:existential true} b2072 : bool;
const {:existential true} b2073 : bool;
const {:existential true} b2074 : bool;
const {:existential true} b2075 : bool;
const {:existential true} b2076 : bool;
const {:existential true} b2077 : bool;
const {:existential true} b2078 : bool;
const {:existential true} b2079 : bool;
const {:existential true} b2080 : bool;
const {:existential true} b2081 : bool;
const {:existential true} b2082 : bool;
const {:existential true} b2083 : bool;
const {:existential true} b2084 : bool;
const {:existential true} b2085 : bool;
const {:existential true} b2086 : bool;
const {:existential true} b2087 : bool;
const {:existential true} b2088 : bool;
const {:existential true} b2089 : bool;
const {:existential true} b2090 : bool;
const {:existential true} b2091 : bool;
const {:existential true} b2092 : bool;
const {:existential true} b2093 : bool;
const {:existential true} b2094 : bool;
const {:existential true} b2095 : bool;
const {:existential true} b2096 : bool;
const {:existential true} b2097 : bool;
const {:existential true} b2098 : bool;
const {:existential true} b2099 : bool;
const {:existential true} b2100 : bool;
const {:existential true} b2101 : bool;
const {:existential true} b2102 : bool;
const {:existential true} b2103 : bool;
const {:existential true} b2104 : bool;
const {:existential true} b2105 : bool;
const {:existential true} b2106 : bool;
const {:existential true} b2107 : bool;
const {:existential true} b2108 : bool;
const {:existential true} b2109 : bool;
const {:existential true} b2110 : bool;
const {:existential true} b2111 : bool;
const {:existential true} b2112 : bool;
const {:existential true} b2113 : bool;
const {:existential true} b2114 : bool;
const {:existential true} b2115 : bool;
const {:existential true} b2116 : bool;
const {:existential true} b2117 : bool;
const {:existential true} b2118 : bool;
const {:existential true} b2119 : bool;
const {:existential true} b2120 : bool;
const {:existential true} b2121 : bool;
const {:existential true} b2122 : bool;
const {:existential true} b2123 : bool;
const {:existential true} b2124 : bool;
const {:existential true} b2125 : bool;
const {:existential true} b2126 : bool;
const {:existential true} b2127 : bool;
const {:existential true} b2128 : bool;
const {:existential true} b2129 : bool;
const {:existential true} b2130 : bool;
const {:existential true} b2131 : bool;
const {:existential true} b2132 : bool;
const {:existential true} b2133 : bool;
const {:existential true} b2134 : bool;
const {:existential true} b2135 : bool;
const {:existential true} b2136 : bool;
const {:existential true} b2137 : bool;
const {:existential true} b2138 : bool;
const {:existential true} b2139 : bool;
const {:existential true} b2140 : bool;
const {:existential true} b2141 : bool;
const {:existential true} b2142 : bool;
const {:existential true} b2143 : bool;
const {:existential true} b2144 : bool;
const {:existential true} b2145 : bool;
const {:existential true} b2146 : bool;
const {:existential true} b2147 : bool;
const {:existential true} b2148 : bool;
const {:existential true} b2149 : bool;
const {:existential true} b2150 : bool;
const {:existential true} b2151 : bool;
const {:existential true} b2152 : bool;
const {:existential true} b2153 : bool;
const {:existential true} b2154 : bool;
const {:existential true} b2155 : bool;
const {:existential true} b2156 : bool;
const {:existential true} b2157 : bool;
const {:existential true} b2158 : bool;
const {:existential true} b2159 : bool;
const {:existential true} b2160 : bool;
const {:existential true} b2161 : bool;
const {:existential true} b2162 : bool;
const {:existential true} b2163 : bool;
const {:existential true} b2164 : bool;
const {:existential true} b2165 : bool;
const {:existential true} b2166 : bool;
const {:existential true} b2167 : bool;
const {:existential true} b2168 : bool;
const {:existential true} b2169 : bool;
const {:existential true} b2170 : bool;
const {:existential true} b2171 : bool;
const {:existential true} b2172 : bool;
const {:existential true} b2173 : bool;
const {:existential true} b2174 : bool;
const {:existential true} b2175 : bool;
const {:existential true} b2176 : bool;
const {:existential true} b2177 : bool;
const {:existential true} b2178 : bool;
const {:existential true} b2179 : bool;
const {:existential true} b2180 : bool;
const {:existential true} b2181 : bool;
const {:existential true} b2182 : bool;
const {:existential true} b2183 : bool;
const {:existential true} b2184 : bool;
const {:existential true} b2185 : bool;
const {:existential true} b2186 : bool;
const {:existential true} b2187 : bool;
const {:existential true} b2188 : bool;
const {:existential true} b2189 : bool;
const {:existential true} b2190 : bool;
const {:existential true} b2191 : bool;
const {:existential true} b2192 : bool;
const {:existential true} b2193 : bool;
const {:existential true} b2194 : bool;
const {:existential true} b2195 : bool;
const {:existential true} b2196 : bool;
const {:existential true} b2197 : bool;
const {:existential true} b2198 : bool;
const {:existential true} b2199 : bool;
const {:existential true} b2200 : bool;
const {:existential true} b2201 : bool;
const {:existential true} b2202 : bool;
const {:existential true} b2203 : bool;
const {:existential true} b2204 : bool;
const {:existential true} b2205 : bool;
const {:existential true} b2206 : bool;
const {:existential true} b2207 : bool;
const {:existential true} b2208 : bool;
const {:existential true} b2209 : bool;
const {:existential true} b2210 : bool;
const {:existential true} b2211 : bool;
const {:existential true} b2212 : bool;
const {:existential true} b2213 : bool;
const {:existential true} b2214 : bool;
const {:existential true} b2215 : bool;
const {:existential true} b2216 : bool;
const {:existential true} b2217 : bool;
const {:existential true} b2218 : bool;
const {:existential true} b2219 : bool;
const {:existential true} b2220 : bool;
const {:existential true} b2221 : bool;
const {:existential true} b2222 : bool;
const {:existential true} b2223 : bool;
const {:existential true} b2224 : bool;
const {:existential true} b2225 : bool;
const {:existential true} b2226 : bool;
const {:existential true} b2227 : bool;
const {:existential true} b2228 : bool;
const {:existential true} b2229 : bool;
const {:existential true} b2230 : bool;
const {:existential true} b2231 : bool;
const {:existential true} b2232 : bool;
const {:existential true} b2233 : bool;
const {:existential true} b2234 : bool;
const {:existential true} b2235 : bool;
const {:existential true} b2236 : bool;
const {:existential true} b2237 : bool;
const {:existential true} b2238 : bool;
const {:existential true} b2239 : bool;
const {:existential true} b2240 : bool;
const {:existential true} b2241 : bool;
const {:existential true} b2242 : bool;
const {:existential true} b2243 : bool;
const {:existential true} b2244 : bool;
const {:existential true} b2245 : bool;
const {:existential true} b2246 : bool;
const {:existential true} b2247 : bool;
const {:existential true} b2248 : bool;
const {:existential true} b2249 : bool;
const {:existential true} b2250 : bool;
const {:existential true} b2251 : bool;
const {:existential true} b2252 : bool;
const {:existential true} b2253 : bool;
const {:existential true} b2254 : bool;
const {:existential true} b2255 : bool;
const {:existential true} b2256 : bool;
const {:existential true} b2257 : bool;
const {:existential true} b2258 : bool;
const {:existential true} b2259 : bool;
const {:existential true} b2260 : bool;
const {:existential true} b2261 : bool;
const {:existential true} b2262 : bool;
const {:existential true} b2263 : bool;
const {:existential true} b2264 : bool;
const {:existential true} b2265 : bool;
const {:existential true} b2266 : bool;
const {:existential true} b2267 : bool;
const {:existential true} b2268 : bool;
const {:existential true} b2269 : bool;
const {:existential true} b2270 : bool;
const {:existential true} b2271 : bool;
const {:existential true} b2272 : bool;
const {:existential true} b2273 : bool;
const {:existential true} b2274 : bool;
const {:existential true} b2275 : bool;
const {:existential true} b2276 : bool;
const {:existential true} b2277 : bool;
const {:existential true} b2278 : bool;
const {:existential true} b2279 : bool;
const {:existential true} b2280 : bool;
const {:existential true} b2281 : bool;
const {:existential true} b2282 : bool;
const {:existential true} b2283 : bool;
const {:existential true} b2284 : bool;
const {:existential true} b2285 : bool;
const {:existential true} b2286 : bool;
const {:existential true} b2287 : bool;
const {:existential true} b2288 : bool;
const {:existential true} b2289 : bool;
const {:existential true} b2290 : bool;
const {:existential true} b2291 : bool;
const {:existential true} b2292 : bool;
const {:existential true} b2293 : bool;
const {:existential true} b2294 : bool;
const {:existential true} b2295 : bool;
const {:existential true} b2296 : bool;
const {:existential true} b2297 : bool;
const {:existential true} b2298 : bool;
const {:existential true} b2299 : bool;
const {:existential true} b2300 : bool;
const {:existential true} b2301 : bool;
const {:existential true} b2302 : bool;
const {:existential true} b2303 : bool;

axiom $arch_ptr_size == 8;

axiom $arch_spec_ptr_start == $max.u8;

const unique ^$##thread_id: $ctype;

axiom $def_math_type(^$##thread_id);

type $##thread_id;

const unique ^$##club: $ctype;

axiom $def_math_type(^$##club);

type $##club;

const unique ^s_node: $ctype;

axiom $is_span_sequential(^s_node);

axiom $def_struct_type(^s_node, 16, false, false);

axiom (forall #s1: $state, #s2: $state, #p: $ptr :: { $inv2(#s1, #s2, #p, ^s_node) } $inv2(#s1, #s2, #p, ^s_node) == $set_eq($owns(#s2, #p), $set_empty()));

axiom (forall #s1: $state, #s2: $state, #p: $ptr :: { $inv2_without_lemmas(#s1, #s2, #p, ^s_node) } $inv2_without_lemmas(#s1, #s2, #p, ^s_node) == $set_eq($owns(#s2, #p), $set_empty()));

axiom (forall p: $ptr, q: $ptr, s: $state :: { $in(q, $composite_extent(s, p, ^s_node)) } $in(q, $composite_extent(s, p, ^s_node)) == (q == p));

const unique s_node.key: $field;

axiom $def_phys_field(^s_node, s_node.key, ^^i4, false, 0);

const unique s_node.next: $field;

axiom $def_phys_field(^s_node, s_node.next, $ptr_to(^s_node), false, 8);

function F#glob_reach() : $oset;

const unique cf#glob_reach: $pure_function;

axiom $function_arg_type(cf#glob_reach, 0, ^$#oset);

procedure glob_reach() returns ($result: $oset);
  free ensures $result == F#glob_reach();
  free ensures $call_transition(old($s), $s);



const unique ^$#_purecall_handler#1: $ctype;

axiom $def_fnptr_type(^$#_purecall_handler#1);

type $#_purecall_handler#1;

const unique ^$#_invalid_parameter_handler#2: $ctype;

axiom $def_fnptr_type(^$#_invalid_parameter_handler#2);

type $#_invalid_parameter_handler#2;

const unique ^$#sls_pairwise_sum.c..36263#3: $ctype;

axiom $def_fnptr_type(^$#sls_pairwise_sum.c..36263#3);

type $#sls_pairwise_sum.c..36263#3;

const unique ^$#_PtFuncCompare#4: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#4);

type $#_PtFuncCompare#4;

const unique ^$#_PtFuncCompare#5: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#5);

type $#_PtFuncCompare#5;

const unique ^$#_PtFuncCompare#6: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#6);

type $#_PtFuncCompare#6;

const unique ^$#_PtFuncCompare#7: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#7);

type $#_PtFuncCompare#7;

const unique ^$#_onexit_t#8: $ctype;

axiom $def_fnptr_type(^$#_onexit_t#8);

type $#_onexit_t#8;

function F##int_max(SP#x: int, SP#y: int) : int;

const unique cf##int_max: $pure_function;

axiom (forall SP#x: int, SP#y: int :: { F##int_max(SP#x, SP#y) } $in_range_i4(F##int_max(SP#x, SP#y)));

axiom $function_arg_type(cf##int_max, 0, ^^i4);

axiom $function_arg_type(cf##int_max, 1, ^^i4);

axiom $function_arg_type(cf##int_max, 2, ^^i4);

procedure #int_max(SP#x: int, SP#y: int) returns ($result: int);
  free ensures $in_range_i4($result);
  free ensures $result == F##int_max(SP#x, SP#y);
  free ensures $call_transition(old($s), $s);



function F##int_min(SP#x: int, SP#y: int) : int;

const unique cf##int_min: $pure_function;

axiom (forall SP#x: int, SP#y: int :: { F##int_min(SP#x, SP#y) } $in_range_i4(F##int_min(SP#x, SP#y)));

axiom $function_arg_type(cf##int_min, 0, ^^i4);

axiom $function_arg_type(cf##int_min, 1, ^^i4);

axiom $function_arg_type(cf##int_min, 2, ^^i4);

procedure #int_min(SP#x: int, SP#y: int) returns ($result: int);
  free ensures $in_range_i4($result);
  free ensures $result == F##int_min(SP#x, SP#y);
  free ensures $call_transition(old($s), $s);



function F#sll(#s: $state, SP#hd: $ptr) : bool;

const unique cf#sll: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll(#s, SP#hd) } 1 < $decreases_level ==> $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#sll(#s, SP#hd));

axiom $function_arg_type(cf#sll, 0, ^^bool);

axiom $function_arg_type(cf#sll, 1, $ptr_to(^s_node));

procedure sll(SP#hd: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result;
  free ensures $result == F#sll($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#srtl(#s: $state, SP#hd: $ptr) : bool;

const unique cf#srtl: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#srtl(#s, SP#hd) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#srtl(#s, SP#hd)) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> F#srtl(#s, SP#hd)));

axiom $function_arg_type(cf#srtl, 0, ^^bool);

axiom $function_arg_type(cf#srtl, 1, $ptr_to(^s_node));

procedure srtl(SP#hd: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result;
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> $result;
  free ensures $result == F#srtl($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#rsrtl(#s: $state, SP#hd: $ptr) : bool;

const unique cf#rsrtl: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#rsrtl(#s, SP#hd) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#rsrtl(#s, SP#hd)) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> F#rsrtl(#s, SP#hd)));

axiom $function_arg_type(cf#rsrtl, 0, ^^bool);

axiom $function_arg_type(cf#rsrtl, 1, $ptr_to(^s_node));

procedure rsrtl(SP#hd: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result;
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> $result;
  free ensures $result == F#rsrtl($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_reach(#s: $state, SP#hd: $ptr) : $oset;

const unique cf#sll_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll_reach(#s, SP#hd) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#sll_reach(#s, SP#hd))) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#sll_reach(#s, SP#hd) == $oset_empty()));

axiom $function_arg_type(cf#sll_reach, 0, ^$#oset);

axiom $function_arg_type(cf#sll_reach, 1, $ptr_to(^s_node));

procedure sll_reach(SP#hd: $ptr) returns ($result: $oset);
  ensures ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result)) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result == $oset_empty());
  free ensures $result == F#sll_reach($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#srtl_reach(#s: $state, SP#hd: $ptr) : $oset;

const unique cf#srtl_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#srtl_reach(#s, SP#hd) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#srtl_reach(#s, SP#hd))) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#srtl_reach(#s, SP#hd) == $oset_empty()));

axiom $function_arg_type(cf#srtl_reach, 0, ^$#oset);

axiom $function_arg_type(cf#srtl_reach, 1, $ptr_to(^s_node));

procedure srtl_reach(SP#hd: $ptr) returns ($result: $oset);
  ensures ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result)) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result == $oset_empty());
  free ensures $result == F#srtl_reach($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#rsrtl_reach(#s: $state, SP#hd: $ptr) : $oset;

const unique cf#rsrtl_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#rsrtl_reach(#s, SP#hd) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#rsrtl_reach(#s, SP#hd))) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#rsrtl_reach(#s, SP#hd) == $oset_empty()));

axiom $function_arg_type(cf#rsrtl_reach, 0, ^$#oset);

axiom $function_arg_type(cf#rsrtl_reach, 1, $ptr_to(^s_node));

procedure rsrtl_reach(SP#hd: $ptr) returns ($result: $oset);
  ensures ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result)) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result == $oset_empty());
  free ensures $result == F#rsrtl_reach($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_keys(#s: $state, SP#hd: $ptr) : $intset;

const unique cf#sll_keys: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll_keys(#s, SP#hd) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $intset_in($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node)), F#sll_keys(#s, SP#hd))) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#sll_keys(#s, SP#hd) == $intset_empty()));

axiom $function_arg_type(cf#sll_keys, 0, ^$#intset);

axiom $function_arg_type(cf#sll_keys, 1, $ptr_to(^s_node));

procedure sll_keys(SP#hd: $ptr) returns ($result: $intset);
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $intset_in($rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node)), $result);
  ensures $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result == $intset_empty();
  free ensures $result == F#sll_keys($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_min_key(#s: $state, SP#hd: $ptr) : int;

const unique cf#sll_min_key: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll_min_key(#s, SP#hd) } 1 < $decreases_level ==> $in_range_i4(F#sll_min_key(#s, SP#hd)) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> F#sll_min_key(#s, SP#hd) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node))));

axiom $function_arg_type(cf#sll_min_key, 0, ^^i4);

axiom $function_arg_type(cf#sll_min_key, 1, $ptr_to(^s_node));

procedure sll_min_key(SP#hd: $ptr) returns ($result: int);
  free ensures $in_range_i4($result);
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> $result == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node));
  free ensures $result == F#sll_min_key($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_max_key(#s: $state, SP#hd: $ptr) : int;

const unique cf#sll_max_key: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll_max_key(#s, SP#hd) } 1 < $decreases_level ==> $in_range_i4(F#sll_max_key(#s, SP#hd)) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> F#sll_max_key(#s, SP#hd) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node))));

axiom $function_arg_type(cf#sll_max_key, 0, ^^i4);

axiom $function_arg_type(cf#sll_max_key, 1, $ptr_to(^s_node));

procedure sll_max_key(SP#hd: $ptr) returns ($result: int);
  free ensures $in_range_i4($result);
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> $result == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node));
  free ensures $result == F#sll_max_key($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_list_len_next(#s: $state, SP#x: $ptr) : int;

const unique cf#sll_list_len_next: $pure_function;

axiom (forall #s: $state, SP#x: $ptr :: { F#sll_list_len_next(#s, SP#x) } 1 < $decreases_level ==> $in_range_nat(F#sll_list_len_next(#s, SP#x)) && ($non_null($phys_ptr_cast(SP#x, ^s_node)) ==> F#sll_list_len_next(#s, SP#x) > 0) && ($is_null($phys_ptr_cast(SP#x, ^s_node)) ==> F#sll_list_len_next(#s, SP#x) == 0));

axiom $function_arg_type(cf#sll_list_len_next, 0, ^^nat);

axiom $function_arg_type(cf#sll_list_len_next, 1, $ptr_to(^s_node));

procedure sll_list_len_next(SP#x: $ptr) returns ($result: int);
  free ensures $in_range_nat($result);
  ensures $non_null($phys_ptr_cast(SP#x, ^s_node)) ==> $result > 0;
  ensures $is_null($phys_ptr_cast(SP#x, ^s_node)) ==> $result == 0;
  free ensures $result == F#sll_list_len_next($s, SP#x);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : bool;

const unique cf#sll_lseg: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg(#s, SP#hd, SP#tl) == F#sll(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg(#s, SP#hd, SP#tl)) && (F#sll_lseg(#s, SP#hd, SP#tl) ==> $oset_disjoint(F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)))) && (F#sll_lseg(#s, SP#hd, SP#tl) && F#sll(#s, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll(#s, $phys_ptr_cast(SP#hd, ^s_node)) && F#sll_reach(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $oset_union(F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_reach(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_keys(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $intset_union(F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_keys(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_list_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_list_len_next(#s, $phys_ptr_cast(SP#tl, ^s_node)))) && (F#sll_lseg(#s, SP#hd, SP#tl) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#hd, ^s_node) && !$oset_in($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node), F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node))) ==> F#sll_lseg(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $intset_singleton($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)))) && F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), 1)));

axiom $function_arg_type(cf#sll_lseg, 0, ^^bool);

axiom $function_arg_type(cf#sll_lseg, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg, 2, $ptr_to(^s_node));

procedure sll_lseg(SP#hd: $ptr, SP#tl: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result;
  ensures $result ==> $oset_disjoint(F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)));
  ensures $result && F#sll($s, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SP#hd, ^s_node)) && F#sll_reach($s, $phys_ptr_cast(SP#hd, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_reach($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_keys($s, $phys_ptr_cast(SP#hd, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_keys($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_list_len_next($s, $phys_ptr_cast(SP#hd, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_list_len_next($s, $phys_ptr_cast(SP#tl, ^s_node)));
  ensures $result && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#hd, ^s_node) && !$oset_in($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node), F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node))) ==> F#sll_lseg($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)))) && F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), 1);
  free ensures $result == F#sll_lseg($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#srtl_lseg(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : bool;

const unique cf#srtl_lseg: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#srtl_lseg(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl_lseg(#s, SP#hd, SP#tl) == F#srtl(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#srtl_lseg(#s, SP#hd, SP#tl)) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#srtl_lseg(#s, SP#hd, SP#tl)) && (F#srtl_lseg(#s, SP#hd, SP#tl) ==> $oset_disjoint(F#srtl_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)))) && (F#srtl_lseg(#s, SP#hd, SP#tl) && F#srtl(#s, $phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) <= F#sll_min_key(#s, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl(#s, $phys_ptr_cast(SP#hd, ^s_node)) && F#srtl_reach(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $oset_union(F#srtl_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#srtl_reach(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_keys(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $intset_union(F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_keys(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_list_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_list_len_next(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node)) == F#sll_lseg_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node)) == F#sll_max_key(#s, $phys_ptr_cast(SP#tl, ^s_node))) && (F#srtl_lseg(#s, SP#hd, SP#tl) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && !$oset_in($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node), F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) <= $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl_lseg(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#srtl_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $intset_singleton($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)))) && F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), 1) && F#sll_lseg_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == F#sll_lseg_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node))) && (F#srtl_lseg(#s, SP#hd, SP#tl) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> F#srtl_lseg(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#srtl_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_singleton($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == 1 && F#sll_lseg_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node))));

axiom $function_arg_type(cf#srtl_lseg, 0, ^^bool);

axiom $function_arg_type(cf#srtl_lseg, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#srtl_lseg, 2, $ptr_to(^s_node));

procedure srtl_lseg(SP#hd: $ptr, SP#tl: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#srtl($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result;
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result;
  ensures $result ==> $oset_disjoint(F#srtl_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)));
  ensures $result && F#srtl($s, $phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) <= F#sll_min_key($s, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SP#hd, ^s_node)) && F#srtl_reach($s, $phys_ptr_cast(SP#hd, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#srtl_reach($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_keys($s, $phys_ptr_cast(SP#hd, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_keys($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_list_len_next($s, $phys_ptr_cast(SP#hd, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_list_len_next($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_min_key($s, $phys_ptr_cast(SP#hd, ^s_node)) == F#sll_lseg_min_key($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_max_key($s, $phys_ptr_cast(SP#hd, ^s_node)) == F#sll_max_key($s, $phys_ptr_cast(SP#tl, ^s_node));
  ensures $result && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && !$oset_in($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node), F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_max_key($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) <= $rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl_lseg($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#srtl_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)))) && F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), 1) && F#sll_lseg_min_key($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == F#sll_lseg_min_key($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node));
  ensures $result && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#srtl_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == 1 && F#sll_lseg_min_key($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node));
  free ensures $result == F#srtl_lseg($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_reach(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : $oset;

const unique cf#sll_lseg_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_reach(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_reach(#s, SP#hd, SP#tl) == F#sll_reach(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_reach(#s, SP#hd, SP#tl) == $oset_empty()) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#sll_lseg_reach(#s, SP#hd, SP#tl))));

axiom $function_arg_type(cf#sll_lseg_reach, 0, ^$#oset);

axiom $function_arg_type(cf#sll_lseg_reach, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_reach, 2, $ptr_to(^s_node));

procedure sll_lseg_reach(SP#hd: $ptr, SP#tl: $ptr) returns ($result: $oset);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_reach($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $oset_empty();
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result);
  free ensures $result == F#sll_lseg_reach($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#srtl_lseg_reach(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : $oset;

const unique cf#srtl_lseg_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#srtl_lseg_reach(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl_lseg_reach(#s, SP#hd, SP#tl) == F#srtl_reach(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#srtl_lseg_reach(#s, SP#hd, SP#tl) == $oset_empty()) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#srtl_lseg_reach(#s, SP#hd, SP#tl))));

axiom $function_arg_type(cf#srtl_lseg_reach, 0, ^$#oset);

axiom $function_arg_type(cf#srtl_lseg_reach, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#srtl_lseg_reach, 2, $ptr_to(^s_node));

procedure srtl_lseg_reach(SP#hd: $ptr, SP#tl: $ptr) returns ($result: $oset);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#srtl_reach($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $oset_empty();
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result);
  free ensures $result == F#srtl_lseg_reach($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_keys(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : $intset;

const unique cf#sll_lseg_keys: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_keys(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_keys(#s, SP#hd, SP#tl) == F#sll_keys(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_keys(#s, SP#hd, SP#tl) == $intset_empty()) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $intset_in($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node)), F#sll_lseg_keys(#s, SP#hd, SP#tl))));

axiom $function_arg_type(cf#sll_lseg_keys, 0, ^$#intset);

axiom $function_arg_type(cf#sll_lseg_keys, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_keys, 2, $ptr_to(^s_node));

procedure sll_lseg_keys(SP#hd: $ptr, SP#tl: $ptr) returns ($result: $intset);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_keys($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $intset_empty();
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $intset_in($rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node)), $result);
  free ensures $result == F#sll_lseg_keys($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_min_key(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : int;

const unique cf#sll_lseg_min_key: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_min_key(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> $in_range_i4(F#sll_lseg_min_key(#s, SP#hd, SP#tl)) && ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_min_key(#s, SP#hd, SP#tl) == F#sll_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_min_key(#s, SP#hd, SP#tl) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node))));

axiom $function_arg_type(cf#sll_lseg_min_key, 0, ^^i4);

axiom $function_arg_type(cf#sll_lseg_min_key, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_min_key, 2, $ptr_to(^s_node));

procedure sll_lseg_min_key(SP#hd: $ptr, SP#tl: $ptr) returns ($result: int);
  free ensures $in_range_i4($result);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_min_key($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node));
  free ensures $result == F#sll_lseg_min_key($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_max_key(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : int;

const unique cf#sll_lseg_max_key: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_max_key(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> $in_range_i4(F#sll_lseg_max_key(#s, SP#hd, SP#tl)) && ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_max_key(#s, SP#hd, SP#tl) == F#sll_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_max_key(#s, SP#hd, SP#tl) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node))));

axiom $function_arg_type(cf#sll_lseg_max_key, 0, ^^i4);

axiom $function_arg_type(cf#sll_lseg_max_key, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_max_key, 2, $ptr_to(^s_node));

procedure sll_lseg_max_key(SP#hd: $ptr, SP#tl: $ptr) returns ($result: int);
  free ensures $in_range_i4($result);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_max_key($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node));
  free ensures $result == F#sll_lseg_max_key($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_len_next(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : int;

const unique cf#sll_lseg_len_next: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_len_next(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> $in_range_nat(F#sll_lseg_len_next(#s, SP#hd, SP#tl)) && ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_len_next(#s, SP#hd, SP#tl) == F#sll_list_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_len_next(#s, SP#hd, SP#tl) == 0) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_len_next(#s, SP#hd, SP#tl) > 0));

axiom $function_arg_type(cf#sll_lseg_len_next, 0, ^^nat);

axiom $function_arg_type(cf#sll_lseg_len_next, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_len_next, 2, $ptr_to(^s_node));

procedure sll_lseg_len_next(SP#hd: $ptr, SP#tl: $ptr) returns ($result: int);
  free ensures $in_range_nat($result);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_list_len_next($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == 0;
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $result > 0;
  free ensures $result == F#sll_lseg_len_next($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



procedure sls_pairwise_sum(P#x: $ptr, P#y: $ptr) returns ($result: $ptr);
  requires F#srtl($s, $phys_ptr_cast(P#x, ^s_node));
  requires F#srtl($s, $phys_ptr_cast(P#y, ^s_node));
  requires $oset_disjoint(F#srtl_reach($s, $phys_ptr_cast(P#x, ^s_node)), F#srtl_reach($s, $phys_ptr_cast(P#y, ^s_node)));
  modifies $s, $cev_pc;
  ensures F#srtl($s, $phys_ptr_cast(P#x, ^s_node));
  ensures F#srtl($s, $phys_ptr_cast(P#y, ^s_node));
  ensures $oset_disjoint(F#srtl_reach($s, $phys_ptr_cast(P#x, ^s_node)), F#srtl_reach($s, $phys_ptr_cast(P#y, ^s_node)));
  ensures F#srtl($s, $phys_ptr_cast($result, ^s_node));
  ensures $oset_disjoint(F#srtl_reach($s, $phys_ptr_cast($result, ^s_node)), F#srtl_reach($s, $phys_ptr_cast(P#x, ^s_node)));
  free ensures $writes_nothing(old($s), $s);
  free ensures $call_transition(old($s), $s);



implementation sls_pairwise_sum(P#x: $ptr, P#y: $ptr) returns ($result: $ptr)
{
  var stmtexpr10#18: $state;
  var SL#_dryad_S13: $state;
  var stmtexpr9#17: $state;
  var SL#_dryad_S12: $state;
  var stmtexpr8#16: $state;
  var SL#_dryad_S11: $state;
  var stmtexpr7#15: $state;
  var SL#_dryad_S10: $state;
  var stmtexpr6#14: $state;
  var SL#_dryad_S9: $state;
  var stmtexpr5#13: $state;
  var SL#_dryad_S8: $state;
  var stmtexpr4#12: $state;
  var SL#_dryad_S7: $state;
  var stmtexpr3#11: $oset;
  var stmtexpr2#10: $state;
  var SL#_dryad_S6: $state;
  var stmtexpr1#9: $ptr;
  var SL#curr_y3: $ptr;
  var stmtexpr0#8: $ptr;
  var SL#curr_x2: $ptr;
  var L#tmp: $ptr;
  var ite#2: bool;
  var loopState#0: $state;
  var stmtexpr8#27: $state;
  var SL#_dryad_S5: $state;
  var stmtexpr7#26: $state;
  var SL#_dryad_S4: $state;
  var stmtexpr6#25: $state;
  var SL#_dryad_S3: $state;
  var stmtexpr5#24: $state;
  var SL#_dryad_S2: $state;
  var stmtexpr4#23: $state;
  var SL#_dryad_S1: $state;
  var stmtexpr3#22: $oset;
  var stmtexpr2#21: $state;
  var SL#_dryad_S0: $state;
  var ite#1: bool;
  var res_srtl_reach#7: $oset;
  var res_srtl_reach#6: $oset;
  var SL#ALL_REACH: $oset;
  var L#curr_x: $ptr;
  var L#curr_y: $ptr;
  var L#z: $ptr;
  var L#last_z: $ptr;
  var L#z_key: int where $in_range_i4(L#z_key);
  var stmtexpr1#20: $oset;
  var stmtexpr0#19: $oset;
  var res_srtl_reach#5: $oset;
  var res_srtl_reach#4: $oset;
  var SL#_dryad_G1: $oset;
  var SL#_dryad_G0: $oset;
  var #wrTime$3^3.3: int;
  var #stackframe: int;

// INV:PTR: P#x, P#y, L#curr_x, L#curr_y, L#z, L#last_z
// INV:INT: L#z_key
// INV:LST: srtl

  anon9:
    assume $function_entry($s);
    assume $full_stop_ext(#tok$3^3.3, $s);
    assume $can_use_all_frame_axioms($s);
    assume #wrTime$3^3.3 == $current_timestamp($s);
    assume $def_writes($s, #wrTime$3^3.3, (lambda #p: $ptr :: false));
    // assume true
    // assume true
    // assume @decreases_level_is(2147483647); 
    assume 2147483647 == $decreases_level;
    // assume true
    //  --- Dryad annotated function --- 
    // _math \oset _dryad_G0; 
    // _math \oset _dryad_G1; 
    // _math \oset res_srtl_reach#4; 
    // res_srtl_reach#4 := srtl_reach(x); 
    call res_srtl_reach#4 := srtl_reach($phys_ptr_cast(P#x, ^s_node));
    assume $full_stop_ext(#tok$4^0.0, $s);
    // _math \oset res_srtl_reach#5; 
    // res_srtl_reach#5 := srtl_reach(y); 
    call res_srtl_reach#5 := srtl_reach($phys_ptr_cast(P#y, ^s_node));
    assume $full_stop_ext(#tok$4^0.0, $s);
    // _dryad_G0 := @_vcc_oset_union(res_srtl_reach#4, res_srtl_reach#5); 
    SL#_dryad_G0 := $oset_union(res_srtl_reach#4, res_srtl_reach#5);
    // _math \oset stmtexpr0#19; 
    // stmtexpr0#19 := _dryad_G0; 
    stmtexpr0#19 := SL#_dryad_G0;
    // _dryad_G1 := _dryad_G0; 
    SL#_dryad_G1 := SL#_dryad_G0;
    // _math \oset stmtexpr1#20; 
    // stmtexpr1#20 := _dryad_G1; 
    stmtexpr1#20 := SL#_dryad_G1;
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_keys(y), @_vcc_intset_union(sll_keys(*((y->next))), @_vcc_intset_singleton(*((y->key)))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_list_len_next(y), unchecked+(sll_list_len_next(*((y->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(rsrtl(y), &&(&&(rsrtl(*((y->next))), unchecked!(@_vcc_oset_in(y, rsrtl_reach(*((y->next)))))), >=(*((y->key)), sll_max_key(*((y->next))))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(rsrtl_reach(y), @_vcc_oset_union(rsrtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll(y), &&(sll(*((y->next))), unchecked!(@_vcc_oset_in(y, sll_reach(*((y->next)))))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_reach(y), @_vcc_oset_union(sll_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_max_key(y), @\int_max(*((y->key)), sll_max_key(*((y->next)))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_min_key(y), @\int_min(*((y->key)), sll_min_key(*((y->next)))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(srtl(y), &&(&&(srtl(*((y->next))), unchecked!(@_vcc_oset_in(y, srtl_reach(*((y->next)))))), <=(*((y->key)), sll_min_key(*((y->next))))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(srtl_reach(y), @_vcc_oset_union(srtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_keys(x), @_vcc_intset_union(sll_keys(*((x->next))), @_vcc_intset_singleton(*((x->key)))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_list_len_next(x), unchecked+(sll_list_len_next(*((x->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(rsrtl(x), &&(&&(rsrtl(*((x->next))), unchecked!(@_vcc_oset_in(x, rsrtl_reach(*((x->next)))))), >=(*((x->key)), sll_max_key(*((x->next))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(rsrtl_reach(x), @_vcc_oset_union(rsrtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll(x), &&(sll(*((x->next))), unchecked!(@_vcc_oset_in(x, sll_reach(*((x->next)))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_reach(x), @_vcc_oset_union(sll_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_max_key(x), @\int_max(*((x->key)), sll_max_key(*((x->next)))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_min_key(x), @\int_min(*((x->key)), sll_min_key(*((x->next)))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(srtl(x), &&(&&(srtl(*((x->next))), unchecked!(@_vcc_oset_in(x, srtl_reach(*((x->next)))))), <=(*((x->key)), sll_min_key(*((x->next))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(srtl_reach(x), @_vcc_oset_union(srtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
    // int32_t z_key; 
    // struct s_node* last_z; 
    // struct s_node* z; 
    // struct s_node* curr_y; 
    // struct s_node* curr_x; 
    // _math \oset ALL_REACH; 
    // assume ==>(@_vcc_ptr_neq_null(x), &&(@_vcc_mutable(@state, x), @writes_check(x))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> $mutable($s, $phys_ptr_cast(P#x, ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(@_vcc_ptr_neq_null(y), &&(@_vcc_mutable(@state, y), @writes_check(y))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> $mutable($s, $phys_ptr_cast(P#y, ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(P#y, ^s_node));
    // _math \oset res_srtl_reach#6; 
    // res_srtl_reach#6 := srtl_reach(x); 
    call res_srtl_reach#6 := srtl_reach($phys_ptr_cast(P#x, ^s_node));
    assume $full_stop_ext(#tok$3^17.41, $s);
    // _math \oset res_srtl_reach#7; 
    // res_srtl_reach#7 := srtl_reach(y); 
    call res_srtl_reach#7 := srtl_reach($phys_ptr_cast(P#y, ^s_node));
    assume $full_stop_ext(#tok$3^17.56, $s);
    // ALL_REACH := @_vcc_oset_union(res_srtl_reach#6, res_srtl_reach#7); 
    SL#ALL_REACH := $oset_union(res_srtl_reach#6, res_srtl_reach#7);
    // _Bool ite#1; 
    // ite#1 := ||(@_vcc_ptr_eq_null(x), @_vcc_ptr_eq_null(y)); 
    ite#1 := $is_null($phys_ptr_cast(P#x, ^s_node)) || $is_null($phys_ptr_cast(P#y, ^s_node));
    assume true;
    // if (ite#1) ...
    if (ite#1)
    {
      anon1:
        // return (struct s_node*)@null; 
        $result := $phys_ptr_cast($null, ^s_node);
        assume true;
        assert $position_marker();
        goto #exit;
    }
    else
    {
      anon2:
        // assert @_vcc_possibly_unreachable; 
        assert {:PossiblyUnreachable true} true;
    }

  anon10:
    // curr_x := x; 
    L#curr_x := $phys_ptr_cast(P#x, ^s_node);
    // assert sll_lseg(curr_x, curr_x); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
    // assume sll_lseg(curr_x, curr_x); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
    // assert srtl_lseg(curr_x, curr_x); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
    // assume srtl_lseg(curr_x, curr_x); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
    // assert sll_lseg(curr_y, curr_y); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
    // assume sll_lseg(curr_y, curr_y); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
    // assert srtl_lseg(curr_y, curr_y); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
    // assume srtl_lseg(curr_y, curr_y); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
    // assert sll_lseg(z, z); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#z, ^s_node));
    // assume sll_lseg(z, z); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#z, ^s_node));
    // assert srtl_lseg(z, z); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#z, ^s_node));
    // assume srtl_lseg(z, z); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#z, ^s_node));
    // assert sll_lseg(last_z, last_z); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#last_z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
    // assume sll_lseg(last_z, last_z); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#last_z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
    // assert srtl_lseg(last_z, last_z); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#last_z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
    // assume srtl_lseg(last_z, last_z); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#last_z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
    // assert sll_lseg(y, y); 
    assert F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(P#y, ^s_node));
    // assume sll_lseg(y, y); 
    assume F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(P#y, ^s_node));
    // assert srtl_lseg(y, y); 
    assert F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(P#y, ^s_node));
    // assume srtl_lseg(y, y); 
    assume F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(P#y, ^s_node));
    // assert sll_lseg(x, x); 
    assert F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(P#x, ^s_node));
    // assume sll_lseg(x, x); 
    assume F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(P#x, ^s_node));
    // assert srtl_lseg(x, x); 
    assert F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(P#x, ^s_node));
    // assume srtl_lseg(x, x); 
    assume F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(P#x, ^s_node));
    // curr_y := y; 
    L#curr_y := $phys_ptr_cast(P#y, ^s_node);
    // assert sll_lseg(curr_x, curr_x); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
    // assume sll_lseg(curr_x, curr_x); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
    // assert srtl_lseg(curr_x, curr_x); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
    // assume srtl_lseg(curr_x, curr_x); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
    // assert sll_lseg(curr_y, curr_y); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
    // assume sll_lseg(curr_y, curr_y); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
    // assert srtl_lseg(curr_y, curr_y); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
    // assume srtl_lseg(curr_y, curr_y); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
    // assert sll_lseg(z, z); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#z, ^s_node));
    // assume sll_lseg(z, z); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#z, ^s_node));
    // assert srtl_lseg(z, z); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#z, ^s_node));
    // assume srtl_lseg(z, z); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#z, ^s_node));
    // assert sll_lseg(last_z, last_z); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#last_z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
    // assume sll_lseg(last_z, last_z); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#last_z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
    // assert srtl_lseg(last_z, last_z); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#last_z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
    // assume srtl_lseg(last_z, last_z); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#last_z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
    // assert sll_lseg(y, y); 
    assert F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(P#y, ^s_node));
    // assume sll_lseg(y, y); 
    assume F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(P#y, ^s_node));
    // assert srtl_lseg(y, y); 
    assert F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(P#y, ^s_node));
    // assume srtl_lseg(y, y); 
    assume F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(P#y, ^s_node));
    // assert sll_lseg(x, x); 
    assert F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(P#x, ^s_node));
    // assume sll_lseg(x, x); 
    assume F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(P#x, ^s_node));
    // assert srtl_lseg(x, x); 
    assert F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(P#x, ^s_node));
    // assume srtl_lseg(x, x); 
    assume F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(P#x, ^s_node));
    // _math \state _dryad_S0; 
    // _dryad_S0 := @_vcc_current_state(@state); 
    SL#_dryad_S0 := $current_state($s);
    // _math \state stmtexpr2#21; 
    // stmtexpr2#21 := _dryad_S0; 
    stmtexpr2#21 := SL#_dryad_S0;
    // z := _vcc_alloc(@_vcc_typeof((struct s_node*)@null)); 
    call L#z := $alloc(^s_node);
    assume $full_stop_ext(#tok$3^23.14, $s);
    // assume !(@_vcc_oset_in(z, @_vcc_oset_union(_dryad_G0, _dryad_G1))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), $oset_union(SL#_dryad_G0, SL#_dryad_G1));
    // _dryad_G1 := @_vcc_oset_union(_dryad_G0, @_vcc_oset_singleton(z)); 
    SL#_dryad_G1 := $oset_union(SL#_dryad_G0, $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
    // _math \oset stmtexpr3#22; 
    // stmtexpr3#22 := _dryad_G1; 
    stmtexpr3#22 := SL#_dryad_G1;
    // assume ==(glob_reach(), _dryad_G1); 
    assume F#glob_reach() == SL#_dryad_G1;
    // _math \state _dryad_S1; 
    // _dryad_S1 := @_vcc_current_state(@state); 
    SL#_dryad_S1 := $current_state($s);
    // _math \state stmtexpr4#23; 
    // stmtexpr4#23 := _dryad_S1; 
    stmtexpr4#23 := SL#_dryad_S1;
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_keys(curr_x), @_vcc_intset_union(sll_keys(*((curr_x->next))), @_vcc_intset_singleton(*((curr_x->key)))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_list_len_next(curr_x), unchecked+(sll_list_len_next(*((curr_x->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(rsrtl(curr_x), &&(&&(rsrtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, rsrtl_reach(*((curr_x->next)))))), >=(*((curr_x->key)), sll_max_key(*((curr_x->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(rsrtl_reach(curr_x), @_vcc_oset_union(rsrtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll(curr_x), &&(sll(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, sll_reach(*((curr_x->next)))))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_reach(curr_x), @_vcc_oset_union(sll_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_max_key(curr_x), @\int_max(*((curr_x->key)), sll_max_key(*((curr_x->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_min_key(curr_x), @\int_min(*((curr_x->key)), sll_min_key(*((curr_x->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(srtl(curr_x), &&(&&(srtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, srtl_reach(*((curr_x->next)))))), <=(*((curr_x->key)), sll_min_key(*((curr_x->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(srtl_reach(curr_x), @_vcc_oset_union(srtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_keys(curr_y), @_vcc_intset_union(sll_keys(*((curr_y->next))), @_vcc_intset_singleton(*((curr_y->key)))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_list_len_next(curr_y), unchecked+(sll_list_len_next(*((curr_y->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(rsrtl(curr_y), &&(&&(rsrtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, rsrtl_reach(*((curr_y->next)))))), >=(*((curr_y->key)), sll_max_key(*((curr_y->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(rsrtl_reach(curr_y), @_vcc_oset_union(rsrtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll(curr_y), &&(sll(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, sll_reach(*((curr_y->next)))))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_reach(curr_y), @_vcc_oset_union(sll_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_max_key(curr_y), @\int_max(*((curr_y->key)), sll_max_key(*((curr_y->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_min_key(curr_y), @\int_min(*((curr_y->key)), sll_min_key(*((curr_y->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(srtl(curr_y), &&(&&(srtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, srtl_reach(*((curr_y->next)))))), <=(*((curr_y->key)), sll_min_key(*((curr_y->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(srtl_reach(curr_y), @_vcc_oset_union(srtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_keys(z), @_vcc_intset_union(sll_keys(*((z->next))), @_vcc_intset_singleton(*((z->key)))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_list_len_next(z), unchecked+(sll_list_len_next(*((z->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(rsrtl(z), &&(&&(rsrtl(*((z->next))), unchecked!(@_vcc_oset_in(z, rsrtl_reach(*((z->next)))))), >=(*((z->key)), sll_max_key(*((z->next))))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(rsrtl_reach(z), @_vcc_oset_union(rsrtl_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(sll(z), &&(sll(*((z->next))), unchecked!(@_vcc_oset_in(z, sll_reach(*((z->next)))))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_reach(z), @_vcc_oset_union(sll_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_max_key(z), @\int_max(*((z->key)), sll_max_key(*((z->next)))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_min_key(z), @\int_min(*((z->key)), sll_min_key(*((z->next)))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(srtl(z), &&(&&(srtl(*((z->next))), unchecked!(@_vcc_oset_in(z, srtl_reach(*((z->next)))))), <=(*((z->key)), sll_min_key(*((z->next))))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(srtl_reach(z), @_vcc_oset_union(srtl_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_keys(last_z), @_vcc_intset_union(sll_keys(*((last_z->next))), @_vcc_intset_singleton(*((last_z->key)))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#last_z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_list_len_next(last_z), unchecked+(sll_list_len_next(*((last_z->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#last_z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(rsrtl(last_z), &&(&&(rsrtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, rsrtl_reach(*((last_z->next)))))), >=(*((last_z->key)), sll_max_key(*((last_z->next))))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(rsrtl_reach(last_z), @_vcc_oset_union(rsrtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll(last_z), &&(sll(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, sll_reach(*((last_z->next)))))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_reach(last_z), @_vcc_oset_union(sll_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_max_key(last_z), @\int_max(*((last_z->key)), sll_max_key(*((last_z->next)))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_min_key(last_z), @\int_min(*((last_z->key)), sll_min_key(*((last_z->next)))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(srtl(last_z), &&(&&(srtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, srtl_reach(*((last_z->next)))))), <=(*((last_z->key)), sll_min_key(*((last_z->next))))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(srtl_reach(last_z), @_vcc_oset_union(srtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_keys(y), @_vcc_intset_union(sll_keys(*((y->next))), @_vcc_intset_singleton(*((y->key)))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_list_len_next(y), unchecked+(sll_list_len_next(*((y->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(rsrtl(y), &&(&&(rsrtl(*((y->next))), unchecked!(@_vcc_oset_in(y, rsrtl_reach(*((y->next)))))), >=(*((y->key)), sll_max_key(*((y->next))))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(rsrtl_reach(y), @_vcc_oset_union(rsrtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll(y), &&(sll(*((y->next))), unchecked!(@_vcc_oset_in(y, sll_reach(*((y->next)))))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_reach(y), @_vcc_oset_union(sll_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_max_key(y), @\int_max(*((y->key)), sll_max_key(*((y->next)))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_min_key(y), @\int_min(*((y->key)), sll_min_key(*((y->next)))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(srtl(y), &&(&&(srtl(*((y->next))), unchecked!(@_vcc_oset_in(y, srtl_reach(*((y->next)))))), <=(*((y->key)), sll_min_key(*((y->next))))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(srtl_reach(y), @_vcc_oset_union(srtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_keys(x), @_vcc_intset_union(sll_keys(*((x->next))), @_vcc_intset_singleton(*((x->key)))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_list_len_next(x), unchecked+(sll_list_len_next(*((x->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(rsrtl(x), &&(&&(rsrtl(*((x->next))), unchecked!(@_vcc_oset_in(x, rsrtl_reach(*((x->next)))))), >=(*((x->key)), sll_max_key(*((x->next))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(rsrtl_reach(x), @_vcc_oset_union(rsrtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll(x), &&(sll(*((x->next))), unchecked!(@_vcc_oset_in(x, sll_reach(*((x->next)))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_reach(x), @_vcc_oset_union(sll_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_max_key(x), @\int_max(*((x->key)), sll_max_key(*((x->next)))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_min_key(x), @\int_min(*((x->key)), sll_min_key(*((x->next)))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(srtl(x), &&(&&(srtl(*((x->next))), unchecked!(@_vcc_oset_in(x, srtl_reach(*((x->next)))))), <=(*((x->key)), sll_min_key(*((x->next))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(srtl_reach(x), @_vcc_oset_union(srtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(curr_x)))), ==(old(_dryad_S0, sll_keys(curr_x)), old(_dryad_S1, sll_keys(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(curr_x)))), ==(old(_dryad_S0, sll_list_len_next(curr_x)), old(_dryad_S1, sll_list_len_next(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, rsrtl_reach(curr_x)))), ==(old(_dryad_S0, rsrtl(curr_x)), old(_dryad_S1, rsrtl(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#rsrtl(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node)) == F#rsrtl(SL#_dryad_S1, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, rsrtl_reach(curr_x)))), ==(old(_dryad_S0, rsrtl_reach(curr_x)), old(_dryad_S1, rsrtl_reach(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(curr_x)))), ==(old(_dryad_S0, sll(curr_x)), old(_dryad_S1, sll(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(curr_x)))), ==(old(_dryad_S0, sll_reach(curr_x)), old(_dryad_S1, sll_reach(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(curr_x)))), ==(old(_dryad_S0, sll_max_key(curr_x)), old(_dryad_S1, sll_max_key(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_max_key(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_max_key(SL#_dryad_S1, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(curr_x)))), ==(old(_dryad_S0, sll_min_key(curr_x)), old(_dryad_S1, sll_min_key(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_min_key(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_min_key(SL#_dryad_S1, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, srtl_reach(curr_x)))), ==(old(_dryad_S0, srtl(curr_x)), old(_dryad_S1, srtl(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl(SL#_dryad_S1, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, srtl_reach(curr_x)))), ==(old(_dryad_S0, srtl_reach(curr_x)), old(_dryad_S1, srtl_reach(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(curr_y)))), ==(old(_dryad_S0, sll_keys(curr_y)), old(_dryad_S1, sll_keys(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(curr_y)))), ==(old(_dryad_S0, sll_list_len_next(curr_y)), old(_dryad_S1, sll_list_len_next(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, rsrtl_reach(curr_y)))), ==(old(_dryad_S0, rsrtl(curr_y)), old(_dryad_S1, rsrtl(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#rsrtl(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node)) == F#rsrtl(SL#_dryad_S1, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, rsrtl_reach(curr_y)))), ==(old(_dryad_S0, rsrtl_reach(curr_y)), old(_dryad_S1, rsrtl_reach(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(curr_y)))), ==(old(_dryad_S0, sll(curr_y)), old(_dryad_S1, sll(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(curr_y)))), ==(old(_dryad_S0, sll_reach(curr_y)), old(_dryad_S1, sll_reach(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(curr_y)))), ==(old(_dryad_S0, sll_max_key(curr_y)), old(_dryad_S1, sll_max_key(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_max_key(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_max_key(SL#_dryad_S1, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(curr_y)))), ==(old(_dryad_S0, sll_min_key(curr_y)), old(_dryad_S1, sll_min_key(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_min_key(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_min_key(SL#_dryad_S1, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, srtl_reach(curr_y)))), ==(old(_dryad_S0, srtl(curr_y)), old(_dryad_S1, srtl(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl(SL#_dryad_S1, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, srtl_reach(curr_y)))), ==(old(_dryad_S0, srtl_reach(curr_y)), old(_dryad_S1, srtl_reach(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(last_z)))), ==(old(_dryad_S0, sll_keys(last_z)), old(_dryad_S1, sll_keys(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(last_z)))), ==(old(_dryad_S0, sll_list_len_next(last_z)), old(_dryad_S1, sll_list_len_next(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, rsrtl_reach(last_z)))), ==(old(_dryad_S0, rsrtl(last_z)), old(_dryad_S1, rsrtl(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#rsrtl(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node)) == F#rsrtl(SL#_dryad_S1, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, rsrtl_reach(last_z)))), ==(old(_dryad_S0, rsrtl_reach(last_z)), old(_dryad_S1, rsrtl_reach(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node)) == F#rsrtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(last_z)))), ==(old(_dryad_S0, sll(last_z)), old(_dryad_S1, sll(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(last_z)))), ==(old(_dryad_S0, sll_reach(last_z)), old(_dryad_S1, sll_reach(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(last_z)))), ==(old(_dryad_S0, sll_max_key(last_z)), old(_dryad_S1, sll_max_key(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_max_key(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_max_key(SL#_dryad_S1, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(last_z)))), ==(old(_dryad_S0, sll_min_key(last_z)), old(_dryad_S1, sll_min_key(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_min_key(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_min_key(SL#_dryad_S1, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, srtl_reach(last_z)))), ==(old(_dryad_S0, srtl(last_z)), old(_dryad_S1, srtl(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#srtl(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl(SL#_dryad_S1, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, srtl_reach(last_z)))), ==(old(_dryad_S0, srtl_reach(last_z)), old(_dryad_S1, srtl_reach(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(y)))), ==(old(_dryad_S0, sll_keys(y)), old(_dryad_S1, sll_keys(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(y)))), ==(old(_dryad_S0, sll_list_len_next(y)), old(_dryad_S1, sll_list_len_next(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, rsrtl_reach(y)))), ==(old(_dryad_S0, rsrtl(y)), old(_dryad_S1, rsrtl(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node))) ==> F#rsrtl(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node)) == F#rsrtl(SL#_dryad_S1, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, rsrtl_reach(y)))), ==(old(_dryad_S0, rsrtl_reach(y)), old(_dryad_S1, rsrtl_reach(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S1, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(y)))), ==(old(_dryad_S0, sll(y)), old(_dryad_S1, sll(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(y)))), ==(old(_dryad_S0, sll_reach(y)), old(_dryad_S1, sll_reach(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(y)))), ==(old(_dryad_S0, sll_max_key(y)), old(_dryad_S1, sll_max_key(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_max_key(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node)) == F#sll_max_key(SL#_dryad_S1, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(y)))), ==(old(_dryad_S0, sll_min_key(y)), old(_dryad_S1, sll_min_key(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_min_key(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node)) == F#sll_min_key(SL#_dryad_S1, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, srtl_reach(y)))), ==(old(_dryad_S0, srtl(y)), old(_dryad_S1, srtl(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node))) ==> F#srtl(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node)) == F#srtl(SL#_dryad_S1, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, srtl_reach(y)))), ==(old(_dryad_S0, srtl_reach(y)), old(_dryad_S1, srtl_reach(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node))) ==> F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node)) == F#srtl_reach(SL#_dryad_S1, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(x)))), ==(old(_dryad_S0, sll_keys(x)), old(_dryad_S1, sll_keys(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(x)))), ==(old(_dryad_S0, sll_list_len_next(x)), old(_dryad_S1, sll_list_len_next(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, rsrtl_reach(x)))), ==(old(_dryad_S0, rsrtl(x)), old(_dryad_S1, rsrtl(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node))) ==> F#rsrtl(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node)) == F#rsrtl(SL#_dryad_S1, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, rsrtl_reach(x)))), ==(old(_dryad_S0, rsrtl_reach(x)), old(_dryad_S1, rsrtl_reach(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S1, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(x)))), ==(old(_dryad_S0, sll(x)), old(_dryad_S1, sll(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(x)))), ==(old(_dryad_S0, sll_reach(x)), old(_dryad_S1, sll_reach(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(x)))), ==(old(_dryad_S0, sll_max_key(x)), old(_dryad_S1, sll_max_key(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_max_key(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node)) == F#sll_max_key(SL#_dryad_S1, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(x)))), ==(old(_dryad_S0, sll_min_key(x)), old(_dryad_S1, sll_min_key(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_min_key(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node)) == F#sll_min_key(SL#_dryad_S1, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, srtl_reach(x)))), ==(old(_dryad_S0, srtl(x)), old(_dryad_S1, srtl(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node))) ==> F#srtl(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node)) == F#srtl(SL#_dryad_S1, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, srtl_reach(x)))), ==(old(_dryad_S0, srtl_reach(x)), old(_dryad_S1, srtl_reach(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node))) ==> F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node)) == F#srtl_reach(SL#_dryad_S1, $phys_ptr_cast(P#x, ^s_node));
    // assume @_vcc_ptr_neq_null(z); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node));
    // assume unchecked!(@_vcc_oset_in(z, ALL_REACH)); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), SL#ALL_REACH);
    // ALL_REACH := @_vcc_oset_union(ALL_REACH, @_vcc_oset_singleton(z)); 
    SL#ALL_REACH := $oset_union(SL#ALL_REACH, $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
    // last_z := z; 
    L#last_z := $phys_ptr_cast(L#z, ^s_node);
    // assert sll_lseg(curr_x, curr_x); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
    // assume sll_lseg(curr_x, curr_x); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
    // assert srtl_lseg(curr_x, curr_x); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
    // assume srtl_lseg(curr_x, curr_x); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
    // assert sll_lseg(curr_y, curr_y); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
    // assume sll_lseg(curr_y, curr_y); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
    // assert srtl_lseg(curr_y, curr_y); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
    // assume srtl_lseg(curr_y, curr_y); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
    // assert sll_lseg(z, z); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#z, ^s_node));
    // assume sll_lseg(z, z); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#z, ^s_node));
    // assert srtl_lseg(z, z); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#z, ^s_node));
    // assume srtl_lseg(z, z); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#z, ^s_node));
    // assert sll_lseg(last_z, last_z); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#last_z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
    // assume sll_lseg(last_z, last_z); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#last_z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
    // assert srtl_lseg(last_z, last_z); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#last_z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
    // assume srtl_lseg(last_z, last_z); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#last_z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
    // assert sll_lseg(y, y); 
    assert F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(P#y, ^s_node));
    // assume sll_lseg(y, y); 
    assume F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(P#y, ^s_node));
    // assert srtl_lseg(y, y); 
    assert F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(P#y, ^s_node));
    // assume srtl_lseg(y, y); 
    assume F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(P#y, ^s_node));
    // assert sll_lseg(x, x); 
    assert F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(P#x, ^s_node));
    // assume sll_lseg(x, x); 
    assume F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(P#x, ^s_node));
    // assert srtl_lseg(x, x); 
    assert F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(P#x, ^s_node));
    // assume srtl_lseg(x, x); 
    assume F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(P#x, ^s_node));
    // assert @reads_check_normal((curr_x->key)); 
    assert $thread_local($s, $phys_ptr_cast(L#curr_x, ^s_node));
    // assert @reads_check_normal((curr_y->key)); 
    assert $thread_local($s, $phys_ptr_cast(L#curr_y, ^s_node));
    // z_key := unchecked+(*((curr_x->key)), *((curr_y->key))); 
    L#z_key := $unchk_add(^^i4, $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)));
    // _math \state _dryad_S2; 
    // _dryad_S2 := @_vcc_current_state(@state); 
    SL#_dryad_S2 := $current_state($s);
    // _math \state stmtexpr5#24; 
    // stmtexpr5#24 := _dryad_S2; 
    stmtexpr5#24 := SL#_dryad_S2;
    // assert @prim_writes_check((z->key)); 
    assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#z, ^s_node), s_node.key));
    // *(z->key) := z_key; 
    call $write_int(s_node.key, $phys_ptr_cast(L#z, ^s_node), L#z_key);
    assume $full_stop_ext(#tok$3^29.3, $s);
    // _math \state _dryad_S3; 
    // _dryad_S3 := @_vcc_current_state(@state); 
    SL#_dryad_S3 := $current_state($s);
    // _math \state stmtexpr6#25; 
    // stmtexpr6#25 := _dryad_S3; 
    stmtexpr6#25 := SL#_dryad_S3;
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(*((z->next)))))), ==(old(_dryad_S2, sll_keys(*((z->next)))), old(_dryad_S3, sll_keys(*((z->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) == F#sll_keys(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(*((z->next)))))), ==(old(_dryad_S2, sll_list_len_next(*((z->next)))), old(_dryad_S3, sll_list_len_next(*((z->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, rsrtl_reach(*((z->next)))))), ==(old(_dryad_S2, rsrtl(*((z->next)))), old(_dryad_S3, rsrtl(*((z->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) == F#rsrtl(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, rsrtl_reach(*((z->next)))))), ==(old(_dryad_S2, rsrtl_reach(*((z->next)))), old(_dryad_S3, rsrtl_reach(*((z->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(*((z->next)))))), ==(old(_dryad_S2, sll(*((z->next)))), old(_dryad_S3, sll(*((z->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) ==> F#sll(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) == F#sll(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(*((z->next)))))), ==(old(_dryad_S2, sll_reach(*((z->next)))), old(_dryad_S3, sll_reach(*((z->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) == F#sll_reach(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(*((z->next)))))), ==(old(_dryad_S2, sll_max_key(*((z->next)))), old(_dryad_S3, sll_max_key(*((z->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) == F#sll_max_key(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(*((z->next)))))), ==(old(_dryad_S2, sll_min_key(*((z->next)))), old(_dryad_S3, sll_min_key(*((z->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) == F#sll_min_key(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, srtl_reach(*((z->next)))))), ==(old(_dryad_S2, srtl(*((z->next)))), old(_dryad_S3, srtl(*((z->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) ==> F#srtl(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) == F#srtl(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, srtl_reach(*((z->next)))))), ==(old(_dryad_S2, srtl_reach(*((z->next)))), old(_dryad_S3, srtl_reach(*((z->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) == F#srtl_reach(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node));
    // assume ==(old(_dryad_S2, sll_list_len_next(curr_x)), old(_dryad_S3, sll_list_len_next(curr_x))); 
    assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==(old(_dryad_S2, rsrtl_reach(curr_x)), old(_dryad_S3, rsrtl_reach(curr_x))); 
    assume F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==(old(_dryad_S2, sll(curr_x)), old(_dryad_S3, sll(curr_x))); 
    assume F#sll(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==(old(_dryad_S2, sll_reach(curr_x)), old(_dryad_S3, sll_reach(curr_x))); 
    assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==(old(_dryad_S2, srtl_reach(curr_x)), old(_dryad_S3, srtl_reach(curr_x))); 
    assume F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==(old(_dryad_S2, sll_list_len_next(curr_y)), old(_dryad_S3, sll_list_len_next(curr_y))); 
    assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==(old(_dryad_S2, rsrtl_reach(curr_y)), old(_dryad_S3, rsrtl_reach(curr_y))); 
    assume F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==(old(_dryad_S2, sll(curr_y)), old(_dryad_S3, sll(curr_y))); 
    assume F#sll(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==(old(_dryad_S2, sll_reach(curr_y)), old(_dryad_S3, sll_reach(curr_y))); 
    assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==(old(_dryad_S2, srtl_reach(curr_y)), old(_dryad_S3, srtl_reach(curr_y))); 
    assume F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==(old(_dryad_S2, sll_list_len_next(z)), old(_dryad_S3, sll_list_len_next(z))); 
    assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#z, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#z, ^s_node));
    // assume ==(old(_dryad_S2, rsrtl_reach(z)), old(_dryad_S3, rsrtl_reach(z))); 
    assume F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#z, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#z, ^s_node));
    // assume ==(old(_dryad_S2, sll(z)), old(_dryad_S3, sll(z))); 
    assume F#sll(SL#_dryad_S2, $phys_ptr_cast(L#z, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#z, ^s_node));
    // assume ==(old(_dryad_S2, sll_reach(z)), old(_dryad_S3, sll_reach(z))); 
    assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#z, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#z, ^s_node));
    // assume ==(old(_dryad_S2, srtl_reach(z)), old(_dryad_S3, srtl_reach(z))); 
    assume F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#z, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#z, ^s_node));
    // assume ==(old(_dryad_S2, sll_list_len_next(last_z)), old(_dryad_S3, sll_list_len_next(last_z))); 
    assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==(old(_dryad_S2, rsrtl_reach(last_z)), old(_dryad_S3, rsrtl_reach(last_z))); 
    assume F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==(old(_dryad_S2, sll(last_z)), old(_dryad_S3, sll(last_z))); 
    assume F#sll(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==(old(_dryad_S2, sll_reach(last_z)), old(_dryad_S3, sll_reach(last_z))); 
    assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==(old(_dryad_S2, srtl_reach(last_z)), old(_dryad_S3, srtl_reach(last_z))); 
    assume F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==(old(_dryad_S2, sll_list_len_next(y)), old(_dryad_S3, sll_list_len_next(y))); 
    assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(P#y, ^s_node));
    // assume ==(old(_dryad_S2, rsrtl_reach(y)), old(_dryad_S3, rsrtl_reach(y))); 
    assume F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(P#y, ^s_node));
    // assume ==(old(_dryad_S2, sll(y)), old(_dryad_S3, sll(y))); 
    assume F#sll(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(P#y, ^s_node));
    // assume ==(old(_dryad_S2, sll_reach(y)), old(_dryad_S3, sll_reach(y))); 
    assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(P#y, ^s_node));
    // assume ==(old(_dryad_S2, srtl_reach(y)), old(_dryad_S3, srtl_reach(y))); 
    assume F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(P#y, ^s_node));
    // assume ==(old(_dryad_S2, sll_list_len_next(x)), old(_dryad_S3, sll_list_len_next(x))); 
    assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(P#x, ^s_node));
    // assume ==(old(_dryad_S2, rsrtl_reach(x)), old(_dryad_S3, rsrtl_reach(x))); 
    assume F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(P#x, ^s_node));
    // assume ==(old(_dryad_S2, sll(x)), old(_dryad_S3, sll(x))); 
    assume F#sll(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(P#x, ^s_node));
    // assume ==(old(_dryad_S2, sll_reach(x)), old(_dryad_S3, sll_reach(x))); 
    assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(P#x, ^s_node));
    // assume ==(old(_dryad_S2, srtl_reach(x)), old(_dryad_S3, srtl_reach(x))); 
    assume F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(curr_x)))), ==(old(_dryad_S2, sll_keys(curr_x)), old(_dryad_S3, sll_keys(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(curr_x)))), ==(old(_dryad_S2, sll_list_len_next(curr_x)), old(_dryad_S3, sll_list_len_next(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, rsrtl_reach(curr_x)))), ==(old(_dryad_S2, rsrtl(curr_x)), old(_dryad_S3, rsrtl(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node)) == F#rsrtl(SL#_dryad_S3, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, rsrtl_reach(curr_x)))), ==(old(_dryad_S2, rsrtl_reach(curr_x)), old(_dryad_S3, rsrtl_reach(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(curr_x)))), ==(old(_dryad_S2, sll(curr_x)), old(_dryad_S3, sll(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(curr_x)))), ==(old(_dryad_S2, sll_reach(curr_x)), old(_dryad_S3, sll_reach(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(curr_x)))), ==(old(_dryad_S2, sll_max_key(curr_x)), old(_dryad_S3, sll_max_key(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_max_key(SL#_dryad_S3, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(curr_x)))), ==(old(_dryad_S2, sll_min_key(curr_x)), old(_dryad_S3, sll_min_key(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_min_key(SL#_dryad_S3, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, srtl_reach(curr_x)))), ==(old(_dryad_S2, srtl(curr_x)), old(_dryad_S3, srtl(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl(SL#_dryad_S3, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, srtl_reach(curr_x)))), ==(old(_dryad_S2, srtl_reach(curr_x)), old(_dryad_S3, srtl_reach(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(curr_y)))), ==(old(_dryad_S2, sll_keys(curr_y)), old(_dryad_S3, sll_keys(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(curr_y)))), ==(old(_dryad_S2, sll_list_len_next(curr_y)), old(_dryad_S3, sll_list_len_next(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, rsrtl_reach(curr_y)))), ==(old(_dryad_S2, rsrtl(curr_y)), old(_dryad_S3, rsrtl(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node)) == F#rsrtl(SL#_dryad_S3, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, rsrtl_reach(curr_y)))), ==(old(_dryad_S2, rsrtl_reach(curr_y)), old(_dryad_S3, rsrtl_reach(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(curr_y)))), ==(old(_dryad_S2, sll(curr_y)), old(_dryad_S3, sll(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(curr_y)))), ==(old(_dryad_S2, sll_reach(curr_y)), old(_dryad_S3, sll_reach(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(curr_y)))), ==(old(_dryad_S2, sll_max_key(curr_y)), old(_dryad_S3, sll_max_key(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_max_key(SL#_dryad_S3, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(curr_y)))), ==(old(_dryad_S2, sll_min_key(curr_y)), old(_dryad_S3, sll_min_key(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_min_key(SL#_dryad_S3, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, srtl_reach(curr_y)))), ==(old(_dryad_S2, srtl(curr_y)), old(_dryad_S3, srtl(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl(SL#_dryad_S3, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, srtl_reach(curr_y)))), ==(old(_dryad_S2, srtl_reach(curr_y)), old(_dryad_S3, srtl_reach(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(last_z)))), ==(old(_dryad_S2, sll_keys(last_z)), old(_dryad_S3, sll_keys(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(last_z)))), ==(old(_dryad_S2, sll_list_len_next(last_z)), old(_dryad_S3, sll_list_len_next(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, rsrtl_reach(last_z)))), ==(old(_dryad_S2, rsrtl(last_z)), old(_dryad_S3, rsrtl(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node)) == F#rsrtl(SL#_dryad_S3, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, rsrtl_reach(last_z)))), ==(old(_dryad_S2, rsrtl_reach(last_z)), old(_dryad_S3, rsrtl_reach(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(last_z)))), ==(old(_dryad_S2, sll(last_z)), old(_dryad_S3, sll(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(last_z)))), ==(old(_dryad_S2, sll_reach(last_z)), old(_dryad_S3, sll_reach(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(last_z)))), ==(old(_dryad_S2, sll_max_key(last_z)), old(_dryad_S3, sll_max_key(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_max_key(SL#_dryad_S3, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(last_z)))), ==(old(_dryad_S2, sll_min_key(last_z)), old(_dryad_S3, sll_min_key(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_min_key(SL#_dryad_S3, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, srtl_reach(last_z)))), ==(old(_dryad_S2, srtl(last_z)), old(_dryad_S3, srtl(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#srtl(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl(SL#_dryad_S3, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, srtl_reach(last_z)))), ==(old(_dryad_S2, srtl_reach(last_z)), old(_dryad_S3, srtl_reach(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(y)))), ==(old(_dryad_S2, sll_keys(y)), old(_dryad_S3, sll_keys(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(y)))), ==(old(_dryad_S2, sll_list_len_next(y)), old(_dryad_S3, sll_list_len_next(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, rsrtl_reach(y)))), ==(old(_dryad_S2, rsrtl(y)), old(_dryad_S3, rsrtl(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node)) == F#rsrtl(SL#_dryad_S3, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, rsrtl_reach(y)))), ==(old(_dryad_S2, rsrtl_reach(y)), old(_dryad_S3, rsrtl_reach(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(y)))), ==(old(_dryad_S2, sll(y)), old(_dryad_S3, sll(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(y)))), ==(old(_dryad_S2, sll_reach(y)), old(_dryad_S3, sll_reach(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(y)))), ==(old(_dryad_S2, sll_max_key(y)), old(_dryad_S3, sll_max_key(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node)) == F#sll_max_key(SL#_dryad_S3, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(y)))), ==(old(_dryad_S2, sll_min_key(y)), old(_dryad_S3, sll_min_key(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node)) == F#sll_min_key(SL#_dryad_S3, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, srtl_reach(y)))), ==(old(_dryad_S2, srtl(y)), old(_dryad_S3, srtl(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node))) ==> F#srtl(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node)) == F#srtl(SL#_dryad_S3, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, srtl_reach(y)))), ==(old(_dryad_S2, srtl_reach(y)), old(_dryad_S3, srtl_reach(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(x)))), ==(old(_dryad_S2, sll_keys(x)), old(_dryad_S3, sll_keys(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(x)))), ==(old(_dryad_S2, sll_list_len_next(x)), old(_dryad_S3, sll_list_len_next(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, rsrtl_reach(x)))), ==(old(_dryad_S2, rsrtl(x)), old(_dryad_S3, rsrtl(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node)) == F#rsrtl(SL#_dryad_S3, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, rsrtl_reach(x)))), ==(old(_dryad_S2, rsrtl_reach(x)), old(_dryad_S3, rsrtl_reach(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(x)))), ==(old(_dryad_S2, sll(x)), old(_dryad_S3, sll(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(x)))), ==(old(_dryad_S2, sll_reach(x)), old(_dryad_S3, sll_reach(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(x)))), ==(old(_dryad_S2, sll_max_key(x)), old(_dryad_S3, sll_max_key(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node)) == F#sll_max_key(SL#_dryad_S3, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(x)))), ==(old(_dryad_S2, sll_min_key(x)), old(_dryad_S3, sll_min_key(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node)) == F#sll_min_key(SL#_dryad_S3, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, srtl_reach(x)))), ==(old(_dryad_S2, srtl(x)), old(_dryad_S3, srtl(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node))) ==> F#srtl(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node)) == F#srtl(SL#_dryad_S3, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, srtl_reach(x)))), ==(old(_dryad_S2, srtl_reach(x)), old(_dryad_S3, srtl_reach(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(z, curr_x)), ==(*((curr_x->key)), old(_dryad_S2, *((curr_x->key))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(L#curr_x, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(z, curr_x)), @_vcc_ptr_eq_pure(*((curr_x->next)), old(_dryad_S2, *((curr_x->next))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(L#curr_x, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(z, curr_y)), ==(*((curr_y->key)), old(_dryad_S2, *((curr_y->key))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(L#curr_y, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(z, curr_y)), @_vcc_ptr_eq_pure(*((curr_y->next)), old(_dryad_S2, *((curr_y->next))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(L#curr_y, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(z, last_z)), ==(*((last_z->key)), old(_dryad_S2, *((last_z->key))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(L#last_z, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(z, last_z)), @_vcc_ptr_eq_pure(*((last_z->next)), old(_dryad_S2, *((last_z->next))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(L#last_z, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(z, y)), ==(*((y->key)), old(_dryad_S2, *((y->key))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(P#y, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(z, y)), @_vcc_ptr_eq_pure(*((y->next)), old(_dryad_S2, *((y->next))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(P#y, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(z, x)), ==(*((x->key)), old(_dryad_S2, *((x->key))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(P#x, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(z, x)), @_vcc_ptr_eq_pure(*((x->next)), old(_dryad_S2, *((x->next))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(P#x, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node);
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_keys(curr_x), @_vcc_intset_union(sll_keys(*((curr_x->next))), @_vcc_intset_singleton(*((curr_x->key)))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_list_len_next(curr_x), unchecked+(sll_list_len_next(*((curr_x->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(rsrtl(curr_x), &&(&&(rsrtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, rsrtl_reach(*((curr_x->next)))))), >=(*((curr_x->key)), sll_max_key(*((curr_x->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(rsrtl_reach(curr_x), @_vcc_oset_union(rsrtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll(curr_x), &&(sll(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, sll_reach(*((curr_x->next)))))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_reach(curr_x), @_vcc_oset_union(sll_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_max_key(curr_x), @\int_max(*((curr_x->key)), sll_max_key(*((curr_x->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_min_key(curr_x), @\int_min(*((curr_x->key)), sll_min_key(*((curr_x->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(srtl(curr_x), &&(&&(srtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, srtl_reach(*((curr_x->next)))))), <=(*((curr_x->key)), sll_min_key(*((curr_x->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(srtl_reach(curr_x), @_vcc_oset_union(srtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_keys(curr_y), @_vcc_intset_union(sll_keys(*((curr_y->next))), @_vcc_intset_singleton(*((curr_y->key)))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_list_len_next(curr_y), unchecked+(sll_list_len_next(*((curr_y->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(rsrtl(curr_y), &&(&&(rsrtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, rsrtl_reach(*((curr_y->next)))))), >=(*((curr_y->key)), sll_max_key(*((curr_y->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(rsrtl_reach(curr_y), @_vcc_oset_union(rsrtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll(curr_y), &&(sll(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, sll_reach(*((curr_y->next)))))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_reach(curr_y), @_vcc_oset_union(sll_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_max_key(curr_y), @\int_max(*((curr_y->key)), sll_max_key(*((curr_y->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_min_key(curr_y), @\int_min(*((curr_y->key)), sll_min_key(*((curr_y->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(srtl(curr_y), &&(&&(srtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, srtl_reach(*((curr_y->next)))))), <=(*((curr_y->key)), sll_min_key(*((curr_y->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(srtl_reach(curr_y), @_vcc_oset_union(srtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_keys(last_z), @_vcc_intset_union(sll_keys(*((last_z->next))), @_vcc_intset_singleton(*((last_z->key)))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#last_z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_list_len_next(last_z), unchecked+(sll_list_len_next(*((last_z->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#last_z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(rsrtl(last_z), &&(&&(rsrtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, rsrtl_reach(*((last_z->next)))))), >=(*((last_z->key)), sll_max_key(*((last_z->next))))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(rsrtl_reach(last_z), @_vcc_oset_union(rsrtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll(last_z), &&(sll(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, sll_reach(*((last_z->next)))))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_reach(last_z), @_vcc_oset_union(sll_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_max_key(last_z), @\int_max(*((last_z->key)), sll_max_key(*((last_z->next)))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_min_key(last_z), @\int_min(*((last_z->key)), sll_min_key(*((last_z->next)))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(srtl(last_z), &&(&&(srtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, srtl_reach(*((last_z->next)))))), <=(*((last_z->key)), sll_min_key(*((last_z->next))))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(srtl_reach(last_z), @_vcc_oset_union(srtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_keys(y), @_vcc_intset_union(sll_keys(*((y->next))), @_vcc_intset_singleton(*((y->key)))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_list_len_next(y), unchecked+(sll_list_len_next(*((y->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(rsrtl(y), &&(&&(rsrtl(*((y->next))), unchecked!(@_vcc_oset_in(y, rsrtl_reach(*((y->next)))))), >=(*((y->key)), sll_max_key(*((y->next))))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(rsrtl_reach(y), @_vcc_oset_union(rsrtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll(y), &&(sll(*((y->next))), unchecked!(@_vcc_oset_in(y, sll_reach(*((y->next)))))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_reach(y), @_vcc_oset_union(sll_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_max_key(y), @\int_max(*((y->key)), sll_max_key(*((y->next)))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_min_key(y), @\int_min(*((y->key)), sll_min_key(*((y->next)))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(srtl(y), &&(&&(srtl(*((y->next))), unchecked!(@_vcc_oset_in(y, srtl_reach(*((y->next)))))), <=(*((y->key)), sll_min_key(*((y->next))))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(srtl_reach(y), @_vcc_oset_union(srtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_keys(x), @_vcc_intset_union(sll_keys(*((x->next))), @_vcc_intset_singleton(*((x->key)))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_list_len_next(x), unchecked+(sll_list_len_next(*((x->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(rsrtl(x), &&(&&(rsrtl(*((x->next))), unchecked!(@_vcc_oset_in(x, rsrtl_reach(*((x->next)))))), >=(*((x->key)), sll_max_key(*((x->next))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(rsrtl_reach(x), @_vcc_oset_union(rsrtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll(x), &&(sll(*((x->next))), unchecked!(@_vcc_oset_in(x, sll_reach(*((x->next)))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_reach(x), @_vcc_oset_union(sll_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_max_key(x), @\int_max(*((x->key)), sll_max_key(*((x->next)))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_min_key(x), @\int_min(*((x->key)), sll_min_key(*((x->next)))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(srtl(x), &&(&&(srtl(*((x->next))), unchecked!(@_vcc_oset_in(x, srtl_reach(*((x->next)))))), <=(*((x->key)), sll_min_key(*((x->next))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(srtl_reach(x), @_vcc_oset_union(srtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_keys(z), @_vcc_intset_union(sll_keys(*((z->next))), @_vcc_intset_singleton(*((z->key)))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node))));
    // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(rsrtl(z), &&(&&(rsrtl(*((z->next))), unchecked!(@_vcc_oset_in(z, rsrtl_reach(*((z->next)))))), >=(*((z->key)), sll_max_key(*((z->next))))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_max_key(z), @\int_max(*((z->key)), sll_max_key(*((z->next)))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_min_key(z), @\int_min(*((z->key)), sll_min_key(*((z->next)))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(srtl(z), &&(&&(srtl(*((z->next))), unchecked!(@_vcc_oset_in(z, srtl_reach(*((z->next)))))), <=(*((z->key)), sll_min_key(*((z->next))))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
    // assume ==(*((z->key)), +(*((curr_x->key)), *((curr_y->key)))); 
    assume $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) == $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) + $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node));
    // _math \state _dryad_S4; 
    // _dryad_S4 := @_vcc_current_state(@state); 
    SL#_dryad_S4 := $current_state($s);
    // _math \state stmtexpr7#26; 
    // stmtexpr7#26 := _dryad_S4; 
    stmtexpr7#26 := SL#_dryad_S4;
    // assert @prim_writes_check((z->next)); 
    assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#z, ^s_node), s_node.next));
    // *(z->next) := (struct s_node*)@null; 
    call $write_int(s_node.next, $phys_ptr_cast(L#z, ^s_node), $ptr_to_int($phys_ptr_cast($null, ^s_node)));
    assume $full_stop_ext(#tok$3^31.3, $s);
    // _math \state _dryad_S5; 
    // _dryad_S5 := @_vcc_current_state(@state); 
    SL#_dryad_S5 := $current_state($s);
    // _math \state stmtexpr8#27; 
    // stmtexpr8#27 := _dryad_S5; 
    stmtexpr8#27 := SL#_dryad_S5;
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(curr_x)))), ==(old(_dryad_S4, sll_keys(curr_x)), old(_dryad_S5, sll_keys(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(curr_x)))), ==(old(_dryad_S4, sll_list_len_next(curr_x)), old(_dryad_S5, sll_list_len_next(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, rsrtl_reach(curr_x)))), ==(old(_dryad_S4, rsrtl(curr_x)), old(_dryad_S5, rsrtl(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#rsrtl(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node)) == F#rsrtl(SL#_dryad_S5, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, rsrtl_reach(curr_x)))), ==(old(_dryad_S4, rsrtl_reach(curr_x)), old(_dryad_S5, rsrtl_reach(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(curr_x)))), ==(old(_dryad_S4, sll(curr_x)), old(_dryad_S5, sll(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(curr_x)))), ==(old(_dryad_S4, sll_reach(curr_x)), old(_dryad_S5, sll_reach(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(curr_x)))), ==(old(_dryad_S4, sll_max_key(curr_x)), old(_dryad_S5, sll_max_key(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_max_key(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_max_key(SL#_dryad_S5, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(curr_x)))), ==(old(_dryad_S4, sll_min_key(curr_x)), old(_dryad_S5, sll_min_key(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_min_key(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_min_key(SL#_dryad_S5, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, srtl_reach(curr_x)))), ==(old(_dryad_S4, srtl(curr_x)), old(_dryad_S5, srtl(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl(SL#_dryad_S5, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, srtl_reach(curr_x)))), ==(old(_dryad_S4, srtl_reach(curr_x)), old(_dryad_S5, srtl_reach(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(curr_y)))), ==(old(_dryad_S4, sll_keys(curr_y)), old(_dryad_S5, sll_keys(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(curr_y)))), ==(old(_dryad_S4, sll_list_len_next(curr_y)), old(_dryad_S5, sll_list_len_next(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, rsrtl_reach(curr_y)))), ==(old(_dryad_S4, rsrtl(curr_y)), old(_dryad_S5, rsrtl(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#rsrtl(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node)) == F#rsrtl(SL#_dryad_S5, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, rsrtl_reach(curr_y)))), ==(old(_dryad_S4, rsrtl_reach(curr_y)), old(_dryad_S5, rsrtl_reach(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(curr_y)))), ==(old(_dryad_S4, sll(curr_y)), old(_dryad_S5, sll(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(curr_y)))), ==(old(_dryad_S4, sll_reach(curr_y)), old(_dryad_S5, sll_reach(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(curr_y)))), ==(old(_dryad_S4, sll_max_key(curr_y)), old(_dryad_S5, sll_max_key(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_max_key(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_max_key(SL#_dryad_S5, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(curr_y)))), ==(old(_dryad_S4, sll_min_key(curr_y)), old(_dryad_S5, sll_min_key(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_min_key(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_min_key(SL#_dryad_S5, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, srtl_reach(curr_y)))), ==(old(_dryad_S4, srtl(curr_y)), old(_dryad_S5, srtl(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl(SL#_dryad_S5, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, srtl_reach(curr_y)))), ==(old(_dryad_S4, srtl_reach(curr_y)), old(_dryad_S5, srtl_reach(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(last_z)))), ==(old(_dryad_S4, sll_keys(last_z)), old(_dryad_S5, sll_keys(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(last_z)))), ==(old(_dryad_S4, sll_list_len_next(last_z)), old(_dryad_S5, sll_list_len_next(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, rsrtl_reach(last_z)))), ==(old(_dryad_S4, rsrtl(last_z)), old(_dryad_S5, rsrtl(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#rsrtl(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node)) == F#rsrtl(SL#_dryad_S5, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, rsrtl_reach(last_z)))), ==(old(_dryad_S4, rsrtl_reach(last_z)), old(_dryad_S5, rsrtl_reach(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node)) == F#rsrtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(last_z)))), ==(old(_dryad_S4, sll(last_z)), old(_dryad_S5, sll(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(last_z)))), ==(old(_dryad_S4, sll_reach(last_z)), old(_dryad_S5, sll_reach(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(last_z)))), ==(old(_dryad_S4, sll_max_key(last_z)), old(_dryad_S5, sll_max_key(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_max_key(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_max_key(SL#_dryad_S5, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(last_z)))), ==(old(_dryad_S4, sll_min_key(last_z)), old(_dryad_S5, sll_min_key(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_min_key(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_min_key(SL#_dryad_S5, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, srtl_reach(last_z)))), ==(old(_dryad_S4, srtl(last_z)), old(_dryad_S5, srtl(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#srtl(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl(SL#_dryad_S5, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, srtl_reach(last_z)))), ==(old(_dryad_S4, srtl_reach(last_z)), old(_dryad_S5, srtl_reach(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(y)))), ==(old(_dryad_S4, sll_keys(y)), old(_dryad_S5, sll_keys(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(y)))), ==(old(_dryad_S4, sll_list_len_next(y)), old(_dryad_S5, sll_list_len_next(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, rsrtl_reach(y)))), ==(old(_dryad_S4, rsrtl(y)), old(_dryad_S5, rsrtl(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node))) ==> F#rsrtl(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node)) == F#rsrtl(SL#_dryad_S5, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, rsrtl_reach(y)))), ==(old(_dryad_S4, rsrtl_reach(y)), old(_dryad_S5, rsrtl_reach(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S5, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(y)))), ==(old(_dryad_S4, sll(y)), old(_dryad_S5, sll(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(y)))), ==(old(_dryad_S4, sll_reach(y)), old(_dryad_S5, sll_reach(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(y)))), ==(old(_dryad_S4, sll_max_key(y)), old(_dryad_S5, sll_max_key(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_max_key(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node)) == F#sll_max_key(SL#_dryad_S5, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(y)))), ==(old(_dryad_S4, sll_min_key(y)), old(_dryad_S5, sll_min_key(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_min_key(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node)) == F#sll_min_key(SL#_dryad_S5, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, srtl_reach(y)))), ==(old(_dryad_S4, srtl(y)), old(_dryad_S5, srtl(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node))) ==> F#srtl(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node)) == F#srtl(SL#_dryad_S5, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, srtl_reach(y)))), ==(old(_dryad_S4, srtl_reach(y)), old(_dryad_S5, srtl_reach(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node))) ==> F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node)) == F#srtl_reach(SL#_dryad_S5, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(x)))), ==(old(_dryad_S4, sll_keys(x)), old(_dryad_S5, sll_keys(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(x)))), ==(old(_dryad_S4, sll_list_len_next(x)), old(_dryad_S5, sll_list_len_next(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, rsrtl_reach(x)))), ==(old(_dryad_S4, rsrtl(x)), old(_dryad_S5, rsrtl(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node))) ==> F#rsrtl(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node)) == F#rsrtl(SL#_dryad_S5, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, rsrtl_reach(x)))), ==(old(_dryad_S4, rsrtl_reach(x)), old(_dryad_S5, rsrtl_reach(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S5, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(x)))), ==(old(_dryad_S4, sll(x)), old(_dryad_S5, sll(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(x)))), ==(old(_dryad_S4, sll_reach(x)), old(_dryad_S5, sll_reach(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(x)))), ==(old(_dryad_S4, sll_max_key(x)), old(_dryad_S5, sll_max_key(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_max_key(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node)) == F#sll_max_key(SL#_dryad_S5, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(x)))), ==(old(_dryad_S4, sll_min_key(x)), old(_dryad_S5, sll_min_key(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_min_key(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node)) == F#sll_min_key(SL#_dryad_S5, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, srtl_reach(x)))), ==(old(_dryad_S4, srtl(x)), old(_dryad_S5, srtl(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node))) ==> F#srtl(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node)) == F#srtl(SL#_dryad_S5, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, srtl_reach(x)))), ==(old(_dryad_S4, srtl_reach(x)), old(_dryad_S5, srtl_reach(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node))) ==> F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node)) == F#srtl_reach(SL#_dryad_S5, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(z, curr_x)), ==(*((curr_x->key)), old(_dryad_S4, *((curr_x->key))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(L#curr_x, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(z, curr_x)), @_vcc_ptr_eq_pure(*((curr_x->next)), old(_dryad_S4, *((curr_x->next))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(L#curr_x, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(z, curr_y)), ==(*((curr_y->key)), old(_dryad_S4, *((curr_y->key))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(L#curr_y, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(z, curr_y)), @_vcc_ptr_eq_pure(*((curr_y->next)), old(_dryad_S4, *((curr_y->next))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(L#curr_y, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(z, last_z)), ==(*((last_z->key)), old(_dryad_S4, *((last_z->key))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(L#last_z, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(z, last_z)), @_vcc_ptr_eq_pure(*((last_z->next)), old(_dryad_S4, *((last_z->next))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(L#last_z, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(z, y)), ==(*((y->key)), old(_dryad_S4, *((y->key))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(P#y, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(z, y)), @_vcc_ptr_eq_pure(*((y->next)), old(_dryad_S4, *((y->next))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(P#y, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(z, x)), ==(*((x->key)), old(_dryad_S4, *((x->key))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(P#x, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(z, x)), @_vcc_ptr_eq_pure(*((x->next)), old(_dryad_S4, *((x->next))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(P#x, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node);
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_keys(curr_x), @_vcc_intset_union(sll_keys(*((curr_x->next))), @_vcc_intset_singleton(*((curr_x->key)))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_list_len_next(curr_x), unchecked+(sll_list_len_next(*((curr_x->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(rsrtl(curr_x), &&(&&(rsrtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, rsrtl_reach(*((curr_x->next)))))), >=(*((curr_x->key)), sll_max_key(*((curr_x->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(rsrtl_reach(curr_x), @_vcc_oset_union(rsrtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll(curr_x), &&(sll(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, sll_reach(*((curr_x->next)))))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_reach(curr_x), @_vcc_oset_union(sll_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_max_key(curr_x), @\int_max(*((curr_x->key)), sll_max_key(*((curr_x->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_min_key(curr_x), @\int_min(*((curr_x->key)), sll_min_key(*((curr_x->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(srtl(curr_x), &&(&&(srtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, srtl_reach(*((curr_x->next)))))), <=(*((curr_x->key)), sll_min_key(*((curr_x->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(srtl_reach(curr_x), @_vcc_oset_union(srtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_keys(curr_y), @_vcc_intset_union(sll_keys(*((curr_y->next))), @_vcc_intset_singleton(*((curr_y->key)))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_list_len_next(curr_y), unchecked+(sll_list_len_next(*((curr_y->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(rsrtl(curr_y), &&(&&(rsrtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, rsrtl_reach(*((curr_y->next)))))), >=(*((curr_y->key)), sll_max_key(*((curr_y->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(rsrtl_reach(curr_y), @_vcc_oset_union(rsrtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll(curr_y), &&(sll(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, sll_reach(*((curr_y->next)))))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_reach(curr_y), @_vcc_oset_union(sll_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_max_key(curr_y), @\int_max(*((curr_y->key)), sll_max_key(*((curr_y->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_min_key(curr_y), @\int_min(*((curr_y->key)), sll_min_key(*((curr_y->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(srtl(curr_y), &&(&&(srtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, srtl_reach(*((curr_y->next)))))), <=(*((curr_y->key)), sll_min_key(*((curr_y->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(srtl_reach(curr_y), @_vcc_oset_union(srtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_keys(last_z), @_vcc_intset_union(sll_keys(*((last_z->next))), @_vcc_intset_singleton(*((last_z->key)))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#last_z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_list_len_next(last_z), unchecked+(sll_list_len_next(*((last_z->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#last_z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(rsrtl(last_z), &&(&&(rsrtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, rsrtl_reach(*((last_z->next)))))), >=(*((last_z->key)), sll_max_key(*((last_z->next))))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(rsrtl_reach(last_z), @_vcc_oset_union(rsrtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll(last_z), &&(sll(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, sll_reach(*((last_z->next)))))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_reach(last_z), @_vcc_oset_union(sll_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_max_key(last_z), @\int_max(*((last_z->key)), sll_max_key(*((last_z->next)))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_min_key(last_z), @\int_min(*((last_z->key)), sll_min_key(*((last_z->next)))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(srtl(last_z), &&(&&(srtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, srtl_reach(*((last_z->next)))))), <=(*((last_z->key)), sll_min_key(*((last_z->next))))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(srtl_reach(last_z), @_vcc_oset_union(srtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_keys(y), @_vcc_intset_union(sll_keys(*((y->next))), @_vcc_intset_singleton(*((y->key)))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_list_len_next(y), unchecked+(sll_list_len_next(*((y->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(rsrtl(y), &&(&&(rsrtl(*((y->next))), unchecked!(@_vcc_oset_in(y, rsrtl_reach(*((y->next)))))), >=(*((y->key)), sll_max_key(*((y->next))))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(rsrtl_reach(y), @_vcc_oset_union(rsrtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll(y), &&(sll(*((y->next))), unchecked!(@_vcc_oset_in(y, sll_reach(*((y->next)))))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_reach(y), @_vcc_oset_union(sll_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_max_key(y), @\int_max(*((y->key)), sll_max_key(*((y->next)))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_min_key(y), @\int_min(*((y->key)), sll_min_key(*((y->next)))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(srtl(y), &&(&&(srtl(*((y->next))), unchecked!(@_vcc_oset_in(y, srtl_reach(*((y->next)))))), <=(*((y->key)), sll_min_key(*((y->next))))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(srtl_reach(y), @_vcc_oset_union(srtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_keys(x), @_vcc_intset_union(sll_keys(*((x->next))), @_vcc_intset_singleton(*((x->key)))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_list_len_next(x), unchecked+(sll_list_len_next(*((x->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(rsrtl(x), &&(&&(rsrtl(*((x->next))), unchecked!(@_vcc_oset_in(x, rsrtl_reach(*((x->next)))))), >=(*((x->key)), sll_max_key(*((x->next))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(rsrtl_reach(x), @_vcc_oset_union(rsrtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll(x), &&(sll(*((x->next))), unchecked!(@_vcc_oset_in(x, sll_reach(*((x->next)))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_reach(x), @_vcc_oset_union(sll_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_max_key(x), @\int_max(*((x->key)), sll_max_key(*((x->next)))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_min_key(x), @\int_min(*((x->key)), sll_min_key(*((x->next)))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(srtl(x), &&(&&(srtl(*((x->next))), unchecked!(@_vcc_oset_in(x, srtl_reach(*((x->next)))))), <=(*((x->key)), sll_min_key(*((x->next))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(srtl_reach(x), @_vcc_oset_union(srtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_keys(z), @_vcc_intset_union(sll_keys(*((z->next))), @_vcc_intset_singleton(*((z->key)))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_list_len_next(z), unchecked+(sll_list_len_next(*((z->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(rsrtl(z), &&(&&(rsrtl(*((z->next))), unchecked!(@_vcc_oset_in(z, rsrtl_reach(*((z->next)))))), >=(*((z->key)), sll_max_key(*((z->next))))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(rsrtl_reach(z), @_vcc_oset_union(rsrtl_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(sll(z), &&(sll(*((z->next))), unchecked!(@_vcc_oset_in(z, sll_reach(*((z->next)))))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_reach(z), @_vcc_oset_union(sll_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_max_key(z), @\int_max(*((z->key)), sll_max_key(*((z->next)))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_min_key(z), @\int_min(*((z->key)), sll_min_key(*((z->next)))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(srtl(z), &&(&&(srtl(*((z->next))), unchecked!(@_vcc_oset_in(z, srtl_reach(*((z->next)))))), <=(*((z->key)), sll_min_key(*((z->next))))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(srtl_reach(z), @_vcc_oset_union(srtl_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), &&(@_vcc_mutable(@state, curr_x), @writes_check(curr_x))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> $mutable($s, $phys_ptr_cast(L#curr_x, ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), &&(@_vcc_mutable(@state, curr_y), @writes_check(curr_y))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> $mutable($s, $phys_ptr_cast(L#curr_y, ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(@_vcc_ptr_neq_null(last_z), &&(@_vcc_mutable(@state, last_z), @writes_check(last_z))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> $mutable($s, $phys_ptr_cast(L#last_z, ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(L#last_z, ^s_node));
    loopState#0 := $s;
    assume true;
// INV:LOOPHEAD
    while (true)
 invariant b0000 ==> (F#srtl($s,$phys_ptr_cast(P#x,^s_node)));
invariant b0001 ==> (F#srtl($s,$phys_ptr_cast(P#y,^s_node)));
invariant b0002 ==> (F#srtl($s,$phys_ptr_cast(L#curr_x,^s_node)));
invariant b0003 ==> (F#srtl($s,$phys_ptr_cast(L#curr_y,^s_node)));
invariant b0004 ==> (F#srtl($s,$phys_ptr_cast(L#z,^s_node)));
invariant b0005 ==> (F#srtl($s,$phys_ptr_cast(L#last_z,^s_node)));
invariant b0006 ==> (F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node)));
invariant b0007 ==> (F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node)));
invariant b0008 ==> (F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)));
invariant b0009 ==> (F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node)));
invariant b0010 ==> (F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node)));
invariant b0011 ==> (F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node)));
invariant b0012 ==> (F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)));
invariant b0013 ==> (F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node)));
invariant b0014 ==> (F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node)));
invariant b0015 ==> (F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node)));
invariant b0016 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node)));
invariant b0017 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node)));
invariant b0018 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)));
invariant b0019 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node)));
invariant b0020 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node)));
invariant b0021 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node)));
invariant b0022 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node)));
invariant b0023 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)));
invariant b0024 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node)));
invariant b0025 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node)));
invariant b0026 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node)));
invariant b0027 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node)));
invariant b0028 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)));
invariant b0029 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)));
invariant b0030 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node)));
invariant b0031 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node)));
invariant b0032 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node)));
invariant b0033 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)));
invariant b0034 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)));
invariant b0035 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node)));
invariant b0036 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0037 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0038 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0039 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0040 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0041 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0042 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0043 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0044 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0045 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0046 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0047 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0048 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0049 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0050 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0051 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0052 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0053 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0054 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0055 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0056 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0057 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0058 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0059 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0060 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0061 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0062 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0063 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0064 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0065 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0066 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0067 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0068 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0069 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0070 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0071 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0072 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0073 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0074 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0075 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0076 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0077 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0078 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0079 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0080 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0081 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0082 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0083 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0084 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0085 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0086 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0087 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0088 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0089 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0090 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0091 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0092 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0093 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0094 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0095 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0096 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0097 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0098 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0099 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0100 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0101 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0102 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0103 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0104 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0105 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0106 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0107 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0108 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0109 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0110 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0111 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0112 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0113 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0114 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0115 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0116 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0117 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0118 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0119 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0120 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0121 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0122 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0123 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0124 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0125 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0126 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0127 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0128 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0129 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0130 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0131 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0132 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0133 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0134 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0135 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0136 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0137 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0138 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0139 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0140 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0141 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0142 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0143 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0144 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0145 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0146 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0147 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0148 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0149 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0150 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0151 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0152 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0153 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0154 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0155 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0156 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0157 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0158 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0159 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0160 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0161 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0162 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0163 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0164 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0165 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0166 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0167 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0168 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0169 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0170 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0171 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0172 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0173 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0174 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0175 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0176 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0177 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0178 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0179 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0180 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0181 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0182 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0183 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0184 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0185 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0186 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0187 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0188 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0189 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0190 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0191 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0192 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0193 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0194 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0195 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0196 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0197 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0198 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0199 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0200 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0201 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0202 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0203 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0204 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0205 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0206 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0207 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0208 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0209 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0210 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0211 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0212 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0213 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0214 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0215 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0216 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0217 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0218 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0219 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0220 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0221 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0222 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0223 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0224 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0225 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0226 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0227 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0228 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0229 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0230 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0231 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0232 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0233 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0234 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0235 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0236 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0237 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0238 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0239 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0240 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0241 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0242 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0243 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0244 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0245 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0246 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0247 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0248 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0249 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0250 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0251 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0252 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0253 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0254 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0255 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0256 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0257 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0258 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0259 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0260 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0261 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0262 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0263 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0264 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0265 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0266 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0267 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0268 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0269 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0270 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0271 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0272 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0273 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0274 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0275 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0276 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0277 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0278 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0279 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0280 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0281 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0282 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0283 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0284 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0285 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0286 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0287 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0288 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0289 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0290 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0291 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0292 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0293 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0294 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0295 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0296 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0297 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0298 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0299 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0300 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0301 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0302 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0303 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0304 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0305 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0306 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0307 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0308 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0309 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0310 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0311 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0312 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0313 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0314 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0315 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0316 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0317 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0318 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0319 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0320 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0321 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0322 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0323 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0324 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0325 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0326 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0327 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0328 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0329 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0330 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0331 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0332 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0333 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0334 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0335 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0336 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0337 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0338 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0339 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0340 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0341 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0342 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0343 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0344 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0345 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0346 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last_z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0347 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last_z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0348 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last_z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0349 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last_z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0350 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last_z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0351 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last_z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0352 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last_z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0353 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last_z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0354 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last_z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0355 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last_z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0356 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last_z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0357 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last_z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0358 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last_z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0359 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last_z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0360 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last_z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0361 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last_z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0362 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last_z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0363 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last_z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0364 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last_z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0365 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last_z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0366 ==> ($non_null($phys_ptr_cast(P#x,^s_node)));
invariant b0367 ==> ($non_null($phys_ptr_cast(P#y,^s_node)));
invariant b0368 ==> ($non_null($phys_ptr_cast(L#curr_x,^s_node)));
invariant b0369 ==> ($non_null($phys_ptr_cast(L#curr_y,^s_node)));
invariant b0370 ==> ($non_null($phys_ptr_cast(L#z,^s_node)));
invariant b0371 ==> ($non_null($phys_ptr_cast(L#last_z,^s_node)));
invariant b0372 ==> ($is_null($phys_ptr_cast(P#x,^s_node)));
invariant b0373 ==> ($is_null($phys_ptr_cast(P#y,^s_node)));
invariant b0374 ==> ($is_null($phys_ptr_cast(L#curr_x,^s_node)));
invariant b0375 ==> ($is_null($phys_ptr_cast(L#curr_y,^s_node)));
invariant b0376 ==> ($is_null($phys_ptr_cast(L#z,^s_node)));
invariant b0377 ==> ($is_null($phys_ptr_cast(L#last_z,^s_node)));
invariant b0378 ==> (($phys_ptr_cast(P#x,^s_node) == $phys_ptr_cast(P#y,^s_node)));
invariant b0379 ==> (($phys_ptr_cast(P#x,^s_node) == $phys_ptr_cast(L#curr_x,^s_node)));
invariant b0380 ==> (($phys_ptr_cast(P#x,^s_node) == $phys_ptr_cast(L#curr_y,^s_node)));
invariant b0381 ==> (($phys_ptr_cast(P#x,^s_node) == $phys_ptr_cast(L#z,^s_node)));
invariant b0382 ==> (($phys_ptr_cast(P#x,^s_node) == $phys_ptr_cast(L#last_z,^s_node)));
invariant b0383 ==> (($phys_ptr_cast(P#y,^s_node) == $phys_ptr_cast(P#x,^s_node)));
invariant b0384 ==> (($phys_ptr_cast(P#y,^s_node) == $phys_ptr_cast(L#curr_x,^s_node)));
invariant b0385 ==> (($phys_ptr_cast(P#y,^s_node) == $phys_ptr_cast(L#curr_y,^s_node)));
invariant b0386 ==> (($phys_ptr_cast(P#y,^s_node) == $phys_ptr_cast(L#z,^s_node)));
invariant b0387 ==> (($phys_ptr_cast(P#y,^s_node) == $phys_ptr_cast(L#last_z,^s_node)));
invariant b0388 ==> (($phys_ptr_cast(L#curr_x,^s_node) == $phys_ptr_cast(P#x,^s_node)));
invariant b0389 ==> (($phys_ptr_cast(L#curr_x,^s_node) == $phys_ptr_cast(P#y,^s_node)));
invariant b0390 ==> (($phys_ptr_cast(L#curr_x,^s_node) == $phys_ptr_cast(L#curr_y,^s_node)));
invariant b0391 ==> (($phys_ptr_cast(L#curr_x,^s_node) == $phys_ptr_cast(L#z,^s_node)));
invariant b0392 ==> (($phys_ptr_cast(L#curr_x,^s_node) == $phys_ptr_cast(L#last_z,^s_node)));
invariant b0393 ==> (($phys_ptr_cast(L#curr_y,^s_node) == $phys_ptr_cast(P#x,^s_node)));
invariant b0394 ==> (($phys_ptr_cast(L#curr_y,^s_node) == $phys_ptr_cast(P#y,^s_node)));
invariant b0395 ==> (($phys_ptr_cast(L#curr_y,^s_node) == $phys_ptr_cast(L#curr_x,^s_node)));
invariant b0396 ==> (($phys_ptr_cast(L#curr_y,^s_node) == $phys_ptr_cast(L#z,^s_node)));
invariant b0397 ==> (($phys_ptr_cast(L#curr_y,^s_node) == $phys_ptr_cast(L#last_z,^s_node)));
invariant b0398 ==> (($phys_ptr_cast(L#z,^s_node) == $phys_ptr_cast(P#x,^s_node)));
invariant b0399 ==> (($phys_ptr_cast(L#z,^s_node) == $phys_ptr_cast(P#y,^s_node)));
invariant b0400 ==> (($phys_ptr_cast(L#z,^s_node) == $phys_ptr_cast(L#curr_x,^s_node)));
invariant b0401 ==> (($phys_ptr_cast(L#z,^s_node) == $phys_ptr_cast(L#curr_y,^s_node)));
invariant b0402 ==> (($phys_ptr_cast(L#z,^s_node) == $phys_ptr_cast(L#last_z,^s_node)));
invariant b0403 ==> (($phys_ptr_cast(L#last_z,^s_node) == $phys_ptr_cast(P#x,^s_node)));
invariant b0404 ==> (($phys_ptr_cast(L#last_z,^s_node) == $phys_ptr_cast(P#y,^s_node)));
invariant b0405 ==> (($phys_ptr_cast(L#last_z,^s_node) == $phys_ptr_cast(L#curr_x,^s_node)));
invariant b0406 ==> (($phys_ptr_cast(L#last_z,^s_node) == $phys_ptr_cast(L#curr_y,^s_node)));
invariant b0407 ==> (($phys_ptr_cast(L#last_z,^s_node) == $phys_ptr_cast(L#z,^s_node)));
invariant b0408 ==> (($non_null($phys_ptr_cast(P#x,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#x,^s_node),^s_node))));
invariant b0409 ==> (($non_null($phys_ptr_cast(P#y,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#y,^s_node),^s_node))));
invariant b0410 ==> (($non_null($phys_ptr_cast(L#curr_x,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#curr_x,^s_node),^s_node))));
invariant b0411 ==> (($non_null($phys_ptr_cast(L#curr_y,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#curr_y,^s_node),^s_node))));
invariant b0412 ==> (($non_null($phys_ptr_cast(L#z,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#z,^s_node),^s_node))));
invariant b0413 ==> (($non_null($phys_ptr_cast(L#last_z,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#last_z,^s_node),^s_node))));
invariant b0414 ==> (($non_null($phys_ptr_cast(P#x,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#x,^s_node),^s_node))));
invariant b0415 ==> (($non_null($phys_ptr_cast(P#y,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#y,^s_node),^s_node))));
invariant b0416 ==> (($non_null($phys_ptr_cast(L#curr_x,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#curr_x,^s_node),^s_node))));
invariant b0417 ==> (($non_null($phys_ptr_cast(L#curr_y,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#curr_y,^s_node),^s_node))));
invariant b0418 ==> (($non_null($phys_ptr_cast(L#z,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#z,^s_node),^s_node))));
invariant b0419 ==> (($non_null($phys_ptr_cast(L#last_z,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#last_z,^s_node),^s_node))));
invariant b0420 ==> (($non_null($phys_ptr_cast(P#x,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#x,^s_node),^s_node) == $phys_ptr_cast(P#y,^s_node))));
invariant b0421 ==> (($non_null($phys_ptr_cast(P#x,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#x,^s_node),^s_node) == $phys_ptr_cast(L#curr_x,^s_node))));
invariant b0422 ==> (($non_null($phys_ptr_cast(P#x,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#x,^s_node),^s_node) == $phys_ptr_cast(L#curr_y,^s_node))));
invariant b0423 ==> (($non_null($phys_ptr_cast(P#x,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#x,^s_node),^s_node) == $phys_ptr_cast(L#z,^s_node))));
invariant b0424 ==> (($non_null($phys_ptr_cast(P#x,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#x,^s_node),^s_node) == $phys_ptr_cast(L#last_z,^s_node))));
invariant b0425 ==> (($non_null($phys_ptr_cast(P#y,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#y,^s_node),^s_node) == $phys_ptr_cast(P#x,^s_node))));
invariant b0426 ==> (($non_null($phys_ptr_cast(P#y,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#y,^s_node),^s_node) == $phys_ptr_cast(L#curr_x,^s_node))));
invariant b0427 ==> (($non_null($phys_ptr_cast(P#y,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#y,^s_node),^s_node) == $phys_ptr_cast(L#curr_y,^s_node))));
invariant b0428 ==> (($non_null($phys_ptr_cast(P#y,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#y,^s_node),^s_node) == $phys_ptr_cast(L#z,^s_node))));
invariant b0429 ==> (($non_null($phys_ptr_cast(P#y,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#y,^s_node),^s_node) == $phys_ptr_cast(L#last_z,^s_node))));
invariant b0430 ==> (($non_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#curr_x,^s_node),^s_node) == $phys_ptr_cast(P#x,^s_node))));
invariant b0431 ==> (($non_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#curr_x,^s_node),^s_node) == $phys_ptr_cast(P#y,^s_node))));
invariant b0432 ==> (($non_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#curr_x,^s_node),^s_node) == $phys_ptr_cast(L#curr_y,^s_node))));
invariant b0433 ==> (($non_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#curr_x,^s_node),^s_node) == $phys_ptr_cast(L#z,^s_node))));
invariant b0434 ==> (($non_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#curr_x,^s_node),^s_node) == $phys_ptr_cast(L#last_z,^s_node))));
invariant b0435 ==> (($non_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#curr_y,^s_node),^s_node) == $phys_ptr_cast(P#x,^s_node))));
invariant b0436 ==> (($non_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#curr_y,^s_node),^s_node) == $phys_ptr_cast(P#y,^s_node))));
invariant b0437 ==> (($non_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#curr_y,^s_node),^s_node) == $phys_ptr_cast(L#curr_x,^s_node))));
invariant b0438 ==> (($non_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#curr_y,^s_node),^s_node) == $phys_ptr_cast(L#z,^s_node))));
invariant b0439 ==> (($non_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#curr_y,^s_node),^s_node) == $phys_ptr_cast(L#last_z,^s_node))));
invariant b0440 ==> (($non_null($phys_ptr_cast(L#z,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#z,^s_node),^s_node) == $phys_ptr_cast(P#x,^s_node))));
invariant b0441 ==> (($non_null($phys_ptr_cast(L#z,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#z,^s_node),^s_node) == $phys_ptr_cast(P#y,^s_node))));
invariant b0442 ==> (($non_null($phys_ptr_cast(L#z,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#z,^s_node),^s_node) == $phys_ptr_cast(L#curr_x,^s_node))));
invariant b0443 ==> (($non_null($phys_ptr_cast(L#z,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#z,^s_node),^s_node) == $phys_ptr_cast(L#curr_y,^s_node))));
invariant b0444 ==> (($non_null($phys_ptr_cast(L#z,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#z,^s_node),^s_node) == $phys_ptr_cast(L#last_z,^s_node))));
invariant b0445 ==> (($non_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#last_z,^s_node),^s_node) == $phys_ptr_cast(P#x,^s_node))));
invariant b0446 ==> (($non_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#last_z,^s_node),^s_node) == $phys_ptr_cast(P#y,^s_node))));
invariant b0447 ==> (($non_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#last_z,^s_node),^s_node) == $phys_ptr_cast(L#curr_x,^s_node))));
invariant b0448 ==> (($non_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#last_z,^s_node),^s_node) == $phys_ptr_cast(L#curr_y,^s_node))));
invariant b0449 ==> (($non_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#last_z,^s_node),^s_node) == $phys_ptr_cast(L#z,^s_node))));
invariant b0450 ==> ((!($oset_in($phys_ptr_cast(P#x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))))));
invariant b0451 ==> ((!($oset_in($phys_ptr_cast(P#x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node))))));
invariant b0452 ==> ((!($oset_in($phys_ptr_cast(P#x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node))))));
invariant b0453 ==> ((!($oset_in($phys_ptr_cast(P#x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node))))));
invariant b0454 ==> ((!($oset_in($phys_ptr_cast(P#x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node))))));
invariant b0455 ==> ((!($oset_in($phys_ptr_cast(P#x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))))));
invariant b0456 ==> ((!($oset_in($phys_ptr_cast(P#x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node))))));
invariant b0457 ==> ((!($oset_in($phys_ptr_cast(P#x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node))))));
invariant b0458 ==> ((!($oset_in($phys_ptr_cast(P#x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node))))));
invariant b0459 ==> ((!($oset_in($phys_ptr_cast(P#x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))))));
invariant b0460 ==> ((!($oset_in($phys_ptr_cast(P#x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node))))));
invariant b0461 ==> ((!($oset_in($phys_ptr_cast(P#x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node))))));
invariant b0462 ==> ((!($oset_in($phys_ptr_cast(P#x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node))))));
invariant b0463 ==> ((!($oset_in($phys_ptr_cast(P#x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))))));
invariant b0464 ==> ((!($oset_in($phys_ptr_cast(P#x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))))));
invariant b0465 ==> ((!($oset_in($phys_ptr_cast(P#x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node))))));
invariant b0466 ==> ((!($oset_in($phys_ptr_cast(P#x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node))))));
invariant b0467 ==> ((!($oset_in($phys_ptr_cast(P#x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))))));
invariant b0468 ==> ((!($oset_in($phys_ptr_cast(P#x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))))));
invariant b0469 ==> ((!($oset_in($phys_ptr_cast(P#x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node))))));
invariant b0470 ==> ((!($oset_in($phys_ptr_cast(P#y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node))))));
invariant b0471 ==> ((!($oset_in($phys_ptr_cast(P#y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))))));
invariant b0472 ==> ((!($oset_in($phys_ptr_cast(P#y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node))))));
invariant b0473 ==> ((!($oset_in($phys_ptr_cast(P#y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node))))));
invariant b0474 ==> ((!($oset_in($phys_ptr_cast(P#y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node))))));
invariant b0475 ==> ((!($oset_in($phys_ptr_cast(P#y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))))));
invariant b0476 ==> ((!($oset_in($phys_ptr_cast(P#y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node))))));
invariant b0477 ==> ((!($oset_in($phys_ptr_cast(P#y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node))))));
invariant b0478 ==> ((!($oset_in($phys_ptr_cast(P#y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node))))));
invariant b0479 ==> ((!($oset_in($phys_ptr_cast(P#y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))))));
invariant b0480 ==> ((!($oset_in($phys_ptr_cast(P#y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node))))));
invariant b0481 ==> ((!($oset_in($phys_ptr_cast(P#y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node))))));
invariant b0482 ==> ((!($oset_in($phys_ptr_cast(P#y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node))))));
invariant b0483 ==> ((!($oset_in($phys_ptr_cast(P#y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))))));
invariant b0484 ==> ((!($oset_in($phys_ptr_cast(P#y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))))));
invariant b0485 ==> ((!($oset_in($phys_ptr_cast(P#y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node))))));
invariant b0486 ==> ((!($oset_in($phys_ptr_cast(P#y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node))))));
invariant b0487 ==> ((!($oset_in($phys_ptr_cast(P#y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))))));
invariant b0488 ==> ((!($oset_in($phys_ptr_cast(P#y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))))));
invariant b0489 ==> ((!($oset_in($phys_ptr_cast(P#y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node))))));
invariant b0490 ==> ((!($oset_in($phys_ptr_cast(L#curr_x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node))))));
invariant b0491 ==> ((!($oset_in($phys_ptr_cast(L#curr_x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))))));
invariant b0492 ==> ((!($oset_in($phys_ptr_cast(L#curr_x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node))))));
invariant b0493 ==> ((!($oset_in($phys_ptr_cast(L#curr_x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node))))));
invariant b0494 ==> ((!($oset_in($phys_ptr_cast(L#curr_x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node))))));
invariant b0495 ==> ((!($oset_in($phys_ptr_cast(L#curr_x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node))))));
invariant b0496 ==> ((!($oset_in($phys_ptr_cast(L#curr_x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node))))));
invariant b0497 ==> ((!($oset_in($phys_ptr_cast(L#curr_x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node))))));
invariant b0498 ==> ((!($oset_in($phys_ptr_cast(L#curr_x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node))))));
invariant b0499 ==> ((!($oset_in($phys_ptr_cast(L#curr_x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node))))));
invariant b0500 ==> ((!($oset_in($phys_ptr_cast(L#curr_x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node))))));
invariant b0501 ==> ((!($oset_in($phys_ptr_cast(L#curr_x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node))))));
invariant b0502 ==> ((!($oset_in($phys_ptr_cast(L#curr_x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node))))));
invariant b0503 ==> ((!($oset_in($phys_ptr_cast(L#curr_x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node))))));
invariant b0504 ==> ((!($oset_in($phys_ptr_cast(L#curr_x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))))));
invariant b0505 ==> ((!($oset_in($phys_ptr_cast(L#curr_x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node))))));
invariant b0506 ==> ((!($oset_in($phys_ptr_cast(L#curr_x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node))))));
invariant b0507 ==> ((!($oset_in($phys_ptr_cast(L#curr_x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node))))));
invariant b0508 ==> ((!($oset_in($phys_ptr_cast(L#curr_x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))))));
invariant b0509 ==> ((!($oset_in($phys_ptr_cast(L#curr_x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node))))));
invariant b0510 ==> ((!($oset_in($phys_ptr_cast(L#curr_y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node))))));
invariant b0511 ==> ((!($oset_in($phys_ptr_cast(L#curr_y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node))))));
invariant b0512 ==> ((!($oset_in($phys_ptr_cast(L#curr_y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node))))));
invariant b0513 ==> ((!($oset_in($phys_ptr_cast(L#curr_y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node))))));
invariant b0514 ==> ((!($oset_in($phys_ptr_cast(L#curr_y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node))))));
invariant b0515 ==> ((!($oset_in($phys_ptr_cast(L#curr_y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))))));
invariant b0516 ==> ((!($oset_in($phys_ptr_cast(L#curr_y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node))))));
invariant b0517 ==> ((!($oset_in($phys_ptr_cast(L#curr_y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node))))));
invariant b0518 ==> ((!($oset_in($phys_ptr_cast(L#curr_y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node))))));
invariant b0519 ==> ((!($oset_in($phys_ptr_cast(L#curr_y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node))))));
invariant b0520 ==> ((!($oset_in($phys_ptr_cast(L#curr_y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node))))));
invariant b0521 ==> ((!($oset_in($phys_ptr_cast(L#curr_y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node))))));
invariant b0522 ==> ((!($oset_in($phys_ptr_cast(L#curr_y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node))))));
invariant b0523 ==> ((!($oset_in($phys_ptr_cast(L#curr_y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node))))));
invariant b0524 ==> ((!($oset_in($phys_ptr_cast(L#curr_y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))))));
invariant b0525 ==> ((!($oset_in($phys_ptr_cast(L#curr_y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node))))));
invariant b0526 ==> ((!($oset_in($phys_ptr_cast(L#curr_y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node))))));
invariant b0527 ==> ((!($oset_in($phys_ptr_cast(L#curr_y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node))))));
invariant b0528 ==> ((!($oset_in($phys_ptr_cast(L#curr_y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))))));
invariant b0529 ==> ((!($oset_in($phys_ptr_cast(L#curr_y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node))))));
invariant b0530 ==> ((!($oset_in($phys_ptr_cast(L#z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node))))));
invariant b0531 ==> ((!($oset_in($phys_ptr_cast(L#z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node))))));
invariant b0532 ==> ((!($oset_in($phys_ptr_cast(L#z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))))));
invariant b0533 ==> ((!($oset_in($phys_ptr_cast(L#z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node))))));
invariant b0534 ==> ((!($oset_in($phys_ptr_cast(L#z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node))))));
invariant b0535 ==> ((!($oset_in($phys_ptr_cast(L#z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))))));
invariant b0536 ==> ((!($oset_in($phys_ptr_cast(L#z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node))))));
invariant b0537 ==> ((!($oset_in($phys_ptr_cast(L#z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node))))));
invariant b0538 ==> ((!($oset_in($phys_ptr_cast(L#z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node))))));
invariant b0539 ==> ((!($oset_in($phys_ptr_cast(L#z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node))))));
invariant b0540 ==> ((!($oset_in($phys_ptr_cast(L#z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))))));
invariant b0541 ==> ((!($oset_in($phys_ptr_cast(L#z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node))))));
invariant b0542 ==> ((!($oset_in($phys_ptr_cast(L#z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node))))));
invariant b0543 ==> ((!($oset_in($phys_ptr_cast(L#z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node))))));
invariant b0544 ==> ((!($oset_in($phys_ptr_cast(L#z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))))));
invariant b0545 ==> ((!($oset_in($phys_ptr_cast(L#z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node))))));
invariant b0546 ==> ((!($oset_in($phys_ptr_cast(L#z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node))))));
invariant b0547 ==> ((!($oset_in($phys_ptr_cast(L#z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node))))));
invariant b0548 ==> ((!($oset_in($phys_ptr_cast(L#z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))))));
invariant b0549 ==> ((!($oset_in($phys_ptr_cast(L#z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))))));
invariant b0550 ==> ((!($oset_in($phys_ptr_cast(L#last_z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node))))));
invariant b0551 ==> ((!($oset_in($phys_ptr_cast(L#last_z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node))))));
invariant b0552 ==> ((!($oset_in($phys_ptr_cast(L#last_z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))))));
invariant b0553 ==> ((!($oset_in($phys_ptr_cast(L#last_z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node))))));
invariant b0554 ==> ((!($oset_in($phys_ptr_cast(L#last_z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node))))));
invariant b0555 ==> ((!($oset_in($phys_ptr_cast(L#last_z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))))));
invariant b0556 ==> ((!($oset_in($phys_ptr_cast(L#last_z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node))))));
invariant b0557 ==> ((!($oset_in($phys_ptr_cast(L#last_z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node))))));
invariant b0558 ==> ((!($oset_in($phys_ptr_cast(L#last_z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node))))));
invariant b0559 ==> ((!($oset_in($phys_ptr_cast(L#last_z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node))))));
invariant b0560 ==> ((!($oset_in($phys_ptr_cast(L#last_z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))))));
invariant b0561 ==> ((!($oset_in($phys_ptr_cast(L#last_z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node))))));
invariant b0562 ==> ((!($oset_in($phys_ptr_cast(L#last_z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node))))));
invariant b0563 ==> ((!($oset_in($phys_ptr_cast(L#last_z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node))))));
invariant b0564 ==> ((!($oset_in($phys_ptr_cast(L#last_z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))))));
invariant b0565 ==> ((!($oset_in($phys_ptr_cast(L#last_z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node))))));
invariant b0566 ==> ((!($oset_in($phys_ptr_cast(L#last_z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node))))));
invariant b0567 ==> ((!($oset_in($phys_ptr_cast(L#last_z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node))))));
invariant b0568 ==> ((!($oset_in($phys_ptr_cast(L#last_z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))))));
invariant b0569 ==> ((!($oset_in($phys_ptr_cast(L#last_z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))))));
invariant b0570 ==> (($is_null($phys_ptr_cast(P#x,^s_node)) ==> ($phys_ptr_cast(P#y,^s_node) == $phys_ptr_cast(L#curr_x,^s_node))));
invariant b0571 ==> (($is_null($phys_ptr_cast(P#x,^s_node)) ==> ($phys_ptr_cast(P#y,^s_node) == $phys_ptr_cast(L#curr_y,^s_node))));
invariant b0572 ==> (($is_null($phys_ptr_cast(P#x,^s_node)) ==> ($phys_ptr_cast(P#y,^s_node) == $phys_ptr_cast(L#z,^s_node))));
invariant b0573 ==> (($is_null($phys_ptr_cast(P#x,^s_node)) ==> ($phys_ptr_cast(P#y,^s_node) == $phys_ptr_cast(L#last_z,^s_node))));
invariant b0574 ==> (($is_null($phys_ptr_cast(P#x,^s_node)) ==> ($phys_ptr_cast(L#curr_x,^s_node) == $phys_ptr_cast(P#y,^s_node))));
invariant b0575 ==> (($is_null($phys_ptr_cast(P#x,^s_node)) ==> ($phys_ptr_cast(L#curr_x,^s_node) == $phys_ptr_cast(L#curr_y,^s_node))));
invariant b0576 ==> (($is_null($phys_ptr_cast(P#x,^s_node)) ==> ($phys_ptr_cast(L#curr_x,^s_node) == $phys_ptr_cast(L#z,^s_node))));
invariant b0577 ==> (($is_null($phys_ptr_cast(P#x,^s_node)) ==> ($phys_ptr_cast(L#curr_x,^s_node) == $phys_ptr_cast(L#last_z,^s_node))));
invariant b0578 ==> (($is_null($phys_ptr_cast(P#x,^s_node)) ==> ($phys_ptr_cast(L#curr_y,^s_node) == $phys_ptr_cast(P#y,^s_node))));
invariant b0579 ==> (($is_null($phys_ptr_cast(P#x,^s_node)) ==> ($phys_ptr_cast(L#curr_y,^s_node) == $phys_ptr_cast(L#curr_x,^s_node))));
invariant b0580 ==> (($is_null($phys_ptr_cast(P#x,^s_node)) ==> ($phys_ptr_cast(L#curr_y,^s_node) == $phys_ptr_cast(L#z,^s_node))));
invariant b0581 ==> (($is_null($phys_ptr_cast(P#x,^s_node)) ==> ($phys_ptr_cast(L#curr_y,^s_node) == $phys_ptr_cast(L#last_z,^s_node))));
invariant b0582 ==> (($is_null($phys_ptr_cast(P#x,^s_node)) ==> ($phys_ptr_cast(L#z,^s_node) == $phys_ptr_cast(P#y,^s_node))));
invariant b0583 ==> (($is_null($phys_ptr_cast(P#x,^s_node)) ==> ($phys_ptr_cast(L#z,^s_node) == $phys_ptr_cast(L#curr_x,^s_node))));
invariant b0584 ==> (($is_null($phys_ptr_cast(P#x,^s_node)) ==> ($phys_ptr_cast(L#z,^s_node) == $phys_ptr_cast(L#curr_y,^s_node))));
invariant b0585 ==> (($is_null($phys_ptr_cast(P#x,^s_node)) ==> ($phys_ptr_cast(L#z,^s_node) == $phys_ptr_cast(L#last_z,^s_node))));
invariant b0586 ==> (($is_null($phys_ptr_cast(P#x,^s_node)) ==> ($phys_ptr_cast(L#last_z,^s_node) == $phys_ptr_cast(P#y,^s_node))));
invariant b0587 ==> (($is_null($phys_ptr_cast(P#x,^s_node)) ==> ($phys_ptr_cast(L#last_z,^s_node) == $phys_ptr_cast(L#curr_x,^s_node))));
invariant b0588 ==> (($is_null($phys_ptr_cast(P#x,^s_node)) ==> ($phys_ptr_cast(L#last_z,^s_node) == $phys_ptr_cast(L#curr_y,^s_node))));
invariant b0589 ==> (($is_null($phys_ptr_cast(P#x,^s_node)) ==> ($phys_ptr_cast(L#last_z,^s_node) == $phys_ptr_cast(L#z,^s_node))));
invariant b0590 ==> (($is_null($phys_ptr_cast(P#y,^s_node)) ==> ($phys_ptr_cast(P#x,^s_node) == $phys_ptr_cast(L#curr_x,^s_node))));
invariant b0591 ==> (($is_null($phys_ptr_cast(P#y,^s_node)) ==> ($phys_ptr_cast(P#x,^s_node) == $phys_ptr_cast(L#curr_y,^s_node))));
invariant b0592 ==> (($is_null($phys_ptr_cast(P#y,^s_node)) ==> ($phys_ptr_cast(P#x,^s_node) == $phys_ptr_cast(L#z,^s_node))));
invariant b0593 ==> (($is_null($phys_ptr_cast(P#y,^s_node)) ==> ($phys_ptr_cast(P#x,^s_node) == $phys_ptr_cast(L#last_z,^s_node))));
invariant b0594 ==> (($is_null($phys_ptr_cast(P#y,^s_node)) ==> ($phys_ptr_cast(L#curr_x,^s_node) == $phys_ptr_cast(P#x,^s_node))));
invariant b0595 ==> (($is_null($phys_ptr_cast(P#y,^s_node)) ==> ($phys_ptr_cast(L#curr_x,^s_node) == $phys_ptr_cast(L#curr_y,^s_node))));
invariant b0596 ==> (($is_null($phys_ptr_cast(P#y,^s_node)) ==> ($phys_ptr_cast(L#curr_x,^s_node) == $phys_ptr_cast(L#z,^s_node))));
invariant b0597 ==> (($is_null($phys_ptr_cast(P#y,^s_node)) ==> ($phys_ptr_cast(L#curr_x,^s_node) == $phys_ptr_cast(L#last_z,^s_node))));
invariant b0598 ==> (($is_null($phys_ptr_cast(P#y,^s_node)) ==> ($phys_ptr_cast(L#curr_y,^s_node) == $phys_ptr_cast(P#x,^s_node))));
invariant b0599 ==> (($is_null($phys_ptr_cast(P#y,^s_node)) ==> ($phys_ptr_cast(L#curr_y,^s_node) == $phys_ptr_cast(L#curr_x,^s_node))));
invariant b0600 ==> (($is_null($phys_ptr_cast(P#y,^s_node)) ==> ($phys_ptr_cast(L#curr_y,^s_node) == $phys_ptr_cast(L#z,^s_node))));
invariant b0601 ==> (($is_null($phys_ptr_cast(P#y,^s_node)) ==> ($phys_ptr_cast(L#curr_y,^s_node) == $phys_ptr_cast(L#last_z,^s_node))));
invariant b0602 ==> (($is_null($phys_ptr_cast(P#y,^s_node)) ==> ($phys_ptr_cast(L#z,^s_node) == $phys_ptr_cast(P#x,^s_node))));
invariant b0603 ==> (($is_null($phys_ptr_cast(P#y,^s_node)) ==> ($phys_ptr_cast(L#z,^s_node) == $phys_ptr_cast(L#curr_x,^s_node))));
invariant b0604 ==> (($is_null($phys_ptr_cast(P#y,^s_node)) ==> ($phys_ptr_cast(L#z,^s_node) == $phys_ptr_cast(L#curr_y,^s_node))));
invariant b0605 ==> (($is_null($phys_ptr_cast(P#y,^s_node)) ==> ($phys_ptr_cast(L#z,^s_node) == $phys_ptr_cast(L#last_z,^s_node))));
invariant b0606 ==> (($is_null($phys_ptr_cast(P#y,^s_node)) ==> ($phys_ptr_cast(L#last_z,^s_node) == $phys_ptr_cast(P#x,^s_node))));
invariant b0607 ==> (($is_null($phys_ptr_cast(P#y,^s_node)) ==> ($phys_ptr_cast(L#last_z,^s_node) == $phys_ptr_cast(L#curr_x,^s_node))));
invariant b0608 ==> (($is_null($phys_ptr_cast(P#y,^s_node)) ==> ($phys_ptr_cast(L#last_z,^s_node) == $phys_ptr_cast(L#curr_y,^s_node))));
invariant b0609 ==> (($is_null($phys_ptr_cast(P#y,^s_node)) ==> ($phys_ptr_cast(L#last_z,^s_node) == $phys_ptr_cast(L#z,^s_node))));
invariant b0610 ==> (($is_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($phys_ptr_cast(P#x,^s_node) == $phys_ptr_cast(P#y,^s_node))));
invariant b0611 ==> (($is_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($phys_ptr_cast(P#x,^s_node) == $phys_ptr_cast(L#curr_y,^s_node))));
invariant b0612 ==> (($is_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($phys_ptr_cast(P#x,^s_node) == $phys_ptr_cast(L#z,^s_node))));
invariant b0613 ==> (($is_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($phys_ptr_cast(P#x,^s_node) == $phys_ptr_cast(L#last_z,^s_node))));
invariant b0614 ==> (($is_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($phys_ptr_cast(P#y,^s_node) == $phys_ptr_cast(P#x,^s_node))));
invariant b0615 ==> (($is_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($phys_ptr_cast(P#y,^s_node) == $phys_ptr_cast(L#curr_y,^s_node))));
invariant b0616 ==> (($is_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($phys_ptr_cast(P#y,^s_node) == $phys_ptr_cast(L#z,^s_node))));
invariant b0617 ==> (($is_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($phys_ptr_cast(P#y,^s_node) == $phys_ptr_cast(L#last_z,^s_node))));
invariant b0618 ==> (($is_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($phys_ptr_cast(L#curr_y,^s_node) == $phys_ptr_cast(P#x,^s_node))));
invariant b0619 ==> (($is_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($phys_ptr_cast(L#curr_y,^s_node) == $phys_ptr_cast(P#y,^s_node))));
invariant b0620 ==> (($is_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($phys_ptr_cast(L#curr_y,^s_node) == $phys_ptr_cast(L#z,^s_node))));
invariant b0621 ==> (($is_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($phys_ptr_cast(L#curr_y,^s_node) == $phys_ptr_cast(L#last_z,^s_node))));
invariant b0622 ==> (($is_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($phys_ptr_cast(L#z,^s_node) == $phys_ptr_cast(P#x,^s_node))));
invariant b0623 ==> (($is_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($phys_ptr_cast(L#z,^s_node) == $phys_ptr_cast(P#y,^s_node))));
invariant b0624 ==> (($is_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($phys_ptr_cast(L#z,^s_node) == $phys_ptr_cast(L#curr_y,^s_node))));
invariant b0625 ==> (($is_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($phys_ptr_cast(L#z,^s_node) == $phys_ptr_cast(L#last_z,^s_node))));
invariant b0626 ==> (($is_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($phys_ptr_cast(L#last_z,^s_node) == $phys_ptr_cast(P#x,^s_node))));
invariant b0627 ==> (($is_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($phys_ptr_cast(L#last_z,^s_node) == $phys_ptr_cast(P#y,^s_node))));
invariant b0628 ==> (($is_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($phys_ptr_cast(L#last_z,^s_node) == $phys_ptr_cast(L#curr_y,^s_node))));
invariant b0629 ==> (($is_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($phys_ptr_cast(L#last_z,^s_node) == $phys_ptr_cast(L#z,^s_node))));
invariant b0630 ==> (($is_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($phys_ptr_cast(P#x,^s_node) == $phys_ptr_cast(P#y,^s_node))));
invariant b0631 ==> (($is_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($phys_ptr_cast(P#x,^s_node) == $phys_ptr_cast(L#curr_x,^s_node))));
invariant b0632 ==> (($is_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($phys_ptr_cast(P#x,^s_node) == $phys_ptr_cast(L#z,^s_node))));
invariant b0633 ==> (($is_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($phys_ptr_cast(P#x,^s_node) == $phys_ptr_cast(L#last_z,^s_node))));
invariant b0634 ==> (($is_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($phys_ptr_cast(P#y,^s_node) == $phys_ptr_cast(P#x,^s_node))));
invariant b0635 ==> (($is_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($phys_ptr_cast(P#y,^s_node) == $phys_ptr_cast(L#curr_x,^s_node))));
invariant b0636 ==> (($is_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($phys_ptr_cast(P#y,^s_node) == $phys_ptr_cast(L#z,^s_node))));
invariant b0637 ==> (($is_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($phys_ptr_cast(P#y,^s_node) == $phys_ptr_cast(L#last_z,^s_node))));
invariant b0638 ==> (($is_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($phys_ptr_cast(L#curr_x,^s_node) == $phys_ptr_cast(P#x,^s_node))));
invariant b0639 ==> (($is_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($phys_ptr_cast(L#curr_x,^s_node) == $phys_ptr_cast(P#y,^s_node))));
invariant b0640 ==> (($is_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($phys_ptr_cast(L#curr_x,^s_node) == $phys_ptr_cast(L#z,^s_node))));
invariant b0641 ==> (($is_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($phys_ptr_cast(L#curr_x,^s_node) == $phys_ptr_cast(L#last_z,^s_node))));
invariant b0642 ==> (($is_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($phys_ptr_cast(L#z,^s_node) == $phys_ptr_cast(P#x,^s_node))));
invariant b0643 ==> (($is_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($phys_ptr_cast(L#z,^s_node) == $phys_ptr_cast(P#y,^s_node))));
invariant b0644 ==> (($is_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($phys_ptr_cast(L#z,^s_node) == $phys_ptr_cast(L#curr_x,^s_node))));
invariant b0645 ==> (($is_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($phys_ptr_cast(L#z,^s_node) == $phys_ptr_cast(L#last_z,^s_node))));
invariant b0646 ==> (($is_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($phys_ptr_cast(L#last_z,^s_node) == $phys_ptr_cast(P#x,^s_node))));
invariant b0647 ==> (($is_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($phys_ptr_cast(L#last_z,^s_node) == $phys_ptr_cast(P#y,^s_node))));
invariant b0648 ==> (($is_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($phys_ptr_cast(L#last_z,^s_node) == $phys_ptr_cast(L#curr_x,^s_node))));
invariant b0649 ==> (($is_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($phys_ptr_cast(L#last_z,^s_node) == $phys_ptr_cast(L#z,^s_node))));
invariant b0650 ==> (($is_null($phys_ptr_cast(L#z,^s_node)) ==> ($phys_ptr_cast(P#x,^s_node) == $phys_ptr_cast(P#y,^s_node))));
invariant b0651 ==> (($is_null($phys_ptr_cast(L#z,^s_node)) ==> ($phys_ptr_cast(P#x,^s_node) == $phys_ptr_cast(L#curr_x,^s_node))));
invariant b0652 ==> (($is_null($phys_ptr_cast(L#z,^s_node)) ==> ($phys_ptr_cast(P#x,^s_node) == $phys_ptr_cast(L#curr_y,^s_node))));
invariant b0653 ==> (($is_null($phys_ptr_cast(L#z,^s_node)) ==> ($phys_ptr_cast(P#x,^s_node) == $phys_ptr_cast(L#last_z,^s_node))));
invariant b0654 ==> (($is_null($phys_ptr_cast(L#z,^s_node)) ==> ($phys_ptr_cast(P#y,^s_node) == $phys_ptr_cast(P#x,^s_node))));
invariant b0655 ==> (($is_null($phys_ptr_cast(L#z,^s_node)) ==> ($phys_ptr_cast(P#y,^s_node) == $phys_ptr_cast(L#curr_x,^s_node))));
invariant b0656 ==> (($is_null($phys_ptr_cast(L#z,^s_node)) ==> ($phys_ptr_cast(P#y,^s_node) == $phys_ptr_cast(L#curr_y,^s_node))));
invariant b0657 ==> (($is_null($phys_ptr_cast(L#z,^s_node)) ==> ($phys_ptr_cast(P#y,^s_node) == $phys_ptr_cast(L#last_z,^s_node))));
invariant b0658 ==> (($is_null($phys_ptr_cast(L#z,^s_node)) ==> ($phys_ptr_cast(L#curr_x,^s_node) == $phys_ptr_cast(P#x,^s_node))));
invariant b0659 ==> (($is_null($phys_ptr_cast(L#z,^s_node)) ==> ($phys_ptr_cast(L#curr_x,^s_node) == $phys_ptr_cast(P#y,^s_node))));
invariant b0660 ==> (($is_null($phys_ptr_cast(L#z,^s_node)) ==> ($phys_ptr_cast(L#curr_x,^s_node) == $phys_ptr_cast(L#curr_y,^s_node))));
invariant b0661 ==> (($is_null($phys_ptr_cast(L#z,^s_node)) ==> ($phys_ptr_cast(L#curr_x,^s_node) == $phys_ptr_cast(L#last_z,^s_node))));
invariant b0662 ==> (($is_null($phys_ptr_cast(L#z,^s_node)) ==> ($phys_ptr_cast(L#curr_y,^s_node) == $phys_ptr_cast(P#x,^s_node))));
invariant b0663 ==> (($is_null($phys_ptr_cast(L#z,^s_node)) ==> ($phys_ptr_cast(L#curr_y,^s_node) == $phys_ptr_cast(P#y,^s_node))));
invariant b0664 ==> (($is_null($phys_ptr_cast(L#z,^s_node)) ==> ($phys_ptr_cast(L#curr_y,^s_node) == $phys_ptr_cast(L#curr_x,^s_node))));
invariant b0665 ==> (($is_null($phys_ptr_cast(L#z,^s_node)) ==> ($phys_ptr_cast(L#curr_y,^s_node) == $phys_ptr_cast(L#last_z,^s_node))));
invariant b0666 ==> (($is_null($phys_ptr_cast(L#z,^s_node)) ==> ($phys_ptr_cast(L#last_z,^s_node) == $phys_ptr_cast(P#x,^s_node))));
invariant b0667 ==> (($is_null($phys_ptr_cast(L#z,^s_node)) ==> ($phys_ptr_cast(L#last_z,^s_node) == $phys_ptr_cast(P#y,^s_node))));
invariant b0668 ==> (($is_null($phys_ptr_cast(L#z,^s_node)) ==> ($phys_ptr_cast(L#last_z,^s_node) == $phys_ptr_cast(L#curr_x,^s_node))));
invariant b0669 ==> (($is_null($phys_ptr_cast(L#z,^s_node)) ==> ($phys_ptr_cast(L#last_z,^s_node) == $phys_ptr_cast(L#curr_y,^s_node))));
invariant b0670 ==> (($is_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($phys_ptr_cast(P#x,^s_node) == $phys_ptr_cast(P#y,^s_node))));
invariant b0671 ==> (($is_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($phys_ptr_cast(P#x,^s_node) == $phys_ptr_cast(L#curr_x,^s_node))));
invariant b0672 ==> (($is_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($phys_ptr_cast(P#x,^s_node) == $phys_ptr_cast(L#curr_y,^s_node))));
invariant b0673 ==> (($is_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($phys_ptr_cast(P#x,^s_node) == $phys_ptr_cast(L#z,^s_node))));
invariant b0674 ==> (($is_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($phys_ptr_cast(P#y,^s_node) == $phys_ptr_cast(P#x,^s_node))));
invariant b0675 ==> (($is_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($phys_ptr_cast(P#y,^s_node) == $phys_ptr_cast(L#curr_x,^s_node))));
invariant b0676 ==> (($is_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($phys_ptr_cast(P#y,^s_node) == $phys_ptr_cast(L#curr_y,^s_node))));
invariant b0677 ==> (($is_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($phys_ptr_cast(P#y,^s_node) == $phys_ptr_cast(L#z,^s_node))));
invariant b0678 ==> (($is_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($phys_ptr_cast(L#curr_x,^s_node) == $phys_ptr_cast(P#x,^s_node))));
invariant b0679 ==> (($is_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($phys_ptr_cast(L#curr_x,^s_node) == $phys_ptr_cast(P#y,^s_node))));
invariant b0680 ==> (($is_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($phys_ptr_cast(L#curr_x,^s_node) == $phys_ptr_cast(L#curr_y,^s_node))));
invariant b0681 ==> (($is_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($phys_ptr_cast(L#curr_x,^s_node) == $phys_ptr_cast(L#z,^s_node))));
invariant b0682 ==> (($is_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($phys_ptr_cast(L#curr_y,^s_node) == $phys_ptr_cast(P#x,^s_node))));
invariant b0683 ==> (($is_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($phys_ptr_cast(L#curr_y,^s_node) == $phys_ptr_cast(P#y,^s_node))));
invariant b0684 ==> (($is_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($phys_ptr_cast(L#curr_y,^s_node) == $phys_ptr_cast(L#curr_x,^s_node))));
invariant b0685 ==> (($is_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($phys_ptr_cast(L#curr_y,^s_node) == $phys_ptr_cast(L#z,^s_node))));
invariant b0686 ==> (($is_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($phys_ptr_cast(L#z,^s_node) == $phys_ptr_cast(P#x,^s_node))));
invariant b0687 ==> (($is_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($phys_ptr_cast(L#z,^s_node) == $phys_ptr_cast(P#y,^s_node))));
invariant b0688 ==> (($is_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($phys_ptr_cast(L#z,^s_node) == $phys_ptr_cast(L#curr_x,^s_node))));
invariant b0689 ==> (($is_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($phys_ptr_cast(L#z,^s_node) == $phys_ptr_cast(L#curr_y,^s_node))));
invariant b0690 ==> ((!($intset_in(L#z_key,F#sll_keys($s,$phys_ptr_cast(P#x,^s_node))))));
invariant b0691 ==> ((!($intset_in(L#z_key,F#sll_keys($s,$phys_ptr_cast(P#y,^s_node))))));
invariant b0692 ==> ((!($intset_in(L#z_key,F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node))))));
invariant b0693 ==> ((!($intset_in(L#z_key,F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node))))));
invariant b0694 ==> ((!($intset_in(L#z_key,F#sll_keys($s,$phys_ptr_cast(L#z,^s_node))))));
invariant b0695 ==> ((!($intset_in(L#z_key,F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node))))));
invariant b0696 ==> ((!($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node))))));
invariant b0697 ==> ((!($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node))))));
invariant b0698 ==> ((!($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))))));
invariant b0699 ==> ((!($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node))))));
invariant b0700 ==> ((!($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node))))));
invariant b0701 ==> ((!($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node))))));
invariant b0702 ==> ((!($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))))));
invariant b0703 ==> ((!($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node))))));
invariant b0704 ==> ((!($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node))))));
invariant b0705 ==> ((!($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node))))));
invariant b0706 ==> ((!($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node))))));
invariant b0707 ==> ((!($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node))))));
invariant b0708 ==> ((!($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))))));
invariant b0709 ==> ((!($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node))))));
invariant b0710 ==> ((!($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node))))));
invariant b0711 ==> ((!($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node))))));
invariant b0712 ==> ((!($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node))))));
invariant b0713 ==> ((!($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))))));
invariant b0714 ==> ((!($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node))))));
invariant b0715 ==> ((!($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node))))));
invariant b0716 ==> ((!($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node))))));
invariant b0717 ==> ((!($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node))))));
invariant b0718 ==> ((!($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))))));
invariant b0719 ==> ((!($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))))));
invariant b0720 ==> ((!($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node))))));
invariant b0721 ==> ((!($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node))))));
invariant b0722 ==> ((!($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node))))));
invariant b0723 ==> ((!($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))))));
invariant b0724 ==> ((!($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))))));
invariant b0725 ==> ((!($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node))))));
invariant b0726 ==> ($intset_in(L#z_key,F#sll_keys($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0727 ==> ($intset_in(L#z_key,F#sll_keys($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0728 ==> ($intset_in(L#z_key,F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0729 ==> ($intset_in(L#z_key,F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0730 ==> ($intset_in(L#z_key,F#sll_keys($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0731 ==> ($intset_in(L#z_key,F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0732 ==> ($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0733 ==> ($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0734 ==> ($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0735 ==> ($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0736 ==> ($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0737 ==> ($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0738 ==> ($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0739 ==> ($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0740 ==> ($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0741 ==> ($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0742 ==> ($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0743 ==> ($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0744 ==> ($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0745 ==> ($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0746 ==> ($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0747 ==> ($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0748 ==> ($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0749 ==> ($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0750 ==> ($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0751 ==> ($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0752 ==> ($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0753 ==> ($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0754 ==> ($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0755 ==> ($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0756 ==> ($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0757 ==> ($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0758 ==> ($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0759 ==> ($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0760 ==> ($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0761 ==> ($intset_in(L#z_key,F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0762 ==> (((!($intset_in(L#z_key,F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node))))) ==> (F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)))));
invariant b0763 ==> (((!($intset_in(L#z_key,F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node))))) ==> (F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)))));
invariant b0764 ==> (((!($intset_in(L#z_key,F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node))))) ==> (F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)))));
invariant b0765 ==> (((!($intset_in(L#z_key,F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node))))) ==> (F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)))));
invariant b0766 ==> (((!($intset_in(L#z_key,F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node))))) ==> (F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)))));
invariant b0767 ==> (((!($intset_in(L#z_key,F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node))))) ==> (F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)))));
invariant b0768 ==> (((!($intset_in(L#z_key,F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node))))) ==> (F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)))));
invariant b0769 ==> (((!($intset_in(L#z_key,F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node))))) ==> (F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)))));
invariant b0770 ==> (((!($intset_in(L#z_key,F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node))))) ==> (F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)))));
invariant b0771 ==> (((!($intset_in(L#z_key,F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node))))) ==> (F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)))));
invariant b0772 ==> (((!($intset_in(L#z_key,F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node))))) ==> (F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b0773 ==> (((!($intset_in(L#z_key,F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node))))) ==> (F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b0774 ==> (((!($intset_in(L#z_key,F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node))))) ==> (F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b0775 ==> (((!($intset_in(L#z_key,F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node))))) ==> (F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b0776 ==> (((!($intset_in(L#z_key,F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node))))) ==> (F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b0777 ==> (((!($intset_in(L#z_key,F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node))))) ==> (F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b0778 ==> (((!($intset_in(L#z_key,F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node))))) ==> (F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b0779 ==> (((!($intset_in(L#z_key,F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node))))) ==> (F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b0780 ==> (((!($intset_in(L#z_key,F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node))))) ==> (F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b0781 ==> (((!($intset_in(L#z_key,F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node))))) ==> (F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b0782 ==> (((!($intset_in(L#z_key,F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node))))) ==> (F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)))));
invariant b0783 ==> (((!($intset_in(L#z_key,F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node))))) ==> (F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)))));
invariant b0784 ==> (((!($intset_in(L#z_key,F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node))))) ==> (F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)))));
invariant b0785 ==> (((!($intset_in(L#z_key,F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node))))) ==> (F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)))));
invariant b0786 ==> (((!($intset_in(L#z_key,F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node))))) ==> (F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)))));
invariant b0787 ==> (((!($intset_in(L#z_key,F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node))))) ==> (F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b0788 ==> (((!($intset_in(L#z_key,F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node))))) ==> (F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b0789 ==> (((!($intset_in(L#z_key,F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node))))) ==> (F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b0790 ==> (((!($intset_in(L#z_key,F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node))))) ==> (F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b0791 ==> (((!($intset_in(L#z_key,F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node))))) ==> (F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b0792 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == F#sll_keys($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0793 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0794 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0795 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0796 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0797 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == F#sll_keys($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0798 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0799 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0800 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0801 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0802 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_keys($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0803 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_keys($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0804 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0805 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0806 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0807 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_keys($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0808 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_keys($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0809 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0810 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0811 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0812 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == F#sll_keys($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0813 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == F#sll_keys($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0814 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0815 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0816 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0817 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == F#sll_keys($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0818 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == F#sll_keys($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0819 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0820 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0821 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0822 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0823 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0824 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0825 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0826 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0827 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0828 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0829 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0830 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0831 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0832 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0833 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0834 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0835 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0836 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0837 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0838 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0839 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0840 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0841 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0842 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0843 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0844 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0845 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0846 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0847 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0848 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0849 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0850 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0851 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0852 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0853 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0854 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0855 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0856 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0857 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0858 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0859 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0860 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0861 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0862 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0863 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0864 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0865 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0866 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0867 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0868 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0869 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0870 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0871 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0872 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0873 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0874 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0875 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0876 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0877 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0878 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0879 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0880 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0881 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0882 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0883 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0884 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0885 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0886 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0887 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0888 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0889 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0890 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0891 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0892 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0893 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0894 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0895 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0896 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0897 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0898 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0899 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0900 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0901 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0902 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0903 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0904 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0905 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0906 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0907 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0908 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0909 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0910 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0911 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0912 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0913 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0914 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0915 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0916 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0917 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0918 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0919 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0920 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0921 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0922 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0923 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0924 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0925 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0926 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0927 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0928 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0929 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0930 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0931 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0932 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0933 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0934 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0935 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0936 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0937 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0938 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0939 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0940 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0941 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0942 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0943 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0944 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0945 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0946 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0947 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0948 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0949 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0950 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0951 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0952 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0953 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0954 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0955 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0956 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0957 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0958 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0959 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0960 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0961 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0962 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0963 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0964 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0965 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0966 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0967 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0968 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0969 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0970 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0971 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0972 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0973 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0974 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0975 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0976 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0977 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0978 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0979 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0980 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0981 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0982 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0983 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0984 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0985 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0986 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0987 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0988 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0989 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0990 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0991 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0992 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0993 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0994 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0995 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0996 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0997 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0998 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0999 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b1000 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b1001 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b1002 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b1003 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b1004 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b1005 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b1006 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b1007 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b1008 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b1009 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b1010 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b1011 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b1012 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b1013 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b1014 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b1015 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b1016 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b1017 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1018 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b1019 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b1020 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1021 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b1022 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b1023 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1024 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b1025 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b1026 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b1027 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b1028 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b1029 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1030 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b1031 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b1032 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1033 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b1034 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b1035 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1036 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b1037 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b1038 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b1039 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b1040 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b1041 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1042 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b1043 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b1044 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1045 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b1046 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b1047 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1048 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b1049 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b1050 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b1051 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b1052 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b1053 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1054 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b1055 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b1056 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1057 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b1058 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b1059 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1060 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b1061 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b1062 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b1063 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b1064 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b1065 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b1066 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b1067 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b1068 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b1069 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b1070 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b1071 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b1072 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b1073 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b1074 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b1075 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b1076 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b1077 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1078 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b1079 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b1080 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1081 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b1082 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b1083 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1084 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b1085 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b1086 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b1087 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b1088 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b1089 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1090 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b1091 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b1092 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1093 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b1094 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b1095 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1096 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b1097 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b1098 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b1099 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b1100 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b1101 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1102 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b1103 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b1104 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1105 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b1106 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b1107 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1108 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b1109 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b1110 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b1111 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b1112 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b1113 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1114 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b1115 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b1116 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1117 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b1118 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b1119 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1120 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b1121 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b1122 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b1123 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b1124 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b1125 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b1126 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b1127 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b1128 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b1129 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b1130 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b1131 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b1132 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b1133 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b1134 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b1135 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b1136 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b1137 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1138 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b1139 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b1140 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1141 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b1142 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b1143 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1144 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b1145 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b1146 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b1147 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b1148 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b1149 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1150 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b1151 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b1152 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1153 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b1154 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b1155 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1156 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b1157 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b1158 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b1159 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b1160 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b1161 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1162 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b1163 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b1164 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1165 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b1166 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b1167 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1168 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b1169 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b1170 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b1171 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b1172 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b1173 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1174 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b1175 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b1176 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1177 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b1178 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b1179 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1180 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b1181 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b1182 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b1183 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b1184 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b1185 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b1186 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b1187 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b1188 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b1189 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b1190 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b1191 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b1192 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b1193 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b1194 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b1195 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b1196 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b1197 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1198 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b1199 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b1200 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1201 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b1202 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b1203 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1204 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b1205 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b1206 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b1207 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b1208 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b1209 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1210 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b1211 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b1212 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1213 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b1214 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b1215 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1216 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b1217 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b1218 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b1219 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b1220 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b1221 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1222 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b1223 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b1224 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1225 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b1226 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b1227 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1228 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b1229 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b1230 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b1231 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b1232 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b1233 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1234 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b1235 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b1236 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1237 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b1238 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b1239 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1240 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b1241 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b1242 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b1243 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b1244 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b1245 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b1246 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b1247 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b1248 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b1249 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b1250 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b1251 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b1252 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b1253 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b1254 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b1255 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b1256 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b1257 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1258 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b1259 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b1260 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1261 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b1262 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b1263 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1264 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b1265 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b1266 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b1267 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b1268 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b1269 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1270 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b1271 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b1272 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1273 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b1274 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b1275 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1276 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b1277 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b1278 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b1279 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b1280 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b1281 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1282 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b1283 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b1284 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1285 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b1286 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b1287 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1288 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b1289 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b1290 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b1291 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b1292 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b1293 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1294 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b1295 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b1296 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1297 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b1298 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b1299 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b1300 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b1301 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b1302 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1303 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1304 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1305 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1306 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1307 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1308 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1309 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1310 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1311 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1312 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1313 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1314 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1315 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1316 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1317 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1318 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1319 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1320 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1321 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1322 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1323 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1324 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1325 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1326 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1327 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1328 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1329 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1330 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1331 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1332 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1333 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1334 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1335 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1336 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1337 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1338 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1339 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1340 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1341 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1342 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1343 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1344 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1345 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1346 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1347 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1348 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1349 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1350 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1351 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1352 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1353 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1354 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1355 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1356 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1357 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1358 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1359 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1360 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1361 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1362 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1363 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1364 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1365 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1366 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1367 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1368 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1369 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1370 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1371 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1372 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1373 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1374 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1375 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1376 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1377 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1378 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1379 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1380 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1381 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1382 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1383 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1384 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1385 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1386 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1387 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1388 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1389 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1390 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1391 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1392 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1393 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1394 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1395 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1396 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1397 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1398 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1399 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1400 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1401 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1402 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1403 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1404 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1405 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1406 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1407 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1408 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1409 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1410 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1411 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1412 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1413 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1414 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1415 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1416 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1417 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1418 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1419 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1420 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1421 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1422 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1423 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1424 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1425 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1426 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1427 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1428 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1429 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1430 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1431 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1432 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1433 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1434 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1435 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1436 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1437 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1438 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1439 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1440 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1441 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1442 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1443 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1444 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1445 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1446 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1447 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1448 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1449 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1450 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1451 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1452 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1453 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1454 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1455 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1456 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1457 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1458 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1459 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1460 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1461 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1462 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1463 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1464 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1465 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1466 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1467 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1468 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1469 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1470 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1471 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1472 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1473 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1474 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1475 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1476 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1477 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1478 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1479 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1480 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1481 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1482 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1483 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1484 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1485 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1486 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1487 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1488 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1489 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1490 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1491 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1492 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1493 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1494 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1495 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1496 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1497 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1498 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1499 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1500 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1501 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1502 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1503 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1504 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1505 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1506 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1507 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1508 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1509 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1510 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1511 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1512 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1513 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1514 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1515 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1516 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1517 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1518 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1519 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1520 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1521 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1522 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1523 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1524 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1525 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1526 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1527 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1528 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1529 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1530 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1531 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1532 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1533 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1534 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1535 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1536 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1537 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1538 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1539 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1540 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1541 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1542 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1543 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1544 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1545 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1546 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1547 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1548 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1549 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1550 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1551 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1552 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1553 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1554 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1555 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1556 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1557 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1558 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1559 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1560 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1561 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1562 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1563 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1564 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1565 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1566 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1567 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1568 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1569 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1570 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1571 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1572 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1573 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1574 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1575 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1576 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1577 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1578 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1579 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1580 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1581 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1582 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1583 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1584 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1585 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1586 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1587 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1588 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1589 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1590 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1591 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1592 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1593 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1594 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1595 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1596 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1597 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1598 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1599 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1600 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1601 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1602 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1603 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1604 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1605 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1606 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1607 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1608 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1609 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1610 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1611 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1612 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1613 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1614 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1615 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1616 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1617 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1618 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1619 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1620 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1621 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1622 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1623 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1624 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1625 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1626 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1627 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1628 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1629 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1630 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1631 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1632 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1633 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1634 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1635 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1636 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1637 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1638 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1639 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1640 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1641 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1642 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1643 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1644 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1645 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1646 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1647 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1648 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1649 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1650 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1651 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1652 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1653 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1654 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1655 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1656 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1657 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1658 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1659 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1660 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1661 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_x,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1662 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1663 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1664 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1665 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1666 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1667 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1668 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1669 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1670 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1671 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1672 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1673 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1674 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1675 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1676 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1677 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1678 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1679 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1680 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1681 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#curr_y,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1682 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1683 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1684 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1685 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1686 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1687 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1688 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1689 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1690 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1691 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1692 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1693 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1694 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1695 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1696 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1697 ==> ((F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1698 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1699 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1700 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1701 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1702 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1703 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1704 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1705 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1706 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1707 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1708 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1709 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1710 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1711 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1712 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1713 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1714 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1715 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1716 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1717 ==> ((F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1718 ==> ((F#sll_keys($s,$phys_ptr_cast(P#x,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1719 ==> ((F#sll_keys($s,$phys_ptr_cast(P#y,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1720 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_x,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1721 ==> ((F#sll_keys($s,$phys_ptr_cast(L#curr_y,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#last_z,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1722 ==> ((L#z_key < 2147483647));
invariant b1723 ==> ((L#z_key < 2147483647));
invariant b1724 ==> ((L#z_key < 2147483647));
invariant b1725 ==> ((L#z_key < 2147483647));
invariant b1726 ==> ((L#z_key < 2147483647));
invariant b1727 ==> ((L#z_key < 2147483647));
invariant b1728 ==> ((L#z_key < 4294967295));
invariant b1729 ==> ((L#z_key < 4294967295));
invariant b1730 ==> ((L#z_key < 4294967295));
invariant b1731 ==> ((L#z_key < 4294967295));
invariant b1732 ==> ((L#z_key < 4294967295));
invariant b1733 ==> ((L#z_key < 4294967295));
invariant b1734 ==> ((L#z_key >= 0));
invariant b1735 ==> ((L#z_key >= 0));
invariant b1736 ==> ((L#z_key >= 0));
invariant b1737 ==> ((L#z_key >= 0));
invariant b1738 ==> ((L#z_key >= 0));
invariant b1739 ==> ((L#z_key >= 0));
invariant b1740 ==> (($non_null($phys_ptr_cast(P#x,^s_node)) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)) < L#z_key)));
invariant b1741 ==> (($non_null($phys_ptr_cast(P#y,^s_node)) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)) < L#z_key)));
invariant b1742 ==> (($non_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)) < L#z_key)));
invariant b1743 ==> (($non_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)) < L#z_key)));
invariant b1744 ==> (($non_null($phys_ptr_cast(L#z,^s_node)) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)) < L#z_key)));
invariant b1745 ==> (($non_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)) < L#z_key)));
invariant b1746 ==> ((($non_null($phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)))));
invariant b1747 ==> ((($non_null($phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1748 ==> ((($non_null($phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1749 ==> ((($non_null($phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)))));
invariant b1750 ==> ((($non_null($phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1751 ==> ((($non_null($phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)))));
invariant b1752 ==> ((($non_null($phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1753 ==> ((($non_null($phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1754 ==> ((($non_null($phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)))));
invariant b1755 ==> ((($non_null($phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1756 ==> ((($non_null($phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)))));
invariant b1757 ==> ((($non_null($phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)))));
invariant b1758 ==> ((($non_null($phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1759 ==> ((($non_null($phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)))));
invariant b1760 ==> ((($non_null($phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1761 ==> ((($non_null($phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)))));
invariant b1762 ==> ((($non_null($phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)))));
invariant b1763 ==> ((($non_null($phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1764 ==> ((($non_null($phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)))));
invariant b1765 ==> ((($non_null($phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1766 ==> ((($non_null($phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)))));
invariant b1767 ==> ((($non_null($phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)))));
invariant b1768 ==> ((($non_null($phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1769 ==> ((($non_null($phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1770 ==> ((($non_null($phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1771 ==> ((($non_null($phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)))));
invariant b1772 ==> ((($non_null($phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)))));
invariant b1773 ==> ((($non_null($phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1774 ==> ((($non_null($phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1775 ==> ((($non_null($phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)))));
invariant b1776 ==> ((($non_null($phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)))));
invariant b1777 ==> ((($non_null($phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1778 ==> ((($non_null($phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1779 ==> ((($non_null($phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)))));
invariant b1780 ==> ((($non_null($phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1781 ==> ((($non_null($phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)))));
invariant b1782 ==> ((($non_null($phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1783 ==> ((($non_null($phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1784 ==> ((($non_null($phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)))));
invariant b1785 ==> ((($non_null($phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1786 ==> ((($non_null($phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)))));
invariant b1787 ==> ((($non_null($phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)))));
invariant b1788 ==> ((($non_null($phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1789 ==> ((($non_null($phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)))));
invariant b1790 ==> ((($non_null($phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1791 ==> ((($non_null($phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)))));
invariant b1792 ==> ((($non_null($phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)))));
invariant b1793 ==> ((($non_null($phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1794 ==> ((($non_null($phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)))));
invariant b1795 ==> ((($non_null($phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1796 ==> ((($non_null($phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)))));
invariant b1797 ==> ((($non_null($phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)))));
invariant b1798 ==> ((($non_null($phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1799 ==> ((($non_null($phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1800 ==> ((($non_null($phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1801 ==> ((($non_null($phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)))));
invariant b1802 ==> ((($non_null($phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)))));
invariant b1803 ==> ((($non_null($phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1804 ==> ((($non_null($phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1805 ==> ((($non_null($phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)))));
invariant b1806 ==> (((F#srtl($s,$phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(P#x,^s_node)) <= L#z_key)));
invariant b1807 ==> (((F#srtl($s,$phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(P#y,^s_node)) <= L#z_key)));
invariant b1808 ==> (((F#srtl($s,$phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(L#curr_x,^s_node)) <= L#z_key)));
invariant b1809 ==> (((F#srtl($s,$phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(L#curr_y,^s_node)) <= L#z_key)));
invariant b1810 ==> (((F#srtl($s,$phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(L#z,^s_node)) <= L#z_key)));
invariant b1811 ==> (((F#srtl($s,$phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(L#last_z,^s_node)) <= L#z_key)));
invariant b1812 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(P#y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node)) <= L#z_key)));
invariant b1813 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(L#curr_x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) <= L#z_key)));
invariant b1814 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(L#curr_y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) <= L#z_key)));
invariant b1815 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(L#z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node)) <= L#z_key)));
invariant b1816 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(L#last_z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) <= L#z_key)));
invariant b1817 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(P#x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node)) <= L#z_key)));
invariant b1818 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(L#curr_x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) <= L#z_key)));
invariant b1819 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(L#curr_y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) <= L#z_key)));
invariant b1820 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(L#z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node)) <= L#z_key)));
invariant b1821 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(L#last_z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) <= L#z_key)));
invariant b1822 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(P#x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node)) <= L#z_key)));
invariant b1823 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(P#y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node)) <= L#z_key)));
invariant b1824 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(L#curr_y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) <= L#z_key)));
invariant b1825 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(L#z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node)) <= L#z_key)));
invariant b1826 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(L#last_z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) <= L#z_key)));
invariant b1827 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(P#x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node)) <= L#z_key)));
invariant b1828 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(P#y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node)) <= L#z_key)));
invariant b1829 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(L#curr_x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) <= L#z_key)));
invariant b1830 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(L#z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node)) <= L#z_key)));
invariant b1831 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(L#last_z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) <= L#z_key)));
invariant b1832 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(P#x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node)) <= L#z_key)));
invariant b1833 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(P#y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node)) <= L#z_key)));
invariant b1834 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(L#curr_x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) <= L#z_key)));
invariant b1835 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(L#curr_y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) <= L#z_key)));
invariant b1836 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(L#last_z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node)) <= L#z_key)));
invariant b1837 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(P#x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node)) <= L#z_key)));
invariant b1838 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(P#y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node)) <= L#z_key)));
invariant b1839 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(L#curr_x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) <= L#z_key)));
invariant b1840 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(L#curr_y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) <= L#z_key)));
invariant b1841 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(L#z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node)) <= L#z_key)));
invariant b1842 ==> (((F#srtl($s,$phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> (L#z_key <= F#sll_min_key($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b1843 ==> (((F#srtl($s,$phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> (L#z_key <= F#sll_min_key($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b1844 ==> (((F#srtl($s,$phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> (L#z_key <= F#sll_min_key($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1845 ==> (((F#srtl($s,$phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> (L#z_key <= F#sll_min_key($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1846 ==> (((F#srtl($s,$phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> (L#z_key <= F#sll_min_key($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b1847 ==> (((F#srtl($s,$phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> (L#z_key <= F#sll_min_key($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1848 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(P#y,^s_node))) ==> (L#z_key <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node)))));
invariant b1849 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(L#curr_x,^s_node))) ==> (L#z_key <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1850 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(L#curr_y,^s_node))) ==> (L#z_key <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1851 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(L#z,^s_node))) ==> (L#z_key <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node)))));
invariant b1852 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(L#last_z,^s_node))) ==> (L#z_key <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1853 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(P#x,^s_node))) ==> (L#z_key <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node)))));
invariant b1854 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(L#curr_x,^s_node))) ==> (L#z_key <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1855 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(L#curr_y,^s_node))) ==> (L#z_key <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1856 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(L#z,^s_node))) ==> (L#z_key <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node)))));
invariant b1857 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(L#last_z,^s_node))) ==> (L#z_key <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1858 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(P#x,^s_node))) ==> (L#z_key <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node)))));
invariant b1859 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(P#y,^s_node))) ==> (L#z_key <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node)))));
invariant b1860 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(L#curr_y,^s_node))) ==> (L#z_key <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1861 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(L#z,^s_node))) ==> (L#z_key <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node)))));
invariant b1862 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(L#last_z,^s_node))) ==> (L#z_key <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1863 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(P#x,^s_node))) ==> (L#z_key <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node)))));
invariant b1864 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(P#y,^s_node))) ==> (L#z_key <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node)))));
invariant b1865 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(L#curr_x,^s_node))) ==> (L#z_key <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1866 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(L#z,^s_node))) ==> (L#z_key <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node)))));
invariant b1867 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(L#last_z,^s_node))) ==> (L#z_key <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1868 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(P#x,^s_node))) ==> (L#z_key <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node)))));
invariant b1869 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(P#y,^s_node))) ==> (L#z_key <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node)))));
invariant b1870 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(L#curr_x,^s_node))) ==> (L#z_key <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1871 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(L#curr_y,^s_node))) ==> (L#z_key <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1872 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(L#last_z,^s_node))) ==> (L#z_key <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1873 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(P#x,^s_node))) ==> (L#z_key <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node)))));
invariant b1874 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(P#y,^s_node))) ==> (L#z_key <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node)))));
invariant b1875 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(L#curr_x,^s_node))) ==> (L#z_key <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1876 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(L#curr_y,^s_node))) ==> (L#z_key <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1877 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(L#z,^s_node))) ==> (L#z_key <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node)))));
invariant b1878 ==> (((F#srtl($s,$phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(P#x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)))));
invariant b1879 ==> (((F#srtl($s,$phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(P#x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1880 ==> (((F#srtl($s,$phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(P#x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1881 ==> (((F#srtl($s,$phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(P#x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)))));
invariant b1882 ==> (((F#srtl($s,$phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(P#x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1883 ==> (((F#srtl($s,$phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(P#y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)))));
invariant b1884 ==> (((F#srtl($s,$phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(P#y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1885 ==> (((F#srtl($s,$phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(P#y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1886 ==> (((F#srtl($s,$phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(P#y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)))));
invariant b1887 ==> (((F#srtl($s,$phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(P#y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1888 ==> (((F#srtl($s,$phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(L#curr_x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)))));
invariant b1889 ==> (((F#srtl($s,$phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(L#curr_x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)))));
invariant b1890 ==> (((F#srtl($s,$phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(L#curr_x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1891 ==> (((F#srtl($s,$phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(L#curr_x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)))));
invariant b1892 ==> (((F#srtl($s,$phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(L#curr_x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1893 ==> (((F#srtl($s,$phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(L#curr_y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)))));
invariant b1894 ==> (((F#srtl($s,$phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(L#curr_y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)))));
invariant b1895 ==> (((F#srtl($s,$phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(L#curr_y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1896 ==> (((F#srtl($s,$phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(L#curr_y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)))));
invariant b1897 ==> (((F#srtl($s,$phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(L#curr_y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1898 ==> (((F#srtl($s,$phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(L#z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)))));
invariant b1899 ==> (((F#srtl($s,$phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(L#z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)))));
invariant b1900 ==> (((F#srtl($s,$phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(L#z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1901 ==> (((F#srtl($s,$phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(L#z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1902 ==> (((F#srtl($s,$phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(L#z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1903 ==> (((F#srtl($s,$phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(L#last_z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)))));
invariant b1904 ==> (((F#srtl($s,$phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(L#last_z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)))));
invariant b1905 ==> (((F#srtl($s,$phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(L#last_z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1906 ==> (((F#srtl($s,$phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(L#last_z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1907 ==> (((F#srtl($s,$phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(L#last_z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)))));
invariant b1908 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)))));
invariant b1909 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1910 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1911 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)))));
invariant b1912 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1913 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)))));
invariant b1914 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1915 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1916 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)))));
invariant b1917 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1918 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)))));
invariant b1919 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)))));
invariant b1920 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1921 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)))));
invariant b1922 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1923 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)))));
invariant b1924 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)))));
invariant b1925 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1926 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)))));
invariant b1927 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1928 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)))));
invariant b1929 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)))));
invariant b1930 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1931 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1932 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1933 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)))));
invariant b1934 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)))));
invariant b1935 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1936 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1937 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)))));
invariant b1938 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1939 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1940 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)))));
invariant b1941 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1942 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)))));
invariant b1943 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1944 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)))));
invariant b1945 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1946 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)))));
invariant b1947 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1948 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)))));
invariant b1949 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1950 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)))));
invariant b1951 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1952 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1953 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1954 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)))));
invariant b1955 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1956 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1957 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)))));
invariant b1958 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1959 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1960 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)))));
invariant b1961 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1962 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)))));
invariant b1963 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1964 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)))));
invariant b1965 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1966 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)))));
invariant b1967 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1968 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)))));
invariant b1969 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1970 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)))));
invariant b1971 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1972 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1973 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1974 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)))));
invariant b1975 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b1976 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1977 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)))));
invariant b1978 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)))));
invariant b1979 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1980 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)))));
invariant b1981 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1982 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)))));
invariant b1983 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1984 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)))));
invariant b1985 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1986 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)))));
invariant b1987 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)))));
invariant b1988 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)))));
invariant b1989 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1990 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)))));
invariant b1991 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)))));
invariant b1992 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1993 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b1994 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)))));
invariant b1995 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)))));
invariant b1996 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b1997 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)))));
invariant b1998 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)))));
invariant b1999 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b2000 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)))));
invariant b2001 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b2002 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)))));
invariant b2003 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b2004 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)))));
invariant b2005 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b2006 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)))));
invariant b2007 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)))));
invariant b2008 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)))));
invariant b2009 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b2010 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)))));
invariant b2011 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)))));
invariant b2012 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b2013 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b2014 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)))));
invariant b2015 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)))));
invariant b2016 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b2017 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)))));
invariant b2018 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)))));
invariant b2019 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b2020 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b2021 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b2022 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)))));
invariant b2023 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b2024 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b2025 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b2026 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)))));
invariant b2027 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)))));
invariant b2028 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b2029 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b2030 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)))));
invariant b2031 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)))));
invariant b2032 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b2033 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b2034 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)))));
invariant b2035 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)))));
invariant b2036 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b2037 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b2038 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)))));
invariant b2039 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b2040 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b2041 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)))));
invariant b2042 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)))));
invariant b2043 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b2044 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b2045 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)))));
invariant b2046 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)))));
invariant b2047 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)))));
invariant b2048 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b2049 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)))));
invariant b2050 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)))));
invariant b2051 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)))));
invariant b2052 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b2053 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)))));
invariant b2054 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)))));
invariant b2055 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)))));
invariant b2056 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b2057 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b2058 ==> (((F#srtl($s,$phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b2059 ==> (((F#srtl($s,$phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b2060 ==> (((F#srtl($s,$phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b2061 ==> (((F#srtl($s,$phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b2062 ==> (((F#srtl($s,$phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(P#x,^s_node)))));
invariant b2063 ==> (((F#srtl($s,$phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b2064 ==> (((F#srtl($s,$phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b2065 ==> (((F#srtl($s,$phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b2066 ==> (((F#srtl($s,$phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b2067 ==> (((F#srtl($s,$phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(P#y,^s_node)))));
invariant b2068 ==> (((F#srtl($s,$phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b2069 ==> (((F#srtl($s,$phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b2070 ==> (((F#srtl($s,$phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b2071 ==> (((F#srtl($s,$phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b2072 ==> (((F#srtl($s,$phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b2073 ==> (((F#srtl($s,$phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b2074 ==> (((F#srtl($s,$phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b2075 ==> (((F#srtl($s,$phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b2076 ==> (((F#srtl($s,$phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b2077 ==> (((F#srtl($s,$phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b2078 ==> (((F#srtl($s,$phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b2079 ==> (((F#srtl($s,$phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b2080 ==> (((F#srtl($s,$phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b2081 ==> (((F#srtl($s,$phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b2082 ==> (((F#srtl($s,$phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(L#z,^s_node)))));
invariant b2083 ==> (((F#srtl($s,$phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b2084 ==> (((F#srtl($s,$phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b2085 ==> (((F#srtl($s,$phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b2086 ==> (((F#srtl($s,$phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b2087 ==> (((F#srtl($s,$phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(L#last_z,^s_node)))));
invariant b2088 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node)))));
invariant b2089 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b2090 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b2091 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node)))));
invariant b2092 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node)))));
invariant b2093 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node)))));
invariant b2094 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b2095 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b2096 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node)))));
invariant b2097 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node)))));
invariant b2098 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node)))));
invariant b2099 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node)))));
invariant b2100 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b2101 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node)))));
invariant b2102 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node)))));
invariant b2103 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node)))));
invariant b2104 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node)))));
invariant b2105 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b2106 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node)))));
invariant b2107 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node)))));
invariant b2108 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node)))));
invariant b2109 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node)))));
invariant b2110 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b2111 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b2112 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node)))));
invariant b2113 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node)))));
invariant b2114 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node)))));
invariant b2115 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b2116 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b2117 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node)))));
invariant b2118 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node)))));
invariant b2119 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node)))));
invariant b2120 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node)))));
invariant b2121 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node)))));
invariant b2122 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b2123 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b2124 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b2125 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b2126 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b2127 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b2128 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b2129 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b2130 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node)))));
invariant b2131 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node)))));
invariant b2132 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node)))));
invariant b2133 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node)))));
invariant b2134 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node)))));
invariant b2135 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node)))));
invariant b2136 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node)))));
invariant b2137 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(P#x,^s_node) != $phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node)))));
invariant b2138 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node)))));
invariant b2139 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node)))));
invariant b2140 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node)))));
invariant b2141 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node)))));
invariant b2142 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b2143 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b2144 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b2145 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b2146 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b2147 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b2148 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b2149 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b2150 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node)))));
invariant b2151 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node)))));
invariant b2152 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node)))));
invariant b2153 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node)))));
invariant b2154 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node)))));
invariant b2155 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node)))));
invariant b2156 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node)))));
invariant b2157 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(P#y,^s_node) != $phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node)))));
invariant b2158 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node)))));
invariant b2159 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node)))));
invariant b2160 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node)))));
invariant b2161 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node)))));
invariant b2162 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node)))));
invariant b2163 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node)))));
invariant b2164 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node)))));
invariant b2165 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node)))));
invariant b2166 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b2167 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b2168 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b2169 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b2170 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node)))));
invariant b2171 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node)))));
invariant b2172 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node)))));
invariant b2173 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node)))));
invariant b2174 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node)))));
invariant b2175 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node)))));
invariant b2176 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node)))));
invariant b2177 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(L#curr_x,^s_node) != $phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node)))));
invariant b2178 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node)))));
invariant b2179 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node)))));
invariant b2180 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node)))));
invariant b2181 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node)))));
invariant b2182 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node)))));
invariant b2183 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node)))));
invariant b2184 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node)))));
invariant b2185 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node)))));
invariant b2186 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b2187 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b2188 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b2189 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b2190 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node)))));
invariant b2191 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node)))));
invariant b2192 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node)))));
invariant b2193 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node)))));
invariant b2194 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node)))));
invariant b2195 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node)))));
invariant b2196 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node)))));
invariant b2197 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(L#curr_y,^s_node) != $phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node)))));
invariant b2198 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node)))));
invariant b2199 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node)))));
invariant b2200 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node)))));
invariant b2201 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node)))));
invariant b2202 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node)))));
invariant b2203 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node)))));
invariant b2204 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node)))));
invariant b2205 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node)))));
invariant b2206 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b2207 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b2208 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b2209 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b2210 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b2211 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b2212 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b2213 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#last_z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#last_z,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b2214 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node)))));
invariant b2215 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node)))));
invariant b2216 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node)))));
invariant b2217 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node)) && ($phys_ptr_cast(L#z,^s_node) != $phys_ptr_cast(L#last_z,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node)))));
invariant b2218 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node)))));
invariant b2219 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node)))));
invariant b2220 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node)))));
invariant b2221 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(P#x,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node)))));
invariant b2222 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node)))));
invariant b2223 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node)))));
invariant b2224 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node)))));
invariant b2225 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(P#y,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node)))));
invariant b2226 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b2227 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b2228 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b2229 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(L#curr_x,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)))));
invariant b2230 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b2231 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b2232 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b2233 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(L#curr_y,^s_node)) && $non_null($phys_ptr_cast(L#z,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#z,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)))));
invariant b2234 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(P#x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#x,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node)))));
invariant b2235 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(P#y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#y,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node)))));
invariant b2236 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#curr_x,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_x,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node)))));
invariant b2237 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node)) && ($phys_ptr_cast(L#last_z,^s_node) != $phys_ptr_cast(L#z,^s_node)) && $non_null($phys_ptr_cast(L#curr_y,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#curr_y,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node)))));
invariant b2238 ==> ((F#sll_list_len_next($s,$phys_ptr_cast(P#x,^s_node)) == L#z_key));
invariant b2239 ==> ((F#sll_list_len_next($s,$phys_ptr_cast(P#y,^s_node)) == L#z_key));
invariant b2240 ==> ((F#sll_list_len_next($s,$phys_ptr_cast(L#curr_x,^s_node)) == L#z_key));
invariant b2241 ==> ((F#sll_list_len_next($s,$phys_ptr_cast(L#curr_y,^s_node)) == L#z_key));
invariant b2242 ==> ((F#sll_list_len_next($s,$phys_ptr_cast(L#z,^s_node)) == L#z_key));
invariant b2243 ==> ((F#sll_list_len_next($s,$phys_ptr_cast(L#last_z,^s_node)) == L#z_key));
invariant b2244 ==> ((F#sll_lseg_len_next($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node)) == L#z_key));
invariant b2245 ==> ((F#sll_lseg_len_next($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == L#z_key));
invariant b2246 ==> ((F#sll_lseg_len_next($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == L#z_key));
invariant b2247 ==> ((F#sll_lseg_len_next($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node)) == L#z_key));
invariant b2248 ==> ((F#sll_lseg_len_next($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == L#z_key));
invariant b2249 ==> ((F#sll_lseg_len_next($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node)) == L#z_key));
invariant b2250 ==> ((F#sll_lseg_len_next($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == L#z_key));
invariant b2251 ==> ((F#sll_lseg_len_next($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == L#z_key));
invariant b2252 ==> ((F#sll_lseg_len_next($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node)) == L#z_key));
invariant b2253 ==> ((F#sll_lseg_len_next($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == L#z_key));
invariant b2254 ==> ((F#sll_lseg_len_next($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node)) == L#z_key));
invariant b2255 ==> ((F#sll_lseg_len_next($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node)) == L#z_key));
invariant b2256 ==> ((F#sll_lseg_len_next($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == L#z_key));
invariant b2257 ==> ((F#sll_lseg_len_next($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node)) == L#z_key));
invariant b2258 ==> ((F#sll_lseg_len_next($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == L#z_key));
invariant b2259 ==> ((F#sll_lseg_len_next($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node)) == L#z_key));
invariant b2260 ==> ((F#sll_lseg_len_next($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node)) == L#z_key));
invariant b2261 ==> ((F#sll_lseg_len_next($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == L#z_key));
invariant b2262 ==> ((F#sll_lseg_len_next($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node)) == L#z_key));
invariant b2263 ==> ((F#sll_lseg_len_next($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == L#z_key));
invariant b2264 ==> ((F#sll_lseg_len_next($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node)) == L#z_key));
invariant b2265 ==> ((F#sll_lseg_len_next($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node)) == L#z_key));
invariant b2266 ==> ((F#sll_lseg_len_next($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == L#z_key));
invariant b2267 ==> ((F#sll_lseg_len_next($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == L#z_key));
invariant b2268 ==> ((F#sll_lseg_len_next($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node)) == L#z_key));
invariant b2269 ==> ((F#sll_lseg_len_next($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node)) == L#z_key));
invariant b2270 ==> ((F#sll_lseg_len_next($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node)) == L#z_key));
invariant b2271 ==> ((F#sll_lseg_len_next($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)) == L#z_key));
invariant b2272 ==> ((F#sll_lseg_len_next($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)) == L#z_key));
invariant b2273 ==> ((F#sll_lseg_len_next($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node)) == L#z_key));
invariant b2274 ==> (((F#sll_list_len_next($s,$phys_ptr_cast(P#x,^s_node)) - F#sll_list_len_next($s,$phys_ptr_cast(P#y,^s_node))) == L#z_key));
invariant b2275 ==> (((F#sll_list_len_next($s,$phys_ptr_cast(P#x,^s_node)) - F#sll_list_len_next($s,$phys_ptr_cast(L#curr_x,^s_node))) == L#z_key));
invariant b2276 ==> (((F#sll_list_len_next($s,$phys_ptr_cast(P#x,^s_node)) - F#sll_list_len_next($s,$phys_ptr_cast(L#curr_y,^s_node))) == L#z_key));
invariant b2277 ==> (((F#sll_list_len_next($s,$phys_ptr_cast(P#x,^s_node)) - F#sll_list_len_next($s,$phys_ptr_cast(L#z,^s_node))) == L#z_key));
invariant b2278 ==> (((F#sll_list_len_next($s,$phys_ptr_cast(P#x,^s_node)) - F#sll_list_len_next($s,$phys_ptr_cast(L#last_z,^s_node))) == L#z_key));
invariant b2279 ==> (((F#sll_list_len_next($s,$phys_ptr_cast(P#y,^s_node)) - F#sll_list_len_next($s,$phys_ptr_cast(P#x,^s_node))) == L#z_key));
invariant b2280 ==> (((F#sll_list_len_next($s,$phys_ptr_cast(P#y,^s_node)) - F#sll_list_len_next($s,$phys_ptr_cast(L#curr_x,^s_node))) == L#z_key));
invariant b2281 ==> (((F#sll_list_len_next($s,$phys_ptr_cast(P#y,^s_node)) - F#sll_list_len_next($s,$phys_ptr_cast(L#curr_y,^s_node))) == L#z_key));
invariant b2282 ==> (((F#sll_list_len_next($s,$phys_ptr_cast(P#y,^s_node)) - F#sll_list_len_next($s,$phys_ptr_cast(L#z,^s_node))) == L#z_key));
invariant b2283 ==> (((F#sll_list_len_next($s,$phys_ptr_cast(P#y,^s_node)) - F#sll_list_len_next($s,$phys_ptr_cast(L#last_z,^s_node))) == L#z_key));
invariant b2284 ==> (((F#sll_list_len_next($s,$phys_ptr_cast(L#curr_x,^s_node)) - F#sll_list_len_next($s,$phys_ptr_cast(P#x,^s_node))) == L#z_key));
invariant b2285 ==> (((F#sll_list_len_next($s,$phys_ptr_cast(L#curr_x,^s_node)) - F#sll_list_len_next($s,$phys_ptr_cast(P#y,^s_node))) == L#z_key));
invariant b2286 ==> (((F#sll_list_len_next($s,$phys_ptr_cast(L#curr_x,^s_node)) - F#sll_list_len_next($s,$phys_ptr_cast(L#curr_y,^s_node))) == L#z_key));
invariant b2287 ==> (((F#sll_list_len_next($s,$phys_ptr_cast(L#curr_x,^s_node)) - F#sll_list_len_next($s,$phys_ptr_cast(L#z,^s_node))) == L#z_key));
invariant b2288 ==> (((F#sll_list_len_next($s,$phys_ptr_cast(L#curr_x,^s_node)) - F#sll_list_len_next($s,$phys_ptr_cast(L#last_z,^s_node))) == L#z_key));
invariant b2289 ==> (((F#sll_list_len_next($s,$phys_ptr_cast(L#curr_y,^s_node)) - F#sll_list_len_next($s,$phys_ptr_cast(P#x,^s_node))) == L#z_key));
invariant b2290 ==> (((F#sll_list_len_next($s,$phys_ptr_cast(L#curr_y,^s_node)) - F#sll_list_len_next($s,$phys_ptr_cast(P#y,^s_node))) == L#z_key));
invariant b2291 ==> (((F#sll_list_len_next($s,$phys_ptr_cast(L#curr_y,^s_node)) - F#sll_list_len_next($s,$phys_ptr_cast(L#curr_x,^s_node))) == L#z_key));
invariant b2292 ==> (((F#sll_list_len_next($s,$phys_ptr_cast(L#curr_y,^s_node)) - F#sll_list_len_next($s,$phys_ptr_cast(L#z,^s_node))) == L#z_key));
invariant b2293 ==> (((F#sll_list_len_next($s,$phys_ptr_cast(L#curr_y,^s_node)) - F#sll_list_len_next($s,$phys_ptr_cast(L#last_z,^s_node))) == L#z_key));
invariant b2294 ==> (((F#sll_list_len_next($s,$phys_ptr_cast(L#z,^s_node)) - F#sll_list_len_next($s,$phys_ptr_cast(P#x,^s_node))) == L#z_key));
invariant b2295 ==> (((F#sll_list_len_next($s,$phys_ptr_cast(L#z,^s_node)) - F#sll_list_len_next($s,$phys_ptr_cast(P#y,^s_node))) == L#z_key));
invariant b2296 ==> (((F#sll_list_len_next($s,$phys_ptr_cast(L#z,^s_node)) - F#sll_list_len_next($s,$phys_ptr_cast(L#curr_x,^s_node))) == L#z_key));
invariant b2297 ==> (((F#sll_list_len_next($s,$phys_ptr_cast(L#z,^s_node)) - F#sll_list_len_next($s,$phys_ptr_cast(L#curr_y,^s_node))) == L#z_key));
invariant b2298 ==> (((F#sll_list_len_next($s,$phys_ptr_cast(L#z,^s_node)) - F#sll_list_len_next($s,$phys_ptr_cast(L#last_z,^s_node))) == L#z_key));
invariant b2299 ==> (((F#sll_list_len_next($s,$phys_ptr_cast(L#last_z,^s_node)) - F#sll_list_len_next($s,$phys_ptr_cast(P#x,^s_node))) == L#z_key));
invariant b2300 ==> (((F#sll_list_len_next($s,$phys_ptr_cast(L#last_z,^s_node)) - F#sll_list_len_next($s,$phys_ptr_cast(P#y,^s_node))) == L#z_key));
invariant b2301 ==> (((F#sll_list_len_next($s,$phys_ptr_cast(L#last_z,^s_node)) - F#sll_list_len_next($s,$phys_ptr_cast(L#curr_x,^s_node))) == L#z_key));
invariant b2302 ==> (((F#sll_list_len_next($s,$phys_ptr_cast(L#last_z,^s_node)) - F#sll_list_len_next($s,$phys_ptr_cast(L#curr_y,^s_node))) == L#z_key));
invariant b2303 ==> (((F#sll_list_len_next($s,$phys_ptr_cast(L#last_z,^s_node)) - F#sll_list_len_next($s,$phys_ptr_cast(L#z,^s_node))) == L#z_key));

      invariant $oset_subset(F#srtl_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), SL#ALL_REACH);
      invariant $oset_subset(F#srtl_reach($s, $phys_ptr_cast(P#x, ^s_node)), SL#ALL_REACH);
      invariant $oset_subset(F#srtl_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), SL#ALL_REACH);
      invariant $oset_subset(F#srtl_reach($s, $phys_ptr_cast(P#y, ^s_node)), SL#ALL_REACH);
      invariant $oset_subset(F#srtl_lseg_reach($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)), SL#ALL_REACH);
      invariant $oset_subset(F#srtl_reach($s, $phys_ptr_cast(L#z, ^s_node)), SL#ALL_REACH);
      invariant $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> $mutable($s, $phys_ptr_cast(L#curr_x, ^s_node));
      invariant $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(L#curr_x, ^s_node));
      invariant $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> $mutable($s, $phys_ptr_cast(L#curr_y, ^s_node));
      invariant $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(L#curr_y, ^s_node));
      invariant $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> $mutable($s, $phys_ptr_cast(L#last_z, ^s_node));
      invariant $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(L#last_z, ^s_node));
    {
      anon7:
        assume $writes_nothing(old($s), $s);
        assume $timestamp_post(loopState#0, $s);
        assume $full_stop_ext(#tok$3^35.3, $s);
        // assume @_vcc_meta_eq(old(@prestate, @state), @state); 
        assume $meta_eq(loopState#0, $s);
        // _Bool ite#2; 
        // assert @reads_check_normal((curr_x->next)); 
        assert $thread_local($s, $phys_ptr_cast(L#curr_x, ^s_node));
        assume true;
        // if (@_vcc_ptr_neq_null(*((curr_x->next)))) ...
        if ($non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)))
        {
          anon3:
            // assert @_vcc_possibly_unreachable; 
            assert {:PossiblyUnreachable true} true;
            // assert @reads_check_normal((curr_y->next)); 
            assert $thread_local($s, $phys_ptr_cast(L#curr_y, ^s_node));
            // ite#2 := @_vcc_ptr_neq_null(*((curr_y->next))); 
            ite#2 := $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node));
        }
        else
        {
          anon4:
            // assert @_vcc_possibly_unreachable; 
            assert {:PossiblyUnreachable true} true;
            // ite#2 := false; 
            ite#2 := false;
        }

      anon8:
        assume true;
        // if (ite#2) ...
        if (ite#2)
        {
          anon5:
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_keys(curr_x), @_vcc_intset_union(sll_keys(*((curr_x->next))), @_vcc_intset_singleton(*((curr_x->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_list_len_next(curr_x), unchecked+(sll_list_len_next(*((curr_x->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(rsrtl(curr_x), &&(&&(rsrtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, rsrtl_reach(*((curr_x->next)))))), >=(*((curr_x->key)), sll_max_key(*((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(rsrtl_reach(curr_x), @_vcc_oset_union(rsrtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll(curr_x), &&(sll(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, sll_reach(*((curr_x->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_reach(curr_x), @_vcc_oset_union(sll_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_max_key(curr_x), @\int_max(*((curr_x->key)), sll_max_key(*((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_min_key(curr_x), @\int_min(*((curr_x->key)), sll_min_key(*((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(srtl(curr_x), &&(&&(srtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, srtl_reach(*((curr_x->next)))))), <=(*((curr_x->key)), sll_min_key(*((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(srtl_reach(curr_x), @_vcc_oset_union(srtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_keys(curr_y), @_vcc_intset_union(sll_keys(*((curr_y->next))), @_vcc_intset_singleton(*((curr_y->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_list_len_next(curr_y), unchecked+(sll_list_len_next(*((curr_y->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(rsrtl(curr_y), &&(&&(rsrtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, rsrtl_reach(*((curr_y->next)))))), >=(*((curr_y->key)), sll_max_key(*((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(rsrtl_reach(curr_y), @_vcc_oset_union(rsrtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll(curr_y), &&(sll(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, sll_reach(*((curr_y->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_reach(curr_y), @_vcc_oset_union(sll_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_max_key(curr_y), @\int_max(*((curr_y->key)), sll_max_key(*((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_min_key(curr_y), @\int_min(*((curr_y->key)), sll_min_key(*((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(srtl(curr_y), &&(&&(srtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, srtl_reach(*((curr_y->next)))))), <=(*((curr_y->key)), sll_min_key(*((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(srtl_reach(curr_y), @_vcc_oset_union(srtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_keys(z), @_vcc_intset_union(sll_keys(*((z->next))), @_vcc_intset_singleton(*((z->key)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_list_len_next(z), unchecked+(sll_list_len_next(*((z->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(rsrtl(z), &&(&&(rsrtl(*((z->next))), unchecked!(@_vcc_oset_in(z, rsrtl_reach(*((z->next)))))), >=(*((z->key)), sll_max_key(*((z->next))))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(rsrtl_reach(z), @_vcc_oset_union(rsrtl_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll(z), &&(sll(*((z->next))), unchecked!(@_vcc_oset_in(z, sll_reach(*((z->next)))))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_reach(z), @_vcc_oset_union(sll_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_max_key(z), @\int_max(*((z->key)), sll_max_key(*((z->next)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_min_key(z), @\int_min(*((z->key)), sll_min_key(*((z->next)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(srtl(z), &&(&&(srtl(*((z->next))), unchecked!(@_vcc_oset_in(z, srtl_reach(*((z->next)))))), <=(*((z->key)), sll_min_key(*((z->next))))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(srtl_reach(z), @_vcc_oset_union(srtl_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_keys(last_z), @_vcc_intset_union(sll_keys(*((last_z->next))), @_vcc_intset_singleton(*((last_z->key)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#last_z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_list_len_next(last_z), unchecked+(sll_list_len_next(*((last_z->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#last_z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(rsrtl(last_z), &&(&&(rsrtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, rsrtl_reach(*((last_z->next)))))), >=(*((last_z->key)), sll_max_key(*((last_z->next))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(rsrtl_reach(last_z), @_vcc_oset_union(rsrtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll(last_z), &&(sll(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, sll_reach(*((last_z->next)))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_reach(last_z), @_vcc_oset_union(sll_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_max_key(last_z), @\int_max(*((last_z->key)), sll_max_key(*((last_z->next)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_min_key(last_z), @\int_min(*((last_z->key)), sll_min_key(*((last_z->next)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(srtl(last_z), &&(&&(srtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, srtl_reach(*((last_z->next)))))), <=(*((last_z->key)), sll_min_key(*((last_z->next))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(srtl_reach(last_z), @_vcc_oset_union(srtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_keys(y), @_vcc_intset_union(sll_keys(*((y->next))), @_vcc_intset_singleton(*((y->key)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_list_len_next(y), unchecked+(sll_list_len_next(*((y->next))), 1))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(rsrtl(y), &&(&&(rsrtl(*((y->next))), unchecked!(@_vcc_oset_in(y, rsrtl_reach(*((y->next)))))), >=(*((y->key)), sll_max_key(*((y->next))))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(rsrtl_reach(y), @_vcc_oset_union(rsrtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll(y), &&(sll(*((y->next))), unchecked!(@_vcc_oset_in(y, sll_reach(*((y->next)))))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_reach(y), @_vcc_oset_union(sll_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_max_key(y), @\int_max(*((y->key)), sll_max_key(*((y->next)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_min_key(y), @\int_min(*((y->key)), sll_min_key(*((y->next)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(srtl(y), &&(&&(srtl(*((y->next))), unchecked!(@_vcc_oset_in(y, srtl_reach(*((y->next)))))), <=(*((y->key)), sll_min_key(*((y->next))))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(srtl_reach(y), @_vcc_oset_union(srtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_keys(x), @_vcc_intset_union(sll_keys(*((x->next))), @_vcc_intset_singleton(*((x->key)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_list_len_next(x), unchecked+(sll_list_len_next(*((x->next))), 1))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(rsrtl(x), &&(&&(rsrtl(*((x->next))), unchecked!(@_vcc_oset_in(x, rsrtl_reach(*((x->next)))))), >=(*((x->key)), sll_max_key(*((x->next))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(rsrtl_reach(x), @_vcc_oset_union(rsrtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll(x), &&(sll(*((x->next))), unchecked!(@_vcc_oset_in(x, sll_reach(*((x->next)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_reach(x), @_vcc_oset_union(sll_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_max_key(x), @\int_max(*((x->key)), sll_max_key(*((x->next)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_min_key(x), @\int_min(*((x->key)), sll_min_key(*((x->next)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(srtl(x), &&(&&(srtl(*((x->next))), unchecked!(@_vcc_oset_in(x, srtl_reach(*((x->next)))))), <=(*((x->key)), sll_min_key(*((x->next))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(srtl_reach(x), @_vcc_oset_union(srtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg(y, curr_y), &&(sll_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, sll_lseg_reach(*((y->next)), curr_y)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_reach(y, curr_y), @_vcc_oset_union(sll_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_keys(y, curr_y), @_vcc_intset_union(sll_lseg_keys(*((y->next)), curr_y), @_vcc_intset_singleton(*((y->key)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_len_next(y, curr_y), unchecked+(sll_lseg_len_next(*((y->next)), curr_y), 1))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_max_key(y, curr_y), @\int_max(*((y->key)), sll_lseg_max_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_min_key(y, curr_y), @\int_min(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(srtl_lseg(y, curr_y), &&(&&(srtl_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, srtl_lseg_reach(*((y->next)), curr_y)))), <=(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(srtl_lseg_reach(y, curr_y), @_vcc_oset_union(srtl_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), ==(sll_lseg(z, last_z), &&(sll_lseg(*((z->next)), last_z), unchecked!(@_vcc_oset_in(z, sll_lseg_reach(*((z->next)), last_z)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), ==(sll_lseg_reach(z, last_z), @_vcc_oset_union(sll_lseg_reach(*((z->next)), last_z), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), ==(sll_lseg_keys(z, last_z), @_vcc_intset_union(sll_lseg_keys(*((z->next)), last_z), @_vcc_intset_singleton(*((z->key)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), ==(sll_lseg_len_next(z, last_z), unchecked+(sll_lseg_len_next(*((z->next)), last_z), 1))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), @_vcc_ptr_neq_pure(*((z->next)), last_z)), ==(sll_lseg_max_key(z, last_z), @\int_max(*((z->key)), sll_lseg_max_key(*((z->next)), last_z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), @_vcc_ptr_neq_pure(*((z->next)), last_z)), ==(sll_lseg_min_key(z, last_z), @\int_min(*((z->key)), sll_lseg_min_key(*((z->next)), last_z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), @_vcc_ptr_neq_pure(*((z->next)), last_z)), ==(srtl_lseg(z, last_z), &&(&&(srtl_lseg(*((z->next)), last_z), unchecked!(@_vcc_oset_in(z, srtl_lseg_reach(*((z->next)), last_z)))), <=(*((z->key)), sll_lseg_min_key(*((z->next)), last_z))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), ==(srtl_lseg_reach(z, last_z), @_vcc_oset_union(srtl_lseg_reach(*((z->next)), last_z), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg(x, curr_x), &&(sll_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, sll_lseg_reach(*((x->next)), curr_x)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_reach(x, curr_x), @_vcc_oset_union(sll_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_keys(x, curr_x), @_vcc_intset_union(sll_lseg_keys(*((x->next)), curr_x), @_vcc_intset_singleton(*((x->key)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_len_next(x, curr_x), unchecked+(sll_lseg_len_next(*((x->next)), curr_x), 1))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_max_key(x, curr_x), @\int_max(*((x->key)), sll_lseg_max_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_min_key(x, curr_x), @\int_min(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(srtl_lseg(x, curr_x), &&(&&(srtl_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, srtl_lseg_reach(*((x->next)), curr_x)))), <=(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(srtl_lseg_reach(x, curr_x), @_vcc_oset_union(srtl_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // struct s_node* tmp; 
            // tmp := last_z; 
            L#tmp := $phys_ptr_cast(L#last_z, ^s_node);
            // assert sll_lseg(tmp, tmp); 
            assert F#sll_lseg($s, $phys_ptr_cast(L#tmp, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume sll_lseg(tmp, tmp); 
            assume F#sll_lseg($s, $phys_ptr_cast(L#tmp, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assert srtl_lseg(tmp, tmp); 
            assert F#srtl_lseg($s, $phys_ptr_cast(L#tmp, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume srtl_lseg(tmp, tmp); 
            assume F#srtl_lseg($s, $phys_ptr_cast(L#tmp, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assert sll_lseg(curr_x, curr_x); 
            assert F#sll_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume sll_lseg(curr_x, curr_x); 
            assume F#sll_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assert srtl_lseg(curr_x, curr_x); 
            assert F#srtl_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume srtl_lseg(curr_x, curr_x); 
            assume F#srtl_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assert sll_lseg(curr_y, curr_y); 
            assert F#sll_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume sll_lseg(curr_y, curr_y); 
            assume F#sll_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assert srtl_lseg(curr_y, curr_y); 
            assert F#srtl_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume srtl_lseg(curr_y, curr_y); 
            assume F#srtl_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assert sll_lseg(z, z); 
            assert F#sll_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#z, ^s_node));
            // assume sll_lseg(z, z); 
            assume F#sll_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#z, ^s_node));
            // assert srtl_lseg(z, z); 
            assert F#srtl_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#z, ^s_node));
            // assume srtl_lseg(z, z); 
            assume F#srtl_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#z, ^s_node));
            // assert sll_lseg(last_z, last_z); 
            assert F#sll_lseg($s, $phys_ptr_cast(L#last_z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume sll_lseg(last_z, last_z); 
            assume F#sll_lseg($s, $phys_ptr_cast(L#last_z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assert srtl_lseg(last_z, last_z); 
            assert F#srtl_lseg($s, $phys_ptr_cast(L#last_z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume srtl_lseg(last_z, last_z); 
            assume F#srtl_lseg($s, $phys_ptr_cast(L#last_z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assert sll_lseg(y, y); 
            assert F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(P#y, ^s_node));
            // assume sll_lseg(y, y); 
            assume F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(P#y, ^s_node));
            // assert srtl_lseg(y, y); 
            assert F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(P#y, ^s_node));
            // assume srtl_lseg(y, y); 
            assume F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(P#y, ^s_node));
            // assert sll_lseg(x, x); 
            assert F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(P#x, ^s_node));
            // assume sll_lseg(x, x); 
            assume F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(P#x, ^s_node));
            // assert srtl_lseg(x, x); 
            assert F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(P#x, ^s_node));
            // assume srtl_lseg(x, x); 
            assume F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(P#x, ^s_node));
            // struct s_node* curr_x2; 
            // curr_x2 := curr_x; 
            SL#curr_x2 := $phys_ptr_cast(L#curr_x, ^s_node);
            // struct s_node* stmtexpr0#8; 
            // stmtexpr0#8 := curr_x2; 
            stmtexpr0#8 := $phys_ptr_cast(SL#curr_x2, ^s_node);
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_keys(curr_x), @_vcc_intset_union(sll_keys(*((curr_x->next))), @_vcc_intset_singleton(*((curr_x->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_list_len_next(curr_x), unchecked+(sll_list_len_next(*((curr_x->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(rsrtl(curr_x), &&(&&(rsrtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, rsrtl_reach(*((curr_x->next)))))), >=(*((curr_x->key)), sll_max_key(*((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(rsrtl_reach(curr_x), @_vcc_oset_union(rsrtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll(curr_x), &&(sll(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, sll_reach(*((curr_x->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_reach(curr_x), @_vcc_oset_union(sll_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_max_key(curr_x), @\int_max(*((curr_x->key)), sll_max_key(*((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_min_key(curr_x), @\int_min(*((curr_x->key)), sll_min_key(*((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(srtl(curr_x), &&(&&(srtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, srtl_reach(*((curr_x->next)))))), <=(*((curr_x->key)), sll_min_key(*((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(srtl_reach(curr_x), @_vcc_oset_union(srtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_pure(curr_x, *((curr_x->next)))), ==(sll_lseg(curr_x, *((curr_x->next))), &&(sll_lseg(*((curr_x->next)), *((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, sll_lseg_reach(*((curr_x->next)), *((curr_x->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $phys_ptr_cast(L#curr_x, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_pure(curr_x, *((curr_x->next)))), ==(sll_lseg_reach(curr_x, *((curr_x->next))), @_vcc_oset_union(sll_lseg_reach(*((curr_x->next)), *((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $phys_ptr_cast(L#curr_x, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#curr_x, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_pure(curr_x, *((curr_x->next)))), ==(sll_lseg_keys(curr_x, *((curr_x->next))), @_vcc_intset_union(sll_lseg_keys(*((curr_x->next)), *((curr_x->next))), @_vcc_intset_singleton(*((curr_x->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $phys_ptr_cast(L#curr_x, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#curr_x, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_pure(curr_x, *((curr_x->next)))), ==(sll_lseg_len_next(curr_x, *((curr_x->next))), unchecked+(sll_lseg_len_next(*((curr_x->next)), *((curr_x->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $phys_ptr_cast(L#curr_x, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#curr_x, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_pure(curr_x, *((curr_x->next)))), @_vcc_ptr_neq_pure(*((curr_x->next)), *((curr_x->next)))), ==(sll_lseg_max_key(curr_x, *((curr_x->next))), @\int_max(*((curr_x->key)), sll_lseg_max_key(*((curr_x->next)), *((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $phys_ptr_cast(L#curr_x, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#curr_x, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_pure(curr_x, *((curr_x->next)))), @_vcc_ptr_neq_pure(*((curr_x->next)), *((curr_x->next)))), ==(sll_lseg_min_key(curr_x, *((curr_x->next))), @\int_min(*((curr_x->key)), sll_lseg_min_key(*((curr_x->next)), *((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $phys_ptr_cast(L#curr_x, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(L#curr_x, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_pure(curr_x, *((curr_x->next)))), @_vcc_ptr_neq_pure(*((curr_x->next)), *((curr_x->next)))), ==(srtl_lseg(curr_x, *((curr_x->next))), &&(&&(srtl_lseg(*((curr_x->next)), *((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, srtl_lseg_reach(*((curr_x->next)), *((curr_x->next)))))), <=(*((curr_x->key)), sll_lseg_min_key(*((curr_x->next)), *((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $phys_ptr_cast(L#curr_x, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_pure(curr_x, *((curr_x->next)))), ==(srtl_lseg_reach(curr_x, *((curr_x->next))), @_vcc_oset_union(srtl_lseg_reach(*((curr_x->next)), *((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $phys_ptr_cast(L#curr_x, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(L#curr_x, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assert @reads_check_normal((curr_x->next)); 
            assert $thread_local($s, $phys_ptr_cast(L#curr_x, ^s_node));
            // curr_x := *((curr_x->next)); 
            L#curr_x := $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node);
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_keys(curr_x), @_vcc_intset_union(sll_keys(*((curr_x->next))), @_vcc_intset_singleton(*((curr_x->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_list_len_next(curr_x), unchecked+(sll_list_len_next(*((curr_x->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(rsrtl(curr_x), &&(&&(rsrtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, rsrtl_reach(*((curr_x->next)))))), >=(*((curr_x->key)), sll_max_key(*((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(rsrtl_reach(curr_x), @_vcc_oset_union(rsrtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll(curr_x), &&(sll(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, sll_reach(*((curr_x->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_reach(curr_x), @_vcc_oset_union(sll_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_max_key(curr_x), @\int_max(*((curr_x->key)), sll_max_key(*((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_min_key(curr_x), @\int_min(*((curr_x->key)), sll_min_key(*((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(srtl(curr_x), &&(&&(srtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, srtl_reach(*((curr_x->next)))))), <=(*((curr_x->key)), sll_min_key(*((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(srtl_reach(curr_x), @_vcc_oset_union(srtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_keys(curr_x), @_vcc_intset_union(sll_keys(*((curr_x->next))), @_vcc_intset_singleton(*((curr_x->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_list_len_next(curr_x), unchecked+(sll_list_len_next(*((curr_x->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(rsrtl(curr_x), &&(&&(rsrtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, rsrtl_reach(*((curr_x->next)))))), >=(*((curr_x->key)), sll_max_key(*((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(rsrtl_reach(curr_x), @_vcc_oset_union(rsrtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll(curr_x), &&(sll(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, sll_reach(*((curr_x->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_reach(curr_x), @_vcc_oset_union(sll_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_max_key(curr_x), @\int_max(*((curr_x->key)), sll_max_key(*((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_min_key(curr_x), @\int_min(*((curr_x->key)), sll_min_key(*((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(srtl(curr_x), &&(&&(srtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, srtl_reach(*((curr_x->next)))))), <=(*((curr_x->key)), sll_min_key(*((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(srtl_reach(curr_x), @_vcc_oset_union(srtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg(x, curr_x), &&(sll_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, sll_lseg_reach(*((x->next)), curr_x)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_reach(x, curr_x), @_vcc_oset_union(sll_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_keys(x, curr_x), @_vcc_intset_union(sll_lseg_keys(*((x->next)), curr_x), @_vcc_intset_singleton(*((x->key)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_len_next(x, curr_x), unchecked+(sll_lseg_len_next(*((x->next)), curr_x), 1))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_max_key(x, curr_x), @\int_max(*((x->key)), sll_lseg_max_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_min_key(x, curr_x), @\int_min(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(srtl_lseg(x, curr_x), &&(&&(srtl_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, srtl_lseg_reach(*((x->next)), curr_x)))), <=(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(srtl_lseg_reach(x, curr_x), @_vcc_oset_union(srtl_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // struct s_node* curr_y3; 
            // curr_y3 := curr_y; 
            SL#curr_y3 := $phys_ptr_cast(L#curr_y, ^s_node);
            // struct s_node* stmtexpr1#9; 
            // stmtexpr1#9 := curr_y3; 
            stmtexpr1#9 := $phys_ptr_cast(SL#curr_y3, ^s_node);
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_keys(curr_y), @_vcc_intset_union(sll_keys(*((curr_y->next))), @_vcc_intset_singleton(*((curr_y->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_list_len_next(curr_y), unchecked+(sll_list_len_next(*((curr_y->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(rsrtl(curr_y), &&(&&(rsrtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, rsrtl_reach(*((curr_y->next)))))), >=(*((curr_y->key)), sll_max_key(*((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(rsrtl_reach(curr_y), @_vcc_oset_union(rsrtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll(curr_y), &&(sll(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, sll_reach(*((curr_y->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_reach(curr_y), @_vcc_oset_union(sll_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_max_key(curr_y), @\int_max(*((curr_y->key)), sll_max_key(*((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_min_key(curr_y), @\int_min(*((curr_y->key)), sll_min_key(*((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(srtl(curr_y), &&(&&(srtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, srtl_reach(*((curr_y->next)))))), <=(*((curr_y->key)), sll_min_key(*((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(srtl_reach(curr_y), @_vcc_oset_union(srtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_pure(curr_y, *((curr_y->next)))), ==(sll_lseg(curr_y, *((curr_y->next))), &&(sll_lseg(*((curr_y->next)), *((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, sll_lseg_reach(*((curr_y->next)), *((curr_y->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $phys_ptr_cast(L#curr_y, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_pure(curr_y, *((curr_y->next)))), ==(sll_lseg_reach(curr_y, *((curr_y->next))), @_vcc_oset_union(sll_lseg_reach(*((curr_y->next)), *((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $phys_ptr_cast(L#curr_y, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#curr_y, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_pure(curr_y, *((curr_y->next)))), ==(sll_lseg_keys(curr_y, *((curr_y->next))), @_vcc_intset_union(sll_lseg_keys(*((curr_y->next)), *((curr_y->next))), @_vcc_intset_singleton(*((curr_y->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $phys_ptr_cast(L#curr_y, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#curr_y, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_pure(curr_y, *((curr_y->next)))), ==(sll_lseg_len_next(curr_y, *((curr_y->next))), unchecked+(sll_lseg_len_next(*((curr_y->next)), *((curr_y->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $phys_ptr_cast(L#curr_y, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#curr_y, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_pure(curr_y, *((curr_y->next)))), @_vcc_ptr_neq_pure(*((curr_y->next)), *((curr_y->next)))), ==(sll_lseg_max_key(curr_y, *((curr_y->next))), @\int_max(*((curr_y->key)), sll_lseg_max_key(*((curr_y->next)), *((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $phys_ptr_cast(L#curr_y, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#curr_y, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_pure(curr_y, *((curr_y->next)))), @_vcc_ptr_neq_pure(*((curr_y->next)), *((curr_y->next)))), ==(sll_lseg_min_key(curr_y, *((curr_y->next))), @\int_min(*((curr_y->key)), sll_lseg_min_key(*((curr_y->next)), *((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $phys_ptr_cast(L#curr_y, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(L#curr_y, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_pure(curr_y, *((curr_y->next)))), @_vcc_ptr_neq_pure(*((curr_y->next)), *((curr_y->next)))), ==(srtl_lseg(curr_y, *((curr_y->next))), &&(&&(srtl_lseg(*((curr_y->next)), *((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, srtl_lseg_reach(*((curr_y->next)), *((curr_y->next)))))), <=(*((curr_y->key)), sll_lseg_min_key(*((curr_y->next)), *((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $phys_ptr_cast(L#curr_y, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_pure(curr_y, *((curr_y->next)))), ==(srtl_lseg_reach(curr_y, *((curr_y->next))), @_vcc_oset_union(srtl_lseg_reach(*((curr_y->next)), *((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $phys_ptr_cast(L#curr_y, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(L#curr_y, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assert @reads_check_normal((curr_y->next)); 
            assert $thread_local($s, $phys_ptr_cast(L#curr_y, ^s_node));
            // curr_y := *((curr_y->next)); 
            L#curr_y := $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node);
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_keys(curr_y), @_vcc_intset_union(sll_keys(*((curr_y->next))), @_vcc_intset_singleton(*((curr_y->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_list_len_next(curr_y), unchecked+(sll_list_len_next(*((curr_y->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(rsrtl(curr_y), &&(&&(rsrtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, rsrtl_reach(*((curr_y->next)))))), >=(*((curr_y->key)), sll_max_key(*((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(rsrtl_reach(curr_y), @_vcc_oset_union(rsrtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll(curr_y), &&(sll(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, sll_reach(*((curr_y->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_reach(curr_y), @_vcc_oset_union(sll_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_max_key(curr_y), @\int_max(*((curr_y->key)), sll_max_key(*((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_min_key(curr_y), @\int_min(*((curr_y->key)), sll_min_key(*((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(srtl(curr_y), &&(&&(srtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, srtl_reach(*((curr_y->next)))))), <=(*((curr_y->key)), sll_min_key(*((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(srtl_reach(curr_y), @_vcc_oset_union(srtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_keys(curr_y), @_vcc_intset_union(sll_keys(*((curr_y->next))), @_vcc_intset_singleton(*((curr_y->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_list_len_next(curr_y), unchecked+(sll_list_len_next(*((curr_y->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(rsrtl(curr_y), &&(&&(rsrtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, rsrtl_reach(*((curr_y->next)))))), >=(*((curr_y->key)), sll_max_key(*((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(rsrtl_reach(curr_y), @_vcc_oset_union(rsrtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll(curr_y), &&(sll(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, sll_reach(*((curr_y->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_reach(curr_y), @_vcc_oset_union(sll_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_max_key(curr_y), @\int_max(*((curr_y->key)), sll_max_key(*((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_min_key(curr_y), @\int_min(*((curr_y->key)), sll_min_key(*((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(srtl(curr_y), &&(&&(srtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, srtl_reach(*((curr_y->next)))))), <=(*((curr_y->key)), sll_min_key(*((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(srtl_reach(curr_y), @_vcc_oset_union(srtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg(y, curr_y), &&(sll_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, sll_lseg_reach(*((y->next)), curr_y)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_reach(y, curr_y), @_vcc_oset_union(sll_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_keys(y, curr_y), @_vcc_intset_union(sll_lseg_keys(*((y->next)), curr_y), @_vcc_intset_singleton(*((y->key)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_len_next(y, curr_y), unchecked+(sll_lseg_len_next(*((y->next)), curr_y), 1))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_max_key(y, curr_y), @\int_max(*((y->key)), sll_lseg_max_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_min_key(y, curr_y), @\int_min(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(srtl_lseg(y, curr_y), &&(&&(srtl_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, srtl_lseg_reach(*((y->next)), curr_y)))), <=(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(srtl_lseg_reach(y, curr_y), @_vcc_oset_union(srtl_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // _math \state _dryad_S6; 
            // _dryad_S6 := @_vcc_current_state(@state); 
            SL#_dryad_S6 := $current_state($s);
            // _math \state stmtexpr2#10; 
            // stmtexpr2#10 := _dryad_S6; 
            stmtexpr2#10 := SL#_dryad_S6;
            // last_z := _vcc_alloc(@_vcc_typeof((struct s_node*)@null)); 
            call L#last_z := $alloc(^s_node);
            assume $full_stop_ext(#tok$3^70.14, $s);
            // assume !(@_vcc_oset_in(last_z, @_vcc_oset_union(_dryad_G0, _dryad_G1))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), $oset_union(SL#_dryad_G0, SL#_dryad_G1));
            // _dryad_G1 := @_vcc_oset_union(_dryad_G0, @_vcc_oset_singleton(last_z)); 
            SL#_dryad_G1 := $oset_union(SL#_dryad_G0, $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // _math \oset stmtexpr3#11; 
            // stmtexpr3#11 := _dryad_G1; 
            stmtexpr3#11 := SL#_dryad_G1;
            // assume ==(glob_reach(), _dryad_G1); 
            assume F#glob_reach() == SL#_dryad_G1;
            // _math \state _dryad_S7; 
            // _dryad_S7 := @_vcc_current_state(@state); 
            SL#_dryad_S7 := $current_state($s);
            // _math \state stmtexpr4#12; 
            // stmtexpr4#12 := _dryad_S7; 
            stmtexpr4#12 := SL#_dryad_S7;
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(sll_keys(curr_y3), @_vcc_intset_union(sll_keys(*((curr_y3->next))), @_vcc_intset_singleton(*((curr_y3->key)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(sll_list_len_next(curr_y3), unchecked+(sll_list_len_next(*((curr_y3->next))), 1))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y3), @_vcc_ptr_neq_null(*((curr_y3->next)))), ==(rsrtl(curr_y3), &&(&&(rsrtl(*((curr_y3->next))), unchecked!(@_vcc_oset_in(curr_y3, rsrtl_reach(*((curr_y3->next)))))), >=(*((curr_y3->key)), sll_max_key(*((curr_y3->next))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_y3, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(rsrtl_reach(curr_y3), @_vcc_oset_union(rsrtl_reach(*((curr_y3->next))), @_vcc_oset_singleton(curr_y3)))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_y3, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(sll(curr_y3), &&(sll(*((curr_y3->next))), unchecked!(@_vcc_oset_in(curr_y3, sll_reach(*((curr_y3->next)))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_y3, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(sll_reach(curr_y3), @_vcc_oset_union(sll_reach(*((curr_y3->next))), @_vcc_oset_singleton(curr_y3)))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_y3, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y3), @_vcc_ptr_neq_null(*((curr_y3->next)))), ==(sll_max_key(curr_y3), @\int_max(*((curr_y3->key)), sll_max_key(*((curr_y3->next)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y3), @_vcc_ptr_neq_null(*((curr_y3->next)))), ==(sll_min_key(curr_y3), @\int_min(*((curr_y3->key)), sll_min_key(*((curr_y3->next)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y3), @_vcc_ptr_neq_null(*((curr_y3->next)))), ==(srtl(curr_y3), &&(&&(srtl(*((curr_y3->next))), unchecked!(@_vcc_oset_in(curr_y3, srtl_reach(*((curr_y3->next)))))), <=(*((curr_y3->key)), sll_min_key(*((curr_y3->next))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_y3, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(srtl_reach(curr_y3), @_vcc_oset_union(srtl_reach(*((curr_y3->next))), @_vcc_oset_singleton(curr_y3)))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_y3, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(sll_keys(curr_x2), @_vcc_intset_union(sll_keys(*((curr_x2->next))), @_vcc_intset_singleton(*((curr_x2->key)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(sll_list_len_next(curr_x2), unchecked+(sll_list_len_next(*((curr_x2->next))), 1))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x2), @_vcc_ptr_neq_null(*((curr_x2->next)))), ==(rsrtl(curr_x2), &&(&&(rsrtl(*((curr_x2->next))), unchecked!(@_vcc_oset_in(curr_x2, rsrtl_reach(*((curr_x2->next)))))), >=(*((curr_x2->key)), sll_max_key(*((curr_x2->next))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_x2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(rsrtl_reach(curr_x2), @_vcc_oset_union(rsrtl_reach(*((curr_x2->next))), @_vcc_oset_singleton(curr_x2)))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_x2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(sll(curr_x2), &&(sll(*((curr_x2->next))), unchecked!(@_vcc_oset_in(curr_x2, sll_reach(*((curr_x2->next)))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_x2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(sll_reach(curr_x2), @_vcc_oset_union(sll_reach(*((curr_x2->next))), @_vcc_oset_singleton(curr_x2)))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_x2, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x2), @_vcc_ptr_neq_null(*((curr_x2->next)))), ==(sll_max_key(curr_x2), @\int_max(*((curr_x2->key)), sll_max_key(*((curr_x2->next)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x2), @_vcc_ptr_neq_null(*((curr_x2->next)))), ==(sll_min_key(curr_x2), @\int_min(*((curr_x2->key)), sll_min_key(*((curr_x2->next)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x2), @_vcc_ptr_neq_null(*((curr_x2->next)))), ==(srtl(curr_x2), &&(&&(srtl(*((curr_x2->next))), unchecked!(@_vcc_oset_in(curr_x2, srtl_reach(*((curr_x2->next)))))), <=(*((curr_x2->key)), sll_min_key(*((curr_x2->next))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_x2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(srtl_reach(curr_x2), @_vcc_oset_union(srtl_reach(*((curr_x2->next))), @_vcc_oset_singleton(curr_x2)))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_x2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_keys(tmp), @_vcc_intset_union(sll_keys(*((tmp->next))), @_vcc_intset_singleton(*((tmp->key)))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_list_len_next(tmp), unchecked+(sll_list_len_next(*((tmp->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(rsrtl(tmp), &&(&&(rsrtl(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, rsrtl_reach(*((tmp->next)))))), >=(*((tmp->key)), sll_max_key(*((tmp->next))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(rsrtl_reach(tmp), @_vcc_oset_union(rsrtl_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll(tmp), &&(sll(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, sll_reach(*((tmp->next)))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_reach(tmp), @_vcc_oset_union(sll_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(sll_max_key(tmp), @\int_max(*((tmp->key)), sll_max_key(*((tmp->next)))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#tmp, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(sll_min_key(tmp), @\int_min(*((tmp->key)), sll_min_key(*((tmp->next)))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#tmp, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(srtl(tmp), &&(&&(srtl(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, srtl_reach(*((tmp->next)))))), <=(*((tmp->key)), sll_min_key(*((tmp->next))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(srtl_reach(tmp), @_vcc_oset_union(srtl_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_keys(curr_x), @_vcc_intset_union(sll_keys(*((curr_x->next))), @_vcc_intset_singleton(*((curr_x->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_list_len_next(curr_x), unchecked+(sll_list_len_next(*((curr_x->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(rsrtl(curr_x), &&(&&(rsrtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, rsrtl_reach(*((curr_x->next)))))), >=(*((curr_x->key)), sll_max_key(*((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(rsrtl_reach(curr_x), @_vcc_oset_union(rsrtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll(curr_x), &&(sll(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, sll_reach(*((curr_x->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_reach(curr_x), @_vcc_oset_union(sll_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_max_key(curr_x), @\int_max(*((curr_x->key)), sll_max_key(*((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_min_key(curr_x), @\int_min(*((curr_x->key)), sll_min_key(*((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(srtl(curr_x), &&(&&(srtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, srtl_reach(*((curr_x->next)))))), <=(*((curr_x->key)), sll_min_key(*((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(srtl_reach(curr_x), @_vcc_oset_union(srtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_keys(curr_y), @_vcc_intset_union(sll_keys(*((curr_y->next))), @_vcc_intset_singleton(*((curr_y->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_list_len_next(curr_y), unchecked+(sll_list_len_next(*((curr_y->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(rsrtl(curr_y), &&(&&(rsrtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, rsrtl_reach(*((curr_y->next)))))), >=(*((curr_y->key)), sll_max_key(*((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(rsrtl_reach(curr_y), @_vcc_oset_union(rsrtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll(curr_y), &&(sll(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, sll_reach(*((curr_y->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_reach(curr_y), @_vcc_oset_union(sll_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_max_key(curr_y), @\int_max(*((curr_y->key)), sll_max_key(*((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_min_key(curr_y), @\int_min(*((curr_y->key)), sll_min_key(*((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(srtl(curr_y), &&(&&(srtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, srtl_reach(*((curr_y->next)))))), <=(*((curr_y->key)), sll_min_key(*((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(srtl_reach(curr_y), @_vcc_oset_union(srtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_keys(z), @_vcc_intset_union(sll_keys(*((z->next))), @_vcc_intset_singleton(*((z->key)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_list_len_next(z), unchecked+(sll_list_len_next(*((z->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(rsrtl(z), &&(&&(rsrtl(*((z->next))), unchecked!(@_vcc_oset_in(z, rsrtl_reach(*((z->next)))))), >=(*((z->key)), sll_max_key(*((z->next))))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(rsrtl_reach(z), @_vcc_oset_union(rsrtl_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll(z), &&(sll(*((z->next))), unchecked!(@_vcc_oset_in(z, sll_reach(*((z->next)))))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_reach(z), @_vcc_oset_union(sll_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_max_key(z), @\int_max(*((z->key)), sll_max_key(*((z->next)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_min_key(z), @\int_min(*((z->key)), sll_min_key(*((z->next)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(srtl(z), &&(&&(srtl(*((z->next))), unchecked!(@_vcc_oset_in(z, srtl_reach(*((z->next)))))), <=(*((z->key)), sll_min_key(*((z->next))))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(srtl_reach(z), @_vcc_oset_union(srtl_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_keys(last_z), @_vcc_intset_union(sll_keys(*((last_z->next))), @_vcc_intset_singleton(*((last_z->key)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#last_z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_list_len_next(last_z), unchecked+(sll_list_len_next(*((last_z->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#last_z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(rsrtl(last_z), &&(&&(rsrtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, rsrtl_reach(*((last_z->next)))))), >=(*((last_z->key)), sll_max_key(*((last_z->next))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(rsrtl_reach(last_z), @_vcc_oset_union(rsrtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll(last_z), &&(sll(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, sll_reach(*((last_z->next)))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_reach(last_z), @_vcc_oset_union(sll_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_max_key(last_z), @\int_max(*((last_z->key)), sll_max_key(*((last_z->next)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_min_key(last_z), @\int_min(*((last_z->key)), sll_min_key(*((last_z->next)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(srtl(last_z), &&(&&(srtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, srtl_reach(*((last_z->next)))))), <=(*((last_z->key)), sll_min_key(*((last_z->next))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(srtl_reach(last_z), @_vcc_oset_union(srtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_keys(y), @_vcc_intset_union(sll_keys(*((y->next))), @_vcc_intset_singleton(*((y->key)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_list_len_next(y), unchecked+(sll_list_len_next(*((y->next))), 1))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(rsrtl(y), &&(&&(rsrtl(*((y->next))), unchecked!(@_vcc_oset_in(y, rsrtl_reach(*((y->next)))))), >=(*((y->key)), sll_max_key(*((y->next))))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(rsrtl_reach(y), @_vcc_oset_union(rsrtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll(y), &&(sll(*((y->next))), unchecked!(@_vcc_oset_in(y, sll_reach(*((y->next)))))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_reach(y), @_vcc_oset_union(sll_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_max_key(y), @\int_max(*((y->key)), sll_max_key(*((y->next)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_min_key(y), @\int_min(*((y->key)), sll_min_key(*((y->next)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(srtl(y), &&(&&(srtl(*((y->next))), unchecked!(@_vcc_oset_in(y, srtl_reach(*((y->next)))))), <=(*((y->key)), sll_min_key(*((y->next))))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(srtl_reach(y), @_vcc_oset_union(srtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_keys(x), @_vcc_intset_union(sll_keys(*((x->next))), @_vcc_intset_singleton(*((x->key)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_list_len_next(x), unchecked+(sll_list_len_next(*((x->next))), 1))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(rsrtl(x), &&(&&(rsrtl(*((x->next))), unchecked!(@_vcc_oset_in(x, rsrtl_reach(*((x->next)))))), >=(*((x->key)), sll_max_key(*((x->next))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(rsrtl_reach(x), @_vcc_oset_union(rsrtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll(x), &&(sll(*((x->next))), unchecked!(@_vcc_oset_in(x, sll_reach(*((x->next)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_reach(x), @_vcc_oset_union(sll_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_max_key(x), @\int_max(*((x->key)), sll_max_key(*((x->next)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_min_key(x), @\int_min(*((x->key)), sll_min_key(*((x->next)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(srtl(x), &&(&&(srtl(*((x->next))), unchecked!(@_vcc_oset_in(x, srtl_reach(*((x->next)))))), <=(*((x->key)), sll_min_key(*((x->next))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(srtl_reach(x), @_vcc_oset_union(srtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg(y, curr_y), &&(sll_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, sll_lseg_reach(*((y->next)), curr_y)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_reach(y, curr_y), @_vcc_oset_union(sll_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_keys(y, curr_y), @_vcc_intset_union(sll_lseg_keys(*((y->next)), curr_y), @_vcc_intset_singleton(*((y->key)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_len_next(y, curr_y), unchecked+(sll_lseg_len_next(*((y->next)), curr_y), 1))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_max_key(y, curr_y), @\int_max(*((y->key)), sll_lseg_max_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_min_key(y, curr_y), @\int_min(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(srtl_lseg(y, curr_y), &&(&&(srtl_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, srtl_lseg_reach(*((y->next)), curr_y)))), <=(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(srtl_lseg_reach(y, curr_y), @_vcc_oset_union(srtl_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), ==(sll_lseg(z, last_z), &&(sll_lseg(*((z->next)), last_z), unchecked!(@_vcc_oset_in(z, sll_lseg_reach(*((z->next)), last_z)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), ==(sll_lseg_reach(z, last_z), @_vcc_oset_union(sll_lseg_reach(*((z->next)), last_z), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), ==(sll_lseg_keys(z, last_z), @_vcc_intset_union(sll_lseg_keys(*((z->next)), last_z), @_vcc_intset_singleton(*((z->key)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), ==(sll_lseg_len_next(z, last_z), unchecked+(sll_lseg_len_next(*((z->next)), last_z), 1))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), @_vcc_ptr_neq_pure(*((z->next)), last_z)), ==(sll_lseg_max_key(z, last_z), @\int_max(*((z->key)), sll_lseg_max_key(*((z->next)), last_z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), @_vcc_ptr_neq_pure(*((z->next)), last_z)), ==(sll_lseg_min_key(z, last_z), @\int_min(*((z->key)), sll_lseg_min_key(*((z->next)), last_z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), @_vcc_ptr_neq_pure(*((z->next)), last_z)), ==(srtl_lseg(z, last_z), &&(&&(srtl_lseg(*((z->next)), last_z), unchecked!(@_vcc_oset_in(z, srtl_lseg_reach(*((z->next)), last_z)))), <=(*((z->key)), sll_lseg_min_key(*((z->next)), last_z))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), ==(srtl_lseg_reach(z, last_z), @_vcc_oset_union(srtl_lseg_reach(*((z->next)), last_z), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg(x, curr_x), &&(sll_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, sll_lseg_reach(*((x->next)), curr_x)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_reach(x, curr_x), @_vcc_oset_union(sll_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_keys(x, curr_x), @_vcc_intset_union(sll_lseg_keys(*((x->next)), curr_x), @_vcc_intset_singleton(*((x->key)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_len_next(x, curr_x), unchecked+(sll_lseg_len_next(*((x->next)), curr_x), 1))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_max_key(x, curr_x), @\int_max(*((x->key)), sll_lseg_max_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_min_key(x, curr_x), @\int_min(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(srtl_lseg(x, curr_x), &&(&&(srtl_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, srtl_lseg_reach(*((x->next)), curr_x)))), <=(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(srtl_lseg_reach(x, curr_x), @_vcc_oset_union(srtl_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), ==(sll_lseg(z, tmp), &&(sll_lseg(*((z->next)), tmp), unchecked!(@_vcc_oset_in(z, sll_lseg_reach(*((z->next)), tmp)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), ==(sll_lseg_reach(z, tmp), @_vcc_oset_union(sll_lseg_reach(*((z->next)), tmp), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), ==(sll_lseg_keys(z, tmp), @_vcc_intset_union(sll_lseg_keys(*((z->next)), tmp), @_vcc_intset_singleton(*((z->key)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), ==(sll_lseg_len_next(z, tmp), unchecked+(sll_lseg_len_next(*((z->next)), tmp), 1))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), @_vcc_ptr_neq_pure(*((z->next)), tmp)), ==(sll_lseg_max_key(z, tmp), @\int_max(*((z->key)), sll_lseg_max_key(*((z->next)), tmp)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), @_vcc_ptr_neq_pure(*((z->next)), tmp)), ==(sll_lseg_min_key(z, tmp), @\int_min(*((z->key)), sll_lseg_min_key(*((z->next)), tmp)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), @_vcc_ptr_neq_pure(*((z->next)), tmp)), ==(srtl_lseg(z, tmp), &&(&&(srtl_lseg(*((z->next)), tmp), unchecked!(@_vcc_oset_in(z, srtl_lseg_reach(*((z->next)), tmp)))), <=(*((z->key)), sll_lseg_min_key(*((z->next)), tmp))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), ==(srtl_lseg_reach(z, tmp), @_vcc_oset_union(srtl_lseg_reach(*((z->next)), tmp), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg(x, curr_x), &&(sll_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, sll_lseg_reach(*((x->next)), curr_x)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_reach(x, curr_x), @_vcc_oset_union(sll_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_keys(x, curr_x), @_vcc_intset_union(sll_lseg_keys(*((x->next)), curr_x), @_vcc_intset_singleton(*((x->key)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_len_next(x, curr_x), unchecked+(sll_lseg_len_next(*((x->next)), curr_x), 1))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_max_key(x, curr_x), @\int_max(*((x->key)), sll_lseg_max_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_min_key(x, curr_x), @\int_min(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(srtl_lseg(x, curr_x), &&(&&(srtl_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, srtl_lseg_reach(*((x->next)), curr_x)))), <=(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(srtl_lseg_reach(x, curr_x), @_vcc_oset_union(srtl_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg(y, curr_y), &&(sll_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, sll_lseg_reach(*((y->next)), curr_y)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_reach(y, curr_y), @_vcc_oset_union(sll_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_keys(y, curr_y), @_vcc_intset_union(sll_lseg_keys(*((y->next)), curr_y), @_vcc_intset_singleton(*((y->key)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_len_next(y, curr_y), unchecked+(sll_lseg_len_next(*((y->next)), curr_y), 1))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_max_key(y, curr_y), @\int_max(*((y->key)), sll_lseg_max_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_min_key(y, curr_y), @\int_min(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(srtl_lseg(y, curr_y), &&(&&(srtl_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, srtl_lseg_reach(*((y->next)), curr_y)))), <=(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(srtl_lseg_reach(y, curr_y), @_vcc_oset_union(srtl_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_y3)))), ==(old(_dryad_S6, sll_keys(curr_y3)), old(_dryad_S7, sll_keys(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_y3)))), ==(old(_dryad_S6, sll_list_len_next(curr_y3)), old(_dryad_S7, sll_list_len_next(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, rsrtl_reach(curr_y3)))), ==(old(_dryad_S6, rsrtl(curr_y3)), old(_dryad_S7, rsrtl(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, rsrtl_reach(curr_y3)))), ==(old(_dryad_S6, rsrtl_reach(curr_y3)), old(_dryad_S7, rsrtl_reach(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_y3)))), ==(old(_dryad_S6, sll(curr_y3)), old(_dryad_S7, sll(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_y3)))), ==(old(_dryad_S6, sll_reach(curr_y3)), old(_dryad_S7, sll_reach(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_y3)))), ==(old(_dryad_S6, sll_max_key(curr_y3)), old(_dryad_S7, sll_max_key(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_y3)))), ==(old(_dryad_S6, sll_min_key(curr_y3)), old(_dryad_S7, sll_min_key(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_reach(curr_y3)))), ==(old(_dryad_S6, srtl(curr_y3)), old(_dryad_S7, srtl(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_reach(curr_y3)))), ==(old(_dryad_S6, srtl_reach(curr_y3)), old(_dryad_S7, srtl_reach(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_x2)))), ==(old(_dryad_S6, sll_keys(curr_x2)), old(_dryad_S7, sll_keys(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_x2)))), ==(old(_dryad_S6, sll_list_len_next(curr_x2)), old(_dryad_S7, sll_list_len_next(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, rsrtl_reach(curr_x2)))), ==(old(_dryad_S6, rsrtl(curr_x2)), old(_dryad_S7, rsrtl(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, rsrtl_reach(curr_x2)))), ==(old(_dryad_S6, rsrtl_reach(curr_x2)), old(_dryad_S7, rsrtl_reach(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_x2)))), ==(old(_dryad_S6, sll(curr_x2)), old(_dryad_S7, sll(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_x2)))), ==(old(_dryad_S6, sll_reach(curr_x2)), old(_dryad_S7, sll_reach(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_x2)))), ==(old(_dryad_S6, sll_max_key(curr_x2)), old(_dryad_S7, sll_max_key(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_x2)))), ==(old(_dryad_S6, sll_min_key(curr_x2)), old(_dryad_S7, sll_min_key(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_reach(curr_x2)))), ==(old(_dryad_S6, srtl(curr_x2)), old(_dryad_S7, srtl(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_reach(curr_x2)))), ==(old(_dryad_S6, srtl_reach(curr_x2)), old(_dryad_S7, srtl_reach(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(tmp)))), ==(old(_dryad_S6, sll_keys(tmp)), old(_dryad_S7, sll_keys(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(tmp)))), ==(old(_dryad_S6, sll_list_len_next(tmp)), old(_dryad_S7, sll_list_len_next(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, rsrtl_reach(tmp)))), ==(old(_dryad_S6, rsrtl(tmp)), old(_dryad_S7, rsrtl(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, rsrtl_reach(tmp)))), ==(old(_dryad_S6, rsrtl_reach(tmp)), old(_dryad_S7, rsrtl_reach(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(tmp)))), ==(old(_dryad_S6, sll(tmp)), old(_dryad_S7, sll(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(tmp)))), ==(old(_dryad_S6, sll_reach(tmp)), old(_dryad_S7, sll_reach(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(tmp)))), ==(old(_dryad_S6, sll_max_key(tmp)), old(_dryad_S7, sll_max_key(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(tmp)))), ==(old(_dryad_S6, sll_min_key(tmp)), old(_dryad_S7, sll_min_key(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_reach(tmp)))), ==(old(_dryad_S6, srtl(tmp)), old(_dryad_S7, srtl(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_reach(tmp)))), ==(old(_dryad_S6, srtl_reach(tmp)), old(_dryad_S7, srtl_reach(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_x)))), ==(old(_dryad_S6, sll_keys(curr_x)), old(_dryad_S7, sll_keys(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_x)))), ==(old(_dryad_S6, sll_list_len_next(curr_x)), old(_dryad_S7, sll_list_len_next(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, rsrtl_reach(curr_x)))), ==(old(_dryad_S6, rsrtl(curr_x)), old(_dryad_S7, rsrtl(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, rsrtl_reach(curr_x)))), ==(old(_dryad_S6, rsrtl_reach(curr_x)), old(_dryad_S7, rsrtl_reach(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_x)))), ==(old(_dryad_S6, sll(curr_x)), old(_dryad_S7, sll(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_x)))), ==(old(_dryad_S6, sll_reach(curr_x)), old(_dryad_S7, sll_reach(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_x)))), ==(old(_dryad_S6, sll_max_key(curr_x)), old(_dryad_S7, sll_max_key(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_x)))), ==(old(_dryad_S6, sll_min_key(curr_x)), old(_dryad_S7, sll_min_key(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_reach(curr_x)))), ==(old(_dryad_S6, srtl(curr_x)), old(_dryad_S7, srtl(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_reach(curr_x)))), ==(old(_dryad_S6, srtl_reach(curr_x)), old(_dryad_S7, srtl_reach(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_y)))), ==(old(_dryad_S6, sll_keys(curr_y)), old(_dryad_S7, sll_keys(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_y)))), ==(old(_dryad_S6, sll_list_len_next(curr_y)), old(_dryad_S7, sll_list_len_next(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, rsrtl_reach(curr_y)))), ==(old(_dryad_S6, rsrtl(curr_y)), old(_dryad_S7, rsrtl(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, rsrtl_reach(curr_y)))), ==(old(_dryad_S6, rsrtl_reach(curr_y)), old(_dryad_S7, rsrtl_reach(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_y)))), ==(old(_dryad_S6, sll(curr_y)), old(_dryad_S7, sll(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_y)))), ==(old(_dryad_S6, sll_reach(curr_y)), old(_dryad_S7, sll_reach(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_y)))), ==(old(_dryad_S6, sll_max_key(curr_y)), old(_dryad_S7, sll_max_key(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_y)))), ==(old(_dryad_S6, sll_min_key(curr_y)), old(_dryad_S7, sll_min_key(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_reach(curr_y)))), ==(old(_dryad_S6, srtl(curr_y)), old(_dryad_S7, srtl(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_reach(curr_y)))), ==(old(_dryad_S6, srtl_reach(curr_y)), old(_dryad_S7, srtl_reach(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(z)))), ==(old(_dryad_S6, sll_keys(z)), old(_dryad_S7, sll_keys(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(z)))), ==(old(_dryad_S6, sll_list_len_next(z)), old(_dryad_S7, sll_list_len_next(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, rsrtl_reach(z)))), ==(old(_dryad_S6, rsrtl(z)), old(_dryad_S7, rsrtl(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, rsrtl_reach(z)))), ==(old(_dryad_S6, rsrtl_reach(z)), old(_dryad_S7, rsrtl_reach(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(z)))), ==(old(_dryad_S6, sll(z)), old(_dryad_S7, sll(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(z)))), ==(old(_dryad_S6, sll_reach(z)), old(_dryad_S7, sll_reach(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(z)))), ==(old(_dryad_S6, sll_max_key(z)), old(_dryad_S7, sll_max_key(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(z)))), ==(old(_dryad_S6, sll_min_key(z)), old(_dryad_S7, sll_min_key(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_reach(z)))), ==(old(_dryad_S6, srtl(z)), old(_dryad_S7, srtl(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_reach(z)))), ==(old(_dryad_S6, srtl_reach(z)), old(_dryad_S7, srtl_reach(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(y)))), ==(old(_dryad_S6, sll_keys(y)), old(_dryad_S7, sll_keys(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(y)))), ==(old(_dryad_S6, sll_list_len_next(y)), old(_dryad_S7, sll_list_len_next(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, rsrtl_reach(y)))), ==(old(_dryad_S6, rsrtl(y)), old(_dryad_S7, rsrtl(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, rsrtl_reach(y)))), ==(old(_dryad_S6, rsrtl_reach(y)), old(_dryad_S7, rsrtl_reach(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(y)))), ==(old(_dryad_S6, sll(y)), old(_dryad_S7, sll(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(y)))), ==(old(_dryad_S6, sll_reach(y)), old(_dryad_S7, sll_reach(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(y)))), ==(old(_dryad_S6, sll_max_key(y)), old(_dryad_S7, sll_max_key(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(y)))), ==(old(_dryad_S6, sll_min_key(y)), old(_dryad_S7, sll_min_key(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_reach(y)))), ==(old(_dryad_S6, srtl(y)), old(_dryad_S7, srtl(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_reach(y)))), ==(old(_dryad_S6, srtl_reach(y)), old(_dryad_S7, srtl_reach(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(x)))), ==(old(_dryad_S6, sll_keys(x)), old(_dryad_S7, sll_keys(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(x)))), ==(old(_dryad_S6, sll_list_len_next(x)), old(_dryad_S7, sll_list_len_next(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, rsrtl_reach(x)))), ==(old(_dryad_S6, rsrtl(x)), old(_dryad_S7, rsrtl(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, rsrtl_reach(x)))), ==(old(_dryad_S6, rsrtl_reach(x)), old(_dryad_S7, rsrtl_reach(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(x)))), ==(old(_dryad_S6, sll(x)), old(_dryad_S7, sll(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(x)))), ==(old(_dryad_S6, sll_reach(x)), old(_dryad_S7, sll_reach(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(x)))), ==(old(_dryad_S6, sll_max_key(x)), old(_dryad_S7, sll_max_key(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(x)))), ==(old(_dryad_S6, sll_min_key(x)), old(_dryad_S7, sll_min_key(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_reach(x)))), ==(old(_dryad_S6, srtl(x)), old(_dryad_S7, srtl(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_reach(x)))), ==(old(_dryad_S6, srtl_reach(x)), old(_dryad_S7, srtl_reach(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S6, sll_lseg(y, curr_y)), old(_dryad_S7, sll_lseg(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S6, sll_lseg_reach(y, curr_y)), old(_dryad_S7, sll_lseg_reach(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S6, sll_lseg_keys(y, curr_y)), old(_dryad_S7, sll_lseg_keys(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S6, sll_lseg_len_next(y, curr_y)), old(_dryad_S7, sll_lseg_len_next(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S6, sll_lseg_max_key(y, curr_y)), old(_dryad_S7, sll_lseg_max_key(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S6, sll_lseg_min_key(y, curr_y)), old(_dryad_S7, sll_lseg_min_key(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_lseg_reach(y, curr_y)))), ==(old(_dryad_S6, srtl_lseg(y, curr_y)), old(_dryad_S7, srtl_lseg(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_lseg(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_lseg_reach(y, curr_y)))), ==(old(_dryad_S6, srtl_lseg_reach(y, curr_y)), old(_dryad_S7, srtl_lseg_reach(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S6, sll_lseg(z, last_z)), old(_dryad_S7, sll_lseg(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S6, sll_lseg_reach(z, last_z)), old(_dryad_S7, sll_lseg_reach(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S6, sll_lseg_keys(z, last_z)), old(_dryad_S7, sll_lseg_keys(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S6, sll_lseg_len_next(z, last_z)), old(_dryad_S7, sll_lseg_len_next(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S6, sll_lseg_max_key(z, last_z)), old(_dryad_S7, sll_lseg_max_key(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S6, sll_lseg_min_key(z, last_z)), old(_dryad_S7, sll_lseg_min_key(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_lseg_reach(z, last_z)))), ==(old(_dryad_S6, srtl_lseg(z, last_z)), old(_dryad_S7, srtl_lseg(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl_lseg(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_lseg_reach(z, last_z)))), ==(old(_dryad_S6, srtl_lseg_reach(z, last_z)), old(_dryad_S7, srtl_lseg_reach(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S6, sll_lseg(x, curr_x)), old(_dryad_S7, sll_lseg(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S6, sll_lseg_reach(x, curr_x)), old(_dryad_S7, sll_lseg_reach(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S6, sll_lseg_keys(x, curr_x)), old(_dryad_S7, sll_lseg_keys(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S6, sll_lseg_len_next(x, curr_x)), old(_dryad_S7, sll_lseg_len_next(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S6, sll_lseg_max_key(x, curr_x)), old(_dryad_S7, sll_lseg_max_key(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S6, sll_lseg_min_key(x, curr_x)), old(_dryad_S7, sll_lseg_min_key(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_lseg_reach(x, curr_x)))), ==(old(_dryad_S6, srtl_lseg(x, curr_x)), old(_dryad_S7, srtl_lseg(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_lseg(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_lseg_reach(x, curr_x)))), ==(old(_dryad_S6, srtl_lseg_reach(x, curr_x)), old(_dryad_S7, srtl_lseg_reach(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S6, sll_lseg(z, tmp)), old(_dryad_S7, sll_lseg(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S6, sll_lseg_reach(z, tmp)), old(_dryad_S7, sll_lseg_reach(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S6, sll_lseg_keys(z, tmp)), old(_dryad_S7, sll_lseg_keys(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S6, sll_lseg_len_next(z, tmp)), old(_dryad_S7, sll_lseg_len_next(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S6, sll_lseg_max_key(z, tmp)), old(_dryad_S7, sll_lseg_max_key(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S6, sll_lseg_min_key(z, tmp)), old(_dryad_S7, sll_lseg_min_key(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_lseg_reach(z, tmp)))), ==(old(_dryad_S6, srtl_lseg(z, tmp)), old(_dryad_S7, srtl_lseg(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl_lseg(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_lseg_reach(z, tmp)))), ==(old(_dryad_S6, srtl_lseg_reach(z, tmp)), old(_dryad_S7, srtl_lseg_reach(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S6, sll_lseg(x, curr_x)), old(_dryad_S7, sll_lseg(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S6, sll_lseg_reach(x, curr_x)), old(_dryad_S7, sll_lseg_reach(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S6, sll_lseg_keys(x, curr_x)), old(_dryad_S7, sll_lseg_keys(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S6, sll_lseg_len_next(x, curr_x)), old(_dryad_S7, sll_lseg_len_next(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S6, sll_lseg_max_key(x, curr_x)), old(_dryad_S7, sll_lseg_max_key(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S6, sll_lseg_min_key(x, curr_x)), old(_dryad_S7, sll_lseg_min_key(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_lseg_reach(x, curr_x)))), ==(old(_dryad_S6, srtl_lseg(x, curr_x)), old(_dryad_S7, srtl_lseg(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_lseg(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_lseg_reach(x, curr_x)))), ==(old(_dryad_S6, srtl_lseg_reach(x, curr_x)), old(_dryad_S7, srtl_lseg_reach(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S6, sll_lseg(y, curr_y)), old(_dryad_S7, sll_lseg(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S6, sll_lseg_reach(y, curr_y)), old(_dryad_S7, sll_lseg_reach(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S6, sll_lseg_keys(y, curr_y)), old(_dryad_S7, sll_lseg_keys(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S6, sll_lseg_len_next(y, curr_y)), old(_dryad_S7, sll_lseg_len_next(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S6, sll_lseg_max_key(y, curr_y)), old(_dryad_S7, sll_lseg_max_key(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S6, sll_lseg_min_key(y, curr_y)), old(_dryad_S7, sll_lseg_min_key(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_lseg_reach(y, curr_y)))), ==(old(_dryad_S6, srtl_lseg(y, curr_y)), old(_dryad_S7, srtl_lseg(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_lseg(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_lseg_reach(y, curr_y)))), ==(old(_dryad_S6, srtl_lseg_reach(y, curr_y)), old(_dryad_S7, srtl_lseg_reach(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume @_vcc_ptr_neq_null(last_z); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node));
            // assume unchecked!(@_vcc_oset_in(last_z, ALL_REACH)); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), SL#ALL_REACH);
            // ALL_REACH := @_vcc_oset_union(ALL_REACH, @_vcc_oset_singleton(last_z)); 
            SL#ALL_REACH := $oset_union(SL#ALL_REACH, $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // _math \state _dryad_S8; 
            // _dryad_S8 := @_vcc_current_state(@state); 
            SL#_dryad_S8 := $current_state($s);
            // _math \state stmtexpr5#13; 
            // stmtexpr5#13 := _dryad_S8; 
            stmtexpr5#13 := SL#_dryad_S8;
            // assert @prim_writes_check((last_z->next)); 
            assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#last_z, ^s_node), s_node.next));
            // *(last_z->next) := (struct s_node*)@null; 
            call $write_int(s_node.next, $phys_ptr_cast(L#last_z, ^s_node), $ptr_to_int($phys_ptr_cast($null, ^s_node)));
            assume $full_stop_ext(#tok$3^75.5, $s);
            // _math \state _dryad_S9; 
            // _dryad_S9 := @_vcc_current_state(@state); 
            SL#_dryad_S9 := $current_state($s);
            // _math \state stmtexpr6#14; 
            // stmtexpr6#14 := _dryad_S9; 
            stmtexpr6#14 := SL#_dryad_S9;
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_y3)))), ==(old(_dryad_S8, sll_keys(curr_y3)), old(_dryad_S9, sll_keys(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_keys(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_keys(SL#_dryad_S9, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_y3)))), ==(old(_dryad_S8, sll_list_len_next(curr_y3)), old(_dryad_S9, sll_list_len_next(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_list_len_next(SL#_dryad_S9, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, rsrtl_reach(curr_y3)))), ==(old(_dryad_S8, rsrtl(curr_y3)), old(_dryad_S9, rsrtl(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#rsrtl(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#rsrtl(SL#_dryad_S9, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, rsrtl_reach(curr_y3)))), ==(old(_dryad_S8, rsrtl_reach(curr_y3)), old(_dryad_S9, rsrtl_reach(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#rsrtl_reach(SL#_dryad_S9, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_y3)))), ==(old(_dryad_S8, sll(curr_y3)), old(_dryad_S9, sll(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll(SL#_dryad_S9, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_y3)))), ==(old(_dryad_S8, sll_reach(curr_y3)), old(_dryad_S9, sll_reach(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_reach(SL#_dryad_S9, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_y3)))), ==(old(_dryad_S8, sll_max_key(curr_y3)), old(_dryad_S9, sll_max_key(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_max_key(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_max_key(SL#_dryad_S9, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_y3)))), ==(old(_dryad_S8, sll_min_key(curr_y3)), old(_dryad_S9, sll_min_key(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_min_key(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_min_key(SL#_dryad_S9, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_reach(curr_y3)))), ==(old(_dryad_S8, srtl(curr_y3)), old(_dryad_S9, srtl(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#srtl(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#srtl(SL#_dryad_S9, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_reach(curr_y3)))), ==(old(_dryad_S8, srtl_reach(curr_y3)), old(_dryad_S9, srtl_reach(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#srtl_reach(SL#_dryad_S9, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_x2)))), ==(old(_dryad_S8, sll_keys(curr_x2)), old(_dryad_S9, sll_keys(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_keys(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_keys(SL#_dryad_S9, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_x2)))), ==(old(_dryad_S8, sll_list_len_next(curr_x2)), old(_dryad_S9, sll_list_len_next(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_list_len_next(SL#_dryad_S9, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, rsrtl_reach(curr_x2)))), ==(old(_dryad_S8, rsrtl(curr_x2)), old(_dryad_S9, rsrtl(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#rsrtl(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#rsrtl(SL#_dryad_S9, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, rsrtl_reach(curr_x2)))), ==(old(_dryad_S8, rsrtl_reach(curr_x2)), old(_dryad_S9, rsrtl_reach(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#rsrtl_reach(SL#_dryad_S9, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_x2)))), ==(old(_dryad_S8, sll(curr_x2)), old(_dryad_S9, sll(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll(SL#_dryad_S9, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_x2)))), ==(old(_dryad_S8, sll_reach(curr_x2)), old(_dryad_S9, sll_reach(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_reach(SL#_dryad_S9, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_x2)))), ==(old(_dryad_S8, sll_max_key(curr_x2)), old(_dryad_S9, sll_max_key(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_max_key(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_max_key(SL#_dryad_S9, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_x2)))), ==(old(_dryad_S8, sll_min_key(curr_x2)), old(_dryad_S9, sll_min_key(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_min_key(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_min_key(SL#_dryad_S9, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_reach(curr_x2)))), ==(old(_dryad_S8, srtl(curr_x2)), old(_dryad_S9, srtl(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#srtl(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#srtl(SL#_dryad_S9, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_reach(curr_x2)))), ==(old(_dryad_S8, srtl_reach(curr_x2)), old(_dryad_S9, srtl_reach(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#srtl_reach(SL#_dryad_S9, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(tmp)))), ==(old(_dryad_S8, sll_keys(tmp)), old(_dryad_S9, sll_keys(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_keys(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_keys(SL#_dryad_S9, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(tmp)))), ==(old(_dryad_S8, sll_list_len_next(tmp)), old(_dryad_S9, sll_list_len_next(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_list_len_next(SL#_dryad_S9, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, rsrtl_reach(tmp)))), ==(old(_dryad_S8, rsrtl(tmp)), old(_dryad_S9, rsrtl(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#rsrtl(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node)) == F#rsrtl(SL#_dryad_S9, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, rsrtl_reach(tmp)))), ==(old(_dryad_S8, rsrtl_reach(tmp)), old(_dryad_S9, rsrtl_reach(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node)) == F#rsrtl_reach(SL#_dryad_S9, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(tmp)))), ==(old(_dryad_S8, sll(tmp)), old(_dryad_S9, sll(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll(SL#_dryad_S9, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(tmp)))), ==(old(_dryad_S8, sll_reach(tmp)), old(_dryad_S9, sll_reach(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_reach(SL#_dryad_S9, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(tmp)))), ==(old(_dryad_S8, sll_max_key(tmp)), old(_dryad_S9, sll_max_key(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_max_key(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_max_key(SL#_dryad_S9, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(tmp)))), ==(old(_dryad_S8, sll_min_key(tmp)), old(_dryad_S9, sll_min_key(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_min_key(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_min_key(SL#_dryad_S9, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_reach(tmp)))), ==(old(_dryad_S8, srtl(tmp)), old(_dryad_S9, srtl(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl(SL#_dryad_S9, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_reach(tmp)))), ==(old(_dryad_S8, srtl_reach(tmp)), old(_dryad_S9, srtl_reach(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl_reach(SL#_dryad_S9, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_x)))), ==(old(_dryad_S8, sll_keys(curr_x)), old(_dryad_S9, sll_keys(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_keys(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_keys(SL#_dryad_S9, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_x)))), ==(old(_dryad_S8, sll_list_len_next(curr_x)), old(_dryad_S9, sll_list_len_next(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S9, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, rsrtl_reach(curr_x)))), ==(old(_dryad_S8, rsrtl(curr_x)), old(_dryad_S9, rsrtl(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#rsrtl(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node)) == F#rsrtl(SL#_dryad_S9, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, rsrtl_reach(curr_x)))), ==(old(_dryad_S8, rsrtl_reach(curr_x)), old(_dryad_S9, rsrtl_reach(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S9, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_x)))), ==(old(_dryad_S8, sll(curr_x)), old(_dryad_S9, sll(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll(SL#_dryad_S9, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_x)))), ==(old(_dryad_S8, sll_reach(curr_x)), old(_dryad_S9, sll_reach(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_reach(SL#_dryad_S9, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_x)))), ==(old(_dryad_S8, sll_max_key(curr_x)), old(_dryad_S9, sll_max_key(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_max_key(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_max_key(SL#_dryad_S9, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_x)))), ==(old(_dryad_S8, sll_min_key(curr_x)), old(_dryad_S9, sll_min_key(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_min_key(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_min_key(SL#_dryad_S9, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_reach(curr_x)))), ==(old(_dryad_S8, srtl(curr_x)), old(_dryad_S9, srtl(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl(SL#_dryad_S9, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_reach(curr_x)))), ==(old(_dryad_S8, srtl_reach(curr_x)), old(_dryad_S9, srtl_reach(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_reach(SL#_dryad_S9, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_y)))), ==(old(_dryad_S8, sll_keys(curr_y)), old(_dryad_S9, sll_keys(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_keys(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_keys(SL#_dryad_S9, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_y)))), ==(old(_dryad_S8, sll_list_len_next(curr_y)), old(_dryad_S9, sll_list_len_next(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S9, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, rsrtl_reach(curr_y)))), ==(old(_dryad_S8, rsrtl(curr_y)), old(_dryad_S9, rsrtl(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#rsrtl(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node)) == F#rsrtl(SL#_dryad_S9, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, rsrtl_reach(curr_y)))), ==(old(_dryad_S8, rsrtl_reach(curr_y)), old(_dryad_S9, rsrtl_reach(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S9, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_y)))), ==(old(_dryad_S8, sll(curr_y)), old(_dryad_S9, sll(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll(SL#_dryad_S9, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_y)))), ==(old(_dryad_S8, sll_reach(curr_y)), old(_dryad_S9, sll_reach(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_reach(SL#_dryad_S9, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_y)))), ==(old(_dryad_S8, sll_max_key(curr_y)), old(_dryad_S9, sll_max_key(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_max_key(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_max_key(SL#_dryad_S9, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_y)))), ==(old(_dryad_S8, sll_min_key(curr_y)), old(_dryad_S9, sll_min_key(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_min_key(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_min_key(SL#_dryad_S9, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_reach(curr_y)))), ==(old(_dryad_S8, srtl(curr_y)), old(_dryad_S9, srtl(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl(SL#_dryad_S9, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_reach(curr_y)))), ==(old(_dryad_S8, srtl_reach(curr_y)), old(_dryad_S9, srtl_reach(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_reach(SL#_dryad_S9, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(z)))), ==(old(_dryad_S8, sll_keys(z)), old(_dryad_S9, sll_keys(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_keys(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node)) == F#sll_keys(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(z)))), ==(old(_dryad_S8, sll_list_len_next(z)), old(_dryad_S9, sll_list_len_next(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node)) == F#sll_list_len_next(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, rsrtl_reach(z)))), ==(old(_dryad_S8, rsrtl(z)), old(_dryad_S9, rsrtl(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node))) ==> F#rsrtl(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node)) == F#rsrtl(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, rsrtl_reach(z)))), ==(old(_dryad_S8, rsrtl_reach(z)), old(_dryad_S9, rsrtl_reach(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node)) == F#rsrtl_reach(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(z)))), ==(old(_dryad_S8, sll(z)), old(_dryad_S9, sll(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node)) == F#sll(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(z)))), ==(old(_dryad_S8, sll_reach(z)), old(_dryad_S9, sll_reach(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node)) == F#sll_reach(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(z)))), ==(old(_dryad_S8, sll_max_key(z)), old(_dryad_S9, sll_max_key(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_max_key(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node)) == F#sll_max_key(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(z)))), ==(old(_dryad_S8, sll_min_key(z)), old(_dryad_S9, sll_min_key(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_min_key(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node)) == F#sll_min_key(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_reach(z)))), ==(old(_dryad_S8, srtl(z)), old(_dryad_S9, srtl(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node))) ==> F#srtl(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node)) == F#srtl(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_reach(z)))), ==(old(_dryad_S8, srtl_reach(z)), old(_dryad_S9, srtl_reach(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node))) ==> F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node)) == F#srtl_reach(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(y)))), ==(old(_dryad_S8, sll_keys(y)), old(_dryad_S9, sll_keys(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_keys(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node)) == F#sll_keys(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(y)))), ==(old(_dryad_S8, sll_list_len_next(y)), old(_dryad_S9, sll_list_len_next(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, rsrtl_reach(y)))), ==(old(_dryad_S8, rsrtl(y)), old(_dryad_S9, rsrtl(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node))) ==> F#rsrtl(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node)) == F#rsrtl(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, rsrtl_reach(y)))), ==(old(_dryad_S8, rsrtl_reach(y)), old(_dryad_S9, rsrtl_reach(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(y)))), ==(old(_dryad_S8, sll(y)), old(_dryad_S9, sll(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node)) == F#sll(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(y)))), ==(old(_dryad_S8, sll_reach(y)), old(_dryad_S9, sll_reach(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node)) == F#sll_reach(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(y)))), ==(old(_dryad_S8, sll_max_key(y)), old(_dryad_S9, sll_max_key(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_max_key(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node)) == F#sll_max_key(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(y)))), ==(old(_dryad_S8, sll_min_key(y)), old(_dryad_S9, sll_min_key(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_min_key(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node)) == F#sll_min_key(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_reach(y)))), ==(old(_dryad_S8, srtl(y)), old(_dryad_S9, srtl(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node))) ==> F#srtl(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node)) == F#srtl(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_reach(y)))), ==(old(_dryad_S8, srtl_reach(y)), old(_dryad_S9, srtl_reach(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node))) ==> F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node)) == F#srtl_reach(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(x)))), ==(old(_dryad_S8, sll_keys(x)), old(_dryad_S9, sll_keys(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_keys(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node)) == F#sll_keys(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(x)))), ==(old(_dryad_S8, sll_list_len_next(x)), old(_dryad_S9, sll_list_len_next(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, rsrtl_reach(x)))), ==(old(_dryad_S8, rsrtl(x)), old(_dryad_S9, rsrtl(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node))) ==> F#rsrtl(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node)) == F#rsrtl(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, rsrtl_reach(x)))), ==(old(_dryad_S8, rsrtl_reach(x)), old(_dryad_S9, rsrtl_reach(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(x)))), ==(old(_dryad_S8, sll(x)), old(_dryad_S9, sll(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node)) == F#sll(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(x)))), ==(old(_dryad_S8, sll_reach(x)), old(_dryad_S9, sll_reach(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node)) == F#sll_reach(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(x)))), ==(old(_dryad_S8, sll_max_key(x)), old(_dryad_S9, sll_max_key(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_max_key(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node)) == F#sll_max_key(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(x)))), ==(old(_dryad_S8, sll_min_key(x)), old(_dryad_S9, sll_min_key(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_min_key(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node)) == F#sll_min_key(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_reach(x)))), ==(old(_dryad_S8, srtl(x)), old(_dryad_S9, srtl(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node))) ==> F#srtl(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node)) == F#srtl(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_reach(x)))), ==(old(_dryad_S8, srtl_reach(x)), old(_dryad_S9, srtl_reach(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node))) ==> F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node)) == F#srtl_reach(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S8, sll_lseg(y, curr_y)), old(_dryad_S9, sll_lseg(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S8, sll_lseg_reach(y, curr_y)), old(_dryad_S9, sll_lseg_reach(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S8, sll_lseg_keys(y, curr_y)), old(_dryad_S9, sll_lseg_keys(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S8, sll_lseg_len_next(y, curr_y)), old(_dryad_S9, sll_lseg_len_next(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S8, sll_lseg_max_key(y, curr_y)), old(_dryad_S9, sll_lseg_max_key(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S8, sll_lseg_min_key(y, curr_y)), old(_dryad_S9, sll_lseg_min_key(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_lseg_reach(y, curr_y)))), ==(old(_dryad_S8, srtl_lseg(y, curr_y)), old(_dryad_S9, srtl_lseg(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_lseg(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_lseg_reach(y, curr_y)))), ==(old(_dryad_S8, srtl_lseg_reach(y, curr_y)), old(_dryad_S9, srtl_lseg_reach(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S8, sll_lseg(z, last_z)), old(_dryad_S9, sll_lseg(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S8, sll_lseg_reach(z, last_z)), old(_dryad_S9, sll_lseg_reach(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S8, sll_lseg_keys(z, last_z)), old(_dryad_S9, sll_lseg_keys(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S8, sll_lseg_len_next(z, last_z)), old(_dryad_S9, sll_lseg_len_next(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S8, sll_lseg_max_key(z, last_z)), old(_dryad_S9, sll_lseg_max_key(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S8, sll_lseg_min_key(z, last_z)), old(_dryad_S9, sll_lseg_min_key(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_lseg_reach(z, last_z)))), ==(old(_dryad_S8, srtl_lseg(z, last_z)), old(_dryad_S9, srtl_lseg(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl_lseg(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_lseg_reach(z, last_z)))), ==(old(_dryad_S8, srtl_lseg_reach(z, last_z)), old(_dryad_S9, srtl_lseg_reach(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S8, sll_lseg(x, curr_x)), old(_dryad_S9, sll_lseg(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S8, sll_lseg_reach(x, curr_x)), old(_dryad_S9, sll_lseg_reach(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S8, sll_lseg_keys(x, curr_x)), old(_dryad_S9, sll_lseg_keys(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S8, sll_lseg_len_next(x, curr_x)), old(_dryad_S9, sll_lseg_len_next(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S8, sll_lseg_max_key(x, curr_x)), old(_dryad_S9, sll_lseg_max_key(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S8, sll_lseg_min_key(x, curr_x)), old(_dryad_S9, sll_lseg_min_key(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_lseg_reach(x, curr_x)))), ==(old(_dryad_S8, srtl_lseg(x, curr_x)), old(_dryad_S9, srtl_lseg(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_lseg(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_lseg_reach(x, curr_x)))), ==(old(_dryad_S8, srtl_lseg_reach(x, curr_x)), old(_dryad_S9, srtl_lseg_reach(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S8, sll_lseg(z, tmp)), old(_dryad_S9, sll_lseg(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S8, sll_lseg_reach(z, tmp)), old(_dryad_S9, sll_lseg_reach(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S8, sll_lseg_keys(z, tmp)), old(_dryad_S9, sll_lseg_keys(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S8, sll_lseg_len_next(z, tmp)), old(_dryad_S9, sll_lseg_len_next(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S8, sll_lseg_max_key(z, tmp)), old(_dryad_S9, sll_lseg_max_key(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S8, sll_lseg_min_key(z, tmp)), old(_dryad_S9, sll_lseg_min_key(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_lseg_reach(z, tmp)))), ==(old(_dryad_S8, srtl_lseg(z, tmp)), old(_dryad_S9, srtl_lseg(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl_lseg(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_lseg_reach(z, tmp)))), ==(old(_dryad_S8, srtl_lseg_reach(z, tmp)), old(_dryad_S9, srtl_lseg_reach(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S8, sll_lseg(x, curr_x)), old(_dryad_S9, sll_lseg(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S8, sll_lseg_reach(x, curr_x)), old(_dryad_S9, sll_lseg_reach(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S8, sll_lseg_keys(x, curr_x)), old(_dryad_S9, sll_lseg_keys(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S8, sll_lseg_len_next(x, curr_x)), old(_dryad_S9, sll_lseg_len_next(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S8, sll_lseg_max_key(x, curr_x)), old(_dryad_S9, sll_lseg_max_key(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S8, sll_lseg_min_key(x, curr_x)), old(_dryad_S9, sll_lseg_min_key(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_lseg_reach(x, curr_x)))), ==(old(_dryad_S8, srtl_lseg(x, curr_x)), old(_dryad_S9, srtl_lseg(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_lseg(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_lseg_reach(x, curr_x)))), ==(old(_dryad_S8, srtl_lseg_reach(x, curr_x)), old(_dryad_S9, srtl_lseg_reach(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S8, sll_lseg(y, curr_y)), old(_dryad_S9, sll_lseg(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S8, sll_lseg_reach(y, curr_y)), old(_dryad_S9, sll_lseg_reach(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S8, sll_lseg_keys(y, curr_y)), old(_dryad_S9, sll_lseg_keys(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S8, sll_lseg_len_next(y, curr_y)), old(_dryad_S9, sll_lseg_len_next(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S8, sll_lseg_max_key(y, curr_y)), old(_dryad_S9, sll_lseg_max_key(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S8, sll_lseg_min_key(y, curr_y)), old(_dryad_S9, sll_lseg_min_key(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_lseg_reach(y, curr_y)))), ==(old(_dryad_S8, srtl_lseg(y, curr_y)), old(_dryad_S9, srtl_lseg(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_lseg(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_lseg_reach(y, curr_y)))), ==(old(_dryad_S8, srtl_lseg_reach(y, curr_y)), old(_dryad_S9, srtl_lseg_reach(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, curr_y3)), ==(*((curr_y3->key)), old(_dryad_S8, *((curr_y3->key))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(SL#curr_y3, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $rd_inv(SL#_dryad_S8, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, curr_y3)), @_vcc_ptr_eq_pure(*((curr_y3->next)), old(_dryad_S8, *((curr_y3->next))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(SL#curr_y3, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S8, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, curr_x2)), ==(*((curr_x2->key)), old(_dryad_S8, *((curr_x2->key))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(SL#curr_x2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $rd_inv(SL#_dryad_S8, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, curr_x2)), @_vcc_ptr_eq_pure(*((curr_x2->next)), old(_dryad_S8, *((curr_x2->next))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(SL#curr_x2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S8, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, tmp)), ==(*((tmp->key)), old(_dryad_S8, *((tmp->key))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(L#tmp, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) == $rd_inv(SL#_dryad_S8, s_node.key, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, tmp)), @_vcc_ptr_eq_pure(*((tmp->next)), old(_dryad_S8, *((tmp->next))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(L#tmp, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S8, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, curr_x)), ==(*((curr_x->key)), old(_dryad_S8, *((curr_x->key))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(L#curr_x, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) == $rd_inv(SL#_dryad_S8, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, curr_x)), @_vcc_ptr_eq_pure(*((curr_x->next)), old(_dryad_S8, *((curr_x->next))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(L#curr_x, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S8, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, curr_y)), ==(*((curr_y->key)), old(_dryad_S8, *((curr_y->key))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(L#curr_y, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) == $rd_inv(SL#_dryad_S8, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, curr_y)), @_vcc_ptr_eq_pure(*((curr_y->next)), old(_dryad_S8, *((curr_y->next))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(L#curr_y, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S8, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, z)), ==(*((z->key)), old(_dryad_S8, *((z->key))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(L#z, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) == $rd_inv(SL#_dryad_S8, s_node.key, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, z)), @_vcc_ptr_eq_pure(*((z->next)), old(_dryad_S8, *((z->next))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(L#z, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S8, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, y)), ==(*((y->key)), old(_dryad_S8, *((y->key))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(P#y, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) == $rd_inv(SL#_dryad_S8, s_node.key, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, y)), @_vcc_ptr_eq_pure(*((y->next)), old(_dryad_S8, *((y->next))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(P#y, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S8, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, x)), ==(*((x->key)), old(_dryad_S8, *((x->key))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(P#x, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) == $rd_inv(SL#_dryad_S8, s_node.key, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, x)), @_vcc_ptr_eq_pure(*((x->next)), old(_dryad_S8, *((x->next))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(P#x, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S8, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node);
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(sll_keys(curr_y3), @_vcc_intset_union(sll_keys(*((curr_y3->next))), @_vcc_intset_singleton(*((curr_y3->key)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(sll_list_len_next(curr_y3), unchecked+(sll_list_len_next(*((curr_y3->next))), 1))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y3), @_vcc_ptr_neq_null(*((curr_y3->next)))), ==(rsrtl(curr_y3), &&(&&(rsrtl(*((curr_y3->next))), unchecked!(@_vcc_oset_in(curr_y3, rsrtl_reach(*((curr_y3->next)))))), >=(*((curr_y3->key)), sll_max_key(*((curr_y3->next))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_y3, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(rsrtl_reach(curr_y3), @_vcc_oset_union(rsrtl_reach(*((curr_y3->next))), @_vcc_oset_singleton(curr_y3)))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_y3, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(sll(curr_y3), &&(sll(*((curr_y3->next))), unchecked!(@_vcc_oset_in(curr_y3, sll_reach(*((curr_y3->next)))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_y3, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(sll_reach(curr_y3), @_vcc_oset_union(sll_reach(*((curr_y3->next))), @_vcc_oset_singleton(curr_y3)))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_y3, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y3), @_vcc_ptr_neq_null(*((curr_y3->next)))), ==(sll_max_key(curr_y3), @\int_max(*((curr_y3->key)), sll_max_key(*((curr_y3->next)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y3), @_vcc_ptr_neq_null(*((curr_y3->next)))), ==(sll_min_key(curr_y3), @\int_min(*((curr_y3->key)), sll_min_key(*((curr_y3->next)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y3), @_vcc_ptr_neq_null(*((curr_y3->next)))), ==(srtl(curr_y3), &&(&&(srtl(*((curr_y3->next))), unchecked!(@_vcc_oset_in(curr_y3, srtl_reach(*((curr_y3->next)))))), <=(*((curr_y3->key)), sll_min_key(*((curr_y3->next))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_y3, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(srtl_reach(curr_y3), @_vcc_oset_union(srtl_reach(*((curr_y3->next))), @_vcc_oset_singleton(curr_y3)))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_y3, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(sll_keys(curr_x2), @_vcc_intset_union(sll_keys(*((curr_x2->next))), @_vcc_intset_singleton(*((curr_x2->key)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(sll_list_len_next(curr_x2), unchecked+(sll_list_len_next(*((curr_x2->next))), 1))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x2), @_vcc_ptr_neq_null(*((curr_x2->next)))), ==(rsrtl(curr_x2), &&(&&(rsrtl(*((curr_x2->next))), unchecked!(@_vcc_oset_in(curr_x2, rsrtl_reach(*((curr_x2->next)))))), >=(*((curr_x2->key)), sll_max_key(*((curr_x2->next))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_x2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(rsrtl_reach(curr_x2), @_vcc_oset_union(rsrtl_reach(*((curr_x2->next))), @_vcc_oset_singleton(curr_x2)))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_x2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(sll(curr_x2), &&(sll(*((curr_x2->next))), unchecked!(@_vcc_oset_in(curr_x2, sll_reach(*((curr_x2->next)))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_x2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(sll_reach(curr_x2), @_vcc_oset_union(sll_reach(*((curr_x2->next))), @_vcc_oset_singleton(curr_x2)))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_x2, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x2), @_vcc_ptr_neq_null(*((curr_x2->next)))), ==(sll_max_key(curr_x2), @\int_max(*((curr_x2->key)), sll_max_key(*((curr_x2->next)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x2), @_vcc_ptr_neq_null(*((curr_x2->next)))), ==(sll_min_key(curr_x2), @\int_min(*((curr_x2->key)), sll_min_key(*((curr_x2->next)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x2), @_vcc_ptr_neq_null(*((curr_x2->next)))), ==(srtl(curr_x2), &&(&&(srtl(*((curr_x2->next))), unchecked!(@_vcc_oset_in(curr_x2, srtl_reach(*((curr_x2->next)))))), <=(*((curr_x2->key)), sll_min_key(*((curr_x2->next))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_x2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(srtl_reach(curr_x2), @_vcc_oset_union(srtl_reach(*((curr_x2->next))), @_vcc_oset_singleton(curr_x2)))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_x2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_keys(tmp), @_vcc_intset_union(sll_keys(*((tmp->next))), @_vcc_intset_singleton(*((tmp->key)))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_list_len_next(tmp), unchecked+(sll_list_len_next(*((tmp->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(rsrtl(tmp), &&(&&(rsrtl(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, rsrtl_reach(*((tmp->next)))))), >=(*((tmp->key)), sll_max_key(*((tmp->next))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(rsrtl_reach(tmp), @_vcc_oset_union(rsrtl_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll(tmp), &&(sll(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, sll_reach(*((tmp->next)))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_reach(tmp), @_vcc_oset_union(sll_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(sll_max_key(tmp), @\int_max(*((tmp->key)), sll_max_key(*((tmp->next)))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#tmp, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(sll_min_key(tmp), @\int_min(*((tmp->key)), sll_min_key(*((tmp->next)))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#tmp, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(srtl(tmp), &&(&&(srtl(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, srtl_reach(*((tmp->next)))))), <=(*((tmp->key)), sll_min_key(*((tmp->next))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(srtl_reach(tmp), @_vcc_oset_union(srtl_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_keys(curr_x), @_vcc_intset_union(sll_keys(*((curr_x->next))), @_vcc_intset_singleton(*((curr_x->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_list_len_next(curr_x), unchecked+(sll_list_len_next(*((curr_x->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(rsrtl(curr_x), &&(&&(rsrtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, rsrtl_reach(*((curr_x->next)))))), >=(*((curr_x->key)), sll_max_key(*((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(rsrtl_reach(curr_x), @_vcc_oset_union(rsrtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll(curr_x), &&(sll(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, sll_reach(*((curr_x->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_reach(curr_x), @_vcc_oset_union(sll_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_max_key(curr_x), @\int_max(*((curr_x->key)), sll_max_key(*((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_min_key(curr_x), @\int_min(*((curr_x->key)), sll_min_key(*((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(srtl(curr_x), &&(&&(srtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, srtl_reach(*((curr_x->next)))))), <=(*((curr_x->key)), sll_min_key(*((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(srtl_reach(curr_x), @_vcc_oset_union(srtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_keys(curr_y), @_vcc_intset_union(sll_keys(*((curr_y->next))), @_vcc_intset_singleton(*((curr_y->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_list_len_next(curr_y), unchecked+(sll_list_len_next(*((curr_y->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(rsrtl(curr_y), &&(&&(rsrtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, rsrtl_reach(*((curr_y->next)))))), >=(*((curr_y->key)), sll_max_key(*((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(rsrtl_reach(curr_y), @_vcc_oset_union(rsrtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll(curr_y), &&(sll(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, sll_reach(*((curr_y->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_reach(curr_y), @_vcc_oset_union(sll_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_max_key(curr_y), @\int_max(*((curr_y->key)), sll_max_key(*((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_min_key(curr_y), @\int_min(*((curr_y->key)), sll_min_key(*((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(srtl(curr_y), &&(&&(srtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, srtl_reach(*((curr_y->next)))))), <=(*((curr_y->key)), sll_min_key(*((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(srtl_reach(curr_y), @_vcc_oset_union(srtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_keys(z), @_vcc_intset_union(sll_keys(*((z->next))), @_vcc_intset_singleton(*((z->key)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_list_len_next(z), unchecked+(sll_list_len_next(*((z->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(rsrtl(z), &&(&&(rsrtl(*((z->next))), unchecked!(@_vcc_oset_in(z, rsrtl_reach(*((z->next)))))), >=(*((z->key)), sll_max_key(*((z->next))))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(rsrtl_reach(z), @_vcc_oset_union(rsrtl_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll(z), &&(sll(*((z->next))), unchecked!(@_vcc_oset_in(z, sll_reach(*((z->next)))))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_reach(z), @_vcc_oset_union(sll_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_max_key(z), @\int_max(*((z->key)), sll_max_key(*((z->next)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_min_key(z), @\int_min(*((z->key)), sll_min_key(*((z->next)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(srtl(z), &&(&&(srtl(*((z->next))), unchecked!(@_vcc_oset_in(z, srtl_reach(*((z->next)))))), <=(*((z->key)), sll_min_key(*((z->next))))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(srtl_reach(z), @_vcc_oset_union(srtl_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_keys(y), @_vcc_intset_union(sll_keys(*((y->next))), @_vcc_intset_singleton(*((y->key)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_list_len_next(y), unchecked+(sll_list_len_next(*((y->next))), 1))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(rsrtl(y), &&(&&(rsrtl(*((y->next))), unchecked!(@_vcc_oset_in(y, rsrtl_reach(*((y->next)))))), >=(*((y->key)), sll_max_key(*((y->next))))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(rsrtl_reach(y), @_vcc_oset_union(rsrtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll(y), &&(sll(*((y->next))), unchecked!(@_vcc_oset_in(y, sll_reach(*((y->next)))))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_reach(y), @_vcc_oset_union(sll_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_max_key(y), @\int_max(*((y->key)), sll_max_key(*((y->next)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_min_key(y), @\int_min(*((y->key)), sll_min_key(*((y->next)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(srtl(y), &&(&&(srtl(*((y->next))), unchecked!(@_vcc_oset_in(y, srtl_reach(*((y->next)))))), <=(*((y->key)), sll_min_key(*((y->next))))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(srtl_reach(y), @_vcc_oset_union(srtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_keys(x), @_vcc_intset_union(sll_keys(*((x->next))), @_vcc_intset_singleton(*((x->key)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_list_len_next(x), unchecked+(sll_list_len_next(*((x->next))), 1))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(rsrtl(x), &&(&&(rsrtl(*((x->next))), unchecked!(@_vcc_oset_in(x, rsrtl_reach(*((x->next)))))), >=(*((x->key)), sll_max_key(*((x->next))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(rsrtl_reach(x), @_vcc_oset_union(rsrtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll(x), &&(sll(*((x->next))), unchecked!(@_vcc_oset_in(x, sll_reach(*((x->next)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_reach(x), @_vcc_oset_union(sll_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_max_key(x), @\int_max(*((x->key)), sll_max_key(*((x->next)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_min_key(x), @\int_min(*((x->key)), sll_min_key(*((x->next)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(srtl(x), &&(&&(srtl(*((x->next))), unchecked!(@_vcc_oset_in(x, srtl_reach(*((x->next)))))), <=(*((x->key)), sll_min_key(*((x->next))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(srtl_reach(x), @_vcc_oset_union(srtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_keys(last_z), @_vcc_intset_union(sll_keys(*((last_z->next))), @_vcc_intset_singleton(*((last_z->key)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#last_z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_list_len_next(last_z), unchecked+(sll_list_len_next(*((last_z->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#last_z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(rsrtl(last_z), &&(&&(rsrtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, rsrtl_reach(*((last_z->next)))))), >=(*((last_z->key)), sll_max_key(*((last_z->next))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(rsrtl_reach(last_z), @_vcc_oset_union(rsrtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll(last_z), &&(sll(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, sll_reach(*((last_z->next)))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_reach(last_z), @_vcc_oset_union(sll_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_max_key(last_z), @\int_max(*((last_z->key)), sll_max_key(*((last_z->next)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_min_key(last_z), @\int_min(*((last_z->key)), sll_min_key(*((last_z->next)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(srtl(last_z), &&(&&(srtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, srtl_reach(*((last_z->next)))))), <=(*((last_z->key)), sll_min_key(*((last_z->next))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(srtl_reach(last_z), @_vcc_oset_union(srtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg(y, curr_y), &&(sll_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, sll_lseg_reach(*((y->next)), curr_y)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_reach(y, curr_y), @_vcc_oset_union(sll_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_keys(y, curr_y), @_vcc_intset_union(sll_lseg_keys(*((y->next)), curr_y), @_vcc_intset_singleton(*((y->key)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_len_next(y, curr_y), unchecked+(sll_lseg_len_next(*((y->next)), curr_y), 1))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_max_key(y, curr_y), @\int_max(*((y->key)), sll_lseg_max_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_min_key(y, curr_y), @\int_min(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(srtl_lseg(y, curr_y), &&(&&(srtl_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, srtl_lseg_reach(*((y->next)), curr_y)))), <=(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(srtl_lseg_reach(y, curr_y), @_vcc_oset_union(srtl_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg(x, curr_x), &&(sll_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, sll_lseg_reach(*((x->next)), curr_x)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_reach(x, curr_x), @_vcc_oset_union(sll_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_keys(x, curr_x), @_vcc_intset_union(sll_lseg_keys(*((x->next)), curr_x), @_vcc_intset_singleton(*((x->key)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_len_next(x, curr_x), unchecked+(sll_lseg_len_next(*((x->next)), curr_x), 1))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_max_key(x, curr_x), @\int_max(*((x->key)), sll_lseg_max_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_min_key(x, curr_x), @\int_min(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(srtl_lseg(x, curr_x), &&(&&(srtl_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, srtl_lseg_reach(*((x->next)), curr_x)))), <=(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(srtl_lseg_reach(x, curr_x), @_vcc_oset_union(srtl_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), ==(sll_lseg(z, tmp), &&(sll_lseg(*((z->next)), tmp), unchecked!(@_vcc_oset_in(z, sll_lseg_reach(*((z->next)), tmp)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), ==(sll_lseg_reach(z, tmp), @_vcc_oset_union(sll_lseg_reach(*((z->next)), tmp), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), ==(sll_lseg_keys(z, tmp), @_vcc_intset_union(sll_lseg_keys(*((z->next)), tmp), @_vcc_intset_singleton(*((z->key)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), ==(sll_lseg_len_next(z, tmp), unchecked+(sll_lseg_len_next(*((z->next)), tmp), 1))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), @_vcc_ptr_neq_pure(*((z->next)), tmp)), ==(sll_lseg_max_key(z, tmp), @\int_max(*((z->key)), sll_lseg_max_key(*((z->next)), tmp)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), @_vcc_ptr_neq_pure(*((z->next)), tmp)), ==(sll_lseg_min_key(z, tmp), @\int_min(*((z->key)), sll_lseg_min_key(*((z->next)), tmp)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), @_vcc_ptr_neq_pure(*((z->next)), tmp)), ==(srtl_lseg(z, tmp), &&(&&(srtl_lseg(*((z->next)), tmp), unchecked!(@_vcc_oset_in(z, srtl_lseg_reach(*((z->next)), tmp)))), <=(*((z->key)), sll_lseg_min_key(*((z->next)), tmp))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), ==(srtl_lseg_reach(z, tmp), @_vcc_oset_union(srtl_lseg_reach(*((z->next)), tmp), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg(x, curr_x), &&(sll_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, sll_lseg_reach(*((x->next)), curr_x)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_reach(x, curr_x), @_vcc_oset_union(sll_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_keys(x, curr_x), @_vcc_intset_union(sll_lseg_keys(*((x->next)), curr_x), @_vcc_intset_singleton(*((x->key)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_len_next(x, curr_x), unchecked+(sll_lseg_len_next(*((x->next)), curr_x), 1))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_max_key(x, curr_x), @\int_max(*((x->key)), sll_lseg_max_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_min_key(x, curr_x), @\int_min(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(srtl_lseg(x, curr_x), &&(&&(srtl_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, srtl_lseg_reach(*((x->next)), curr_x)))), <=(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(srtl_lseg_reach(x, curr_x), @_vcc_oset_union(srtl_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg(y, curr_y), &&(sll_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, sll_lseg_reach(*((y->next)), curr_y)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_reach(y, curr_y), @_vcc_oset_union(sll_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_keys(y, curr_y), @_vcc_intset_union(sll_lseg_keys(*((y->next)), curr_y), @_vcc_intset_singleton(*((y->key)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_len_next(y, curr_y), unchecked+(sll_lseg_len_next(*((y->next)), curr_y), 1))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_max_key(y, curr_y), @\int_max(*((y->key)), sll_lseg_max_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_min_key(y, curr_y), @\int_min(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(srtl_lseg(y, curr_y), &&(&&(srtl_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, srtl_lseg_reach(*((y->next)), curr_y)))), <=(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(srtl_lseg_reach(y, curr_y), @_vcc_oset_union(srtl_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assert @reads_check_normal((curr_x->key)); 
            assert $thread_local($s, $phys_ptr_cast(L#curr_x, ^s_node));
            // assert @reads_check_normal((curr_y->key)); 
            assert $thread_local($s, $phys_ptr_cast(L#curr_y, ^s_node));
            // z_key := unchecked+(*((curr_x->key)), *((curr_y->key))); 
            L#z_key := $unchk_add(^^i4, $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)));
            // _math \state _dryad_S10; 
            // _dryad_S10 := @_vcc_current_state(@state); 
            SL#_dryad_S10 := $current_state($s);
            // _math \state stmtexpr7#15; 
            // stmtexpr7#15 := _dryad_S10; 
            stmtexpr7#15 := SL#_dryad_S10;
            // assert @prim_writes_check((last_z->key)); 
            assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#last_z, ^s_node), s_node.key));
            // *(last_z->key) := z_key; 
            call $write_int(s_node.key, $phys_ptr_cast(L#last_z, ^s_node), L#z_key);
            assume $full_stop_ext(#tok$3^77.5, $s);
            // _math \state _dryad_S11; 
            // _dryad_S11 := @_vcc_current_state(@state); 
            SL#_dryad_S11 := $current_state($s);
            // _math \state stmtexpr8#16; 
            // stmtexpr8#16 := _dryad_S11; 
            stmtexpr8#16 := SL#_dryad_S11;
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(*((last_z->next)))))), ==(old(_dryad_S10, sll_keys(*((last_z->next)))), old(_dryad_S11, sll_keys(*((last_z->next)))))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) ==> F#sll_keys(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) == F#sll_keys(SL#_dryad_S11, $rd_phys_ptr(SL#_dryad_S11, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(*((last_z->next)))))), ==(old(_dryad_S10, sll_list_len_next(*((last_z->next)))), old(_dryad_S11, sll_list_len_next(*((last_z->next)))))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $rd_phys_ptr(SL#_dryad_S11, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(*((last_z->next)))))), ==(old(_dryad_S10, rsrtl(*((last_z->next)))), old(_dryad_S11, rsrtl(*((last_z->next)))))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) ==> F#rsrtl(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) == F#rsrtl(SL#_dryad_S11, $rd_phys_ptr(SL#_dryad_S11, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(*((last_z->next)))))), ==(old(_dryad_S10, rsrtl_reach(*((last_z->next)))), old(_dryad_S11, rsrtl_reach(*((last_z->next)))))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $rd_phys_ptr(SL#_dryad_S11, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(*((last_z->next)))))), ==(old(_dryad_S10, sll(*((last_z->next)))), old(_dryad_S11, sll(*((last_z->next)))))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) ==> F#sll(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) == F#sll(SL#_dryad_S11, $rd_phys_ptr(SL#_dryad_S11, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(*((last_z->next)))))), ==(old(_dryad_S10, sll_reach(*((last_z->next)))), old(_dryad_S11, sll_reach(*((last_z->next)))))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) ==> F#sll_reach(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) == F#sll_reach(SL#_dryad_S11, $rd_phys_ptr(SL#_dryad_S11, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(*((last_z->next)))))), ==(old(_dryad_S10, sll_max_key(*((last_z->next)))), old(_dryad_S11, sll_max_key(*((last_z->next)))))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) ==> F#sll_max_key(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) == F#sll_max_key(SL#_dryad_S11, $rd_phys_ptr(SL#_dryad_S11, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(*((last_z->next)))))), ==(old(_dryad_S10, sll_min_key(*((last_z->next)))), old(_dryad_S11, sll_min_key(*((last_z->next)))))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) ==> F#sll_min_key(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) == F#sll_min_key(SL#_dryad_S11, $rd_phys_ptr(SL#_dryad_S11, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(*((last_z->next)))))), ==(old(_dryad_S10, srtl(*((last_z->next)))), old(_dryad_S11, srtl(*((last_z->next)))))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) ==> F#srtl(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) == F#srtl(SL#_dryad_S11, $rd_phys_ptr(SL#_dryad_S11, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(*((last_z->next)))))), ==(old(_dryad_S10, srtl_reach(*((last_z->next)))), old(_dryad_S11, srtl_reach(*((last_z->next)))))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) ==> F#srtl_reach(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) == F#srtl_reach(SL#_dryad_S11, $rd_phys_ptr(SL#_dryad_S11, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node));
            // assume ==(old(_dryad_S10, sll_list_len_next(curr_y3)), old(_dryad_S11, sll_list_len_next(curr_y3))); 
            assume F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==(old(_dryad_S10, rsrtl_reach(curr_y3)), old(_dryad_S11, rsrtl_reach(curr_y3))); 
            assume F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==(old(_dryad_S10, sll(curr_y3)), old(_dryad_S11, sll(curr_y3))); 
            assume F#sll(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==(old(_dryad_S10, sll_reach(curr_y3)), old(_dryad_S11, sll_reach(curr_y3))); 
            assume F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==(old(_dryad_S10, srtl_reach(curr_y3)), old(_dryad_S11, srtl_reach(curr_y3))); 
            assume F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==(old(_dryad_S10, sll_list_len_next(curr_x2)), old(_dryad_S11, sll_list_len_next(curr_x2))); 
            assume F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==(old(_dryad_S10, rsrtl_reach(curr_x2)), old(_dryad_S11, rsrtl_reach(curr_x2))); 
            assume F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==(old(_dryad_S10, sll(curr_x2)), old(_dryad_S11, sll(curr_x2))); 
            assume F#sll(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==(old(_dryad_S10, sll_reach(curr_x2)), old(_dryad_S11, sll_reach(curr_x2))); 
            assume F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==(old(_dryad_S10, srtl_reach(curr_x2)), old(_dryad_S11, srtl_reach(curr_x2))); 
            assume F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==(old(_dryad_S10, sll_list_len_next(tmp)), old(_dryad_S11, sll_list_len_next(tmp))); 
            assume F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==(old(_dryad_S10, rsrtl_reach(tmp)), old(_dryad_S11, rsrtl_reach(tmp))); 
            assume F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==(old(_dryad_S10, sll(tmp)), old(_dryad_S11, sll(tmp))); 
            assume F#sll(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==(old(_dryad_S10, sll_reach(tmp)), old(_dryad_S11, sll_reach(tmp))); 
            assume F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==(old(_dryad_S10, srtl_reach(tmp)), old(_dryad_S11, srtl_reach(tmp))); 
            assume F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==(old(_dryad_S10, sll_list_len_next(curr_x)), old(_dryad_S11, sll_list_len_next(curr_x))); 
            assume F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==(old(_dryad_S10, rsrtl_reach(curr_x)), old(_dryad_S11, rsrtl_reach(curr_x))); 
            assume F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==(old(_dryad_S10, sll(curr_x)), old(_dryad_S11, sll(curr_x))); 
            assume F#sll(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==(old(_dryad_S10, sll_reach(curr_x)), old(_dryad_S11, sll_reach(curr_x))); 
            assume F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==(old(_dryad_S10, srtl_reach(curr_x)), old(_dryad_S11, srtl_reach(curr_x))); 
            assume F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==(old(_dryad_S10, sll_list_len_next(curr_y)), old(_dryad_S11, sll_list_len_next(curr_y))); 
            assume F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==(old(_dryad_S10, rsrtl_reach(curr_y)), old(_dryad_S11, rsrtl_reach(curr_y))); 
            assume F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==(old(_dryad_S10, sll(curr_y)), old(_dryad_S11, sll(curr_y))); 
            assume F#sll(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==(old(_dryad_S10, sll_reach(curr_y)), old(_dryad_S11, sll_reach(curr_y))); 
            assume F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==(old(_dryad_S10, srtl_reach(curr_y)), old(_dryad_S11, srtl_reach(curr_y))); 
            assume F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==(old(_dryad_S10, sll_list_len_next(z)), old(_dryad_S11, sll_list_len_next(z))); 
            assume F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node));
            // assume ==(old(_dryad_S10, rsrtl_reach(z)), old(_dryad_S11, rsrtl_reach(z))); 
            assume F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node));
            // assume ==(old(_dryad_S10, sll(z)), old(_dryad_S11, sll(z))); 
            assume F#sll(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node));
            // assume ==(old(_dryad_S10, sll_reach(z)), old(_dryad_S11, sll_reach(z))); 
            assume F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node));
            // assume ==(old(_dryad_S10, srtl_reach(z)), old(_dryad_S11, srtl_reach(z))); 
            assume F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node));
            // assume ==(old(_dryad_S10, sll_list_len_next(last_z)), old(_dryad_S11, sll_list_len_next(last_z))); 
            assume F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==(old(_dryad_S10, rsrtl_reach(last_z)), old(_dryad_S11, rsrtl_reach(last_z))); 
            assume F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#last_z, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==(old(_dryad_S10, sll(last_z)), old(_dryad_S11, sll(last_z))); 
            assume F#sll(SL#_dryad_S10, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==(old(_dryad_S10, sll_reach(last_z)), old(_dryad_S11, sll_reach(last_z))); 
            assume F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==(old(_dryad_S10, srtl_reach(last_z)), old(_dryad_S11, srtl_reach(last_z))); 
            assume F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==(old(_dryad_S10, sll_list_len_next(y)), old(_dryad_S11, sll_list_len_next(y))); 
            assume F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node));
            // assume ==(old(_dryad_S10, rsrtl_reach(y)), old(_dryad_S11, rsrtl_reach(y))); 
            assume F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node));
            // assume ==(old(_dryad_S10, sll(y)), old(_dryad_S11, sll(y))); 
            assume F#sll(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node));
            // assume ==(old(_dryad_S10, sll_reach(y)), old(_dryad_S11, sll_reach(y))); 
            assume F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node));
            // assume ==(old(_dryad_S10, srtl_reach(y)), old(_dryad_S11, srtl_reach(y))); 
            assume F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node));
            // assume ==(old(_dryad_S10, sll_list_len_next(x)), old(_dryad_S11, sll_list_len_next(x))); 
            assume F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node));
            // assume ==(old(_dryad_S10, rsrtl_reach(x)), old(_dryad_S11, rsrtl_reach(x))); 
            assume F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node));
            // assume ==(old(_dryad_S10, sll(x)), old(_dryad_S11, sll(x))); 
            assume F#sll(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node));
            // assume ==(old(_dryad_S10, sll_reach(x)), old(_dryad_S11, sll_reach(x))); 
            assume F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node));
            // assume ==(old(_dryad_S10, srtl_reach(x)), old(_dryad_S11, srtl_reach(x))); 
            assume F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_y3)))), ==(old(_dryad_S10, sll_keys(curr_y3)), old(_dryad_S11, sll_keys(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_keys(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_keys(SL#_dryad_S11, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_y3)))), ==(old(_dryad_S10, sll_list_len_next(curr_y3)), old(_dryad_S11, sll_list_len_next(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(curr_y3)))), ==(old(_dryad_S10, rsrtl(curr_y3)), old(_dryad_S11, rsrtl(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#rsrtl(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#rsrtl(SL#_dryad_S11, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(curr_y3)))), ==(old(_dryad_S10, rsrtl_reach(curr_y3)), old(_dryad_S11, rsrtl_reach(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_y3)))), ==(old(_dryad_S10, sll(curr_y3)), old(_dryad_S11, sll(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_y3)))), ==(old(_dryad_S10, sll_reach(curr_y3)), old(_dryad_S11, sll_reach(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_y3)))), ==(old(_dryad_S10, sll_max_key(curr_y3)), old(_dryad_S11, sll_max_key(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_max_key(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_max_key(SL#_dryad_S11, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_y3)))), ==(old(_dryad_S10, sll_min_key(curr_y3)), old(_dryad_S11, sll_min_key(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_min_key(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_min_key(SL#_dryad_S11, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(curr_y3)))), ==(old(_dryad_S10, srtl(curr_y3)), old(_dryad_S11, srtl(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#srtl(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#srtl(SL#_dryad_S11, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(curr_y3)))), ==(old(_dryad_S10, srtl_reach(curr_y3)), old(_dryad_S11, srtl_reach(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_x2)))), ==(old(_dryad_S10, sll_keys(curr_x2)), old(_dryad_S11, sll_keys(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_keys(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_keys(SL#_dryad_S11, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_x2)))), ==(old(_dryad_S10, sll_list_len_next(curr_x2)), old(_dryad_S11, sll_list_len_next(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(curr_x2)))), ==(old(_dryad_S10, rsrtl(curr_x2)), old(_dryad_S11, rsrtl(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#rsrtl(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#rsrtl(SL#_dryad_S11, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(curr_x2)))), ==(old(_dryad_S10, rsrtl_reach(curr_x2)), old(_dryad_S11, rsrtl_reach(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_x2)))), ==(old(_dryad_S10, sll(curr_x2)), old(_dryad_S11, sll(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_x2)))), ==(old(_dryad_S10, sll_reach(curr_x2)), old(_dryad_S11, sll_reach(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_x2)))), ==(old(_dryad_S10, sll_max_key(curr_x2)), old(_dryad_S11, sll_max_key(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_max_key(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_max_key(SL#_dryad_S11, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_x2)))), ==(old(_dryad_S10, sll_min_key(curr_x2)), old(_dryad_S11, sll_min_key(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_min_key(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_min_key(SL#_dryad_S11, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(curr_x2)))), ==(old(_dryad_S10, srtl(curr_x2)), old(_dryad_S11, srtl(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#srtl(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#srtl(SL#_dryad_S11, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(curr_x2)))), ==(old(_dryad_S10, srtl_reach(curr_x2)), old(_dryad_S11, srtl_reach(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(tmp)))), ==(old(_dryad_S10, sll_keys(tmp)), old(_dryad_S11, sll_keys(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_keys(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_keys(SL#_dryad_S11, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(tmp)))), ==(old(_dryad_S10, sll_list_len_next(tmp)), old(_dryad_S11, sll_list_len_next(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(tmp)))), ==(old(_dryad_S10, rsrtl(tmp)), old(_dryad_S11, rsrtl(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#rsrtl(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node)) == F#rsrtl(SL#_dryad_S11, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(tmp)))), ==(old(_dryad_S10, rsrtl_reach(tmp)), old(_dryad_S11, rsrtl_reach(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(tmp)))), ==(old(_dryad_S10, sll(tmp)), old(_dryad_S11, sll(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(tmp)))), ==(old(_dryad_S10, sll_reach(tmp)), old(_dryad_S11, sll_reach(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(tmp)))), ==(old(_dryad_S10, sll_max_key(tmp)), old(_dryad_S11, sll_max_key(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_max_key(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_max_key(SL#_dryad_S11, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(tmp)))), ==(old(_dryad_S10, sll_min_key(tmp)), old(_dryad_S11, sll_min_key(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_min_key(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_min_key(SL#_dryad_S11, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(tmp)))), ==(old(_dryad_S10, srtl(tmp)), old(_dryad_S11, srtl(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl(SL#_dryad_S11, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(tmp)))), ==(old(_dryad_S10, srtl_reach(tmp)), old(_dryad_S11, srtl_reach(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_x)))), ==(old(_dryad_S10, sll_keys(curr_x)), old(_dryad_S11, sll_keys(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_keys(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_keys(SL#_dryad_S11, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_x)))), ==(old(_dryad_S10, sll_list_len_next(curr_x)), old(_dryad_S11, sll_list_len_next(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(curr_x)))), ==(old(_dryad_S10, rsrtl(curr_x)), old(_dryad_S11, rsrtl(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#rsrtl(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node)) == F#rsrtl(SL#_dryad_S11, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(curr_x)))), ==(old(_dryad_S10, rsrtl_reach(curr_x)), old(_dryad_S11, rsrtl_reach(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_x)))), ==(old(_dryad_S10, sll(curr_x)), old(_dryad_S11, sll(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_x)))), ==(old(_dryad_S10, sll_reach(curr_x)), old(_dryad_S11, sll_reach(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_x)))), ==(old(_dryad_S10, sll_max_key(curr_x)), old(_dryad_S11, sll_max_key(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_max_key(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_max_key(SL#_dryad_S11, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_x)))), ==(old(_dryad_S10, sll_min_key(curr_x)), old(_dryad_S11, sll_min_key(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_min_key(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_min_key(SL#_dryad_S11, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(curr_x)))), ==(old(_dryad_S10, srtl(curr_x)), old(_dryad_S11, srtl(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl(SL#_dryad_S11, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(curr_x)))), ==(old(_dryad_S10, srtl_reach(curr_x)), old(_dryad_S11, srtl_reach(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_y)))), ==(old(_dryad_S10, sll_keys(curr_y)), old(_dryad_S11, sll_keys(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_keys(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_keys(SL#_dryad_S11, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_y)))), ==(old(_dryad_S10, sll_list_len_next(curr_y)), old(_dryad_S11, sll_list_len_next(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(curr_y)))), ==(old(_dryad_S10, rsrtl(curr_y)), old(_dryad_S11, rsrtl(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#rsrtl(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node)) == F#rsrtl(SL#_dryad_S11, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(curr_y)))), ==(old(_dryad_S10, rsrtl_reach(curr_y)), old(_dryad_S11, rsrtl_reach(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_y)))), ==(old(_dryad_S10, sll(curr_y)), old(_dryad_S11, sll(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_y)))), ==(old(_dryad_S10, sll_reach(curr_y)), old(_dryad_S11, sll_reach(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_y)))), ==(old(_dryad_S10, sll_max_key(curr_y)), old(_dryad_S11, sll_max_key(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_max_key(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_max_key(SL#_dryad_S11, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_y)))), ==(old(_dryad_S10, sll_min_key(curr_y)), old(_dryad_S11, sll_min_key(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_min_key(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_min_key(SL#_dryad_S11, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(curr_y)))), ==(old(_dryad_S10, srtl(curr_y)), old(_dryad_S11, srtl(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl(SL#_dryad_S11, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(curr_y)))), ==(old(_dryad_S10, srtl_reach(curr_y)), old(_dryad_S11, srtl_reach(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(z)))), ==(old(_dryad_S10, sll_keys(z)), old(_dryad_S11, sll_keys(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_keys(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node)) == F#sll_keys(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(z)))), ==(old(_dryad_S10, sll_list_len_next(z)), old(_dryad_S11, sll_list_len_next(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(z)))), ==(old(_dryad_S10, rsrtl(z)), old(_dryad_S11, rsrtl(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node))) ==> F#rsrtl(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node)) == F#rsrtl(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(z)))), ==(old(_dryad_S10, rsrtl_reach(z)), old(_dryad_S11, rsrtl_reach(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(z)))), ==(old(_dryad_S10, sll(z)), old(_dryad_S11, sll(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(z)))), ==(old(_dryad_S10, sll_reach(z)), old(_dryad_S11, sll_reach(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(z)))), ==(old(_dryad_S10, sll_max_key(z)), old(_dryad_S11, sll_max_key(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_max_key(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node)) == F#sll_max_key(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(z)))), ==(old(_dryad_S10, sll_min_key(z)), old(_dryad_S11, sll_min_key(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_min_key(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node)) == F#sll_min_key(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(z)))), ==(old(_dryad_S10, srtl(z)), old(_dryad_S11, srtl(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node))) ==> F#srtl(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node)) == F#srtl(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(z)))), ==(old(_dryad_S10, srtl_reach(z)), old(_dryad_S11, srtl_reach(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node))) ==> F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(y)))), ==(old(_dryad_S10, sll_keys(y)), old(_dryad_S11, sll_keys(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_keys(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node)) == F#sll_keys(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(y)))), ==(old(_dryad_S10, sll_list_len_next(y)), old(_dryad_S11, sll_list_len_next(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(y)))), ==(old(_dryad_S10, rsrtl(y)), old(_dryad_S11, rsrtl(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node))) ==> F#rsrtl(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node)) == F#rsrtl(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(y)))), ==(old(_dryad_S10, rsrtl_reach(y)), old(_dryad_S11, rsrtl_reach(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(y)))), ==(old(_dryad_S10, sll(y)), old(_dryad_S11, sll(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(y)))), ==(old(_dryad_S10, sll_reach(y)), old(_dryad_S11, sll_reach(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(y)))), ==(old(_dryad_S10, sll_max_key(y)), old(_dryad_S11, sll_max_key(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_max_key(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node)) == F#sll_max_key(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(y)))), ==(old(_dryad_S10, sll_min_key(y)), old(_dryad_S11, sll_min_key(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_min_key(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node)) == F#sll_min_key(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(y)))), ==(old(_dryad_S10, srtl(y)), old(_dryad_S11, srtl(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node))) ==> F#srtl(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node)) == F#srtl(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(y)))), ==(old(_dryad_S10, srtl_reach(y)), old(_dryad_S11, srtl_reach(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node))) ==> F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(x)))), ==(old(_dryad_S10, sll_keys(x)), old(_dryad_S11, sll_keys(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_keys(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node)) == F#sll_keys(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(x)))), ==(old(_dryad_S10, sll_list_len_next(x)), old(_dryad_S11, sll_list_len_next(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(x)))), ==(old(_dryad_S10, rsrtl(x)), old(_dryad_S11, rsrtl(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node))) ==> F#rsrtl(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node)) == F#rsrtl(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(x)))), ==(old(_dryad_S10, rsrtl_reach(x)), old(_dryad_S11, rsrtl_reach(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(x)))), ==(old(_dryad_S10, sll(x)), old(_dryad_S11, sll(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(x)))), ==(old(_dryad_S10, sll_reach(x)), old(_dryad_S11, sll_reach(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(x)))), ==(old(_dryad_S10, sll_max_key(x)), old(_dryad_S11, sll_max_key(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_max_key(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node)) == F#sll_max_key(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(x)))), ==(old(_dryad_S10, sll_min_key(x)), old(_dryad_S11, sll_min_key(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_min_key(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node)) == F#sll_min_key(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(x)))), ==(old(_dryad_S10, srtl(x)), old(_dryad_S11, srtl(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node))) ==> F#srtl(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node)) == F#srtl(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(x)))), ==(old(_dryad_S10, srtl_reach(x)), old(_dryad_S11, srtl_reach(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node))) ==> F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S10, sll_lseg(y, curr_y)), old(_dryad_S11, sll_lseg(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S10, sll_lseg_reach(y, curr_y)), old(_dryad_S11, sll_lseg_reach(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S10, sll_lseg_keys(y, curr_y)), old(_dryad_S11, sll_lseg_keys(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S10, sll_lseg_len_next(y, curr_y)), old(_dryad_S11, sll_lseg_len_next(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S10, sll_lseg_max_key(y, curr_y)), old(_dryad_S11, sll_lseg_max_key(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S10, sll_lseg_min_key(y, curr_y)), old(_dryad_S11, sll_lseg_min_key(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_lseg_reach(y, curr_y)))), ==(old(_dryad_S10, srtl_lseg(y, curr_y)), old(_dryad_S11, srtl_lseg(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_lseg(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_lseg_reach(y, curr_y)))), ==(old(_dryad_S10, srtl_lseg_reach(y, curr_y)), old(_dryad_S11, srtl_lseg_reach(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S10, sll_lseg(z, last_z)), old(_dryad_S11, sll_lseg(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S10, sll_lseg_reach(z, last_z)), old(_dryad_S11, sll_lseg_reach(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S10, sll_lseg_keys(z, last_z)), old(_dryad_S11, sll_lseg_keys(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S10, sll_lseg_len_next(z, last_z)), old(_dryad_S11, sll_lseg_len_next(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S10, sll_lseg_max_key(z, last_z)), old(_dryad_S11, sll_lseg_max_key(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S10, sll_lseg_min_key(z, last_z)), old(_dryad_S11, sll_lseg_min_key(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_lseg_reach(z, last_z)))), ==(old(_dryad_S10, srtl_lseg(z, last_z)), old(_dryad_S11, srtl_lseg(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl_lseg(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_lseg_reach(z, last_z)))), ==(old(_dryad_S10, srtl_lseg_reach(z, last_z)), old(_dryad_S11, srtl_lseg_reach(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S10, sll_lseg(x, curr_x)), old(_dryad_S11, sll_lseg(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S10, sll_lseg_reach(x, curr_x)), old(_dryad_S11, sll_lseg_reach(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S10, sll_lseg_keys(x, curr_x)), old(_dryad_S11, sll_lseg_keys(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S10, sll_lseg_len_next(x, curr_x)), old(_dryad_S11, sll_lseg_len_next(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S10, sll_lseg_max_key(x, curr_x)), old(_dryad_S11, sll_lseg_max_key(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S10, sll_lseg_min_key(x, curr_x)), old(_dryad_S11, sll_lseg_min_key(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_lseg_reach(x, curr_x)))), ==(old(_dryad_S10, srtl_lseg(x, curr_x)), old(_dryad_S11, srtl_lseg(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_lseg(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_lseg_reach(x, curr_x)))), ==(old(_dryad_S10, srtl_lseg_reach(x, curr_x)), old(_dryad_S11, srtl_lseg_reach(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S10, sll_lseg(z, tmp)), old(_dryad_S11, sll_lseg(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S10, sll_lseg_reach(z, tmp)), old(_dryad_S11, sll_lseg_reach(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S10, sll_lseg_keys(z, tmp)), old(_dryad_S11, sll_lseg_keys(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S10, sll_lseg_len_next(z, tmp)), old(_dryad_S11, sll_lseg_len_next(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S10, sll_lseg_max_key(z, tmp)), old(_dryad_S11, sll_lseg_max_key(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S10, sll_lseg_min_key(z, tmp)), old(_dryad_S11, sll_lseg_min_key(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_lseg_reach(z, tmp)))), ==(old(_dryad_S10, srtl_lseg(z, tmp)), old(_dryad_S11, srtl_lseg(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl_lseg(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_lseg_reach(z, tmp)))), ==(old(_dryad_S10, srtl_lseg_reach(z, tmp)), old(_dryad_S11, srtl_lseg_reach(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S10, sll_lseg(x, curr_x)), old(_dryad_S11, sll_lseg(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S10, sll_lseg_reach(x, curr_x)), old(_dryad_S11, sll_lseg_reach(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S10, sll_lseg_keys(x, curr_x)), old(_dryad_S11, sll_lseg_keys(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S10, sll_lseg_len_next(x, curr_x)), old(_dryad_S11, sll_lseg_len_next(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S10, sll_lseg_max_key(x, curr_x)), old(_dryad_S11, sll_lseg_max_key(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S10, sll_lseg_min_key(x, curr_x)), old(_dryad_S11, sll_lseg_min_key(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_lseg_reach(x, curr_x)))), ==(old(_dryad_S10, srtl_lseg(x, curr_x)), old(_dryad_S11, srtl_lseg(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_lseg(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_lseg_reach(x, curr_x)))), ==(old(_dryad_S10, srtl_lseg_reach(x, curr_x)), old(_dryad_S11, srtl_lseg_reach(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S10, sll_lseg(y, curr_y)), old(_dryad_S11, sll_lseg(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S10, sll_lseg_reach(y, curr_y)), old(_dryad_S11, sll_lseg_reach(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S10, sll_lseg_keys(y, curr_y)), old(_dryad_S11, sll_lseg_keys(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S10, sll_lseg_len_next(y, curr_y)), old(_dryad_S11, sll_lseg_len_next(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S10, sll_lseg_max_key(y, curr_y)), old(_dryad_S11, sll_lseg_max_key(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S10, sll_lseg_min_key(y, curr_y)), old(_dryad_S11, sll_lseg_min_key(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_lseg_reach(y, curr_y)))), ==(old(_dryad_S10, srtl_lseg(y, curr_y)), old(_dryad_S11, srtl_lseg(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_lseg(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_lseg_reach(y, curr_y)))), ==(old(_dryad_S10, srtl_lseg_reach(y, curr_y)), old(_dryad_S11, srtl_lseg_reach(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, curr_y3)), ==(*((curr_y3->key)), old(_dryad_S10, *((curr_y3->key))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(SL#curr_y3, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $rd_inv(SL#_dryad_S10, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, curr_y3)), @_vcc_ptr_eq_pure(*((curr_y3->next)), old(_dryad_S10, *((curr_y3->next))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(SL#curr_y3, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, curr_x2)), ==(*((curr_x2->key)), old(_dryad_S10, *((curr_x2->key))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(SL#curr_x2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $rd_inv(SL#_dryad_S10, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, curr_x2)), @_vcc_ptr_eq_pure(*((curr_x2->next)), old(_dryad_S10, *((curr_x2->next))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(SL#curr_x2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, tmp)), ==(*((tmp->key)), old(_dryad_S10, *((tmp->key))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(L#tmp, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) == $rd_inv(SL#_dryad_S10, s_node.key, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, tmp)), @_vcc_ptr_eq_pure(*((tmp->next)), old(_dryad_S10, *((tmp->next))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(L#tmp, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, curr_x)), ==(*((curr_x->key)), old(_dryad_S10, *((curr_x->key))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(L#curr_x, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) == $rd_inv(SL#_dryad_S10, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, curr_x)), @_vcc_ptr_eq_pure(*((curr_x->next)), old(_dryad_S10, *((curr_x->next))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(L#curr_x, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, curr_y)), ==(*((curr_y->key)), old(_dryad_S10, *((curr_y->key))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(L#curr_y, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) == $rd_inv(SL#_dryad_S10, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, curr_y)), @_vcc_ptr_eq_pure(*((curr_y->next)), old(_dryad_S10, *((curr_y->next))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(L#curr_y, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, z)), ==(*((z->key)), old(_dryad_S10, *((z->key))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(L#z, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) == $rd_inv(SL#_dryad_S10, s_node.key, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, z)), @_vcc_ptr_eq_pure(*((z->next)), old(_dryad_S10, *((z->next))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(L#z, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, y)), ==(*((y->key)), old(_dryad_S10, *((y->key))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(P#y, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) == $rd_inv(SL#_dryad_S10, s_node.key, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, y)), @_vcc_ptr_eq_pure(*((y->next)), old(_dryad_S10, *((y->next))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(P#y, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, x)), ==(*((x->key)), old(_dryad_S10, *((x->key))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(P#x, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) == $rd_inv(SL#_dryad_S10, s_node.key, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, x)), @_vcc_ptr_eq_pure(*((x->next)), old(_dryad_S10, *((x->next))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(P#x, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node);
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(sll_keys(curr_y3), @_vcc_intset_union(sll_keys(*((curr_y3->next))), @_vcc_intset_singleton(*((curr_y3->key)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(sll_list_len_next(curr_y3), unchecked+(sll_list_len_next(*((curr_y3->next))), 1))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y3), @_vcc_ptr_neq_null(*((curr_y3->next)))), ==(rsrtl(curr_y3), &&(&&(rsrtl(*((curr_y3->next))), unchecked!(@_vcc_oset_in(curr_y3, rsrtl_reach(*((curr_y3->next)))))), >=(*((curr_y3->key)), sll_max_key(*((curr_y3->next))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_y3, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(rsrtl_reach(curr_y3), @_vcc_oset_union(rsrtl_reach(*((curr_y3->next))), @_vcc_oset_singleton(curr_y3)))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_y3, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(sll(curr_y3), &&(sll(*((curr_y3->next))), unchecked!(@_vcc_oset_in(curr_y3, sll_reach(*((curr_y3->next)))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_y3, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(sll_reach(curr_y3), @_vcc_oset_union(sll_reach(*((curr_y3->next))), @_vcc_oset_singleton(curr_y3)))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_y3, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y3), @_vcc_ptr_neq_null(*((curr_y3->next)))), ==(sll_max_key(curr_y3), @\int_max(*((curr_y3->key)), sll_max_key(*((curr_y3->next)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y3), @_vcc_ptr_neq_null(*((curr_y3->next)))), ==(sll_min_key(curr_y3), @\int_min(*((curr_y3->key)), sll_min_key(*((curr_y3->next)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y3), @_vcc_ptr_neq_null(*((curr_y3->next)))), ==(srtl(curr_y3), &&(&&(srtl(*((curr_y3->next))), unchecked!(@_vcc_oset_in(curr_y3, srtl_reach(*((curr_y3->next)))))), <=(*((curr_y3->key)), sll_min_key(*((curr_y3->next))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_y3, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(srtl_reach(curr_y3), @_vcc_oset_union(srtl_reach(*((curr_y3->next))), @_vcc_oset_singleton(curr_y3)))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_y3, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(sll_keys(curr_x2), @_vcc_intset_union(sll_keys(*((curr_x2->next))), @_vcc_intset_singleton(*((curr_x2->key)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(sll_list_len_next(curr_x2), unchecked+(sll_list_len_next(*((curr_x2->next))), 1))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x2), @_vcc_ptr_neq_null(*((curr_x2->next)))), ==(rsrtl(curr_x2), &&(&&(rsrtl(*((curr_x2->next))), unchecked!(@_vcc_oset_in(curr_x2, rsrtl_reach(*((curr_x2->next)))))), >=(*((curr_x2->key)), sll_max_key(*((curr_x2->next))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_x2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(rsrtl_reach(curr_x2), @_vcc_oset_union(rsrtl_reach(*((curr_x2->next))), @_vcc_oset_singleton(curr_x2)))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_x2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(sll(curr_x2), &&(sll(*((curr_x2->next))), unchecked!(@_vcc_oset_in(curr_x2, sll_reach(*((curr_x2->next)))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_x2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(sll_reach(curr_x2), @_vcc_oset_union(sll_reach(*((curr_x2->next))), @_vcc_oset_singleton(curr_x2)))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_x2, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x2), @_vcc_ptr_neq_null(*((curr_x2->next)))), ==(sll_max_key(curr_x2), @\int_max(*((curr_x2->key)), sll_max_key(*((curr_x2->next)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x2), @_vcc_ptr_neq_null(*((curr_x2->next)))), ==(sll_min_key(curr_x2), @\int_min(*((curr_x2->key)), sll_min_key(*((curr_x2->next)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x2), @_vcc_ptr_neq_null(*((curr_x2->next)))), ==(srtl(curr_x2), &&(&&(srtl(*((curr_x2->next))), unchecked!(@_vcc_oset_in(curr_x2, srtl_reach(*((curr_x2->next)))))), <=(*((curr_x2->key)), sll_min_key(*((curr_x2->next))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_x2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(srtl_reach(curr_x2), @_vcc_oset_union(srtl_reach(*((curr_x2->next))), @_vcc_oset_singleton(curr_x2)))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_x2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_keys(tmp), @_vcc_intset_union(sll_keys(*((tmp->next))), @_vcc_intset_singleton(*((tmp->key)))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_list_len_next(tmp), unchecked+(sll_list_len_next(*((tmp->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(rsrtl(tmp), &&(&&(rsrtl(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, rsrtl_reach(*((tmp->next)))))), >=(*((tmp->key)), sll_max_key(*((tmp->next))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(rsrtl_reach(tmp), @_vcc_oset_union(rsrtl_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll(tmp), &&(sll(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, sll_reach(*((tmp->next)))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_reach(tmp), @_vcc_oset_union(sll_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(sll_max_key(tmp), @\int_max(*((tmp->key)), sll_max_key(*((tmp->next)))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#tmp, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(sll_min_key(tmp), @\int_min(*((tmp->key)), sll_min_key(*((tmp->next)))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#tmp, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(srtl(tmp), &&(&&(srtl(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, srtl_reach(*((tmp->next)))))), <=(*((tmp->key)), sll_min_key(*((tmp->next))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(srtl_reach(tmp), @_vcc_oset_union(srtl_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_keys(curr_x), @_vcc_intset_union(sll_keys(*((curr_x->next))), @_vcc_intset_singleton(*((curr_x->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_list_len_next(curr_x), unchecked+(sll_list_len_next(*((curr_x->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(rsrtl(curr_x), &&(&&(rsrtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, rsrtl_reach(*((curr_x->next)))))), >=(*((curr_x->key)), sll_max_key(*((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(rsrtl_reach(curr_x), @_vcc_oset_union(rsrtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll(curr_x), &&(sll(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, sll_reach(*((curr_x->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_reach(curr_x), @_vcc_oset_union(sll_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_max_key(curr_x), @\int_max(*((curr_x->key)), sll_max_key(*((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_min_key(curr_x), @\int_min(*((curr_x->key)), sll_min_key(*((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(srtl(curr_x), &&(&&(srtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, srtl_reach(*((curr_x->next)))))), <=(*((curr_x->key)), sll_min_key(*((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(srtl_reach(curr_x), @_vcc_oset_union(srtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_keys(curr_y), @_vcc_intset_union(sll_keys(*((curr_y->next))), @_vcc_intset_singleton(*((curr_y->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_list_len_next(curr_y), unchecked+(sll_list_len_next(*((curr_y->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(rsrtl(curr_y), &&(&&(rsrtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, rsrtl_reach(*((curr_y->next)))))), >=(*((curr_y->key)), sll_max_key(*((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(rsrtl_reach(curr_y), @_vcc_oset_union(rsrtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll(curr_y), &&(sll(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, sll_reach(*((curr_y->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_reach(curr_y), @_vcc_oset_union(sll_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_max_key(curr_y), @\int_max(*((curr_y->key)), sll_max_key(*((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_min_key(curr_y), @\int_min(*((curr_y->key)), sll_min_key(*((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(srtl(curr_y), &&(&&(srtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, srtl_reach(*((curr_y->next)))))), <=(*((curr_y->key)), sll_min_key(*((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(srtl_reach(curr_y), @_vcc_oset_union(srtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_keys(z), @_vcc_intset_union(sll_keys(*((z->next))), @_vcc_intset_singleton(*((z->key)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_list_len_next(z), unchecked+(sll_list_len_next(*((z->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(rsrtl(z), &&(&&(rsrtl(*((z->next))), unchecked!(@_vcc_oset_in(z, rsrtl_reach(*((z->next)))))), >=(*((z->key)), sll_max_key(*((z->next))))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(rsrtl_reach(z), @_vcc_oset_union(rsrtl_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll(z), &&(sll(*((z->next))), unchecked!(@_vcc_oset_in(z, sll_reach(*((z->next)))))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_reach(z), @_vcc_oset_union(sll_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_max_key(z), @\int_max(*((z->key)), sll_max_key(*((z->next)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_min_key(z), @\int_min(*((z->key)), sll_min_key(*((z->next)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(srtl(z), &&(&&(srtl(*((z->next))), unchecked!(@_vcc_oset_in(z, srtl_reach(*((z->next)))))), <=(*((z->key)), sll_min_key(*((z->next))))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(srtl_reach(z), @_vcc_oset_union(srtl_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_keys(y), @_vcc_intset_union(sll_keys(*((y->next))), @_vcc_intset_singleton(*((y->key)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_list_len_next(y), unchecked+(sll_list_len_next(*((y->next))), 1))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(rsrtl(y), &&(&&(rsrtl(*((y->next))), unchecked!(@_vcc_oset_in(y, rsrtl_reach(*((y->next)))))), >=(*((y->key)), sll_max_key(*((y->next))))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(rsrtl_reach(y), @_vcc_oset_union(rsrtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll(y), &&(sll(*((y->next))), unchecked!(@_vcc_oset_in(y, sll_reach(*((y->next)))))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_reach(y), @_vcc_oset_union(sll_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_max_key(y), @\int_max(*((y->key)), sll_max_key(*((y->next)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_min_key(y), @\int_min(*((y->key)), sll_min_key(*((y->next)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(srtl(y), &&(&&(srtl(*((y->next))), unchecked!(@_vcc_oset_in(y, srtl_reach(*((y->next)))))), <=(*((y->key)), sll_min_key(*((y->next))))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(srtl_reach(y), @_vcc_oset_union(srtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_keys(x), @_vcc_intset_union(sll_keys(*((x->next))), @_vcc_intset_singleton(*((x->key)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_list_len_next(x), unchecked+(sll_list_len_next(*((x->next))), 1))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(rsrtl(x), &&(&&(rsrtl(*((x->next))), unchecked!(@_vcc_oset_in(x, rsrtl_reach(*((x->next)))))), >=(*((x->key)), sll_max_key(*((x->next))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(rsrtl_reach(x), @_vcc_oset_union(rsrtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll(x), &&(sll(*((x->next))), unchecked!(@_vcc_oset_in(x, sll_reach(*((x->next)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_reach(x), @_vcc_oset_union(sll_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_max_key(x), @\int_max(*((x->key)), sll_max_key(*((x->next)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_min_key(x), @\int_min(*((x->key)), sll_min_key(*((x->next)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(srtl(x), &&(&&(srtl(*((x->next))), unchecked!(@_vcc_oset_in(x, srtl_reach(*((x->next)))))), <=(*((x->key)), sll_min_key(*((x->next))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(srtl_reach(x), @_vcc_oset_union(srtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_keys(last_z), @_vcc_intset_union(sll_keys(*((last_z->next))), @_vcc_intset_singleton(*((last_z->key)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#last_z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(rsrtl(last_z), &&(&&(rsrtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, rsrtl_reach(*((last_z->next)))))), >=(*((last_z->key)), sll_max_key(*((last_z->next))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_max_key(last_z), @\int_max(*((last_z->key)), sll_max_key(*((last_z->next)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_min_key(last_z), @\int_min(*((last_z->key)), sll_min_key(*((last_z->next)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(srtl(last_z), &&(&&(srtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, srtl_reach(*((last_z->next)))))), <=(*((last_z->key)), sll_min_key(*((last_z->next))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg(y, curr_y), &&(sll_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, sll_lseg_reach(*((y->next)), curr_y)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_reach(y, curr_y), @_vcc_oset_union(sll_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_keys(y, curr_y), @_vcc_intset_union(sll_lseg_keys(*((y->next)), curr_y), @_vcc_intset_singleton(*((y->key)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_len_next(y, curr_y), unchecked+(sll_lseg_len_next(*((y->next)), curr_y), 1))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_max_key(y, curr_y), @\int_max(*((y->key)), sll_lseg_max_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_min_key(y, curr_y), @\int_min(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(srtl_lseg(y, curr_y), &&(&&(srtl_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, srtl_lseg_reach(*((y->next)), curr_y)))), <=(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(srtl_lseg_reach(y, curr_y), @_vcc_oset_union(srtl_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg(x, curr_x), &&(sll_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, sll_lseg_reach(*((x->next)), curr_x)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_reach(x, curr_x), @_vcc_oset_union(sll_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_keys(x, curr_x), @_vcc_intset_union(sll_lseg_keys(*((x->next)), curr_x), @_vcc_intset_singleton(*((x->key)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_len_next(x, curr_x), unchecked+(sll_lseg_len_next(*((x->next)), curr_x), 1))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_max_key(x, curr_x), @\int_max(*((x->key)), sll_lseg_max_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_min_key(x, curr_x), @\int_min(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(srtl_lseg(x, curr_x), &&(&&(srtl_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, srtl_lseg_reach(*((x->next)), curr_x)))), <=(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(srtl_lseg_reach(x, curr_x), @_vcc_oset_union(srtl_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), ==(sll_lseg(z, tmp), &&(sll_lseg(*((z->next)), tmp), unchecked!(@_vcc_oset_in(z, sll_lseg_reach(*((z->next)), tmp)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), ==(sll_lseg_reach(z, tmp), @_vcc_oset_union(sll_lseg_reach(*((z->next)), tmp), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), ==(sll_lseg_keys(z, tmp), @_vcc_intset_union(sll_lseg_keys(*((z->next)), tmp), @_vcc_intset_singleton(*((z->key)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), ==(sll_lseg_len_next(z, tmp), unchecked+(sll_lseg_len_next(*((z->next)), tmp), 1))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), @_vcc_ptr_neq_pure(*((z->next)), tmp)), ==(sll_lseg_max_key(z, tmp), @\int_max(*((z->key)), sll_lseg_max_key(*((z->next)), tmp)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), @_vcc_ptr_neq_pure(*((z->next)), tmp)), ==(sll_lseg_min_key(z, tmp), @\int_min(*((z->key)), sll_lseg_min_key(*((z->next)), tmp)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), @_vcc_ptr_neq_pure(*((z->next)), tmp)), ==(srtl_lseg(z, tmp), &&(&&(srtl_lseg(*((z->next)), tmp), unchecked!(@_vcc_oset_in(z, srtl_lseg_reach(*((z->next)), tmp)))), <=(*((z->key)), sll_lseg_min_key(*((z->next)), tmp))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), ==(srtl_lseg_reach(z, tmp), @_vcc_oset_union(srtl_lseg_reach(*((z->next)), tmp), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg(x, curr_x), &&(sll_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, sll_lseg_reach(*((x->next)), curr_x)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_reach(x, curr_x), @_vcc_oset_union(sll_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_keys(x, curr_x), @_vcc_intset_union(sll_lseg_keys(*((x->next)), curr_x), @_vcc_intset_singleton(*((x->key)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_len_next(x, curr_x), unchecked+(sll_lseg_len_next(*((x->next)), curr_x), 1))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_max_key(x, curr_x), @\int_max(*((x->key)), sll_lseg_max_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_min_key(x, curr_x), @\int_min(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(srtl_lseg(x, curr_x), &&(&&(srtl_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, srtl_lseg_reach(*((x->next)), curr_x)))), <=(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(srtl_lseg_reach(x, curr_x), @_vcc_oset_union(srtl_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg(y, curr_y), &&(sll_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, sll_lseg_reach(*((y->next)), curr_y)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_reach(y, curr_y), @_vcc_oset_union(sll_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_keys(y, curr_y), @_vcc_intset_union(sll_lseg_keys(*((y->next)), curr_y), @_vcc_intset_singleton(*((y->key)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_len_next(y, curr_y), unchecked+(sll_lseg_len_next(*((y->next)), curr_y), 1))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_max_key(y, curr_y), @\int_max(*((y->key)), sll_lseg_max_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_min_key(y, curr_y), @\int_min(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(srtl_lseg(y, curr_y), &&(&&(srtl_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, srtl_lseg_reach(*((y->next)), curr_y)))), <=(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(srtl_lseg_reach(y, curr_y), @_vcc_oset_union(srtl_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==(*((last_z->key)), +(*((curr_x->key)), *((curr_y->key)))); 
            assume $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) == $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) + $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node));
            // _math \state _dryad_S12; 
            // _dryad_S12 := @_vcc_current_state(@state); 
            SL#_dryad_S12 := $current_state($s);
            // _math \state stmtexpr9#17; 
            // stmtexpr9#17 := _dryad_S12; 
            stmtexpr9#17 := SL#_dryad_S12;
            // assert @prim_writes_check((tmp->next)); 
            assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#tmp, ^s_node), s_node.next));
            // *(tmp->next) := last_z; 
            call $write_int(s_node.next, $phys_ptr_cast(L#tmp, ^s_node), $ptr_to_int($phys_ptr_cast(L#last_z, ^s_node)));
            assume $full_stop_ext(#tok$3^79.5, $s);
            // _math \state _dryad_S13; 
            // _dryad_S13 := @_vcc_current_state(@state); 
            SL#_dryad_S13 := $current_state($s);
            // _math \state stmtexpr10#18; 
            // stmtexpr10#18 := _dryad_S13; 
            stmtexpr10#18 := SL#_dryad_S13;
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_y3)))), ==(old(_dryad_S12, sll_keys(curr_y3)), old(_dryad_S13, sll_keys(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_keys(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_keys(SL#_dryad_S13, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_y3)))), ==(old(_dryad_S12, sll_list_len_next(curr_y3)), old(_dryad_S13, sll_list_len_next(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_list_len_next(SL#_dryad_S13, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, rsrtl_reach(curr_y3)))), ==(old(_dryad_S12, rsrtl(curr_y3)), old(_dryad_S13, rsrtl(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#rsrtl(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#rsrtl(SL#_dryad_S13, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, rsrtl_reach(curr_y3)))), ==(old(_dryad_S12, rsrtl_reach(curr_y3)), old(_dryad_S13, rsrtl_reach(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#rsrtl_reach(SL#_dryad_S13, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_y3)))), ==(old(_dryad_S12, sll(curr_y3)), old(_dryad_S13, sll(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll(SL#_dryad_S13, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_y3)))), ==(old(_dryad_S12, sll_reach(curr_y3)), old(_dryad_S13, sll_reach(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_reach(SL#_dryad_S13, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_y3)))), ==(old(_dryad_S12, sll_max_key(curr_y3)), old(_dryad_S13, sll_max_key(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_max_key(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_max_key(SL#_dryad_S13, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_y3)))), ==(old(_dryad_S12, sll_min_key(curr_y3)), old(_dryad_S13, sll_min_key(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_min_key(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_min_key(SL#_dryad_S13, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_reach(curr_y3)))), ==(old(_dryad_S12, srtl(curr_y3)), old(_dryad_S13, srtl(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#srtl(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#srtl(SL#_dryad_S13, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_reach(curr_y3)))), ==(old(_dryad_S12, srtl_reach(curr_y3)), old(_dryad_S13, srtl_reach(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#srtl_reach(SL#_dryad_S13, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_x2)))), ==(old(_dryad_S12, sll_keys(curr_x2)), old(_dryad_S13, sll_keys(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_keys(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_keys(SL#_dryad_S13, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_x2)))), ==(old(_dryad_S12, sll_list_len_next(curr_x2)), old(_dryad_S13, sll_list_len_next(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_list_len_next(SL#_dryad_S13, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, rsrtl_reach(curr_x2)))), ==(old(_dryad_S12, rsrtl(curr_x2)), old(_dryad_S13, rsrtl(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#rsrtl(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#rsrtl(SL#_dryad_S13, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, rsrtl_reach(curr_x2)))), ==(old(_dryad_S12, rsrtl_reach(curr_x2)), old(_dryad_S13, rsrtl_reach(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#rsrtl_reach(SL#_dryad_S13, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_x2)))), ==(old(_dryad_S12, sll(curr_x2)), old(_dryad_S13, sll(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll(SL#_dryad_S13, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_x2)))), ==(old(_dryad_S12, sll_reach(curr_x2)), old(_dryad_S13, sll_reach(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_reach(SL#_dryad_S13, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_x2)))), ==(old(_dryad_S12, sll_max_key(curr_x2)), old(_dryad_S13, sll_max_key(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_max_key(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_max_key(SL#_dryad_S13, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_x2)))), ==(old(_dryad_S12, sll_min_key(curr_x2)), old(_dryad_S13, sll_min_key(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_min_key(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_min_key(SL#_dryad_S13, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_reach(curr_x2)))), ==(old(_dryad_S12, srtl(curr_x2)), old(_dryad_S13, srtl(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#srtl(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#srtl(SL#_dryad_S13, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_reach(curr_x2)))), ==(old(_dryad_S12, srtl_reach(curr_x2)), old(_dryad_S13, srtl_reach(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#srtl_reach(SL#_dryad_S13, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_x)))), ==(old(_dryad_S12, sll_keys(curr_x)), old(_dryad_S13, sll_keys(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_keys(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_keys(SL#_dryad_S13, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_x)))), ==(old(_dryad_S12, sll_list_len_next(curr_x)), old(_dryad_S13, sll_list_len_next(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S13, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, rsrtl_reach(curr_x)))), ==(old(_dryad_S12, rsrtl(curr_x)), old(_dryad_S13, rsrtl(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#rsrtl(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node)) == F#rsrtl(SL#_dryad_S13, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, rsrtl_reach(curr_x)))), ==(old(_dryad_S12, rsrtl_reach(curr_x)), old(_dryad_S13, rsrtl_reach(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S13, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_x)))), ==(old(_dryad_S12, sll(curr_x)), old(_dryad_S13, sll(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll(SL#_dryad_S13, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_x)))), ==(old(_dryad_S12, sll_reach(curr_x)), old(_dryad_S13, sll_reach(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_reach(SL#_dryad_S13, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_x)))), ==(old(_dryad_S12, sll_max_key(curr_x)), old(_dryad_S13, sll_max_key(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_max_key(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_max_key(SL#_dryad_S13, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_x)))), ==(old(_dryad_S12, sll_min_key(curr_x)), old(_dryad_S13, sll_min_key(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_min_key(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_min_key(SL#_dryad_S13, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_reach(curr_x)))), ==(old(_dryad_S12, srtl(curr_x)), old(_dryad_S13, srtl(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl(SL#_dryad_S13, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_reach(curr_x)))), ==(old(_dryad_S12, srtl_reach(curr_x)), old(_dryad_S13, srtl_reach(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_reach(SL#_dryad_S13, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_y)))), ==(old(_dryad_S12, sll_keys(curr_y)), old(_dryad_S13, sll_keys(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_keys(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_keys(SL#_dryad_S13, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_y)))), ==(old(_dryad_S12, sll_list_len_next(curr_y)), old(_dryad_S13, sll_list_len_next(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S13, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, rsrtl_reach(curr_y)))), ==(old(_dryad_S12, rsrtl(curr_y)), old(_dryad_S13, rsrtl(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#rsrtl(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node)) == F#rsrtl(SL#_dryad_S13, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, rsrtl_reach(curr_y)))), ==(old(_dryad_S12, rsrtl_reach(curr_y)), old(_dryad_S13, rsrtl_reach(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S13, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_y)))), ==(old(_dryad_S12, sll(curr_y)), old(_dryad_S13, sll(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll(SL#_dryad_S13, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_y)))), ==(old(_dryad_S12, sll_reach(curr_y)), old(_dryad_S13, sll_reach(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_reach(SL#_dryad_S13, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_y)))), ==(old(_dryad_S12, sll_max_key(curr_y)), old(_dryad_S13, sll_max_key(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_max_key(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_max_key(SL#_dryad_S13, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_y)))), ==(old(_dryad_S12, sll_min_key(curr_y)), old(_dryad_S13, sll_min_key(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_min_key(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_min_key(SL#_dryad_S13, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_reach(curr_y)))), ==(old(_dryad_S12, srtl(curr_y)), old(_dryad_S13, srtl(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl(SL#_dryad_S13, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_reach(curr_y)))), ==(old(_dryad_S12, srtl_reach(curr_y)), old(_dryad_S13, srtl_reach(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_reach(SL#_dryad_S13, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(z)))), ==(old(_dryad_S12, sll_keys(z)), old(_dryad_S13, sll_keys(z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_keys(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node)) == F#sll_keys(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(z)))), ==(old(_dryad_S12, sll_list_len_next(z)), old(_dryad_S13, sll_list_len_next(z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node)) == F#sll_list_len_next(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, rsrtl_reach(z)))), ==(old(_dryad_S12, rsrtl(z)), old(_dryad_S13, rsrtl(z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node))) ==> F#rsrtl(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node)) == F#rsrtl(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, rsrtl_reach(z)))), ==(old(_dryad_S12, rsrtl_reach(z)), old(_dryad_S13, rsrtl_reach(z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node)) == F#rsrtl_reach(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(z)))), ==(old(_dryad_S12, sll(z)), old(_dryad_S13, sll(z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node)) == F#sll(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(z)))), ==(old(_dryad_S12, sll_reach(z)), old(_dryad_S13, sll_reach(z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node)) == F#sll_reach(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(z)))), ==(old(_dryad_S12, sll_max_key(z)), old(_dryad_S13, sll_max_key(z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_max_key(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node)) == F#sll_max_key(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(z)))), ==(old(_dryad_S12, sll_min_key(z)), old(_dryad_S13, sll_min_key(z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_min_key(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node)) == F#sll_min_key(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_reach(z)))), ==(old(_dryad_S12, srtl(z)), old(_dryad_S13, srtl(z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node))) ==> F#srtl(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node)) == F#srtl(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_reach(z)))), ==(old(_dryad_S12, srtl_reach(z)), old(_dryad_S13, srtl_reach(z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node))) ==> F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node)) == F#srtl_reach(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(last_z)))), ==(old(_dryad_S12, sll_keys(last_z)), old(_dryad_S13, sll_keys(last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_keys(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_keys(SL#_dryad_S13, $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(last_z)))), ==(old(_dryad_S12, sll_list_len_next(last_z)), old(_dryad_S13, sll_list_len_next(last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_list_len_next(SL#_dryad_S13, $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, rsrtl_reach(last_z)))), ==(old(_dryad_S12, rsrtl(last_z)), old(_dryad_S13, rsrtl(last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#rsrtl(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node)) == F#rsrtl(SL#_dryad_S13, $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, rsrtl_reach(last_z)))), ==(old(_dryad_S12, rsrtl_reach(last_z)), old(_dryad_S13, rsrtl_reach(last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node)) == F#rsrtl_reach(SL#_dryad_S13, $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(last_z)))), ==(old(_dryad_S12, sll(last_z)), old(_dryad_S13, sll(last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll(SL#_dryad_S13, $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(last_z)))), ==(old(_dryad_S12, sll_reach(last_z)), old(_dryad_S13, sll_reach(last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_reach(SL#_dryad_S13, $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(last_z)))), ==(old(_dryad_S12, sll_max_key(last_z)), old(_dryad_S13, sll_max_key(last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_max_key(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_max_key(SL#_dryad_S13, $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(last_z)))), ==(old(_dryad_S12, sll_min_key(last_z)), old(_dryad_S13, sll_min_key(last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_min_key(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_min_key(SL#_dryad_S13, $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_reach(last_z)))), ==(old(_dryad_S12, srtl(last_z)), old(_dryad_S13, srtl(last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#srtl(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl(SL#_dryad_S13, $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_reach(last_z)))), ==(old(_dryad_S12, srtl_reach(last_z)), old(_dryad_S13, srtl_reach(last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl_reach(SL#_dryad_S13, $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(y)))), ==(old(_dryad_S12, sll_keys(y)), old(_dryad_S13, sll_keys(y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_keys(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node)) == F#sll_keys(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(y)))), ==(old(_dryad_S12, sll_list_len_next(y)), old(_dryad_S13, sll_list_len_next(y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, rsrtl_reach(y)))), ==(old(_dryad_S12, rsrtl(y)), old(_dryad_S13, rsrtl(y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node))) ==> F#rsrtl(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node)) == F#rsrtl(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, rsrtl_reach(y)))), ==(old(_dryad_S12, rsrtl_reach(y)), old(_dryad_S13, rsrtl_reach(y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(y)))), ==(old(_dryad_S12, sll(y)), old(_dryad_S13, sll(y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node)) == F#sll(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(y)))), ==(old(_dryad_S12, sll_reach(y)), old(_dryad_S13, sll_reach(y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node)) == F#sll_reach(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(y)))), ==(old(_dryad_S12, sll_max_key(y)), old(_dryad_S13, sll_max_key(y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_max_key(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node)) == F#sll_max_key(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(y)))), ==(old(_dryad_S12, sll_min_key(y)), old(_dryad_S13, sll_min_key(y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_min_key(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node)) == F#sll_min_key(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_reach(y)))), ==(old(_dryad_S12, srtl(y)), old(_dryad_S13, srtl(y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node))) ==> F#srtl(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node)) == F#srtl(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_reach(y)))), ==(old(_dryad_S12, srtl_reach(y)), old(_dryad_S13, srtl_reach(y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node))) ==> F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node)) == F#srtl_reach(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(x)))), ==(old(_dryad_S12, sll_keys(x)), old(_dryad_S13, sll_keys(x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_keys(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node)) == F#sll_keys(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(x)))), ==(old(_dryad_S12, sll_list_len_next(x)), old(_dryad_S13, sll_list_len_next(x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, rsrtl_reach(x)))), ==(old(_dryad_S12, rsrtl(x)), old(_dryad_S13, rsrtl(x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node))) ==> F#rsrtl(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node)) == F#rsrtl(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, rsrtl_reach(x)))), ==(old(_dryad_S12, rsrtl_reach(x)), old(_dryad_S13, rsrtl_reach(x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(x)))), ==(old(_dryad_S12, sll(x)), old(_dryad_S13, sll(x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node)) == F#sll(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(x)))), ==(old(_dryad_S12, sll_reach(x)), old(_dryad_S13, sll_reach(x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node)) == F#sll_reach(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(x)))), ==(old(_dryad_S12, sll_max_key(x)), old(_dryad_S13, sll_max_key(x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_max_key(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node)) == F#sll_max_key(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(x)))), ==(old(_dryad_S12, sll_min_key(x)), old(_dryad_S13, sll_min_key(x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_min_key(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node)) == F#sll_min_key(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_reach(x)))), ==(old(_dryad_S12, srtl(x)), old(_dryad_S13, srtl(x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node))) ==> F#srtl(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node)) == F#srtl(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_reach(x)))), ==(old(_dryad_S12, srtl_reach(x)), old(_dryad_S13, srtl_reach(x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node))) ==> F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node)) == F#srtl_reach(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S12, sll_lseg(y, curr_y)), old(_dryad_S13, sll_lseg(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S12, sll_lseg_reach(y, curr_y)), old(_dryad_S13, sll_lseg_reach(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S12, sll_lseg_keys(y, curr_y)), old(_dryad_S13, sll_lseg_keys(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S12, sll_lseg_len_next(y, curr_y)), old(_dryad_S13, sll_lseg_len_next(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S12, sll_lseg_max_key(y, curr_y)), old(_dryad_S13, sll_lseg_max_key(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S12, sll_lseg_min_key(y, curr_y)), old(_dryad_S13, sll_lseg_min_key(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_lseg_reach(y, curr_y)))), ==(old(_dryad_S12, srtl_lseg(y, curr_y)), old(_dryad_S13, srtl_lseg(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_lseg(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_lseg_reach(y, curr_y)))), ==(old(_dryad_S12, srtl_lseg_reach(y, curr_y)), old(_dryad_S13, srtl_lseg_reach(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S12, sll_lseg(z, last_z)), old(_dryad_S13, sll_lseg(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S12, sll_lseg_reach(z, last_z)), old(_dryad_S13, sll_lseg_reach(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S12, sll_lseg_keys(z, last_z)), old(_dryad_S13, sll_lseg_keys(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S12, sll_lseg_len_next(z, last_z)), old(_dryad_S13, sll_lseg_len_next(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S12, sll_lseg_max_key(z, last_z)), old(_dryad_S13, sll_lseg_max_key(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S12, sll_lseg_min_key(z, last_z)), old(_dryad_S13, sll_lseg_min_key(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_lseg_reach(z, last_z)))), ==(old(_dryad_S12, srtl_lseg(z, last_z)), old(_dryad_S13, srtl_lseg(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl_lseg(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_lseg_reach(z, last_z)))), ==(old(_dryad_S12, srtl_lseg_reach(z, last_z)), old(_dryad_S13, srtl_lseg_reach(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S12, sll_lseg(x, curr_x)), old(_dryad_S13, sll_lseg(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S12, sll_lseg_reach(x, curr_x)), old(_dryad_S13, sll_lseg_reach(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S12, sll_lseg_keys(x, curr_x)), old(_dryad_S13, sll_lseg_keys(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S12, sll_lseg_len_next(x, curr_x)), old(_dryad_S13, sll_lseg_len_next(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S12, sll_lseg_max_key(x, curr_x)), old(_dryad_S13, sll_lseg_max_key(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S12, sll_lseg_min_key(x, curr_x)), old(_dryad_S13, sll_lseg_min_key(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_lseg_reach(x, curr_x)))), ==(old(_dryad_S12, srtl_lseg(x, curr_x)), old(_dryad_S13, srtl_lseg(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_lseg(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_lseg_reach(x, curr_x)))), ==(old(_dryad_S12, srtl_lseg_reach(x, curr_x)), old(_dryad_S13, srtl_lseg_reach(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S12, sll_lseg(z, tmp)), old(_dryad_S13, sll_lseg(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S12, sll_lseg_reach(z, tmp)), old(_dryad_S13, sll_lseg_reach(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S12, sll_lseg_keys(z, tmp)), old(_dryad_S13, sll_lseg_keys(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S12, sll_lseg_len_next(z, tmp)), old(_dryad_S13, sll_lseg_len_next(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S12, sll_lseg_max_key(z, tmp)), old(_dryad_S13, sll_lseg_max_key(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S12, sll_lseg_min_key(z, tmp)), old(_dryad_S13, sll_lseg_min_key(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_lseg_reach(z, tmp)))), ==(old(_dryad_S12, srtl_lseg(z, tmp)), old(_dryad_S13, srtl_lseg(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl_lseg(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_lseg_reach(z, tmp)))), ==(old(_dryad_S12, srtl_lseg_reach(z, tmp)), old(_dryad_S13, srtl_lseg_reach(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S12, sll_lseg(x, curr_x)), old(_dryad_S13, sll_lseg(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S12, sll_lseg_reach(x, curr_x)), old(_dryad_S13, sll_lseg_reach(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S12, sll_lseg_keys(x, curr_x)), old(_dryad_S13, sll_lseg_keys(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S12, sll_lseg_len_next(x, curr_x)), old(_dryad_S13, sll_lseg_len_next(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S12, sll_lseg_max_key(x, curr_x)), old(_dryad_S13, sll_lseg_max_key(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S12, sll_lseg_min_key(x, curr_x)), old(_dryad_S13, sll_lseg_min_key(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_lseg_reach(x, curr_x)))), ==(old(_dryad_S12, srtl_lseg(x, curr_x)), old(_dryad_S13, srtl_lseg(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_lseg(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_lseg_reach(x, curr_x)))), ==(old(_dryad_S12, srtl_lseg_reach(x, curr_x)), old(_dryad_S13, srtl_lseg_reach(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S12, sll_lseg(y, curr_y)), old(_dryad_S13, sll_lseg(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S12, sll_lseg_reach(y, curr_y)), old(_dryad_S13, sll_lseg_reach(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S12, sll_lseg_keys(y, curr_y)), old(_dryad_S13, sll_lseg_keys(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S12, sll_lseg_len_next(y, curr_y)), old(_dryad_S13, sll_lseg_len_next(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S12, sll_lseg_max_key(y, curr_y)), old(_dryad_S13, sll_lseg_max_key(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S12, sll_lseg_min_key(y, curr_y)), old(_dryad_S13, sll_lseg_min_key(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_lseg_reach(y, curr_y)))), ==(old(_dryad_S12, srtl_lseg(y, curr_y)), old(_dryad_S13, srtl_lseg(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_lseg(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_lseg_reach(y, curr_y)))), ==(old(_dryad_S12, srtl_lseg_reach(y, curr_y)), old(_dryad_S13, srtl_lseg_reach(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(tmp, curr_y3)), ==(*((curr_y3->key)), old(_dryad_S12, *((curr_y3->key))))); 
            assume !($phys_ptr_cast(L#tmp, ^s_node) == $phys_ptr_cast(SL#curr_y3, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $rd_inv(SL#_dryad_S12, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(tmp, curr_y3)), @_vcc_ptr_eq_pure(*((curr_y3->next)), old(_dryad_S12, *((curr_y3->next))))); 
            assume !($phys_ptr_cast(L#tmp, ^s_node) == $phys_ptr_cast(SL#curr_y3, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S12, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(tmp, curr_x2)), ==(*((curr_x2->key)), old(_dryad_S12, *((curr_x2->key))))); 
            assume !($phys_ptr_cast(L#tmp, ^s_node) == $phys_ptr_cast(SL#curr_x2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $rd_inv(SL#_dryad_S12, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(tmp, curr_x2)), @_vcc_ptr_eq_pure(*((curr_x2->next)), old(_dryad_S12, *((curr_x2->next))))); 
            assume !($phys_ptr_cast(L#tmp, ^s_node) == $phys_ptr_cast(SL#curr_x2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S12, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(tmp, curr_x)), ==(*((curr_x->key)), old(_dryad_S12, *((curr_x->key))))); 
            assume !($phys_ptr_cast(L#tmp, ^s_node) == $phys_ptr_cast(L#curr_x, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) == $rd_inv(SL#_dryad_S12, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(tmp, curr_x)), @_vcc_ptr_eq_pure(*((curr_x->next)), old(_dryad_S12, *((curr_x->next))))); 
            assume !($phys_ptr_cast(L#tmp, ^s_node) == $phys_ptr_cast(L#curr_x, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S12, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(tmp, curr_y)), ==(*((curr_y->key)), old(_dryad_S12, *((curr_y->key))))); 
            assume !($phys_ptr_cast(L#tmp, ^s_node) == $phys_ptr_cast(L#curr_y, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) == $rd_inv(SL#_dryad_S12, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(tmp, curr_y)), @_vcc_ptr_eq_pure(*((curr_y->next)), old(_dryad_S12, *((curr_y->next))))); 
            assume !($phys_ptr_cast(L#tmp, ^s_node) == $phys_ptr_cast(L#curr_y, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S12, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(tmp, z)), ==(*((z->key)), old(_dryad_S12, *((z->key))))); 
            assume !($phys_ptr_cast(L#tmp, ^s_node) == $phys_ptr_cast(L#z, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) == $rd_inv(SL#_dryad_S12, s_node.key, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(tmp, z)), @_vcc_ptr_eq_pure(*((z->next)), old(_dryad_S12, *((z->next))))); 
            assume !($phys_ptr_cast(L#tmp, ^s_node) == $phys_ptr_cast(L#z, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S12, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(tmp, last_z)), ==(*((last_z->key)), old(_dryad_S12, *((last_z->key))))); 
            assume !($phys_ptr_cast(L#tmp, ^s_node) == $phys_ptr_cast(L#last_z, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) == $rd_inv(SL#_dryad_S12, s_node.key, $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(tmp, last_z)), @_vcc_ptr_eq_pure(*((last_z->next)), old(_dryad_S12, *((last_z->next))))); 
            assume !($phys_ptr_cast(L#tmp, ^s_node) == $phys_ptr_cast(L#last_z, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S12, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(tmp, y)), ==(*((y->key)), old(_dryad_S12, *((y->key))))); 
            assume !($phys_ptr_cast(L#tmp, ^s_node) == $phys_ptr_cast(P#y, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) == $rd_inv(SL#_dryad_S12, s_node.key, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(tmp, y)), @_vcc_ptr_eq_pure(*((y->next)), old(_dryad_S12, *((y->next))))); 
            assume !($phys_ptr_cast(L#tmp, ^s_node) == $phys_ptr_cast(P#y, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S12, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(tmp, x)), ==(*((x->key)), old(_dryad_S12, *((x->key))))); 
            assume !($phys_ptr_cast(L#tmp, ^s_node) == $phys_ptr_cast(P#x, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) == $rd_inv(SL#_dryad_S12, s_node.key, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(tmp, x)), @_vcc_ptr_eq_pure(*((x->next)), old(_dryad_S12, *((x->next))))); 
            assume !($phys_ptr_cast(L#tmp, ^s_node) == $phys_ptr_cast(P#x, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S12, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node);
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(sll_keys(curr_y3), @_vcc_intset_union(sll_keys(*((curr_y3->next))), @_vcc_intset_singleton(*((curr_y3->key)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(sll_list_len_next(curr_y3), unchecked+(sll_list_len_next(*((curr_y3->next))), 1))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y3), @_vcc_ptr_neq_null(*((curr_y3->next)))), ==(rsrtl(curr_y3), &&(&&(rsrtl(*((curr_y3->next))), unchecked!(@_vcc_oset_in(curr_y3, rsrtl_reach(*((curr_y3->next)))))), >=(*((curr_y3->key)), sll_max_key(*((curr_y3->next))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_y3, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(rsrtl_reach(curr_y3), @_vcc_oset_union(rsrtl_reach(*((curr_y3->next))), @_vcc_oset_singleton(curr_y3)))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_y3, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(sll(curr_y3), &&(sll(*((curr_y3->next))), unchecked!(@_vcc_oset_in(curr_y3, sll_reach(*((curr_y3->next)))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_y3, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(sll_reach(curr_y3), @_vcc_oset_union(sll_reach(*((curr_y3->next))), @_vcc_oset_singleton(curr_y3)))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_y3, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y3), @_vcc_ptr_neq_null(*((curr_y3->next)))), ==(sll_max_key(curr_y3), @\int_max(*((curr_y3->key)), sll_max_key(*((curr_y3->next)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y3), @_vcc_ptr_neq_null(*((curr_y3->next)))), ==(sll_min_key(curr_y3), @\int_min(*((curr_y3->key)), sll_min_key(*((curr_y3->next)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y3), @_vcc_ptr_neq_null(*((curr_y3->next)))), ==(srtl(curr_y3), &&(&&(srtl(*((curr_y3->next))), unchecked!(@_vcc_oset_in(curr_y3, srtl_reach(*((curr_y3->next)))))), <=(*((curr_y3->key)), sll_min_key(*((curr_y3->next))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_y3, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(srtl_reach(curr_y3), @_vcc_oset_union(srtl_reach(*((curr_y3->next))), @_vcc_oset_singleton(curr_y3)))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_y3, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(sll_keys(curr_x2), @_vcc_intset_union(sll_keys(*((curr_x2->next))), @_vcc_intset_singleton(*((curr_x2->key)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(sll_list_len_next(curr_x2), unchecked+(sll_list_len_next(*((curr_x2->next))), 1))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x2), @_vcc_ptr_neq_null(*((curr_x2->next)))), ==(rsrtl(curr_x2), &&(&&(rsrtl(*((curr_x2->next))), unchecked!(@_vcc_oset_in(curr_x2, rsrtl_reach(*((curr_x2->next)))))), >=(*((curr_x2->key)), sll_max_key(*((curr_x2->next))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_x2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(rsrtl_reach(curr_x2), @_vcc_oset_union(rsrtl_reach(*((curr_x2->next))), @_vcc_oset_singleton(curr_x2)))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_x2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(sll(curr_x2), &&(sll(*((curr_x2->next))), unchecked!(@_vcc_oset_in(curr_x2, sll_reach(*((curr_x2->next)))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_x2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(sll_reach(curr_x2), @_vcc_oset_union(sll_reach(*((curr_x2->next))), @_vcc_oset_singleton(curr_x2)))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_x2, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x2), @_vcc_ptr_neq_null(*((curr_x2->next)))), ==(sll_max_key(curr_x2), @\int_max(*((curr_x2->key)), sll_max_key(*((curr_x2->next)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x2), @_vcc_ptr_neq_null(*((curr_x2->next)))), ==(sll_min_key(curr_x2), @\int_min(*((curr_x2->key)), sll_min_key(*((curr_x2->next)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x2), @_vcc_ptr_neq_null(*((curr_x2->next)))), ==(srtl(curr_x2), &&(&&(srtl(*((curr_x2->next))), unchecked!(@_vcc_oset_in(curr_x2, srtl_reach(*((curr_x2->next)))))), <=(*((curr_x2->key)), sll_min_key(*((curr_x2->next))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_x2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(srtl_reach(curr_x2), @_vcc_oset_union(srtl_reach(*((curr_x2->next))), @_vcc_oset_singleton(curr_x2)))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_x2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_keys(curr_x), @_vcc_intset_union(sll_keys(*((curr_x->next))), @_vcc_intset_singleton(*((curr_x->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_list_len_next(curr_x), unchecked+(sll_list_len_next(*((curr_x->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(rsrtl(curr_x), &&(&&(rsrtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, rsrtl_reach(*((curr_x->next)))))), >=(*((curr_x->key)), sll_max_key(*((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(rsrtl_reach(curr_x), @_vcc_oset_union(rsrtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll(curr_x), &&(sll(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, sll_reach(*((curr_x->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_reach(curr_x), @_vcc_oset_union(sll_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_max_key(curr_x), @\int_max(*((curr_x->key)), sll_max_key(*((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_min_key(curr_x), @\int_min(*((curr_x->key)), sll_min_key(*((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(srtl(curr_x), &&(&&(srtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, srtl_reach(*((curr_x->next)))))), <=(*((curr_x->key)), sll_min_key(*((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(srtl_reach(curr_x), @_vcc_oset_union(srtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_keys(curr_y), @_vcc_intset_union(sll_keys(*((curr_y->next))), @_vcc_intset_singleton(*((curr_y->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_list_len_next(curr_y), unchecked+(sll_list_len_next(*((curr_y->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(rsrtl(curr_y), &&(&&(rsrtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, rsrtl_reach(*((curr_y->next)))))), >=(*((curr_y->key)), sll_max_key(*((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(rsrtl_reach(curr_y), @_vcc_oset_union(rsrtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll(curr_y), &&(sll(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, sll_reach(*((curr_y->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_reach(curr_y), @_vcc_oset_union(sll_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_max_key(curr_y), @\int_max(*((curr_y->key)), sll_max_key(*((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_min_key(curr_y), @\int_min(*((curr_y->key)), sll_min_key(*((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(srtl(curr_y), &&(&&(srtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, srtl_reach(*((curr_y->next)))))), <=(*((curr_y->key)), sll_min_key(*((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(srtl_reach(curr_y), @_vcc_oset_union(srtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_keys(z), @_vcc_intset_union(sll_keys(*((z->next))), @_vcc_intset_singleton(*((z->key)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_list_len_next(z), unchecked+(sll_list_len_next(*((z->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(rsrtl(z), &&(&&(rsrtl(*((z->next))), unchecked!(@_vcc_oset_in(z, rsrtl_reach(*((z->next)))))), >=(*((z->key)), sll_max_key(*((z->next))))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(rsrtl_reach(z), @_vcc_oset_union(rsrtl_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll(z), &&(sll(*((z->next))), unchecked!(@_vcc_oset_in(z, sll_reach(*((z->next)))))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_reach(z), @_vcc_oset_union(sll_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_max_key(z), @\int_max(*((z->key)), sll_max_key(*((z->next)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_min_key(z), @\int_min(*((z->key)), sll_min_key(*((z->next)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(srtl(z), &&(&&(srtl(*((z->next))), unchecked!(@_vcc_oset_in(z, srtl_reach(*((z->next)))))), <=(*((z->key)), sll_min_key(*((z->next))))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(srtl_reach(z), @_vcc_oset_union(srtl_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_keys(last_z), @_vcc_intset_union(sll_keys(*((last_z->next))), @_vcc_intset_singleton(*((last_z->key)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#last_z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_list_len_next(last_z), unchecked+(sll_list_len_next(*((last_z->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#last_z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(rsrtl(last_z), &&(&&(rsrtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, rsrtl_reach(*((last_z->next)))))), >=(*((last_z->key)), sll_max_key(*((last_z->next))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(rsrtl_reach(last_z), @_vcc_oset_union(rsrtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll(last_z), &&(sll(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, sll_reach(*((last_z->next)))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_reach(last_z), @_vcc_oset_union(sll_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_max_key(last_z), @\int_max(*((last_z->key)), sll_max_key(*((last_z->next)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_min_key(last_z), @\int_min(*((last_z->key)), sll_min_key(*((last_z->next)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(srtl(last_z), &&(&&(srtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, srtl_reach(*((last_z->next)))))), <=(*((last_z->key)), sll_min_key(*((last_z->next))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(srtl_reach(last_z), @_vcc_oset_union(srtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_keys(y), @_vcc_intset_union(sll_keys(*((y->next))), @_vcc_intset_singleton(*((y->key)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_list_len_next(y), unchecked+(sll_list_len_next(*((y->next))), 1))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(rsrtl(y), &&(&&(rsrtl(*((y->next))), unchecked!(@_vcc_oset_in(y, rsrtl_reach(*((y->next)))))), >=(*((y->key)), sll_max_key(*((y->next))))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(rsrtl_reach(y), @_vcc_oset_union(rsrtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll(y), &&(sll(*((y->next))), unchecked!(@_vcc_oset_in(y, sll_reach(*((y->next)))))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_reach(y), @_vcc_oset_union(sll_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_max_key(y), @\int_max(*((y->key)), sll_max_key(*((y->next)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_min_key(y), @\int_min(*((y->key)), sll_min_key(*((y->next)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(srtl(y), &&(&&(srtl(*((y->next))), unchecked!(@_vcc_oset_in(y, srtl_reach(*((y->next)))))), <=(*((y->key)), sll_min_key(*((y->next))))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(srtl_reach(y), @_vcc_oset_union(srtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_keys(x), @_vcc_intset_union(sll_keys(*((x->next))), @_vcc_intset_singleton(*((x->key)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_list_len_next(x), unchecked+(sll_list_len_next(*((x->next))), 1))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(rsrtl(x), &&(&&(rsrtl(*((x->next))), unchecked!(@_vcc_oset_in(x, rsrtl_reach(*((x->next)))))), >=(*((x->key)), sll_max_key(*((x->next))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(rsrtl_reach(x), @_vcc_oset_union(rsrtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll(x), &&(sll(*((x->next))), unchecked!(@_vcc_oset_in(x, sll_reach(*((x->next)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_reach(x), @_vcc_oset_union(sll_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_max_key(x), @\int_max(*((x->key)), sll_max_key(*((x->next)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_min_key(x), @\int_min(*((x->key)), sll_min_key(*((x->next)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(srtl(x), &&(&&(srtl(*((x->next))), unchecked!(@_vcc_oset_in(x, srtl_reach(*((x->next)))))), <=(*((x->key)), sll_min_key(*((x->next))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(srtl_reach(x), @_vcc_oset_union(srtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_keys(tmp), @_vcc_intset_union(sll_keys(*((tmp->next))), @_vcc_intset_singleton(*((tmp->key)))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_list_len_next(tmp), unchecked+(sll_list_len_next(*((tmp->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(rsrtl(tmp), &&(&&(rsrtl(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, rsrtl_reach(*((tmp->next)))))), >=(*((tmp->key)), sll_max_key(*((tmp->next))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(rsrtl_reach(tmp), @_vcc_oset_union(rsrtl_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll(tmp), &&(sll(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, sll_reach(*((tmp->next)))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_reach(tmp), @_vcc_oset_union(sll_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(sll_max_key(tmp), @\int_max(*((tmp->key)), sll_max_key(*((tmp->next)))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#tmp, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(sll_min_key(tmp), @\int_min(*((tmp->key)), sll_min_key(*((tmp->next)))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#tmp, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(srtl(tmp), &&(&&(srtl(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, srtl_reach(*((tmp->next)))))), <=(*((tmp->key)), sll_min_key(*((tmp->next))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(srtl_reach(tmp), @_vcc_oset_union(srtl_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_keys(last_z), @_vcc_intset_union(sll_keys(*((last_z->next))), @_vcc_intset_singleton(*((last_z->key)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#last_z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_list_len_next(last_z), unchecked+(sll_list_len_next(*((last_z->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#last_z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(rsrtl(last_z), &&(&&(rsrtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, rsrtl_reach(*((last_z->next)))))), >=(*((last_z->key)), sll_max_key(*((last_z->next))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(rsrtl_reach(last_z), @_vcc_oset_union(rsrtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll(last_z), &&(sll(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, sll_reach(*((last_z->next)))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_reach(last_z), @_vcc_oset_union(sll_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_max_key(last_z), @\int_max(*((last_z->key)), sll_max_key(*((last_z->next)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_min_key(last_z), @\int_min(*((last_z->key)), sll_min_key(*((last_z->next)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(srtl(last_z), &&(&&(srtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, srtl_reach(*((last_z->next)))))), <=(*((last_z->key)), sll_min_key(*((last_z->next))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(srtl_reach(last_z), @_vcc_oset_union(srtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg(y, curr_y), &&(sll_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, sll_lseg_reach(*((y->next)), curr_y)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_reach(y, curr_y), @_vcc_oset_union(sll_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_keys(y, curr_y), @_vcc_intset_union(sll_lseg_keys(*((y->next)), curr_y), @_vcc_intset_singleton(*((y->key)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_len_next(y, curr_y), unchecked+(sll_lseg_len_next(*((y->next)), curr_y), 1))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_max_key(y, curr_y), @\int_max(*((y->key)), sll_lseg_max_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_min_key(y, curr_y), @\int_min(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(srtl_lseg(y, curr_y), &&(&&(srtl_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, srtl_lseg_reach(*((y->next)), curr_y)))), <=(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(srtl_lseg_reach(y, curr_y), @_vcc_oset_union(srtl_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), ==(sll_lseg(z, last_z), &&(sll_lseg(*((z->next)), last_z), unchecked!(@_vcc_oset_in(z, sll_lseg_reach(*((z->next)), last_z)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), ==(sll_lseg_reach(z, last_z), @_vcc_oset_union(sll_lseg_reach(*((z->next)), last_z), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), ==(sll_lseg_keys(z, last_z), @_vcc_intset_union(sll_lseg_keys(*((z->next)), last_z), @_vcc_intset_singleton(*((z->key)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), ==(sll_lseg_len_next(z, last_z), unchecked+(sll_lseg_len_next(*((z->next)), last_z), 1))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), @_vcc_ptr_neq_pure(*((z->next)), last_z)), ==(sll_lseg_max_key(z, last_z), @\int_max(*((z->key)), sll_lseg_max_key(*((z->next)), last_z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), @_vcc_ptr_neq_pure(*((z->next)), last_z)), ==(sll_lseg_min_key(z, last_z), @\int_min(*((z->key)), sll_lseg_min_key(*((z->next)), last_z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), @_vcc_ptr_neq_pure(*((z->next)), last_z)), ==(srtl_lseg(z, last_z), &&(&&(srtl_lseg(*((z->next)), last_z), unchecked!(@_vcc_oset_in(z, srtl_lseg_reach(*((z->next)), last_z)))), <=(*((z->key)), sll_lseg_min_key(*((z->next)), last_z))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), ==(srtl_lseg_reach(z, last_z), @_vcc_oset_union(srtl_lseg_reach(*((z->next)), last_z), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg(x, curr_x), &&(sll_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, sll_lseg_reach(*((x->next)), curr_x)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_reach(x, curr_x), @_vcc_oset_union(sll_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_keys(x, curr_x), @_vcc_intset_union(sll_lseg_keys(*((x->next)), curr_x), @_vcc_intset_singleton(*((x->key)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_len_next(x, curr_x), unchecked+(sll_lseg_len_next(*((x->next)), curr_x), 1))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_max_key(x, curr_x), @\int_max(*((x->key)), sll_lseg_max_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_min_key(x, curr_x), @\int_min(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(srtl_lseg(x, curr_x), &&(&&(srtl_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, srtl_lseg_reach(*((x->next)), curr_x)))), <=(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(srtl_lseg_reach(x, curr_x), @_vcc_oset_union(srtl_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg(x, curr_x), &&(sll_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, sll_lseg_reach(*((x->next)), curr_x)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_reach(x, curr_x), @_vcc_oset_union(sll_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_keys(x, curr_x), @_vcc_intset_union(sll_lseg_keys(*((x->next)), curr_x), @_vcc_intset_singleton(*((x->key)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_len_next(x, curr_x), unchecked+(sll_lseg_len_next(*((x->next)), curr_x), 1))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_max_key(x, curr_x), @\int_max(*((x->key)), sll_lseg_max_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_min_key(x, curr_x), @\int_min(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(srtl_lseg(x, curr_x), &&(&&(srtl_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, srtl_lseg_reach(*((x->next)), curr_x)))), <=(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(srtl_lseg_reach(x, curr_x), @_vcc_oset_union(srtl_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg(y, curr_y), &&(sll_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, sll_lseg_reach(*((y->next)), curr_y)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_reach(y, curr_y), @_vcc_oset_union(sll_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_keys(y, curr_y), @_vcc_intset_union(sll_lseg_keys(*((y->next)), curr_y), @_vcc_intset_singleton(*((y->key)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_len_next(y, curr_y), unchecked+(sll_lseg_len_next(*((y->next)), curr_y), 1))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_max_key(y, curr_y), @\int_max(*((y->key)), sll_lseg_max_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_min_key(y, curr_y), @\int_min(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(srtl_lseg(y, curr_y), &&(&&(srtl_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, srtl_lseg_reach(*((y->next)), curr_y)))), <=(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(srtl_lseg_reach(y, curr_y), @_vcc_oset_union(srtl_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), &&(@_vcc_mutable(@state, curr_x), @writes_check(curr_x))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> $mutable($s, $phys_ptr_cast(L#curr_x, ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), &&(@_vcc_mutable(@state, curr_y), @writes_check(curr_y))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> $mutable($s, $phys_ptr_cast(L#curr_y, ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(@_vcc_ptr_neq_null(last_z), &&(@_vcc_mutable(@state, last_z), @writes_check(last_z))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> $mutable($s, $phys_ptr_cast(L#last_z, ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(L#last_z, ^s_node));
        }
        else
        {
          anon6:
            // assert @_vcc_possibly_unreachable; 
            assert {:PossiblyUnreachable true} true;
            // goto #break_3; 
            goto #break_3;
        }

      #continue_3:
        assume true;
// INV:LOOPTAIL
    }

  anon11:
    assume $full_stop_ext(#tok$3^35.3, $s);

  #break_3:
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_keys(curr_x), @_vcc_intset_union(sll_keys(*((curr_x->next))), @_vcc_intset_singleton(*((curr_x->key)))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_list_len_next(curr_x), unchecked+(sll_list_len_next(*((curr_x->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(rsrtl(curr_x), &&(&&(rsrtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, rsrtl_reach(*((curr_x->next)))))), >=(*((curr_x->key)), sll_max_key(*((curr_x->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(rsrtl_reach(curr_x), @_vcc_oset_union(rsrtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll(curr_x), &&(sll(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, sll_reach(*((curr_x->next)))))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_reach(curr_x), @_vcc_oset_union(sll_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_max_key(curr_x), @\int_max(*((curr_x->key)), sll_max_key(*((curr_x->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_min_key(curr_x), @\int_min(*((curr_x->key)), sll_min_key(*((curr_x->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(srtl(curr_x), &&(&&(srtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, srtl_reach(*((curr_x->next)))))), <=(*((curr_x->key)), sll_min_key(*((curr_x->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(srtl_reach(curr_x), @_vcc_oset_union(srtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_keys(curr_y), @_vcc_intset_union(sll_keys(*((curr_y->next))), @_vcc_intset_singleton(*((curr_y->key)))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_list_len_next(curr_y), unchecked+(sll_list_len_next(*((curr_y->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(rsrtl(curr_y), &&(&&(rsrtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, rsrtl_reach(*((curr_y->next)))))), >=(*((curr_y->key)), sll_max_key(*((curr_y->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(rsrtl_reach(curr_y), @_vcc_oset_union(rsrtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll(curr_y), &&(sll(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, sll_reach(*((curr_y->next)))))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_reach(curr_y), @_vcc_oset_union(sll_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_max_key(curr_y), @\int_max(*((curr_y->key)), sll_max_key(*((curr_y->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_min_key(curr_y), @\int_min(*((curr_y->key)), sll_min_key(*((curr_y->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(srtl(curr_y), &&(&&(srtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, srtl_reach(*((curr_y->next)))))), <=(*((curr_y->key)), sll_min_key(*((curr_y->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(srtl_reach(curr_y), @_vcc_oset_union(srtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_keys(z), @_vcc_intset_union(sll_keys(*((z->next))), @_vcc_intset_singleton(*((z->key)))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_list_len_next(z), unchecked+(sll_list_len_next(*((z->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(rsrtl(z), &&(&&(rsrtl(*((z->next))), unchecked!(@_vcc_oset_in(z, rsrtl_reach(*((z->next)))))), >=(*((z->key)), sll_max_key(*((z->next))))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(rsrtl_reach(z), @_vcc_oset_union(rsrtl_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(sll(z), &&(sll(*((z->next))), unchecked!(@_vcc_oset_in(z, sll_reach(*((z->next)))))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_reach(z), @_vcc_oset_union(sll_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_max_key(z), @\int_max(*((z->key)), sll_max_key(*((z->next)))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_min_key(z), @\int_min(*((z->key)), sll_min_key(*((z->next)))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(srtl(z), &&(&&(srtl(*((z->next))), unchecked!(@_vcc_oset_in(z, srtl_reach(*((z->next)))))), <=(*((z->key)), sll_min_key(*((z->next))))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(srtl_reach(z), @_vcc_oset_union(srtl_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_keys(last_z), @_vcc_intset_union(sll_keys(*((last_z->next))), @_vcc_intset_singleton(*((last_z->key)))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#last_z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_list_len_next(last_z), unchecked+(sll_list_len_next(*((last_z->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#last_z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(rsrtl(last_z), &&(&&(rsrtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, rsrtl_reach(*((last_z->next)))))), >=(*((last_z->key)), sll_max_key(*((last_z->next))))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(rsrtl_reach(last_z), @_vcc_oset_union(rsrtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll(last_z), &&(sll(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, sll_reach(*((last_z->next)))))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_reach(last_z), @_vcc_oset_union(sll_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_max_key(last_z), @\int_max(*((last_z->key)), sll_max_key(*((last_z->next)))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_min_key(last_z), @\int_min(*((last_z->key)), sll_min_key(*((last_z->next)))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(srtl(last_z), &&(&&(srtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, srtl_reach(*((last_z->next)))))), <=(*((last_z->key)), sll_min_key(*((last_z->next))))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(srtl_reach(last_z), @_vcc_oset_union(srtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_keys(y), @_vcc_intset_union(sll_keys(*((y->next))), @_vcc_intset_singleton(*((y->key)))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_list_len_next(y), unchecked+(sll_list_len_next(*((y->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(rsrtl(y), &&(&&(rsrtl(*((y->next))), unchecked!(@_vcc_oset_in(y, rsrtl_reach(*((y->next)))))), >=(*((y->key)), sll_max_key(*((y->next))))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(rsrtl_reach(y), @_vcc_oset_union(rsrtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll(y), &&(sll(*((y->next))), unchecked!(@_vcc_oset_in(y, sll_reach(*((y->next)))))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_reach(y), @_vcc_oset_union(sll_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_max_key(y), @\int_max(*((y->key)), sll_max_key(*((y->next)))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_min_key(y), @\int_min(*((y->key)), sll_min_key(*((y->next)))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(srtl(y), &&(&&(srtl(*((y->next))), unchecked!(@_vcc_oset_in(y, srtl_reach(*((y->next)))))), <=(*((y->key)), sll_min_key(*((y->next))))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(srtl_reach(y), @_vcc_oset_union(srtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_keys(x), @_vcc_intset_union(sll_keys(*((x->next))), @_vcc_intset_singleton(*((x->key)))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_list_len_next(x), unchecked+(sll_list_len_next(*((x->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(rsrtl(x), &&(&&(rsrtl(*((x->next))), unchecked!(@_vcc_oset_in(x, rsrtl_reach(*((x->next)))))), >=(*((x->key)), sll_max_key(*((x->next))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(rsrtl_reach(x), @_vcc_oset_union(rsrtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll(x), &&(sll(*((x->next))), unchecked!(@_vcc_oset_in(x, sll_reach(*((x->next)))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_reach(x), @_vcc_oset_union(sll_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_max_key(x), @\int_max(*((x->key)), sll_max_key(*((x->next)))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_min_key(x), @\int_min(*((x->key)), sll_min_key(*((x->next)))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(srtl(x), &&(&&(srtl(*((x->next))), unchecked!(@_vcc_oset_in(x, srtl_reach(*((x->next)))))), <=(*((x->key)), sll_min_key(*((x->next))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(srtl_reach(x), @_vcc_oset_union(srtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
    // return z; 
    $result := $phys_ptr_cast(L#z, ^s_node);
    assume true;
    assert $position_marker();
    goto #exit;

  anon12:
    // skip

  #exit:
}



axiom (forall Q#__vcc_state$2^687.9#tc2#1682: $state, Q#x$2^687.9#dt1#1624: $ptr :: {:weight 10} { F#srtl(Q#__vcc_state$2^687.9#tc2#1682, $phys_ptr_cast(Q#x$2^687.9#dt1#1624, ^s_node)) } { F#sll(Q#__vcc_state$2^687.9#tc2#1682, $phys_ptr_cast(Q#x$2^687.9#dt1#1624, ^s_node)) } $good_state(Q#__vcc_state$2^687.9#tc2#1682) && true ==> F#srtl(Q#__vcc_state$2^687.9#tc2#1682, $phys_ptr_cast(Q#x$2^687.9#dt1#1624, ^s_node)) ==> F#sll(Q#__vcc_state$2^687.9#tc2#1682, $phys_ptr_cast(Q#x$2^687.9#dt1#1624, ^s_node)));

axiom (forall Q#__vcc_state$2^688.9#tc2#1683: $state, Q#x$2^688.9#dt1#1625: $ptr :: {:weight 10} { F#rsrtl(Q#__vcc_state$2^688.9#tc2#1683, $phys_ptr_cast(Q#x$2^688.9#dt1#1625, ^s_node)) } { F#sll(Q#__vcc_state$2^688.9#tc2#1683, $phys_ptr_cast(Q#x$2^688.9#dt1#1625, ^s_node)) } $good_state(Q#__vcc_state$2^688.9#tc2#1683) && true ==> F#rsrtl(Q#__vcc_state$2^688.9#tc2#1683, $phys_ptr_cast(Q#x$2^688.9#dt1#1625, ^s_node)) ==> F#sll(Q#__vcc_state$2^688.9#tc2#1683, $phys_ptr_cast(Q#x$2^688.9#dt1#1625, ^s_node)));

axiom (forall Q#__vcc_state$2^689.9#tc2#1684: $state, Q#x$2^689.9#dt1#1626: $ptr :: {:weight 10} { F#sll_reach(Q#__vcc_state$2^689.9#tc2#1684, $phys_ptr_cast(Q#x$2^689.9#dt1#1626, ^s_node)) } { F#srtl_reach(Q#__vcc_state$2^689.9#tc2#1684, $phys_ptr_cast(Q#x$2^689.9#dt1#1626, ^s_node)) } $good_state(Q#__vcc_state$2^689.9#tc2#1684) && true ==> F#sll_reach(Q#__vcc_state$2^689.9#tc2#1684, $phys_ptr_cast(Q#x$2^689.9#dt1#1626, ^s_node)) == F#srtl_reach(Q#__vcc_state$2^689.9#tc2#1684, $phys_ptr_cast(Q#x$2^689.9#dt1#1626, ^s_node)));

axiom (forall Q#__vcc_state$2^690.9#tc2#1685: $state, Q#x$2^690.9#dt1#1627: $ptr :: {:weight 10} { F#srtl_reach(Q#__vcc_state$2^690.9#tc2#1685, $phys_ptr_cast(Q#x$2^690.9#dt1#1627, ^s_node)) } { F#rsrtl_reach(Q#__vcc_state$2^690.9#tc2#1685, $phys_ptr_cast(Q#x$2^690.9#dt1#1627, ^s_node)) } $good_state(Q#__vcc_state$2^690.9#tc2#1685) && true ==> F#srtl_reach(Q#__vcc_state$2^690.9#tc2#1685, $phys_ptr_cast(Q#x$2^690.9#dt1#1627, ^s_node)) == F#rsrtl_reach(Q#__vcc_state$2^690.9#tc2#1685, $phys_ptr_cast(Q#x$2^690.9#dt1#1627, ^s_node)));

axiom (forall Q#__vcc_state$2^691.9#tc2#1686: $state, Q#x$2^691.9#dt1#1628: $ptr, Q#y$2^691.9#dt1#1629: $ptr :: {:weight 10} { F#sll_lseg_reach(Q#__vcc_state$2^691.9#tc2#1686, $phys_ptr_cast(Q#x$2^691.9#dt1#1628, ^s_node), $phys_ptr_cast(Q#y$2^691.9#dt1#1629, ^s_node)) } { F#srtl_lseg_reach(Q#__vcc_state$2^691.9#tc2#1686, $phys_ptr_cast(Q#x$2^691.9#dt1#1628, ^s_node), $phys_ptr_cast(Q#y$2^691.9#dt1#1629, ^s_node)) } $good_state(Q#__vcc_state$2^691.9#tc2#1686) && true ==> F#sll_lseg_reach(Q#__vcc_state$2^691.9#tc2#1686, $phys_ptr_cast(Q#x$2^691.9#dt1#1628, ^s_node), $phys_ptr_cast(Q#y$2^691.9#dt1#1629, ^s_node)) == F#srtl_lseg_reach(Q#__vcc_state$2^691.9#tc2#1686, $phys_ptr_cast(Q#x$2^691.9#dt1#1628, ^s_node), $phys_ptr_cast(Q#y$2^691.9#dt1#1629, ^s_node)));

const unique l#public: $label;

axiom $type_code_is(2, ^$#state_t);

const unique #tok$3^79.5: $token;

const unique #tok$3^77.5: $token;

const unique #tok$3^75.5: $token;

const unique #tok$3^70.14: $token;

const unique #tok$3^35.3: $token;

const unique #tok$3^31.3: $token;

const unique #tok$3^29.3: $token;

const unique #tok$3^23.14: $token;

const unique #tok$3^17.56: $token;

const unique #tok$3^17.41: $token;

const unique #tok$4^0.0: $token;

const unique #file^?3Cno?20file?3E: $token;

axiom $file_name_is(4, #file^?3Cno?20file?3E);

const unique #tok$3^3.3: $token;

const unique #file^Z?3A?5CInvariantSynthesis?5CVCDryad?5Cvcc?5CHost?5Cbin?5CTests?5Cgrass?5Csls_pairwise_sum.c: $token;

axiom $file_name_is(3, #file^Z?3A?5CInvariantSynthesis?5CVCDryad?5Cvcc?5CHost?5Cbin?5CTests?5Cgrass?5Csls_pairwise_sum.c);

const unique #file^z?3A?5Cinvariantsynthesis?5Cvcdryad?5Cvcc?5Chost?5Cbin?5Ctests?5Cgrass?5Cdryad_sls.h: $token;

axiom $file_name_is(2, #file^z?3A?5Cinvariantsynthesis?5Cvcdryad?5Cvcc?5Chost?5Cbin?5Ctests?5Cgrass?5Cdryad_sls.h);

const unique #file^Z?3A?5CInvariantSynthesis?5CVCDryad?2Dbin?5CHeaders?5Cvccp.h: $token;

axiom $file_name_is(1, #file^Z?3A?5CInvariantSynthesis?5CVCDryad?2Dbin?5CHeaders?5Cvccp.h);

const unique #distTp1: $ctype;

axiom #distTp1 == $ptr_to(^s_node);

