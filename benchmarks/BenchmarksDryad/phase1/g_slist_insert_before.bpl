
const {:existential true} b0000 : bool;
const {:existential true} b0001 : bool;
const {:existential true} b0002 : bool;
const {:existential true} b0003 : bool;
const {:existential true} b0004 : bool;
const {:existential true} b0005 : bool;
const {:existential true} b0006 : bool;
const {:existential true} b0007 : bool;
const {:existential true} b0008 : bool;
const {:existential true} b0009 : bool;
const {:existential true} b0010 : bool;
const {:existential true} b0011 : bool;
const {:existential true} b0012 : bool;
const {:existential true} b0013 : bool;
const {:existential true} b0014 : bool;
const {:existential true} b0015 : bool;
const {:existential true} b0016 : bool;
const {:existential true} b0017 : bool;
const {:existential true} b0018 : bool;
const {:existential true} b0019 : bool;
const {:existential true} b0020 : bool;
const {:existential true} b0021 : bool;
const {:existential true} b0022 : bool;
const {:existential true} b0023 : bool;
const {:existential true} b0024 : bool;
const {:existential true} b0025 : bool;
const {:existential true} b0026 : bool;
const {:existential true} b0027 : bool;
const {:existential true} b0028 : bool;
const {:existential true} b0029 : bool;
const {:existential true} b0030 : bool;
const {:existential true} b0031 : bool;
const {:existential true} b0032 : bool;
const {:existential true} b0033 : bool;
const {:existential true} b0034 : bool;
const {:existential true} b0035 : bool;
const {:existential true} b0036 : bool;
const {:existential true} b0037 : bool;
const {:existential true} b0038 : bool;
const {:existential true} b0039 : bool;
const {:existential true} b0040 : bool;
const {:existential true} b0041 : bool;
const {:existential true} b0042 : bool;
const {:existential true} b0043 : bool;
const {:existential true} b0044 : bool;
const {:existential true} b0045 : bool;
const {:existential true} b0046 : bool;
const {:existential true} b0047 : bool;
const {:existential true} b0048 : bool;
const {:existential true} b0049 : bool;
const {:existential true} b0050 : bool;
const {:existential true} b0051 : bool;
const {:existential true} b0052 : bool;
const {:existential true} b0053 : bool;
const {:existential true} b0054 : bool;
const {:existential true} b0055 : bool;
const {:existential true} b0056 : bool;
const {:existential true} b0057 : bool;
const {:existential true} b0058 : bool;
const {:existential true} b0059 : bool;
const {:existential true} b0060 : bool;
const {:existential true} b0061 : bool;
const {:existential true} b0062 : bool;
const {:existential true} b0063 : bool;
const {:existential true} b0064 : bool;
const {:existential true} b0065 : bool;
const {:existential true} b0066 : bool;
const {:existential true} b0067 : bool;
const {:existential true} b0068 : bool;
const {:existential true} b0069 : bool;
const {:existential true} b0070 : bool;
const {:existential true} b0071 : bool;
const {:existential true} b0072 : bool;
const {:existential true} b0073 : bool;
const {:existential true} b0074 : bool;
const {:existential true} b0075 : bool;
const {:existential true} b0076 : bool;
const {:existential true} b0077 : bool;
const {:existential true} b0078 : bool;
const {:existential true} b0079 : bool;
const {:existential true} b0080 : bool;
const {:existential true} b0081 : bool;
const {:existential true} b0082 : bool;
const {:existential true} b0083 : bool;
const {:existential true} b0084 : bool;
const {:existential true} b0085 : bool;
const {:existential true} b0086 : bool;
const {:existential true} b0087 : bool;
const {:existential true} b0088 : bool;
const {:existential true} b0089 : bool;
const {:existential true} b0090 : bool;
const {:existential true} b0091 : bool;
const {:existential true} b0092 : bool;
const {:existential true} b0093 : bool;
const {:existential true} b0094 : bool;
const {:existential true} b0095 : bool;
const {:existential true} b0096 : bool;
const {:existential true} b0097 : bool;
const {:existential true} b0098 : bool;
const {:existential true} b0099 : bool;
const {:existential true} b0100 : bool;
const {:existential true} b0101 : bool;
const {:existential true} b0102 : bool;
const {:existential true} b0103 : bool;
const {:existential true} b0104 : bool;
const {:existential true} b0105 : bool;
const {:existential true} b0106 : bool;
const {:existential true} b0107 : bool;
const {:existential true} b0108 : bool;
const {:existential true} b0109 : bool;
const {:existential true} b0110 : bool;
const {:existential true} b0111 : bool;
const {:existential true} b0112 : bool;
const {:existential true} b0113 : bool;
const {:existential true} b0114 : bool;
const {:existential true} b0115 : bool;
const {:existential true} b0116 : bool;
const {:existential true} b0117 : bool;
const {:existential true} b0118 : bool;
const {:existential true} b0119 : bool;
const {:existential true} b0120 : bool;
const {:existential true} b0121 : bool;
const {:existential true} b0122 : bool;
const {:existential true} b0123 : bool;
const {:existential true} b0124 : bool;
const {:existential true} b0125 : bool;
const {:existential true} b0126 : bool;
const {:existential true} b0127 : bool;
const {:existential true} b0128 : bool;
const {:existential true} b0129 : bool;
const {:existential true} b0130 : bool;
const {:existential true} b0131 : bool;
const {:existential true} b0132 : bool;
const {:existential true} b0133 : bool;
const {:existential true} b0134 : bool;
const {:existential true} b0135 : bool;
const {:existential true} b0136 : bool;
const {:existential true} b0137 : bool;
const {:existential true} b0138 : bool;
const {:existential true} b0139 : bool;
const {:existential true} b0140 : bool;
const {:existential true} b0141 : bool;
const {:existential true} b0142 : bool;
const {:existential true} b0143 : bool;
const {:existential true} b0144 : bool;
const {:existential true} b0145 : bool;
const {:existential true} b0146 : bool;
const {:existential true} b0147 : bool;
const {:existential true} b0148 : bool;
const {:existential true} b0149 : bool;
const {:existential true} b0150 : bool;
const {:existential true} b0151 : bool;
const {:existential true} b0152 : bool;
const {:existential true} b0153 : bool;
const {:existential true} b0154 : bool;
const {:existential true} b0155 : bool;
const {:existential true} b0156 : bool;
const {:existential true} b0157 : bool;
const {:existential true} b0158 : bool;
const {:existential true} b0159 : bool;
const {:existential true} b0160 : bool;
const {:existential true} b0161 : bool;
const {:existential true} b0162 : bool;
const {:existential true} b0163 : bool;
const {:existential true} b0164 : bool;
const {:existential true} b0165 : bool;
const {:existential true} b0166 : bool;
const {:existential true} b0167 : bool;
const {:existential true} b0168 : bool;
const {:existential true} b0169 : bool;
const {:existential true} b0170 : bool;
const {:existential true} b0171 : bool;
const {:existential true} b0172 : bool;
const {:existential true} b0173 : bool;
const {:existential true} b0174 : bool;
const {:existential true} b0175 : bool;
const {:existential true} b0176 : bool;
const {:existential true} b0177 : bool;
const {:existential true} b0178 : bool;
const {:existential true} b0179 : bool;
const {:existential true} b0180 : bool;
const {:existential true} b0181 : bool;
const {:existential true} b0182 : bool;
const {:existential true} b0183 : bool;
const {:existential true} b0184 : bool;
const {:existential true} b0185 : bool;
const {:existential true} b0186 : bool;
const {:existential true} b0187 : bool;
const {:existential true} b0188 : bool;
const {:existential true} b0189 : bool;
const {:existential true} b0190 : bool;
const {:existential true} b0191 : bool;
const {:existential true} b0192 : bool;
const {:existential true} b0193 : bool;
const {:existential true} b0194 : bool;
const {:existential true} b0195 : bool;
const {:existential true} b0196 : bool;
const {:existential true} b0197 : bool;
const {:existential true} b0198 : bool;
const {:existential true} b0199 : bool;
const {:existential true} b0200 : bool;
const {:existential true} b0201 : bool;
const {:existential true} b0202 : bool;
const {:existential true} b0203 : bool;
const {:existential true} b0204 : bool;
const {:existential true} b0205 : bool;
const {:existential true} b0206 : bool;
const {:existential true} b0207 : bool;
const {:existential true} b0208 : bool;
const {:existential true} b0209 : bool;
const {:existential true} b0210 : bool;
const {:existential true} b0211 : bool;
const {:existential true} b0212 : bool;
const {:existential true} b0213 : bool;
const {:existential true} b0214 : bool;
const {:existential true} b0215 : bool;
const {:existential true} b0216 : bool;
const {:existential true} b0217 : bool;
const {:existential true} b0218 : bool;
const {:existential true} b0219 : bool;
const {:existential true} b0220 : bool;
const {:existential true} b0221 : bool;
const {:existential true} b0222 : bool;
const {:existential true} b0223 : bool;
const {:existential true} b0224 : bool;
const {:existential true} b0225 : bool;
const {:existential true} b0226 : bool;
const {:existential true} b0227 : bool;
const {:existential true} b0228 : bool;
const {:existential true} b0229 : bool;
const {:existential true} b0230 : bool;
const {:existential true} b0231 : bool;
const {:existential true} b0232 : bool;
const {:existential true} b0233 : bool;
const {:existential true} b0234 : bool;
const {:existential true} b0235 : bool;
const {:existential true} b0236 : bool;
const {:existential true} b0237 : bool;
const {:existential true} b0238 : bool;
const {:existential true} b0239 : bool;
const {:existential true} b0240 : bool;
const {:existential true} b0241 : bool;
const {:existential true} b0242 : bool;
const {:existential true} b0243 : bool;
const {:existential true} b0244 : bool;
const {:existential true} b0245 : bool;
const {:existential true} b0246 : bool;
const {:existential true} b0247 : bool;
const {:existential true} b0248 : bool;
const {:existential true} b0249 : bool;
const {:existential true} b0250 : bool;
const {:existential true} b0251 : bool;
const {:existential true} b0252 : bool;
const {:existential true} b0253 : bool;
const {:existential true} b0254 : bool;
const {:existential true} b0255 : bool;
const {:existential true} b0256 : bool;
const {:existential true} b0257 : bool;
const {:existential true} b0258 : bool;
const {:existential true} b0259 : bool;
const {:existential true} b0260 : bool;
const {:existential true} b0261 : bool;
const {:existential true} b0262 : bool;
const {:existential true} b0263 : bool;
const {:existential true} b0264 : bool;
const {:existential true} b0265 : bool;
const {:existential true} b0266 : bool;
const {:existential true} b0267 : bool;
const {:existential true} b0268 : bool;
const {:existential true} b0269 : bool;
const {:existential true} b0270 : bool;
const {:existential true} b0271 : bool;
const {:existential true} b0272 : bool;
const {:existential true} b0273 : bool;
const {:existential true} b0274 : bool;
const {:existential true} b0275 : bool;
const {:existential true} b0276 : bool;
const {:existential true} b0277 : bool;
const {:existential true} b0278 : bool;
const {:existential true} b0279 : bool;
const {:existential true} b0280 : bool;
const {:existential true} b0281 : bool;
const {:existential true} b0282 : bool;
const {:existential true} b0283 : bool;
const {:existential true} b0284 : bool;
const {:existential true} b0285 : bool;
const {:existential true} b0286 : bool;
const {:existential true} b0287 : bool;
const {:existential true} b0288 : bool;
const {:existential true} b0289 : bool;
const {:existential true} b0290 : bool;
const {:existential true} b0291 : bool;
const {:existential true} b0292 : bool;
const {:existential true} b0293 : bool;
const {:existential true} b0294 : bool;
const {:existential true} b0295 : bool;
const {:existential true} b0296 : bool;
const {:existential true} b0297 : bool;
const {:existential true} b0298 : bool;
const {:existential true} b0299 : bool;
const {:existential true} b0300 : bool;
const {:existential true} b0301 : bool;
const {:existential true} b0302 : bool;
const {:existential true} b0303 : bool;
const {:existential true} b0304 : bool;
const {:existential true} b0305 : bool;
const {:existential true} b0306 : bool;
const {:existential true} b0307 : bool;
const {:existential true} b0308 : bool;
const {:existential true} b0309 : bool;
const {:existential true} b0310 : bool;
const {:existential true} b0311 : bool;
const {:existential true} b0312 : bool;
const {:existential true} b0313 : bool;
const {:existential true} b0314 : bool;
const {:existential true} b0315 : bool;
const {:existential true} b0316 : bool;
const {:existential true} b0317 : bool;
const {:existential true} b0318 : bool;
const {:existential true} b0319 : bool;
const {:existential true} b0320 : bool;
const {:existential true} b0321 : bool;
const {:existential true} b0322 : bool;
const {:existential true} b0323 : bool;
const {:existential true} b0324 : bool;
const {:existential true} b0325 : bool;
const {:existential true} b0326 : bool;
const {:existential true} b0327 : bool;
const {:existential true} b0328 : bool;
const {:existential true} b0329 : bool;
const {:existential true} b0330 : bool;
const {:existential true} b0331 : bool;
const {:existential true} b0332 : bool;
const {:existential true} b0333 : bool;
const {:existential true} b0334 : bool;
const {:existential true} b0335 : bool;
const {:existential true} b0336 : bool;
const {:existential true} b0337 : bool;
const {:existential true} b0338 : bool;
const {:existential true} b0339 : bool;
const {:existential true} b0340 : bool;
const {:existential true} b0341 : bool;
const {:existential true} b0342 : bool;
const {:existential true} b0343 : bool;
const {:existential true} b0344 : bool;
const {:existential true} b0345 : bool;
const {:existential true} b0346 : bool;
const {:existential true} b0347 : bool;
const {:existential true} b0348 : bool;
const {:existential true} b0349 : bool;
const {:existential true} b0350 : bool;
const {:existential true} b0351 : bool;
const {:existential true} b0352 : bool;
const {:existential true} b0353 : bool;
const {:existential true} b0354 : bool;
const {:existential true} b0355 : bool;
const {:existential true} b0356 : bool;
const {:existential true} b0357 : bool;
const {:existential true} b0358 : bool;
const {:existential true} b0359 : bool;
const {:existential true} b0360 : bool;
const {:existential true} b0361 : bool;
const {:existential true} b0362 : bool;
const {:existential true} b0363 : bool;
const {:existential true} b0364 : bool;
const {:existential true} b0365 : bool;
const {:existential true} b0366 : bool;
const {:existential true} b0367 : bool;
const {:existential true} b0368 : bool;
const {:existential true} b0369 : bool;
const {:existential true} b0370 : bool;
const {:existential true} b0371 : bool;
const {:existential true} b0372 : bool;
const {:existential true} b0373 : bool;
const {:existential true} b0374 : bool;
const {:existential true} b0375 : bool;
const {:existential true} b0376 : bool;
const {:existential true} b0377 : bool;
const {:existential true} b0378 : bool;
const {:existential true} b0379 : bool;
const {:existential true} b0380 : bool;
const {:existential true} b0381 : bool;
const {:existential true} b0382 : bool;
const {:existential true} b0383 : bool;
const {:existential true} b0384 : bool;

axiom $arch_ptr_size == 8;

axiom $arch_spec_ptr_start == $max.u8;

const unique ^$##thread_id: $ctype;

axiom $def_math_type(^$##thread_id);

type $##thread_id;

const unique ^$##club: $ctype;

axiom $def_math_type(^$##club);

type $##club;

const unique ^s_node: $ctype;

axiom $is_span_sequential(^s_node);

axiom $def_struct_type(^s_node, 16, false, false);

axiom (forall #s1: $state, #s2: $state, #p: $ptr :: { $inv2(#s1, #s2, #p, ^s_node) } $inv2(#s1, #s2, #p, ^s_node) == $set_eq($owns(#s2, #p), $set_empty()));

axiom (forall #s1: $state, #s2: $state, #p: $ptr :: { $inv2_without_lemmas(#s1, #s2, #p, ^s_node) } $inv2_without_lemmas(#s1, #s2, #p, ^s_node) == $set_eq($owns(#s2, #p), $set_empty()));

axiom (forall p: $ptr, q: $ptr, s: $state :: { $in(q, $composite_extent(s, p, ^s_node)) } $in(q, $composite_extent(s, p, ^s_node)) == (q == p));

const unique s_node.key: $field;

axiom $def_phys_field(^s_node, s_node.key, ^^i4, false, 0);

const unique s_node.next: $field;

axiom $def_phys_field(^s_node, s_node.next, $ptr_to(^s_node), false, 8);

function F#glob_reach() : $oset;

const unique cf#glob_reach: $pure_function;

axiom $function_arg_type(cf#glob_reach, 0, ^$#oset);

procedure glob_reach() returns ($result: $oset);
  free ensures $result == F#glob_reach();
  free ensures $call_transition(old($s), $s);



const unique ^$#_purecall_handler#1: $ctype;

axiom $def_fnptr_type(^$#_purecall_handler#1);

type $#_purecall_handler#1;

const unique ^$#_invalid_parameter_handler#2: $ctype;

axiom $def_fnptr_type(^$#_invalid_parameter_handler#2);

type $#_invalid_parameter_handler#2;

const unique ^$#g_slist_insert_before.c..36263#3: $ctype;

axiom $def_fnptr_type(^$#g_slist_insert_before.c..36263#3);

type $#g_slist_insert_before.c..36263#3;

const unique ^$#_PtFuncCompare#4: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#4);

type $#_PtFuncCompare#4;

const unique ^$#_PtFuncCompare#5: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#5);

type $#_PtFuncCompare#5;

const unique ^$#_PtFuncCompare#6: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#6);

type $#_PtFuncCompare#6;

const unique ^$#_PtFuncCompare#7: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#7);

type $#_PtFuncCompare#7;

const unique ^$#_onexit_t#8: $ctype;

axiom $def_fnptr_type(^$#_onexit_t#8);

type $#_onexit_t#8;

function F#sll(#s: $state, SP#hd: $ptr) : bool;

const unique cf#sll: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll(#s, SP#hd) } 1 < $decreases_level ==> $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#sll(#s, SP#hd));

axiom $function_arg_type(cf#sll, 0, ^^bool);

axiom $function_arg_type(cf#sll, 1, $ptr_to(^s_node));

procedure sll(SP#hd: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result;
  free ensures $result == F#sll($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_reach(#s: $state, SP#hd: $ptr) : $oset;

const unique cf#sll_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll_reach(#s, SP#hd) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#sll_reach(#s, SP#hd))) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#sll_reach(#s, SP#hd) == $oset_empty()));

axiom $function_arg_type(cf#sll_reach, 0, ^$#oset);

axiom $function_arg_type(cf#sll_reach, 1, $ptr_to(^s_node));

procedure sll_reach(SP#hd: $ptr) returns ($result: $oset);
  ensures ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result)) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result == $oset_empty());
  free ensures $result == F#sll_reach($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_keys(#s: $state, SP#hd: $ptr) : $intset;

const unique cf#sll_keys: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll_keys(#s, SP#hd) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $intset_in($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node)), F#sll_keys(#s, SP#hd))) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#sll_keys(#s, SP#hd) == $intset_empty()));

axiom $function_arg_type(cf#sll_keys, 0, ^$#intset);

axiom $function_arg_type(cf#sll_keys, 1, $ptr_to(^s_node));

procedure sll_keys(SP#hd: $ptr) returns ($result: $intset);
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $intset_in($rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node)), $result);
  ensures $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result == $intset_empty();
  free ensures $result == F#sll_keys($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_list_len_next(#s: $state, SP#x: $ptr) : int;

const unique cf#sll_list_len_next: $pure_function;

axiom (forall #s: $state, SP#x: $ptr :: { F#sll_list_len_next(#s, SP#x) } 1 < $decreases_level ==> $in_range_nat(F#sll_list_len_next(#s, SP#x)) && ($non_null($phys_ptr_cast(SP#x, ^s_node)) ==> F#sll_list_len_next(#s, SP#x) > 0) && ($is_null($phys_ptr_cast(SP#x, ^s_node)) ==> F#sll_list_len_next(#s, SP#x) == 0));

axiom $function_arg_type(cf#sll_list_len_next, 0, ^^nat);

axiom $function_arg_type(cf#sll_list_len_next, 1, $ptr_to(^s_node));

procedure sll_list_len_next(SP#x: $ptr) returns ($result: int);
  free ensures $in_range_nat($result);
  ensures $non_null($phys_ptr_cast(SP#x, ^s_node)) ==> $result > 0;
  ensures $is_null($phys_ptr_cast(SP#x, ^s_node)) ==> $result == 0;
  free ensures $result == F#sll_list_len_next($s, SP#x);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : bool;

const unique cf#sll_lseg: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg(#s, SP#hd, SP#tl) == F#sll(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg(#s, SP#hd, SP#tl)) && (F#sll_lseg(#s, SP#hd, SP#tl) ==> $oset_disjoint(F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)))) && (F#sll_lseg(#s, SP#hd, SP#tl) && F#sll(#s, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll(#s, $phys_ptr_cast(SP#hd, ^s_node)) && F#sll_reach(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $oset_union(F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_reach(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_keys(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $intset_union(F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_keys(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_list_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_list_len_next(#s, $phys_ptr_cast(SP#tl, ^s_node)))) && (F#sll_lseg(#s, SP#hd, SP#tl) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#hd, ^s_node) && !$oset_in($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node), F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node))) ==> F#sll_lseg(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $intset_singleton($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)))) && F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), 1)));

axiom $function_arg_type(cf#sll_lseg, 0, ^^bool);

axiom $function_arg_type(cf#sll_lseg, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg, 2, $ptr_to(^s_node));

procedure sll_lseg(SP#hd: $ptr, SP#tl: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result;
  ensures $result ==> $oset_disjoint(F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)));
  ensures $result && F#sll($s, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SP#hd, ^s_node)) && F#sll_reach($s, $phys_ptr_cast(SP#hd, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_reach($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_keys($s, $phys_ptr_cast(SP#hd, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_keys($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_list_len_next($s, $phys_ptr_cast(SP#hd, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_list_len_next($s, $phys_ptr_cast(SP#tl, ^s_node)));
  ensures $result && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#hd, ^s_node) && !$oset_in($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node), F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node))) ==> F#sll_lseg($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)))) && F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), 1);
  free ensures $result == F#sll_lseg($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_reach(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : $oset;

const unique cf#sll_lseg_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_reach(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_reach(#s, SP#hd, SP#tl) == F#sll_reach(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_reach(#s, SP#hd, SP#tl) == $oset_empty()) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#sll_lseg_reach(#s, SP#hd, SP#tl))));

axiom $function_arg_type(cf#sll_lseg_reach, 0, ^$#oset);

axiom $function_arg_type(cf#sll_lseg_reach, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_reach, 2, $ptr_to(^s_node));

procedure sll_lseg_reach(SP#hd: $ptr, SP#tl: $ptr) returns ($result: $oset);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_reach($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $oset_empty();
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result);
  free ensures $result == F#sll_lseg_reach($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_keys(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : $intset;

const unique cf#sll_lseg_keys: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_keys(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_keys(#s, SP#hd, SP#tl) == F#sll_keys(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_keys(#s, SP#hd, SP#tl) == $intset_empty()) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $intset_in($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node)), F#sll_lseg_keys(#s, SP#hd, SP#tl))));

axiom $function_arg_type(cf#sll_lseg_keys, 0, ^$#intset);

axiom $function_arg_type(cf#sll_lseg_keys, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_keys, 2, $ptr_to(^s_node));

procedure sll_lseg_keys(SP#hd: $ptr, SP#tl: $ptr) returns ($result: $intset);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_keys($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $intset_empty();
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $intset_in($rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node)), $result);
  free ensures $result == F#sll_lseg_keys($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_len_next(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : int;

const unique cf#sll_lseg_len_next: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_len_next(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> $in_range_nat(F#sll_lseg_len_next(#s, SP#hd, SP#tl)) && ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_len_next(#s, SP#hd, SP#tl) == F#sll_list_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_len_next(#s, SP#hd, SP#tl) == 0) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_len_next(#s, SP#hd, SP#tl) > 0));

axiom $function_arg_type(cf#sll_lseg_len_next, 0, ^^nat);

axiom $function_arg_type(cf#sll_lseg_len_next, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_len_next, 2, $ptr_to(^s_node));

procedure sll_lseg_len_next(SP#hd: $ptr, SP#tl: $ptr) returns ($result: int);
  free ensures $in_range_nat($result);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_list_len_next($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == 0;
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $result > 0;
  free ensures $result == F#sll_lseg_len_next($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



procedure g_slist_insert_before(P#slist: $ptr, P#sibling: $ptr, P#data: int) returns ($result: $ptr);
  requires F#sll($s, $phys_ptr_cast(P#slist, ^s_node));
  requires F#sll($s, $phys_ptr_cast(P#sibling, ^s_node));
  requires F#sll_lseg($s, $phys_ptr_cast(P#slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
  requires $oset_disjoint(F#sll_lseg_reach($s, $phys_ptr_cast(P#slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), F#sll_reach($s, $phys_ptr_cast(P#sibling, ^s_node)));
  modifies $s, $cev_pc;
  ensures F#sll($s, $phys_ptr_cast(P#slist, ^s_node));
  ensures F#sll($s, $phys_ptr_cast($result, ^s_node));
  ensures F#sll_keys($s, $phys_ptr_cast($result, ^s_node)) == $intset_union(F#sll_keys(old($s), $phys_ptr_cast(P#slist, ^s_node)), $intset_singleton(P#data));
  free ensures $writes_nothing(old($s), $s);
  free ensures $call_transition(old($s), $s);



implementation g_slist_insert_before(P#slist: $ptr, P#sibling: $ptr, P#data: int) returns ($result: $ptr)
{
  var stmtexpr9#30: $state;
  var SL#_dryad_S7: $state;
  var stmtexpr8#29: $state;
  var SL#_dryad_S6: $state;
  var stmtexpr7#28: $state;
  var _dryad_S5#12: $state;
  var stmtexpr6#27: $state;
  var _dryad_S4#11: $state;
  var stmtexpr5#26: $state;
  var _dryad_S3#10: $state;
  var stmtexpr4#25: $state;
  var _dryad_S2#9: $state;
  var stmtexpr3#24: $ptr;
  var last0#8: $ptr;
  var stmtexpr2#23: $state;
  var _dryad_S1#7: $state;
  var stmtexpr1#22: $oset;
  var stmtexpr0#21: $state;
  var _dryad_S0#6: $state;
  var L#tmp_last: $ptr;
  var stmtexpr6#20: $state;
  var _dryad_S5#5: $state;
  var stmtexpr5#19: $state;
  var _dryad_S4#4: $state;
  var stmtexpr4#18: $state;
  var _dryad_S3#3: $state;
  var stmtexpr3#17: $state;
  var _dryad_S2#2: $state;
  var stmtexpr2#16: $state;
  var _dryad_S1#1: $state;
  var stmtexpr1#15: $oset;
  var stmtexpr0#14: $state;
  var _dryad_S0#0: $state;
  var stmtexpr0#13: $ptr;
  var SL#last0: $ptr;
  var ite#1: bool;
  var loopState#0: $state;
  var stmtexpr6#12: $state;
  var SL#_dryad_S5: $state;
  var stmtexpr5#11: $state;
  var SL#_dryad_S4: $state;
  var stmtexpr4#10: $state;
  var SL#_dryad_S3: $state;
  var stmtexpr3#9: $state;
  var SL#_dryad_S2: $state;
  var stmtexpr2#8: $state;
  var SL#_dryad_S1: $state;
  var stmtexpr1#7: $oset;
  var stmtexpr0#6: $state;
  var SL#_dryad_S0: $state;
  var L#node: $ptr;
  var L#last: $ptr;
  var stmtexpr1#32: $oset;
  var stmtexpr0#31: $oset;
  var res_sll_lseg_reach#5: $oset;
  var res_sll_reach#4: $oset;
  var res_sll_reach#3: $oset;
  var SL#_dryad_G1: $oset;
  var SL#_dryad_G0: $oset;
  var local.slist: $ptr;
  var #wrTime$3^3.3: int;
  var #stackframe: int;

// INV:PTR: P#slist, P#sibling, L#node, L#last, local.slist
// INV:INT: P#data
// INV:LST: sll

  anon8:
    assume $function_entry($s);
    assume $full_stop_ext(#tok$3^3.3, $s);
    assume $can_use_all_frame_axioms($s);
    assume #wrTime$3^3.3 == $current_timestamp($s);
    assume $def_writes($s, #wrTime$3^3.3, (lambda #p: $ptr :: false));
    // assume true
    // assume true
    // assume @in_range_i4(data); 
    assume $in_range_i4(P#data);
    // assume @decreases_level_is(2147483647); 
    assume 2147483647 == $decreases_level;
    // struct s_node* local.slist; 
    // local.slist := slist; 
    local.slist := $phys_ptr_cast(P#slist, ^s_node);
    // assume true
    //  --- Dryad annotated function --- 
    // _math \oset _dryad_G0; 
    // _math \oset _dryad_G1; 
    // _math \oset res_sll_reach#3; 
    // res_sll_reach#3 := sll_reach(local.slist); 
    call res_sll_reach#3 := sll_reach($phys_ptr_cast(local.slist, ^s_node));
    assume $full_stop_ext(#tok$4^0.0, $s);
    // _math \oset res_sll_reach#4; 
    // res_sll_reach#4 := sll_reach(sibling); 
    call res_sll_reach#4 := sll_reach($phys_ptr_cast(P#sibling, ^s_node));
    assume $full_stop_ext(#tok$4^0.0, $s);
    // _math \oset res_sll_lseg_reach#5; 
    // res_sll_lseg_reach#5 := sll_lseg_reach(local.slist, sibling); 
    call res_sll_lseg_reach#5 := sll_lseg_reach($phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
    assume $full_stop_ext(#tok$4^0.0, $s);
    // _dryad_G0 := @_vcc_oset_union(@_vcc_oset_union(res_sll_reach#3, res_sll_reach#4), res_sll_lseg_reach#5); 
    SL#_dryad_G0 := $oset_union($oset_union(res_sll_reach#3, res_sll_reach#4), res_sll_lseg_reach#5);
    // _math \oset stmtexpr0#31; 
    // stmtexpr0#31 := _dryad_G0; 
    stmtexpr0#31 := SL#_dryad_G0;
    // _dryad_G1 := _dryad_G0; 
    SL#_dryad_G1 := SL#_dryad_G0;
    // _math \oset stmtexpr1#32; 
    // stmtexpr1#32 := _dryad_G1; 
    stmtexpr1#32 := SL#_dryad_G1;
    // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll_keys(sibling), @_vcc_intset_union(sll_keys(*((sibling->next))), @_vcc_intset_singleton(*((sibling->key)))))); 
    assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#sibling, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#sibling, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll_list_len_next(sibling), unchecked+(sll_list_len_next(*((sibling->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#sibling, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)), 1);
    // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll(sibling), &&(sll(*((sibling->next))), unchecked!(@_vcc_oset_in(sibling, sll_reach(*((sibling->next)))))))); 
    assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#sibling, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#sibling, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll_reach(sibling), @_vcc_oset_union(sll_reach(*((sibling->next))), @_vcc_oset_singleton(sibling)))); 
    assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#sibling, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#sibling, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll_keys(local.slist), @_vcc_intset_union(sll_keys(*((local.slist->next))), @_vcc_intset_singleton(*((local.slist->key)))))); 
    assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.slist, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll_list_len_next(local.slist), unchecked+(sll_list_len_next(*((local.slist->next))), 1))); 
    assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.slist, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)), 1);
    // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll(local.slist), &&(sll(*((local.slist->next))), unchecked!(@_vcc_oset_in(local.slist, sll_reach(*((local.slist->next)))))))); 
    assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.slist, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll_reach(local.slist), @_vcc_oset_union(sll_reach(*((local.slist->next))), @_vcc_oset_singleton(local.slist)))); 
    assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.slist, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.slist, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg(local.slist, sibling), &&(sll_lseg(*((local.slist->next)), sibling), unchecked!(@_vcc_oset_in(local.slist, sll_lseg_reach(*((local.slist->next)), sibling)))))); 
    assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) && !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node))));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg_reach(local.slist, sibling), @_vcc_oset_union(sll_lseg_reach(*((local.slist->next)), sibling), @_vcc_oset_singleton(local.slist)))); 
    assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), $oset_singleton($phys_ptr_cast(local.slist, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg_keys(local.slist, sibling), @_vcc_intset_union(sll_lseg_keys(*((local.slist->next)), sibling), @_vcc_intset_singleton(*((local.slist->key)))))); 
    assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node))));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg_len_next(local.slist, sibling), unchecked+(sll_lseg_len_next(*((local.slist->next)), sibling), 1))); 
    assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), 1);
    // struct s_node* last; 
    // struct s_node* node; 
    assume true;
    // if (@_vcc_ptr_eq_null(local.slist)) ...
    if ($is_null($phys_ptr_cast(local.slist, ^s_node)))
    {
      anon1:
        // assume ==>(@_vcc_ptr_neq_null(node), ==(sll_keys(node), @_vcc_intset_union(sll_keys(*((node->next))), @_vcc_intset_singleton(*((node->key)))))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#node, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#node, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(node), ==(sll_list_len_next(node), unchecked+(sll_list_len_next(*((node->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#node, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(node), ==(sll(node), &&(sll(*((node->next))), unchecked!(@_vcc_oset_in(node, sll_reach(*((node->next)))))))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#node, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(node), ==(sll_reach(node), @_vcc_oset_union(sll_reach(*((node->next))), @_vcc_oset_singleton(node)))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#node, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#node, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_keys(last), @_vcc_intset_union(sll_keys(*((last->next))), @_vcc_intset_singleton(*((last->key)))))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#last, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#last, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_list_len_next(last), unchecked+(sll_list_len_next(*((last->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#last, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll(last), &&(sll(*((last->next))), unchecked!(@_vcc_oset_in(last, sll_reach(*((last->next)))))))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#last, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_reach(last), @_vcc_oset_union(sll_reach(*((last->next))), @_vcc_oset_singleton(last)))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#last, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll_keys(sibling), @_vcc_intset_union(sll_keys(*((sibling->next))), @_vcc_intset_singleton(*((sibling->key)))))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#sibling, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#sibling, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll_list_len_next(sibling), unchecked+(sll_list_len_next(*((sibling->next))), 1))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#sibling, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll(sibling), &&(sll(*((sibling->next))), unchecked!(@_vcc_oset_in(sibling, sll_reach(*((sibling->next)))))))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#sibling, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#sibling, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll_reach(sibling), @_vcc_oset_union(sll_reach(*((sibling->next))), @_vcc_oset_singleton(sibling)))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#sibling, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#sibling, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll_keys(local.slist), @_vcc_intset_union(sll_keys(*((local.slist->next))), @_vcc_intset_singleton(*((local.slist->key)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.slist, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll_list_len_next(local.slist), unchecked+(sll_list_len_next(*((local.slist->next))), 1))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.slist, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll(local.slist), &&(sll(*((local.slist->next))), unchecked!(@_vcc_oset_in(local.slist, sll_reach(*((local.slist->next)))))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.slist, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll_reach(local.slist), @_vcc_oset_union(sll_reach(*((local.slist->next))), @_vcc_oset_singleton(local.slist)))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.slist, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.slist, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg(local.slist, sibling), &&(sll_lseg(*((local.slist->next)), sibling), unchecked!(@_vcc_oset_in(local.slist, sll_lseg_reach(*((local.slist->next)), sibling)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) && !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg_reach(local.slist, sibling), @_vcc_oset_union(sll_lseg_reach(*((local.slist->next)), sibling), @_vcc_oset_singleton(local.slist)))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), $oset_singleton($phys_ptr_cast(local.slist, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg_keys(local.slist, sibling), @_vcc_intset_union(sll_lseg_keys(*((local.slist->next)), sibling), @_vcc_intset_singleton(*((local.slist->key)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg_len_next(local.slist, sibling), unchecked+(sll_lseg_len_next(*((local.slist->next)), sibling), 1))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), 1);
        // _math \state _dryad_S0; 
        // _dryad_S0 := @_vcc_current_state(@state); 
        SL#_dryad_S0 := $current_state($s);
        // _math \state stmtexpr0#6; 
        // stmtexpr0#6 := _dryad_S0; 
        stmtexpr0#6 := SL#_dryad_S0;
        // local.slist := _vcc_alloc(@_vcc_typeof((struct s_node*)@null)); 
        call local.slist := $alloc(^s_node);
        assume $full_stop_ext(#tok$3^15.13, $s);
        // assume !(@_vcc_oset_in(local.slist, @_vcc_oset_union(_dryad_G0, _dryad_G1))); 
        assume !$oset_in($phys_ptr_cast(local.slist, ^s_node), $oset_union(SL#_dryad_G0, SL#_dryad_G1));
        // _dryad_G1 := @_vcc_oset_union(_dryad_G0, @_vcc_oset_singleton(local.slist)); 
        SL#_dryad_G1 := $oset_union(SL#_dryad_G0, $oset_singleton($phys_ptr_cast(local.slist, ^s_node)));
        // _math \oset stmtexpr1#7; 
        // stmtexpr1#7 := _dryad_G1; 
        stmtexpr1#7 := SL#_dryad_G1;
        // assume ==(glob_reach(), _dryad_G1); 
        assume F#glob_reach() == SL#_dryad_G1;
        // _math \state _dryad_S1; 
        // _dryad_S1 := @_vcc_current_state(@state); 
        SL#_dryad_S1 := $current_state($s);
        // _math \state stmtexpr2#8; 
        // stmtexpr2#8 := _dryad_S1; 
        stmtexpr2#8 := SL#_dryad_S1;
        // assume ==>(@_vcc_ptr_neq_null(node), ==(sll_keys(node), @_vcc_intset_union(sll_keys(*((node->next))), @_vcc_intset_singleton(*((node->key)))))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#node, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#node, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(node), ==(sll_list_len_next(node), unchecked+(sll_list_len_next(*((node->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#node, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(node), ==(sll(node), &&(sll(*((node->next))), unchecked!(@_vcc_oset_in(node, sll_reach(*((node->next)))))))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#node, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(node), ==(sll_reach(node), @_vcc_oset_union(sll_reach(*((node->next))), @_vcc_oset_singleton(node)))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#node, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#node, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_keys(last), @_vcc_intset_union(sll_keys(*((last->next))), @_vcc_intset_singleton(*((last->key)))))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#last, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#last, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_list_len_next(last), unchecked+(sll_list_len_next(*((last->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#last, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll(last), &&(sll(*((last->next))), unchecked!(@_vcc_oset_in(last, sll_reach(*((last->next)))))))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#last, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_reach(last), @_vcc_oset_union(sll_reach(*((last->next))), @_vcc_oset_singleton(last)))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#last, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll_keys(sibling), @_vcc_intset_union(sll_keys(*((sibling->next))), @_vcc_intset_singleton(*((sibling->key)))))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#sibling, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#sibling, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll_list_len_next(sibling), unchecked+(sll_list_len_next(*((sibling->next))), 1))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#sibling, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll(sibling), &&(sll(*((sibling->next))), unchecked!(@_vcc_oset_in(sibling, sll_reach(*((sibling->next)))))))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#sibling, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#sibling, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll_reach(sibling), @_vcc_oset_union(sll_reach(*((sibling->next))), @_vcc_oset_singleton(sibling)))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#sibling, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#sibling, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll_keys(local.slist), @_vcc_intset_union(sll_keys(*((local.slist->next))), @_vcc_intset_singleton(*((local.slist->key)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.slist, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll_list_len_next(local.slist), unchecked+(sll_list_len_next(*((local.slist->next))), 1))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.slist, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll(local.slist), &&(sll(*((local.slist->next))), unchecked!(@_vcc_oset_in(local.slist, sll_reach(*((local.slist->next)))))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.slist, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll_reach(local.slist), @_vcc_oset_union(sll_reach(*((local.slist->next))), @_vcc_oset_singleton(local.slist)))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.slist, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.slist, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg(local.slist, sibling), &&(sll_lseg(*((local.slist->next)), sibling), unchecked!(@_vcc_oset_in(local.slist, sll_lseg_reach(*((local.slist->next)), sibling)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) && !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg_reach(local.slist, sibling), @_vcc_oset_union(sll_lseg_reach(*((local.slist->next)), sibling), @_vcc_oset_singleton(local.slist)))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), $oset_singleton($phys_ptr_cast(local.slist, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg_keys(local.slist, sibling), @_vcc_intset_union(sll_lseg_keys(*((local.slist->next)), sibling), @_vcc_intset_singleton(*((local.slist->key)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg_len_next(local.slist, sibling), unchecked+(sll_lseg_len_next(*((local.slist->next)), sibling), 1))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), 1);
        // assume ==>(unchecked!(@_vcc_oset_in(local.slist, old(_dryad_S0, sll_reach(node)))), ==(old(_dryad_S0, sll_keys(node)), old(_dryad_S1, sll_keys(node)))); 
        assume !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#node, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(L#node, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(L#node, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(local.slist, old(_dryad_S0, sll_reach(node)))), ==(old(_dryad_S0, sll_list_len_next(node)), old(_dryad_S1, sll_list_len_next(node)))); 
        assume !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#node, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(L#node, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(L#node, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(local.slist, old(_dryad_S0, sll_reach(node)))), ==(old(_dryad_S0, sll(node)), old(_dryad_S1, sll(node)))); 
        assume !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#node, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(L#node, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(L#node, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(local.slist, old(_dryad_S0, sll_reach(node)))), ==(old(_dryad_S0, sll_reach(node)), old(_dryad_S1, sll_reach(node)))); 
        assume !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#node, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#node, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(L#node, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(local.slist, old(_dryad_S0, sll_reach(last)))), ==(old(_dryad_S0, sll_keys(last)), old(_dryad_S1, sll_keys(last)))); 
        assume !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(L#last, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(local.slist, old(_dryad_S0, sll_reach(last)))), ==(old(_dryad_S0, sll_list_len_next(last)), old(_dryad_S1, sll_list_len_next(last)))); 
        assume !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(L#last, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(local.slist, old(_dryad_S0, sll_reach(last)))), ==(old(_dryad_S0, sll(last)), old(_dryad_S1, sll(last)))); 
        assume !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#last, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(L#last, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(local.slist, old(_dryad_S0, sll_reach(last)))), ==(old(_dryad_S0, sll_reach(last)), old(_dryad_S1, sll_reach(last)))); 
        assume !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#last, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(local.slist, old(_dryad_S0, sll_reach(sibling)))), ==(old(_dryad_S0, sll_keys(sibling)), old(_dryad_S1, sll_keys(sibling)))); 
        assume !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(local.slist, old(_dryad_S0, sll_reach(sibling)))), ==(old(_dryad_S0, sll_list_len_next(sibling)), old(_dryad_S1, sll_list_len_next(sibling)))); 
        assume !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(local.slist, old(_dryad_S0, sll_reach(sibling)))), ==(old(_dryad_S0, sll(sibling)), old(_dryad_S1, sll(sibling)))); 
        assume !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(P#sibling, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(local.slist, old(_dryad_S0, sll_reach(sibling)))), ==(old(_dryad_S0, sll_reach(sibling)), old(_dryad_S1, sll_reach(sibling)))); 
        assume !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(local.slist, old(_dryad_S0, sll_lseg_reach(local.slist, sibling)))), ==(old(_dryad_S0, sll_lseg(local.slist, sibling)), old(_dryad_S1, sll_lseg(local.slist, sibling)))); 
        assume !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_lseg_reach(SL#_dryad_S0, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_lseg(SL#_dryad_S0, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_lseg(SL#_dryad_S1, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(local.slist, old(_dryad_S0, sll_lseg_reach(local.slist, sibling)))), ==(old(_dryad_S0, sll_lseg_reach(local.slist, sibling)), old(_dryad_S1, sll_lseg_reach(local.slist, sibling)))); 
        assume !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_lseg_reach(SL#_dryad_S0, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S0, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S1, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(local.slist, old(_dryad_S0, sll_lseg_reach(local.slist, sibling)))), ==(old(_dryad_S0, sll_lseg_keys(local.slist, sibling)), old(_dryad_S1, sll_lseg_keys(local.slist, sibling)))); 
        assume !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_lseg_reach(SL#_dryad_S0, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S0, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S1, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(local.slist, old(_dryad_S0, sll_lseg_reach(local.slist, sibling)))), ==(old(_dryad_S0, sll_lseg_len_next(local.slist, sibling)), old(_dryad_S1, sll_lseg_len_next(local.slist, sibling)))); 
        assume !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_lseg_reach(SL#_dryad_S0, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S0, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S1, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
        // assume @_vcc_ptr_neq_null(local.slist); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node));
        // _math \state _dryad_S2; 
        // _dryad_S2 := @_vcc_current_state(@state); 
        SL#_dryad_S2 := $current_state($s);
        // _math \state stmtexpr3#9; 
        // stmtexpr3#9 := _dryad_S2; 
        stmtexpr3#9 := SL#_dryad_S2;
        // assert @prim_writes_check((local.slist->key)); 
        assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(local.slist, ^s_node), s_node.key));
        // *(local.slist->key) := data; 
        call $write_int(s_node.key, $phys_ptr_cast(local.slist, ^s_node), P#data);
        assume $full_stop_ext(#tok$3^18.5, $s);
        // _math \state _dryad_S3; 
        // _dryad_S3 := @_vcc_current_state(@state); 
        SL#_dryad_S3 := $current_state($s);
        // _math \state stmtexpr4#10; 
        // stmtexpr4#10 := _dryad_S3; 
        stmtexpr4#10 := SL#_dryad_S3;
        // assume ==>(unchecked!(@_vcc_oset_in(local.slist, old(_dryad_S2, sll_reach(*((local.slist->next)))))), ==(old(_dryad_S2, sll_keys(*((local.slist->next)))), old(_dryad_S3, sll_keys(*((local.slist->next)))))); 
        assume !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)) == F#sll_keys(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(local.slist, old(_dryad_S2, sll_reach(*((local.slist->next)))))), ==(old(_dryad_S2, sll_list_len_next(*((local.slist->next)))), old(_dryad_S3, sll_list_len_next(*((local.slist->next)))))); 
        assume !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(local.slist, old(_dryad_S2, sll_reach(*((local.slist->next)))))), ==(old(_dryad_S2, sll(*((local.slist->next)))), old(_dryad_S3, sll(*((local.slist->next)))))); 
        assume !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node))) ==> F#sll(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)) == F#sll(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(local.slist, old(_dryad_S2, sll_reach(*((local.slist->next)))))), ==(old(_dryad_S2, sll_reach(*((local.slist->next)))), old(_dryad_S3, sll_reach(*((local.slist->next)))))); 
        assume !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)) == F#sll_reach(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node));
        // assume ==(old(_dryad_S2, sll_list_len_next(node)), old(_dryad_S3, sll_list_len_next(node))); 
        assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#node, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#node, ^s_node));
        // assume ==(old(_dryad_S2, sll(node)), old(_dryad_S3, sll(node))); 
        assume F#sll(SL#_dryad_S2, $phys_ptr_cast(L#node, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#node, ^s_node));
        // assume ==(old(_dryad_S2, sll_reach(node)), old(_dryad_S3, sll_reach(node))); 
        assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#node, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#node, ^s_node));
        // assume ==(old(_dryad_S2, sll_list_len_next(last)), old(_dryad_S3, sll_list_len_next(last))); 
        assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#last, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#last, ^s_node));
        // assume ==(old(_dryad_S2, sll(last)), old(_dryad_S3, sll(last))); 
        assume F#sll(SL#_dryad_S2, $phys_ptr_cast(L#last, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#last, ^s_node));
        // assume ==(old(_dryad_S2, sll_reach(last)), old(_dryad_S3, sll_reach(last))); 
        assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#last, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#last, ^s_node));
        // assume ==(old(_dryad_S2, sll_list_len_next(sibling)), old(_dryad_S3, sll_list_len_next(sibling))); 
        assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==(old(_dryad_S2, sll(sibling)), old(_dryad_S3, sll(sibling))); 
        assume F#sll(SL#_dryad_S2, $phys_ptr_cast(P#sibling, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==(old(_dryad_S2, sll_reach(sibling)), old(_dryad_S3, sll_reach(sibling))); 
        assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==(old(_dryad_S2, sll_list_len_next(local.slist)), old(_dryad_S3, sll_list_len_next(local.slist))); 
        assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(local.slist, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(local.slist, ^s_node));
        // assume ==(old(_dryad_S2, sll(local.slist)), old(_dryad_S3, sll(local.slist))); 
        assume F#sll(SL#_dryad_S2, $phys_ptr_cast(local.slist, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(local.slist, ^s_node));
        // assume ==(old(_dryad_S2, sll_reach(local.slist)), old(_dryad_S3, sll_reach(local.slist))); 
        assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.slist, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(local.slist, ^s_node));
        // assume ==(old(_dryad_S2, sll_lseg(local.slist, sibling)), old(_dryad_S3, sll_lseg(local.slist, sibling))); 
        assume F#sll_lseg(SL#_dryad_S2, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_lseg(SL#_dryad_S3, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==(old(_dryad_S2, sll_lseg_reach(local.slist, sibling)), old(_dryad_S3, sll_lseg_reach(local.slist, sibling))); 
        assume F#sll_lseg_reach(SL#_dryad_S2, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S3, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==(old(_dryad_S2, sll_lseg_len_next(local.slist, sibling)), old(_dryad_S3, sll_lseg_len_next(local.slist, sibling))); 
        assume F#sll_lseg_len_next(SL#_dryad_S2, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S3, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(local.slist, old(_dryad_S2, sll_reach(node)))), ==(old(_dryad_S2, sll_keys(node)), old(_dryad_S3, sll_keys(node)))); 
        assume !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#node, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(L#node, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(L#node, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(local.slist, old(_dryad_S2, sll_reach(node)))), ==(old(_dryad_S2, sll_list_len_next(node)), old(_dryad_S3, sll_list_len_next(node)))); 
        assume !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#node, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#node, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#node, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(local.slist, old(_dryad_S2, sll_reach(node)))), ==(old(_dryad_S2, sll(node)), old(_dryad_S3, sll(node)))); 
        assume !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#node, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(L#node, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#node, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(local.slist, old(_dryad_S2, sll_reach(node)))), ==(old(_dryad_S2, sll_reach(node)), old(_dryad_S3, sll_reach(node)))); 
        assume !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#node, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#node, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#node, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(local.slist, old(_dryad_S2, sll_reach(last)))), ==(old(_dryad_S2, sll_keys(last)), old(_dryad_S3, sll_keys(last)))); 
        assume !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(L#last, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(local.slist, old(_dryad_S2, sll_reach(last)))), ==(old(_dryad_S2, sll_list_len_next(last)), old(_dryad_S3, sll_list_len_next(last)))); 
        assume !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#last, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(local.slist, old(_dryad_S2, sll_reach(last)))), ==(old(_dryad_S2, sll(last)), old(_dryad_S3, sll(last)))); 
        assume !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#last, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(L#last, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(local.slist, old(_dryad_S2, sll_reach(last)))), ==(old(_dryad_S2, sll_reach(last)), old(_dryad_S3, sll_reach(last)))); 
        assume !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#last, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(local.slist, old(_dryad_S2, sll_reach(sibling)))), ==(old(_dryad_S2, sll_keys(sibling)), old(_dryad_S3, sll_keys(sibling)))); 
        assume !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(local.slist, old(_dryad_S2, sll_reach(sibling)))), ==(old(_dryad_S2, sll_list_len_next(sibling)), old(_dryad_S3, sll_list_len_next(sibling)))); 
        assume !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(local.slist, old(_dryad_S2, sll_reach(sibling)))), ==(old(_dryad_S2, sll(sibling)), old(_dryad_S3, sll(sibling)))); 
        assume !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(P#sibling, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(local.slist, old(_dryad_S2, sll_reach(sibling)))), ==(old(_dryad_S2, sll_reach(sibling)), old(_dryad_S3, sll_reach(sibling)))); 
        assume !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(local.slist, node)), ==(*((node->key)), old(_dryad_S2, *((node->key))))); 
        assume !($phys_ptr_cast(local.slist, ^s_node) == $phys_ptr_cast(L#node, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#node, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(L#node, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(local.slist, node)), @_vcc_ptr_eq_pure(*((node->next)), old(_dryad_S2, *((node->next))))); 
        assume !($phys_ptr_cast(local.slist, ^s_node) == $phys_ptr_cast(L#node, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(local.slist, last)), ==(*((last->key)), old(_dryad_S2, *((last->key))))); 
        assume !($phys_ptr_cast(local.slist, ^s_node) == $phys_ptr_cast(L#last, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#last, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(local.slist, last)), @_vcc_ptr_eq_pure(*((last->next)), old(_dryad_S2, *((last->next))))); 
        assume !($phys_ptr_cast(local.slist, ^s_node) == $phys_ptr_cast(L#last, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(local.slist, sibling)), ==(*((sibling->key)), old(_dryad_S2, *((sibling->key))))); 
        assume !($phys_ptr_cast(local.slist, ^s_node) == $phys_ptr_cast(P#sibling, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#sibling, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(local.slist, sibling)), @_vcc_ptr_eq_pure(*((sibling->next)), old(_dryad_S2, *((sibling->next))))); 
        assume !($phys_ptr_cast(local.slist, ^s_node) == $phys_ptr_cast(P#sibling, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node);
        // assume ==>(@_vcc_ptr_neq_null(node), ==(sll_keys(node), @_vcc_intset_union(sll_keys(*((node->next))), @_vcc_intset_singleton(*((node->key)))))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#node, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#node, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(node), ==(sll_list_len_next(node), unchecked+(sll_list_len_next(*((node->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#node, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(node), ==(sll(node), &&(sll(*((node->next))), unchecked!(@_vcc_oset_in(node, sll_reach(*((node->next)))))))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#node, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(node), ==(sll_reach(node), @_vcc_oset_union(sll_reach(*((node->next))), @_vcc_oset_singleton(node)))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#node, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#node, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_keys(last), @_vcc_intset_union(sll_keys(*((last->next))), @_vcc_intset_singleton(*((last->key)))))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#last, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#last, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_list_len_next(last), unchecked+(sll_list_len_next(*((last->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#last, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll(last), &&(sll(*((last->next))), unchecked!(@_vcc_oset_in(last, sll_reach(*((last->next)))))))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#last, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_reach(last), @_vcc_oset_union(sll_reach(*((last->next))), @_vcc_oset_singleton(last)))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#last, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll_keys(sibling), @_vcc_intset_union(sll_keys(*((sibling->next))), @_vcc_intset_singleton(*((sibling->key)))))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#sibling, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#sibling, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll_list_len_next(sibling), unchecked+(sll_list_len_next(*((sibling->next))), 1))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#sibling, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll(sibling), &&(sll(*((sibling->next))), unchecked!(@_vcc_oset_in(sibling, sll_reach(*((sibling->next)))))))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#sibling, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#sibling, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll_reach(sibling), @_vcc_oset_union(sll_reach(*((sibling->next))), @_vcc_oset_singleton(sibling)))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#sibling, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#sibling, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll_keys(local.slist), @_vcc_intset_union(sll_keys(*((local.slist->next))), @_vcc_intset_singleton(*((local.slist->key)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.slist, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg(local.slist, sibling), &&(sll_lseg(*((local.slist->next)), sibling), unchecked!(@_vcc_oset_in(local.slist, sll_lseg_reach(*((local.slist->next)), sibling)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) && !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg_reach(local.slist, sibling), @_vcc_oset_union(sll_lseg_reach(*((local.slist->next)), sibling), @_vcc_oset_singleton(local.slist)))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), $oset_singleton($phys_ptr_cast(local.slist, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg_keys(local.slist, sibling), @_vcc_intset_union(sll_lseg_keys(*((local.slist->next)), sibling), @_vcc_intset_singleton(*((local.slist->key)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg_len_next(local.slist, sibling), unchecked+(sll_lseg_len_next(*((local.slist->next)), sibling), 1))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), 1);
        // _math \state _dryad_S4; 
        // _dryad_S4 := @_vcc_current_state(@state); 
        SL#_dryad_S4 := $current_state($s);
        // _math \state stmtexpr5#11; 
        // stmtexpr5#11 := _dryad_S4; 
        stmtexpr5#11 := SL#_dryad_S4;
        // assert @prim_writes_check((local.slist->next)); 
        assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(local.slist, ^s_node), s_node.next));
        // *(local.slist->next) := (struct s_node*)@null; 
        call $write_int(s_node.next, $phys_ptr_cast(local.slist, ^s_node), $ptr_to_int($phys_ptr_cast($null, ^s_node)));
        assume $full_stop_ext(#tok$3^20.5, $s);
        // _math \state _dryad_S5; 
        // _dryad_S5 := @_vcc_current_state(@state); 
        SL#_dryad_S5 := $current_state($s);
        // _math \state stmtexpr6#12; 
        // stmtexpr6#12 := _dryad_S5; 
        stmtexpr6#12 := SL#_dryad_S5;
        // assume ==>(unchecked!(@_vcc_oset_in(local.slist, old(_dryad_S4, sll_reach(node)))), ==(old(_dryad_S4, sll_keys(node)), old(_dryad_S5, sll_keys(node)))); 
        assume !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#node, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(L#node, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(L#node, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(local.slist, old(_dryad_S4, sll_reach(node)))), ==(old(_dryad_S4, sll_list_len_next(node)), old(_dryad_S5, sll_list_len_next(node)))); 
        assume !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#node, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(L#node, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(L#node, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(local.slist, old(_dryad_S4, sll_reach(node)))), ==(old(_dryad_S4, sll(node)), old(_dryad_S5, sll(node)))); 
        assume !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#node, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(L#node, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(L#node, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(local.slist, old(_dryad_S4, sll_reach(node)))), ==(old(_dryad_S4, sll_reach(node)), old(_dryad_S5, sll_reach(node)))); 
        assume !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#node, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#node, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(L#node, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(local.slist, old(_dryad_S4, sll_reach(last)))), ==(old(_dryad_S4, sll_keys(last)), old(_dryad_S5, sll_keys(last)))); 
        assume !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(L#last, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(local.slist, old(_dryad_S4, sll_reach(last)))), ==(old(_dryad_S4, sll_list_len_next(last)), old(_dryad_S5, sll_list_len_next(last)))); 
        assume !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(L#last, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(local.slist, old(_dryad_S4, sll_reach(last)))), ==(old(_dryad_S4, sll(last)), old(_dryad_S5, sll(last)))); 
        assume !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#last, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(L#last, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(local.slist, old(_dryad_S4, sll_reach(last)))), ==(old(_dryad_S4, sll_reach(last)), old(_dryad_S5, sll_reach(last)))); 
        assume !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#last, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(local.slist, old(_dryad_S4, sll_reach(sibling)))), ==(old(_dryad_S4, sll_keys(sibling)), old(_dryad_S5, sll_keys(sibling)))); 
        assume !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(local.slist, old(_dryad_S4, sll_reach(sibling)))), ==(old(_dryad_S4, sll_list_len_next(sibling)), old(_dryad_S5, sll_list_len_next(sibling)))); 
        assume !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(local.slist, old(_dryad_S4, sll_reach(sibling)))), ==(old(_dryad_S4, sll(sibling)), old(_dryad_S5, sll(sibling)))); 
        assume !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(P#sibling, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(local.slist, old(_dryad_S4, sll_reach(sibling)))), ==(old(_dryad_S4, sll_reach(sibling)), old(_dryad_S5, sll_reach(sibling)))); 
        assume !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(local.slist, node)), ==(*((node->key)), old(_dryad_S4, *((node->key))))); 
        assume !($phys_ptr_cast(local.slist, ^s_node) == $phys_ptr_cast(L#node, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#node, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(L#node, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(local.slist, node)), @_vcc_ptr_eq_pure(*((node->next)), old(_dryad_S4, *((node->next))))); 
        assume !($phys_ptr_cast(local.slist, ^s_node) == $phys_ptr_cast(L#node, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(local.slist, last)), ==(*((last->key)), old(_dryad_S4, *((last->key))))); 
        assume !($phys_ptr_cast(local.slist, ^s_node) == $phys_ptr_cast(L#last, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#last, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(local.slist, last)), @_vcc_ptr_eq_pure(*((last->next)), old(_dryad_S4, *((last->next))))); 
        assume !($phys_ptr_cast(local.slist, ^s_node) == $phys_ptr_cast(L#last, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(local.slist, sibling)), ==(*((sibling->key)), old(_dryad_S4, *((sibling->key))))); 
        assume !($phys_ptr_cast(local.slist, ^s_node) == $phys_ptr_cast(P#sibling, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#sibling, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(local.slist, sibling)), @_vcc_ptr_eq_pure(*((sibling->next)), old(_dryad_S4, *((sibling->next))))); 
        assume !($phys_ptr_cast(local.slist, ^s_node) == $phys_ptr_cast(P#sibling, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node);
        // assume ==>(@_vcc_ptr_neq_null(node), ==(sll_keys(node), @_vcc_intset_union(sll_keys(*((node->next))), @_vcc_intset_singleton(*((node->key)))))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#node, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#node, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(node), ==(sll_list_len_next(node), unchecked+(sll_list_len_next(*((node->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#node, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(node), ==(sll(node), &&(sll(*((node->next))), unchecked!(@_vcc_oset_in(node, sll_reach(*((node->next)))))))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#node, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(node), ==(sll_reach(node), @_vcc_oset_union(sll_reach(*((node->next))), @_vcc_oset_singleton(node)))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#node, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#node, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_keys(last), @_vcc_intset_union(sll_keys(*((last->next))), @_vcc_intset_singleton(*((last->key)))))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#last, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#last, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_list_len_next(last), unchecked+(sll_list_len_next(*((last->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#last, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll(last), &&(sll(*((last->next))), unchecked!(@_vcc_oset_in(last, sll_reach(*((last->next)))))))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#last, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_reach(last), @_vcc_oset_union(sll_reach(*((last->next))), @_vcc_oset_singleton(last)))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#last, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll_keys(sibling), @_vcc_intset_union(sll_keys(*((sibling->next))), @_vcc_intset_singleton(*((sibling->key)))))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#sibling, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#sibling, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll_list_len_next(sibling), unchecked+(sll_list_len_next(*((sibling->next))), 1))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#sibling, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll(sibling), &&(sll(*((sibling->next))), unchecked!(@_vcc_oset_in(sibling, sll_reach(*((sibling->next)))))))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#sibling, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#sibling, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll_reach(sibling), @_vcc_oset_union(sll_reach(*((sibling->next))), @_vcc_oset_singleton(sibling)))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#sibling, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#sibling, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll_keys(local.slist), @_vcc_intset_union(sll_keys(*((local.slist->next))), @_vcc_intset_singleton(*((local.slist->key)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.slist, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll_list_len_next(local.slist), unchecked+(sll_list_len_next(*((local.slist->next))), 1))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.slist, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll(local.slist), &&(sll(*((local.slist->next))), unchecked!(@_vcc_oset_in(local.slist, sll_reach(*((local.slist->next)))))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.slist, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll_reach(local.slist), @_vcc_oset_union(sll_reach(*((local.slist->next))), @_vcc_oset_singleton(local.slist)))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.slist, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.slist, ^s_node)));
        // return local.slist; 
        $result := $phys_ptr_cast(local.slist, ^s_node);
        assume true;
        assert $position_marker();
        goto #exit;
    }
    else
    {
      anon2:
        // assert @_vcc_possibly_unreachable; 
        assert {:PossiblyUnreachable true} true;
    }

  anon9:
    // assume ==>(@_vcc_ptr_neq_null(local.slist), &&(@_vcc_mutable(@state, local.slist), @writes_check(local.slist))); 
    assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> $mutable($s, $phys_ptr_cast(local.slist, ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(local.slist, ^s_node));
    // node := (struct s_node*)@null; 
    L#node := $phys_ptr_cast($null, ^s_node);
    // assert sll_lseg(node, node); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(L#node, ^s_node));
    // assume sll_lseg(node, node); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(L#node, ^s_node));
    // assert sll_lseg(last, last); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#last, ^s_node), $phys_ptr_cast(L#last, ^s_node));
    // assume sll_lseg(last, last); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#last, ^s_node), $phys_ptr_cast(L#last, ^s_node));
    // assert sll_lseg(sibling, sibling); 
    assert F#sll_lseg($s, $phys_ptr_cast(P#sibling, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
    // assume sll_lseg(sibling, sibling); 
    assume F#sll_lseg($s, $phys_ptr_cast(P#sibling, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
    // assert sll_lseg(local.slist, local.slist); 
    assert F#sll_lseg($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(local.slist, ^s_node));
    // assume sll_lseg(local.slist, local.slist); 
    assume F#sll_lseg($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(local.slist, ^s_node));
    // assume ==>(@_vcc_ptr_neq_null(node), ==(sll_keys(node), @_vcc_intset_union(sll_keys(*((node->next))), @_vcc_intset_singleton(*((node->key)))))); 
    assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#node, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#node, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(node), ==(sll_list_len_next(node), unchecked+(sll_list_len_next(*((node->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#node, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)), 1);
    // assume ==>(@_vcc_ptr_neq_null(node), ==(sll(node), &&(sll(*((node->next))), unchecked!(@_vcc_oset_in(node, sll_reach(*((node->next)))))))); 
    assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#node, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(node), ==(sll_reach(node), @_vcc_oset_union(sll_reach(*((node->next))), @_vcc_oset_singleton(node)))); 
    assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#node, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#node, ^s_node)));
    // last := (struct s_node*)@null; 
    L#last := $phys_ptr_cast($null, ^s_node);
    // assert sll_lseg(node, node); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(L#node, ^s_node));
    // assume sll_lseg(node, node); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(L#node, ^s_node));
    // assert sll_lseg(last, last); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#last, ^s_node), $phys_ptr_cast(L#last, ^s_node));
    // assume sll_lseg(last, last); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#last, ^s_node), $phys_ptr_cast(L#last, ^s_node));
    // assert sll_lseg(sibling, sibling); 
    assert F#sll_lseg($s, $phys_ptr_cast(P#sibling, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
    // assume sll_lseg(sibling, sibling); 
    assume F#sll_lseg($s, $phys_ptr_cast(P#sibling, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
    // assert sll_lseg(local.slist, local.slist); 
    assert F#sll_lseg($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(local.slist, ^s_node));
    // assume sll_lseg(local.slist, local.slist); 
    assume F#sll_lseg($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(local.slist, ^s_node));
    // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_keys(last), @_vcc_intset_union(sll_keys(*((last->next))), @_vcc_intset_singleton(*((last->key)))))); 
    assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#last, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#last, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_list_len_next(last), unchecked+(sll_list_len_next(*((last->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#last, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), 1);
    // assume ==>(@_vcc_ptr_neq_null(last), ==(sll(last), &&(sll(*((last->next))), unchecked!(@_vcc_oset_in(last, sll_reach(*((last->next)))))))); 
    assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#last, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_reach(last), @_vcc_oset_union(sll_reach(*((last->next))), @_vcc_oset_singleton(last)))); 
    assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#last, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last, ^s_node)));
    // node := local.slist; 
    L#node := $phys_ptr_cast(local.slist, ^s_node);
    // assert sll_lseg(node, node); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(L#node, ^s_node));
    // assume sll_lseg(node, node); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(L#node, ^s_node));
    // assert sll_lseg(last, last); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#last, ^s_node), $phys_ptr_cast(L#last, ^s_node));
    // assume sll_lseg(last, last); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#last, ^s_node), $phys_ptr_cast(L#last, ^s_node));
    // assert sll_lseg(sibling, sibling); 
    assert F#sll_lseg($s, $phys_ptr_cast(P#sibling, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
    // assume sll_lseg(sibling, sibling); 
    assume F#sll_lseg($s, $phys_ptr_cast(P#sibling, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
    // assert sll_lseg(local.slist, local.slist); 
    assert F#sll_lseg($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(local.slist, ^s_node));
    // assume sll_lseg(local.slist, local.slist); 
    assume F#sll_lseg($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(local.slist, ^s_node));
    loopState#0 := $s;
    assume true;
// INV:LOOPHEAD
    while (true)
 invariant b0000 ==> (F#sll($s,$phys_ptr_cast(P#slist,^s_node)));
invariant b0001 ==> (F#sll($s,$phys_ptr_cast(P#sibling,^s_node)));
invariant b0002 ==> (F#sll($s,$phys_ptr_cast(L#node,^s_node)));
invariant b0003 ==> (F#sll($s,$phys_ptr_cast(L#last,^s_node)));
invariant b0004 ==> (F#sll($s,$phys_ptr_cast(local.slist,^s_node)));
invariant b0005 ==> (F#sll_lseg($s,$phys_ptr_cast(P#slist,^s_node),$phys_ptr_cast(P#sibling,^s_node)));
invariant b0006 ==> (F#sll_lseg($s,$phys_ptr_cast(P#slist,^s_node),$phys_ptr_cast(L#node,^s_node)));
invariant b0007 ==> (F#sll_lseg($s,$phys_ptr_cast(P#slist,^s_node),$phys_ptr_cast(L#last,^s_node)));
invariant b0008 ==> (F#sll_lseg($s,$phys_ptr_cast(P#slist,^s_node),$phys_ptr_cast(local.slist,^s_node)));
invariant b0009 ==> (F#sll_lseg($s,$phys_ptr_cast(P#sibling,^s_node),$phys_ptr_cast(P#slist,^s_node)));
invariant b0010 ==> (F#sll_lseg($s,$phys_ptr_cast(P#sibling,^s_node),$phys_ptr_cast(L#node,^s_node)));
invariant b0011 ==> (F#sll_lseg($s,$phys_ptr_cast(P#sibling,^s_node),$phys_ptr_cast(L#last,^s_node)));
invariant b0012 ==> (F#sll_lseg($s,$phys_ptr_cast(P#sibling,^s_node),$phys_ptr_cast(local.slist,^s_node)));
invariant b0013 ==> (F#sll_lseg($s,$phys_ptr_cast(L#node,^s_node),$phys_ptr_cast(P#slist,^s_node)));
invariant b0014 ==> (F#sll_lseg($s,$phys_ptr_cast(L#node,^s_node),$phys_ptr_cast(P#sibling,^s_node)));
invariant b0015 ==> (F#sll_lseg($s,$phys_ptr_cast(L#node,^s_node),$phys_ptr_cast(L#last,^s_node)));
invariant b0016 ==> (F#sll_lseg($s,$phys_ptr_cast(L#node,^s_node),$phys_ptr_cast(local.slist,^s_node)));
invariant b0017 ==> (F#sll_lseg($s,$phys_ptr_cast(L#last,^s_node),$phys_ptr_cast(P#slist,^s_node)));
invariant b0018 ==> (F#sll_lseg($s,$phys_ptr_cast(L#last,^s_node),$phys_ptr_cast(P#sibling,^s_node)));
invariant b0019 ==> (F#sll_lseg($s,$phys_ptr_cast(L#last,^s_node),$phys_ptr_cast(L#node,^s_node)));
invariant b0020 ==> (F#sll_lseg($s,$phys_ptr_cast(L#last,^s_node),$phys_ptr_cast(local.slist,^s_node)));
invariant b0021 ==> (F#sll_lseg($s,$phys_ptr_cast(local.slist,^s_node),$phys_ptr_cast(P#slist,^s_node)));
invariant b0022 ==> (F#sll_lseg($s,$phys_ptr_cast(local.slist,^s_node),$phys_ptr_cast(P#sibling,^s_node)));
invariant b0023 ==> (F#sll_lseg($s,$phys_ptr_cast(local.slist,^s_node),$phys_ptr_cast(L#node,^s_node)));
invariant b0024 ==> (F#sll_lseg($s,$phys_ptr_cast(local.slist,^s_node),$phys_ptr_cast(L#last,^s_node)));
invariant b0025 ==> ($oset_disjoint(F#sll_reach($s,$phys_ptr_cast(P#slist,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#sibling,^s_node))));
invariant b0026 ==> ($oset_disjoint(F#sll_reach($s,$phys_ptr_cast(P#slist,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#node,^s_node))));
invariant b0027 ==> ($oset_disjoint(F#sll_reach($s,$phys_ptr_cast(P#slist,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#last,^s_node))));
invariant b0028 ==> ($oset_disjoint(F#sll_reach($s,$phys_ptr_cast(P#slist,^s_node)),F#sll_reach($s,$phys_ptr_cast(local.slist,^s_node))));
invariant b0029 ==> ($oset_disjoint(F#sll_reach($s,$phys_ptr_cast(P#sibling,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#slist,^s_node))));
invariant b0030 ==> ($oset_disjoint(F#sll_reach($s,$phys_ptr_cast(P#sibling,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#node,^s_node))));
invariant b0031 ==> ($oset_disjoint(F#sll_reach($s,$phys_ptr_cast(P#sibling,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#last,^s_node))));
invariant b0032 ==> ($oset_disjoint(F#sll_reach($s,$phys_ptr_cast(P#sibling,^s_node)),F#sll_reach($s,$phys_ptr_cast(local.slist,^s_node))));
invariant b0033 ==> ($oset_disjoint(F#sll_reach($s,$phys_ptr_cast(L#node,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#slist,^s_node))));
invariant b0034 ==> ($oset_disjoint(F#sll_reach($s,$phys_ptr_cast(L#node,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#sibling,^s_node))));
invariant b0035 ==> ($oset_disjoint(F#sll_reach($s,$phys_ptr_cast(L#node,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#last,^s_node))));
invariant b0036 ==> ($oset_disjoint(F#sll_reach($s,$phys_ptr_cast(L#node,^s_node)),F#sll_reach($s,$phys_ptr_cast(local.slist,^s_node))));
invariant b0037 ==> ($oset_disjoint(F#sll_reach($s,$phys_ptr_cast(L#last,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#slist,^s_node))));
invariant b0038 ==> ($oset_disjoint(F#sll_reach($s,$phys_ptr_cast(L#last,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#sibling,^s_node))));
invariant b0039 ==> ($oset_disjoint(F#sll_reach($s,$phys_ptr_cast(L#last,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#node,^s_node))));
invariant b0040 ==> ($oset_disjoint(F#sll_reach($s,$phys_ptr_cast(L#last,^s_node)),F#sll_reach($s,$phys_ptr_cast(local.slist,^s_node))));
invariant b0041 ==> ($oset_disjoint(F#sll_reach($s,$phys_ptr_cast(local.slist,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#slist,^s_node))));
invariant b0042 ==> ($oset_disjoint(F#sll_reach($s,$phys_ptr_cast(local.slist,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#sibling,^s_node))));
invariant b0043 ==> ($oset_disjoint(F#sll_reach($s,$phys_ptr_cast(local.slist,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#node,^s_node))));
invariant b0044 ==> ($oset_disjoint(F#sll_reach($s,$phys_ptr_cast(local.slist,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#last,^s_node))));
invariant b0045 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(P#slist,^s_node),$phys_ptr_cast(P#sibling,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#sibling,^s_node))));
invariant b0046 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(P#slist,^s_node),$phys_ptr_cast(L#node,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#node,^s_node))));
invariant b0047 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(P#slist,^s_node),$phys_ptr_cast(L#last,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#last,^s_node))));
invariant b0048 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(P#slist,^s_node),$phys_ptr_cast(local.slist,^s_node)),F#sll_reach($s,$phys_ptr_cast(local.slist,^s_node))));
invariant b0049 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(P#sibling,^s_node),$phys_ptr_cast(P#slist,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#slist,^s_node))));
invariant b0050 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(P#sibling,^s_node),$phys_ptr_cast(L#node,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#node,^s_node))));
invariant b0051 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(P#sibling,^s_node),$phys_ptr_cast(L#last,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#last,^s_node))));
invariant b0052 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(P#sibling,^s_node),$phys_ptr_cast(local.slist,^s_node)),F#sll_reach($s,$phys_ptr_cast(local.slist,^s_node))));
invariant b0053 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#node,^s_node),$phys_ptr_cast(P#slist,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#slist,^s_node))));
invariant b0054 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#node,^s_node),$phys_ptr_cast(P#sibling,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#sibling,^s_node))));
invariant b0055 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#node,^s_node),$phys_ptr_cast(L#last,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#last,^s_node))));
invariant b0056 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#node,^s_node),$phys_ptr_cast(local.slist,^s_node)),F#sll_reach($s,$phys_ptr_cast(local.slist,^s_node))));
invariant b0057 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#last,^s_node),$phys_ptr_cast(P#slist,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#slist,^s_node))));
invariant b0058 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#last,^s_node),$phys_ptr_cast(P#sibling,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#sibling,^s_node))));
invariant b0059 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#last,^s_node),$phys_ptr_cast(L#node,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#node,^s_node))));
invariant b0060 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#last,^s_node),$phys_ptr_cast(local.slist,^s_node)),F#sll_reach($s,$phys_ptr_cast(local.slist,^s_node))));
invariant b0061 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(local.slist,^s_node),$phys_ptr_cast(P#slist,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#slist,^s_node))));
invariant b0062 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(local.slist,^s_node),$phys_ptr_cast(P#sibling,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#sibling,^s_node))));
invariant b0063 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(local.slist,^s_node),$phys_ptr_cast(L#node,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#node,^s_node))));
invariant b0064 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(local.slist,^s_node),$phys_ptr_cast(L#last,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#last,^s_node))));
invariant b0065 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(P#slist,^s_node),$phys_ptr_cast(P#sibling,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#node,^s_node))));
invariant b0066 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(P#slist,^s_node),$phys_ptr_cast(P#sibling,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#last,^s_node))));
invariant b0067 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(P#slist,^s_node),$phys_ptr_cast(P#sibling,^s_node)),F#sll_reach($s,$phys_ptr_cast(local.slist,^s_node))));
invariant b0068 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(P#slist,^s_node),$phys_ptr_cast(L#node,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#sibling,^s_node))));
invariant b0069 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(P#slist,^s_node),$phys_ptr_cast(L#node,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#last,^s_node))));
invariant b0070 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(P#slist,^s_node),$phys_ptr_cast(L#node,^s_node)),F#sll_reach($s,$phys_ptr_cast(local.slist,^s_node))));
invariant b0071 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(P#slist,^s_node),$phys_ptr_cast(L#last,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#sibling,^s_node))));
invariant b0072 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(P#slist,^s_node),$phys_ptr_cast(L#last,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#node,^s_node))));
invariant b0073 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(P#slist,^s_node),$phys_ptr_cast(L#last,^s_node)),F#sll_reach($s,$phys_ptr_cast(local.slist,^s_node))));
invariant b0074 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(P#slist,^s_node),$phys_ptr_cast(local.slist,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#sibling,^s_node))));
invariant b0075 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(P#slist,^s_node),$phys_ptr_cast(local.slist,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#node,^s_node))));
invariant b0076 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(P#slist,^s_node),$phys_ptr_cast(local.slist,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#last,^s_node))));
invariant b0077 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(P#sibling,^s_node),$phys_ptr_cast(P#slist,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#node,^s_node))));
invariant b0078 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(P#sibling,^s_node),$phys_ptr_cast(P#slist,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#last,^s_node))));
invariant b0079 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(P#sibling,^s_node),$phys_ptr_cast(P#slist,^s_node)),F#sll_reach($s,$phys_ptr_cast(local.slist,^s_node))));
invariant b0080 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(P#sibling,^s_node),$phys_ptr_cast(L#node,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#slist,^s_node))));
invariant b0081 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(P#sibling,^s_node),$phys_ptr_cast(L#node,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#last,^s_node))));
invariant b0082 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(P#sibling,^s_node),$phys_ptr_cast(L#node,^s_node)),F#sll_reach($s,$phys_ptr_cast(local.slist,^s_node))));
invariant b0083 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(P#sibling,^s_node),$phys_ptr_cast(L#last,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#slist,^s_node))));
invariant b0084 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(P#sibling,^s_node),$phys_ptr_cast(L#last,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#node,^s_node))));
invariant b0085 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(P#sibling,^s_node),$phys_ptr_cast(L#last,^s_node)),F#sll_reach($s,$phys_ptr_cast(local.slist,^s_node))));
invariant b0086 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(P#sibling,^s_node),$phys_ptr_cast(local.slist,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#slist,^s_node))));
invariant b0087 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(P#sibling,^s_node),$phys_ptr_cast(local.slist,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#node,^s_node))));
invariant b0088 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(P#sibling,^s_node),$phys_ptr_cast(local.slist,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#last,^s_node))));
invariant b0089 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#node,^s_node),$phys_ptr_cast(P#slist,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#sibling,^s_node))));
invariant b0090 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#node,^s_node),$phys_ptr_cast(P#slist,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#last,^s_node))));
invariant b0091 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#node,^s_node),$phys_ptr_cast(P#slist,^s_node)),F#sll_reach($s,$phys_ptr_cast(local.slist,^s_node))));
invariant b0092 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#node,^s_node),$phys_ptr_cast(P#sibling,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#slist,^s_node))));
invariant b0093 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#node,^s_node),$phys_ptr_cast(P#sibling,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#last,^s_node))));
invariant b0094 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#node,^s_node),$phys_ptr_cast(P#sibling,^s_node)),F#sll_reach($s,$phys_ptr_cast(local.slist,^s_node))));
invariant b0095 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#node,^s_node),$phys_ptr_cast(L#last,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#slist,^s_node))));
invariant b0096 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#node,^s_node),$phys_ptr_cast(L#last,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#sibling,^s_node))));
invariant b0097 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#node,^s_node),$phys_ptr_cast(L#last,^s_node)),F#sll_reach($s,$phys_ptr_cast(local.slist,^s_node))));
invariant b0098 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#node,^s_node),$phys_ptr_cast(local.slist,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#slist,^s_node))));
invariant b0099 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#node,^s_node),$phys_ptr_cast(local.slist,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#sibling,^s_node))));
invariant b0100 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#node,^s_node),$phys_ptr_cast(local.slist,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#last,^s_node))));
invariant b0101 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#last,^s_node),$phys_ptr_cast(P#slist,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#sibling,^s_node))));
invariant b0102 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#last,^s_node),$phys_ptr_cast(P#slist,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#node,^s_node))));
invariant b0103 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#last,^s_node),$phys_ptr_cast(P#slist,^s_node)),F#sll_reach($s,$phys_ptr_cast(local.slist,^s_node))));
invariant b0104 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#last,^s_node),$phys_ptr_cast(P#sibling,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#slist,^s_node))));
invariant b0105 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#last,^s_node),$phys_ptr_cast(P#sibling,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#node,^s_node))));
invariant b0106 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#last,^s_node),$phys_ptr_cast(P#sibling,^s_node)),F#sll_reach($s,$phys_ptr_cast(local.slist,^s_node))));
invariant b0107 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#last,^s_node),$phys_ptr_cast(L#node,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#slist,^s_node))));
invariant b0108 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#last,^s_node),$phys_ptr_cast(L#node,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#sibling,^s_node))));
invariant b0109 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#last,^s_node),$phys_ptr_cast(L#node,^s_node)),F#sll_reach($s,$phys_ptr_cast(local.slist,^s_node))));
invariant b0110 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#last,^s_node),$phys_ptr_cast(local.slist,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#slist,^s_node))));
invariant b0111 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#last,^s_node),$phys_ptr_cast(local.slist,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#sibling,^s_node))));
invariant b0112 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(L#last,^s_node),$phys_ptr_cast(local.slist,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#node,^s_node))));
invariant b0113 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(local.slist,^s_node),$phys_ptr_cast(P#slist,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#sibling,^s_node))));
invariant b0114 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(local.slist,^s_node),$phys_ptr_cast(P#slist,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#node,^s_node))));
invariant b0115 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(local.slist,^s_node),$phys_ptr_cast(P#slist,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#last,^s_node))));
invariant b0116 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(local.slist,^s_node),$phys_ptr_cast(P#sibling,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#slist,^s_node))));
invariant b0117 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(local.slist,^s_node),$phys_ptr_cast(P#sibling,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#node,^s_node))));
invariant b0118 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(local.slist,^s_node),$phys_ptr_cast(P#sibling,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#last,^s_node))));
invariant b0119 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(local.slist,^s_node),$phys_ptr_cast(L#node,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#slist,^s_node))));
invariant b0120 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(local.slist,^s_node),$phys_ptr_cast(L#node,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#sibling,^s_node))));
invariant b0121 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(local.slist,^s_node),$phys_ptr_cast(L#node,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#last,^s_node))));
invariant b0122 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(local.slist,^s_node),$phys_ptr_cast(L#last,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#slist,^s_node))));
invariant b0123 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(local.slist,^s_node),$phys_ptr_cast(L#last,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#sibling,^s_node))));
invariant b0124 ==> ($oset_disjoint(F#sll_lseg_reach($s,$phys_ptr_cast(local.slist,^s_node),$phys_ptr_cast(L#last,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#node,^s_node))));
invariant b0125 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#slist,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#sibling,^s_node))));
invariant b0126 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#slist,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#node,^s_node))));
invariant b0127 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#slist,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#last,^s_node))));
invariant b0128 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#slist,^s_node)),F#sll_reach($s,$phys_ptr_cast(local.slist,^s_node))));
invariant b0129 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#sibling,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#slist,^s_node))));
invariant b0130 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#sibling,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#node,^s_node))));
invariant b0131 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#sibling,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#last,^s_node))));
invariant b0132 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#sibling,^s_node)),F#sll_reach($s,$phys_ptr_cast(local.slist,^s_node))));
invariant b0133 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#node,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#slist,^s_node))));
invariant b0134 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#node,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#sibling,^s_node))));
invariant b0135 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#node,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#last,^s_node))));
invariant b0136 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#node,^s_node)),F#sll_reach($s,$phys_ptr_cast(local.slist,^s_node))));
invariant b0137 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#slist,^s_node))));
invariant b0138 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#sibling,^s_node))));
invariant b0139 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#node,^s_node))));
invariant b0140 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last,^s_node)),F#sll_reach($s,$phys_ptr_cast(local.slist,^s_node))));
invariant b0141 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.slist,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#slist,^s_node))));
invariant b0142 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.slist,^s_node)),F#sll_reach($s,$phys_ptr_cast(P#sibling,^s_node))));
invariant b0143 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.slist,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#node,^s_node))));
invariant b0144 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.slist,^s_node)),F#sll_reach($s,$phys_ptr_cast(L#last,^s_node))));
invariant b0145 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#slist,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(P#sibling,^s_node),$phys_ptr_cast(L#node,^s_node))));
invariant b0146 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#slist,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(P#sibling,^s_node),$phys_ptr_cast(L#last,^s_node))));
invariant b0147 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#slist,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(P#sibling,^s_node),$phys_ptr_cast(local.slist,^s_node))));
invariant b0148 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#slist,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(L#node,^s_node),$phys_ptr_cast(P#sibling,^s_node))));
invariant b0149 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#slist,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(L#node,^s_node),$phys_ptr_cast(L#last,^s_node))));
invariant b0150 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#slist,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(L#node,^s_node),$phys_ptr_cast(local.slist,^s_node))));
invariant b0151 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#slist,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(L#last,^s_node),$phys_ptr_cast(P#sibling,^s_node))));
invariant b0152 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#slist,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(L#last,^s_node),$phys_ptr_cast(L#node,^s_node))));
invariant b0153 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#slist,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(L#last,^s_node),$phys_ptr_cast(local.slist,^s_node))));
invariant b0154 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#slist,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(local.slist,^s_node),$phys_ptr_cast(P#sibling,^s_node))));
invariant b0155 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#slist,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(local.slist,^s_node),$phys_ptr_cast(L#node,^s_node))));
invariant b0156 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#slist,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(local.slist,^s_node),$phys_ptr_cast(L#last,^s_node))));
invariant b0157 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#sibling,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(P#slist,^s_node),$phys_ptr_cast(L#node,^s_node))));
invariant b0158 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#sibling,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(P#slist,^s_node),$phys_ptr_cast(L#last,^s_node))));
invariant b0159 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#sibling,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(P#slist,^s_node),$phys_ptr_cast(local.slist,^s_node))));
invariant b0160 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#sibling,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(L#node,^s_node),$phys_ptr_cast(P#slist,^s_node))));
invariant b0161 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#sibling,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(L#node,^s_node),$phys_ptr_cast(L#last,^s_node))));
invariant b0162 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#sibling,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(L#node,^s_node),$phys_ptr_cast(local.slist,^s_node))));
invariant b0163 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#sibling,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(L#last,^s_node),$phys_ptr_cast(P#slist,^s_node))));
invariant b0164 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#sibling,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(L#last,^s_node),$phys_ptr_cast(L#node,^s_node))));
invariant b0165 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#sibling,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(L#last,^s_node),$phys_ptr_cast(local.slist,^s_node))));
invariant b0166 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#sibling,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(local.slist,^s_node),$phys_ptr_cast(P#slist,^s_node))));
invariant b0167 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#sibling,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(local.slist,^s_node),$phys_ptr_cast(L#node,^s_node))));
invariant b0168 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#sibling,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(local.slist,^s_node),$phys_ptr_cast(L#last,^s_node))));
invariant b0169 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#node,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(P#slist,^s_node),$phys_ptr_cast(P#sibling,^s_node))));
invariant b0170 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#node,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(P#slist,^s_node),$phys_ptr_cast(L#last,^s_node))));
invariant b0171 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#node,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(P#slist,^s_node),$phys_ptr_cast(local.slist,^s_node))));
invariant b0172 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#node,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(P#sibling,^s_node),$phys_ptr_cast(P#slist,^s_node))));
invariant b0173 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#node,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(P#sibling,^s_node),$phys_ptr_cast(L#last,^s_node))));
invariant b0174 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#node,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(P#sibling,^s_node),$phys_ptr_cast(local.slist,^s_node))));
invariant b0175 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#node,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(L#last,^s_node),$phys_ptr_cast(P#slist,^s_node))));
invariant b0176 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#node,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(L#last,^s_node),$phys_ptr_cast(P#sibling,^s_node))));
invariant b0177 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#node,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(L#last,^s_node),$phys_ptr_cast(local.slist,^s_node))));
invariant b0178 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#node,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(local.slist,^s_node),$phys_ptr_cast(P#slist,^s_node))));
invariant b0179 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#node,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(local.slist,^s_node),$phys_ptr_cast(P#sibling,^s_node))));
invariant b0180 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#node,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(local.slist,^s_node),$phys_ptr_cast(L#last,^s_node))));
invariant b0181 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(P#slist,^s_node),$phys_ptr_cast(P#sibling,^s_node))));
invariant b0182 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(P#slist,^s_node),$phys_ptr_cast(L#node,^s_node))));
invariant b0183 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(P#slist,^s_node),$phys_ptr_cast(local.slist,^s_node))));
invariant b0184 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(P#sibling,^s_node),$phys_ptr_cast(P#slist,^s_node))));
invariant b0185 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(P#sibling,^s_node),$phys_ptr_cast(L#node,^s_node))));
invariant b0186 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(P#sibling,^s_node),$phys_ptr_cast(local.slist,^s_node))));
invariant b0187 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(L#node,^s_node),$phys_ptr_cast(P#slist,^s_node))));
invariant b0188 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(L#node,^s_node),$phys_ptr_cast(P#sibling,^s_node))));
invariant b0189 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(L#node,^s_node),$phys_ptr_cast(local.slist,^s_node))));
invariant b0190 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(local.slist,^s_node),$phys_ptr_cast(P#slist,^s_node))));
invariant b0191 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(local.slist,^s_node),$phys_ptr_cast(P#sibling,^s_node))));
invariant b0192 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(local.slist,^s_node),$phys_ptr_cast(L#node,^s_node))));
invariant b0193 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.slist,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(P#slist,^s_node),$phys_ptr_cast(P#sibling,^s_node))));
invariant b0194 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.slist,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(P#slist,^s_node),$phys_ptr_cast(L#node,^s_node))));
invariant b0195 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.slist,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(P#slist,^s_node),$phys_ptr_cast(L#last,^s_node))));
invariant b0196 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.slist,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(P#sibling,^s_node),$phys_ptr_cast(P#slist,^s_node))));
invariant b0197 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.slist,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(P#sibling,^s_node),$phys_ptr_cast(L#node,^s_node))));
invariant b0198 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.slist,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(P#sibling,^s_node),$phys_ptr_cast(L#last,^s_node))));
invariant b0199 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.slist,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(L#node,^s_node),$phys_ptr_cast(P#slist,^s_node))));
invariant b0200 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.slist,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(L#node,^s_node),$phys_ptr_cast(P#sibling,^s_node))));
invariant b0201 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.slist,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(L#node,^s_node),$phys_ptr_cast(L#last,^s_node))));
invariant b0202 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.slist,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(L#last,^s_node),$phys_ptr_cast(P#slist,^s_node))));
invariant b0203 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.slist,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(L#last,^s_node),$phys_ptr_cast(P#sibling,^s_node))));
invariant b0204 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.slist,^s_node)),F#sll_lseg_reach($s,$phys_ptr_cast(L#last,^s_node),$phys_ptr_cast(L#node,^s_node))));
invariant b0205 ==> ($non_null($phys_ptr_cast(P#slist,^s_node)));
invariant b0206 ==> ($non_null($phys_ptr_cast(P#sibling,^s_node)));
invariant b0207 ==> ($non_null($phys_ptr_cast(L#node,^s_node)));
invariant b0208 ==> ($non_null($phys_ptr_cast(L#last,^s_node)));
invariant b0209 ==> ($non_null($phys_ptr_cast(local.slist,^s_node)));
invariant b0210 ==> ($is_null($phys_ptr_cast(P#slist,^s_node)));
invariant b0211 ==> ($is_null($phys_ptr_cast(P#sibling,^s_node)));
invariant b0212 ==> ($is_null($phys_ptr_cast(L#node,^s_node)));
invariant b0213 ==> ($is_null($phys_ptr_cast(L#last,^s_node)));
invariant b0214 ==> ($is_null($phys_ptr_cast(local.slist,^s_node)));
invariant b0215 ==> (($phys_ptr_cast(P#slist,^s_node) == $phys_ptr_cast(P#sibling,^s_node)));
invariant b0216 ==> (($phys_ptr_cast(P#slist,^s_node) == $phys_ptr_cast(L#node,^s_node)));
invariant b0217 ==> (($phys_ptr_cast(P#slist,^s_node) == $phys_ptr_cast(L#last,^s_node)));
invariant b0218 ==> (($phys_ptr_cast(P#slist,^s_node) == $phys_ptr_cast(local.slist,^s_node)));
invariant b0219 ==> (($phys_ptr_cast(P#sibling,^s_node) == $phys_ptr_cast(P#slist,^s_node)));
invariant b0220 ==> (($phys_ptr_cast(P#sibling,^s_node) == $phys_ptr_cast(L#node,^s_node)));
invariant b0221 ==> (($phys_ptr_cast(P#sibling,^s_node) == $phys_ptr_cast(L#last,^s_node)));
invariant b0222 ==> (($phys_ptr_cast(P#sibling,^s_node) == $phys_ptr_cast(local.slist,^s_node)));
invariant b0223 ==> (($phys_ptr_cast(L#node,^s_node) == $phys_ptr_cast(P#slist,^s_node)));
invariant b0224 ==> (($phys_ptr_cast(L#node,^s_node) == $phys_ptr_cast(P#sibling,^s_node)));
invariant b0225 ==> (($phys_ptr_cast(L#node,^s_node) == $phys_ptr_cast(L#last,^s_node)));
invariant b0226 ==> (($phys_ptr_cast(L#node,^s_node) == $phys_ptr_cast(local.slist,^s_node)));
invariant b0227 ==> (($phys_ptr_cast(L#last,^s_node) == $phys_ptr_cast(P#slist,^s_node)));
invariant b0228 ==> (($phys_ptr_cast(L#last,^s_node) == $phys_ptr_cast(P#sibling,^s_node)));
invariant b0229 ==> (($phys_ptr_cast(L#last,^s_node) == $phys_ptr_cast(L#node,^s_node)));
invariant b0230 ==> (($phys_ptr_cast(L#last,^s_node) == $phys_ptr_cast(local.slist,^s_node)));
invariant b0231 ==> (($phys_ptr_cast(local.slist,^s_node) == $phys_ptr_cast(P#slist,^s_node)));
invariant b0232 ==> (($phys_ptr_cast(local.slist,^s_node) == $phys_ptr_cast(P#sibling,^s_node)));
invariant b0233 ==> (($phys_ptr_cast(local.slist,^s_node) == $phys_ptr_cast(L#node,^s_node)));
invariant b0234 ==> (($phys_ptr_cast(local.slist,^s_node) == $phys_ptr_cast(L#last,^s_node)));
invariant b0235 ==> (($non_null($phys_ptr_cast(P#slist,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#slist,^s_node),^s_node))));
invariant b0236 ==> (($non_null($phys_ptr_cast(P#sibling,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#sibling,^s_node),^s_node))));
invariant b0237 ==> (($non_null($phys_ptr_cast(L#node,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#node,^s_node),^s_node))));
invariant b0238 ==> (($non_null($phys_ptr_cast(L#last,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#last,^s_node),^s_node))));
invariant b0239 ==> (($non_null($phys_ptr_cast(local.slist,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.slist,^s_node),^s_node))));
invariant b0240 ==> (($non_null($phys_ptr_cast(P#slist,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#slist,^s_node),^s_node))));
invariant b0241 ==> (($non_null($phys_ptr_cast(P#sibling,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#sibling,^s_node),^s_node))));
invariant b0242 ==> (($non_null($phys_ptr_cast(L#node,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#node,^s_node),^s_node))));
invariant b0243 ==> (($non_null($phys_ptr_cast(L#last,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#last,^s_node),^s_node))));
invariant b0244 ==> (($non_null($phys_ptr_cast(local.slist,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.slist,^s_node),^s_node))));
invariant b0245 ==> (($non_null($phys_ptr_cast(P#slist,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#slist,^s_node),^s_node) == $phys_ptr_cast(P#sibling,^s_node))));
invariant b0246 ==> (($non_null($phys_ptr_cast(P#slist,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#slist,^s_node),^s_node) == $phys_ptr_cast(L#node,^s_node))));
invariant b0247 ==> (($non_null($phys_ptr_cast(P#slist,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#slist,^s_node),^s_node) == $phys_ptr_cast(L#last,^s_node))));
invariant b0248 ==> (($non_null($phys_ptr_cast(P#slist,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#slist,^s_node),^s_node) == $phys_ptr_cast(local.slist,^s_node))));
invariant b0249 ==> (($non_null($phys_ptr_cast(P#sibling,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#sibling,^s_node),^s_node) == $phys_ptr_cast(P#slist,^s_node))));
invariant b0250 ==> (($non_null($phys_ptr_cast(P#sibling,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#sibling,^s_node),^s_node) == $phys_ptr_cast(L#node,^s_node))));
invariant b0251 ==> (($non_null($phys_ptr_cast(P#sibling,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#sibling,^s_node),^s_node) == $phys_ptr_cast(L#last,^s_node))));
invariant b0252 ==> (($non_null($phys_ptr_cast(P#sibling,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#sibling,^s_node),^s_node) == $phys_ptr_cast(local.slist,^s_node))));
invariant b0253 ==> (($non_null($phys_ptr_cast(L#node,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#node,^s_node),^s_node) == $phys_ptr_cast(P#slist,^s_node))));
invariant b0254 ==> (($non_null($phys_ptr_cast(L#node,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#node,^s_node),^s_node) == $phys_ptr_cast(P#sibling,^s_node))));
invariant b0255 ==> (($non_null($phys_ptr_cast(L#node,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#node,^s_node),^s_node) == $phys_ptr_cast(L#last,^s_node))));
invariant b0256 ==> (($non_null($phys_ptr_cast(L#node,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#node,^s_node),^s_node) == $phys_ptr_cast(local.slist,^s_node))));
invariant b0257 ==> (($non_null($phys_ptr_cast(L#last,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#last,^s_node),^s_node) == $phys_ptr_cast(P#slist,^s_node))));
invariant b0258 ==> (($non_null($phys_ptr_cast(L#last,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#last,^s_node),^s_node) == $phys_ptr_cast(P#sibling,^s_node))));
invariant b0259 ==> (($non_null($phys_ptr_cast(L#last,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#last,^s_node),^s_node) == $phys_ptr_cast(L#node,^s_node))));
invariant b0260 ==> (($non_null($phys_ptr_cast(L#last,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#last,^s_node),^s_node) == $phys_ptr_cast(local.slist,^s_node))));
invariant b0261 ==> (($non_null($phys_ptr_cast(local.slist,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.slist,^s_node),^s_node) == $phys_ptr_cast(P#slist,^s_node))));
invariant b0262 ==> (($non_null($phys_ptr_cast(local.slist,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.slist,^s_node),^s_node) == $phys_ptr_cast(P#sibling,^s_node))));
invariant b0263 ==> (($non_null($phys_ptr_cast(local.slist,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.slist,^s_node),^s_node) == $phys_ptr_cast(L#node,^s_node))));
invariant b0264 ==> (($non_null($phys_ptr_cast(local.slist,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.slist,^s_node),^s_node) == $phys_ptr_cast(L#last,^s_node))));
invariant b0265 ==> ((!($oset_in($phys_ptr_cast(P#slist,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(P#sibling,^s_node),$phys_ptr_cast(L#node,^s_node))))));
invariant b0266 ==> ((!($oset_in($phys_ptr_cast(P#slist,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(P#sibling,^s_node),$phys_ptr_cast(L#last,^s_node))))));
invariant b0267 ==> ((!($oset_in($phys_ptr_cast(P#slist,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(P#sibling,^s_node),$phys_ptr_cast(local.slist,^s_node))))));
invariant b0268 ==> ((!($oset_in($phys_ptr_cast(P#slist,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(L#node,^s_node),$phys_ptr_cast(P#sibling,^s_node))))));
invariant b0269 ==> ((!($oset_in($phys_ptr_cast(P#slist,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(L#node,^s_node),$phys_ptr_cast(L#last,^s_node))))));
invariant b0270 ==> ((!($oset_in($phys_ptr_cast(P#slist,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(L#node,^s_node),$phys_ptr_cast(local.slist,^s_node))))));
invariant b0271 ==> ((!($oset_in($phys_ptr_cast(P#slist,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(L#last,^s_node),$phys_ptr_cast(P#sibling,^s_node))))));
invariant b0272 ==> ((!($oset_in($phys_ptr_cast(P#slist,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(L#last,^s_node),$phys_ptr_cast(L#node,^s_node))))));
invariant b0273 ==> ((!($oset_in($phys_ptr_cast(P#slist,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(L#last,^s_node),$phys_ptr_cast(local.slist,^s_node))))));
invariant b0274 ==> ((!($oset_in($phys_ptr_cast(P#slist,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(local.slist,^s_node),$phys_ptr_cast(P#sibling,^s_node))))));
invariant b0275 ==> ((!($oset_in($phys_ptr_cast(P#slist,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(local.slist,^s_node),$phys_ptr_cast(L#node,^s_node))))));
invariant b0276 ==> ((!($oset_in($phys_ptr_cast(P#slist,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(local.slist,^s_node),$phys_ptr_cast(L#last,^s_node))))));
invariant b0277 ==> ((!($oset_in($phys_ptr_cast(P#sibling,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(P#slist,^s_node),$phys_ptr_cast(L#node,^s_node))))));
invariant b0278 ==> ((!($oset_in($phys_ptr_cast(P#sibling,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(P#slist,^s_node),$phys_ptr_cast(L#last,^s_node))))));
invariant b0279 ==> ((!($oset_in($phys_ptr_cast(P#sibling,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(P#slist,^s_node),$phys_ptr_cast(local.slist,^s_node))))));
invariant b0280 ==> ((!($oset_in($phys_ptr_cast(P#sibling,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(L#node,^s_node),$phys_ptr_cast(P#slist,^s_node))))));
invariant b0281 ==> ((!($oset_in($phys_ptr_cast(P#sibling,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(L#node,^s_node),$phys_ptr_cast(L#last,^s_node))))));
invariant b0282 ==> ((!($oset_in($phys_ptr_cast(P#sibling,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(L#node,^s_node),$phys_ptr_cast(local.slist,^s_node))))));
invariant b0283 ==> ((!($oset_in($phys_ptr_cast(P#sibling,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(L#last,^s_node),$phys_ptr_cast(P#slist,^s_node))))));
invariant b0284 ==> ((!($oset_in($phys_ptr_cast(P#sibling,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(L#last,^s_node),$phys_ptr_cast(L#node,^s_node))))));
invariant b0285 ==> ((!($oset_in($phys_ptr_cast(P#sibling,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(L#last,^s_node),$phys_ptr_cast(local.slist,^s_node))))));
invariant b0286 ==> ((!($oset_in($phys_ptr_cast(P#sibling,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(local.slist,^s_node),$phys_ptr_cast(P#slist,^s_node))))));
invariant b0287 ==> ((!($oset_in($phys_ptr_cast(P#sibling,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(local.slist,^s_node),$phys_ptr_cast(L#node,^s_node))))));
invariant b0288 ==> ((!($oset_in($phys_ptr_cast(P#sibling,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(local.slist,^s_node),$phys_ptr_cast(L#last,^s_node))))));
invariant b0289 ==> ((!($oset_in($phys_ptr_cast(L#node,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(P#slist,^s_node),$phys_ptr_cast(P#sibling,^s_node))))));
invariant b0290 ==> ((!($oset_in($phys_ptr_cast(L#node,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(P#slist,^s_node),$phys_ptr_cast(L#last,^s_node))))));
invariant b0291 ==> ((!($oset_in($phys_ptr_cast(L#node,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(P#slist,^s_node),$phys_ptr_cast(local.slist,^s_node))))));
invariant b0292 ==> ((!($oset_in($phys_ptr_cast(L#node,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(P#sibling,^s_node),$phys_ptr_cast(P#slist,^s_node))))));
invariant b0293 ==> ((!($oset_in($phys_ptr_cast(L#node,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(P#sibling,^s_node),$phys_ptr_cast(L#last,^s_node))))));
invariant b0294 ==> ((!($oset_in($phys_ptr_cast(L#node,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(P#sibling,^s_node),$phys_ptr_cast(local.slist,^s_node))))));
invariant b0295 ==> ((!($oset_in($phys_ptr_cast(L#node,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(L#last,^s_node),$phys_ptr_cast(P#slist,^s_node))))));
invariant b0296 ==> ((!($oset_in($phys_ptr_cast(L#node,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(L#last,^s_node),$phys_ptr_cast(P#sibling,^s_node))))));
invariant b0297 ==> ((!($oset_in($phys_ptr_cast(L#node,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(L#last,^s_node),$phys_ptr_cast(local.slist,^s_node))))));
invariant b0298 ==> ((!($oset_in($phys_ptr_cast(L#node,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(local.slist,^s_node),$phys_ptr_cast(P#slist,^s_node))))));
invariant b0299 ==> ((!($oset_in($phys_ptr_cast(L#node,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(local.slist,^s_node),$phys_ptr_cast(P#sibling,^s_node))))));
invariant b0300 ==> ((!($oset_in($phys_ptr_cast(L#node,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(local.slist,^s_node),$phys_ptr_cast(L#last,^s_node))))));
invariant b0301 ==> ((!($oset_in($phys_ptr_cast(L#last,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(P#slist,^s_node),$phys_ptr_cast(P#sibling,^s_node))))));
invariant b0302 ==> ((!($oset_in($phys_ptr_cast(L#last,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(P#slist,^s_node),$phys_ptr_cast(L#node,^s_node))))));
invariant b0303 ==> ((!($oset_in($phys_ptr_cast(L#last,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(P#slist,^s_node),$phys_ptr_cast(local.slist,^s_node))))));
invariant b0304 ==> ((!($oset_in($phys_ptr_cast(L#last,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(P#sibling,^s_node),$phys_ptr_cast(P#slist,^s_node))))));
invariant b0305 ==> ((!($oset_in($phys_ptr_cast(L#last,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(P#sibling,^s_node),$phys_ptr_cast(L#node,^s_node))))));
invariant b0306 ==> ((!($oset_in($phys_ptr_cast(L#last,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(P#sibling,^s_node),$phys_ptr_cast(local.slist,^s_node))))));
invariant b0307 ==> ((!($oset_in($phys_ptr_cast(L#last,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(L#node,^s_node),$phys_ptr_cast(P#slist,^s_node))))));
invariant b0308 ==> ((!($oset_in($phys_ptr_cast(L#last,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(L#node,^s_node),$phys_ptr_cast(P#sibling,^s_node))))));
invariant b0309 ==> ((!($oset_in($phys_ptr_cast(L#last,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(L#node,^s_node),$phys_ptr_cast(local.slist,^s_node))))));
invariant b0310 ==> ((!($oset_in($phys_ptr_cast(L#last,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(local.slist,^s_node),$phys_ptr_cast(P#slist,^s_node))))));
invariant b0311 ==> ((!($oset_in($phys_ptr_cast(L#last,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(local.slist,^s_node),$phys_ptr_cast(P#sibling,^s_node))))));
invariant b0312 ==> ((!($oset_in($phys_ptr_cast(L#last,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(local.slist,^s_node),$phys_ptr_cast(L#node,^s_node))))));
invariant b0313 ==> ((!($oset_in($phys_ptr_cast(local.slist,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(P#slist,^s_node),$phys_ptr_cast(P#sibling,^s_node))))));
invariant b0314 ==> ((!($oset_in($phys_ptr_cast(local.slist,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(P#slist,^s_node),$phys_ptr_cast(L#node,^s_node))))));
invariant b0315 ==> ((!($oset_in($phys_ptr_cast(local.slist,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(P#slist,^s_node),$phys_ptr_cast(L#last,^s_node))))));
invariant b0316 ==> ((!($oset_in($phys_ptr_cast(local.slist,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(P#sibling,^s_node),$phys_ptr_cast(P#slist,^s_node))))));
invariant b0317 ==> ((!($oset_in($phys_ptr_cast(local.slist,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(P#sibling,^s_node),$phys_ptr_cast(L#node,^s_node))))));
invariant b0318 ==> ((!($oset_in($phys_ptr_cast(local.slist,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(P#sibling,^s_node),$phys_ptr_cast(L#last,^s_node))))));
invariant b0319 ==> ((!($oset_in($phys_ptr_cast(local.slist,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(L#node,^s_node),$phys_ptr_cast(P#slist,^s_node))))));
invariant b0320 ==> ((!($oset_in($phys_ptr_cast(local.slist,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(L#node,^s_node),$phys_ptr_cast(P#sibling,^s_node))))));
invariant b0321 ==> ((!($oset_in($phys_ptr_cast(local.slist,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(L#node,^s_node),$phys_ptr_cast(L#last,^s_node))))));
invariant b0322 ==> ((!($oset_in($phys_ptr_cast(local.slist,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(L#last,^s_node),$phys_ptr_cast(P#slist,^s_node))))));
invariant b0323 ==> ((!($oset_in($phys_ptr_cast(local.slist,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(L#last,^s_node),$phys_ptr_cast(P#sibling,^s_node))))));
invariant b0324 ==> ((!($oset_in($phys_ptr_cast(local.slist,^s_node),F#sll_lseg_reach($s,$phys_ptr_cast(L#last,^s_node),$phys_ptr_cast(L#node,^s_node))))));
invariant b0325 ==> (($is_null($phys_ptr_cast(P#slist,^s_node)) ==> ($phys_ptr_cast(P#sibling,^s_node) == $phys_ptr_cast(L#node,^s_node))));
invariant b0326 ==> (($is_null($phys_ptr_cast(P#slist,^s_node)) ==> ($phys_ptr_cast(P#sibling,^s_node) == $phys_ptr_cast(L#last,^s_node))));
invariant b0327 ==> (($is_null($phys_ptr_cast(P#slist,^s_node)) ==> ($phys_ptr_cast(P#sibling,^s_node) == $phys_ptr_cast(local.slist,^s_node))));
invariant b0328 ==> (($is_null($phys_ptr_cast(P#slist,^s_node)) ==> ($phys_ptr_cast(L#node,^s_node) == $phys_ptr_cast(P#sibling,^s_node))));
invariant b0329 ==> (($is_null($phys_ptr_cast(P#slist,^s_node)) ==> ($phys_ptr_cast(L#node,^s_node) == $phys_ptr_cast(L#last,^s_node))));
invariant b0330 ==> (($is_null($phys_ptr_cast(P#slist,^s_node)) ==> ($phys_ptr_cast(L#node,^s_node) == $phys_ptr_cast(local.slist,^s_node))));
invariant b0331 ==> (($is_null($phys_ptr_cast(P#slist,^s_node)) ==> ($phys_ptr_cast(L#last,^s_node) == $phys_ptr_cast(P#sibling,^s_node))));
invariant b0332 ==> (($is_null($phys_ptr_cast(P#slist,^s_node)) ==> ($phys_ptr_cast(L#last,^s_node) == $phys_ptr_cast(L#node,^s_node))));
invariant b0333 ==> (($is_null($phys_ptr_cast(P#slist,^s_node)) ==> ($phys_ptr_cast(L#last,^s_node) == $phys_ptr_cast(local.slist,^s_node))));
invariant b0334 ==> (($is_null($phys_ptr_cast(P#slist,^s_node)) ==> ($phys_ptr_cast(local.slist,^s_node) == $phys_ptr_cast(P#sibling,^s_node))));
invariant b0335 ==> (($is_null($phys_ptr_cast(P#slist,^s_node)) ==> ($phys_ptr_cast(local.slist,^s_node) == $phys_ptr_cast(L#node,^s_node))));
invariant b0336 ==> (($is_null($phys_ptr_cast(P#slist,^s_node)) ==> ($phys_ptr_cast(local.slist,^s_node) == $phys_ptr_cast(L#last,^s_node))));
invariant b0337 ==> (($is_null($phys_ptr_cast(P#sibling,^s_node)) ==> ($phys_ptr_cast(P#slist,^s_node) == $phys_ptr_cast(L#node,^s_node))));
invariant b0338 ==> (($is_null($phys_ptr_cast(P#sibling,^s_node)) ==> ($phys_ptr_cast(P#slist,^s_node) == $phys_ptr_cast(L#last,^s_node))));
invariant b0339 ==> (($is_null($phys_ptr_cast(P#sibling,^s_node)) ==> ($phys_ptr_cast(P#slist,^s_node) == $phys_ptr_cast(local.slist,^s_node))));
invariant b0340 ==> (($is_null($phys_ptr_cast(P#sibling,^s_node)) ==> ($phys_ptr_cast(L#node,^s_node) == $phys_ptr_cast(P#slist,^s_node))));
invariant b0341 ==> (($is_null($phys_ptr_cast(P#sibling,^s_node)) ==> ($phys_ptr_cast(L#node,^s_node) == $phys_ptr_cast(L#last,^s_node))));
invariant b0342 ==> (($is_null($phys_ptr_cast(P#sibling,^s_node)) ==> ($phys_ptr_cast(L#node,^s_node) == $phys_ptr_cast(local.slist,^s_node))));
invariant b0343 ==> (($is_null($phys_ptr_cast(P#sibling,^s_node)) ==> ($phys_ptr_cast(L#last,^s_node) == $phys_ptr_cast(P#slist,^s_node))));
invariant b0344 ==> (($is_null($phys_ptr_cast(P#sibling,^s_node)) ==> ($phys_ptr_cast(L#last,^s_node) == $phys_ptr_cast(L#node,^s_node))));
invariant b0345 ==> (($is_null($phys_ptr_cast(P#sibling,^s_node)) ==> ($phys_ptr_cast(L#last,^s_node) == $phys_ptr_cast(local.slist,^s_node))));
invariant b0346 ==> (($is_null($phys_ptr_cast(P#sibling,^s_node)) ==> ($phys_ptr_cast(local.slist,^s_node) == $phys_ptr_cast(P#slist,^s_node))));
invariant b0347 ==> (($is_null($phys_ptr_cast(P#sibling,^s_node)) ==> ($phys_ptr_cast(local.slist,^s_node) == $phys_ptr_cast(L#node,^s_node))));
invariant b0348 ==> (($is_null($phys_ptr_cast(P#sibling,^s_node)) ==> ($phys_ptr_cast(local.slist,^s_node) == $phys_ptr_cast(L#last,^s_node))));
invariant b0349 ==> (($is_null($phys_ptr_cast(L#node,^s_node)) ==> ($phys_ptr_cast(P#slist,^s_node) == $phys_ptr_cast(P#sibling,^s_node))));
invariant b0350 ==> (($is_null($phys_ptr_cast(L#node,^s_node)) ==> ($phys_ptr_cast(P#slist,^s_node) == $phys_ptr_cast(L#last,^s_node))));
invariant b0351 ==> (($is_null($phys_ptr_cast(L#node,^s_node)) ==> ($phys_ptr_cast(P#slist,^s_node) == $phys_ptr_cast(local.slist,^s_node))));
invariant b0352 ==> (($is_null($phys_ptr_cast(L#node,^s_node)) ==> ($phys_ptr_cast(P#sibling,^s_node) == $phys_ptr_cast(P#slist,^s_node))));
invariant b0353 ==> (($is_null($phys_ptr_cast(L#node,^s_node)) ==> ($phys_ptr_cast(P#sibling,^s_node) == $phys_ptr_cast(L#last,^s_node))));
invariant b0354 ==> (($is_null($phys_ptr_cast(L#node,^s_node)) ==> ($phys_ptr_cast(P#sibling,^s_node) == $phys_ptr_cast(local.slist,^s_node))));
invariant b0355 ==> (($is_null($phys_ptr_cast(L#node,^s_node)) ==> ($phys_ptr_cast(L#last,^s_node) == $phys_ptr_cast(P#slist,^s_node))));
invariant b0356 ==> (($is_null($phys_ptr_cast(L#node,^s_node)) ==> ($phys_ptr_cast(L#last,^s_node) == $phys_ptr_cast(P#sibling,^s_node))));
invariant b0357 ==> (($is_null($phys_ptr_cast(L#node,^s_node)) ==> ($phys_ptr_cast(L#last,^s_node) == $phys_ptr_cast(local.slist,^s_node))));
invariant b0358 ==> (($is_null($phys_ptr_cast(L#node,^s_node)) ==> ($phys_ptr_cast(local.slist,^s_node) == $phys_ptr_cast(P#slist,^s_node))));
invariant b0359 ==> (($is_null($phys_ptr_cast(L#node,^s_node)) ==> ($phys_ptr_cast(local.slist,^s_node) == $phys_ptr_cast(P#sibling,^s_node))));
invariant b0360 ==> (($is_null($phys_ptr_cast(L#node,^s_node)) ==> ($phys_ptr_cast(local.slist,^s_node) == $phys_ptr_cast(L#last,^s_node))));
invariant b0361 ==> (($is_null($phys_ptr_cast(L#last,^s_node)) ==> ($phys_ptr_cast(P#slist,^s_node) == $phys_ptr_cast(P#sibling,^s_node))));
invariant b0362 ==> (($is_null($phys_ptr_cast(L#last,^s_node)) ==> ($phys_ptr_cast(P#slist,^s_node) == $phys_ptr_cast(L#node,^s_node))));
invariant b0363 ==> (($is_null($phys_ptr_cast(L#last,^s_node)) ==> ($phys_ptr_cast(P#slist,^s_node) == $phys_ptr_cast(local.slist,^s_node))));
invariant b0364 ==> (($is_null($phys_ptr_cast(L#last,^s_node)) ==> ($phys_ptr_cast(P#sibling,^s_node) == $phys_ptr_cast(P#slist,^s_node))));
invariant b0365 ==> (($is_null($phys_ptr_cast(L#last,^s_node)) ==> ($phys_ptr_cast(P#sibling,^s_node) == $phys_ptr_cast(L#node,^s_node))));
invariant b0366 ==> (($is_null($phys_ptr_cast(L#last,^s_node)) ==> ($phys_ptr_cast(P#sibling,^s_node) == $phys_ptr_cast(local.slist,^s_node))));
invariant b0367 ==> (($is_null($phys_ptr_cast(L#last,^s_node)) ==> ($phys_ptr_cast(L#node,^s_node) == $phys_ptr_cast(P#slist,^s_node))));
invariant b0368 ==> (($is_null($phys_ptr_cast(L#last,^s_node)) ==> ($phys_ptr_cast(L#node,^s_node) == $phys_ptr_cast(P#sibling,^s_node))));
invariant b0369 ==> (($is_null($phys_ptr_cast(L#last,^s_node)) ==> ($phys_ptr_cast(L#node,^s_node) == $phys_ptr_cast(local.slist,^s_node))));
invariant b0370 ==> (($is_null($phys_ptr_cast(L#last,^s_node)) ==> ($phys_ptr_cast(local.slist,^s_node) == $phys_ptr_cast(P#slist,^s_node))));
invariant b0371 ==> (($is_null($phys_ptr_cast(L#last,^s_node)) ==> ($phys_ptr_cast(local.slist,^s_node) == $phys_ptr_cast(P#sibling,^s_node))));
invariant b0372 ==> (($is_null($phys_ptr_cast(L#last,^s_node)) ==> ($phys_ptr_cast(local.slist,^s_node) == $phys_ptr_cast(L#node,^s_node))));
invariant b0373 ==> (($is_null($phys_ptr_cast(local.slist,^s_node)) ==> ($phys_ptr_cast(P#slist,^s_node) == $phys_ptr_cast(P#sibling,^s_node))));
invariant b0374 ==> (($is_null($phys_ptr_cast(local.slist,^s_node)) ==> ($phys_ptr_cast(P#slist,^s_node) == $phys_ptr_cast(L#node,^s_node))));
invariant b0375 ==> (($is_null($phys_ptr_cast(local.slist,^s_node)) ==> ($phys_ptr_cast(P#slist,^s_node) == $phys_ptr_cast(L#last,^s_node))));
invariant b0376 ==> (($is_null($phys_ptr_cast(local.slist,^s_node)) ==> ($phys_ptr_cast(P#sibling,^s_node) == $phys_ptr_cast(P#slist,^s_node))));
invariant b0377 ==> (($is_null($phys_ptr_cast(local.slist,^s_node)) ==> ($phys_ptr_cast(P#sibling,^s_node) == $phys_ptr_cast(L#node,^s_node))));
invariant b0378 ==> (($is_null($phys_ptr_cast(local.slist,^s_node)) ==> ($phys_ptr_cast(P#sibling,^s_node) == $phys_ptr_cast(L#last,^s_node))));
invariant b0379 ==> (($is_null($phys_ptr_cast(local.slist,^s_node)) ==> ($phys_ptr_cast(L#node,^s_node) == $phys_ptr_cast(P#slist,^s_node))));
invariant b0380 ==> (($is_null($phys_ptr_cast(local.slist,^s_node)) ==> ($phys_ptr_cast(L#node,^s_node) == $phys_ptr_cast(P#sibling,^s_node))));
invariant b0381 ==> (($is_null($phys_ptr_cast(local.slist,^s_node)) ==> ($phys_ptr_cast(L#node,^s_node) == $phys_ptr_cast(L#last,^s_node))));
invariant b0382 ==> (($is_null($phys_ptr_cast(local.slist,^s_node)) ==> ($phys_ptr_cast(L#last,^s_node) == $phys_ptr_cast(P#slist,^s_node))));
invariant b0383 ==> (($is_null($phys_ptr_cast(local.slist,^s_node)) ==> ($phys_ptr_cast(L#last,^s_node) == $phys_ptr_cast(P#sibling,^s_node))));
invariant b0384 ==> (($is_null($phys_ptr_cast(local.slist,^s_node)) ==> ($phys_ptr_cast(L#last,^s_node) == $phys_ptr_cast(L#node,^s_node))));

      invariant $non_null($phys_ptr_cast(L#node, ^s_node)) ==> $mutable($s, $phys_ptr_cast(L#node, ^s_node));
      invariant $non_null($phys_ptr_cast(L#node, ^s_node)) ==> $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(L#node, ^s_node));
      invariant $non_null($phys_ptr_cast(L#last, ^s_node)) ==> $mutable($s, $phys_ptr_cast(L#last, ^s_node));
      invariant $non_null($phys_ptr_cast(L#last, ^s_node)) ==> $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(L#last, ^s_node));
    {
      anon5:
        assume $writes_nothing(old($s), $s);
        assume $timestamp_post(loopState#0, $s);
        assume $full_stop_ext(#tok$3^30.3, $s);
        // assume @_vcc_meta_eq(old(@prestate, @state), @state); 
        assume $meta_eq(loopState#0, $s);
        // _Bool ite#1; 
        // ite#1 := &&(@_vcc_ptr_neq_null(node), @_vcc_ptr_neq(node, sibling)); 
        ite#1 := $non_null($phys_ptr_cast(L#node, ^s_node)) && $ptr_neq($phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
        assume true;
        // if (ite#1) ...
        if (ite#1)
        {
          anon3:
            // assume ==>(@_vcc_ptr_neq_null(node), ==(sll_keys(node), @_vcc_intset_union(sll_keys(*((node->next))), @_vcc_intset_singleton(*((node->key)))))); 
            assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#node, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#node, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(node), ==(sll_list_len_next(node), unchecked+(sll_list_len_next(*((node->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#node, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)), 1);
            // assume ==>(@_vcc_ptr_neq_null(node), ==(sll(node), &&(sll(*((node->next))), unchecked!(@_vcc_oset_in(node, sll_reach(*((node->next)))))))); 
            assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#node, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(node), ==(sll_reach(node), @_vcc_oset_union(sll_reach(*((node->next))), @_vcc_oset_singleton(node)))); 
            assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#node, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#node, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_keys(last), @_vcc_intset_union(sll_keys(*((last->next))), @_vcc_intset_singleton(*((last->key)))))); 
            assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#last, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#last, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_list_len_next(last), unchecked+(sll_list_len_next(*((last->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#last, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), 1);
            // assume ==>(@_vcc_ptr_neq_null(last), ==(sll(last), &&(sll(*((last->next))), unchecked!(@_vcc_oset_in(last, sll_reach(*((last->next)))))))); 
            assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#last, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_reach(last), @_vcc_oset_union(sll_reach(*((last->next))), @_vcc_oset_singleton(last)))); 
            assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#last, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll_keys(sibling), @_vcc_intset_union(sll_keys(*((sibling->next))), @_vcc_intset_singleton(*((sibling->key)))))); 
            assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#sibling, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#sibling, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll_list_len_next(sibling), unchecked+(sll_list_len_next(*((sibling->next))), 1))); 
            assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#sibling, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)), 1);
            // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll(sibling), &&(sll(*((sibling->next))), unchecked!(@_vcc_oset_in(sibling, sll_reach(*((sibling->next)))))))); 
            assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#sibling, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#sibling, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll_reach(sibling), @_vcc_oset_union(sll_reach(*((sibling->next))), @_vcc_oset_singleton(sibling)))); 
            assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#sibling, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#sibling, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll_keys(local.slist), @_vcc_intset_union(sll_keys(*((local.slist->next))), @_vcc_intset_singleton(*((local.slist->key)))))); 
            assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.slist, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll_list_len_next(local.slist), unchecked+(sll_list_len_next(*((local.slist->next))), 1))); 
            assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.slist, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)), 1);
            // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll(local.slist), &&(sll(*((local.slist->next))), unchecked!(@_vcc_oset_in(local.slist, sll_reach(*((local.slist->next)))))))); 
            assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.slist, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll_reach(local.slist), @_vcc_oset_union(sll_reach(*((local.slist->next))), @_vcc_oset_singleton(local.slist)))); 
            assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.slist, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.slist, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg(local.slist, sibling), &&(sll_lseg(*((local.slist->next)), sibling), unchecked!(@_vcc_oset_in(local.slist, sll_lseg_reach(*((local.slist->next)), sibling)))))); 
            assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) && !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg_reach(local.slist, sibling), @_vcc_oset_union(sll_lseg_reach(*((local.slist->next)), sibling), @_vcc_oset_singleton(local.slist)))); 
            assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), $oset_singleton($phys_ptr_cast(local.slist, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg_keys(local.slist, sibling), @_vcc_intset_union(sll_lseg_keys(*((local.slist->next)), sibling), @_vcc_intset_singleton(*((local.slist->key)))))); 
            assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg_len_next(local.slist, sibling), unchecked+(sll_lseg_len_next(*((local.slist->next)), sibling), 1))); 
            assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(node), @_vcc_ptr_neq_pure(node, sibling)), ==(sll_lseg(node, sibling), &&(sll_lseg(*((node->next)), sibling), unchecked!(@_vcc_oset_in(node, sll_lseg_reach(*((node->next)), sibling)))))); 
            assume $non_null($phys_ptr_cast(L#node, ^s_node)) && $phys_ptr_cast(L#node, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) && !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(node), @_vcc_ptr_neq_pure(node, sibling)), ==(sll_lseg_reach(node, sibling), @_vcc_oset_union(sll_lseg_reach(*((node->next)), sibling), @_vcc_oset_singleton(node)))); 
            assume $non_null($phys_ptr_cast(L#node, ^s_node)) && $phys_ptr_cast(L#node, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), $oset_singleton($phys_ptr_cast(L#node, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(node), @_vcc_ptr_neq_pure(node, sibling)), ==(sll_lseg_keys(node, sibling), @_vcc_intset_union(sll_lseg_keys(*((node->next)), sibling), @_vcc_intset_singleton(*((node->key)))))); 
            assume $non_null($phys_ptr_cast(L#node, ^s_node)) && $phys_ptr_cast(L#node, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#node, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(node), @_vcc_ptr_neq_pure(node, sibling)), ==(sll_lseg_len_next(node, sibling), unchecked+(sll_lseg_len_next(*((node->next)), sibling), 1))); 
            assume $non_null($phys_ptr_cast(L#node, ^s_node)) && $phys_ptr_cast(L#node, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, last)), ==(sll_lseg(local.slist, last), &&(sll_lseg(*((local.slist->next)), last), unchecked!(@_vcc_oset_in(local.slist, sll_lseg_reach(*((local.slist->next)), last)))))); 
            assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#last, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node)) && !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, last)), ==(sll_lseg_reach(local.slist, last), @_vcc_oset_union(sll_lseg_reach(*((local.slist->next)), last), @_vcc_oset_singleton(local.slist)))); 
            assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#last, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node)), $oset_singleton($phys_ptr_cast(local.slist, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, last)), ==(sll_lseg_keys(local.slist, last), @_vcc_intset_union(sll_lseg_keys(*((local.slist->next)), last), @_vcc_intset_singleton(*((local.slist->key)))))); 
            assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#last, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, last)), ==(sll_lseg_len_next(local.slist, last), unchecked+(sll_lseg_len_next(*((local.slist->next)), last), 1))); 
            assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#last, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, node)), ==(sll_lseg(local.slist, node), &&(sll_lseg(*((local.slist->next)), node), unchecked!(@_vcc_oset_in(local.slist, sll_lseg_reach(*((local.slist->next)), node)))))); 
            assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#node, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#node, ^s_node)) && !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#node, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, node)), ==(sll_lseg_reach(local.slist, node), @_vcc_oset_union(sll_lseg_reach(*((local.slist->next)), node), @_vcc_oset_singleton(local.slist)))); 
            assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#node, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#node, ^s_node)), $oset_singleton($phys_ptr_cast(local.slist, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, node)), ==(sll_lseg_keys(local.slist, node), @_vcc_intset_union(sll_lseg_keys(*((local.slist->next)), node), @_vcc_intset_singleton(*((local.slist->key)))))); 
            assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#node, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#node, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, node)), ==(sll_lseg_len_next(local.slist, node), unchecked+(sll_lseg_len_next(*((local.slist->next)), node), 1))); 
            assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#node, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#node, ^s_node)), 1);
            // last := node; 
            L#last := $phys_ptr_cast(L#node, ^s_node);
            // assert sll_lseg(node, node); 
            assert F#sll_lseg($s, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(L#node, ^s_node));
            // assume sll_lseg(node, node); 
            assume F#sll_lseg($s, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(L#node, ^s_node));
            // assert sll_lseg(last, last); 
            assert F#sll_lseg($s, $phys_ptr_cast(L#last, ^s_node), $phys_ptr_cast(L#last, ^s_node));
            // assume sll_lseg(last, last); 
            assume F#sll_lseg($s, $phys_ptr_cast(L#last, ^s_node), $phys_ptr_cast(L#last, ^s_node));
            // assert sll_lseg(sibling, sibling); 
            assert F#sll_lseg($s, $phys_ptr_cast(P#sibling, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
            // assume sll_lseg(sibling, sibling); 
            assume F#sll_lseg($s, $phys_ptr_cast(P#sibling, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
            // assert sll_lseg(local.slist, local.slist); 
            assert F#sll_lseg($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(local.slist, ^s_node));
            // assume sll_lseg(local.slist, local.slist); 
            assume F#sll_lseg($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(local.slist, ^s_node));
            // struct s_node* last0; 
            // last0 := last; 
            SL#last0 := $phys_ptr_cast(L#last, ^s_node);
            // struct s_node* stmtexpr0#13; 
            // stmtexpr0#13 := last0; 
            stmtexpr0#13 := $phys_ptr_cast(SL#last0, ^s_node);
            // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_keys(last), @_vcc_intset_union(sll_keys(*((last->next))), @_vcc_intset_singleton(*((last->key)))))); 
            assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#last, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#last, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_list_len_next(last), unchecked+(sll_list_len_next(*((last->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#last, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), 1);
            // assume ==>(@_vcc_ptr_neq_null(last), ==(sll(last), &&(sll(*((last->next))), unchecked!(@_vcc_oset_in(last, sll_reach(*((last->next)))))))); 
            assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#last, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_reach(last), @_vcc_oset_union(sll_reach(*((last->next))), @_vcc_oset_singleton(last)))); 
            assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#last, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last, ^s_node)));
            // assert @reads_check_normal((last->next)); 
            assert $thread_local($s, $phys_ptr_cast(L#last, ^s_node));
            // node := *((last->next)); 
            L#node := $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node);
            // assume ==>(@_vcc_ptr_neq_null(node), ==(sll_keys(node), @_vcc_intset_union(sll_keys(*((node->next))), @_vcc_intset_singleton(*((node->key)))))); 
            assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#node, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#node, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(node), ==(sll_list_len_next(node), unchecked+(sll_list_len_next(*((node->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#node, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)), 1);
            // assume ==>(@_vcc_ptr_neq_null(node), ==(sll(node), &&(sll(*((node->next))), unchecked!(@_vcc_oset_in(node, sll_reach(*((node->next)))))))); 
            assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#node, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(node), ==(sll_reach(node), @_vcc_oset_union(sll_reach(*((node->next))), @_vcc_oset_singleton(node)))); 
            assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#node, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#node, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_keys(last), @_vcc_intset_union(sll_keys(*((last->next))), @_vcc_intset_singleton(*((last->key)))))); 
            assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#last, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#last, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_list_len_next(last), unchecked+(sll_list_len_next(*((last->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#last, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), 1);
            // assume ==>(@_vcc_ptr_neq_null(last), ==(sll(last), &&(sll(*((last->next))), unchecked!(@_vcc_oset_in(last, sll_reach(*((last->next)))))))); 
            assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#last, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_reach(last), @_vcc_oset_union(sll_reach(*((last->next))), @_vcc_oset_singleton(last)))); 
            assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#last, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(node), &&(@_vcc_mutable(@state, node), @writes_check(node))); 
            assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> $mutable($s, $phys_ptr_cast(L#node, ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(L#node, ^s_node));
        }
        else
        {
          anon4:
            // assert @_vcc_possibly_unreachable; 
            assert {:PossiblyUnreachable true} true;
            // goto #break_2; 
            goto #break_2;
        }

      #continue_2:
        assume true;
// INV:LOOPTAIL
    }

  anon10:
    assume $full_stop_ext(#tok$3^30.3, $s);

  #break_2:
    // assume ==>(@_vcc_ptr_neq_null(node), ==(sll_keys(node), @_vcc_intset_union(sll_keys(*((node->next))), @_vcc_intset_singleton(*((node->key)))))); 
    assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#node, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#node, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(node), ==(sll_list_len_next(node), unchecked+(sll_list_len_next(*((node->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#node, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)), 1);
    // assume ==>(@_vcc_ptr_neq_null(node), ==(sll(node), &&(sll(*((node->next))), unchecked!(@_vcc_oset_in(node, sll_reach(*((node->next)))))))); 
    assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#node, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(node), ==(sll_reach(node), @_vcc_oset_union(sll_reach(*((node->next))), @_vcc_oset_singleton(node)))); 
    assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#node, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#node, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_keys(last), @_vcc_intset_union(sll_keys(*((last->next))), @_vcc_intset_singleton(*((last->key)))))); 
    assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#last, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#last, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_list_len_next(last), unchecked+(sll_list_len_next(*((last->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#last, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), 1);
    // assume ==>(@_vcc_ptr_neq_null(last), ==(sll(last), &&(sll(*((last->next))), unchecked!(@_vcc_oset_in(last, sll_reach(*((last->next)))))))); 
    assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#last, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_reach(last), @_vcc_oset_union(sll_reach(*((last->next))), @_vcc_oset_singleton(last)))); 
    assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#last, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll_keys(sibling), @_vcc_intset_union(sll_keys(*((sibling->next))), @_vcc_intset_singleton(*((sibling->key)))))); 
    assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#sibling, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#sibling, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll_list_len_next(sibling), unchecked+(sll_list_len_next(*((sibling->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#sibling, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)), 1);
    // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll(sibling), &&(sll(*((sibling->next))), unchecked!(@_vcc_oset_in(sibling, sll_reach(*((sibling->next)))))))); 
    assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#sibling, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#sibling, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll_reach(sibling), @_vcc_oset_union(sll_reach(*((sibling->next))), @_vcc_oset_singleton(sibling)))); 
    assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#sibling, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#sibling, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll_keys(local.slist), @_vcc_intset_union(sll_keys(*((local.slist->next))), @_vcc_intset_singleton(*((local.slist->key)))))); 
    assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.slist, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll_list_len_next(local.slist), unchecked+(sll_list_len_next(*((local.slist->next))), 1))); 
    assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.slist, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)), 1);
    // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll(local.slist), &&(sll(*((local.slist->next))), unchecked!(@_vcc_oset_in(local.slist, sll_reach(*((local.slist->next)))))))); 
    assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.slist, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll_reach(local.slist), @_vcc_oset_union(sll_reach(*((local.slist->next))), @_vcc_oset_singleton(local.slist)))); 
    assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.slist, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.slist, ^s_node)));
    assume true;
    // if (@_vcc_ptr_eq_null(last)) ...
    if ($is_null($phys_ptr_cast(L#last, ^s_node)))
    {
      anon6:
        // assume ==>(@_vcc_ptr_neq_null(node), ==(sll_keys(node), @_vcc_intset_union(sll_keys(*((node->next))), @_vcc_intset_singleton(*((node->key)))))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#node, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#node, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(node), ==(sll_list_len_next(node), unchecked+(sll_list_len_next(*((node->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#node, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(node), ==(sll(node), &&(sll(*((node->next))), unchecked!(@_vcc_oset_in(node, sll_reach(*((node->next)))))))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#node, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(node), ==(sll_reach(node), @_vcc_oset_union(sll_reach(*((node->next))), @_vcc_oset_singleton(node)))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#node, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#node, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_keys(last), @_vcc_intset_union(sll_keys(*((last->next))), @_vcc_intset_singleton(*((last->key)))))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#last, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#last, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_list_len_next(last), unchecked+(sll_list_len_next(*((last->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#last, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll(last), &&(sll(*((last->next))), unchecked!(@_vcc_oset_in(last, sll_reach(*((last->next)))))))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#last, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_reach(last), @_vcc_oset_union(sll_reach(*((last->next))), @_vcc_oset_singleton(last)))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#last, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll_keys(sibling), @_vcc_intset_union(sll_keys(*((sibling->next))), @_vcc_intset_singleton(*((sibling->key)))))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#sibling, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#sibling, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll_list_len_next(sibling), unchecked+(sll_list_len_next(*((sibling->next))), 1))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#sibling, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll(sibling), &&(sll(*((sibling->next))), unchecked!(@_vcc_oset_in(sibling, sll_reach(*((sibling->next)))))))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#sibling, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#sibling, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll_reach(sibling), @_vcc_oset_union(sll_reach(*((sibling->next))), @_vcc_oset_singleton(sibling)))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#sibling, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#sibling, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll_keys(local.slist), @_vcc_intset_union(sll_keys(*((local.slist->next))), @_vcc_intset_singleton(*((local.slist->key)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.slist, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll_list_len_next(local.slist), unchecked+(sll_list_len_next(*((local.slist->next))), 1))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.slist, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll(local.slist), &&(sll(*((local.slist->next))), unchecked!(@_vcc_oset_in(local.slist, sll_reach(*((local.slist->next)))))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.slist, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll_reach(local.slist), @_vcc_oset_union(sll_reach(*((local.slist->next))), @_vcc_oset_singleton(local.slist)))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.slist, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.slist, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg(local.slist, sibling), &&(sll_lseg(*((local.slist->next)), sibling), unchecked!(@_vcc_oset_in(local.slist, sll_lseg_reach(*((local.slist->next)), sibling)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) && !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg_reach(local.slist, sibling), @_vcc_oset_union(sll_lseg_reach(*((local.slist->next)), sibling), @_vcc_oset_singleton(local.slist)))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), $oset_singleton($phys_ptr_cast(local.slist, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg_keys(local.slist, sibling), @_vcc_intset_union(sll_lseg_keys(*((local.slist->next)), sibling), @_vcc_intset_singleton(*((local.slist->key)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg_len_next(local.slist, sibling), unchecked+(sll_lseg_len_next(*((local.slist->next)), sibling), 1))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(node), @_vcc_ptr_neq_pure(node, sibling)), ==(sll_lseg(node, sibling), &&(sll_lseg(*((node->next)), sibling), unchecked!(@_vcc_oset_in(node, sll_lseg_reach(*((node->next)), sibling)))))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) && $phys_ptr_cast(L#node, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) && !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(node), @_vcc_ptr_neq_pure(node, sibling)), ==(sll_lseg_reach(node, sibling), @_vcc_oset_union(sll_lseg_reach(*((node->next)), sibling), @_vcc_oset_singleton(node)))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) && $phys_ptr_cast(L#node, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), $oset_singleton($phys_ptr_cast(L#node, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(node), @_vcc_ptr_neq_pure(node, sibling)), ==(sll_lseg_keys(node, sibling), @_vcc_intset_union(sll_lseg_keys(*((node->next)), sibling), @_vcc_intset_singleton(*((node->key)))))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) && $phys_ptr_cast(L#node, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#node, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(node), @_vcc_ptr_neq_pure(node, sibling)), ==(sll_lseg_len_next(node, sibling), unchecked+(sll_lseg_len_next(*((node->next)), sibling), 1))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) && $phys_ptr_cast(L#node, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, last)), ==(sll_lseg(local.slist, last), &&(sll_lseg(*((local.slist->next)), last), unchecked!(@_vcc_oset_in(local.slist, sll_lseg_reach(*((local.slist->next)), last)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#last, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node)) && !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, last)), ==(sll_lseg_reach(local.slist, last), @_vcc_oset_union(sll_lseg_reach(*((local.slist->next)), last), @_vcc_oset_singleton(local.slist)))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#last, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node)), $oset_singleton($phys_ptr_cast(local.slist, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, last)), ==(sll_lseg_keys(local.slist, last), @_vcc_intset_union(sll_lseg_keys(*((local.slist->next)), last), @_vcc_intset_singleton(*((local.slist->key)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#last, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, last)), ==(sll_lseg_len_next(local.slist, last), unchecked+(sll_lseg_len_next(*((local.slist->next)), last), 1))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#last, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, node)), ==(sll_lseg(local.slist, node), &&(sll_lseg(*((local.slist->next)), node), unchecked!(@_vcc_oset_in(local.slist, sll_lseg_reach(*((local.slist->next)), node)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#node, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#node, ^s_node)) && !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#node, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, node)), ==(sll_lseg_reach(local.slist, node), @_vcc_oset_union(sll_lseg_reach(*((local.slist->next)), node), @_vcc_oset_singleton(local.slist)))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#node, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#node, ^s_node)), $oset_singleton($phys_ptr_cast(local.slist, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, node)), ==(sll_lseg_keys(local.slist, node), @_vcc_intset_union(sll_lseg_keys(*((local.slist->next)), node), @_vcc_intset_singleton(*((local.slist->key)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#node, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#node, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, node)), ==(sll_lseg_len_next(local.slist, node), unchecked+(sll_lseg_len_next(*((local.slist->next)), node), 1))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#node, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#node, ^s_node)), 1);
        // _math \state _dryad_S0#0; 
        // _dryad_S0#0 := @_vcc_current_state(@state); 
        _dryad_S0#0 := $current_state($s);
        // _math \state stmtexpr0#14; 
        // stmtexpr0#14 := _dryad_S0#0; 
        stmtexpr0#14 := _dryad_S0#0;
        // node := _vcc_alloc(@_vcc_typeof((struct s_node*)@null)); 
        call L#node := $alloc(^s_node);
        assume $full_stop_ext(#tok$3^44.12, $s);
        // assume !(@_vcc_oset_in(node, @_vcc_oset_union(_dryad_G0, _dryad_G1))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), $oset_union(SL#_dryad_G0, SL#_dryad_G1));
        // _dryad_G1 := @_vcc_oset_union(_dryad_G0, @_vcc_oset_singleton(node)); 
        SL#_dryad_G1 := $oset_union(SL#_dryad_G0, $oset_singleton($phys_ptr_cast(L#node, ^s_node)));
        // _math \oset stmtexpr1#15; 
        // stmtexpr1#15 := _dryad_G1; 
        stmtexpr1#15 := SL#_dryad_G1;
        // assume ==(glob_reach(), _dryad_G1); 
        assume F#glob_reach() == SL#_dryad_G1;
        // _math \state _dryad_S1#1; 
        // _dryad_S1#1 := @_vcc_current_state(@state); 
        _dryad_S1#1 := $current_state($s);
        // _math \state stmtexpr2#16; 
        // stmtexpr2#16 := _dryad_S1#1; 
        stmtexpr2#16 := _dryad_S1#1;
        // assume ==>(@_vcc_ptr_neq_null(node), ==(sll_keys(node), @_vcc_intset_union(sll_keys(*((node->next))), @_vcc_intset_singleton(*((node->key)))))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#node, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#node, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(node), ==(sll_list_len_next(node), unchecked+(sll_list_len_next(*((node->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#node, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(node), ==(sll(node), &&(sll(*((node->next))), unchecked!(@_vcc_oset_in(node, sll_reach(*((node->next)))))))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#node, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(node), ==(sll_reach(node), @_vcc_oset_union(sll_reach(*((node->next))), @_vcc_oset_singleton(node)))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#node, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#node, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_keys(last), @_vcc_intset_union(sll_keys(*((last->next))), @_vcc_intset_singleton(*((last->key)))))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#last, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#last, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_list_len_next(last), unchecked+(sll_list_len_next(*((last->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#last, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll(last), &&(sll(*((last->next))), unchecked!(@_vcc_oset_in(last, sll_reach(*((last->next)))))))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#last, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_reach(last), @_vcc_oset_union(sll_reach(*((last->next))), @_vcc_oset_singleton(last)))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#last, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll_keys(sibling), @_vcc_intset_union(sll_keys(*((sibling->next))), @_vcc_intset_singleton(*((sibling->key)))))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#sibling, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#sibling, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll_list_len_next(sibling), unchecked+(sll_list_len_next(*((sibling->next))), 1))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#sibling, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll(sibling), &&(sll(*((sibling->next))), unchecked!(@_vcc_oset_in(sibling, sll_reach(*((sibling->next)))))))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#sibling, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#sibling, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll_reach(sibling), @_vcc_oset_union(sll_reach(*((sibling->next))), @_vcc_oset_singleton(sibling)))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#sibling, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#sibling, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll_keys(local.slist), @_vcc_intset_union(sll_keys(*((local.slist->next))), @_vcc_intset_singleton(*((local.slist->key)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.slist, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll_list_len_next(local.slist), unchecked+(sll_list_len_next(*((local.slist->next))), 1))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.slist, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll(local.slist), &&(sll(*((local.slist->next))), unchecked!(@_vcc_oset_in(local.slist, sll_reach(*((local.slist->next)))))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.slist, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll_reach(local.slist), @_vcc_oset_union(sll_reach(*((local.slist->next))), @_vcc_oset_singleton(local.slist)))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.slist, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.slist, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg(local.slist, sibling), &&(sll_lseg(*((local.slist->next)), sibling), unchecked!(@_vcc_oset_in(local.slist, sll_lseg_reach(*((local.slist->next)), sibling)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) && !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg_reach(local.slist, sibling), @_vcc_oset_union(sll_lseg_reach(*((local.slist->next)), sibling), @_vcc_oset_singleton(local.slist)))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), $oset_singleton($phys_ptr_cast(local.slist, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg_keys(local.slist, sibling), @_vcc_intset_union(sll_lseg_keys(*((local.slist->next)), sibling), @_vcc_intset_singleton(*((local.slist->key)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg_len_next(local.slist, sibling), unchecked+(sll_lseg_len_next(*((local.slist->next)), sibling), 1))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(node), @_vcc_ptr_neq_pure(node, sibling)), ==(sll_lseg(node, sibling), &&(sll_lseg(*((node->next)), sibling), unchecked!(@_vcc_oset_in(node, sll_lseg_reach(*((node->next)), sibling)))))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) && $phys_ptr_cast(L#node, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) && !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(node), @_vcc_ptr_neq_pure(node, sibling)), ==(sll_lseg_reach(node, sibling), @_vcc_oset_union(sll_lseg_reach(*((node->next)), sibling), @_vcc_oset_singleton(node)))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) && $phys_ptr_cast(L#node, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), $oset_singleton($phys_ptr_cast(L#node, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(node), @_vcc_ptr_neq_pure(node, sibling)), ==(sll_lseg_keys(node, sibling), @_vcc_intset_union(sll_lseg_keys(*((node->next)), sibling), @_vcc_intset_singleton(*((node->key)))))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) && $phys_ptr_cast(L#node, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#node, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(node), @_vcc_ptr_neq_pure(node, sibling)), ==(sll_lseg_len_next(node, sibling), unchecked+(sll_lseg_len_next(*((node->next)), sibling), 1))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) && $phys_ptr_cast(L#node, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, last)), ==(sll_lseg(local.slist, last), &&(sll_lseg(*((local.slist->next)), last), unchecked!(@_vcc_oset_in(local.slist, sll_lseg_reach(*((local.slist->next)), last)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#last, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node)) && !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, last)), ==(sll_lseg_reach(local.slist, last), @_vcc_oset_union(sll_lseg_reach(*((local.slist->next)), last), @_vcc_oset_singleton(local.slist)))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#last, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node)), $oset_singleton($phys_ptr_cast(local.slist, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, last)), ==(sll_lseg_keys(local.slist, last), @_vcc_intset_union(sll_lseg_keys(*((local.slist->next)), last), @_vcc_intset_singleton(*((local.slist->key)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#last, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, last)), ==(sll_lseg_len_next(local.slist, last), unchecked+(sll_lseg_len_next(*((local.slist->next)), last), 1))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#last, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, node)), ==(sll_lseg(local.slist, node), &&(sll_lseg(*((local.slist->next)), node), unchecked!(@_vcc_oset_in(local.slist, sll_lseg_reach(*((local.slist->next)), node)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#node, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#node, ^s_node)) && !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#node, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, node)), ==(sll_lseg_reach(local.slist, node), @_vcc_oset_union(sll_lseg_reach(*((local.slist->next)), node), @_vcc_oset_singleton(local.slist)))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#node, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#node, ^s_node)), $oset_singleton($phys_ptr_cast(local.slist, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, node)), ==(sll_lseg_keys(local.slist, node), @_vcc_intset_union(sll_lseg_keys(*((local.slist->next)), node), @_vcc_intset_singleton(*((local.slist->key)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#node, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#node, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, node)), ==(sll_lseg_len_next(local.slist, node), unchecked+(sll_lseg_len_next(*((local.slist->next)), node), 1))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#node, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#node, ^s_node)), 1);
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#0, sll_reach(last)))), ==(old(_dryad_S0#0, sll_keys(last)), old(_dryad_S1#1, sll_keys(last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S0#0, $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_keys(_dryad_S0#0, $phys_ptr_cast(L#last, ^s_node)) == F#sll_keys(_dryad_S1#1, $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#0, sll_reach(last)))), ==(old(_dryad_S0#0, sll_list_len_next(last)), old(_dryad_S1#1, sll_list_len_next(last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S0#0, $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_list_len_next(_dryad_S0#0, $phys_ptr_cast(L#last, ^s_node)) == F#sll_list_len_next(_dryad_S1#1, $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#0, sll_reach(last)))), ==(old(_dryad_S0#0, sll(last)), old(_dryad_S1#1, sll(last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S0#0, $phys_ptr_cast(L#last, ^s_node))) ==> F#sll(_dryad_S0#0, $phys_ptr_cast(L#last, ^s_node)) == F#sll(_dryad_S1#1, $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#0, sll_reach(last)))), ==(old(_dryad_S0#0, sll_reach(last)), old(_dryad_S1#1, sll_reach(last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S0#0, $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_reach(_dryad_S0#0, $phys_ptr_cast(L#last, ^s_node)) == F#sll_reach(_dryad_S1#1, $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#0, sll_reach(sibling)))), ==(old(_dryad_S0#0, sll_keys(sibling)), old(_dryad_S1#1, sll_keys(sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S0#0, $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_keys(_dryad_S0#0, $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_keys(_dryad_S1#1, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#0, sll_reach(sibling)))), ==(old(_dryad_S0#0, sll_list_len_next(sibling)), old(_dryad_S1#1, sll_list_len_next(sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S0#0, $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_list_len_next(_dryad_S0#0, $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_list_len_next(_dryad_S1#1, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#0, sll_reach(sibling)))), ==(old(_dryad_S0#0, sll(sibling)), old(_dryad_S1#1, sll(sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S0#0, $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll(_dryad_S0#0, $phys_ptr_cast(P#sibling, ^s_node)) == F#sll(_dryad_S1#1, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#0, sll_reach(sibling)))), ==(old(_dryad_S0#0, sll_reach(sibling)), old(_dryad_S1#1, sll_reach(sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S0#0, $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_reach(_dryad_S0#0, $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_reach(_dryad_S1#1, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#0, sll_reach(local.slist)))), ==(old(_dryad_S0#0, sll_keys(local.slist)), old(_dryad_S1#1, sll_keys(local.slist)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S0#0, $phys_ptr_cast(local.slist, ^s_node))) ==> F#sll_keys(_dryad_S0#0, $phys_ptr_cast(local.slist, ^s_node)) == F#sll_keys(_dryad_S1#1, $phys_ptr_cast(local.slist, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#0, sll_reach(local.slist)))), ==(old(_dryad_S0#0, sll_list_len_next(local.slist)), old(_dryad_S1#1, sll_list_len_next(local.slist)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S0#0, $phys_ptr_cast(local.slist, ^s_node))) ==> F#sll_list_len_next(_dryad_S0#0, $phys_ptr_cast(local.slist, ^s_node)) == F#sll_list_len_next(_dryad_S1#1, $phys_ptr_cast(local.slist, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#0, sll_reach(local.slist)))), ==(old(_dryad_S0#0, sll(local.slist)), old(_dryad_S1#1, sll(local.slist)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S0#0, $phys_ptr_cast(local.slist, ^s_node))) ==> F#sll(_dryad_S0#0, $phys_ptr_cast(local.slist, ^s_node)) == F#sll(_dryad_S1#1, $phys_ptr_cast(local.slist, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#0, sll_reach(local.slist)))), ==(old(_dryad_S0#0, sll_reach(local.slist)), old(_dryad_S1#1, sll_reach(local.slist)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S0#0, $phys_ptr_cast(local.slist, ^s_node))) ==> F#sll_reach(_dryad_S0#0, $phys_ptr_cast(local.slist, ^s_node)) == F#sll_reach(_dryad_S1#1, $phys_ptr_cast(local.slist, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#0, sll_lseg_reach(local.slist, sibling)))), ==(old(_dryad_S0#0, sll_lseg(local.slist, sibling)), old(_dryad_S1#1, sll_lseg(local.slist, sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S0#0, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_lseg(_dryad_S0#0, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_lseg(_dryad_S1#1, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#0, sll_lseg_reach(local.slist, sibling)))), ==(old(_dryad_S0#0, sll_lseg_reach(local.slist, sibling)), old(_dryad_S1#1, sll_lseg_reach(local.slist, sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S0#0, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_lseg_reach(_dryad_S0#0, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_lseg_reach(_dryad_S1#1, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#0, sll_lseg_reach(local.slist, sibling)))), ==(old(_dryad_S0#0, sll_lseg_keys(local.slist, sibling)), old(_dryad_S1#1, sll_lseg_keys(local.slist, sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S0#0, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_lseg_keys(_dryad_S0#0, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_lseg_keys(_dryad_S1#1, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#0, sll_lseg_reach(local.slist, sibling)))), ==(old(_dryad_S0#0, sll_lseg_len_next(local.slist, sibling)), old(_dryad_S1#1, sll_lseg_len_next(local.slist, sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S0#0, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S0#0, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_lseg_len_next(_dryad_S1#1, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#0, sll_lseg_reach(node, sibling)))), ==(old(_dryad_S0#0, sll_lseg(node, sibling)), old(_dryad_S1#1, sll_lseg(node, sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S0#0, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_lseg(_dryad_S0#0, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_lseg(_dryad_S1#1, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#0, sll_lseg_reach(node, sibling)))), ==(old(_dryad_S0#0, sll_lseg_reach(node, sibling)), old(_dryad_S1#1, sll_lseg_reach(node, sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S0#0, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_lseg_reach(_dryad_S0#0, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_lseg_reach(_dryad_S1#1, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#0, sll_lseg_reach(node, sibling)))), ==(old(_dryad_S0#0, sll_lseg_keys(node, sibling)), old(_dryad_S1#1, sll_lseg_keys(node, sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S0#0, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_lseg_keys(_dryad_S0#0, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_lseg_keys(_dryad_S1#1, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#0, sll_lseg_reach(node, sibling)))), ==(old(_dryad_S0#0, sll_lseg_len_next(node, sibling)), old(_dryad_S1#1, sll_lseg_len_next(node, sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S0#0, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S0#0, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_lseg_len_next(_dryad_S1#1, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#0, sll_lseg_reach(local.slist, last)))), ==(old(_dryad_S0#0, sll_lseg(local.slist, last)), old(_dryad_S1#1, sll_lseg(local.slist, last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S0#0, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_lseg(_dryad_S0#0, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == F#sll_lseg(_dryad_S1#1, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#0, sll_lseg_reach(local.slist, last)))), ==(old(_dryad_S0#0, sll_lseg_reach(local.slist, last)), old(_dryad_S1#1, sll_lseg_reach(local.slist, last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S0#0, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_lseg_reach(_dryad_S0#0, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == F#sll_lseg_reach(_dryad_S1#1, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#0, sll_lseg_reach(local.slist, last)))), ==(old(_dryad_S0#0, sll_lseg_keys(local.slist, last)), old(_dryad_S1#1, sll_lseg_keys(local.slist, last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S0#0, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_lseg_keys(_dryad_S0#0, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == F#sll_lseg_keys(_dryad_S1#1, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#0, sll_lseg_reach(local.slist, last)))), ==(old(_dryad_S0#0, sll_lseg_len_next(local.slist, last)), old(_dryad_S1#1, sll_lseg_len_next(local.slist, last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S0#0, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S0#0, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == F#sll_lseg_len_next(_dryad_S1#1, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#0, sll_lseg_reach(local.slist, node)))), ==(old(_dryad_S0#0, sll_lseg(local.slist, node)), old(_dryad_S1#1, sll_lseg(local.slist, node)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S0#0, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node))) ==> F#sll_lseg(_dryad_S0#0, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == F#sll_lseg(_dryad_S1#1, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#0, sll_lseg_reach(local.slist, node)))), ==(old(_dryad_S0#0, sll_lseg_reach(local.slist, node)), old(_dryad_S1#1, sll_lseg_reach(local.slist, node)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S0#0, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node))) ==> F#sll_lseg_reach(_dryad_S0#0, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == F#sll_lseg_reach(_dryad_S1#1, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#0, sll_lseg_reach(local.slist, node)))), ==(old(_dryad_S0#0, sll_lseg_keys(local.slist, node)), old(_dryad_S1#1, sll_lseg_keys(local.slist, node)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S0#0, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node))) ==> F#sll_lseg_keys(_dryad_S0#0, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == F#sll_lseg_keys(_dryad_S1#1, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#0, sll_lseg_reach(local.slist, node)))), ==(old(_dryad_S0#0, sll_lseg_len_next(local.slist, node)), old(_dryad_S1#1, sll_lseg_len_next(local.slist, node)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S0#0, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S0#0, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == F#sll_lseg_len_next(_dryad_S1#1, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node));
        // assume @_vcc_ptr_neq_null(node); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node));
        // _math \state _dryad_S2#2; 
        // _dryad_S2#2 := @_vcc_current_state(@state); 
        _dryad_S2#2 := $current_state($s);
        // _math \state stmtexpr3#17; 
        // stmtexpr3#17 := _dryad_S2#2; 
        stmtexpr3#17 := _dryad_S2#2;
        // assert @prim_writes_check((node->key)); 
        assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#node, ^s_node), s_node.key));
        // *(node->key) := data; 
        call $write_int(s_node.key, $phys_ptr_cast(L#node, ^s_node), P#data);
        assume $full_stop_ext(#tok$3^46.5, $s);
        // _math \state _dryad_S3#3; 
        // _dryad_S3#3 := @_vcc_current_state(@state); 
        _dryad_S3#3 := $current_state($s);
        // _math \state stmtexpr4#18; 
        // stmtexpr4#18 := _dryad_S3#3; 
        stmtexpr4#18 := _dryad_S3#3;
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#2, sll_reach(*((node->next)))))), ==(old(_dryad_S2#2, sll_keys(*((node->next)))), old(_dryad_S3#3, sll_keys(*((node->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node))) ==> F#sll_keys(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)) == F#sll_keys(_dryad_S3#3, $rd_phys_ptr(_dryad_S3#3, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#2, sll_reach(*((node->next)))))), ==(old(_dryad_S2#2, sll_list_len_next(*((node->next)))), old(_dryad_S3#3, sll_list_len_next(*((node->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node))) ==> F#sll_list_len_next(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)) == F#sll_list_len_next(_dryad_S3#3, $rd_phys_ptr(_dryad_S3#3, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#2, sll_reach(*((node->next)))))), ==(old(_dryad_S2#2, sll(*((node->next)))), old(_dryad_S3#3, sll(*((node->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node))) ==> F#sll(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)) == F#sll(_dryad_S3#3, $rd_phys_ptr(_dryad_S3#3, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#2, sll_reach(*((node->next)))))), ==(old(_dryad_S2#2, sll_reach(*((node->next)))), old(_dryad_S3#3, sll_reach(*((node->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node))) ==> F#sll_reach(_dryad_S2#2, $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)) == F#sll_reach(_dryad_S3#3, $rd_phys_ptr(_dryad_S3#3, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node));
        // assume ==(old(_dryad_S2#2, sll_list_len_next(node)), old(_dryad_S3#3, sll_list_len_next(node))); 
        assume F#sll_list_len_next(_dryad_S2#2, $phys_ptr_cast(L#node, ^s_node)) == F#sll_list_len_next(_dryad_S3#3, $phys_ptr_cast(L#node, ^s_node));
        // assume ==(old(_dryad_S2#2, sll(node)), old(_dryad_S3#3, sll(node))); 
        assume F#sll(_dryad_S2#2, $phys_ptr_cast(L#node, ^s_node)) == F#sll(_dryad_S3#3, $phys_ptr_cast(L#node, ^s_node));
        // assume ==(old(_dryad_S2#2, sll_reach(node)), old(_dryad_S3#3, sll_reach(node))); 
        assume F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#node, ^s_node)) == F#sll_reach(_dryad_S3#3, $phys_ptr_cast(L#node, ^s_node));
        // assume ==(old(_dryad_S2#2, sll_list_len_next(last)), old(_dryad_S3#3, sll_list_len_next(last))); 
        assume F#sll_list_len_next(_dryad_S2#2, $phys_ptr_cast(L#last, ^s_node)) == F#sll_list_len_next(_dryad_S3#3, $phys_ptr_cast(L#last, ^s_node));
        // assume ==(old(_dryad_S2#2, sll(last)), old(_dryad_S3#3, sll(last))); 
        assume F#sll(_dryad_S2#2, $phys_ptr_cast(L#last, ^s_node)) == F#sll(_dryad_S3#3, $phys_ptr_cast(L#last, ^s_node));
        // assume ==(old(_dryad_S2#2, sll_reach(last)), old(_dryad_S3#3, sll_reach(last))); 
        assume F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#last, ^s_node)) == F#sll_reach(_dryad_S3#3, $phys_ptr_cast(L#last, ^s_node));
        // assume ==(old(_dryad_S2#2, sll_list_len_next(sibling)), old(_dryad_S3#3, sll_list_len_next(sibling))); 
        assume F#sll_list_len_next(_dryad_S2#2, $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_list_len_next(_dryad_S3#3, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==(old(_dryad_S2#2, sll(sibling)), old(_dryad_S3#3, sll(sibling))); 
        assume F#sll(_dryad_S2#2, $phys_ptr_cast(P#sibling, ^s_node)) == F#sll(_dryad_S3#3, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==(old(_dryad_S2#2, sll_reach(sibling)), old(_dryad_S3#3, sll_reach(sibling))); 
        assume F#sll_reach(_dryad_S2#2, $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_reach(_dryad_S3#3, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==(old(_dryad_S2#2, sll_list_len_next(local.slist)), old(_dryad_S3#3, sll_list_len_next(local.slist))); 
        assume F#sll_list_len_next(_dryad_S2#2, $phys_ptr_cast(local.slist, ^s_node)) == F#sll_list_len_next(_dryad_S3#3, $phys_ptr_cast(local.slist, ^s_node));
        // assume ==(old(_dryad_S2#2, sll(local.slist)), old(_dryad_S3#3, sll(local.slist))); 
        assume F#sll(_dryad_S2#2, $phys_ptr_cast(local.slist, ^s_node)) == F#sll(_dryad_S3#3, $phys_ptr_cast(local.slist, ^s_node));
        // assume ==(old(_dryad_S2#2, sll_reach(local.slist)), old(_dryad_S3#3, sll_reach(local.slist))); 
        assume F#sll_reach(_dryad_S2#2, $phys_ptr_cast(local.slist, ^s_node)) == F#sll_reach(_dryad_S3#3, $phys_ptr_cast(local.slist, ^s_node));
        // assume ==(old(_dryad_S2#2, sll_lseg(node, sibling)), old(_dryad_S3#3, sll_lseg(node, sibling))); 
        assume F#sll_lseg(_dryad_S2#2, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_lseg(_dryad_S3#3, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==(old(_dryad_S2#2, sll_lseg_reach(node, sibling)), old(_dryad_S3#3, sll_lseg_reach(node, sibling))); 
        assume F#sll_lseg_reach(_dryad_S2#2, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_lseg_reach(_dryad_S3#3, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==(old(_dryad_S2#2, sll_lseg_len_next(node, sibling)), old(_dryad_S3#3, sll_lseg_len_next(node, sibling))); 
        assume F#sll_lseg_len_next(_dryad_S2#2, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_lseg_len_next(_dryad_S3#3, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#2, sll_reach(last)))), ==(old(_dryad_S2#2, sll_keys(last)), old(_dryad_S3#3, sll_keys(last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_keys(_dryad_S2#2, $phys_ptr_cast(L#last, ^s_node)) == F#sll_keys(_dryad_S3#3, $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#2, sll_reach(last)))), ==(old(_dryad_S2#2, sll_list_len_next(last)), old(_dryad_S3#3, sll_list_len_next(last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_list_len_next(_dryad_S2#2, $phys_ptr_cast(L#last, ^s_node)) == F#sll_list_len_next(_dryad_S3#3, $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#2, sll_reach(last)))), ==(old(_dryad_S2#2, sll(last)), old(_dryad_S3#3, sll(last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#last, ^s_node))) ==> F#sll(_dryad_S2#2, $phys_ptr_cast(L#last, ^s_node)) == F#sll(_dryad_S3#3, $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#2, sll_reach(last)))), ==(old(_dryad_S2#2, sll_reach(last)), old(_dryad_S3#3, sll_reach(last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#last, ^s_node)) == F#sll_reach(_dryad_S3#3, $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#2, sll_reach(sibling)))), ==(old(_dryad_S2#2, sll_keys(sibling)), old(_dryad_S3#3, sll_keys(sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_keys(_dryad_S2#2, $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_keys(_dryad_S3#3, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#2, sll_reach(sibling)))), ==(old(_dryad_S2#2, sll_list_len_next(sibling)), old(_dryad_S3#3, sll_list_len_next(sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_list_len_next(_dryad_S2#2, $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_list_len_next(_dryad_S3#3, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#2, sll_reach(sibling)))), ==(old(_dryad_S2#2, sll(sibling)), old(_dryad_S3#3, sll(sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll(_dryad_S2#2, $phys_ptr_cast(P#sibling, ^s_node)) == F#sll(_dryad_S3#3, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#2, sll_reach(sibling)))), ==(old(_dryad_S2#2, sll_reach(sibling)), old(_dryad_S3#3, sll_reach(sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_reach(_dryad_S2#2, $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_reach(_dryad_S3#3, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#2, sll_reach(local.slist)))), ==(old(_dryad_S2#2, sll_keys(local.slist)), old(_dryad_S3#3, sll_keys(local.slist)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(local.slist, ^s_node))) ==> F#sll_keys(_dryad_S2#2, $phys_ptr_cast(local.slist, ^s_node)) == F#sll_keys(_dryad_S3#3, $phys_ptr_cast(local.slist, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#2, sll_reach(local.slist)))), ==(old(_dryad_S2#2, sll_list_len_next(local.slist)), old(_dryad_S3#3, sll_list_len_next(local.slist)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(local.slist, ^s_node))) ==> F#sll_list_len_next(_dryad_S2#2, $phys_ptr_cast(local.slist, ^s_node)) == F#sll_list_len_next(_dryad_S3#3, $phys_ptr_cast(local.slist, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#2, sll_reach(local.slist)))), ==(old(_dryad_S2#2, sll(local.slist)), old(_dryad_S3#3, sll(local.slist)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(local.slist, ^s_node))) ==> F#sll(_dryad_S2#2, $phys_ptr_cast(local.slist, ^s_node)) == F#sll(_dryad_S3#3, $phys_ptr_cast(local.slist, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#2, sll_reach(local.slist)))), ==(old(_dryad_S2#2, sll_reach(local.slist)), old(_dryad_S3#3, sll_reach(local.slist)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(local.slist, ^s_node))) ==> F#sll_reach(_dryad_S2#2, $phys_ptr_cast(local.slist, ^s_node)) == F#sll_reach(_dryad_S3#3, $phys_ptr_cast(local.slist, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#2, sll_lseg_reach(local.slist, sibling)))), ==(old(_dryad_S2#2, sll_lseg(local.slist, sibling)), old(_dryad_S3#3, sll_lseg(local.slist, sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S2#2, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_lseg(_dryad_S2#2, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_lseg(_dryad_S3#3, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#2, sll_lseg_reach(local.slist, sibling)))), ==(old(_dryad_S2#2, sll_lseg_reach(local.slist, sibling)), old(_dryad_S3#3, sll_lseg_reach(local.slist, sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S2#2, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_lseg_reach(_dryad_S2#2, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_lseg_reach(_dryad_S3#3, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#2, sll_lseg_reach(local.slist, sibling)))), ==(old(_dryad_S2#2, sll_lseg_keys(local.slist, sibling)), old(_dryad_S3#3, sll_lseg_keys(local.slist, sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S2#2, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_lseg_keys(_dryad_S2#2, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_lseg_keys(_dryad_S3#3, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#2, sll_lseg_reach(local.slist, sibling)))), ==(old(_dryad_S2#2, sll_lseg_len_next(local.slist, sibling)), old(_dryad_S3#3, sll_lseg_len_next(local.slist, sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S2#2, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S2#2, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_lseg_len_next(_dryad_S3#3, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#2, sll_lseg_reach(local.slist, last)))), ==(old(_dryad_S2#2, sll_lseg(local.slist, last)), old(_dryad_S3#3, sll_lseg(local.slist, last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S2#2, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_lseg(_dryad_S2#2, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == F#sll_lseg(_dryad_S3#3, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#2, sll_lseg_reach(local.slist, last)))), ==(old(_dryad_S2#2, sll_lseg_reach(local.slist, last)), old(_dryad_S3#3, sll_lseg_reach(local.slist, last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S2#2, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_lseg_reach(_dryad_S2#2, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == F#sll_lseg_reach(_dryad_S3#3, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#2, sll_lseg_reach(local.slist, last)))), ==(old(_dryad_S2#2, sll_lseg_keys(local.slist, last)), old(_dryad_S3#3, sll_lseg_keys(local.slist, last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S2#2, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_lseg_keys(_dryad_S2#2, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == F#sll_lseg_keys(_dryad_S3#3, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#2, sll_lseg_reach(local.slist, last)))), ==(old(_dryad_S2#2, sll_lseg_len_next(local.slist, last)), old(_dryad_S3#3, sll_lseg_len_next(local.slist, last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S2#2, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S2#2, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == F#sll_lseg_len_next(_dryad_S3#3, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#2, sll_lseg_reach(local.slist, node)))), ==(old(_dryad_S2#2, sll_lseg(local.slist, node)), old(_dryad_S3#3, sll_lseg(local.slist, node)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S2#2, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node))) ==> F#sll_lseg(_dryad_S2#2, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == F#sll_lseg(_dryad_S3#3, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#2, sll_lseg_reach(local.slist, node)))), ==(old(_dryad_S2#2, sll_lseg_reach(local.slist, node)), old(_dryad_S3#3, sll_lseg_reach(local.slist, node)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S2#2, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node))) ==> F#sll_lseg_reach(_dryad_S2#2, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == F#sll_lseg_reach(_dryad_S3#3, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#2, sll_lseg_reach(local.slist, node)))), ==(old(_dryad_S2#2, sll_lseg_keys(local.slist, node)), old(_dryad_S3#3, sll_lseg_keys(local.slist, node)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S2#2, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node))) ==> F#sll_lseg_keys(_dryad_S2#2, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == F#sll_lseg_keys(_dryad_S3#3, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#2, sll_lseg_reach(local.slist, node)))), ==(old(_dryad_S2#2, sll_lseg_len_next(local.slist, node)), old(_dryad_S3#3, sll_lseg_len_next(local.slist, node)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S2#2, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S2#2, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == F#sll_lseg_len_next(_dryad_S3#3, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(node, last)), ==(*((last->key)), old(_dryad_S2#2, *((last->key))))); 
        assume !($phys_ptr_cast(L#node, ^s_node) == $phys_ptr_cast(L#last, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#last, ^s_node)) == $rd_inv(_dryad_S2#2, s_node.key, $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(node, last)), @_vcc_ptr_eq_pure(*((last->next)), old(_dryad_S2#2, *((last->next))))); 
        assume !($phys_ptr_cast(L#node, ^s_node) == $phys_ptr_cast(L#last, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(node, sibling)), ==(*((sibling->key)), old(_dryad_S2#2, *((sibling->key))))); 
        assume !($phys_ptr_cast(L#node, ^s_node) == $phys_ptr_cast(P#sibling, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#sibling, ^s_node)) == $rd_inv(_dryad_S2#2, s_node.key, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(node, sibling)), @_vcc_ptr_eq_pure(*((sibling->next)), old(_dryad_S2#2, *((sibling->next))))); 
        assume !($phys_ptr_cast(L#node, ^s_node) == $phys_ptr_cast(P#sibling, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(node, local.slist)), ==(*((local.slist->key)), old(_dryad_S2#2, *((local.slist->key))))); 
        assume !($phys_ptr_cast(L#node, ^s_node) == $phys_ptr_cast(local.slist, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node)) == $rd_inv(_dryad_S2#2, s_node.key, $phys_ptr_cast(local.slist, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(node, local.slist)), @_vcc_ptr_eq_pure(*((local.slist->next)), old(_dryad_S2#2, *((local.slist->next))))); 
        assume !($phys_ptr_cast(L#node, ^s_node) == $phys_ptr_cast(local.slist, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node);
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_keys(last), @_vcc_intset_union(sll_keys(*((last->next))), @_vcc_intset_singleton(*((last->key)))))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#last, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#last, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_list_len_next(last), unchecked+(sll_list_len_next(*((last->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#last, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll(last), &&(sll(*((last->next))), unchecked!(@_vcc_oset_in(last, sll_reach(*((last->next)))))))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#last, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_reach(last), @_vcc_oset_union(sll_reach(*((last->next))), @_vcc_oset_singleton(last)))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#last, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll_keys(sibling), @_vcc_intset_union(sll_keys(*((sibling->next))), @_vcc_intset_singleton(*((sibling->key)))))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#sibling, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#sibling, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll_list_len_next(sibling), unchecked+(sll_list_len_next(*((sibling->next))), 1))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#sibling, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll(sibling), &&(sll(*((sibling->next))), unchecked!(@_vcc_oset_in(sibling, sll_reach(*((sibling->next)))))))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#sibling, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#sibling, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll_reach(sibling), @_vcc_oset_union(sll_reach(*((sibling->next))), @_vcc_oset_singleton(sibling)))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#sibling, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#sibling, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll_keys(local.slist), @_vcc_intset_union(sll_keys(*((local.slist->next))), @_vcc_intset_singleton(*((local.slist->key)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.slist, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll_list_len_next(local.slist), unchecked+(sll_list_len_next(*((local.slist->next))), 1))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.slist, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll(local.slist), &&(sll(*((local.slist->next))), unchecked!(@_vcc_oset_in(local.slist, sll_reach(*((local.slist->next)))))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.slist, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll_reach(local.slist), @_vcc_oset_union(sll_reach(*((local.slist->next))), @_vcc_oset_singleton(local.slist)))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.slist, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.slist, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(node), ==(sll_keys(node), @_vcc_intset_union(sll_keys(*((node->next))), @_vcc_intset_singleton(*((node->key)))))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#node, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#node, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg(local.slist, sibling), &&(sll_lseg(*((local.slist->next)), sibling), unchecked!(@_vcc_oset_in(local.slist, sll_lseg_reach(*((local.slist->next)), sibling)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) && !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg_reach(local.slist, sibling), @_vcc_oset_union(sll_lseg_reach(*((local.slist->next)), sibling), @_vcc_oset_singleton(local.slist)))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), $oset_singleton($phys_ptr_cast(local.slist, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg_keys(local.slist, sibling), @_vcc_intset_union(sll_lseg_keys(*((local.slist->next)), sibling), @_vcc_intset_singleton(*((local.slist->key)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg_len_next(local.slist, sibling), unchecked+(sll_lseg_len_next(*((local.slist->next)), sibling), 1))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(node), @_vcc_ptr_neq_pure(node, sibling)), ==(sll_lseg(node, sibling), &&(sll_lseg(*((node->next)), sibling), unchecked!(@_vcc_oset_in(node, sll_lseg_reach(*((node->next)), sibling)))))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) && $phys_ptr_cast(L#node, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) && !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(node), @_vcc_ptr_neq_pure(node, sibling)), ==(sll_lseg_reach(node, sibling), @_vcc_oset_union(sll_lseg_reach(*((node->next)), sibling), @_vcc_oset_singleton(node)))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) && $phys_ptr_cast(L#node, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), $oset_singleton($phys_ptr_cast(L#node, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(node), @_vcc_ptr_neq_pure(node, sibling)), ==(sll_lseg_keys(node, sibling), @_vcc_intset_union(sll_lseg_keys(*((node->next)), sibling), @_vcc_intset_singleton(*((node->key)))))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) && $phys_ptr_cast(L#node, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#node, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(node), @_vcc_ptr_neq_pure(node, sibling)), ==(sll_lseg_len_next(node, sibling), unchecked+(sll_lseg_len_next(*((node->next)), sibling), 1))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) && $phys_ptr_cast(L#node, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, last)), ==(sll_lseg(local.slist, last), &&(sll_lseg(*((local.slist->next)), last), unchecked!(@_vcc_oset_in(local.slist, sll_lseg_reach(*((local.slist->next)), last)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#last, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node)) && !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, last)), ==(sll_lseg_reach(local.slist, last), @_vcc_oset_union(sll_lseg_reach(*((local.slist->next)), last), @_vcc_oset_singleton(local.slist)))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#last, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node)), $oset_singleton($phys_ptr_cast(local.slist, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, last)), ==(sll_lseg_keys(local.slist, last), @_vcc_intset_union(sll_lseg_keys(*((local.slist->next)), last), @_vcc_intset_singleton(*((local.slist->key)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#last, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, last)), ==(sll_lseg_len_next(local.slist, last), unchecked+(sll_lseg_len_next(*((local.slist->next)), last), 1))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#last, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node)), 1);
        // _math \state _dryad_S4#4; 
        // _dryad_S4#4 := @_vcc_current_state(@state); 
        _dryad_S4#4 := $current_state($s);
        // _math \state stmtexpr5#19; 
        // stmtexpr5#19 := _dryad_S4#4; 
        stmtexpr5#19 := _dryad_S4#4;
        // assert @prim_writes_check((node->next)); 
        assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#node, ^s_node), s_node.next));
        // *(node->next) := local.slist; 
        call $write_int(s_node.next, $phys_ptr_cast(L#node, ^s_node), $ptr_to_int($phys_ptr_cast(local.slist, ^s_node)));
        assume $full_stop_ext(#tok$3^47.5, $s);
        // _math \state _dryad_S5#5; 
        // _dryad_S5#5 := @_vcc_current_state(@state); 
        _dryad_S5#5 := $current_state($s);
        // _math \state stmtexpr6#20; 
        // stmtexpr6#20 := _dryad_S5#5; 
        stmtexpr6#20 := _dryad_S5#5;
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#4, sll_reach(last)))), ==(old(_dryad_S4#4, sll_keys(last)), old(_dryad_S5#5, sll_keys(last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S4#4, $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_keys(_dryad_S4#4, $phys_ptr_cast(L#last, ^s_node)) == F#sll_keys(_dryad_S5#5, $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#4, sll_reach(last)))), ==(old(_dryad_S4#4, sll_list_len_next(last)), old(_dryad_S5#5, sll_list_len_next(last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S4#4, $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_list_len_next(_dryad_S4#4, $phys_ptr_cast(L#last, ^s_node)) == F#sll_list_len_next(_dryad_S5#5, $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#4, sll_reach(last)))), ==(old(_dryad_S4#4, sll(last)), old(_dryad_S5#5, sll(last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S4#4, $phys_ptr_cast(L#last, ^s_node))) ==> F#sll(_dryad_S4#4, $phys_ptr_cast(L#last, ^s_node)) == F#sll(_dryad_S5#5, $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#4, sll_reach(last)))), ==(old(_dryad_S4#4, sll_reach(last)), old(_dryad_S5#5, sll_reach(last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S4#4, $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_reach(_dryad_S4#4, $phys_ptr_cast(L#last, ^s_node)) == F#sll_reach(_dryad_S5#5, $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#4, sll_reach(sibling)))), ==(old(_dryad_S4#4, sll_keys(sibling)), old(_dryad_S5#5, sll_keys(sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S4#4, $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_keys(_dryad_S4#4, $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_keys(_dryad_S5#5, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#4, sll_reach(sibling)))), ==(old(_dryad_S4#4, sll_list_len_next(sibling)), old(_dryad_S5#5, sll_list_len_next(sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S4#4, $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_list_len_next(_dryad_S4#4, $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_list_len_next(_dryad_S5#5, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#4, sll_reach(sibling)))), ==(old(_dryad_S4#4, sll(sibling)), old(_dryad_S5#5, sll(sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S4#4, $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll(_dryad_S4#4, $phys_ptr_cast(P#sibling, ^s_node)) == F#sll(_dryad_S5#5, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#4, sll_reach(sibling)))), ==(old(_dryad_S4#4, sll_reach(sibling)), old(_dryad_S5#5, sll_reach(sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S4#4, $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_reach(_dryad_S4#4, $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_reach(_dryad_S5#5, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#4, sll_reach(local.slist)))), ==(old(_dryad_S4#4, sll_keys(local.slist)), old(_dryad_S5#5, sll_keys(local.slist)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S4#4, $phys_ptr_cast(local.slist, ^s_node))) ==> F#sll_keys(_dryad_S4#4, $phys_ptr_cast(local.slist, ^s_node)) == F#sll_keys(_dryad_S5#5, $phys_ptr_cast(local.slist, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#4, sll_reach(local.slist)))), ==(old(_dryad_S4#4, sll_list_len_next(local.slist)), old(_dryad_S5#5, sll_list_len_next(local.slist)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S4#4, $phys_ptr_cast(local.slist, ^s_node))) ==> F#sll_list_len_next(_dryad_S4#4, $phys_ptr_cast(local.slist, ^s_node)) == F#sll_list_len_next(_dryad_S5#5, $phys_ptr_cast(local.slist, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#4, sll_reach(local.slist)))), ==(old(_dryad_S4#4, sll(local.slist)), old(_dryad_S5#5, sll(local.slist)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S4#4, $phys_ptr_cast(local.slist, ^s_node))) ==> F#sll(_dryad_S4#4, $phys_ptr_cast(local.slist, ^s_node)) == F#sll(_dryad_S5#5, $phys_ptr_cast(local.slist, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#4, sll_reach(local.slist)))), ==(old(_dryad_S4#4, sll_reach(local.slist)), old(_dryad_S5#5, sll_reach(local.slist)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S4#4, $phys_ptr_cast(local.slist, ^s_node))) ==> F#sll_reach(_dryad_S4#4, $phys_ptr_cast(local.slist, ^s_node)) == F#sll_reach(_dryad_S5#5, $phys_ptr_cast(local.slist, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#4, sll_lseg_reach(local.slist, sibling)))), ==(old(_dryad_S4#4, sll_lseg(local.slist, sibling)), old(_dryad_S5#5, sll_lseg(local.slist, sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S4#4, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_lseg(_dryad_S4#4, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_lseg(_dryad_S5#5, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#4, sll_lseg_reach(local.slist, sibling)))), ==(old(_dryad_S4#4, sll_lseg_reach(local.slist, sibling)), old(_dryad_S5#5, sll_lseg_reach(local.slist, sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S4#4, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_lseg_reach(_dryad_S4#4, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_lseg_reach(_dryad_S5#5, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#4, sll_lseg_reach(local.slist, sibling)))), ==(old(_dryad_S4#4, sll_lseg_keys(local.slist, sibling)), old(_dryad_S5#5, sll_lseg_keys(local.slist, sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S4#4, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_lseg_keys(_dryad_S4#4, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_lseg_keys(_dryad_S5#5, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#4, sll_lseg_reach(local.slist, sibling)))), ==(old(_dryad_S4#4, sll_lseg_len_next(local.slist, sibling)), old(_dryad_S5#5, sll_lseg_len_next(local.slist, sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S4#4, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S4#4, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_lseg_len_next(_dryad_S5#5, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#4, sll_lseg_reach(local.slist, last)))), ==(old(_dryad_S4#4, sll_lseg(local.slist, last)), old(_dryad_S5#5, sll_lseg(local.slist, last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S4#4, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_lseg(_dryad_S4#4, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == F#sll_lseg(_dryad_S5#5, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#4, sll_lseg_reach(local.slist, last)))), ==(old(_dryad_S4#4, sll_lseg_reach(local.slist, last)), old(_dryad_S5#5, sll_lseg_reach(local.slist, last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S4#4, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_lseg_reach(_dryad_S4#4, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == F#sll_lseg_reach(_dryad_S5#5, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#4, sll_lseg_reach(local.slist, last)))), ==(old(_dryad_S4#4, sll_lseg_keys(local.slist, last)), old(_dryad_S5#5, sll_lseg_keys(local.slist, last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S4#4, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_lseg_keys(_dryad_S4#4, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == F#sll_lseg_keys(_dryad_S5#5, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#4, sll_lseg_reach(local.slist, last)))), ==(old(_dryad_S4#4, sll_lseg_len_next(local.slist, last)), old(_dryad_S5#5, sll_lseg_len_next(local.slist, last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S4#4, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S4#4, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == F#sll_lseg_len_next(_dryad_S5#5, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#4, sll_lseg_reach(local.slist, node)))), ==(old(_dryad_S4#4, sll_lseg(local.slist, node)), old(_dryad_S5#5, sll_lseg(local.slist, node)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S4#4, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node))) ==> F#sll_lseg(_dryad_S4#4, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == F#sll_lseg(_dryad_S5#5, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#4, sll_lseg_reach(local.slist, node)))), ==(old(_dryad_S4#4, sll_lseg_reach(local.slist, node)), old(_dryad_S5#5, sll_lseg_reach(local.slist, node)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S4#4, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node))) ==> F#sll_lseg_reach(_dryad_S4#4, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == F#sll_lseg_reach(_dryad_S5#5, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#4, sll_lseg_reach(local.slist, node)))), ==(old(_dryad_S4#4, sll_lseg_keys(local.slist, node)), old(_dryad_S5#5, sll_lseg_keys(local.slist, node)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S4#4, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node))) ==> F#sll_lseg_keys(_dryad_S4#4, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == F#sll_lseg_keys(_dryad_S5#5, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#4, sll_lseg_reach(local.slist, node)))), ==(old(_dryad_S4#4, sll_lseg_len_next(local.slist, node)), old(_dryad_S5#5, sll_lseg_len_next(local.slist, node)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S4#4, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S4#4, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == F#sll_lseg_len_next(_dryad_S5#5, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(node, last)), ==(*((last->key)), old(_dryad_S4#4, *((last->key))))); 
        assume !($phys_ptr_cast(L#node, ^s_node) == $phys_ptr_cast(L#last, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#last, ^s_node)) == $rd_inv(_dryad_S4#4, s_node.key, $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(node, last)), @_vcc_ptr_eq_pure(*((last->next)), old(_dryad_S4#4, *((last->next))))); 
        assume !($phys_ptr_cast(L#node, ^s_node) == $phys_ptr_cast(L#last, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S4#4, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(node, sibling)), ==(*((sibling->key)), old(_dryad_S4#4, *((sibling->key))))); 
        assume !($phys_ptr_cast(L#node, ^s_node) == $phys_ptr_cast(P#sibling, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#sibling, ^s_node)) == $rd_inv(_dryad_S4#4, s_node.key, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(node, sibling)), @_vcc_ptr_eq_pure(*((sibling->next)), old(_dryad_S4#4, *((sibling->next))))); 
        assume !($phys_ptr_cast(L#node, ^s_node) == $phys_ptr_cast(P#sibling, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S4#4, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(node, local.slist)), ==(*((local.slist->key)), old(_dryad_S4#4, *((local.slist->key))))); 
        assume !($phys_ptr_cast(L#node, ^s_node) == $phys_ptr_cast(local.slist, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node)) == $rd_inv(_dryad_S4#4, s_node.key, $phys_ptr_cast(local.slist, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(node, local.slist)), @_vcc_ptr_eq_pure(*((local.slist->next)), old(_dryad_S4#4, *((local.slist->next))))); 
        assume !($phys_ptr_cast(L#node, ^s_node) == $phys_ptr_cast(local.slist, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S4#4, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node);
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_keys(last), @_vcc_intset_union(sll_keys(*((last->next))), @_vcc_intset_singleton(*((last->key)))))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#last, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#last, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_list_len_next(last), unchecked+(sll_list_len_next(*((last->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#last, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll(last), &&(sll(*((last->next))), unchecked!(@_vcc_oset_in(last, sll_reach(*((last->next)))))))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#last, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_reach(last), @_vcc_oset_union(sll_reach(*((last->next))), @_vcc_oset_singleton(last)))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#last, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll_keys(sibling), @_vcc_intset_union(sll_keys(*((sibling->next))), @_vcc_intset_singleton(*((sibling->key)))))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#sibling, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#sibling, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll_list_len_next(sibling), unchecked+(sll_list_len_next(*((sibling->next))), 1))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#sibling, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll(sibling), &&(sll(*((sibling->next))), unchecked!(@_vcc_oset_in(sibling, sll_reach(*((sibling->next)))))))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#sibling, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#sibling, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll_reach(sibling), @_vcc_oset_union(sll_reach(*((sibling->next))), @_vcc_oset_singleton(sibling)))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#sibling, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#sibling, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll_keys(local.slist), @_vcc_intset_union(sll_keys(*((local.slist->next))), @_vcc_intset_singleton(*((local.slist->key)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.slist, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll_list_len_next(local.slist), unchecked+(sll_list_len_next(*((local.slist->next))), 1))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.slist, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll(local.slist), &&(sll(*((local.slist->next))), unchecked!(@_vcc_oset_in(local.slist, sll_reach(*((local.slist->next)))))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.slist, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll_reach(local.slist), @_vcc_oset_union(sll_reach(*((local.slist->next))), @_vcc_oset_singleton(local.slist)))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.slist, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.slist, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(node), ==(sll_keys(node), @_vcc_intset_union(sll_keys(*((node->next))), @_vcc_intset_singleton(*((node->key)))))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#node, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#node, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(node), ==(sll_list_len_next(node), unchecked+(sll_list_len_next(*((node->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#node, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(node), ==(sll(node), &&(sll(*((node->next))), unchecked!(@_vcc_oset_in(node, sll_reach(*((node->next)))))))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#node, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(node), ==(sll_reach(node), @_vcc_oset_union(sll_reach(*((node->next))), @_vcc_oset_singleton(node)))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#node, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#node, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll_keys(local.slist), @_vcc_intset_union(sll_keys(*((local.slist->next))), @_vcc_intset_singleton(*((local.slist->key)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.slist, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll_list_len_next(local.slist), unchecked+(sll_list_len_next(*((local.slist->next))), 1))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.slist, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll(local.slist), &&(sll(*((local.slist->next))), unchecked!(@_vcc_oset_in(local.slist, sll_reach(*((local.slist->next)))))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.slist, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll_reach(local.slist), @_vcc_oset_union(sll_reach(*((local.slist->next))), @_vcc_oset_singleton(local.slist)))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.slist, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.slist, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg(local.slist, sibling), &&(sll_lseg(*((local.slist->next)), sibling), unchecked!(@_vcc_oset_in(local.slist, sll_lseg_reach(*((local.slist->next)), sibling)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) && !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg_reach(local.slist, sibling), @_vcc_oset_union(sll_lseg_reach(*((local.slist->next)), sibling), @_vcc_oset_singleton(local.slist)))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), $oset_singleton($phys_ptr_cast(local.slist, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg_keys(local.slist, sibling), @_vcc_intset_union(sll_lseg_keys(*((local.slist->next)), sibling), @_vcc_intset_singleton(*((local.slist->key)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg_len_next(local.slist, sibling), unchecked+(sll_lseg_len_next(*((local.slist->next)), sibling), 1))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, last)), ==(sll_lseg(local.slist, last), &&(sll_lseg(*((local.slist->next)), last), unchecked!(@_vcc_oset_in(local.slist, sll_lseg_reach(*((local.slist->next)), last)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#last, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node)) && !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, last)), ==(sll_lseg_reach(local.slist, last), @_vcc_oset_union(sll_lseg_reach(*((local.slist->next)), last), @_vcc_oset_singleton(local.slist)))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#last, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node)), $oset_singleton($phys_ptr_cast(local.slist, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, last)), ==(sll_lseg_keys(local.slist, last), @_vcc_intset_union(sll_lseg_keys(*((local.slist->next)), last), @_vcc_intset_singleton(*((local.slist->key)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#last, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, last)), ==(sll_lseg_len_next(local.slist, last), unchecked+(sll_lseg_len_next(*((local.slist->next)), last), 1))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#last, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node)), 1);
        // return node; 
        $result := $phys_ptr_cast(L#node, ^s_node);
        assume true;
        assert $position_marker();
        goto #exit;
    }
    else
    {
      anon7:
        // assume ==>(@_vcc_ptr_neq_null(node), ==(sll_keys(node), @_vcc_intset_union(sll_keys(*((node->next))), @_vcc_intset_singleton(*((node->key)))))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#node, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#node, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(node), ==(sll_list_len_next(node), unchecked+(sll_list_len_next(*((node->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#node, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(node), ==(sll(node), &&(sll(*((node->next))), unchecked!(@_vcc_oset_in(node, sll_reach(*((node->next)))))))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#node, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(node), ==(sll_reach(node), @_vcc_oset_union(sll_reach(*((node->next))), @_vcc_oset_singleton(node)))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#node, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#node, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_keys(last), @_vcc_intset_union(sll_keys(*((last->next))), @_vcc_intset_singleton(*((last->key)))))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#last, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#last, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_list_len_next(last), unchecked+(sll_list_len_next(*((last->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#last, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll(last), &&(sll(*((last->next))), unchecked!(@_vcc_oset_in(last, sll_reach(*((last->next)))))))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#last, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_reach(last), @_vcc_oset_union(sll_reach(*((last->next))), @_vcc_oset_singleton(last)))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#last, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll_keys(sibling), @_vcc_intset_union(sll_keys(*((sibling->next))), @_vcc_intset_singleton(*((sibling->key)))))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#sibling, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#sibling, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll_list_len_next(sibling), unchecked+(sll_list_len_next(*((sibling->next))), 1))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#sibling, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll(sibling), &&(sll(*((sibling->next))), unchecked!(@_vcc_oset_in(sibling, sll_reach(*((sibling->next)))))))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#sibling, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#sibling, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll_reach(sibling), @_vcc_oset_union(sll_reach(*((sibling->next))), @_vcc_oset_singleton(sibling)))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#sibling, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#sibling, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll_keys(local.slist), @_vcc_intset_union(sll_keys(*((local.slist->next))), @_vcc_intset_singleton(*((local.slist->key)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.slist, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll_list_len_next(local.slist), unchecked+(sll_list_len_next(*((local.slist->next))), 1))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.slist, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll(local.slist), &&(sll(*((local.slist->next))), unchecked!(@_vcc_oset_in(local.slist, sll_reach(*((local.slist->next)))))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.slist, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll_reach(local.slist), @_vcc_oset_union(sll_reach(*((local.slist->next))), @_vcc_oset_singleton(local.slist)))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.slist, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.slist, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg(local.slist, sibling), &&(sll_lseg(*((local.slist->next)), sibling), unchecked!(@_vcc_oset_in(local.slist, sll_lseg_reach(*((local.slist->next)), sibling)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) && !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg_reach(local.slist, sibling), @_vcc_oset_union(sll_lseg_reach(*((local.slist->next)), sibling), @_vcc_oset_singleton(local.slist)))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), $oset_singleton($phys_ptr_cast(local.slist, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg_keys(local.slist, sibling), @_vcc_intset_union(sll_lseg_keys(*((local.slist->next)), sibling), @_vcc_intset_singleton(*((local.slist->key)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg_len_next(local.slist, sibling), unchecked+(sll_lseg_len_next(*((local.slist->next)), sibling), 1))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(node), @_vcc_ptr_neq_pure(node, sibling)), ==(sll_lseg(node, sibling), &&(sll_lseg(*((node->next)), sibling), unchecked!(@_vcc_oset_in(node, sll_lseg_reach(*((node->next)), sibling)))))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) && $phys_ptr_cast(L#node, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) && !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(node), @_vcc_ptr_neq_pure(node, sibling)), ==(sll_lseg_reach(node, sibling), @_vcc_oset_union(sll_lseg_reach(*((node->next)), sibling), @_vcc_oset_singleton(node)))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) && $phys_ptr_cast(L#node, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), $oset_singleton($phys_ptr_cast(L#node, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(node), @_vcc_ptr_neq_pure(node, sibling)), ==(sll_lseg_keys(node, sibling), @_vcc_intset_union(sll_lseg_keys(*((node->next)), sibling), @_vcc_intset_singleton(*((node->key)))))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) && $phys_ptr_cast(L#node, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#node, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(node), @_vcc_ptr_neq_pure(node, sibling)), ==(sll_lseg_len_next(node, sibling), unchecked+(sll_lseg_len_next(*((node->next)), sibling), 1))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) && $phys_ptr_cast(L#node, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, last)), ==(sll_lseg(local.slist, last), &&(sll_lseg(*((local.slist->next)), last), unchecked!(@_vcc_oset_in(local.slist, sll_lseg_reach(*((local.slist->next)), last)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#last, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node)) && !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, last)), ==(sll_lseg_reach(local.slist, last), @_vcc_oset_union(sll_lseg_reach(*((local.slist->next)), last), @_vcc_oset_singleton(local.slist)))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#last, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node)), $oset_singleton($phys_ptr_cast(local.slist, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, last)), ==(sll_lseg_keys(local.slist, last), @_vcc_intset_union(sll_lseg_keys(*((local.slist->next)), last), @_vcc_intset_singleton(*((local.slist->key)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#last, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, last)), ==(sll_lseg_len_next(local.slist, last), unchecked+(sll_lseg_len_next(*((local.slist->next)), last), 1))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#last, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, node)), ==(sll_lseg(local.slist, node), &&(sll_lseg(*((local.slist->next)), node), unchecked!(@_vcc_oset_in(local.slist, sll_lseg_reach(*((local.slist->next)), node)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#node, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#node, ^s_node)) && !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#node, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, node)), ==(sll_lseg_reach(local.slist, node), @_vcc_oset_union(sll_lseg_reach(*((local.slist->next)), node), @_vcc_oset_singleton(local.slist)))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#node, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#node, ^s_node)), $oset_singleton($phys_ptr_cast(local.slist, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, node)), ==(sll_lseg_keys(local.slist, node), @_vcc_intset_union(sll_lseg_keys(*((local.slist->next)), node), @_vcc_intset_singleton(*((local.slist->key)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#node, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#node, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, node)), ==(sll_lseg_len_next(local.slist, node), unchecked+(sll_lseg_len_next(*((local.slist->next)), node), 1))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#node, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#node, ^s_node)), 1);
        // struct s_node* tmp_last; 
        // _math \state _dryad_S0#6; 
        // _dryad_S0#6 := @_vcc_current_state(@state); 
        _dryad_S0#6 := $current_state($s);
        // _math \state stmtexpr0#21; 
        // stmtexpr0#21 := _dryad_S0#6; 
        stmtexpr0#21 := _dryad_S0#6;
        // node := _vcc_alloc(@_vcc_typeof((struct s_node*)@null)); 
        call L#node := $alloc(^s_node);
        assume $full_stop_ext(#tok$3^50.12, $s);
        // assume !(@_vcc_oset_in(node, @_vcc_oset_union(_dryad_G0, _dryad_G1))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), $oset_union(SL#_dryad_G0, SL#_dryad_G1));
        // _dryad_G1 := @_vcc_oset_union(_dryad_G0, @_vcc_oset_singleton(node)); 
        SL#_dryad_G1 := $oset_union(SL#_dryad_G0, $oset_singleton($phys_ptr_cast(L#node, ^s_node)));
        // _math \oset stmtexpr1#22; 
        // stmtexpr1#22 := _dryad_G1; 
        stmtexpr1#22 := SL#_dryad_G1;
        // assume ==(glob_reach(), _dryad_G1); 
        assume F#glob_reach() == SL#_dryad_G1;
        // _math \state _dryad_S1#7; 
        // _dryad_S1#7 := @_vcc_current_state(@state); 
        _dryad_S1#7 := $current_state($s);
        // _math \state stmtexpr2#23; 
        // stmtexpr2#23 := _dryad_S1#7; 
        stmtexpr2#23 := _dryad_S1#7;
        // assume ==>(@_vcc_ptr_neq_null(tmp_last), ==(sll_keys(tmp_last), @_vcc_intset_union(sll_keys(*((tmp_last->next))), @_vcc_intset_singleton(*((tmp_last->key)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_last, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp_last, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_last, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_last, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(tmp_last), ==(sll_list_len_next(tmp_last), unchecked+(sll_list_len_next(*((tmp_last->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#tmp_last, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp_last, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_last, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(tmp_last), ==(sll(tmp_last), &&(sll(*((tmp_last->next))), unchecked!(@_vcc_oset_in(tmp_last, sll_reach(*((tmp_last->next)))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_last, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp_last, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_last, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_last, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_last, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(tmp_last), ==(sll_reach(tmp_last), @_vcc_oset_union(sll_reach(*((tmp_last->next))), @_vcc_oset_singleton(tmp_last)))); 
        assume $non_null($phys_ptr_cast(L#tmp_last, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp_last, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_last, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_last, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(node), ==(sll_keys(node), @_vcc_intset_union(sll_keys(*((node->next))), @_vcc_intset_singleton(*((node->key)))))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#node, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#node, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(node), ==(sll_list_len_next(node), unchecked+(sll_list_len_next(*((node->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#node, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(node), ==(sll(node), &&(sll(*((node->next))), unchecked!(@_vcc_oset_in(node, sll_reach(*((node->next)))))))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#node, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(node), ==(sll_reach(node), @_vcc_oset_union(sll_reach(*((node->next))), @_vcc_oset_singleton(node)))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#node, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#node, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_keys(last), @_vcc_intset_union(sll_keys(*((last->next))), @_vcc_intset_singleton(*((last->key)))))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#last, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#last, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_list_len_next(last), unchecked+(sll_list_len_next(*((last->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#last, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll(last), &&(sll(*((last->next))), unchecked!(@_vcc_oset_in(last, sll_reach(*((last->next)))))))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#last, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_reach(last), @_vcc_oset_union(sll_reach(*((last->next))), @_vcc_oset_singleton(last)))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#last, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll_keys(sibling), @_vcc_intset_union(sll_keys(*((sibling->next))), @_vcc_intset_singleton(*((sibling->key)))))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#sibling, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#sibling, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll_list_len_next(sibling), unchecked+(sll_list_len_next(*((sibling->next))), 1))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#sibling, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll(sibling), &&(sll(*((sibling->next))), unchecked!(@_vcc_oset_in(sibling, sll_reach(*((sibling->next)))))))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#sibling, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#sibling, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll_reach(sibling), @_vcc_oset_union(sll_reach(*((sibling->next))), @_vcc_oset_singleton(sibling)))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#sibling, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#sibling, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll_keys(local.slist), @_vcc_intset_union(sll_keys(*((local.slist->next))), @_vcc_intset_singleton(*((local.slist->key)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.slist, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll_list_len_next(local.slist), unchecked+(sll_list_len_next(*((local.slist->next))), 1))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.slist, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll(local.slist), &&(sll(*((local.slist->next))), unchecked!(@_vcc_oset_in(local.slist, sll_reach(*((local.slist->next)))))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.slist, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll_reach(local.slist), @_vcc_oset_union(sll_reach(*((local.slist->next))), @_vcc_oset_singleton(local.slist)))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.slist, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.slist, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg(local.slist, sibling), &&(sll_lseg(*((local.slist->next)), sibling), unchecked!(@_vcc_oset_in(local.slist, sll_lseg_reach(*((local.slist->next)), sibling)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) && !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg_reach(local.slist, sibling), @_vcc_oset_union(sll_lseg_reach(*((local.slist->next)), sibling), @_vcc_oset_singleton(local.slist)))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), $oset_singleton($phys_ptr_cast(local.slist, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg_keys(local.slist, sibling), @_vcc_intset_union(sll_lseg_keys(*((local.slist->next)), sibling), @_vcc_intset_singleton(*((local.slist->key)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg_len_next(local.slist, sibling), unchecked+(sll_lseg_len_next(*((local.slist->next)), sibling), 1))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(node), @_vcc_ptr_neq_pure(node, sibling)), ==(sll_lseg(node, sibling), &&(sll_lseg(*((node->next)), sibling), unchecked!(@_vcc_oset_in(node, sll_lseg_reach(*((node->next)), sibling)))))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) && $phys_ptr_cast(L#node, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) && !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(node), @_vcc_ptr_neq_pure(node, sibling)), ==(sll_lseg_reach(node, sibling), @_vcc_oset_union(sll_lseg_reach(*((node->next)), sibling), @_vcc_oset_singleton(node)))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) && $phys_ptr_cast(L#node, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), $oset_singleton($phys_ptr_cast(L#node, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(node), @_vcc_ptr_neq_pure(node, sibling)), ==(sll_lseg_keys(node, sibling), @_vcc_intset_union(sll_lseg_keys(*((node->next)), sibling), @_vcc_intset_singleton(*((node->key)))))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) && $phys_ptr_cast(L#node, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#node, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(node), @_vcc_ptr_neq_pure(node, sibling)), ==(sll_lseg_len_next(node, sibling), unchecked+(sll_lseg_len_next(*((node->next)), sibling), 1))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) && $phys_ptr_cast(L#node, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, last)), ==(sll_lseg(local.slist, last), &&(sll_lseg(*((local.slist->next)), last), unchecked!(@_vcc_oset_in(local.slist, sll_lseg_reach(*((local.slist->next)), last)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#last, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node)) && !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, last)), ==(sll_lseg_reach(local.slist, last), @_vcc_oset_union(sll_lseg_reach(*((local.slist->next)), last), @_vcc_oset_singleton(local.slist)))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#last, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node)), $oset_singleton($phys_ptr_cast(local.slist, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, last)), ==(sll_lseg_keys(local.slist, last), @_vcc_intset_union(sll_lseg_keys(*((local.slist->next)), last), @_vcc_intset_singleton(*((local.slist->key)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#last, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, last)), ==(sll_lseg_len_next(local.slist, last), unchecked+(sll_lseg_len_next(*((local.slist->next)), last), 1))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#last, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, node)), ==(sll_lseg(local.slist, node), &&(sll_lseg(*((local.slist->next)), node), unchecked!(@_vcc_oset_in(local.slist, sll_lseg_reach(*((local.slist->next)), node)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#node, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#node, ^s_node)) && !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#node, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, node)), ==(sll_lseg_reach(local.slist, node), @_vcc_oset_union(sll_lseg_reach(*((local.slist->next)), node), @_vcc_oset_singleton(local.slist)))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#node, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#node, ^s_node)), $oset_singleton($phys_ptr_cast(local.slist, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, node)), ==(sll_lseg_keys(local.slist, node), @_vcc_intset_union(sll_lseg_keys(*((local.slist->next)), node), @_vcc_intset_singleton(*((local.slist->key)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#node, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#node, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, node)), ==(sll_lseg_len_next(local.slist, node), unchecked+(sll_lseg_len_next(*((local.slist->next)), node), 1))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#node, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#node, ^s_node)), 1);
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#6, sll_reach(tmp_last)))), ==(old(_dryad_S0#6, sll_keys(tmp_last)), old(_dryad_S1#7, sll_keys(tmp_last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S0#6, $phys_ptr_cast(L#tmp_last, ^s_node))) ==> F#sll_keys(_dryad_S0#6, $phys_ptr_cast(L#tmp_last, ^s_node)) == F#sll_keys(_dryad_S1#7, $phys_ptr_cast(L#tmp_last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#6, sll_reach(tmp_last)))), ==(old(_dryad_S0#6, sll_list_len_next(tmp_last)), old(_dryad_S1#7, sll_list_len_next(tmp_last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S0#6, $phys_ptr_cast(L#tmp_last, ^s_node))) ==> F#sll_list_len_next(_dryad_S0#6, $phys_ptr_cast(L#tmp_last, ^s_node)) == F#sll_list_len_next(_dryad_S1#7, $phys_ptr_cast(L#tmp_last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#6, sll_reach(tmp_last)))), ==(old(_dryad_S0#6, sll(tmp_last)), old(_dryad_S1#7, sll(tmp_last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S0#6, $phys_ptr_cast(L#tmp_last, ^s_node))) ==> F#sll(_dryad_S0#6, $phys_ptr_cast(L#tmp_last, ^s_node)) == F#sll(_dryad_S1#7, $phys_ptr_cast(L#tmp_last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#6, sll_reach(tmp_last)))), ==(old(_dryad_S0#6, sll_reach(tmp_last)), old(_dryad_S1#7, sll_reach(tmp_last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S0#6, $phys_ptr_cast(L#tmp_last, ^s_node))) ==> F#sll_reach(_dryad_S0#6, $phys_ptr_cast(L#tmp_last, ^s_node)) == F#sll_reach(_dryad_S1#7, $phys_ptr_cast(L#tmp_last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#6, sll_reach(last)))), ==(old(_dryad_S0#6, sll_keys(last)), old(_dryad_S1#7, sll_keys(last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S0#6, $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_keys(_dryad_S0#6, $phys_ptr_cast(L#last, ^s_node)) == F#sll_keys(_dryad_S1#7, $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#6, sll_reach(last)))), ==(old(_dryad_S0#6, sll_list_len_next(last)), old(_dryad_S1#7, sll_list_len_next(last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S0#6, $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_list_len_next(_dryad_S0#6, $phys_ptr_cast(L#last, ^s_node)) == F#sll_list_len_next(_dryad_S1#7, $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#6, sll_reach(last)))), ==(old(_dryad_S0#6, sll(last)), old(_dryad_S1#7, sll(last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S0#6, $phys_ptr_cast(L#last, ^s_node))) ==> F#sll(_dryad_S0#6, $phys_ptr_cast(L#last, ^s_node)) == F#sll(_dryad_S1#7, $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#6, sll_reach(last)))), ==(old(_dryad_S0#6, sll_reach(last)), old(_dryad_S1#7, sll_reach(last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S0#6, $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_reach(_dryad_S0#6, $phys_ptr_cast(L#last, ^s_node)) == F#sll_reach(_dryad_S1#7, $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#6, sll_reach(sibling)))), ==(old(_dryad_S0#6, sll_keys(sibling)), old(_dryad_S1#7, sll_keys(sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S0#6, $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_keys(_dryad_S0#6, $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_keys(_dryad_S1#7, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#6, sll_reach(sibling)))), ==(old(_dryad_S0#6, sll_list_len_next(sibling)), old(_dryad_S1#7, sll_list_len_next(sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S0#6, $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_list_len_next(_dryad_S0#6, $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_list_len_next(_dryad_S1#7, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#6, sll_reach(sibling)))), ==(old(_dryad_S0#6, sll(sibling)), old(_dryad_S1#7, sll(sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S0#6, $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll(_dryad_S0#6, $phys_ptr_cast(P#sibling, ^s_node)) == F#sll(_dryad_S1#7, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#6, sll_reach(sibling)))), ==(old(_dryad_S0#6, sll_reach(sibling)), old(_dryad_S1#7, sll_reach(sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S0#6, $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_reach(_dryad_S0#6, $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_reach(_dryad_S1#7, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#6, sll_reach(local.slist)))), ==(old(_dryad_S0#6, sll_keys(local.slist)), old(_dryad_S1#7, sll_keys(local.slist)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S0#6, $phys_ptr_cast(local.slist, ^s_node))) ==> F#sll_keys(_dryad_S0#6, $phys_ptr_cast(local.slist, ^s_node)) == F#sll_keys(_dryad_S1#7, $phys_ptr_cast(local.slist, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#6, sll_reach(local.slist)))), ==(old(_dryad_S0#6, sll_list_len_next(local.slist)), old(_dryad_S1#7, sll_list_len_next(local.slist)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S0#6, $phys_ptr_cast(local.slist, ^s_node))) ==> F#sll_list_len_next(_dryad_S0#6, $phys_ptr_cast(local.slist, ^s_node)) == F#sll_list_len_next(_dryad_S1#7, $phys_ptr_cast(local.slist, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#6, sll_reach(local.slist)))), ==(old(_dryad_S0#6, sll(local.slist)), old(_dryad_S1#7, sll(local.slist)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S0#6, $phys_ptr_cast(local.slist, ^s_node))) ==> F#sll(_dryad_S0#6, $phys_ptr_cast(local.slist, ^s_node)) == F#sll(_dryad_S1#7, $phys_ptr_cast(local.slist, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#6, sll_reach(local.slist)))), ==(old(_dryad_S0#6, sll_reach(local.slist)), old(_dryad_S1#7, sll_reach(local.slist)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S0#6, $phys_ptr_cast(local.slist, ^s_node))) ==> F#sll_reach(_dryad_S0#6, $phys_ptr_cast(local.slist, ^s_node)) == F#sll_reach(_dryad_S1#7, $phys_ptr_cast(local.slist, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#6, sll_lseg_reach(local.slist, sibling)))), ==(old(_dryad_S0#6, sll_lseg(local.slist, sibling)), old(_dryad_S1#7, sll_lseg(local.slist, sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S0#6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_lseg(_dryad_S0#6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_lseg(_dryad_S1#7, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#6, sll_lseg_reach(local.slist, sibling)))), ==(old(_dryad_S0#6, sll_lseg_reach(local.slist, sibling)), old(_dryad_S1#7, sll_lseg_reach(local.slist, sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S0#6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_lseg_reach(_dryad_S0#6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_lseg_reach(_dryad_S1#7, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#6, sll_lseg_reach(local.slist, sibling)))), ==(old(_dryad_S0#6, sll_lseg_keys(local.slist, sibling)), old(_dryad_S1#7, sll_lseg_keys(local.slist, sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S0#6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_lseg_keys(_dryad_S0#6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_lseg_keys(_dryad_S1#7, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#6, sll_lseg_reach(local.slist, sibling)))), ==(old(_dryad_S0#6, sll_lseg_len_next(local.slist, sibling)), old(_dryad_S1#7, sll_lseg_len_next(local.slist, sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S0#6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S0#6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_lseg_len_next(_dryad_S1#7, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#6, sll_lseg_reach(node, sibling)))), ==(old(_dryad_S0#6, sll_lseg(node, sibling)), old(_dryad_S1#7, sll_lseg(node, sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S0#6, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_lseg(_dryad_S0#6, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_lseg(_dryad_S1#7, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#6, sll_lseg_reach(node, sibling)))), ==(old(_dryad_S0#6, sll_lseg_reach(node, sibling)), old(_dryad_S1#7, sll_lseg_reach(node, sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S0#6, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_lseg_reach(_dryad_S0#6, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_lseg_reach(_dryad_S1#7, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#6, sll_lseg_reach(node, sibling)))), ==(old(_dryad_S0#6, sll_lseg_keys(node, sibling)), old(_dryad_S1#7, sll_lseg_keys(node, sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S0#6, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_lseg_keys(_dryad_S0#6, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_lseg_keys(_dryad_S1#7, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#6, sll_lseg_reach(node, sibling)))), ==(old(_dryad_S0#6, sll_lseg_len_next(node, sibling)), old(_dryad_S1#7, sll_lseg_len_next(node, sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S0#6, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S0#6, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_lseg_len_next(_dryad_S1#7, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#6, sll_lseg_reach(local.slist, last)))), ==(old(_dryad_S0#6, sll_lseg(local.slist, last)), old(_dryad_S1#7, sll_lseg(local.slist, last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S0#6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_lseg(_dryad_S0#6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == F#sll_lseg(_dryad_S1#7, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#6, sll_lseg_reach(local.slist, last)))), ==(old(_dryad_S0#6, sll_lseg_reach(local.slist, last)), old(_dryad_S1#7, sll_lseg_reach(local.slist, last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S0#6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_lseg_reach(_dryad_S0#6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == F#sll_lseg_reach(_dryad_S1#7, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#6, sll_lseg_reach(local.slist, last)))), ==(old(_dryad_S0#6, sll_lseg_keys(local.slist, last)), old(_dryad_S1#7, sll_lseg_keys(local.slist, last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S0#6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_lseg_keys(_dryad_S0#6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == F#sll_lseg_keys(_dryad_S1#7, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#6, sll_lseg_reach(local.slist, last)))), ==(old(_dryad_S0#6, sll_lseg_len_next(local.slist, last)), old(_dryad_S1#7, sll_lseg_len_next(local.slist, last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S0#6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S0#6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == F#sll_lseg_len_next(_dryad_S1#7, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#6, sll_lseg_reach(local.slist, node)))), ==(old(_dryad_S0#6, sll_lseg(local.slist, node)), old(_dryad_S1#7, sll_lseg(local.slist, node)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S0#6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node))) ==> F#sll_lseg(_dryad_S0#6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == F#sll_lseg(_dryad_S1#7, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#6, sll_lseg_reach(local.slist, node)))), ==(old(_dryad_S0#6, sll_lseg_reach(local.slist, node)), old(_dryad_S1#7, sll_lseg_reach(local.slist, node)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S0#6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node))) ==> F#sll_lseg_reach(_dryad_S0#6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == F#sll_lseg_reach(_dryad_S1#7, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#6, sll_lseg_reach(local.slist, node)))), ==(old(_dryad_S0#6, sll_lseg_keys(local.slist, node)), old(_dryad_S1#7, sll_lseg_keys(local.slist, node)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S0#6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node))) ==> F#sll_lseg_keys(_dryad_S0#6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == F#sll_lseg_keys(_dryad_S1#7, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S0#6, sll_lseg_reach(local.slist, node)))), ==(old(_dryad_S0#6, sll_lseg_len_next(local.slist, node)), old(_dryad_S1#7, sll_lseg_len_next(local.slist, node)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S0#6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S0#6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == F#sll_lseg_len_next(_dryad_S1#7, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node));
        // assume @_vcc_ptr_neq_null(node); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node));
        // struct s_node* last0#8; 
        // last0#8 := last; 
        last0#8 := $phys_ptr_cast(L#last, ^s_node);
        // struct s_node* stmtexpr3#24; 
        // stmtexpr3#24 := last0#8; 
        stmtexpr3#24 := $phys_ptr_cast(last0#8, ^s_node);
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_keys(last), @_vcc_intset_union(sll_keys(*((last->next))), @_vcc_intset_singleton(*((last->key)))))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#last, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#last, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_list_len_next(last), unchecked+(sll_list_len_next(*((last->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#last, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll(last), &&(sll(*((last->next))), unchecked!(@_vcc_oset_in(last, sll_reach(*((last->next)))))))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#last, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_reach(last), @_vcc_oset_union(sll_reach(*((last->next))), @_vcc_oset_singleton(last)))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#last, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last, ^s_node)));
        // assert @reads_check_normal((last->next)); 
        assert $thread_local($s, $phys_ptr_cast(L#last, ^s_node));
        // tmp_last := *((last->next)); 
        L#tmp_last := $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node);
        // assume ==>(@_vcc_ptr_neq_null(tmp_last), ==(sll_keys(tmp_last), @_vcc_intset_union(sll_keys(*((tmp_last->next))), @_vcc_intset_singleton(*((tmp_last->key)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_last, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp_last, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_last, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_last, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(tmp_last), ==(sll_list_len_next(tmp_last), unchecked+(sll_list_len_next(*((tmp_last->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#tmp_last, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp_last, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_last, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(tmp_last), ==(sll(tmp_last), &&(sll(*((tmp_last->next))), unchecked!(@_vcc_oset_in(tmp_last, sll_reach(*((tmp_last->next)))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_last, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp_last, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_last, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_last, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_last, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(tmp_last), ==(sll_reach(tmp_last), @_vcc_oset_union(sll_reach(*((tmp_last->next))), @_vcc_oset_singleton(tmp_last)))); 
        assume $non_null($phys_ptr_cast(L#tmp_last, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp_last, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_last, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_last, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_keys(last), @_vcc_intset_union(sll_keys(*((last->next))), @_vcc_intset_singleton(*((last->key)))))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#last, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#last, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_list_len_next(last), unchecked+(sll_list_len_next(*((last->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#last, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll(last), &&(sll(*((last->next))), unchecked!(@_vcc_oset_in(last, sll_reach(*((last->next)))))))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#last, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_reach(last), @_vcc_oset_union(sll_reach(*((last->next))), @_vcc_oset_singleton(last)))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#last, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last, ^s_node)));
        // _math \state _dryad_S2#9; 
        // _dryad_S2#9 := @_vcc_current_state(@state); 
        _dryad_S2#9 := $current_state($s);
        // _math \state stmtexpr4#25; 
        // stmtexpr4#25 := _dryad_S2#9; 
        stmtexpr4#25 := _dryad_S2#9;
        // assert @prim_writes_check((node->key)); 
        assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#node, ^s_node), s_node.key));
        // *(node->key) := data; 
        call $write_int(s_node.key, $phys_ptr_cast(L#node, ^s_node), P#data);
        assume $full_stop_ext(#tok$3^53.5, $s);
        // _math \state _dryad_S3#10; 
        // _dryad_S3#10 := @_vcc_current_state(@state); 
        _dryad_S3#10 := $current_state($s);
        // _math \state stmtexpr5#26; 
        // stmtexpr5#26 := _dryad_S3#10; 
        stmtexpr5#26 := _dryad_S3#10;
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#9, sll_reach(*((node->next)))))), ==(old(_dryad_S2#9, sll_keys(*((node->next)))), old(_dryad_S3#10, sll_keys(*((node->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S2#9, $rd_phys_ptr(_dryad_S2#9, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node))) ==> F#sll_keys(_dryad_S2#9, $rd_phys_ptr(_dryad_S2#9, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)) == F#sll_keys(_dryad_S3#10, $rd_phys_ptr(_dryad_S3#10, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#9, sll_reach(*((node->next)))))), ==(old(_dryad_S2#9, sll_list_len_next(*((node->next)))), old(_dryad_S3#10, sll_list_len_next(*((node->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S2#9, $rd_phys_ptr(_dryad_S2#9, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node))) ==> F#sll_list_len_next(_dryad_S2#9, $rd_phys_ptr(_dryad_S2#9, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)) == F#sll_list_len_next(_dryad_S3#10, $rd_phys_ptr(_dryad_S3#10, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#9, sll_reach(*((node->next)))))), ==(old(_dryad_S2#9, sll(*((node->next)))), old(_dryad_S3#10, sll(*((node->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S2#9, $rd_phys_ptr(_dryad_S2#9, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node))) ==> F#sll(_dryad_S2#9, $rd_phys_ptr(_dryad_S2#9, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)) == F#sll(_dryad_S3#10, $rd_phys_ptr(_dryad_S3#10, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#9, sll_reach(*((node->next)))))), ==(old(_dryad_S2#9, sll_reach(*((node->next)))), old(_dryad_S3#10, sll_reach(*((node->next)))))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S2#9, $rd_phys_ptr(_dryad_S2#9, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node))) ==> F#sll_reach(_dryad_S2#9, $rd_phys_ptr(_dryad_S2#9, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)) == F#sll_reach(_dryad_S3#10, $rd_phys_ptr(_dryad_S3#10, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node));
        // assume ==(old(_dryad_S2#9, sll_list_len_next(last0#8)), old(_dryad_S3#10, sll_list_len_next(last0#8))); 
        assume F#sll_list_len_next(_dryad_S2#9, $phys_ptr_cast(last0#8, ^s_node)) == F#sll_list_len_next(_dryad_S3#10, $phys_ptr_cast(last0#8, ^s_node));
        // assume ==(old(_dryad_S2#9, sll(last0#8)), old(_dryad_S3#10, sll(last0#8))); 
        assume F#sll(_dryad_S2#9, $phys_ptr_cast(last0#8, ^s_node)) == F#sll(_dryad_S3#10, $phys_ptr_cast(last0#8, ^s_node));
        // assume ==(old(_dryad_S2#9, sll_reach(last0#8)), old(_dryad_S3#10, sll_reach(last0#8))); 
        assume F#sll_reach(_dryad_S2#9, $phys_ptr_cast(last0#8, ^s_node)) == F#sll_reach(_dryad_S3#10, $phys_ptr_cast(last0#8, ^s_node));
        // assume ==(old(_dryad_S2#9, sll_list_len_next(tmp_last)), old(_dryad_S3#10, sll_list_len_next(tmp_last))); 
        assume F#sll_list_len_next(_dryad_S2#9, $phys_ptr_cast(L#tmp_last, ^s_node)) == F#sll_list_len_next(_dryad_S3#10, $phys_ptr_cast(L#tmp_last, ^s_node));
        // assume ==(old(_dryad_S2#9, sll(tmp_last)), old(_dryad_S3#10, sll(tmp_last))); 
        assume F#sll(_dryad_S2#9, $phys_ptr_cast(L#tmp_last, ^s_node)) == F#sll(_dryad_S3#10, $phys_ptr_cast(L#tmp_last, ^s_node));
        // assume ==(old(_dryad_S2#9, sll_reach(tmp_last)), old(_dryad_S3#10, sll_reach(tmp_last))); 
        assume F#sll_reach(_dryad_S2#9, $phys_ptr_cast(L#tmp_last, ^s_node)) == F#sll_reach(_dryad_S3#10, $phys_ptr_cast(L#tmp_last, ^s_node));
        // assume ==(old(_dryad_S2#9, sll_list_len_next(node)), old(_dryad_S3#10, sll_list_len_next(node))); 
        assume F#sll_list_len_next(_dryad_S2#9, $phys_ptr_cast(L#node, ^s_node)) == F#sll_list_len_next(_dryad_S3#10, $phys_ptr_cast(L#node, ^s_node));
        // assume ==(old(_dryad_S2#9, sll(node)), old(_dryad_S3#10, sll(node))); 
        assume F#sll(_dryad_S2#9, $phys_ptr_cast(L#node, ^s_node)) == F#sll(_dryad_S3#10, $phys_ptr_cast(L#node, ^s_node));
        // assume ==(old(_dryad_S2#9, sll_reach(node)), old(_dryad_S3#10, sll_reach(node))); 
        assume F#sll_reach(_dryad_S2#9, $phys_ptr_cast(L#node, ^s_node)) == F#sll_reach(_dryad_S3#10, $phys_ptr_cast(L#node, ^s_node));
        // assume ==(old(_dryad_S2#9, sll_list_len_next(last)), old(_dryad_S3#10, sll_list_len_next(last))); 
        assume F#sll_list_len_next(_dryad_S2#9, $phys_ptr_cast(L#last, ^s_node)) == F#sll_list_len_next(_dryad_S3#10, $phys_ptr_cast(L#last, ^s_node));
        // assume ==(old(_dryad_S2#9, sll(last)), old(_dryad_S3#10, sll(last))); 
        assume F#sll(_dryad_S2#9, $phys_ptr_cast(L#last, ^s_node)) == F#sll(_dryad_S3#10, $phys_ptr_cast(L#last, ^s_node));
        // assume ==(old(_dryad_S2#9, sll_reach(last)), old(_dryad_S3#10, sll_reach(last))); 
        assume F#sll_reach(_dryad_S2#9, $phys_ptr_cast(L#last, ^s_node)) == F#sll_reach(_dryad_S3#10, $phys_ptr_cast(L#last, ^s_node));
        // assume ==(old(_dryad_S2#9, sll_list_len_next(sibling)), old(_dryad_S3#10, sll_list_len_next(sibling))); 
        assume F#sll_list_len_next(_dryad_S2#9, $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_list_len_next(_dryad_S3#10, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==(old(_dryad_S2#9, sll(sibling)), old(_dryad_S3#10, sll(sibling))); 
        assume F#sll(_dryad_S2#9, $phys_ptr_cast(P#sibling, ^s_node)) == F#sll(_dryad_S3#10, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==(old(_dryad_S2#9, sll_reach(sibling)), old(_dryad_S3#10, sll_reach(sibling))); 
        assume F#sll_reach(_dryad_S2#9, $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_reach(_dryad_S3#10, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==(old(_dryad_S2#9, sll_list_len_next(local.slist)), old(_dryad_S3#10, sll_list_len_next(local.slist))); 
        assume F#sll_list_len_next(_dryad_S2#9, $phys_ptr_cast(local.slist, ^s_node)) == F#sll_list_len_next(_dryad_S3#10, $phys_ptr_cast(local.slist, ^s_node));
        // assume ==(old(_dryad_S2#9, sll(local.slist)), old(_dryad_S3#10, sll(local.slist))); 
        assume F#sll(_dryad_S2#9, $phys_ptr_cast(local.slist, ^s_node)) == F#sll(_dryad_S3#10, $phys_ptr_cast(local.slist, ^s_node));
        // assume ==(old(_dryad_S2#9, sll_reach(local.slist)), old(_dryad_S3#10, sll_reach(local.slist))); 
        assume F#sll_reach(_dryad_S2#9, $phys_ptr_cast(local.slist, ^s_node)) == F#sll_reach(_dryad_S3#10, $phys_ptr_cast(local.slist, ^s_node));
        // assume ==(old(_dryad_S2#9, sll_lseg(node, sibling)), old(_dryad_S3#10, sll_lseg(node, sibling))); 
        assume F#sll_lseg(_dryad_S2#9, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_lseg(_dryad_S3#10, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==(old(_dryad_S2#9, sll_lseg_reach(node, sibling)), old(_dryad_S3#10, sll_lseg_reach(node, sibling))); 
        assume F#sll_lseg_reach(_dryad_S2#9, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_lseg_reach(_dryad_S3#10, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==(old(_dryad_S2#9, sll_lseg_len_next(node, sibling)), old(_dryad_S3#10, sll_lseg_len_next(node, sibling))); 
        assume F#sll_lseg_len_next(_dryad_S2#9, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_lseg_len_next(_dryad_S3#10, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#9, sll_reach(last0#8)))), ==(old(_dryad_S2#9, sll_keys(last0#8)), old(_dryad_S3#10, sll_keys(last0#8)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S2#9, $phys_ptr_cast(last0#8, ^s_node))) ==> F#sll_keys(_dryad_S2#9, $phys_ptr_cast(last0#8, ^s_node)) == F#sll_keys(_dryad_S3#10, $phys_ptr_cast(last0#8, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#9, sll_reach(last0#8)))), ==(old(_dryad_S2#9, sll_list_len_next(last0#8)), old(_dryad_S3#10, sll_list_len_next(last0#8)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S2#9, $phys_ptr_cast(last0#8, ^s_node))) ==> F#sll_list_len_next(_dryad_S2#9, $phys_ptr_cast(last0#8, ^s_node)) == F#sll_list_len_next(_dryad_S3#10, $phys_ptr_cast(last0#8, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#9, sll_reach(last0#8)))), ==(old(_dryad_S2#9, sll(last0#8)), old(_dryad_S3#10, sll(last0#8)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S2#9, $phys_ptr_cast(last0#8, ^s_node))) ==> F#sll(_dryad_S2#9, $phys_ptr_cast(last0#8, ^s_node)) == F#sll(_dryad_S3#10, $phys_ptr_cast(last0#8, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#9, sll_reach(last0#8)))), ==(old(_dryad_S2#9, sll_reach(last0#8)), old(_dryad_S3#10, sll_reach(last0#8)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S2#9, $phys_ptr_cast(last0#8, ^s_node))) ==> F#sll_reach(_dryad_S2#9, $phys_ptr_cast(last0#8, ^s_node)) == F#sll_reach(_dryad_S3#10, $phys_ptr_cast(last0#8, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#9, sll_reach(tmp_last)))), ==(old(_dryad_S2#9, sll_keys(tmp_last)), old(_dryad_S3#10, sll_keys(tmp_last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S2#9, $phys_ptr_cast(L#tmp_last, ^s_node))) ==> F#sll_keys(_dryad_S2#9, $phys_ptr_cast(L#tmp_last, ^s_node)) == F#sll_keys(_dryad_S3#10, $phys_ptr_cast(L#tmp_last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#9, sll_reach(tmp_last)))), ==(old(_dryad_S2#9, sll_list_len_next(tmp_last)), old(_dryad_S3#10, sll_list_len_next(tmp_last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S2#9, $phys_ptr_cast(L#tmp_last, ^s_node))) ==> F#sll_list_len_next(_dryad_S2#9, $phys_ptr_cast(L#tmp_last, ^s_node)) == F#sll_list_len_next(_dryad_S3#10, $phys_ptr_cast(L#tmp_last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#9, sll_reach(tmp_last)))), ==(old(_dryad_S2#9, sll(tmp_last)), old(_dryad_S3#10, sll(tmp_last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S2#9, $phys_ptr_cast(L#tmp_last, ^s_node))) ==> F#sll(_dryad_S2#9, $phys_ptr_cast(L#tmp_last, ^s_node)) == F#sll(_dryad_S3#10, $phys_ptr_cast(L#tmp_last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#9, sll_reach(tmp_last)))), ==(old(_dryad_S2#9, sll_reach(tmp_last)), old(_dryad_S3#10, sll_reach(tmp_last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S2#9, $phys_ptr_cast(L#tmp_last, ^s_node))) ==> F#sll_reach(_dryad_S2#9, $phys_ptr_cast(L#tmp_last, ^s_node)) == F#sll_reach(_dryad_S3#10, $phys_ptr_cast(L#tmp_last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#9, sll_reach(last)))), ==(old(_dryad_S2#9, sll_keys(last)), old(_dryad_S3#10, sll_keys(last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S2#9, $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_keys(_dryad_S2#9, $phys_ptr_cast(L#last, ^s_node)) == F#sll_keys(_dryad_S3#10, $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#9, sll_reach(last)))), ==(old(_dryad_S2#9, sll_list_len_next(last)), old(_dryad_S3#10, sll_list_len_next(last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S2#9, $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_list_len_next(_dryad_S2#9, $phys_ptr_cast(L#last, ^s_node)) == F#sll_list_len_next(_dryad_S3#10, $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#9, sll_reach(last)))), ==(old(_dryad_S2#9, sll(last)), old(_dryad_S3#10, sll(last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S2#9, $phys_ptr_cast(L#last, ^s_node))) ==> F#sll(_dryad_S2#9, $phys_ptr_cast(L#last, ^s_node)) == F#sll(_dryad_S3#10, $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#9, sll_reach(last)))), ==(old(_dryad_S2#9, sll_reach(last)), old(_dryad_S3#10, sll_reach(last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S2#9, $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_reach(_dryad_S2#9, $phys_ptr_cast(L#last, ^s_node)) == F#sll_reach(_dryad_S3#10, $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#9, sll_reach(sibling)))), ==(old(_dryad_S2#9, sll_keys(sibling)), old(_dryad_S3#10, sll_keys(sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S2#9, $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_keys(_dryad_S2#9, $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_keys(_dryad_S3#10, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#9, sll_reach(sibling)))), ==(old(_dryad_S2#9, sll_list_len_next(sibling)), old(_dryad_S3#10, sll_list_len_next(sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S2#9, $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_list_len_next(_dryad_S2#9, $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_list_len_next(_dryad_S3#10, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#9, sll_reach(sibling)))), ==(old(_dryad_S2#9, sll(sibling)), old(_dryad_S3#10, sll(sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S2#9, $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll(_dryad_S2#9, $phys_ptr_cast(P#sibling, ^s_node)) == F#sll(_dryad_S3#10, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#9, sll_reach(sibling)))), ==(old(_dryad_S2#9, sll_reach(sibling)), old(_dryad_S3#10, sll_reach(sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S2#9, $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_reach(_dryad_S2#9, $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_reach(_dryad_S3#10, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#9, sll_reach(local.slist)))), ==(old(_dryad_S2#9, sll_keys(local.slist)), old(_dryad_S3#10, sll_keys(local.slist)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S2#9, $phys_ptr_cast(local.slist, ^s_node))) ==> F#sll_keys(_dryad_S2#9, $phys_ptr_cast(local.slist, ^s_node)) == F#sll_keys(_dryad_S3#10, $phys_ptr_cast(local.slist, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#9, sll_reach(local.slist)))), ==(old(_dryad_S2#9, sll_list_len_next(local.slist)), old(_dryad_S3#10, sll_list_len_next(local.slist)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S2#9, $phys_ptr_cast(local.slist, ^s_node))) ==> F#sll_list_len_next(_dryad_S2#9, $phys_ptr_cast(local.slist, ^s_node)) == F#sll_list_len_next(_dryad_S3#10, $phys_ptr_cast(local.slist, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#9, sll_reach(local.slist)))), ==(old(_dryad_S2#9, sll(local.slist)), old(_dryad_S3#10, sll(local.slist)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S2#9, $phys_ptr_cast(local.slist, ^s_node))) ==> F#sll(_dryad_S2#9, $phys_ptr_cast(local.slist, ^s_node)) == F#sll(_dryad_S3#10, $phys_ptr_cast(local.slist, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#9, sll_reach(local.slist)))), ==(old(_dryad_S2#9, sll_reach(local.slist)), old(_dryad_S3#10, sll_reach(local.slist)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S2#9, $phys_ptr_cast(local.slist, ^s_node))) ==> F#sll_reach(_dryad_S2#9, $phys_ptr_cast(local.slist, ^s_node)) == F#sll_reach(_dryad_S3#10, $phys_ptr_cast(local.slist, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#9, sll_lseg_reach(local.slist, sibling)))), ==(old(_dryad_S2#9, sll_lseg(local.slist, sibling)), old(_dryad_S3#10, sll_lseg(local.slist, sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S2#9, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_lseg(_dryad_S2#9, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_lseg(_dryad_S3#10, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#9, sll_lseg_reach(local.slist, sibling)))), ==(old(_dryad_S2#9, sll_lseg_reach(local.slist, sibling)), old(_dryad_S3#10, sll_lseg_reach(local.slist, sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S2#9, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_lseg_reach(_dryad_S2#9, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_lseg_reach(_dryad_S3#10, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#9, sll_lseg_reach(local.slist, sibling)))), ==(old(_dryad_S2#9, sll_lseg_keys(local.slist, sibling)), old(_dryad_S3#10, sll_lseg_keys(local.slist, sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S2#9, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_lseg_keys(_dryad_S2#9, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_lseg_keys(_dryad_S3#10, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#9, sll_lseg_reach(local.slist, sibling)))), ==(old(_dryad_S2#9, sll_lseg_len_next(local.slist, sibling)), old(_dryad_S3#10, sll_lseg_len_next(local.slist, sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S2#9, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S2#9, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_lseg_len_next(_dryad_S3#10, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#9, sll_lseg_reach(local.slist, last)))), ==(old(_dryad_S2#9, sll_lseg(local.slist, last)), old(_dryad_S3#10, sll_lseg(local.slist, last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S2#9, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_lseg(_dryad_S2#9, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == F#sll_lseg(_dryad_S3#10, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#9, sll_lseg_reach(local.slist, last)))), ==(old(_dryad_S2#9, sll_lseg_reach(local.slist, last)), old(_dryad_S3#10, sll_lseg_reach(local.slist, last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S2#9, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_lseg_reach(_dryad_S2#9, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == F#sll_lseg_reach(_dryad_S3#10, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#9, sll_lseg_reach(local.slist, last)))), ==(old(_dryad_S2#9, sll_lseg_keys(local.slist, last)), old(_dryad_S3#10, sll_lseg_keys(local.slist, last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S2#9, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_lseg_keys(_dryad_S2#9, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == F#sll_lseg_keys(_dryad_S3#10, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#9, sll_lseg_reach(local.slist, last)))), ==(old(_dryad_S2#9, sll_lseg_len_next(local.slist, last)), old(_dryad_S3#10, sll_lseg_len_next(local.slist, last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S2#9, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S2#9, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == F#sll_lseg_len_next(_dryad_S3#10, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#9, sll_lseg_reach(local.slist, node)))), ==(old(_dryad_S2#9, sll_lseg(local.slist, node)), old(_dryad_S3#10, sll_lseg(local.slist, node)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S2#9, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node))) ==> F#sll_lseg(_dryad_S2#9, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == F#sll_lseg(_dryad_S3#10, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#9, sll_lseg_reach(local.slist, node)))), ==(old(_dryad_S2#9, sll_lseg_reach(local.slist, node)), old(_dryad_S3#10, sll_lseg_reach(local.slist, node)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S2#9, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node))) ==> F#sll_lseg_reach(_dryad_S2#9, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == F#sll_lseg_reach(_dryad_S3#10, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#9, sll_lseg_reach(local.slist, node)))), ==(old(_dryad_S2#9, sll_lseg_keys(local.slist, node)), old(_dryad_S3#10, sll_lseg_keys(local.slist, node)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S2#9, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node))) ==> F#sll_lseg_keys(_dryad_S2#9, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == F#sll_lseg_keys(_dryad_S3#10, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#9, sll_lseg_reach(local.slist, node)))), ==(old(_dryad_S2#9, sll_lseg_len_next(local.slist, node)), old(_dryad_S3#10, sll_lseg_len_next(local.slist, node)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S2#9, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S2#9, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == F#sll_lseg_len_next(_dryad_S3#10, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#9, sll_lseg_reach(local.slist, last)))), ==(old(_dryad_S2#9, sll_lseg(local.slist, last)), old(_dryad_S3#10, sll_lseg(local.slist, last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S2#9, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_lseg(_dryad_S2#9, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == F#sll_lseg(_dryad_S3#10, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#9, sll_lseg_reach(local.slist, last)))), ==(old(_dryad_S2#9, sll_lseg_reach(local.slist, last)), old(_dryad_S3#10, sll_lseg_reach(local.slist, last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S2#9, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_lseg_reach(_dryad_S2#9, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == F#sll_lseg_reach(_dryad_S3#10, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#9, sll_lseg_reach(local.slist, last)))), ==(old(_dryad_S2#9, sll_lseg_keys(local.slist, last)), old(_dryad_S3#10, sll_lseg_keys(local.slist, last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S2#9, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_lseg_keys(_dryad_S2#9, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == F#sll_lseg_keys(_dryad_S3#10, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S2#9, sll_lseg_reach(local.slist, last)))), ==(old(_dryad_S2#9, sll_lseg_len_next(local.slist, last)), old(_dryad_S3#10, sll_lseg_len_next(local.slist, last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S2#9, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S2#9, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == F#sll_lseg_len_next(_dryad_S3#10, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(node, last0#8)), ==(*((last0#8->key)), old(_dryad_S2#9, *((last0#8->key))))); 
        assume !($phys_ptr_cast(L#node, ^s_node) == $phys_ptr_cast(last0#8, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(last0#8, ^s_node)) == $rd_inv(_dryad_S2#9, s_node.key, $phys_ptr_cast(last0#8, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(node, last0#8)), @_vcc_ptr_eq_pure(*((last0#8->next)), old(_dryad_S2#9, *((last0#8->next))))); 
        assume !($phys_ptr_cast(L#node, ^s_node) == $phys_ptr_cast(last0#8, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(last0#8, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S2#9, s_node.next, $phys_ptr_cast(last0#8, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(node, tmp_last)), ==(*((tmp_last->key)), old(_dryad_S2#9, *((tmp_last->key))))); 
        assume !($phys_ptr_cast(L#node, ^s_node) == $phys_ptr_cast(L#tmp_last, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_last, ^s_node)) == $rd_inv(_dryad_S2#9, s_node.key, $phys_ptr_cast(L#tmp_last, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(node, tmp_last)), @_vcc_ptr_eq_pure(*((tmp_last->next)), old(_dryad_S2#9, *((tmp_last->next))))); 
        assume !($phys_ptr_cast(L#node, ^s_node) == $phys_ptr_cast(L#tmp_last, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_last, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S2#9, s_node.next, $phys_ptr_cast(L#tmp_last, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(node, last)), ==(*((last->key)), old(_dryad_S2#9, *((last->key))))); 
        assume !($phys_ptr_cast(L#node, ^s_node) == $phys_ptr_cast(L#last, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#last, ^s_node)) == $rd_inv(_dryad_S2#9, s_node.key, $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(node, last)), @_vcc_ptr_eq_pure(*((last->next)), old(_dryad_S2#9, *((last->next))))); 
        assume !($phys_ptr_cast(L#node, ^s_node) == $phys_ptr_cast(L#last, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S2#9, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(node, sibling)), ==(*((sibling->key)), old(_dryad_S2#9, *((sibling->key))))); 
        assume !($phys_ptr_cast(L#node, ^s_node) == $phys_ptr_cast(P#sibling, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#sibling, ^s_node)) == $rd_inv(_dryad_S2#9, s_node.key, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(node, sibling)), @_vcc_ptr_eq_pure(*((sibling->next)), old(_dryad_S2#9, *((sibling->next))))); 
        assume !($phys_ptr_cast(L#node, ^s_node) == $phys_ptr_cast(P#sibling, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S2#9, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(node, local.slist)), ==(*((local.slist->key)), old(_dryad_S2#9, *((local.slist->key))))); 
        assume !($phys_ptr_cast(L#node, ^s_node) == $phys_ptr_cast(local.slist, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node)) == $rd_inv(_dryad_S2#9, s_node.key, $phys_ptr_cast(local.slist, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(node, local.slist)), @_vcc_ptr_eq_pure(*((local.slist->next)), old(_dryad_S2#9, *((local.slist->next))))); 
        assume !($phys_ptr_cast(L#node, ^s_node) == $phys_ptr_cast(local.slist, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S2#9, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node);
        // assume ==>(@_vcc_ptr_neq_null(last0#8), ==(sll_keys(last0#8), @_vcc_intset_union(sll_keys(*((last0#8->next))), @_vcc_intset_singleton(*((last0#8->key)))))); 
        assume $non_null($phys_ptr_cast(last0#8, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(last0#8, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(last0#8, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(last0#8, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(last0#8), ==(sll_list_len_next(last0#8), unchecked+(sll_list_len_next(*((last0#8->next))), 1))); 
        assume $non_null($phys_ptr_cast(last0#8, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(last0#8, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(last0#8, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(last0#8), ==(sll(last0#8), &&(sll(*((last0#8->next))), unchecked!(@_vcc_oset_in(last0#8, sll_reach(*((last0#8->next)))))))); 
        assume $non_null($phys_ptr_cast(last0#8, ^s_node)) ==> F#sll($s, $phys_ptr_cast(last0#8, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(last0#8, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(last0#8, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(last0#8, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(last0#8), ==(sll_reach(last0#8), @_vcc_oset_union(sll_reach(*((last0#8->next))), @_vcc_oset_singleton(last0#8)))); 
        assume $non_null($phys_ptr_cast(last0#8, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(last0#8, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(last0#8, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(last0#8, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_last), ==(sll_keys(tmp_last), @_vcc_intset_union(sll_keys(*((tmp_last->next))), @_vcc_intset_singleton(*((tmp_last->key)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_last, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp_last, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_last, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_last, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(tmp_last), ==(sll_list_len_next(tmp_last), unchecked+(sll_list_len_next(*((tmp_last->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#tmp_last, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp_last, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_last, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(tmp_last), ==(sll(tmp_last), &&(sll(*((tmp_last->next))), unchecked!(@_vcc_oset_in(tmp_last, sll_reach(*((tmp_last->next)))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_last, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp_last, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_last, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_last, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_last, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(tmp_last), ==(sll_reach(tmp_last), @_vcc_oset_union(sll_reach(*((tmp_last->next))), @_vcc_oset_singleton(tmp_last)))); 
        assume $non_null($phys_ptr_cast(L#tmp_last, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp_last, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_last, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_last, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_keys(last), @_vcc_intset_union(sll_keys(*((last->next))), @_vcc_intset_singleton(*((last->key)))))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#last, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#last, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_list_len_next(last), unchecked+(sll_list_len_next(*((last->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#last, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll(last), &&(sll(*((last->next))), unchecked!(@_vcc_oset_in(last, sll_reach(*((last->next)))))))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#last, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_reach(last), @_vcc_oset_union(sll_reach(*((last->next))), @_vcc_oset_singleton(last)))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#last, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll_keys(sibling), @_vcc_intset_union(sll_keys(*((sibling->next))), @_vcc_intset_singleton(*((sibling->key)))))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#sibling, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#sibling, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll_list_len_next(sibling), unchecked+(sll_list_len_next(*((sibling->next))), 1))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#sibling, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll(sibling), &&(sll(*((sibling->next))), unchecked!(@_vcc_oset_in(sibling, sll_reach(*((sibling->next)))))))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#sibling, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#sibling, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll_reach(sibling), @_vcc_oset_union(sll_reach(*((sibling->next))), @_vcc_oset_singleton(sibling)))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#sibling, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#sibling, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll_keys(local.slist), @_vcc_intset_union(sll_keys(*((local.slist->next))), @_vcc_intset_singleton(*((local.slist->key)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.slist, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll_list_len_next(local.slist), unchecked+(sll_list_len_next(*((local.slist->next))), 1))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.slist, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll(local.slist), &&(sll(*((local.slist->next))), unchecked!(@_vcc_oset_in(local.slist, sll_reach(*((local.slist->next)))))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.slist, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll_reach(local.slist), @_vcc_oset_union(sll_reach(*((local.slist->next))), @_vcc_oset_singleton(local.slist)))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.slist, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.slist, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(node), ==(sll_keys(node), @_vcc_intset_union(sll_keys(*((node->next))), @_vcc_intset_singleton(*((node->key)))))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#node, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#node, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg(local.slist, sibling), &&(sll_lseg(*((local.slist->next)), sibling), unchecked!(@_vcc_oset_in(local.slist, sll_lseg_reach(*((local.slist->next)), sibling)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) && !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg_reach(local.slist, sibling), @_vcc_oset_union(sll_lseg_reach(*((local.slist->next)), sibling), @_vcc_oset_singleton(local.slist)))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), $oset_singleton($phys_ptr_cast(local.slist, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg_keys(local.slist, sibling), @_vcc_intset_union(sll_lseg_keys(*((local.slist->next)), sibling), @_vcc_intset_singleton(*((local.slist->key)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg_len_next(local.slist, sibling), unchecked+(sll_lseg_len_next(*((local.slist->next)), sibling), 1))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(node), @_vcc_ptr_neq_pure(node, sibling)), ==(sll_lseg(node, sibling), &&(sll_lseg(*((node->next)), sibling), unchecked!(@_vcc_oset_in(node, sll_lseg_reach(*((node->next)), sibling)))))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) && $phys_ptr_cast(L#node, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) && !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(node), @_vcc_ptr_neq_pure(node, sibling)), ==(sll_lseg_reach(node, sibling), @_vcc_oset_union(sll_lseg_reach(*((node->next)), sibling), @_vcc_oset_singleton(node)))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) && $phys_ptr_cast(L#node, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), $oset_singleton($phys_ptr_cast(L#node, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(node), @_vcc_ptr_neq_pure(node, sibling)), ==(sll_lseg_keys(node, sibling), @_vcc_intset_union(sll_lseg_keys(*((node->next)), sibling), @_vcc_intset_singleton(*((node->key)))))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) && $phys_ptr_cast(L#node, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#node, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(node), @_vcc_ptr_neq_pure(node, sibling)), ==(sll_lseg_len_next(node, sibling), unchecked+(sll_lseg_len_next(*((node->next)), sibling), 1))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) && $phys_ptr_cast(L#node, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#node, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, last)), ==(sll_lseg(local.slist, last), &&(sll_lseg(*((local.slist->next)), last), unchecked!(@_vcc_oset_in(local.slist, sll_lseg_reach(*((local.slist->next)), last)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#last, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node)) && !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, last)), ==(sll_lseg_reach(local.slist, last), @_vcc_oset_union(sll_lseg_reach(*((local.slist->next)), last), @_vcc_oset_singleton(local.slist)))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#last, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node)), $oset_singleton($phys_ptr_cast(local.slist, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, last)), ==(sll_lseg_keys(local.slist, last), @_vcc_intset_union(sll_lseg_keys(*((local.slist->next)), last), @_vcc_intset_singleton(*((local.slist->key)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#last, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, last)), ==(sll_lseg_len_next(local.slist, last), unchecked+(sll_lseg_len_next(*((local.slist->next)), last), 1))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#last, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, last)), ==(sll_lseg(local.slist, last), &&(sll_lseg(*((local.slist->next)), last), unchecked!(@_vcc_oset_in(local.slist, sll_lseg_reach(*((local.slist->next)), last)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#last, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node)) && !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, last)), ==(sll_lseg_reach(local.slist, last), @_vcc_oset_union(sll_lseg_reach(*((local.slist->next)), last), @_vcc_oset_singleton(local.slist)))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#last, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node)), $oset_singleton($phys_ptr_cast(local.slist, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, last)), ==(sll_lseg_keys(local.slist, last), @_vcc_intset_union(sll_lseg_keys(*((local.slist->next)), last), @_vcc_intset_singleton(*((local.slist->key)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#last, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, last)), ==(sll_lseg_len_next(local.slist, last), unchecked+(sll_lseg_len_next(*((local.slist->next)), last), 1))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#last, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node)), 1);
        // _math \state _dryad_S4#11; 
        // _dryad_S4#11 := @_vcc_current_state(@state); 
        _dryad_S4#11 := $current_state($s);
        // _math \state stmtexpr6#27; 
        // stmtexpr6#27 := _dryad_S4#11; 
        stmtexpr6#27 := _dryad_S4#11;
        // assert @prim_writes_check((node->next)); 
        assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#node, ^s_node), s_node.next));
        // *(node->next) := tmp_last; 
        call $write_int(s_node.next, $phys_ptr_cast(L#node, ^s_node), $ptr_to_int($phys_ptr_cast(L#tmp_last, ^s_node)));
        assume $full_stop_ext(#tok$3^54.5, $s);
        // _math \state _dryad_S5#12; 
        // _dryad_S5#12 := @_vcc_current_state(@state); 
        _dryad_S5#12 := $current_state($s);
        // _math \state stmtexpr7#28; 
        // stmtexpr7#28 := _dryad_S5#12; 
        stmtexpr7#28 := _dryad_S5#12;
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#11, sll_reach(last0#8)))), ==(old(_dryad_S4#11, sll_keys(last0#8)), old(_dryad_S5#12, sll_keys(last0#8)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S4#11, $phys_ptr_cast(last0#8, ^s_node))) ==> F#sll_keys(_dryad_S4#11, $phys_ptr_cast(last0#8, ^s_node)) == F#sll_keys(_dryad_S5#12, $phys_ptr_cast(last0#8, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#11, sll_reach(last0#8)))), ==(old(_dryad_S4#11, sll_list_len_next(last0#8)), old(_dryad_S5#12, sll_list_len_next(last0#8)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S4#11, $phys_ptr_cast(last0#8, ^s_node))) ==> F#sll_list_len_next(_dryad_S4#11, $phys_ptr_cast(last0#8, ^s_node)) == F#sll_list_len_next(_dryad_S5#12, $phys_ptr_cast(last0#8, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#11, sll_reach(last0#8)))), ==(old(_dryad_S4#11, sll(last0#8)), old(_dryad_S5#12, sll(last0#8)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S4#11, $phys_ptr_cast(last0#8, ^s_node))) ==> F#sll(_dryad_S4#11, $phys_ptr_cast(last0#8, ^s_node)) == F#sll(_dryad_S5#12, $phys_ptr_cast(last0#8, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#11, sll_reach(last0#8)))), ==(old(_dryad_S4#11, sll_reach(last0#8)), old(_dryad_S5#12, sll_reach(last0#8)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S4#11, $phys_ptr_cast(last0#8, ^s_node))) ==> F#sll_reach(_dryad_S4#11, $phys_ptr_cast(last0#8, ^s_node)) == F#sll_reach(_dryad_S5#12, $phys_ptr_cast(last0#8, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#11, sll_reach(tmp_last)))), ==(old(_dryad_S4#11, sll_keys(tmp_last)), old(_dryad_S5#12, sll_keys(tmp_last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S4#11, $phys_ptr_cast(L#tmp_last, ^s_node))) ==> F#sll_keys(_dryad_S4#11, $phys_ptr_cast(L#tmp_last, ^s_node)) == F#sll_keys(_dryad_S5#12, $phys_ptr_cast(L#tmp_last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#11, sll_reach(tmp_last)))), ==(old(_dryad_S4#11, sll_list_len_next(tmp_last)), old(_dryad_S5#12, sll_list_len_next(tmp_last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S4#11, $phys_ptr_cast(L#tmp_last, ^s_node))) ==> F#sll_list_len_next(_dryad_S4#11, $phys_ptr_cast(L#tmp_last, ^s_node)) == F#sll_list_len_next(_dryad_S5#12, $phys_ptr_cast(L#tmp_last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#11, sll_reach(tmp_last)))), ==(old(_dryad_S4#11, sll(tmp_last)), old(_dryad_S5#12, sll(tmp_last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S4#11, $phys_ptr_cast(L#tmp_last, ^s_node))) ==> F#sll(_dryad_S4#11, $phys_ptr_cast(L#tmp_last, ^s_node)) == F#sll(_dryad_S5#12, $phys_ptr_cast(L#tmp_last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#11, sll_reach(tmp_last)))), ==(old(_dryad_S4#11, sll_reach(tmp_last)), old(_dryad_S5#12, sll_reach(tmp_last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S4#11, $phys_ptr_cast(L#tmp_last, ^s_node))) ==> F#sll_reach(_dryad_S4#11, $phys_ptr_cast(L#tmp_last, ^s_node)) == F#sll_reach(_dryad_S5#12, $phys_ptr_cast(L#tmp_last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#11, sll_reach(last)))), ==(old(_dryad_S4#11, sll_keys(last)), old(_dryad_S5#12, sll_keys(last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S4#11, $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_keys(_dryad_S4#11, $phys_ptr_cast(L#last, ^s_node)) == F#sll_keys(_dryad_S5#12, $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#11, sll_reach(last)))), ==(old(_dryad_S4#11, sll_list_len_next(last)), old(_dryad_S5#12, sll_list_len_next(last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S4#11, $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_list_len_next(_dryad_S4#11, $phys_ptr_cast(L#last, ^s_node)) == F#sll_list_len_next(_dryad_S5#12, $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#11, sll_reach(last)))), ==(old(_dryad_S4#11, sll(last)), old(_dryad_S5#12, sll(last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S4#11, $phys_ptr_cast(L#last, ^s_node))) ==> F#sll(_dryad_S4#11, $phys_ptr_cast(L#last, ^s_node)) == F#sll(_dryad_S5#12, $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#11, sll_reach(last)))), ==(old(_dryad_S4#11, sll_reach(last)), old(_dryad_S5#12, sll_reach(last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S4#11, $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_reach(_dryad_S4#11, $phys_ptr_cast(L#last, ^s_node)) == F#sll_reach(_dryad_S5#12, $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#11, sll_reach(sibling)))), ==(old(_dryad_S4#11, sll_keys(sibling)), old(_dryad_S5#12, sll_keys(sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S4#11, $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_keys(_dryad_S4#11, $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_keys(_dryad_S5#12, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#11, sll_reach(sibling)))), ==(old(_dryad_S4#11, sll_list_len_next(sibling)), old(_dryad_S5#12, sll_list_len_next(sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S4#11, $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_list_len_next(_dryad_S4#11, $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_list_len_next(_dryad_S5#12, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#11, sll_reach(sibling)))), ==(old(_dryad_S4#11, sll(sibling)), old(_dryad_S5#12, sll(sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S4#11, $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll(_dryad_S4#11, $phys_ptr_cast(P#sibling, ^s_node)) == F#sll(_dryad_S5#12, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#11, sll_reach(sibling)))), ==(old(_dryad_S4#11, sll_reach(sibling)), old(_dryad_S5#12, sll_reach(sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S4#11, $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_reach(_dryad_S4#11, $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_reach(_dryad_S5#12, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#11, sll_reach(local.slist)))), ==(old(_dryad_S4#11, sll_keys(local.slist)), old(_dryad_S5#12, sll_keys(local.slist)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S4#11, $phys_ptr_cast(local.slist, ^s_node))) ==> F#sll_keys(_dryad_S4#11, $phys_ptr_cast(local.slist, ^s_node)) == F#sll_keys(_dryad_S5#12, $phys_ptr_cast(local.slist, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#11, sll_reach(local.slist)))), ==(old(_dryad_S4#11, sll_list_len_next(local.slist)), old(_dryad_S5#12, sll_list_len_next(local.slist)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S4#11, $phys_ptr_cast(local.slist, ^s_node))) ==> F#sll_list_len_next(_dryad_S4#11, $phys_ptr_cast(local.slist, ^s_node)) == F#sll_list_len_next(_dryad_S5#12, $phys_ptr_cast(local.slist, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#11, sll_reach(local.slist)))), ==(old(_dryad_S4#11, sll(local.slist)), old(_dryad_S5#12, sll(local.slist)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S4#11, $phys_ptr_cast(local.slist, ^s_node))) ==> F#sll(_dryad_S4#11, $phys_ptr_cast(local.slist, ^s_node)) == F#sll(_dryad_S5#12, $phys_ptr_cast(local.slist, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#11, sll_reach(local.slist)))), ==(old(_dryad_S4#11, sll_reach(local.slist)), old(_dryad_S5#12, sll_reach(local.slist)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach(_dryad_S4#11, $phys_ptr_cast(local.slist, ^s_node))) ==> F#sll_reach(_dryad_S4#11, $phys_ptr_cast(local.slist, ^s_node)) == F#sll_reach(_dryad_S5#12, $phys_ptr_cast(local.slist, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#11, sll_lseg_reach(local.slist, sibling)))), ==(old(_dryad_S4#11, sll_lseg(local.slist, sibling)), old(_dryad_S5#12, sll_lseg(local.slist, sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S4#11, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_lseg(_dryad_S4#11, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_lseg(_dryad_S5#12, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#11, sll_lseg_reach(local.slist, sibling)))), ==(old(_dryad_S4#11, sll_lseg_reach(local.slist, sibling)), old(_dryad_S5#12, sll_lseg_reach(local.slist, sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S4#11, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_lseg_reach(_dryad_S4#11, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_lseg_reach(_dryad_S5#12, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#11, sll_lseg_reach(local.slist, sibling)))), ==(old(_dryad_S4#11, sll_lseg_keys(local.slist, sibling)), old(_dryad_S5#12, sll_lseg_keys(local.slist, sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S4#11, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_lseg_keys(_dryad_S4#11, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_lseg_keys(_dryad_S5#12, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#11, sll_lseg_reach(local.slist, sibling)))), ==(old(_dryad_S4#11, sll_lseg_len_next(local.slist, sibling)), old(_dryad_S5#12, sll_lseg_len_next(local.slist, sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S4#11, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S4#11, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_lseg_len_next(_dryad_S5#12, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#11, sll_lseg_reach(local.slist, last)))), ==(old(_dryad_S4#11, sll_lseg(local.slist, last)), old(_dryad_S5#12, sll_lseg(local.slist, last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S4#11, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_lseg(_dryad_S4#11, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == F#sll_lseg(_dryad_S5#12, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#11, sll_lseg_reach(local.slist, last)))), ==(old(_dryad_S4#11, sll_lseg_reach(local.slist, last)), old(_dryad_S5#12, sll_lseg_reach(local.slist, last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S4#11, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_lseg_reach(_dryad_S4#11, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == F#sll_lseg_reach(_dryad_S5#12, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#11, sll_lseg_reach(local.slist, last)))), ==(old(_dryad_S4#11, sll_lseg_keys(local.slist, last)), old(_dryad_S5#12, sll_lseg_keys(local.slist, last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S4#11, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_lseg_keys(_dryad_S4#11, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == F#sll_lseg_keys(_dryad_S5#12, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#11, sll_lseg_reach(local.slist, last)))), ==(old(_dryad_S4#11, sll_lseg_len_next(local.slist, last)), old(_dryad_S5#12, sll_lseg_len_next(local.slist, last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S4#11, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S4#11, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == F#sll_lseg_len_next(_dryad_S5#12, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#11, sll_lseg_reach(local.slist, node)))), ==(old(_dryad_S4#11, sll_lseg(local.slist, node)), old(_dryad_S5#12, sll_lseg(local.slist, node)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S4#11, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node))) ==> F#sll_lseg(_dryad_S4#11, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == F#sll_lseg(_dryad_S5#12, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#11, sll_lseg_reach(local.slist, node)))), ==(old(_dryad_S4#11, sll_lseg_reach(local.slist, node)), old(_dryad_S5#12, sll_lseg_reach(local.slist, node)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S4#11, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node))) ==> F#sll_lseg_reach(_dryad_S4#11, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == F#sll_lseg_reach(_dryad_S5#12, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#11, sll_lseg_reach(local.slist, node)))), ==(old(_dryad_S4#11, sll_lseg_keys(local.slist, node)), old(_dryad_S5#12, sll_lseg_keys(local.slist, node)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S4#11, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node))) ==> F#sll_lseg_keys(_dryad_S4#11, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == F#sll_lseg_keys(_dryad_S5#12, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#11, sll_lseg_reach(local.slist, node)))), ==(old(_dryad_S4#11, sll_lseg_len_next(local.slist, node)), old(_dryad_S5#12, sll_lseg_len_next(local.slist, node)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S4#11, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S4#11, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == F#sll_lseg_len_next(_dryad_S5#12, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#11, sll_lseg_reach(local.slist, last)))), ==(old(_dryad_S4#11, sll_lseg(local.slist, last)), old(_dryad_S5#12, sll_lseg(local.slist, last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S4#11, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_lseg(_dryad_S4#11, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == F#sll_lseg(_dryad_S5#12, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#11, sll_lseg_reach(local.slist, last)))), ==(old(_dryad_S4#11, sll_lseg_reach(local.slist, last)), old(_dryad_S5#12, sll_lseg_reach(local.slist, last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S4#11, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_lseg_reach(_dryad_S4#11, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == F#sll_lseg_reach(_dryad_S5#12, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#11, sll_lseg_reach(local.slist, last)))), ==(old(_dryad_S4#11, sll_lseg_keys(local.slist, last)), old(_dryad_S5#12, sll_lseg_keys(local.slist, last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S4#11, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_lseg_keys(_dryad_S4#11, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == F#sll_lseg_keys(_dryad_S5#12, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(node, old(_dryad_S4#11, sll_lseg_reach(local.slist, last)))), ==(old(_dryad_S4#11, sll_lseg_len_next(local.slist, last)), old(_dryad_S5#12, sll_lseg_len_next(local.slist, last)))); 
        assume !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_lseg_reach(_dryad_S4#11, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S4#11, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == F#sll_lseg_len_next(_dryad_S5#12, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(node, last0#8)), ==(*((last0#8->key)), old(_dryad_S4#11, *((last0#8->key))))); 
        assume !($phys_ptr_cast(L#node, ^s_node) == $phys_ptr_cast(last0#8, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(last0#8, ^s_node)) == $rd_inv(_dryad_S4#11, s_node.key, $phys_ptr_cast(last0#8, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(node, last0#8)), @_vcc_ptr_eq_pure(*((last0#8->next)), old(_dryad_S4#11, *((last0#8->next))))); 
        assume !($phys_ptr_cast(L#node, ^s_node) == $phys_ptr_cast(last0#8, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(last0#8, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S4#11, s_node.next, $phys_ptr_cast(last0#8, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(node, tmp_last)), ==(*((tmp_last->key)), old(_dryad_S4#11, *((tmp_last->key))))); 
        assume !($phys_ptr_cast(L#node, ^s_node) == $phys_ptr_cast(L#tmp_last, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_last, ^s_node)) == $rd_inv(_dryad_S4#11, s_node.key, $phys_ptr_cast(L#tmp_last, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(node, tmp_last)), @_vcc_ptr_eq_pure(*((tmp_last->next)), old(_dryad_S4#11, *((tmp_last->next))))); 
        assume !($phys_ptr_cast(L#node, ^s_node) == $phys_ptr_cast(L#tmp_last, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_last, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S4#11, s_node.next, $phys_ptr_cast(L#tmp_last, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(node, last)), ==(*((last->key)), old(_dryad_S4#11, *((last->key))))); 
        assume !($phys_ptr_cast(L#node, ^s_node) == $phys_ptr_cast(L#last, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#last, ^s_node)) == $rd_inv(_dryad_S4#11, s_node.key, $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(node, last)), @_vcc_ptr_eq_pure(*((last->next)), old(_dryad_S4#11, *((last->next))))); 
        assume !($phys_ptr_cast(L#node, ^s_node) == $phys_ptr_cast(L#last, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S4#11, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(node, sibling)), ==(*((sibling->key)), old(_dryad_S4#11, *((sibling->key))))); 
        assume !($phys_ptr_cast(L#node, ^s_node) == $phys_ptr_cast(P#sibling, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#sibling, ^s_node)) == $rd_inv(_dryad_S4#11, s_node.key, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(node, sibling)), @_vcc_ptr_eq_pure(*((sibling->next)), old(_dryad_S4#11, *((sibling->next))))); 
        assume !($phys_ptr_cast(L#node, ^s_node) == $phys_ptr_cast(P#sibling, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S4#11, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(node, local.slist)), ==(*((local.slist->key)), old(_dryad_S4#11, *((local.slist->key))))); 
        assume !($phys_ptr_cast(L#node, ^s_node) == $phys_ptr_cast(local.slist, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node)) == $rd_inv(_dryad_S4#11, s_node.key, $phys_ptr_cast(local.slist, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(node, local.slist)), @_vcc_ptr_eq_pure(*((local.slist->next)), old(_dryad_S4#11, *((local.slist->next))))); 
        assume !($phys_ptr_cast(L#node, ^s_node) == $phys_ptr_cast(local.slist, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S4#11, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node);
        // assume ==>(@_vcc_ptr_neq_null(last0#8), ==(sll_keys(last0#8), @_vcc_intset_union(sll_keys(*((last0#8->next))), @_vcc_intset_singleton(*((last0#8->key)))))); 
        assume $non_null($phys_ptr_cast(last0#8, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(last0#8, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(last0#8, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(last0#8, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(last0#8), ==(sll_list_len_next(last0#8), unchecked+(sll_list_len_next(*((last0#8->next))), 1))); 
        assume $non_null($phys_ptr_cast(last0#8, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(last0#8, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(last0#8, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(last0#8), ==(sll(last0#8), &&(sll(*((last0#8->next))), unchecked!(@_vcc_oset_in(last0#8, sll_reach(*((last0#8->next)))))))); 
        assume $non_null($phys_ptr_cast(last0#8, ^s_node)) ==> F#sll($s, $phys_ptr_cast(last0#8, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(last0#8, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(last0#8, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(last0#8, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(last0#8), ==(sll_reach(last0#8), @_vcc_oset_union(sll_reach(*((last0#8->next))), @_vcc_oset_singleton(last0#8)))); 
        assume $non_null($phys_ptr_cast(last0#8, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(last0#8, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(last0#8, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(last0#8, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_last), ==(sll_keys(tmp_last), @_vcc_intset_union(sll_keys(*((tmp_last->next))), @_vcc_intset_singleton(*((tmp_last->key)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_last, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp_last, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_last, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_last, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(tmp_last), ==(sll_list_len_next(tmp_last), unchecked+(sll_list_len_next(*((tmp_last->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#tmp_last, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp_last, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_last, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(tmp_last), ==(sll(tmp_last), &&(sll(*((tmp_last->next))), unchecked!(@_vcc_oset_in(tmp_last, sll_reach(*((tmp_last->next)))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_last, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp_last, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_last, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_last, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_last, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(tmp_last), ==(sll_reach(tmp_last), @_vcc_oset_union(sll_reach(*((tmp_last->next))), @_vcc_oset_singleton(tmp_last)))); 
        assume $non_null($phys_ptr_cast(L#tmp_last, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp_last, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_last, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_last, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_keys(last), @_vcc_intset_union(sll_keys(*((last->next))), @_vcc_intset_singleton(*((last->key)))))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#last, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#last, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_list_len_next(last), unchecked+(sll_list_len_next(*((last->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#last, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll(last), &&(sll(*((last->next))), unchecked!(@_vcc_oset_in(last, sll_reach(*((last->next)))))))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#last, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_reach(last), @_vcc_oset_union(sll_reach(*((last->next))), @_vcc_oset_singleton(last)))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#last, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll_keys(sibling), @_vcc_intset_union(sll_keys(*((sibling->next))), @_vcc_intset_singleton(*((sibling->key)))))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#sibling, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#sibling, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll_list_len_next(sibling), unchecked+(sll_list_len_next(*((sibling->next))), 1))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#sibling, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll(sibling), &&(sll(*((sibling->next))), unchecked!(@_vcc_oset_in(sibling, sll_reach(*((sibling->next)))))))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#sibling, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#sibling, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll_reach(sibling), @_vcc_oset_union(sll_reach(*((sibling->next))), @_vcc_oset_singleton(sibling)))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#sibling, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#sibling, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll_keys(local.slist), @_vcc_intset_union(sll_keys(*((local.slist->next))), @_vcc_intset_singleton(*((local.slist->key)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.slist, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll_list_len_next(local.slist), unchecked+(sll_list_len_next(*((local.slist->next))), 1))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.slist, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll(local.slist), &&(sll(*((local.slist->next))), unchecked!(@_vcc_oset_in(local.slist, sll_reach(*((local.slist->next)))))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.slist, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll_reach(local.slist), @_vcc_oset_union(sll_reach(*((local.slist->next))), @_vcc_oset_singleton(local.slist)))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.slist, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.slist, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(node), ==(sll_keys(node), @_vcc_intset_union(sll_keys(*((node->next))), @_vcc_intset_singleton(*((node->key)))))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#node, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#node, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(node), ==(sll_list_len_next(node), unchecked+(sll_list_len_next(*((node->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#node, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(node), ==(sll(node), &&(sll(*((node->next))), unchecked!(@_vcc_oset_in(node, sll_reach(*((node->next)))))))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#node, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(node), ==(sll_reach(node), @_vcc_oset_union(sll_reach(*((node->next))), @_vcc_oset_singleton(node)))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#node, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#node, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_last), ==(sll_keys(tmp_last), @_vcc_intset_union(sll_keys(*((tmp_last->next))), @_vcc_intset_singleton(*((tmp_last->key)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_last, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp_last, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_last, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_last, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(tmp_last), ==(sll_list_len_next(tmp_last), unchecked+(sll_list_len_next(*((tmp_last->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#tmp_last, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp_last, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_last, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(tmp_last), ==(sll(tmp_last), &&(sll(*((tmp_last->next))), unchecked!(@_vcc_oset_in(tmp_last, sll_reach(*((tmp_last->next)))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_last, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp_last, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_last, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_last, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_last, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(tmp_last), ==(sll_reach(tmp_last), @_vcc_oset_union(sll_reach(*((tmp_last->next))), @_vcc_oset_singleton(tmp_last)))); 
        assume $non_null($phys_ptr_cast(L#tmp_last, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp_last, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_last, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_last, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg(local.slist, sibling), &&(sll_lseg(*((local.slist->next)), sibling), unchecked!(@_vcc_oset_in(local.slist, sll_lseg_reach(*((local.slist->next)), sibling)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) && !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg_reach(local.slist, sibling), @_vcc_oset_union(sll_lseg_reach(*((local.slist->next)), sibling), @_vcc_oset_singleton(local.slist)))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), $oset_singleton($phys_ptr_cast(local.slist, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg_keys(local.slist, sibling), @_vcc_intset_union(sll_lseg_keys(*((local.slist->next)), sibling), @_vcc_intset_singleton(*((local.slist->key)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg_len_next(local.slist, sibling), unchecked+(sll_lseg_len_next(*((local.slist->next)), sibling), 1))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, last)), ==(sll_lseg(local.slist, last), &&(sll_lseg(*((local.slist->next)), last), unchecked!(@_vcc_oset_in(local.slist, sll_lseg_reach(*((local.slist->next)), last)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#last, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node)) && !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, last)), ==(sll_lseg_reach(local.slist, last), @_vcc_oset_union(sll_lseg_reach(*((local.slist->next)), last), @_vcc_oset_singleton(local.slist)))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#last, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node)), $oset_singleton($phys_ptr_cast(local.slist, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, last)), ==(sll_lseg_keys(local.slist, last), @_vcc_intset_union(sll_lseg_keys(*((local.slist->next)), last), @_vcc_intset_singleton(*((local.slist->key)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#last, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, last)), ==(sll_lseg_len_next(local.slist, last), unchecked+(sll_lseg_len_next(*((local.slist->next)), last), 1))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#last, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, last)), ==(sll_lseg(local.slist, last), &&(sll_lseg(*((local.slist->next)), last), unchecked!(@_vcc_oset_in(local.slist, sll_lseg_reach(*((local.slist->next)), last)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#last, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node)) && !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, last)), ==(sll_lseg_reach(local.slist, last), @_vcc_oset_union(sll_lseg_reach(*((local.slist->next)), last), @_vcc_oset_singleton(local.slist)))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#last, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node)), $oset_singleton($phys_ptr_cast(local.slist, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, last)), ==(sll_lseg_keys(local.slist, last), @_vcc_intset_union(sll_lseg_keys(*((local.slist->next)), last), @_vcc_intset_singleton(*((local.slist->key)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#last, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, last)), ==(sll_lseg_len_next(local.slist, last), unchecked+(sll_lseg_len_next(*((local.slist->next)), last), 1))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#last, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#last, ^s_node)), 1);
        // _math \state _dryad_S6; 
        // _dryad_S6 := @_vcc_current_state(@state); 
        SL#_dryad_S6 := $current_state($s);
        // _math \state stmtexpr8#29; 
        // stmtexpr8#29 := _dryad_S6; 
        stmtexpr8#29 := SL#_dryad_S6;
        // assert @prim_writes_check((last->next)); 
        assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#last, ^s_node), s_node.next));
        // *(last->next) := node; 
        call $write_int(s_node.next, $phys_ptr_cast(L#last, ^s_node), $ptr_to_int($phys_ptr_cast(L#node, ^s_node)));
        assume $full_stop_ext(#tok$3^55.5, $s);
        // _math \state _dryad_S7; 
        // _dryad_S7 := @_vcc_current_state(@state); 
        SL#_dryad_S7 := $current_state($s);
        // _math \state stmtexpr9#30; 
        // stmtexpr9#30 := _dryad_S7; 
        stmtexpr9#30 := SL#_dryad_S7;
        // assume ==>(unchecked!(@_vcc_oset_in(last, old(_dryad_S6, sll_reach(last0#8)))), ==(old(_dryad_S6, sll_keys(last0#8)), old(_dryad_S7, sll_keys(last0#8)))); 
        assume !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(last0#8, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(last0#8, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(last0#8, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(last, old(_dryad_S6, sll_reach(last0#8)))), ==(old(_dryad_S6, sll_list_len_next(last0#8)), old(_dryad_S7, sll_list_len_next(last0#8)))); 
        assume !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(last0#8, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(last0#8, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(last0#8, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(last, old(_dryad_S6, sll_reach(last0#8)))), ==(old(_dryad_S6, sll(last0#8)), old(_dryad_S7, sll(last0#8)))); 
        assume !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(last0#8, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(last0#8, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(last0#8, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(last, old(_dryad_S6, sll_reach(last0#8)))), ==(old(_dryad_S6, sll_reach(last0#8)), old(_dryad_S7, sll_reach(last0#8)))); 
        assume !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(last0#8, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(last0#8, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(last0#8, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(last, old(_dryad_S6, sll_reach(tmp_last)))), ==(old(_dryad_S6, sll_keys(tmp_last)), old(_dryad_S7, sll_keys(tmp_last)))); 
        assume !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp_last, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(L#tmp_last, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(L#tmp_last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(last, old(_dryad_S6, sll_reach(tmp_last)))), ==(old(_dryad_S6, sll_list_len_next(tmp_last)), old(_dryad_S7, sll_list_len_next(tmp_last)))); 
        assume !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp_last, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(L#tmp_last, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(L#tmp_last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(last, old(_dryad_S6, sll_reach(tmp_last)))), ==(old(_dryad_S6, sll(tmp_last)), old(_dryad_S7, sll(tmp_last)))); 
        assume !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp_last, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(L#tmp_last, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(L#tmp_last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(last, old(_dryad_S6, sll_reach(tmp_last)))), ==(old(_dryad_S6, sll_reach(tmp_last)), old(_dryad_S7, sll_reach(tmp_last)))); 
        assume !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp_last, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp_last, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(L#tmp_last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(last, old(_dryad_S6, sll_reach(node)))), ==(old(_dryad_S6, sll_keys(node)), old(_dryad_S7, sll_keys(node)))); 
        assume !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#node, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(L#node, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(L#node, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(last, old(_dryad_S6, sll_reach(node)))), ==(old(_dryad_S6, sll_list_len_next(node)), old(_dryad_S7, sll_list_len_next(node)))); 
        assume !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#node, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(L#node, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(L#node, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(last, old(_dryad_S6, sll_reach(node)))), ==(old(_dryad_S6, sll(node)), old(_dryad_S7, sll(node)))); 
        assume !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#node, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(L#node, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(L#node, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(last, old(_dryad_S6, sll_reach(node)))), ==(old(_dryad_S6, sll_reach(node)), old(_dryad_S7, sll_reach(node)))); 
        assume !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#node, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#node, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(L#node, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(last, old(_dryad_S6, sll_reach(sibling)))), ==(old(_dryad_S6, sll_keys(sibling)), old(_dryad_S7, sll_keys(sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(last, old(_dryad_S6, sll_reach(sibling)))), ==(old(_dryad_S6, sll_list_len_next(sibling)), old(_dryad_S7, sll_list_len_next(sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(last, old(_dryad_S6, sll_reach(sibling)))), ==(old(_dryad_S6, sll(sibling)), old(_dryad_S7, sll(sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(P#sibling, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(last, old(_dryad_S6, sll_reach(sibling)))), ==(old(_dryad_S6, sll_reach(sibling)), old(_dryad_S7, sll_reach(sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(last, old(_dryad_S6, sll_reach(local.slist)))), ==(old(_dryad_S6, sll_keys(local.slist)), old(_dryad_S7, sll_keys(local.slist)))); 
        assume !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.slist, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(local.slist, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(local.slist, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(last, old(_dryad_S6, sll_reach(local.slist)))), ==(old(_dryad_S6, sll_list_len_next(local.slist)), old(_dryad_S7, sll_list_len_next(local.slist)))); 
        assume !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.slist, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(local.slist, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(local.slist, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(last, old(_dryad_S6, sll_reach(local.slist)))), ==(old(_dryad_S6, sll(local.slist)), old(_dryad_S7, sll(local.slist)))); 
        assume !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.slist, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(local.slist, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(local.slist, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(last, old(_dryad_S6, sll_reach(local.slist)))), ==(old(_dryad_S6, sll_reach(local.slist)), old(_dryad_S7, sll_reach(local.slist)))); 
        assume !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.slist, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.slist, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(local.slist, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(last, old(_dryad_S6, sll_lseg_reach(local.slist, sibling)))), ==(old(_dryad_S6, sll_lseg(local.slist, sibling)), old(_dryad_S7, sll_lseg(local.slist, sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_lseg(SL#_dryad_S6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_lseg(SL#_dryad_S7, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(last, old(_dryad_S6, sll_lseg_reach(local.slist, sibling)))), ==(old(_dryad_S6, sll_lseg_reach(local.slist, sibling)), old(_dryad_S7, sll_lseg_reach(local.slist, sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(last, old(_dryad_S6, sll_lseg_reach(local.slist, sibling)))), ==(old(_dryad_S6, sll_lseg_keys(local.slist, sibling)), old(_dryad_S7, sll_lseg_keys(local.slist, sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S7, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(last, old(_dryad_S6, sll_lseg_reach(local.slist, sibling)))), ==(old(_dryad_S6, sll_lseg_len_next(local.slist, sibling)), old(_dryad_S7, sll_lseg_len_next(local.slist, sibling)))); 
        assume !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S7, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(last, old(_dryad_S6, sll_lseg_reach(local.slist, last)))), ==(old(_dryad_S6, sll_lseg(local.slist, last)), old(_dryad_S7, sll_lseg(local.slist, last)))); 
        assume !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_lseg(SL#_dryad_S6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == F#sll_lseg(SL#_dryad_S7, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(last, old(_dryad_S6, sll_lseg_reach(local.slist, last)))), ==(old(_dryad_S6, sll_lseg_reach(local.slist, last)), old(_dryad_S7, sll_lseg_reach(local.slist, last)))); 
        assume !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(last, old(_dryad_S6, sll_lseg_reach(local.slist, last)))), ==(old(_dryad_S6, sll_lseg_keys(local.slist, last)), old(_dryad_S7, sll_lseg_keys(local.slist, last)))); 
        assume !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S7, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(last, old(_dryad_S6, sll_lseg_reach(local.slist, last)))), ==(old(_dryad_S6, sll_lseg_len_next(local.slist, last)), old(_dryad_S7, sll_lseg_len_next(local.slist, last)))); 
        assume !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S7, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(last, old(_dryad_S6, sll_lseg_reach(local.slist, node)))), ==(old(_dryad_S6, sll_lseg(local.slist, node)), old(_dryad_S7, sll_lseg(local.slist, node)))); 
        assume !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node))) ==> F#sll_lseg(SL#_dryad_S6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == F#sll_lseg(SL#_dryad_S7, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(last, old(_dryad_S6, sll_lseg_reach(local.slist, node)))), ==(old(_dryad_S6, sll_lseg_reach(local.slist, node)), old(_dryad_S7, sll_lseg_reach(local.slist, node)))); 
        assume !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(last, old(_dryad_S6, sll_lseg_reach(local.slist, node)))), ==(old(_dryad_S6, sll_lseg_keys(local.slist, node)), old(_dryad_S7, sll_lseg_keys(local.slist, node)))); 
        assume !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S7, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(last, old(_dryad_S6, sll_lseg_reach(local.slist, node)))), ==(old(_dryad_S6, sll_lseg_len_next(local.slist, node)), old(_dryad_S7, sll_lseg_len_next(local.slist, node)))); 
        assume !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S7, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(last, old(_dryad_S6, sll_lseg_reach(local.slist, last)))), ==(old(_dryad_S6, sll_lseg(local.slist, last)), old(_dryad_S7, sll_lseg(local.slist, last)))); 
        assume !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_lseg(SL#_dryad_S6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == F#sll_lseg(SL#_dryad_S7, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(last, old(_dryad_S6, sll_lseg_reach(local.slist, last)))), ==(old(_dryad_S6, sll_lseg_reach(local.slist, last)), old(_dryad_S7, sll_lseg_reach(local.slist, last)))); 
        assume !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(last, old(_dryad_S6, sll_lseg_reach(local.slist, last)))), ==(old(_dryad_S6, sll_lseg_keys(local.slist, last)), old(_dryad_S7, sll_lseg_keys(local.slist, last)))); 
        assume !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S7, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(last, old(_dryad_S6, sll_lseg_reach(local.slist, last)))), ==(old(_dryad_S6, sll_lseg_len_next(local.slist, last)), old(_dryad_S7, sll_lseg_len_next(local.slist, last)))); 
        assume !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S6, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S7, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#last, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(last, last0#8)), ==(*((last0#8->key)), old(_dryad_S6, *((last0#8->key))))); 
        assume !($phys_ptr_cast(L#last, ^s_node) == $phys_ptr_cast(last0#8, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(last0#8, ^s_node)) == $rd_inv(SL#_dryad_S6, s_node.key, $phys_ptr_cast(last0#8, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(last, last0#8)), @_vcc_ptr_eq_pure(*((last0#8->next)), old(_dryad_S6, *((last0#8->next))))); 
        assume !($phys_ptr_cast(L#last, ^s_node) == $phys_ptr_cast(last0#8, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(last0#8, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S6, s_node.next, $phys_ptr_cast(last0#8, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(last, tmp_last)), ==(*((tmp_last->key)), old(_dryad_S6, *((tmp_last->key))))); 
        assume !($phys_ptr_cast(L#last, ^s_node) == $phys_ptr_cast(L#tmp_last, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_last, ^s_node)) == $rd_inv(SL#_dryad_S6, s_node.key, $phys_ptr_cast(L#tmp_last, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(last, tmp_last)), @_vcc_ptr_eq_pure(*((tmp_last->next)), old(_dryad_S6, *((tmp_last->next))))); 
        assume !($phys_ptr_cast(L#last, ^s_node) == $phys_ptr_cast(L#tmp_last, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_last, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S6, s_node.next, $phys_ptr_cast(L#tmp_last, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(last, node)), ==(*((node->key)), old(_dryad_S6, *((node->key))))); 
        assume !($phys_ptr_cast(L#last, ^s_node) == $phys_ptr_cast(L#node, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#node, ^s_node)) == $rd_inv(SL#_dryad_S6, s_node.key, $phys_ptr_cast(L#node, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(last, node)), @_vcc_ptr_eq_pure(*((node->next)), old(_dryad_S6, *((node->next))))); 
        assume !($phys_ptr_cast(L#last, ^s_node) == $phys_ptr_cast(L#node, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S6, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(last, sibling)), ==(*((sibling->key)), old(_dryad_S6, *((sibling->key))))); 
        assume !($phys_ptr_cast(L#last, ^s_node) == $phys_ptr_cast(P#sibling, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#sibling, ^s_node)) == $rd_inv(SL#_dryad_S6, s_node.key, $phys_ptr_cast(P#sibling, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(last, sibling)), @_vcc_ptr_eq_pure(*((sibling->next)), old(_dryad_S6, *((sibling->next))))); 
        assume !($phys_ptr_cast(L#last, ^s_node) == $phys_ptr_cast(P#sibling, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S6, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(last, local.slist)), ==(*((local.slist->key)), old(_dryad_S6, *((local.slist->key))))); 
        assume !($phys_ptr_cast(L#last, ^s_node) == $phys_ptr_cast(local.slist, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node)) == $rd_inv(SL#_dryad_S6, s_node.key, $phys_ptr_cast(local.slist, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(last, local.slist)), @_vcc_ptr_eq_pure(*((local.slist->next)), old(_dryad_S6, *((local.slist->next))))); 
        assume !($phys_ptr_cast(L#last, ^s_node) == $phys_ptr_cast(local.slist, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S6, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node);
        // assume ==>(@_vcc_ptr_neq_null(last0#8), ==(sll_keys(last0#8), @_vcc_intset_union(sll_keys(*((last0#8->next))), @_vcc_intset_singleton(*((last0#8->key)))))); 
        assume $non_null($phys_ptr_cast(last0#8, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(last0#8, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(last0#8, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(last0#8, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(last0#8), ==(sll_list_len_next(last0#8), unchecked+(sll_list_len_next(*((last0#8->next))), 1))); 
        assume $non_null($phys_ptr_cast(last0#8, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(last0#8, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(last0#8, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(last0#8), ==(sll(last0#8), &&(sll(*((last0#8->next))), unchecked!(@_vcc_oset_in(last0#8, sll_reach(*((last0#8->next)))))))); 
        assume $non_null($phys_ptr_cast(last0#8, ^s_node)) ==> F#sll($s, $phys_ptr_cast(last0#8, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(last0#8, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(last0#8, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(last0#8, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(last0#8), ==(sll_reach(last0#8), @_vcc_oset_union(sll_reach(*((last0#8->next))), @_vcc_oset_singleton(last0#8)))); 
        assume $non_null($phys_ptr_cast(last0#8, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(last0#8, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(last0#8, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(last0#8, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(tmp_last), ==(sll_keys(tmp_last), @_vcc_intset_union(sll_keys(*((tmp_last->next))), @_vcc_intset_singleton(*((tmp_last->key)))))); 
        assume $non_null($phys_ptr_cast(L#tmp_last, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp_last, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_last, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp_last, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(tmp_last), ==(sll_list_len_next(tmp_last), unchecked+(sll_list_len_next(*((tmp_last->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#tmp_last, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp_last, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_last, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(tmp_last), ==(sll(tmp_last), &&(sll(*((tmp_last->next))), unchecked!(@_vcc_oset_in(tmp_last, sll_reach(*((tmp_last->next)))))))); 
        assume $non_null($phys_ptr_cast(L#tmp_last, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp_last, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_last, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp_last, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_last, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(tmp_last), ==(sll_reach(tmp_last), @_vcc_oset_union(sll_reach(*((tmp_last->next))), @_vcc_oset_singleton(tmp_last)))); 
        assume $non_null($phys_ptr_cast(L#tmp_last, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp_last, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp_last, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp_last, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(node), ==(sll_keys(node), @_vcc_intset_union(sll_keys(*((node->next))), @_vcc_intset_singleton(*((node->key)))))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#node, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#node, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(node), ==(sll_list_len_next(node), unchecked+(sll_list_len_next(*((node->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#node, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(node), ==(sll(node), &&(sll(*((node->next))), unchecked!(@_vcc_oset_in(node, sll_reach(*((node->next)))))))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#node, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(node), ==(sll_reach(node), @_vcc_oset_union(sll_reach(*((node->next))), @_vcc_oset_singleton(node)))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#node, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#node, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll_keys(sibling), @_vcc_intset_union(sll_keys(*((sibling->next))), @_vcc_intset_singleton(*((sibling->key)))))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#sibling, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#sibling, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll_list_len_next(sibling), unchecked+(sll_list_len_next(*((sibling->next))), 1))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#sibling, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll(sibling), &&(sll(*((sibling->next))), unchecked!(@_vcc_oset_in(sibling, sll_reach(*((sibling->next)))))))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#sibling, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#sibling, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(sibling), ==(sll_reach(sibling), @_vcc_oset_union(sll_reach(*((sibling->next))), @_vcc_oset_singleton(sibling)))); 
        assume $non_null($phys_ptr_cast(P#sibling, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#sibling, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#sibling, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#sibling, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll_keys(local.slist), @_vcc_intset_union(sll_keys(*((local.slist->next))), @_vcc_intset_singleton(*((local.slist->key)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.slist, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll_list_len_next(local.slist), unchecked+(sll_list_len_next(*((local.slist->next))), 1))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.slist, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll(local.slist), &&(sll(*((local.slist->next))), unchecked!(@_vcc_oset_in(local.slist, sll_reach(*((local.slist->next)))))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.slist, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.slist), ==(sll_reach(local.slist), @_vcc_oset_union(sll_reach(*((local.slist->next))), @_vcc_oset_singleton(local.slist)))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.slist, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.slist, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_keys(last), @_vcc_intset_union(sll_keys(*((last->next))), @_vcc_intset_singleton(*((last->key)))))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#last, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#last, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_list_len_next(last), unchecked+(sll_list_len_next(*((last->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#last, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll(last), &&(sll(*((last->next))), unchecked!(@_vcc_oset_in(last, sll_reach(*((last->next)))))))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#last, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(last), ==(sll_reach(last), @_vcc_oset_union(sll_reach(*((last->next))), @_vcc_oset_singleton(last)))); 
        assume $non_null($phys_ptr_cast(L#last, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#last, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(node), ==(sll_keys(node), @_vcc_intset_union(sll_keys(*((node->next))), @_vcc_intset_singleton(*((node->key)))))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#node, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#node, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(node), ==(sll_list_len_next(node), unchecked+(sll_list_len_next(*((node->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#node, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)), 1);
        // assume ==>(@_vcc_ptr_neq_null(node), ==(sll(node), &&(sll(*((node->next))), unchecked!(@_vcc_oset_in(node, sll_reach(*((node->next)))))))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#node, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#node, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(node), ==(sll_reach(node), @_vcc_oset_union(sll_reach(*((node->next))), @_vcc_oset_singleton(node)))); 
        assume $non_null($phys_ptr_cast(L#node, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#node, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#node, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#node, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg(local.slist, sibling), &&(sll_lseg(*((local.slist->next)), sibling), unchecked!(@_vcc_oset_in(local.slist, sll_lseg_reach(*((local.slist->next)), sibling)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) && !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg_reach(local.slist, sibling), @_vcc_oset_union(sll_lseg_reach(*((local.slist->next)), sibling), @_vcc_oset_singleton(local.slist)))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), $oset_singleton($phys_ptr_cast(local.slist, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg_keys(local.slist, sibling), @_vcc_intset_union(sll_lseg_keys(*((local.slist->next)), sibling), @_vcc_intset_singleton(*((local.slist->key)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, sibling)), ==(sll_lseg_len_next(local.slist, sibling), unchecked+(sll_lseg_len_next(*((local.slist->next)), sibling), 1))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(P#sibling, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(P#sibling, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(P#sibling, ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, node)), ==(sll_lseg(local.slist, node), &&(sll_lseg(*((local.slist->next)), node), unchecked!(@_vcc_oset_in(local.slist, sll_lseg_reach(*((local.slist->next)), node)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#node, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#node, ^s_node)) && !$oset_in($phys_ptr_cast(local.slist, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#node, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, node)), ==(sll_lseg_reach(local.slist, node), @_vcc_oset_union(sll_lseg_reach(*((local.slist->next)), node), @_vcc_oset_singleton(local.slist)))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#node, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#node, ^s_node)), $oset_singleton($phys_ptr_cast(local.slist, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, node)), ==(sll_lseg_keys(local.slist, node), @_vcc_intset_union(sll_lseg_keys(*((local.slist->next)), node), @_vcc_intset_singleton(*((local.slist->key)))))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#node, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#node, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.slist, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.slist), @_vcc_ptr_neq_pure(local.slist, node)), ==(sll_lseg_len_next(local.slist, node), unchecked+(sll_lseg_len_next(*((local.slist->next)), node), 1))); 
        assume $non_null($phys_ptr_cast(local.slist, ^s_node)) && $phys_ptr_cast(local.slist, ^s_node) != $phys_ptr_cast(L#node, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(local.slist, ^s_node), $phys_ptr_cast(L#node, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.slist, ^s_node), ^s_node), $phys_ptr_cast(L#node, ^s_node)), 1);
        // return local.slist; 
        $result := $phys_ptr_cast(local.slist, ^s_node);
        assume true;
        assert $position_marker();
        goto #exit;
    }

  anon11:
    // skip

  #exit:
}



const unique l#public: $label;

const unique #tok$3^55.5: $token;

const unique #tok$3^54.5: $token;

const unique #tok$3^53.5: $token;

const unique #tok$3^50.12: $token;

const unique #tok$3^47.5: $token;

const unique #tok$3^46.5: $token;

const unique #tok$3^44.12: $token;

const unique #tok$3^30.3: $token;

const unique #tok$3^20.5: $token;

const unique #tok$3^18.5: $token;

const unique #tok$3^15.13: $token;

const unique #tok$4^0.0: $token;

const unique #file^?3Cno?20file?3E: $token;

axiom $file_name_is(4, #file^?3Cno?20file?3E);

const unique #tok$3^3.3: $token;

const unique #file^Z?3A?5CInvariantSynthesis?5CVCDryad?5Cvcc?5CHost?5Cbin?5CTests?5Cgslist?5Cg_slist_insert_before.c: $token;

axiom $file_name_is(3, #file^Z?3A?5CInvariantSynthesis?5CVCDryad?5Cvcc?5CHost?5Cbin?5CTests?5Cgslist?5Cg_slist_insert_before.c);

const unique #file^z?3A?5Cinvariantsynthesis?5Cvcdryad?5Cvcc?5Chost?5Cbin?5Ctests?5Cgslist?5Cdryad_gslist_sll.h: $token;

axiom $file_name_is(2, #file^z?3A?5Cinvariantsynthesis?5Cvcdryad?5Cvcc?5Chost?5Cbin?5Ctests?5Cgslist?5Cdryad_gslist_sll.h);

const unique #file^Z?3A?5CInvariantSynthesis?5CVCDryad?2Dbin?5CHeaders?5Cvccp.h: $token;

axiom $file_name_is(1, #file^Z?3A?5CInvariantSynthesis?5CVCDryad?2Dbin?5CHeaders?5Cvccp.h);

const unique #distTp1: $ctype;

axiom #distTp1 == $ptr_to(^s_node);

