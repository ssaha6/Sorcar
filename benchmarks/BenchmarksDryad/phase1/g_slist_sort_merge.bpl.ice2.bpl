
function {:existential true} my_inv (
b0000 : bool,
b0001 : bool,
b0002 : bool,
b0003 : bool,
b0004 : bool,
b0005 : bool,
b0006 : bool,
b0007 : bool,
b0008 : bool,
b0009 : bool,
b0010 : bool,
b0011 : bool,
b0012 : bool,
b0013 : bool,
b0014 : bool,
b0015 : bool,
b0016 : bool,
b0017 : bool,
b0018 : bool,
b0019 : bool,
b0020 : bool,
b0021 : bool,
b0022 : bool,
b0023 : bool,
b0024 : bool,
b0025 : bool,
b0026 : bool,
b0027 : bool,
b0028 : bool,
b0029 : bool,
b0030 : bool,
b0031 : bool,
b0032 : bool,
b0033 : bool,
b0034 : bool,
b0035 : bool,
b0036 : bool,
b0037 : bool,
b0038 : bool,
b0039 : bool,
b0040 : bool,
b0041 : bool,
b0042 : bool,
b0043 : bool,
b0044 : bool,
b0045 : bool,
b0046 : bool,
b0047 : bool,
b0048 : bool,
b0049 : bool,
b0050 : bool,
b0051 : bool,
b0052 : bool,
b0053 : bool,
b0054 : bool,
b0055 : bool,
b0056 : bool,
b0057 : bool,
b0058 : bool,
b0059 : bool,
b0060 : bool,
b0061 : bool,
b0062 : bool,
b0063 : bool,
b0064 : bool,
b0065 : bool,
b0066 : bool,
b0067 : bool,
b0068 : bool,
b0069 : bool,
b0070 : bool,
b0071 : bool,
b0072 : bool,
b0073 : bool,
b0074 : bool,
b0075 : bool,
b0076 : bool,
b0077 : bool,
b0078 : bool,
b0079 : bool,
b0080 : bool,
b0081 : bool,
b0082 : bool,
b0083 : bool,
b0084 : bool,
b0085 : bool,
b0086 : bool,
b0087 : bool,
b0088 : bool,
b0089 : bool,
b0090 : bool,
b0091 : bool,
b0092 : bool,
b0093 : bool,
b0094 : bool,
b0095 : bool,
b0096 : bool,
b0097 : bool,
b0098 : bool,
b0099 : bool,
b0100 : bool,
b0101 : bool,
b0102 : bool,
b0103 : bool,
b0104 : bool,
b0105 : bool,
b0106 : bool,
b0107 : bool,
b0108 : bool,
b0109 : bool,
b0110 : bool,
b0111 : bool,
b0112 : bool,
b0113 : bool,
b0114 : bool,
b0115 : bool,
b0116 : bool,
b0117 : bool,
b0118 : bool,
b0119 : bool,
b0120 : bool,
b0121 : bool,
b0122 : bool,
b0123 : bool,
b0124 : bool,
b0125 : bool,
b0126 : bool,
b0127 : bool,
b0128 : bool,
b0129 : bool,
b0130 : bool,
b0131 : bool,
b0132 : bool,
b0133 : bool,
b0134 : bool,
b0135 : bool,
b0136 : bool,
b0137 : bool,
b0138 : bool,
b0139 : bool,
b0140 : bool,
b0141 : bool,
b0142 : bool,
b0143 : bool,
b0144 : bool,
b0145 : bool,
b0146 : bool,
b0147 : bool,
b0148 : bool,
b0149 : bool,
b0150 : bool,
b0151 : bool,
b0152 : bool,
b0153 : bool,
b0154 : bool,
b0155 : bool,
b0156 : bool,
b0157 : bool,
b0158 : bool,
b0159 : bool,
b0160 : bool,
b0161 : bool,
b0162 : bool,
b0163 : bool,
b0164 : bool,
b0165 : bool,
b0166 : bool,
b0167 : bool,
b0168 : bool,
b0169 : bool,
b0170 : bool,
b0171 : bool,
b0172 : bool,
b0173 : bool,
b0174 : bool,
b0175 : bool,
b0176 : bool,
b0177 : bool,
b0178 : bool,
b0179 : bool,
b0180 : bool,
b0181 : bool,
b0182 : bool,
b0183 : bool,
b0184 : bool,
b0185 : bool,
b0186 : bool,
b0187 : bool,
b0188 : bool,
b0189 : bool,
b0190 : bool,
b0191 : bool,
b0192 : bool,
b0193 : bool,
b0194 : bool,
b0195 : bool,
b0196 : bool,
b0197 : bool,
b0198 : bool,
b0199 : bool,
b0200 : bool,
b0201 : bool,
b0202 : bool,
b0203 : bool,
b0204 : bool,
b0205 : bool,
b0206 : bool,
b0207 : bool,
b0208 : bool,
b0209 : bool,
b0210 : bool,
b0211 : bool,
b0212 : bool,
b0213 : bool,
b0214 : bool,
b0215 : bool,
b0216 : bool,
b0217 : bool,
b0218 : bool,
b0219 : bool,
b0220 : bool,
b0221 : bool,
b0222 : bool,
b0223 : bool,
b0224 : bool,
b0225 : bool,
b0226 : bool,
b0227 : bool,
b0228 : bool,
b0229 : bool,
b0230 : bool,
b0231 : bool,
b0232 : bool,
b0233 : bool,
b0234 : bool,
b0235 : bool,
b0236 : bool,
b0237 : bool,
b0238 : bool,
b0239 : bool,
b0240 : bool,
b0241 : bool,
b0242 : bool,
b0243 : bool,
b0244 : bool,
b0245 : bool,
b0246 : bool,
b0247 : bool,
b0248 : bool,
b0249 : bool,
b0250 : bool,
b0251 : bool,
b0252 : bool,
b0253 : bool,
b0254 : bool,
b0255 : bool,
b0256 : bool,
b0257 : bool,
b0258 : bool,
b0259 : bool,
b0260 : bool,
b0261 : bool,
b0262 : bool,
b0263 : bool,
b0264 : bool,
b0265 : bool,
b0266 : bool,
b0267 : bool,
b0268 : bool,
b0269 : bool,
b0270 : bool,
b0271 : bool,
b0272 : bool,
b0273 : bool,
b0274 : bool,
b0275 : bool,
b0276 : bool,
b0277 : bool,
b0278 : bool,
b0279 : bool,
b0280 : bool,
b0281 : bool,
b0282 : bool,
b0283 : bool,
b0284 : bool,
b0285 : bool,
b0286 : bool,
b0287 : bool,
b0288 : bool,
b0289 : bool,
b0290 : bool,
b0291 : bool,
b0292 : bool,
b0293 : bool,
b0294 : bool,
b0295 : bool,
b0296 : bool,
b0297 : bool,
b0298 : bool,
b0299 : bool,
b0300 : bool,
b0301 : bool,
b0302 : bool,
b0303 : bool,
b0304 : bool,
b0305 : bool,
b0306 : bool,
b0307 : bool,
b0308 : bool,
b0309 : bool,
b0310 : bool,
b0311 : bool,
b0312 : bool,
b0313 : bool,
b0314 : bool,
b0315 : bool,
b0316 : bool,
b0317 : bool,
b0318 : bool,
b0319 : bool,
b0320 : bool,
b0321 : bool,
b0322 : bool,
b0323 : bool,
b0324 : bool,
b0325 : bool,
b0326 : bool,
b0327 : bool,
b0328 : bool,
b0329 : bool,
b0330 : bool,
b0331 : bool,
b0332 : bool,
b0333 : bool,
b0334 : bool,
b0335 : bool,
b0336 : bool,
b0337 : bool,
b0338 : bool,
b0339 : bool,
b0340 : bool,
b0341 : bool,
b0342 : bool,
b0343 : bool,
b0344 : bool,
b0345 : bool,
b0346 : bool,
b0347 : bool,
b0348 : bool,
b0349 : bool,
b0350 : bool,
b0351 : bool,
b0352 : bool,
b0353 : bool,
b0354 : bool,
b0355 : bool,
b0356 : bool,
b0357 : bool,
b0358 : bool,
b0359 : bool,
b0360 : bool,
b0361 : bool,
b0362 : bool,
b0363 : bool,
b0364 : bool,
b0365 : bool,
b0366 : bool,
b0367 : bool,
b0368 : bool,
b0369 : bool,
b0370 : bool,
b0371 : bool,
b0372 : bool,
b0373 : bool,
b0374 : bool,
b0375 : bool,
b0376 : bool,
b0377 : bool,
b0378 : bool,
b0379 : bool,
b0380 : bool,
b0381 : bool,
b0382 : bool,
b0383 : bool,
b0384 : bool,
b0385 : bool,
b0386 : bool,
b0387 : bool,
b0388 : bool,
b0389 : bool,
b0390 : bool,
b0391 : bool,
b0392 : bool,
b0393 : bool,
b0394 : bool,
b0395 : bool,
b0396 : bool,
b0397 : bool,
b0398 : bool,
b0399 : bool,
b0400 : bool,
b0401 : bool,
b0402 : bool,
b0403 : bool,
b0404 : bool,
b0405 : bool,
b0406 : bool,
b0407 : bool,
b0408 : bool,
b0409 : bool,
b0410 : bool,
b0411 : bool,
b0412 : bool,
b0413 : bool,
b0414 : bool,
b0415 : bool,
b0416 : bool,
b0417 : bool,
b0418 : bool,
b0419 : bool,
b0420 : bool,
b0421 : bool,
b0422 : bool,
b0423 : bool,
b0424 : bool,
b0425 : bool,
b0426 : bool,
b0427 : bool,
b0428 : bool,
b0429 : bool,
b0430 : bool,
b0431 : bool,
b0432 : bool,
b0433 : bool,
b0434 : bool,
b0435 : bool,
b0436 : bool,
b0437 : bool,
b0438 : bool,
b0439 : bool,
b0440 : bool,
b0441 : bool,
b0442 : bool,
b0443 : bool,
b0444 : bool,
b0445 : bool,
b0446 : bool,
b0447 : bool,
b0448 : bool,
b0449 : bool,
b0450 : bool,
b0451 : bool,
b0452 : bool,
b0453 : bool,
b0454 : bool,
b0455 : bool,
b0456 : bool,
b0457 : bool,
b0458 : bool,
b0459 : bool,
b0460 : bool,
b0461 : bool,
b0462 : bool,
b0463 : bool,
b0464 : bool,
b0465 : bool,
b0466 : bool,
b0467 : bool,
b0468 : bool,
b0469 : bool,
b0470 : bool,
b0471 : bool,
b0472 : bool,
b0473 : bool,
b0474 : bool,
b0475 : bool,
b0476 : bool,
b0477 : bool,
b0478 : bool,
b0479 : bool,
b0480 : bool,
b0481 : bool,
b0482 : bool,
b0483 : bool,
b0484 : bool,
b0485 : bool,
b0486 : bool,
b0487 : bool,
b0488 : bool,
b0489 : bool,
b0490 : bool,
b0491 : bool,
b0492 : bool,
b0493 : bool,
b0494 : bool,
b0495 : bool,
b0496 : bool,
b0497 : bool,
b0498 : bool,
b0499 : bool,
b0500 : bool,
b0501 : bool,
b0502 : bool,
b0503 : bool,
b0504 : bool,
b0505 : bool,
b0506 : bool,
b0507 : bool,
b0508 : bool,
b0509 : bool,
b0510 : bool,
b0511 : bool,
b0512 : bool,
b0513 : bool,
b0514 : bool,
b0515 : bool,
b0516 : bool,
b0517 : bool,
b0518 : bool,
b0519 : bool,
b0520 : bool,
b0521 : bool,
b0522 : bool,
b0523 : bool,
b0524 : bool,
b0525 : bool,
b0526 : bool,
b0527 : bool,
b0528 : bool,
b0529 : bool,
b0530 : bool,
b0531 : bool,
b0532 : bool,
b0533 : bool,
b0534 : bool,
b0535 : bool,
b0536 : bool,
b0537 : bool,
b0538 : bool,
b0539 : bool,
b0540 : bool,
b0541 : bool,
b0542 : bool,
b0543 : bool,
b0544 : bool,
b0545 : bool,
b0546 : bool,
b0547 : bool,
b0548 : bool,
b0549 : bool,
b0550 : bool,
b0551 : bool,
b0552 : bool,
b0553 : bool,
b0554 : bool,
b0555 : bool,
b0556 : bool,
b0557 : bool,
b0558 : bool,
b0559 : bool,
b0560 : bool,
b0561 : bool,
b0562 : bool,
b0563 : bool,
b0564 : bool,
b0565 : bool,
b0566 : bool,
b0567 : bool,
b0568 : bool,
b0569 : bool,
b0570 : bool,
b0571 : bool,
b0572 : bool,
b0573 : bool,
b0574 : bool,
b0575 : bool,
b0576 : bool,
b0577 : bool,
b0578 : bool,
b0579 : bool,
b0580 : bool,
b0581 : bool,
b0582 : bool,
b0583 : bool,
b0584 : bool,
b0585 : bool,
b0586 : bool,
b0587 : bool,
b0588 : bool,
b0589 : bool,
b0590 : bool,
b0591 : bool,
b0592 : bool,
b0593 : bool,
b0594 : bool,
b0595 : bool,
b0596 : bool,
b0597 : bool,
b0598 : bool,
b0599 : bool,
b0600 : bool,
b0601 : bool,
b0602 : bool,
b0603 : bool,
b0604 : bool,
b0605 : bool,
b0606 : bool,
b0607 : bool,
b0608 : bool,
b0609 : bool,
b0610 : bool,
b0611 : bool,
b0612 : bool,
b0613 : bool,
b0614 : bool,
b0615 : bool,
b0616 : bool,
b0617 : bool,
b0618 : bool,
b0619 : bool,
b0620 : bool,
b0621 : bool,
b0622 : bool,
b0623 : bool,
b0624 : bool,
b0625 : bool,
b0626 : bool,
b0627 : bool,
b0628 : bool,
b0629 : bool,
b0630 : bool,
b0631 : bool,
b0632 : bool,
b0633 : bool,
b0634 : bool,
b0635 : bool,
b0636 : bool,
b0637 : bool,
b0638 : bool,
b0639 : bool,
b0640 : bool,
b0641 : bool,
b0642 : bool,
b0643 : bool,
b0644 : bool,
b0645 : bool,
b0646 : bool,
b0647 : bool,
b0648 : bool,
b0649 : bool,
b0650 : bool,
b0651 : bool,
b0652 : bool,
b0653 : bool,
b0654 : bool,
b0655 : bool,
b0656 : bool,
b0657 : bool,
b0658 : bool,
b0659 : bool,
b0660 : bool,
b0661 : bool,
b0662 : bool,
b0663 : bool,
b0664 : bool,
b0665 : bool,
b0666 : bool,
b0667 : bool,
b0668 : bool,
b0669 : bool,
b0670 : bool,
b0671 : bool,
b0672 : bool,
b0673 : bool,
b0674 : bool,
b0675 : bool,
b0676 : bool,
b0677 : bool,
b0678 : bool,
b0679 : bool,
b0680 : bool,
b0681 : bool,
b0682 : bool,
b0683 : bool,
b0684 : bool,
b0685 : bool,
b0686 : bool,
b0687 : bool,
b0688 : bool,
b0689 : bool,
b0690 : bool,
b0691 : bool,
b0692 : bool,
b0693 : bool,
b0694 : bool,
b0695 : bool,
b0696 : bool,
b0697 : bool,
b0698 : bool,
b0699 : bool,
b0700 : bool,
b0701 : bool,
b0702 : bool,
b0703 : bool,
b0704 : bool,
b0705 : bool,
b0706 : bool,
b0707 : bool,
b0708 : bool,
b0709 : bool,
b0710 : bool,
b0711 : bool,
b0712 : bool,
b0713 : bool,
b0714 : bool,
b0715 : bool,
b0716 : bool,
b0717 : bool,
b0718 : bool,
b0719 : bool,
b0720 : bool,
b0721 : bool,
b0722 : bool,
b0723 : bool,
b0724 : bool,
b0725 : bool,
b0726 : bool,
b0727 : bool,
b0728 : bool,
b0729 : bool,
b0730 : bool,
b0731 : bool,
b0732 : bool,
b0733 : bool,
b0734 : bool,
b0735 : bool,
b0736 : bool,
b0737 : bool,
b0738 : bool,
b0739 : bool,
b0740 : bool,
b0741 : bool,
b0742 : bool,
b0743 : bool,
b0744 : bool,
b0745 : bool,
b0746 : bool,
b0747 : bool,
b0748 : bool,
b0749 : bool,
b0750 : bool,
b0751 : bool,
b0752 : bool,
b0753 : bool,
b0754 : bool,
b0755 : bool,
b0756 : bool,
b0757 : bool,
b0758 : bool,
b0759 : bool,
b0760 : bool,
b0761 : bool,
b0762 : bool,
b0763 : bool,
b0764 : bool,
b0765 : bool,
b0766 : bool,
b0767 : bool,
b0768 : bool,
b0769 : bool,
b0770 : bool,
b0771 : bool,
b0772 : bool,
b0773 : bool,
b0774 : bool,
b0775 : bool,
b0776 : bool,
b0777 : bool,
b0778 : bool,
b0779 : bool,
b0780 : bool,
b0781 : bool,
b0782 : bool,
b0783 : bool,
b0784 : bool,
b0785 : bool,
b0786 : bool,
b0787 : bool,
b0788 : bool,
b0789 : bool,
b0790 : bool,
b0791 : bool,
b0792 : bool,
b0793 : bool,
b0794 : bool,
b0795 : bool,
b0796 : bool,
b0797 : bool,
b0798 : bool,
b0799 : bool,
b0800 : bool,
b0801 : bool,
b0802 : bool,
b0803 : bool,
b0804 : bool,
b0805 : bool,
b0806 : bool,
b0807 : bool,
b0808 : bool,
b0809 : bool,
b0810 : bool,
b0811 : bool,
b0812 : bool,
b0813 : bool,
b0814 : bool,
b0815 : bool,
b0816 : bool,
b0817 : bool,
b0818 : bool,
b0819 : bool,
b0820 : bool,
b0821 : bool,
b0822 : bool,
b0823 : bool,
b0824 : bool,
b0825 : bool,
b0826 : bool,
b0827 : bool,
b0828 : bool,
b0829 : bool,
b0830 : bool,
b0831 : bool,
b0832 : bool,
b0833 : bool,
b0834 : bool,
b0835 : bool,
b0836 : bool,
b0837 : bool,
b0838 : bool,
b0839 : bool,
b0840 : bool,
b0841 : bool,
b0842 : bool,
b0843 : bool,
b0844 : bool,
b0845 : bool,
b0846 : bool,
b0847 : bool,
b0848 : bool,
b0849 : bool,
b0850 : bool,
b0851 : bool,
b0852 : bool,
b0853 : bool,
b0854 : bool,
b0855 : bool,
b0856 : bool,
b0857 : bool,
b0858 : bool,
b0859 : bool,
b0860 : bool,
b0861 : bool,
b0862 : bool,
b0863 : bool,
b0864 : bool,
b0865 : bool,
b0866 : bool,
b0867 : bool,
b0868 : bool,
b0869 : bool,
b0870 : bool,
b0871 : bool,
b0872 : bool,
b0873 : bool,
b0874 : bool,
b0875 : bool,
b0876 : bool,
b0877 : bool,
b0878 : bool,
b0879 : bool,
b0880 : bool,
b0881 : bool,
b0882 : bool,
b0883 : bool,
b0884 : bool,
b0885 : bool,
b0886 : bool,
b0887 : bool,
b0888 : bool,
b0889 : bool,
b0890 : bool,
b0891 : bool,
b0892 : bool,
b0893 : bool,
b0894 : bool,
b0895 : bool,
b0896 : bool,
b0897 : bool,
b0898 : bool,
b0899 : bool,
b0900 : bool,
b0901 : bool,
b0902 : bool,
b0903 : bool,
b0904 : bool,
b0905 : bool,
b0906 : bool,
b0907 : bool,
b0908 : bool,
b0909 : bool,
b0910 : bool,
b0911 : bool,
b0912 : bool,
b0913 : bool,
b0914 : bool,
b0915 : bool,
b0916 : bool,
b0917 : bool,
b0918 : bool,
b0919 : bool,
b0920 : bool,
b0921 : bool,
b0922 : bool,
b0923 : bool,
b0924 : bool,
b0925 : bool,
b0926 : bool,
b0927 : bool,
b0928 : bool,
b0929 : bool,
b0930 : bool,
b0931 : bool,
b0932 : bool,
b0933 : bool,
b0934 : bool,
b0935 : bool,
b0936 : bool,
b0937 : bool,
b0938 : bool,
b0939 : bool,
b0940 : bool,
b0941 : bool,
b0942 : bool,
b0943 : bool,
b0944 : bool,
b0945 : bool,
b0946 : bool,
b0947 : bool,
b0948 : bool,
b0949 : bool,
b0950 : bool,
b0951 : bool,
b0952 : bool,
b0953 : bool,
b0954 : bool,
b0955 : bool,
b0956 : bool,
b0957 : bool,
b0958 : bool,
b0959 : bool,
b0960 : bool,
b0961 : bool,
b0962 : bool,
b0963 : bool,
b0964 : bool,
b0965 : bool,
b0966 : bool,
b0967 : bool,
b0968 : bool,
b0969 : bool,
b0970 : bool,
b0971 : bool,
b0972 : bool,
b0973 : bool,
b0974 : bool,
b0975 : bool,
b0976 : bool,
b0977 : bool,
b0978 : bool,
b0979 : bool,
b0980 : bool,
b0981 : bool,
b0982 : bool,
b0983 : bool,
b0984 : bool,
b0985 : bool,
b0986 : bool,
b0987 : bool,
b0988 : bool,
b0989 : bool,
b0990 : bool,
b0991 : bool,
b0992 : bool,
b0993 : bool,
b0994 : bool,
b0995 : bool,
b0996 : bool,
b0997 : bool,
b0998 : bool,
b0999 : bool,
b1000 : bool,
b1001 : bool,
b1002 : bool,
b1003 : bool,
b1004 : bool,
b1005 : bool,
b1006 : bool,
b1007 : bool,
b1008 : bool,
b1009 : bool,
b1010 : bool,
b1011 : bool,
b1012 : bool,
b1013 : bool,
b1014 : bool,
b1015 : bool,
b1016 : bool,
b1017 : bool,
b1018 : bool,
b1019 : bool,
b1020 : bool,
b1021 : bool,
b1022 : bool,
b1023 : bool,
b1024 : bool,
b1025 : bool,
b1026 : bool,
b1027 : bool,
b1028 : bool,
b1029 : bool,
b1030 : bool,
b1031 : bool,
b1032 : bool,
b1033 : bool,
b1034 : bool,
b1035 : bool,
b1036 : bool,
b1037 : bool,
b1038 : bool,
b1039 : bool,
b1040 : bool,
b1041 : bool,
b1042 : bool,
b1043 : bool,
b1044 : bool,
b1045 : bool,
b1046 : bool,
b1047 : bool,
b1048 : bool,
b1049 : bool,
b1050 : bool,
b1051 : bool,
b1052 : bool,
b1053 : bool,
b1054 : bool,
b1055 : bool,
b1056 : bool,
b1057 : bool,
b1058 : bool,
b1059 : bool,
b1060 : bool,
b1061 : bool,
b1062 : bool,
b1063 : bool,
b1064 : bool,
b1065 : bool,
b1066 : bool,
b1067 : bool,
b1068 : bool,
b1069 : bool,
b1070 : bool,
b1071 : bool,
b1072 : bool,
b1073 : bool,
b1074 : bool,
b1075 : bool,
b1076 : bool,
b1077 : bool,
b1078 : bool,
b1079 : bool,
b1080 : bool,
b1081 : bool,
b1082 : bool,
b1083 : bool,
b1084 : bool,
b1085 : bool,
b1086 : bool,
b1087 : bool,
b1088 : bool,
b1089 : bool,
b1090 : bool,
b1091 : bool,
b1092 : bool,
b1093 : bool,
b1094 : bool,
b1095 : bool,
b1096 : bool,
b1097 : bool,
b1098 : bool,
b1099 : bool,
b1100 : bool,
b1101 : bool,
b1102 : bool,
b1103 : bool,
b1104 : bool,
b1105 : bool,
b1106 : bool,
b1107 : bool,
b1108 : bool,
b1109 : bool,
b1110 : bool,
b1111 : bool,
b1112 : bool,
b1113 : bool,
b1114 : bool,
b1115 : bool,
b1116 : bool,
b1117 : bool,
b1118 : bool,
b1119 : bool,
b1120 : bool,
b1121 : bool,
b1122 : bool,
b1123 : bool,
b1124 : bool,
b1125 : bool,
b1126 : bool,
b1127 : bool
) : bool;

axiom $arch_ptr_size == 8;

axiom $arch_spec_ptr_start == $max.u8;

const unique ^$##thread_id: $ctype;

axiom $def_math_type(^$##thread_id);

type $##thread_id;

const unique ^$##club: $ctype;

axiom $def_math_type(^$##club);

type $##club;

const unique ^s_node: $ctype;

axiom $is_span_sequential(^s_node);

axiom $def_struct_type(^s_node, 16, false, false);

axiom (forall #s1: $state, #s2: $state, #p: $ptr :: { $inv2(#s1, #s2, #p, ^s_node) } $inv2(#s1, #s2, #p, ^s_node) == $set_eq($owns(#s2, #p), $set_empty()));

axiom (forall #s1: $state, #s2: $state, #p: $ptr :: { $inv2_without_lemmas(#s1, #s2, #p, ^s_node) } $inv2_without_lemmas(#s1, #s2, #p, ^s_node) == $set_eq($owns(#s2, #p), $set_empty()));

axiom (forall p: $ptr, q: $ptr, s: $state :: { $in(q, $composite_extent(s, p, ^s_node)) } $in(q, $composite_extent(s, p, ^s_node)) == (q == p));

const unique s_node.key: $field;

axiom $def_phys_field(^s_node, s_node.key, ^^i4, false, 0);

const unique s_node.next: $field;

axiom $def_phys_field(^s_node, s_node.next, $ptr_to(^s_node), false, 8);

function F#glob_reach() : $oset;

const unique cf#glob_reach: $pure_function;

axiom $function_arg_type(cf#glob_reach, 0, ^$#oset);

procedure glob_reach() returns ($result: $oset);
  free ensures $result == F#glob_reach();
  free ensures $call_transition(old($s), $s);



const unique ^$#_purecall_handler#1: $ctype;

axiom $def_fnptr_type(^$#_purecall_handler#1);

type $#_purecall_handler#1;

const unique ^$#_invalid_parameter_handler#2: $ctype;

axiom $def_fnptr_type(^$#_invalid_parameter_handler#2);

type $#_invalid_parameter_handler#2;

const unique ^$#g_slist_sort_merge.c..36263#3: $ctype;

axiom $def_fnptr_type(^$#g_slist_sort_merge.c..36263#3);

type $#g_slist_sort_merge.c..36263#3;

const unique ^$#_PtFuncCompare#4: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#4);

type $#_PtFuncCompare#4;

const unique ^$#_PtFuncCompare#5: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#5);

type $#_PtFuncCompare#5;

const unique ^$#_PtFuncCompare#6: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#6);

type $#_PtFuncCompare#6;

const unique ^$#_PtFuncCompare#7: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#7);

type $#_PtFuncCompare#7;

const unique ^$#_onexit_t#8: $ctype;

axiom $def_fnptr_type(^$#_onexit_t#8);

type $#_onexit_t#8;

function F##int_max(SP#x: int, SP#y: int) : int;

const unique cf##int_max: $pure_function;

axiom (forall SP#x: int, SP#y: int :: { F##int_max(SP#x, SP#y) } $in_range_i4(F##int_max(SP#x, SP#y)));

axiom $function_arg_type(cf##int_max, 0, ^^i4);

axiom $function_arg_type(cf##int_max, 1, ^^i4);

axiom $function_arg_type(cf##int_max, 2, ^^i4);

procedure #int_max(SP#x: int, SP#y: int) returns ($result: int);
  free ensures $in_range_i4($result);
  free ensures $result == F##int_max(SP#x, SP#y);
  free ensures $call_transition(old($s), $s);



function F##int_min(SP#x: int, SP#y: int) : int;

const unique cf##int_min: $pure_function;

axiom (forall SP#x: int, SP#y: int :: { F##int_min(SP#x, SP#y) } $in_range_i4(F##int_min(SP#x, SP#y)));

axiom $function_arg_type(cf##int_min, 0, ^^i4);

axiom $function_arg_type(cf##int_min, 1, ^^i4);

axiom $function_arg_type(cf##int_min, 2, ^^i4);

procedure #int_min(SP#x: int, SP#y: int) returns ($result: int);
  free ensures $in_range_i4($result);
  free ensures $result == F##int_min(SP#x, SP#y);
  free ensures $call_transition(old($s), $s);



function F#sll(#s: $state, SP#hd: $ptr) : bool;

const unique cf#sll: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll(#s, SP#hd) } 1 < $decreases_level ==> $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#sll(#s, SP#hd));

axiom $function_arg_type(cf#sll, 0, ^^bool);

axiom $function_arg_type(cf#sll, 1, $ptr_to(^s_node));

procedure sll(SP#hd: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result;
  free ensures $result == F#sll($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#srtl(#s: $state, SP#hd: $ptr) : bool;

const unique cf#srtl: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#srtl(#s, SP#hd) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#srtl(#s, SP#hd)) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> F#srtl(#s, SP#hd)));

axiom $function_arg_type(cf#srtl, 0, ^^bool);

axiom $function_arg_type(cf#srtl, 1, $ptr_to(^s_node));

procedure srtl(SP#hd: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result;
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> $result;
  free ensures $result == F#srtl($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#rsrtl(#s: $state, SP#hd: $ptr) : bool;

const unique cf#rsrtl: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#rsrtl(#s, SP#hd) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#rsrtl(#s, SP#hd)) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> F#rsrtl(#s, SP#hd)));

axiom $function_arg_type(cf#rsrtl, 0, ^^bool);

axiom $function_arg_type(cf#rsrtl, 1, $ptr_to(^s_node));

procedure rsrtl(SP#hd: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result;
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> $result;
  free ensures $result == F#rsrtl($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_reach(#s: $state, SP#hd: $ptr) : $oset;

const unique cf#sll_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll_reach(#s, SP#hd) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#sll_reach(#s, SP#hd))) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#sll_reach(#s, SP#hd) == $oset_empty()));

axiom $function_arg_type(cf#sll_reach, 0, ^$#oset);

axiom $function_arg_type(cf#sll_reach, 1, $ptr_to(^s_node));

procedure sll_reach(SP#hd: $ptr) returns ($result: $oset);
  ensures ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result)) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result == $oset_empty());
  free ensures $result == F#sll_reach($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#srtl_reach(#s: $state, SP#hd: $ptr) : $oset;

const unique cf#srtl_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#srtl_reach(#s, SP#hd) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#srtl_reach(#s, SP#hd))) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#srtl_reach(#s, SP#hd) == $oset_empty()));

axiom $function_arg_type(cf#srtl_reach, 0, ^$#oset);

axiom $function_arg_type(cf#srtl_reach, 1, $ptr_to(^s_node));

procedure srtl_reach(SP#hd: $ptr) returns ($result: $oset);
  ensures ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result)) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result == $oset_empty());
  free ensures $result == F#srtl_reach($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#rsrtl_reach(#s: $state, SP#hd: $ptr) : $oset;

const unique cf#rsrtl_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#rsrtl_reach(#s, SP#hd) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#rsrtl_reach(#s, SP#hd))) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#rsrtl_reach(#s, SP#hd) == $oset_empty()));

axiom $function_arg_type(cf#rsrtl_reach, 0, ^$#oset);

axiom $function_arg_type(cf#rsrtl_reach, 1, $ptr_to(^s_node));

procedure rsrtl_reach(SP#hd: $ptr) returns ($result: $oset);
  ensures ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result)) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result == $oset_empty());
  free ensures $result == F#rsrtl_reach($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_keys(#s: $state, SP#hd: $ptr) : $intset;

const unique cf#sll_keys: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll_keys(#s, SP#hd) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $intset_in($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node)), F#sll_keys(#s, SP#hd))) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#sll_keys(#s, SP#hd) == $intset_empty()));

axiom $function_arg_type(cf#sll_keys, 0, ^$#intset);

axiom $function_arg_type(cf#sll_keys, 1, $ptr_to(^s_node));

procedure sll_keys(SP#hd: $ptr) returns ($result: $intset);
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $intset_in($rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node)), $result);
  ensures $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result == $intset_empty();
  free ensures $result == F#sll_keys($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_min_key(#s: $state, SP#hd: $ptr) : int;

const unique cf#sll_min_key: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll_min_key(#s, SP#hd) } 1 < $decreases_level ==> $in_range_i4(F#sll_min_key(#s, SP#hd)) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> F#sll_min_key(#s, SP#hd) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node))));

axiom $function_arg_type(cf#sll_min_key, 0, ^^i4);

axiom $function_arg_type(cf#sll_min_key, 1, $ptr_to(^s_node));

procedure sll_min_key(SP#hd: $ptr) returns ($result: int);
  free ensures $in_range_i4($result);
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> $result == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node));
  free ensures $result == F#sll_min_key($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_max_key(#s: $state, SP#hd: $ptr) : int;

const unique cf#sll_max_key: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll_max_key(#s, SP#hd) } 1 < $decreases_level ==> $in_range_i4(F#sll_max_key(#s, SP#hd)) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> F#sll_max_key(#s, SP#hd) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node))));

axiom $function_arg_type(cf#sll_max_key, 0, ^^i4);

axiom $function_arg_type(cf#sll_max_key, 1, $ptr_to(^s_node));

procedure sll_max_key(SP#hd: $ptr) returns ($result: int);
  free ensures $in_range_i4($result);
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> $result == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node));
  free ensures $result == F#sll_max_key($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_list_len_next(#s: $state, SP#x: $ptr) : int;

const unique cf#sll_list_len_next: $pure_function;

axiom (forall #s: $state, SP#x: $ptr :: { F#sll_list_len_next(#s, SP#x) } 1 < $decreases_level ==> $in_range_nat(F#sll_list_len_next(#s, SP#x)) && ($non_null($phys_ptr_cast(SP#x, ^s_node)) ==> F#sll_list_len_next(#s, SP#x) > 0) && ($is_null($phys_ptr_cast(SP#x, ^s_node)) ==> F#sll_list_len_next(#s, SP#x) == 0));

axiom $function_arg_type(cf#sll_list_len_next, 0, ^^nat);

axiom $function_arg_type(cf#sll_list_len_next, 1, $ptr_to(^s_node));

procedure sll_list_len_next(SP#x: $ptr) returns ($result: int);
  free ensures $in_range_nat($result);
  ensures $non_null($phys_ptr_cast(SP#x, ^s_node)) ==> $result > 0;
  ensures $is_null($phys_ptr_cast(SP#x, ^s_node)) ==> $result == 0;
  free ensures $result == F#sll_list_len_next($s, SP#x);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : bool;

const unique cf#sll_lseg: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg(#s, SP#hd, SP#tl) == F#sll(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg(#s, SP#hd, SP#tl)) && (F#sll_lseg(#s, SP#hd, SP#tl) ==> $oset_disjoint(F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)))) && (F#sll_lseg(#s, SP#hd, SP#tl) && F#sll(#s, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll(#s, $phys_ptr_cast(SP#hd, ^s_node)) && F#sll_reach(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $oset_union(F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_reach(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_keys(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $intset_union(F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_keys(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_list_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_list_len_next(#s, $phys_ptr_cast(SP#tl, ^s_node)))) && (F#sll_lseg(#s, SP#hd, SP#tl) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#hd, ^s_node) && !$oset_in($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node), F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node))) ==> F#sll_lseg(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $intset_singleton($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)))) && F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), 1)));

axiom $function_arg_type(cf#sll_lseg, 0, ^^bool);

axiom $function_arg_type(cf#sll_lseg, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg, 2, $ptr_to(^s_node));

procedure sll_lseg(SP#hd: $ptr, SP#tl: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result;
  ensures $result ==> $oset_disjoint(F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)));
  ensures $result && F#sll($s, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SP#hd, ^s_node)) && F#sll_reach($s, $phys_ptr_cast(SP#hd, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_reach($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_keys($s, $phys_ptr_cast(SP#hd, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_keys($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_list_len_next($s, $phys_ptr_cast(SP#hd, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_list_len_next($s, $phys_ptr_cast(SP#tl, ^s_node)));
  ensures $result && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#hd, ^s_node) && !$oset_in($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node), F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node))) ==> F#sll_lseg($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)))) && F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), 1);
  free ensures $result == F#sll_lseg($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#srtl_lseg(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : bool;

const unique cf#srtl_lseg: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#srtl_lseg(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl_lseg(#s, SP#hd, SP#tl) == F#srtl(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#srtl_lseg(#s, SP#hd, SP#tl)) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#srtl_lseg(#s, SP#hd, SP#tl)) && (F#srtl_lseg(#s, SP#hd, SP#tl) ==> $oset_disjoint(F#srtl_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)))) && (F#srtl_lseg(#s, SP#hd, SP#tl) && F#srtl(#s, $phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) <= F#sll_min_key(#s, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl(#s, $phys_ptr_cast(SP#hd, ^s_node)) && F#srtl_reach(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $oset_union(F#srtl_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#srtl_reach(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_keys(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $intset_union(F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_keys(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_list_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_list_len_next(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node)) == F#sll_lseg_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node)) == F#sll_max_key(#s, $phys_ptr_cast(SP#tl, ^s_node))) && (F#srtl_lseg(#s, SP#hd, SP#tl) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && !$oset_in($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node), F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) <= $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl_lseg(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#srtl_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $intset_singleton($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)))) && F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), 1) && F#sll_lseg_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == F#sll_lseg_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node))) && (F#srtl_lseg(#s, SP#hd, SP#tl) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> F#srtl_lseg(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#srtl_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_singleton($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == 1 && F#sll_lseg_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node))));

axiom $function_arg_type(cf#srtl_lseg, 0, ^^bool);

axiom $function_arg_type(cf#srtl_lseg, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#srtl_lseg, 2, $ptr_to(^s_node));

procedure srtl_lseg(SP#hd: $ptr, SP#tl: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#srtl($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result;
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result;
  ensures $result ==> $oset_disjoint(F#srtl_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)));
  ensures $result && F#srtl($s, $phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) <= F#sll_min_key($s, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SP#hd, ^s_node)) && F#srtl_reach($s, $phys_ptr_cast(SP#hd, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#srtl_reach($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_keys($s, $phys_ptr_cast(SP#hd, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_keys($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_list_len_next($s, $phys_ptr_cast(SP#hd, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_list_len_next($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_min_key($s, $phys_ptr_cast(SP#hd, ^s_node)) == F#sll_lseg_min_key($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_max_key($s, $phys_ptr_cast(SP#hd, ^s_node)) == F#sll_max_key($s, $phys_ptr_cast(SP#tl, ^s_node));
  ensures $result && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && !$oset_in($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node), F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_max_key($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) <= $rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl_lseg($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#srtl_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)))) && F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), 1) && F#sll_lseg_min_key($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == F#sll_lseg_min_key($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node));
  ensures $result && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#srtl_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == 1 && F#sll_lseg_min_key($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node));
  free ensures $result == F#srtl_lseg($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_reach(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : $oset;

const unique cf#sll_lseg_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_reach(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_reach(#s, SP#hd, SP#tl) == F#sll_reach(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_reach(#s, SP#hd, SP#tl) == $oset_empty()) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#sll_lseg_reach(#s, SP#hd, SP#tl))));

axiom $function_arg_type(cf#sll_lseg_reach, 0, ^$#oset);

axiom $function_arg_type(cf#sll_lseg_reach, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_reach, 2, $ptr_to(^s_node));

procedure sll_lseg_reach(SP#hd: $ptr, SP#tl: $ptr) returns ($result: $oset);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_reach($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $oset_empty();
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result);
  free ensures $result == F#sll_lseg_reach($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#srtl_lseg_reach(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : $oset;

const unique cf#srtl_lseg_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#srtl_lseg_reach(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl_lseg_reach(#s, SP#hd, SP#tl) == F#srtl_reach(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#srtl_lseg_reach(#s, SP#hd, SP#tl) == $oset_empty()) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#srtl_lseg_reach(#s, SP#hd, SP#tl))));

axiom $function_arg_type(cf#srtl_lseg_reach, 0, ^$#oset);

axiom $function_arg_type(cf#srtl_lseg_reach, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#srtl_lseg_reach, 2, $ptr_to(^s_node));

procedure srtl_lseg_reach(SP#hd: $ptr, SP#tl: $ptr) returns ($result: $oset);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#srtl_reach($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $oset_empty();
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result);
  free ensures $result == F#srtl_lseg_reach($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_keys(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : $intset;

const unique cf#sll_lseg_keys: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_keys(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_keys(#s, SP#hd, SP#tl) == F#sll_keys(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_keys(#s, SP#hd, SP#tl) == $intset_empty()) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $intset_in($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node)), F#sll_lseg_keys(#s, SP#hd, SP#tl))));

axiom $function_arg_type(cf#sll_lseg_keys, 0, ^$#intset);

axiom $function_arg_type(cf#sll_lseg_keys, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_keys, 2, $ptr_to(^s_node));

procedure sll_lseg_keys(SP#hd: $ptr, SP#tl: $ptr) returns ($result: $intset);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_keys($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $intset_empty();
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $intset_in($rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node)), $result);
  free ensures $result == F#sll_lseg_keys($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_min_key(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : int;

const unique cf#sll_lseg_min_key: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_min_key(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> $in_range_i4(F#sll_lseg_min_key(#s, SP#hd, SP#tl)) && ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_min_key(#s, SP#hd, SP#tl) == F#sll_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_min_key(#s, SP#hd, SP#tl) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node))));

axiom $function_arg_type(cf#sll_lseg_min_key, 0, ^^i4);

axiom $function_arg_type(cf#sll_lseg_min_key, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_min_key, 2, $ptr_to(^s_node));

procedure sll_lseg_min_key(SP#hd: $ptr, SP#tl: $ptr) returns ($result: int);
  free ensures $in_range_i4($result);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_min_key($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node));
  free ensures $result == F#sll_lseg_min_key($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_max_key(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : int;

const unique cf#sll_lseg_max_key: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_max_key(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> $in_range_i4(F#sll_lseg_max_key(#s, SP#hd, SP#tl)) && ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_max_key(#s, SP#hd, SP#tl) == F#sll_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_max_key(#s, SP#hd, SP#tl) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node))));

axiom $function_arg_type(cf#sll_lseg_max_key, 0, ^^i4);

axiom $function_arg_type(cf#sll_lseg_max_key, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_max_key, 2, $ptr_to(^s_node));

procedure sll_lseg_max_key(SP#hd: $ptr, SP#tl: $ptr) returns ($result: int);
  free ensures $in_range_i4($result);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_max_key($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node));
  free ensures $result == F#sll_lseg_max_key($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_len_next(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : int;

const unique cf#sll_lseg_len_next: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_len_next(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> $in_range_nat(F#sll_lseg_len_next(#s, SP#hd, SP#tl)) && ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_len_next(#s, SP#hd, SP#tl) == F#sll_list_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_len_next(#s, SP#hd, SP#tl) == 0) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_len_next(#s, SP#hd, SP#tl) > 0));

axiom $function_arg_type(cf#sll_lseg_len_next, 0, ^^nat);

axiom $function_arg_type(cf#sll_lseg_len_next, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_len_next, 2, $ptr_to(^s_node));

procedure sll_lseg_len_next(SP#hd: $ptr, SP#tl: $ptr) returns ($result: int);
  free ensures $in_range_nat($result);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_list_len_next($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == 0;
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $result > 0;
  free ensures $result == F#sll_lseg_len_next($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



procedure g_slist_sort_merge(P#l1: $ptr, P#l2: $ptr) returns ($result: $ptr);
  requires F#srtl($s, $phys_ptr_cast(P#l1, ^s_node));
  requires F#srtl($s, $phys_ptr_cast(P#l2, ^s_node));
  requires $oset_disjoint(F#srtl_reach($s, $phys_ptr_cast(P#l1, ^s_node)), F#srtl_reach($s, $phys_ptr_cast(P#l2, ^s_node)));
  modifies $s, $cev_pc;
  ensures F#srtl($s, $phys_ptr_cast($result, ^s_node));
  free ensures $writes_nothing(old($s), $s);
  free ensures $call_transition(old($s), $s);



implementation g_slist_sort_merge(P#l1: $ptr, P#l2: $ptr) returns ($result: $ptr)
{
  var stmtexpr1#21: $state;
  var _dryad_S7#7: $state;
  var stmtexpr0#20: $state;
  var _dryad_S6#6: $state;
  var stmtexpr1#19: $state;
  var _dryad_S7#5: $state;
  var stmtexpr0#18: $state;
  var _dryad_S6#4: $state;
  var stmtexpr2#17: $state;
  var _dryad_S7#3: $state;
  var stmtexpr1#16: $state;
  var _dryad_S6#2: $state;
  var stmtexpr0#15: $ptr;
  var SL#l3: $ptr;
  var stmtexpr2#14: $ptr;
  var SL#l24: $ptr;
  var stmtexpr1#13: $state;
  var _dryad_S7#1: $state;
  var stmtexpr0#12: $state;
  var _dryad_S6#0: $state;
  var stmtexpr2#11: $ptr;
  var SL#l14: $ptr;
  var stmtexpr1#10: $state;
  var SL#_dryad_S7: $state;
  var stmtexpr0#9: $state;
  var SL#_dryad_S6: $state;
  var ite#1: bool;
  var loopState#0: $state;
  var stmtexpr9#31: $ptr;
  var SL#list2: $ptr;
  var stmtexpr8#30: $state;
  var SL#_dryad_S5: $state;
  var stmtexpr7#29: $state;
  var SL#_dryad_S4: $state;
  var stmtexpr6#28: $state;
  var SL#_dryad_S3: $state;
  var stmtexpr5#27: $state;
  var SL#_dryad_S2: $state;
  var stmtexpr4#26: $state;
  var SL#_dryad_S1: $state;
  var stmtexpr3#25: $oset;
  var stmtexpr2#24: $state;
  var SL#_dryad_S0: $state;
  var res_sll_reach#8: $oset;
  var res_sll_reach#7: $oset;
  var res_sll_keys#6: $intset;
  var res_sll_keys#5: $intset;
  var SL#k1: $intset;
  var SL#k2: $intset;
  var SL#init_sll_keys: $intset;
  var SL#INIT_REACH: $oset;
  var L#list: $ptr;
  var L#l: $ptr;
  var L#list_next: $ptr;
  var stmtexpr1#23: $oset;
  var stmtexpr0#22: $oset;
  var res_srtl_reach#4: $oset;
  var res_srtl_reach#3: $oset;
  var SL#_dryad_G1: $oset;
  var SL#_dryad_G0: $oset;
  var local.l1: $ptr;
  var local.l2: $ptr;
  var #wrTime$3^3.3: int;
  var #stackframe: int;


var p0000 : bool;
var p0001 : bool;
var p0002 : bool;
var p0003 : bool;
var p0004 : bool;
var p0005 : bool;
var p0006 : bool;
var p0007 : bool;
var p0008 : bool;
var p0009 : bool;
var p0010 : bool;
var p0011 : bool;
var p0012 : bool;
var p0013 : bool;
var p0014 : bool;
var p0015 : bool;
var p0016 : bool;
var p0017 : bool;
var p0018 : bool;
var p0019 : bool;
var p0020 : bool;
var p0021 : bool;
var p0022 : bool;
var p0023 : bool;
var p0024 : bool;
var p0025 : bool;
var p0026 : bool;
var p0027 : bool;
var p0028 : bool;
var p0029 : bool;
var p0030 : bool;
var p0031 : bool;
var p0032 : bool;
var p0033 : bool;
var p0034 : bool;
var p0035 : bool;
var p0036 : bool;
var p0037 : bool;
var p0038 : bool;
var p0039 : bool;
var p0040 : bool;
var p0041 : bool;
var p0042 : bool;
var p0043 : bool;
var p0044 : bool;
var p0045 : bool;
var p0046 : bool;
var p0047 : bool;
var p0048 : bool;
var p0049 : bool;
var p0050 : bool;
var p0051 : bool;
var p0052 : bool;
var p0053 : bool;
var p0054 : bool;
var p0055 : bool;
var p0056 : bool;
var p0057 : bool;
var p0058 : bool;
var p0059 : bool;
var p0060 : bool;
var p0061 : bool;
var p0062 : bool;
var p0063 : bool;
var p0064 : bool;
var p0065 : bool;
var p0066 : bool;
var p0067 : bool;
var p0068 : bool;
var p0069 : bool;
var p0070 : bool;
var p0071 : bool;
var p0072 : bool;
var p0073 : bool;
var p0074 : bool;
var p0075 : bool;
var p0076 : bool;
var p0077 : bool;
var p0078 : bool;
var p0079 : bool;
var p0080 : bool;
var p0081 : bool;
var p0082 : bool;
var p0083 : bool;
var p0084 : bool;
var p0085 : bool;
var p0086 : bool;
var p0087 : bool;
var p0088 : bool;
var p0089 : bool;
var p0090 : bool;
var p0091 : bool;
var p0092 : bool;
var p0093 : bool;
var p0094 : bool;
var p0095 : bool;
var p0096 : bool;
var p0097 : bool;
var p0098 : bool;
var p0099 : bool;
var p0100 : bool;
var p0101 : bool;
var p0102 : bool;
var p0103 : bool;
var p0104 : bool;
var p0105 : bool;
var p0106 : bool;
var p0107 : bool;
var p0108 : bool;
var p0109 : bool;
var p0110 : bool;
var p0111 : bool;
var p0112 : bool;
var p0113 : bool;
var p0114 : bool;
var p0115 : bool;
var p0116 : bool;
var p0117 : bool;
var p0118 : bool;
var p0119 : bool;
var p0120 : bool;
var p0121 : bool;
var p0122 : bool;
var p0123 : bool;
var p0124 : bool;
var p0125 : bool;
var p0126 : bool;
var p0127 : bool;
var p0128 : bool;
var p0129 : bool;
var p0130 : bool;
var p0131 : bool;
var p0132 : bool;
var p0133 : bool;
var p0134 : bool;
var p0135 : bool;
var p0136 : bool;
var p0137 : bool;
var p0138 : bool;
var p0139 : bool;
var p0140 : bool;
var p0141 : bool;
var p0142 : bool;
var p0143 : bool;
var p0144 : bool;
var p0145 : bool;
var p0146 : bool;
var p0147 : bool;
var p0148 : bool;
var p0149 : bool;
var p0150 : bool;
var p0151 : bool;
var p0152 : bool;
var p0153 : bool;
var p0154 : bool;
var p0155 : bool;
var p0156 : bool;
var p0157 : bool;
var p0158 : bool;
var p0159 : bool;
var p0160 : bool;
var p0161 : bool;
var p0162 : bool;
var p0163 : bool;
var p0164 : bool;
var p0165 : bool;
var p0166 : bool;
var p0167 : bool;
var p0168 : bool;
var p0169 : bool;
var p0170 : bool;
var p0171 : bool;
var p0172 : bool;
var p0173 : bool;
var p0174 : bool;
var p0175 : bool;
var p0176 : bool;
var p0177 : bool;
var p0178 : bool;
var p0179 : bool;
var p0180 : bool;
var p0181 : bool;
var p0182 : bool;
var p0183 : bool;
var p0184 : bool;
var p0185 : bool;
var p0186 : bool;
var p0187 : bool;
var p0188 : bool;
var p0189 : bool;
var p0190 : bool;
var p0191 : bool;
var p0192 : bool;
var p0193 : bool;
var p0194 : bool;
var p0195 : bool;
var p0196 : bool;
var p0197 : bool;
var p0198 : bool;
var p0199 : bool;
var p0200 : bool;
var p0201 : bool;
var p0202 : bool;
var p0203 : bool;
var p0204 : bool;
var p0205 : bool;
var p0206 : bool;
var p0207 : bool;
var p0208 : bool;
var p0209 : bool;
var p0210 : bool;
var p0211 : bool;
var p0212 : bool;
var p0213 : bool;
var p0214 : bool;
var p0215 : bool;
var p0216 : bool;
var p0217 : bool;
var p0218 : bool;
var p0219 : bool;
var p0220 : bool;
var p0221 : bool;
var p0222 : bool;
var p0223 : bool;
var p0224 : bool;
var p0225 : bool;
var p0226 : bool;
var p0227 : bool;
var p0228 : bool;
var p0229 : bool;
var p0230 : bool;
var p0231 : bool;
var p0232 : bool;
var p0233 : bool;
var p0234 : bool;
var p0235 : bool;
var p0236 : bool;
var p0237 : bool;
var p0238 : bool;
var p0239 : bool;
var p0240 : bool;
var p0241 : bool;
var p0242 : bool;
var p0243 : bool;
var p0244 : bool;
var p0245 : bool;
var p0246 : bool;
var p0247 : bool;
var p0248 : bool;
var p0249 : bool;
var p0250 : bool;
var p0251 : bool;
var p0252 : bool;
var p0253 : bool;
var p0254 : bool;
var p0255 : bool;
var p0256 : bool;
var p0257 : bool;
var p0258 : bool;
var p0259 : bool;
var p0260 : bool;
var p0261 : bool;
var p0262 : bool;
var p0263 : bool;
var p0264 : bool;
var p0265 : bool;
var p0266 : bool;
var p0267 : bool;
var p0268 : bool;
var p0269 : bool;
var p0270 : bool;
var p0271 : bool;
var p0272 : bool;
var p0273 : bool;
var p0274 : bool;
var p0275 : bool;
var p0276 : bool;
var p0277 : bool;
var p0278 : bool;
var p0279 : bool;
var p0280 : bool;
var p0281 : bool;
var p0282 : bool;
var p0283 : bool;
var p0284 : bool;
var p0285 : bool;
var p0286 : bool;
var p0287 : bool;
var p0288 : bool;
var p0289 : bool;
var p0290 : bool;
var p0291 : bool;
var p0292 : bool;
var p0293 : bool;
var p0294 : bool;
var p0295 : bool;
var p0296 : bool;
var p0297 : bool;
var p0298 : bool;
var p0299 : bool;
var p0300 : bool;
var p0301 : bool;
var p0302 : bool;
var p0303 : bool;
var p0304 : bool;
var p0305 : bool;
var p0306 : bool;
var p0307 : bool;
var p0308 : bool;
var p0309 : bool;
var p0310 : bool;
var p0311 : bool;
var p0312 : bool;
var p0313 : bool;
var p0314 : bool;
var p0315 : bool;
var p0316 : bool;
var p0317 : bool;
var p0318 : bool;
var p0319 : bool;
var p0320 : bool;
var p0321 : bool;
var p0322 : bool;
var p0323 : bool;
var p0324 : bool;
var p0325 : bool;
var p0326 : bool;
var p0327 : bool;
var p0328 : bool;
var p0329 : bool;
var p0330 : bool;
var p0331 : bool;
var p0332 : bool;
var p0333 : bool;
var p0334 : bool;
var p0335 : bool;
var p0336 : bool;
var p0337 : bool;
var p0338 : bool;
var p0339 : bool;
var p0340 : bool;
var p0341 : bool;
var p0342 : bool;
var p0343 : bool;
var p0344 : bool;
var p0345 : bool;
var p0346 : bool;
var p0347 : bool;
var p0348 : bool;
var p0349 : bool;
var p0350 : bool;
var p0351 : bool;
var p0352 : bool;
var p0353 : bool;
var p0354 : bool;
var p0355 : bool;
var p0356 : bool;
var p0357 : bool;
var p0358 : bool;
var p0359 : bool;
var p0360 : bool;
var p0361 : bool;
var p0362 : bool;
var p0363 : bool;
var p0364 : bool;
var p0365 : bool;
var p0366 : bool;
var p0367 : bool;
var p0368 : bool;
var p0369 : bool;
var p0370 : bool;
var p0371 : bool;
var p0372 : bool;
var p0373 : bool;
var p0374 : bool;
var p0375 : bool;
var p0376 : bool;
var p0377 : bool;
var p0378 : bool;
var p0379 : bool;
var p0380 : bool;
var p0381 : bool;
var p0382 : bool;
var p0383 : bool;
var p0384 : bool;
var p0385 : bool;
var p0386 : bool;
var p0387 : bool;
var p0388 : bool;
var p0389 : bool;
var p0390 : bool;
var p0391 : bool;
var p0392 : bool;
var p0393 : bool;
var p0394 : bool;
var p0395 : bool;
var p0396 : bool;
var p0397 : bool;
var p0398 : bool;
var p0399 : bool;
var p0400 : bool;
var p0401 : bool;
var p0402 : bool;
var p0403 : bool;
var p0404 : bool;
var p0405 : bool;
var p0406 : bool;
var p0407 : bool;
var p0408 : bool;
var p0409 : bool;
var p0410 : bool;
var p0411 : bool;
var p0412 : bool;
var p0413 : bool;
var p0414 : bool;
var p0415 : bool;
var p0416 : bool;
var p0417 : bool;
var p0418 : bool;
var p0419 : bool;
var p0420 : bool;
var p0421 : bool;
var p0422 : bool;
var p0423 : bool;
var p0424 : bool;
var p0425 : bool;
var p0426 : bool;
var p0427 : bool;
var p0428 : bool;
var p0429 : bool;
var p0430 : bool;
var p0431 : bool;
var p0432 : bool;
var p0433 : bool;
var p0434 : bool;
var p0435 : bool;
var p0436 : bool;
var p0437 : bool;
var p0438 : bool;
var p0439 : bool;
var p0440 : bool;
var p0441 : bool;
var p0442 : bool;
var p0443 : bool;
var p0444 : bool;
var p0445 : bool;
var p0446 : bool;
var p0447 : bool;
var p0448 : bool;
var p0449 : bool;
var p0450 : bool;
var p0451 : bool;
var p0452 : bool;
var p0453 : bool;
var p0454 : bool;
var p0455 : bool;
var p0456 : bool;
var p0457 : bool;
var p0458 : bool;
var p0459 : bool;
var p0460 : bool;
var p0461 : bool;
var p0462 : bool;
var p0463 : bool;
var p0464 : bool;
var p0465 : bool;
var p0466 : bool;
var p0467 : bool;
var p0468 : bool;
var p0469 : bool;
var p0470 : bool;
var p0471 : bool;
var p0472 : bool;
var p0473 : bool;
var p0474 : bool;
var p0475 : bool;
var p0476 : bool;
var p0477 : bool;
var p0478 : bool;
var p0479 : bool;
var p0480 : bool;
var p0481 : bool;
var p0482 : bool;
var p0483 : bool;
var p0484 : bool;
var p0485 : bool;
var p0486 : bool;
var p0487 : bool;
var p0488 : bool;
var p0489 : bool;
var p0490 : bool;
var p0491 : bool;
var p0492 : bool;
var p0493 : bool;
var p0494 : bool;
var p0495 : bool;
var p0496 : bool;
var p0497 : bool;
var p0498 : bool;
var p0499 : bool;
var p0500 : bool;
var p0501 : bool;
var p0502 : bool;
var p0503 : bool;
var p0504 : bool;
var p0505 : bool;
var p0506 : bool;
var p0507 : bool;
var p0508 : bool;
var p0509 : bool;
var p0510 : bool;
var p0511 : bool;
var p0512 : bool;
var p0513 : bool;
var p0514 : bool;
var p0515 : bool;
var p0516 : bool;
var p0517 : bool;
var p0518 : bool;
var p0519 : bool;
var p0520 : bool;
var p0521 : bool;
var p0522 : bool;
var p0523 : bool;
var p0524 : bool;
var p0525 : bool;
var p0526 : bool;
var p0527 : bool;
var p0528 : bool;
var p0529 : bool;
var p0530 : bool;
var p0531 : bool;
var p0532 : bool;
var p0533 : bool;
var p0534 : bool;
var p0535 : bool;
var p0536 : bool;
var p0537 : bool;
var p0538 : bool;
var p0539 : bool;
var p0540 : bool;
var p0541 : bool;
var p0542 : bool;
var p0543 : bool;
var p0544 : bool;
var p0545 : bool;
var p0546 : bool;
var p0547 : bool;
var p0548 : bool;
var p0549 : bool;
var p0550 : bool;
var p0551 : bool;
var p0552 : bool;
var p0553 : bool;
var p0554 : bool;
var p0555 : bool;
var p0556 : bool;
var p0557 : bool;
var p0558 : bool;
var p0559 : bool;
var p0560 : bool;
var p0561 : bool;
var p0562 : bool;
var p0563 : bool;
var p0564 : bool;
var p0565 : bool;
var p0566 : bool;
var p0567 : bool;
var p0568 : bool;
var p0569 : bool;
var p0570 : bool;
var p0571 : bool;
var p0572 : bool;
var p0573 : bool;
var p0574 : bool;
var p0575 : bool;
var p0576 : bool;
var p0577 : bool;
var p0578 : bool;
var p0579 : bool;
var p0580 : bool;
var p0581 : bool;
var p0582 : bool;
var p0583 : bool;
var p0584 : bool;
var p0585 : bool;
var p0586 : bool;
var p0587 : bool;
var p0588 : bool;
var p0589 : bool;
var p0590 : bool;
var p0591 : bool;
var p0592 : bool;
var p0593 : bool;
var p0594 : bool;
var p0595 : bool;
var p0596 : bool;
var p0597 : bool;
var p0598 : bool;
var p0599 : bool;
var p0600 : bool;
var p0601 : bool;
var p0602 : bool;
var p0603 : bool;
var p0604 : bool;
var p0605 : bool;
var p0606 : bool;
var p0607 : bool;
var p0608 : bool;
var p0609 : bool;
var p0610 : bool;
var p0611 : bool;
var p0612 : bool;
var p0613 : bool;
var p0614 : bool;
var p0615 : bool;
var p0616 : bool;
var p0617 : bool;
var p0618 : bool;
var p0619 : bool;
var p0620 : bool;
var p0621 : bool;
var p0622 : bool;
var p0623 : bool;
var p0624 : bool;
var p0625 : bool;
var p0626 : bool;
var p0627 : bool;
var p0628 : bool;
var p0629 : bool;
var p0630 : bool;
var p0631 : bool;
var p0632 : bool;
var p0633 : bool;
var p0634 : bool;
var p0635 : bool;
var p0636 : bool;
var p0637 : bool;
var p0638 : bool;
var p0639 : bool;
var p0640 : bool;
var p0641 : bool;
var p0642 : bool;
var p0643 : bool;
var p0644 : bool;
var p0645 : bool;
var p0646 : bool;
var p0647 : bool;
var p0648 : bool;
var p0649 : bool;
var p0650 : bool;
var p0651 : bool;
var p0652 : bool;
var p0653 : bool;
var p0654 : bool;
var p0655 : bool;
var p0656 : bool;
var p0657 : bool;
var p0658 : bool;
var p0659 : bool;
var p0660 : bool;
var p0661 : bool;
var p0662 : bool;
var p0663 : bool;
var p0664 : bool;
var p0665 : bool;
var p0666 : bool;
var p0667 : bool;
var p0668 : bool;
var p0669 : bool;
var p0670 : bool;
var p0671 : bool;
var p0672 : bool;
var p0673 : bool;
var p0674 : bool;
var p0675 : bool;
var p0676 : bool;
var p0677 : bool;
var p0678 : bool;
var p0679 : bool;
var p0680 : bool;
var p0681 : bool;
var p0682 : bool;
var p0683 : bool;
var p0684 : bool;
var p0685 : bool;
var p0686 : bool;
var p0687 : bool;
var p0688 : bool;
var p0689 : bool;
var p0690 : bool;
var p0691 : bool;
var p0692 : bool;
var p0693 : bool;
var p0694 : bool;
var p0695 : bool;
var p0696 : bool;
var p0697 : bool;
var p0698 : bool;
var p0699 : bool;
var p0700 : bool;
var p0701 : bool;
var p0702 : bool;
var p0703 : bool;
var p0704 : bool;
var p0705 : bool;
var p0706 : bool;
var p0707 : bool;
var p0708 : bool;
var p0709 : bool;
var p0710 : bool;
var p0711 : bool;
var p0712 : bool;
var p0713 : bool;
var p0714 : bool;
var p0715 : bool;
var p0716 : bool;
var p0717 : bool;
var p0718 : bool;
var p0719 : bool;
var p0720 : bool;
var p0721 : bool;
var p0722 : bool;
var p0723 : bool;
var p0724 : bool;
var p0725 : bool;
var p0726 : bool;
var p0727 : bool;
var p0728 : bool;
var p0729 : bool;
var p0730 : bool;
var p0731 : bool;
var p0732 : bool;
var p0733 : bool;
var p0734 : bool;
var p0735 : bool;
var p0736 : bool;
var p0737 : bool;
var p0738 : bool;
var p0739 : bool;
var p0740 : bool;
var p0741 : bool;
var p0742 : bool;
var p0743 : bool;
var p0744 : bool;
var p0745 : bool;
var p0746 : bool;
var p0747 : bool;
var p0748 : bool;
var p0749 : bool;
var p0750 : bool;
var p0751 : bool;
var p0752 : bool;
var p0753 : bool;
var p0754 : bool;
var p0755 : bool;
var p0756 : bool;
var p0757 : bool;
var p0758 : bool;
var p0759 : bool;
var p0760 : bool;
var p0761 : bool;
var p0762 : bool;
var p0763 : bool;
var p0764 : bool;
var p0765 : bool;
var p0766 : bool;
var p0767 : bool;
var p0768 : bool;
var p0769 : bool;
var p0770 : bool;
var p0771 : bool;
var p0772 : bool;
var p0773 : bool;
var p0774 : bool;
var p0775 : bool;
var p0776 : bool;
var p0777 : bool;
var p0778 : bool;
var p0779 : bool;
var p0780 : bool;
var p0781 : bool;
var p0782 : bool;
var p0783 : bool;
var p0784 : bool;
var p0785 : bool;
var p0786 : bool;
var p0787 : bool;
var p0788 : bool;
var p0789 : bool;
var p0790 : bool;
var p0791 : bool;
var p0792 : bool;
var p0793 : bool;
var p0794 : bool;
var p0795 : bool;
var p0796 : bool;
var p0797 : bool;
var p0798 : bool;
var p0799 : bool;
var p0800 : bool;
var p0801 : bool;
var p0802 : bool;
var p0803 : bool;
var p0804 : bool;
var p0805 : bool;
var p0806 : bool;
var p0807 : bool;
var p0808 : bool;
var p0809 : bool;
var p0810 : bool;
var p0811 : bool;
var p0812 : bool;
var p0813 : bool;
var p0814 : bool;
var p0815 : bool;
var p0816 : bool;
var p0817 : bool;
var p0818 : bool;
var p0819 : bool;
var p0820 : bool;
var p0821 : bool;
var p0822 : bool;
var p0823 : bool;
var p0824 : bool;
var p0825 : bool;
var p0826 : bool;
var p0827 : bool;
var p0828 : bool;
var p0829 : bool;
var p0830 : bool;
var p0831 : bool;
var p0832 : bool;
var p0833 : bool;
var p0834 : bool;
var p0835 : bool;
var p0836 : bool;
var p0837 : bool;
var p0838 : bool;
var p0839 : bool;
var p0840 : bool;
var p0841 : bool;
var p0842 : bool;
var p0843 : bool;
var p0844 : bool;
var p0845 : bool;
var p0846 : bool;
var p0847 : bool;
var p0848 : bool;
var p0849 : bool;
var p0850 : bool;
var p0851 : bool;
var p0852 : bool;
var p0853 : bool;
var p0854 : bool;
var p0855 : bool;
var p0856 : bool;
var p0857 : bool;
var p0858 : bool;
var p0859 : bool;
var p0860 : bool;
var p0861 : bool;
var p0862 : bool;
var p0863 : bool;
var p0864 : bool;
var p0865 : bool;
var p0866 : bool;
var p0867 : bool;
var p0868 : bool;
var p0869 : bool;
var p0870 : bool;
var p0871 : bool;
var p0872 : bool;
var p0873 : bool;
var p0874 : bool;
var p0875 : bool;
var p0876 : bool;
var p0877 : bool;
var p0878 : bool;
var p0879 : bool;
var p0880 : bool;
var p0881 : bool;
var p0882 : bool;
var p0883 : bool;
var p0884 : bool;
var p0885 : bool;
var p0886 : bool;
var p0887 : bool;
var p0888 : bool;
var p0889 : bool;
var p0890 : bool;
var p0891 : bool;
var p0892 : bool;
var p0893 : bool;
var p0894 : bool;
var p0895 : bool;
var p0896 : bool;
var p0897 : bool;
var p0898 : bool;
var p0899 : bool;
var p0900 : bool;
var p0901 : bool;
var p0902 : bool;
var p0903 : bool;
var p0904 : bool;
var p0905 : bool;
var p0906 : bool;
var p0907 : bool;
var p0908 : bool;
var p0909 : bool;
var p0910 : bool;
var p0911 : bool;
var p0912 : bool;
var p0913 : bool;
var p0914 : bool;
var p0915 : bool;
var p0916 : bool;
var p0917 : bool;
var p0918 : bool;
var p0919 : bool;
var p0920 : bool;
var p0921 : bool;
var p0922 : bool;
var p0923 : bool;
var p0924 : bool;
var p0925 : bool;
var p0926 : bool;
var p0927 : bool;
var p0928 : bool;
var p0929 : bool;
var p0930 : bool;
var p0931 : bool;
var p0932 : bool;
var p0933 : bool;
var p0934 : bool;
var p0935 : bool;
var p0936 : bool;
var p0937 : bool;
var p0938 : bool;
var p0939 : bool;
var p0940 : bool;
var p0941 : bool;
var p0942 : bool;
var p0943 : bool;
var p0944 : bool;
var p0945 : bool;
var p0946 : bool;
var p0947 : bool;
var p0948 : bool;
var p0949 : bool;
var p0950 : bool;
var p0951 : bool;
var p0952 : bool;
var p0953 : bool;
var p0954 : bool;
var p0955 : bool;
var p0956 : bool;
var p0957 : bool;
var p0958 : bool;
var p0959 : bool;
var p0960 : bool;
var p0961 : bool;
var p0962 : bool;
var p0963 : bool;
var p0964 : bool;
var p0965 : bool;
var p0966 : bool;
var p0967 : bool;
var p0968 : bool;
var p0969 : bool;
var p0970 : bool;
var p0971 : bool;
var p0972 : bool;
var p0973 : bool;
var p0974 : bool;
var p0975 : bool;
var p0976 : bool;
var p0977 : bool;
var p0978 : bool;
var p0979 : bool;
var p0980 : bool;
var p0981 : bool;
var p0982 : bool;
var p0983 : bool;
var p0984 : bool;
var p0985 : bool;
var p0986 : bool;
var p0987 : bool;
var p0988 : bool;
var p0989 : bool;
var p0990 : bool;
var p0991 : bool;
var p0992 : bool;
var p0993 : bool;
var p0994 : bool;
var p0995 : bool;
var p0996 : bool;
var p0997 : bool;
var p0998 : bool;
var p0999 : bool;
var p1000 : bool;
var p1001 : bool;
var p1002 : bool;
var p1003 : bool;
var p1004 : bool;
var p1005 : bool;
var p1006 : bool;
var p1007 : bool;
var p1008 : bool;
var p1009 : bool;
var p1010 : bool;
var p1011 : bool;
var p1012 : bool;
var p1013 : bool;
var p1014 : bool;
var p1015 : bool;
var p1016 : bool;
var p1017 : bool;
var p1018 : bool;
var p1019 : bool;
var p1020 : bool;
var p1021 : bool;
var p1022 : bool;
var p1023 : bool;
var p1024 : bool;
var p1025 : bool;
var p1026 : bool;
var p1027 : bool;
var p1028 : bool;
var p1029 : bool;
var p1030 : bool;
var p1031 : bool;
var p1032 : bool;
var p1033 : bool;
var p1034 : bool;
var p1035 : bool;
var p1036 : bool;
var p1037 : bool;
var p1038 : bool;
var p1039 : bool;
var p1040 : bool;
var p1041 : bool;
var p1042 : bool;
var p1043 : bool;
var p1044 : bool;
var p1045 : bool;
var p1046 : bool;
var p1047 : bool;
var p1048 : bool;
var p1049 : bool;
var p1050 : bool;
var p1051 : bool;
var p1052 : bool;
var p1053 : bool;
var p1054 : bool;
var p1055 : bool;
var p1056 : bool;
var p1057 : bool;
var p1058 : bool;
var p1059 : bool;
var p1060 : bool;
var p1061 : bool;
var p1062 : bool;
var p1063 : bool;
var p1064 : bool;
var p1065 : bool;
var p1066 : bool;
var p1067 : bool;
var p1068 : bool;
var p1069 : bool;
var p1070 : bool;
var p1071 : bool;
var p1072 : bool;
var p1073 : bool;
var p1074 : bool;
var p1075 : bool;
var p1076 : bool;
var p1077 : bool;
var p1078 : bool;
var p1079 : bool;
var p1080 : bool;
var p1081 : bool;
var p1082 : bool;
var p1083 : bool;
var p1084 : bool;
var p1085 : bool;
var p1086 : bool;
var p1087 : bool;
var p1088 : bool;
var p1089 : bool;
var p1090 : bool;
var p1091 : bool;
var p1092 : bool;
var p1093 : bool;
var p1094 : bool;
var p1095 : bool;
var p1096 : bool;
var p1097 : bool;
var p1098 : bool;
var p1099 : bool;
var p1100 : bool;
var p1101 : bool;
var p1102 : bool;
var p1103 : bool;
var p1104 : bool;
var p1105 : bool;
var p1106 : bool;
var p1107 : bool;
var p1108 : bool;
var p1109 : bool;
var p1110 : bool;
var p1111 : bool;
var p1112 : bool;
var p1113 : bool;
var p1114 : bool;
var p1115 : bool;
var p1116 : bool;
var p1117 : bool;
var p1118 : bool;
var p1119 : bool;
var p1120 : bool;
var p1121 : bool;
var p1122 : bool;
var p1123 : bool;
var p1124 : bool;
var p1125 : bool;
var p1126 : bool;

// INV:PTR: P#l1, P#l2, L#list, L#l, L#list_next, local.l1, local.l2
// INV:INT:
// INV:LST: srtl

  anon9:
    assume $function_entry($s);
    assume $full_stop_ext(#tok$3^3.3, $s);
    assume $can_use_all_frame_axioms($s);
    assume #wrTime$3^3.3 == $current_timestamp($s);
    assume $def_writes($s, #wrTime$3^3.3, (lambda #p: $ptr :: false));
    // assume true
    // assume true
    // assume @decreases_level_is(2147483647); 
    assume 2147483647 == $decreases_level;
    // struct s_node* local.l2; 
    // local.l2 := l2; 
    local.l2 := $phys_ptr_cast(P#l2, ^s_node);
    // struct s_node* local.l1; 
    // local.l1 := l1; 
    local.l1 := $phys_ptr_cast(P#l1, ^s_node);
    // assume ==(-2147483648, unchecked-(unchecked-(0, 2147483647), 1)); 
    assume -2147483648 == $unchk_sub(^^i4, $unchk_sub(^^i4, 0, 2147483647), 1);
    // assume true
    //  --- Dryad annotated function --- 
    // _math \oset _dryad_G0; 
    // _math \oset _dryad_G1; 
    // _math \oset res_srtl_reach#3; 
    // res_srtl_reach#3 := srtl_reach(local.l1); 
    call res_srtl_reach#3 := srtl_reach($phys_ptr_cast(local.l1, ^s_node));
    assume $full_stop_ext(#tok$4^0.0, $s);
    // _math \oset res_srtl_reach#4; 
    // res_srtl_reach#4 := srtl_reach(local.l2); 
    call res_srtl_reach#4 := srtl_reach($phys_ptr_cast(local.l2, ^s_node));
    assume $full_stop_ext(#tok$4^0.0, $s);
    // _dryad_G0 := @_vcc_oset_union(res_srtl_reach#3, res_srtl_reach#4); 
    SL#_dryad_G0 := $oset_union(res_srtl_reach#3, res_srtl_reach#4);
    // _math \oset stmtexpr0#22; 
    // stmtexpr0#22 := _dryad_G0; 
    stmtexpr0#22 := SL#_dryad_G0;
    // _dryad_G1 := _dryad_G0; 
    SL#_dryad_G1 := SL#_dryad_G0;
    // _math \oset stmtexpr1#23; 
    // stmtexpr1#23 := _dryad_G1; 
    stmtexpr1#23 := SL#_dryad_G1;
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // struct s_node* list_next; 
    // struct s_node* l; 
    // struct s_node* list; 
    // _math \oset INIT_REACH; 
    // _math \intset init_sll_keys; 
    // _math \intset k2; 
    // _math \intset k1; 
    // k1 := sll_keys(local.l1); 
    call SL#k1 := sll_keys($phys_ptr_cast(local.l1, ^s_node));
    assume $full_stop_ext(#tok$3^10.23, $s);
    // k2 := sll_keys(local.l2); 
    call SL#k2 := sll_keys($phys_ptr_cast(local.l2, ^s_node));
    assume $full_stop_ext(#tok$3^11.23, $s);
    // _math \intset res_sll_keys#5; 
    // res_sll_keys#5 := sll_keys(local.l1); 
    call res_sll_keys#5 := sll_keys($phys_ptr_cast(local.l1, ^s_node));
    assume $full_stop_ext(#tok$3^12.48, $s);
    // _math \intset res_sll_keys#6; 
    // res_sll_keys#6 := sll_keys(local.l2); 
    call res_sll_keys#6 := sll_keys($phys_ptr_cast(local.l2, ^s_node));
    assume $full_stop_ext(#tok$3^12.62, $s);
    // init_sll_keys := @_vcc_intset_union(res_sll_keys#5, res_sll_keys#6); 
    SL#init_sll_keys := $intset_union(res_sll_keys#5, res_sll_keys#6);
    // _math \oset res_sll_reach#7; 
    // res_sll_reach#7 := sll_reach(local.l1); 
    call res_sll_reach#7 := sll_reach($phys_ptr_cast(local.l1, ^s_node));
    assume $full_stop_ext(#tok$3^13.41, $s);
    // _math \oset res_sll_reach#8; 
    // res_sll_reach#8 := sll_reach(local.l2); 
    call res_sll_reach#8 := sll_reach($phys_ptr_cast(local.l2, ^s_node));
    assume $full_stop_ext(#tok$3^13.56, $s);
    // INIT_REACH := @_vcc_oset_union(res_sll_reach#7, res_sll_reach#8); 
    SL#INIT_REACH := $oset_union(res_sll_reach#7, res_sll_reach#8);
    // var struct s_node* list
    // var struct s_node* l
    // assume &&(==>(@_vcc_ptr_neq_null(local.l1), &&(@_vcc_mutable(@state, local.l1), @writes_check(local.l1))), ==>(@_vcc_ptr_neq_null(local.l2), &&(@_vcc_mutable(@state, local.l2), @writes_check(local.l2)))); 
    assume ($non_null($phys_ptr_cast(local.l1, ^s_node)) ==> $mutable($s, $phys_ptr_cast(local.l1, ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(local.l1, ^s_node))) && ($non_null($phys_ptr_cast(local.l2, ^s_node)) ==> $mutable($s, $phys_ptr_cast(local.l2, ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(local.l2, ^s_node)));
    // _math \state _dryad_S0; 
    // _dryad_S0 := @_vcc_current_state(@state); 
    SL#_dryad_S0 := $current_state($s);
    // _math \state stmtexpr2#24; 
    // stmtexpr2#24 := _dryad_S0; 
    stmtexpr2#24 := SL#_dryad_S0;
    // list := _vcc_alloc(@_vcc_typeof((struct s_node*)@null)); 
    call L#list := $alloc(^s_node);
    assume $full_stop_ext(#tok$3^18.9, $s);
    // assume !(@_vcc_oset_in(list, @_vcc_oset_union(_dryad_G0, _dryad_G1))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), $oset_union(SL#_dryad_G0, SL#_dryad_G1));
    // _dryad_G1 := @_vcc_oset_union(_dryad_G0, @_vcc_oset_singleton(list)); 
    SL#_dryad_G1 := $oset_union(SL#_dryad_G0, $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // _math \oset stmtexpr3#25; 
    // stmtexpr3#25 := _dryad_G1; 
    stmtexpr3#25 := SL#_dryad_G1;
    // assume ==(glob_reach(), _dryad_G1); 
    assume F#glob_reach() == SL#_dryad_G1;
    // _math \state _dryad_S1; 
    // _dryad_S1 := @_vcc_current_state(@state); 
    SL#_dryad_S1 := $current_state($s);
    // _math \state stmtexpr4#26; 
    // stmtexpr4#26 := _dryad_S1; 
    stmtexpr4#26 := SL#_dryad_S1;
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(l)))), ==(old(_dryad_S0, sll_keys(l)), old(_dryad_S1, sll_keys(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(l)))), ==(old(_dryad_S0, sll_list_len_next(l)), old(_dryad_S1, sll_list_len_next(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, rsrtl_reach(l)))), ==(old(_dryad_S0, rsrtl(l)), old(_dryad_S1, rsrtl(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node))) ==> F#rsrtl(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node)) == F#rsrtl(SL#_dryad_S1, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, rsrtl_reach(l)))), ==(old(_dryad_S0, rsrtl_reach(l)), old(_dryad_S1, rsrtl_reach(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node)) == F#rsrtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(l)))), ==(old(_dryad_S0, sll(l)), old(_dryad_S1, sll(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(l)))), ==(old(_dryad_S0, sll_reach(l)), old(_dryad_S1, sll_reach(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(l)))), ==(old(_dryad_S0, sll_max_key(l)), old(_dryad_S1, sll_max_key(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_max_key(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node)) == F#sll_max_key(SL#_dryad_S1, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(l)))), ==(old(_dryad_S0, sll_min_key(l)), old(_dryad_S1, sll_min_key(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_min_key(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node)) == F#sll_min_key(SL#_dryad_S1, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, srtl_reach(l)))), ==(old(_dryad_S0, srtl(l)), old(_dryad_S1, srtl(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node)) == F#srtl(SL#_dryad_S1, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, srtl_reach(l)))), ==(old(_dryad_S0, srtl_reach(l)), old(_dryad_S1, srtl_reach(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node)) == F#srtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(list_next)))), ==(old(_dryad_S0, sll_keys(list_next)), old(_dryad_S1, sll_keys(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(list_next)))), ==(old(_dryad_S0, sll_list_len_next(list_next)), old(_dryad_S1, sll_list_len_next(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, rsrtl_reach(list_next)))), ==(old(_dryad_S0, rsrtl(list_next)), old(_dryad_S1, rsrtl(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl(SL#_dryad_S1, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, rsrtl_reach(list_next)))), ==(old(_dryad_S0, rsrtl_reach(list_next)), old(_dryad_S1, rsrtl_reach(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(list_next)))), ==(old(_dryad_S0, sll(list_next)), old(_dryad_S1, sll(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(list_next)))), ==(old(_dryad_S0, sll_reach(list_next)), old(_dryad_S1, sll_reach(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(list_next)))), ==(old(_dryad_S0, sll_max_key(list_next)), old(_dryad_S1, sll_max_key(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_max_key(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_max_key(SL#_dryad_S1, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(list_next)))), ==(old(_dryad_S0, sll_min_key(list_next)), old(_dryad_S1, sll_min_key(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_min_key(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_min_key(SL#_dryad_S1, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, srtl_reach(list_next)))), ==(old(_dryad_S0, srtl(list_next)), old(_dryad_S1, srtl(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl(SL#_dryad_S1, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, srtl_reach(list_next)))), ==(old(_dryad_S0, srtl_reach(list_next)), old(_dryad_S1, srtl_reach(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(local.l2)))), ==(old(_dryad_S0, sll_keys(local.l2)), old(_dryad_S1, sll_keys(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(local.l2)))), ==(old(_dryad_S0, sll_list_len_next(local.l2)), old(_dryad_S1, sll_list_len_next(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, rsrtl_reach(local.l2)))), ==(old(_dryad_S0, rsrtl(local.l2)), old(_dryad_S1, rsrtl(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl(SL#_dryad_S1, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, rsrtl_reach(local.l2)))), ==(old(_dryad_S0, rsrtl_reach(local.l2)), old(_dryad_S1, rsrtl_reach(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl_reach(SL#_dryad_S1, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(local.l2)))), ==(old(_dryad_S0, sll(local.l2)), old(_dryad_S1, sll(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(local.l2)))), ==(old(_dryad_S0, sll_reach(local.l2)), old(_dryad_S1, sll_reach(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(local.l2)))), ==(old(_dryad_S0, sll_max_key(local.l2)), old(_dryad_S1, sll_max_key(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_max_key(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_max_key(SL#_dryad_S1, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(local.l2)))), ==(old(_dryad_S0, sll_min_key(local.l2)), old(_dryad_S1, sll_min_key(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_min_key(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_min_key(SL#_dryad_S1, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, srtl_reach(local.l2)))), ==(old(_dryad_S0, srtl(local.l2)), old(_dryad_S1, srtl(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl(SL#_dryad_S1, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, srtl_reach(local.l2)))), ==(old(_dryad_S0, srtl_reach(local.l2)), old(_dryad_S1, srtl_reach(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl_reach(SL#_dryad_S1, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(local.l1)))), ==(old(_dryad_S0, sll_keys(local.l1)), old(_dryad_S1, sll_keys(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(local.l1)))), ==(old(_dryad_S0, sll_list_len_next(local.l1)), old(_dryad_S1, sll_list_len_next(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, rsrtl_reach(local.l1)))), ==(old(_dryad_S0, rsrtl(local.l1)), old(_dryad_S1, rsrtl(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl(SL#_dryad_S1, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, rsrtl_reach(local.l1)))), ==(old(_dryad_S0, rsrtl_reach(local.l1)), old(_dryad_S1, rsrtl_reach(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl_reach(SL#_dryad_S1, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(local.l1)))), ==(old(_dryad_S0, sll(local.l1)), old(_dryad_S1, sll(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(local.l1)))), ==(old(_dryad_S0, sll_reach(local.l1)), old(_dryad_S1, sll_reach(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(local.l1)))), ==(old(_dryad_S0, sll_max_key(local.l1)), old(_dryad_S1, sll_max_key(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_max_key(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_max_key(SL#_dryad_S1, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(local.l1)))), ==(old(_dryad_S0, sll_min_key(local.l1)), old(_dryad_S1, sll_min_key(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_min_key(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_min_key(SL#_dryad_S1, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, srtl_reach(local.l1)))), ==(old(_dryad_S0, srtl(local.l1)), old(_dryad_S1, srtl(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl(SL#_dryad_S1, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, srtl_reach(local.l1)))), ==(old(_dryad_S0, srtl_reach(local.l1)), old(_dryad_S1, srtl_reach(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl_reach(SL#_dryad_S1, $phys_ptr_cast(local.l1, ^s_node));
    // assume @_vcc_ptr_neq_null(list); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node));
    // _math \state _dryad_S2; 
    // _dryad_S2 := @_vcc_current_state(@state); 
    SL#_dryad_S2 := $current_state($s);
    // _math \state stmtexpr5#27; 
    // stmtexpr5#27 := _dryad_S2; 
    stmtexpr5#27 := SL#_dryad_S2;
    // assert @prim_writes_check((list->key)); 
    assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#list, ^s_node), s_node.key));
    // *(list->key) := -2147483648; 
    call $write_int(s_node.key, $phys_ptr_cast(L#list, ^s_node), -2147483648);
    assume $full_stop_ext(#tok$3^26.2, $s);
    // _math \state _dryad_S3; 
    // _dryad_S3 := @_vcc_current_state(@state); 
    SL#_dryad_S3 := $current_state($s);
    // _math \state stmtexpr6#28; 
    // stmtexpr6#28 := _dryad_S3; 
    stmtexpr6#28 := SL#_dryad_S3;
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(*((list->next)))))), ==(old(_dryad_S2, sll_keys(*((list->next)))), old(_dryad_S3, sll_keys(*((list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) == F#sll_keys(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(*((list->next)))))), ==(old(_dryad_S2, sll_list_len_next(*((list->next)))), old(_dryad_S3, sll_list_len_next(*((list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, rsrtl_reach(*((list->next)))))), ==(old(_dryad_S2, rsrtl(*((list->next)))), old(_dryad_S3, rsrtl(*((list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) == F#rsrtl(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, rsrtl_reach(*((list->next)))))), ==(old(_dryad_S2, rsrtl_reach(*((list->next)))), old(_dryad_S3, rsrtl_reach(*((list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(*((list->next)))))), ==(old(_dryad_S2, sll(*((list->next)))), old(_dryad_S3, sll(*((list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) ==> F#sll(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) == F#sll(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(*((list->next)))))), ==(old(_dryad_S2, sll_reach(*((list->next)))), old(_dryad_S3, sll_reach(*((list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) == F#sll_reach(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(*((list->next)))))), ==(old(_dryad_S2, sll_max_key(*((list->next)))), old(_dryad_S3, sll_max_key(*((list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) == F#sll_max_key(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(*((list->next)))))), ==(old(_dryad_S2, sll_min_key(*((list->next)))), old(_dryad_S3, sll_min_key(*((list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) == F#sll_min_key(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, srtl_reach(*((list->next)))))), ==(old(_dryad_S2, srtl(*((list->next)))), old(_dryad_S3, srtl(*((list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) ==> F#srtl(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) == F#srtl(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, srtl_reach(*((list->next)))))), ==(old(_dryad_S2, srtl_reach(*((list->next)))), old(_dryad_S3, srtl_reach(*((list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) == F#srtl_reach(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node));
    // assume ==(old(_dryad_S2, sll_list_len_next(list)), old(_dryad_S3, sll_list_len_next(list))); 
    assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#list, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#list, ^s_node));
    // assume ==(old(_dryad_S2, rsrtl_reach(list)), old(_dryad_S3, rsrtl_reach(list))); 
    assume F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#list, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#list, ^s_node));
    // assume ==(old(_dryad_S2, sll(list)), old(_dryad_S3, sll(list))); 
    assume F#sll(SL#_dryad_S2, $phys_ptr_cast(L#list, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#list, ^s_node));
    // assume ==(old(_dryad_S2, sll_reach(list)), old(_dryad_S3, sll_reach(list))); 
    assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#list, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#list, ^s_node));
    // assume ==(old(_dryad_S2, srtl_reach(list)), old(_dryad_S3, srtl_reach(list))); 
    assume F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#list, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#list, ^s_node));
    // assume ==(old(_dryad_S2, sll_list_len_next(l)), old(_dryad_S3, sll_list_len_next(l))); 
    assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==(old(_dryad_S2, rsrtl_reach(l)), old(_dryad_S3, rsrtl_reach(l))); 
    assume F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==(old(_dryad_S2, sll(l)), old(_dryad_S3, sll(l))); 
    assume F#sll(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==(old(_dryad_S2, sll_reach(l)), old(_dryad_S3, sll_reach(l))); 
    assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==(old(_dryad_S2, srtl_reach(l)), old(_dryad_S3, srtl_reach(l))); 
    assume F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==(old(_dryad_S2, sll_list_len_next(list_next)), old(_dryad_S3, sll_list_len_next(list_next))); 
    assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==(old(_dryad_S2, rsrtl_reach(list_next)), old(_dryad_S3, rsrtl_reach(list_next))); 
    assume F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==(old(_dryad_S2, sll(list_next)), old(_dryad_S3, sll(list_next))); 
    assume F#sll(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==(old(_dryad_S2, sll_reach(list_next)), old(_dryad_S3, sll_reach(list_next))); 
    assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==(old(_dryad_S2, srtl_reach(list_next)), old(_dryad_S3, srtl_reach(list_next))); 
    assume F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==(old(_dryad_S2, sll_list_len_next(local.l2)), old(_dryad_S3, sll_list_len_next(local.l2))); 
    assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==(old(_dryad_S2, rsrtl_reach(local.l2)), old(_dryad_S3, rsrtl_reach(local.l2))); 
    assume F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==(old(_dryad_S2, sll(local.l2)), old(_dryad_S3, sll(local.l2))); 
    assume F#sll(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==(old(_dryad_S2, sll_reach(local.l2)), old(_dryad_S3, sll_reach(local.l2))); 
    assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==(old(_dryad_S2, srtl_reach(local.l2)), old(_dryad_S3, srtl_reach(local.l2))); 
    assume F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==(old(_dryad_S2, sll_list_len_next(local.l1)), old(_dryad_S3, sll_list_len_next(local.l1))); 
    assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==(old(_dryad_S2, rsrtl_reach(local.l1)), old(_dryad_S3, rsrtl_reach(local.l1))); 
    assume F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==(old(_dryad_S2, sll(local.l1)), old(_dryad_S3, sll(local.l1))); 
    assume F#sll(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==(old(_dryad_S2, sll_reach(local.l1)), old(_dryad_S3, sll_reach(local.l1))); 
    assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==(old(_dryad_S2, srtl_reach(local.l1)), old(_dryad_S3, srtl_reach(local.l1))); 
    assume F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(l)))), ==(old(_dryad_S2, sll_keys(l)), old(_dryad_S3, sll_keys(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(l)))), ==(old(_dryad_S2, sll_list_len_next(l)), old(_dryad_S3, sll_list_len_next(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, rsrtl_reach(l)))), ==(old(_dryad_S2, rsrtl(l)), old(_dryad_S3, rsrtl(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#rsrtl(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, rsrtl_reach(l)))), ==(old(_dryad_S2, rsrtl_reach(l)), old(_dryad_S3, rsrtl_reach(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(l)))), ==(old(_dryad_S2, sll(l)), old(_dryad_S3, sll(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(l)))), ==(old(_dryad_S2, sll_reach(l)), old(_dryad_S3, sll_reach(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(l)))), ==(old(_dryad_S2, sll_max_key(l)), old(_dryad_S3, sll_max_key(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#sll_max_key(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(l)))), ==(old(_dryad_S2, sll_min_key(l)), old(_dryad_S3, sll_min_key(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#sll_min_key(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, srtl_reach(l)))), ==(old(_dryad_S2, srtl(l)), old(_dryad_S3, srtl(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#srtl(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, srtl_reach(l)))), ==(old(_dryad_S2, srtl_reach(l)), old(_dryad_S3, srtl_reach(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(list_next)))), ==(old(_dryad_S2, sll_keys(list_next)), old(_dryad_S3, sll_keys(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(list_next)))), ==(old(_dryad_S2, sll_list_len_next(list_next)), old(_dryad_S3, sll_list_len_next(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, rsrtl_reach(list_next)))), ==(old(_dryad_S2, rsrtl(list_next)), old(_dryad_S3, rsrtl(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, rsrtl_reach(list_next)))), ==(old(_dryad_S2, rsrtl_reach(list_next)), old(_dryad_S3, rsrtl_reach(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(list_next)))), ==(old(_dryad_S2, sll(list_next)), old(_dryad_S3, sll(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(list_next)))), ==(old(_dryad_S2, sll_reach(list_next)), old(_dryad_S3, sll_reach(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(list_next)))), ==(old(_dryad_S2, sll_max_key(list_next)), old(_dryad_S3, sll_max_key(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_max_key(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(list_next)))), ==(old(_dryad_S2, sll_min_key(list_next)), old(_dryad_S3, sll_min_key(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_min_key(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, srtl_reach(list_next)))), ==(old(_dryad_S2, srtl(list_next)), old(_dryad_S3, srtl(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, srtl_reach(list_next)))), ==(old(_dryad_S2, srtl_reach(list_next)), old(_dryad_S3, srtl_reach(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(local.l2)))), ==(old(_dryad_S2, sll_keys(local.l2)), old(_dryad_S3, sll_keys(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(local.l2)))), ==(old(_dryad_S2, sll_list_len_next(local.l2)), old(_dryad_S3, sll_list_len_next(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, rsrtl_reach(local.l2)))), ==(old(_dryad_S2, rsrtl(local.l2)), old(_dryad_S3, rsrtl(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, rsrtl_reach(local.l2)))), ==(old(_dryad_S2, rsrtl_reach(local.l2)), old(_dryad_S3, rsrtl_reach(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(local.l2)))), ==(old(_dryad_S2, sll(local.l2)), old(_dryad_S3, sll(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(local.l2)))), ==(old(_dryad_S2, sll_reach(local.l2)), old(_dryad_S3, sll_reach(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(local.l2)))), ==(old(_dryad_S2, sll_max_key(local.l2)), old(_dryad_S3, sll_max_key(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_max_key(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(local.l2)))), ==(old(_dryad_S2, sll_min_key(local.l2)), old(_dryad_S3, sll_min_key(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_min_key(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, srtl_reach(local.l2)))), ==(old(_dryad_S2, srtl(local.l2)), old(_dryad_S3, srtl(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, srtl_reach(local.l2)))), ==(old(_dryad_S2, srtl_reach(local.l2)), old(_dryad_S3, srtl_reach(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(local.l1)))), ==(old(_dryad_S2, sll_keys(local.l1)), old(_dryad_S3, sll_keys(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(local.l1)))), ==(old(_dryad_S2, sll_list_len_next(local.l1)), old(_dryad_S3, sll_list_len_next(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, rsrtl_reach(local.l1)))), ==(old(_dryad_S2, rsrtl(local.l1)), old(_dryad_S3, rsrtl(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, rsrtl_reach(local.l1)))), ==(old(_dryad_S2, rsrtl_reach(local.l1)), old(_dryad_S3, rsrtl_reach(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(local.l1)))), ==(old(_dryad_S2, sll(local.l1)), old(_dryad_S3, sll(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(local.l1)))), ==(old(_dryad_S2, sll_reach(local.l1)), old(_dryad_S3, sll_reach(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(local.l1)))), ==(old(_dryad_S2, sll_max_key(local.l1)), old(_dryad_S3, sll_max_key(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_max_key(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(local.l1)))), ==(old(_dryad_S2, sll_min_key(local.l1)), old(_dryad_S3, sll_min_key(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_min_key(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, srtl_reach(local.l1)))), ==(old(_dryad_S2, srtl(local.l1)), old(_dryad_S3, srtl(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, srtl_reach(local.l1)))), ==(old(_dryad_S2, srtl_reach(local.l1)), old(_dryad_S3, srtl_reach(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(list, l)), ==(*((l->key)), old(_dryad_S2, *((l->key))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(L#l, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(list, l)), @_vcc_ptr_eq_pure(*((l->next)), old(_dryad_S2, *((l->next))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(L#l, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(list, list_next)), ==(*((list_next->key)), old(_dryad_S2, *((list_next->key))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(list, list_next)), @_vcc_ptr_eq_pure(*((list_next->next)), old(_dryad_S2, *((list_next->next))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(list, local.l2)), ==(*((local.l2->key)), old(_dryad_S2, *((local.l2->key))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(list, local.l2)), @_vcc_ptr_eq_pure(*((local.l2->next)), old(_dryad_S2, *((local.l2->next))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(list, local.l1)), ==(*((local.l1->key)), old(_dryad_S2, *((local.l1->key))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(list, local.l1)), @_vcc_ptr_eq_pure(*((local.l1->next)), old(_dryad_S2, *((local.l1->next))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node);
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // _math \state _dryad_S4; 
    // _dryad_S4 := @_vcc_current_state(@state); 
    SL#_dryad_S4 := $current_state($s);
    // _math \state stmtexpr7#29; 
    // stmtexpr7#29 := _dryad_S4; 
    stmtexpr7#29 := SL#_dryad_S4;
    // assert @prim_writes_check((list->next)); 
    assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#list, ^s_node), s_node.next));
    // *(list->next) := (struct s_node*)@null; 
    call $write_int(s_node.next, $phys_ptr_cast(L#list, ^s_node), $ptr_to_int($phys_ptr_cast($null, ^s_node)));
    assume $full_stop_ext(#tok$3^27.2, $s);
    // _math \state _dryad_S5; 
    // _dryad_S5 := @_vcc_current_state(@state); 
    SL#_dryad_S5 := $current_state($s);
    // _math \state stmtexpr8#30; 
    // stmtexpr8#30 := _dryad_S5; 
    stmtexpr8#30 := SL#_dryad_S5;
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(l)))), ==(old(_dryad_S4, sll_keys(l)), old(_dryad_S5, sll_keys(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(l)))), ==(old(_dryad_S4, sll_list_len_next(l)), old(_dryad_S5, sll_list_len_next(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, rsrtl_reach(l)))), ==(old(_dryad_S4, rsrtl(l)), old(_dryad_S5, rsrtl(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node))) ==> F#rsrtl(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node)) == F#rsrtl(SL#_dryad_S5, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, rsrtl_reach(l)))), ==(old(_dryad_S4, rsrtl_reach(l)), old(_dryad_S5, rsrtl_reach(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node)) == F#rsrtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(l)))), ==(old(_dryad_S4, sll(l)), old(_dryad_S5, sll(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(l)))), ==(old(_dryad_S4, sll_reach(l)), old(_dryad_S5, sll_reach(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(l)))), ==(old(_dryad_S4, sll_max_key(l)), old(_dryad_S5, sll_max_key(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_max_key(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node)) == F#sll_max_key(SL#_dryad_S5, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(l)))), ==(old(_dryad_S4, sll_min_key(l)), old(_dryad_S5, sll_min_key(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_min_key(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node)) == F#sll_min_key(SL#_dryad_S5, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, srtl_reach(l)))), ==(old(_dryad_S4, srtl(l)), old(_dryad_S5, srtl(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node)) == F#srtl(SL#_dryad_S5, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, srtl_reach(l)))), ==(old(_dryad_S4, srtl_reach(l)), old(_dryad_S5, srtl_reach(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node)) == F#srtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(list_next)))), ==(old(_dryad_S4, sll_keys(list_next)), old(_dryad_S5, sll_keys(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(list_next)))), ==(old(_dryad_S4, sll_list_len_next(list_next)), old(_dryad_S5, sll_list_len_next(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, rsrtl_reach(list_next)))), ==(old(_dryad_S4, rsrtl(list_next)), old(_dryad_S5, rsrtl(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl(SL#_dryad_S5, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, rsrtl_reach(list_next)))), ==(old(_dryad_S4, rsrtl_reach(list_next)), old(_dryad_S5, rsrtl_reach(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(list_next)))), ==(old(_dryad_S4, sll(list_next)), old(_dryad_S5, sll(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(list_next)))), ==(old(_dryad_S4, sll_reach(list_next)), old(_dryad_S5, sll_reach(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(list_next)))), ==(old(_dryad_S4, sll_max_key(list_next)), old(_dryad_S5, sll_max_key(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_max_key(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_max_key(SL#_dryad_S5, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(list_next)))), ==(old(_dryad_S4, sll_min_key(list_next)), old(_dryad_S5, sll_min_key(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_min_key(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_min_key(SL#_dryad_S5, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, srtl_reach(list_next)))), ==(old(_dryad_S4, srtl(list_next)), old(_dryad_S5, srtl(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl(SL#_dryad_S5, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, srtl_reach(list_next)))), ==(old(_dryad_S4, srtl_reach(list_next)), old(_dryad_S5, srtl_reach(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(local.l2)))), ==(old(_dryad_S4, sll_keys(local.l2)), old(_dryad_S5, sll_keys(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(local.l2)))), ==(old(_dryad_S4, sll_list_len_next(local.l2)), old(_dryad_S5, sll_list_len_next(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, rsrtl_reach(local.l2)))), ==(old(_dryad_S4, rsrtl(local.l2)), old(_dryad_S5, rsrtl(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl(SL#_dryad_S5, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, rsrtl_reach(local.l2)))), ==(old(_dryad_S4, rsrtl_reach(local.l2)), old(_dryad_S5, rsrtl_reach(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl_reach(SL#_dryad_S5, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(local.l2)))), ==(old(_dryad_S4, sll(local.l2)), old(_dryad_S5, sll(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(local.l2)))), ==(old(_dryad_S4, sll_reach(local.l2)), old(_dryad_S5, sll_reach(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(local.l2)))), ==(old(_dryad_S4, sll_max_key(local.l2)), old(_dryad_S5, sll_max_key(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_max_key(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_max_key(SL#_dryad_S5, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(local.l2)))), ==(old(_dryad_S4, sll_min_key(local.l2)), old(_dryad_S5, sll_min_key(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_min_key(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_min_key(SL#_dryad_S5, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, srtl_reach(local.l2)))), ==(old(_dryad_S4, srtl(local.l2)), old(_dryad_S5, srtl(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl(SL#_dryad_S5, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, srtl_reach(local.l2)))), ==(old(_dryad_S4, srtl_reach(local.l2)), old(_dryad_S5, srtl_reach(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl_reach(SL#_dryad_S5, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(local.l1)))), ==(old(_dryad_S4, sll_keys(local.l1)), old(_dryad_S5, sll_keys(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(local.l1)))), ==(old(_dryad_S4, sll_list_len_next(local.l1)), old(_dryad_S5, sll_list_len_next(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, rsrtl_reach(local.l1)))), ==(old(_dryad_S4, rsrtl(local.l1)), old(_dryad_S5, rsrtl(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl(SL#_dryad_S5, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, rsrtl_reach(local.l1)))), ==(old(_dryad_S4, rsrtl_reach(local.l1)), old(_dryad_S5, rsrtl_reach(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl_reach(SL#_dryad_S5, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(local.l1)))), ==(old(_dryad_S4, sll(local.l1)), old(_dryad_S5, sll(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(local.l1)))), ==(old(_dryad_S4, sll_reach(local.l1)), old(_dryad_S5, sll_reach(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(local.l1)))), ==(old(_dryad_S4, sll_max_key(local.l1)), old(_dryad_S5, sll_max_key(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_max_key(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_max_key(SL#_dryad_S5, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(local.l1)))), ==(old(_dryad_S4, sll_min_key(local.l1)), old(_dryad_S5, sll_min_key(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_min_key(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_min_key(SL#_dryad_S5, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, srtl_reach(local.l1)))), ==(old(_dryad_S4, srtl(local.l1)), old(_dryad_S5, srtl(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl(SL#_dryad_S5, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, srtl_reach(local.l1)))), ==(old(_dryad_S4, srtl_reach(local.l1)), old(_dryad_S5, srtl_reach(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl_reach(SL#_dryad_S5, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(list, l)), ==(*((l->key)), old(_dryad_S4, *((l->key))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(L#l, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(list, l)), @_vcc_ptr_eq_pure(*((l->next)), old(_dryad_S4, *((l->next))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(L#l, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(list, list_next)), ==(*((list_next->key)), old(_dryad_S4, *((list_next->key))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(list, list_next)), @_vcc_ptr_eq_pure(*((list_next->next)), old(_dryad_S4, *((list_next->next))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(list, local.l2)), ==(*((local.l2->key)), old(_dryad_S4, *((local.l2->key))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(list, local.l2)), @_vcc_ptr_eq_pure(*((local.l2->next)), old(_dryad_S4, *((local.l2->next))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(list, local.l1)), ==(*((local.l1->key)), old(_dryad_S4, *((local.l1->key))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(list, local.l1)), @_vcc_ptr_eq_pure(*((local.l1->next)), old(_dryad_S4, *((local.l1->next))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node);
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // l := list; 
    L#l := $phys_ptr_cast(L#list, ^s_node);
    // assert sll_lseg(list, list); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#list, ^s_node));
    // assume sll_lseg(list, list); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#list, ^s_node));
    // assert srtl_lseg(list, list); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#list, ^s_node));
    // assume srtl_lseg(list, list); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#list, ^s_node));
    // assert sll_lseg(l, l); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#l, ^s_node), $phys_ptr_cast(L#l, ^s_node));
    // assume sll_lseg(l, l); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#l, ^s_node), $phys_ptr_cast(L#l, ^s_node));
    // assert srtl_lseg(l, l); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#l, ^s_node), $phys_ptr_cast(L#l, ^s_node));
    // assume srtl_lseg(l, l); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#l, ^s_node), $phys_ptr_cast(L#l, ^s_node));
    // assert sll_lseg(list_next, list_next); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#list_next, ^s_node), $phys_ptr_cast(L#list_next, ^s_node));
    // assume sll_lseg(list_next, list_next); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#list_next, ^s_node), $phys_ptr_cast(L#list_next, ^s_node));
    // assert srtl_lseg(list_next, list_next); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#list_next, ^s_node), $phys_ptr_cast(L#list_next, ^s_node));
    // assume srtl_lseg(list_next, list_next); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#list_next, ^s_node), $phys_ptr_cast(L#list_next, ^s_node));
    // assert sll_lseg(local.l2, local.l2); 
    assert F#sll_lseg($s, $phys_ptr_cast(local.l2, ^s_node), $phys_ptr_cast(local.l2, ^s_node));
    // assume sll_lseg(local.l2, local.l2); 
    assume F#sll_lseg($s, $phys_ptr_cast(local.l2, ^s_node), $phys_ptr_cast(local.l2, ^s_node));
    // assert srtl_lseg(local.l2, local.l2); 
    assert F#srtl_lseg($s, $phys_ptr_cast(local.l2, ^s_node), $phys_ptr_cast(local.l2, ^s_node));
    // assume srtl_lseg(local.l2, local.l2); 
    assume F#srtl_lseg($s, $phys_ptr_cast(local.l2, ^s_node), $phys_ptr_cast(local.l2, ^s_node));
    // assert sll_lseg(local.l1, local.l1); 
    assert F#sll_lseg($s, $phys_ptr_cast(local.l1, ^s_node), $phys_ptr_cast(local.l1, ^s_node));
    // assume sll_lseg(local.l1, local.l1); 
    assume F#sll_lseg($s, $phys_ptr_cast(local.l1, ^s_node), $phys_ptr_cast(local.l1, ^s_node));
    // assert srtl_lseg(local.l1, local.l1); 
    assert F#srtl_lseg($s, $phys_ptr_cast(local.l1, ^s_node), $phys_ptr_cast(local.l1, ^s_node));
    // assume srtl_lseg(local.l1, local.l1); 
    assume F#srtl_lseg($s, $phys_ptr_cast(local.l1, ^s_node), $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), <=(-2147483648, sll_min_key(local.l1))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> -2147483648 <= F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), <=(-2147483648, sll_min_key(local.l2))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> -2147483648 <= F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(@_vcc_ptr_neq_null(l), &&(@_vcc_mutable(@state, l), @writes_check(l))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> $mutable($s, $phys_ptr_cast(L#l, ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(L#l, ^s_node));
    // struct s_node* list2; 
    // list2 := list; 
    SL#list2 := $phys_ptr_cast(L#list, ^s_node);
    // struct s_node* stmtexpr9#31; 
    // stmtexpr9#31 := list2; 
    stmtexpr9#31 := $phys_ptr_cast(SL#list2, ^s_node);
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assert @reads_check_normal((list->next)); 
    assert $thread_local($s, $phys_ptr_cast(L#list, ^s_node));
    // list_next := *((list->next)); 
    L#list_next := $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node);
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    loopState#0 := $s;
    assume true;
p0000 := (F#srtl($s,$phys_ptr_cast(P#l1,^s_node)));
p0001 := (F#srtl($s,$phys_ptr_cast(P#l2,^s_node)));
p0002 := (F#srtl($s,$phys_ptr_cast(L#list,^s_node)));
p0003 := (F#srtl($s,$phys_ptr_cast(L#l,^s_node)));
p0004 := (F#srtl($s,$phys_ptr_cast(L#list_next,^s_node)));
p0005 := (F#srtl($s,$phys_ptr_cast(local.l1,^s_node)));
p0006 := (F#srtl($s,$phys_ptr_cast(local.l2,^s_node)));
p0007 := (F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)));
p0008 := (F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)));
p0009 := (F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)));
p0010 := (F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)));
p0011 := (F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)));
p0012 := (F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)));
p0013 := (F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)));
p0014 := (F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)));
p0015 := (F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)));
p0016 := (F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)));
p0017 := (F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)));
p0018 := (F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)));
p0019 := (F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)));
p0020 := (F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)));
p0021 := (F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)));
p0022 := (F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)));
p0023 := (F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)));
p0024 := (F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)));
p0025 := (F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)));
p0026 := (F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)));
p0027 := (F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)));
p0028 := (F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)));
p0029 := (F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)));
p0030 := (F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)));
p0031 := (F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)));
p0032 := (F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)));
p0033 := (F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)));
p0034 := (F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)));
p0035 := (F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)));
p0036 := (F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)));
p0037 := (F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)));
p0038 := (F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)));
p0039 := (F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)));
p0040 := (F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)));
p0041 := (F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)));
p0042 := (F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)));
p0043 := (F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)));
p0044 := (F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)));
p0045 := (F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)));
p0046 := (F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)));
p0047 := (F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)));
p0048 := (F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)));
p0049 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0050 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0051 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0052 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0053 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0054 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0055 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0056 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0057 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0058 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0059 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0060 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0061 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0062 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0063 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0064 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0065 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0066 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0067 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0068 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0069 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0070 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0071 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0072 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0073 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0074 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0075 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0076 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0077 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0078 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0079 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0080 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0081 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0082 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0083 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0084 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0085 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0086 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0087 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0088 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0089 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0090 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0091 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0092 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0093 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0094 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0095 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0096 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0097 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0098 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0099 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0100 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0101 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0102 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0103 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0104 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0105 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0106 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0107 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0108 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0109 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0110 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0111 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0112 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0113 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0114 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0115 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0116 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0117 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0118 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0119 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0120 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0121 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0122 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0123 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0124 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0125 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0126 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0127 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0128 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0129 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0130 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0131 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0132 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0133 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0134 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0135 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0136 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0137 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0138 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0139 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0140 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0141 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0142 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0143 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0144 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0145 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0146 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0147 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0148 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0149 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0150 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0151 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0152 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0153 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0154 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0155 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0156 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0157 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0158 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0159 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0160 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0161 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0162 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0163 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0164 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0165 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0166 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0167 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0168 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0169 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0170 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0171 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0172 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0173 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0174 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0175 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0176 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0177 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0178 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0179 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0180 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0181 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0182 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0183 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0184 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0185 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0186 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0187 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0188 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0189 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0190 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0191 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0192 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0193 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0194 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0195 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0196 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0197 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0198 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0199 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0200 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0201 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0202 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0203 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0204 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0205 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0206 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0207 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0208 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0209 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0210 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0211 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0212 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0213 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0214 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0215 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0216 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0217 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0218 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0219 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0220 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0221 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0222 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0223 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0224 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0225 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0226 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0227 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0228 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0229 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0230 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0231 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0232 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0233 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0234 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0235 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0236 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0237 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0238 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0239 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0240 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0241 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0242 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0243 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0244 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0245 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0246 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0247 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0248 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0249 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0250 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0251 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0252 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0253 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0254 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0255 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0256 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0257 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0258 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0259 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0260 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0261 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0262 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0263 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0264 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0265 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0266 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0267 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0268 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0269 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0270 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0271 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0272 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0273 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0274 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0275 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0276 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0277 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0278 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0279 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0280 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0281 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0282 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0283 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0284 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0285 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0286 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0287 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0288 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0289 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0290 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0291 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0292 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0293 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0294 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0295 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0296 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0297 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0298 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0299 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0300 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0301 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0302 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0303 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0304 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0305 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0306 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0307 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0308 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0309 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0310 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0311 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0312 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0313 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0314 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0315 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0316 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0317 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0318 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0319 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0320 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0321 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0322 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0323 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0324 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0325 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0326 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0327 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0328 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0329 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0330 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0331 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0332 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0333 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0334 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0335 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0336 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0337 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0338 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0339 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0340 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0341 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0342 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0343 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0344 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0345 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0346 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0347 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0348 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0349 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0350 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0351 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0352 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0353 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0354 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0355 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0356 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0357 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0358 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0359 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0360 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0361 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0362 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0363 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0364 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0365 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0366 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0367 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0368 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0369 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0370 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0371 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0372 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0373 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0374 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0375 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0376 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0377 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0378 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0379 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0380 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0381 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0382 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0383 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0384 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0385 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0386 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0387 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0388 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0389 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0390 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0391 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0392 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0393 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0394 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0395 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0396 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0397 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0398 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0399 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0400 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0401 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0402 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0403 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0404 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0405 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0406 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0407 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0408 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0409 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0410 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0411 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0412 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0413 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0414 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0415 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0416 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0417 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0418 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0419 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0420 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0421 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0422 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0423 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0424 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0425 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0426 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0427 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0428 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0429 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0430 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0431 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0432 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0433 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0434 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0435 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0436 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0437 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0438 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0439 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0440 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0441 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0442 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0443 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0444 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0445 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0446 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0447 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0448 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0449 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0450 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0451 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0452 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0453 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0454 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0455 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0456 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0457 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0458 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0459 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0460 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0461 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0462 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0463 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0464 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0465 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0466 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0467 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0468 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0469 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0470 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0471 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0472 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0473 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0474 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0475 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0476 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0477 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0478 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0479 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0480 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0481 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0482 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0483 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0484 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0485 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0486 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0487 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0488 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0489 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0490 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0491 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0492 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0493 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0494 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0495 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0496 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0497 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0498 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0499 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0500 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0501 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0502 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0503 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0504 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0505 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0506 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0507 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0508 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0509 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0510 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0511 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0512 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0513 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0514 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0515 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0516 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0517 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0518 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0519 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0520 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0521 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0522 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0523 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0524 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0525 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0526 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0527 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0528 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0529 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0530 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0531 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0532 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0533 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0534 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0535 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0536 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0537 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0538 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0539 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0540 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0541 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0542 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0543 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0544 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0545 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0546 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0547 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0548 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0549 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0550 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0551 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0552 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0553 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0554 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0555 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0556 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0557 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0558 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0559 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0560 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0561 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0562 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0563 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0564 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0565 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0566 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0567 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0568 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0569 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0570 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0571 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0572 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0573 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0574 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0575 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0576 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0577 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0578 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0579 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0580 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0581 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0582 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0583 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0584 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0585 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0586 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0587 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0588 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0589 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0590 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0591 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0592 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0593 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0594 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0595 := ($non_null($phys_ptr_cast(P#l1,^s_node)));
p0596 := ($non_null($phys_ptr_cast(P#l2,^s_node)));
p0597 := ($non_null($phys_ptr_cast(L#list,^s_node)));
p0598 := ($non_null($phys_ptr_cast(L#l,^s_node)));
p0599 := ($non_null($phys_ptr_cast(L#list_next,^s_node)));
p0600 := ($non_null($phys_ptr_cast(local.l1,^s_node)));
p0601 := ($non_null($phys_ptr_cast(local.l2,^s_node)));
p0602 := ($is_null($phys_ptr_cast(P#l1,^s_node)));
p0603 := ($is_null($phys_ptr_cast(P#l2,^s_node)));
p0604 := ($is_null($phys_ptr_cast(L#list,^s_node)));
p0605 := ($is_null($phys_ptr_cast(L#l,^s_node)));
p0606 := ($is_null($phys_ptr_cast(L#list_next,^s_node)));
p0607 := ($is_null($phys_ptr_cast(local.l1,^s_node)));
p0608 := ($is_null($phys_ptr_cast(local.l2,^s_node)));
p0609 := (($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(P#l2,^s_node)));
p0610 := (($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list,^s_node)));
p0611 := (($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#l,^s_node)));
p0612 := (($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node)));
p0613 := (($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l1,^s_node)));
p0614 := (($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l2,^s_node)));
p0615 := (($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(P#l1,^s_node)));
p0616 := (($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list,^s_node)));
p0617 := (($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#l,^s_node)));
p0618 := (($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node)));
p0619 := (($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l1,^s_node)));
p0620 := (($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l2,^s_node)));
p0621 := (($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l1,^s_node)));
p0622 := (($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l2,^s_node)));
p0623 := (($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#l,^s_node)));
p0624 := (($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#list_next,^s_node)));
p0625 := (($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l1,^s_node)));
p0626 := (($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l2,^s_node)));
p0627 := (($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l1,^s_node)));
p0628 := (($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l2,^s_node)));
p0629 := (($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list,^s_node)));
p0630 := (($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list_next,^s_node)));
p0631 := (($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l1,^s_node)));
p0632 := (($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l2,^s_node)));
p0633 := (($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l1,^s_node)));
p0634 := (($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l2,^s_node)));
p0635 := (($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#list,^s_node)));
p0636 := (($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#l,^s_node)));
p0637 := (($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l1,^s_node)));
p0638 := (($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l2,^s_node)));
p0639 := (($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l1,^s_node)));
p0640 := (($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l2,^s_node)));
p0641 := (($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list,^s_node)));
p0642 := (($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#l,^s_node)));
p0643 := (($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node)));
p0644 := (($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(local.l2,^s_node)));
p0645 := (($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l1,^s_node)));
p0646 := (($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l2,^s_node)));
p0647 := (($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list,^s_node)));
p0648 := (($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#l,^s_node)));
p0649 := (($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node)));
p0650 := (($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(local.l1,^s_node)));
p0651 := (($non_null($phys_ptr_cast(P#l1,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l1,^s_node),^s_node))));
p0652 := (($non_null($phys_ptr_cast(P#l2,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l2,^s_node),^s_node))));
p0653 := (($non_null($phys_ptr_cast(L#list,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list,^s_node),^s_node))));
p0654 := (($non_null($phys_ptr_cast(L#l,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#l,^s_node),^s_node))));
p0655 := (($non_null($phys_ptr_cast(L#list_next,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list_next,^s_node),^s_node))));
p0656 := (($non_null($phys_ptr_cast(local.l1,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l1,^s_node),^s_node))));
p0657 := (($non_null($phys_ptr_cast(local.l2,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l2,^s_node),^s_node))));
p0658 := (($non_null($phys_ptr_cast(P#l1,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l1,^s_node),^s_node))));
p0659 := (($non_null($phys_ptr_cast(P#l2,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l2,^s_node),^s_node))));
p0660 := (($non_null($phys_ptr_cast(L#list,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list,^s_node),^s_node))));
p0661 := (($non_null($phys_ptr_cast(L#l,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#l,^s_node),^s_node))));
p0662 := (($non_null($phys_ptr_cast(L#list_next,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list_next,^s_node),^s_node))));
p0663 := (($non_null($phys_ptr_cast(local.l1,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l1,^s_node),^s_node))));
p0664 := (($non_null($phys_ptr_cast(local.l2,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l2,^s_node),^s_node))));
p0665 := (($non_null($phys_ptr_cast(P#l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l1,^s_node),^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p0666 := (($non_null($phys_ptr_cast(P#l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l1,^s_node),^s_node) == $phys_ptr_cast(L#list,^s_node))));
p0667 := (($non_null($phys_ptr_cast(P#l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l1,^s_node),^s_node) == $phys_ptr_cast(L#l,^s_node))));
p0668 := (($non_null($phys_ptr_cast(P#l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l1,^s_node),^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p0669 := (($non_null($phys_ptr_cast(P#l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l1,^s_node),^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p0670 := (($non_null($phys_ptr_cast(P#l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l1,^s_node),^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p0671 := (($non_null($phys_ptr_cast(P#l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l2,^s_node),^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p0672 := (($non_null($phys_ptr_cast(P#l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l2,^s_node),^s_node) == $phys_ptr_cast(L#list,^s_node))));
p0673 := (($non_null($phys_ptr_cast(P#l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l2,^s_node),^s_node) == $phys_ptr_cast(L#l,^s_node))));
p0674 := (($non_null($phys_ptr_cast(P#l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l2,^s_node),^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p0675 := (($non_null($phys_ptr_cast(P#l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l2,^s_node),^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p0676 := (($non_null($phys_ptr_cast(P#l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l2,^s_node),^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p0677 := (($non_null($phys_ptr_cast(L#list,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list,^s_node),^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p0678 := (($non_null($phys_ptr_cast(L#list,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list,^s_node),^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p0679 := (($non_null($phys_ptr_cast(L#list,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list,^s_node),^s_node) == $phys_ptr_cast(L#l,^s_node))));
p0680 := (($non_null($phys_ptr_cast(L#list,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list,^s_node),^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p0681 := (($non_null($phys_ptr_cast(L#list,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list,^s_node),^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p0682 := (($non_null($phys_ptr_cast(L#list,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list,^s_node),^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p0683 := (($non_null($phys_ptr_cast(L#l,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#l,^s_node),^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p0684 := (($non_null($phys_ptr_cast(L#l,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#l,^s_node),^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p0685 := (($non_null($phys_ptr_cast(L#l,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#l,^s_node),^s_node) == $phys_ptr_cast(L#list,^s_node))));
p0686 := (($non_null($phys_ptr_cast(L#l,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#l,^s_node),^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p0687 := (($non_null($phys_ptr_cast(L#l,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#l,^s_node),^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p0688 := (($non_null($phys_ptr_cast(L#l,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#l,^s_node),^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p0689 := (($non_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list_next,^s_node),^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p0690 := (($non_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list_next,^s_node),^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p0691 := (($non_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list_next,^s_node),^s_node) == $phys_ptr_cast(L#list,^s_node))));
p0692 := (($non_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list_next,^s_node),^s_node) == $phys_ptr_cast(L#l,^s_node))));
p0693 := (($non_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list_next,^s_node),^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p0694 := (($non_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list_next,^s_node),^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p0695 := (($non_null($phys_ptr_cast(local.l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l1,^s_node),^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p0696 := (($non_null($phys_ptr_cast(local.l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l1,^s_node),^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p0697 := (($non_null($phys_ptr_cast(local.l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l1,^s_node),^s_node) == $phys_ptr_cast(L#list,^s_node))));
p0698 := (($non_null($phys_ptr_cast(local.l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l1,^s_node),^s_node) == $phys_ptr_cast(L#l,^s_node))));
p0699 := (($non_null($phys_ptr_cast(local.l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l1,^s_node),^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p0700 := (($non_null($phys_ptr_cast(local.l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l1,^s_node),^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p0701 := (($non_null($phys_ptr_cast(local.l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l2,^s_node),^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p0702 := (($non_null($phys_ptr_cast(local.l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l2,^s_node),^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p0703 := (($non_null($phys_ptr_cast(local.l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l2,^s_node),^s_node) == $phys_ptr_cast(L#list,^s_node))));
p0704 := (($non_null($phys_ptr_cast(local.l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l2,^s_node),^s_node) == $phys_ptr_cast(L#l,^s_node))));
p0705 := (($non_null($phys_ptr_cast(local.l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l2,^s_node),^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p0706 := (($non_null($phys_ptr_cast(local.l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l2,^s_node),^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p0707 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0708 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0709 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0710 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0711 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0712 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0713 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0714 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0715 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0716 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0717 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0718 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0719 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0720 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0721 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0722 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0723 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0724 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0725 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0726 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0727 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0728 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0729 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0730 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0731 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0732 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0733 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0734 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0735 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0736 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0737 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0738 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0739 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0740 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0741 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0742 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0743 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0744 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0745 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0746 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0747 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0748 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0749 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0750 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0751 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0752 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0753 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0754 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0755 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0756 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0757 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0758 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0759 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0760 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0761 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0762 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0763 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0764 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0765 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0766 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0767 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0768 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0769 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0770 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0771 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0772 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0773 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0774 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0775 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0776 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0777 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0778 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0779 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0780 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0781 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0782 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0783 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0784 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0785 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0786 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0787 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0788 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0789 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0790 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0791 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0792 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0793 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0794 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0795 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0796 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0797 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0798 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0799 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0800 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0801 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0802 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0803 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0804 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0805 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0806 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0807 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0808 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0809 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0810 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0811 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0812 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0813 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0814 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0815 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0816 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0817 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0818 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0819 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0820 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0821 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0822 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0823 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0824 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0825 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0826 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0827 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0828 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0829 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0830 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0831 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0832 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0833 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0834 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0835 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0836 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0837 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0838 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0839 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0840 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0841 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0842 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0843 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0844 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0845 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0846 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0847 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0848 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0849 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0850 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0851 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0852 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0853 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0854 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0855 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0856 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0857 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0858 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0859 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0860 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0861 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0862 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0863 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0864 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0865 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0866 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0867 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0868 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0869 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0870 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0871 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0872 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0873 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0874 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0875 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0876 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0877 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0878 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0879 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0880 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0881 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0882 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0883 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0884 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0885 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0886 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0887 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0888 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0889 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0890 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0891 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0892 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0893 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0894 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0895 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0896 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0897 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0898 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0899 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0900 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0901 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0902 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0903 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0904 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0905 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0906 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0907 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0908 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0909 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0910 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0911 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0912 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0913 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0914 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0915 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0916 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0917 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p0918 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p0919 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p0920 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p0921 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p0922 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p0923 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p0924 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p0925 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p0926 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p0927 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p0928 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p0929 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p0930 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p0931 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p0932 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p0933 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p0934 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p0935 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p0936 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p0937 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p0938 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p0939 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p0940 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p0941 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p0942 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p0943 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p0944 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p0945 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p0946 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p0947 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p0948 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p0949 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p0950 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p0951 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p0952 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p0953 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p0954 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p0955 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p0956 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p0957 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p0958 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p0959 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p0960 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p0961 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p0962 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p0963 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p0964 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p0965 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p0966 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p0967 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p0968 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p0969 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p0970 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p0971 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p0972 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p0973 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p0974 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p0975 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p0976 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p0977 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p0978 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p0979 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p0980 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p0981 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p0982 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p0983 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p0984 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p0985 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p0986 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p0987 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p0988 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p0989 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p0990 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p0991 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p0992 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p0993 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p0994 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p0995 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p0996 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p0997 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p0998 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p0999 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p1000 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p1001 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p1002 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p1003 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p1004 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p1005 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p1006 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p1007 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p1008 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p1009 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p1010 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p1011 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p1012 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p1013 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p1014 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p1015 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p1016 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p1017 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p1018 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p1019 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p1020 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p1021 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p1022 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p1023 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p1024 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p1025 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p1026 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p1027 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p1028 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p1029 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p1030 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p1031 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p1032 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p1033 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p1034 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p1035 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p1036 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p1037 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p1038 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p1039 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p1040 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p1041 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p1042 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p1043 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p1044 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p1045 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p1046 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p1047 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p1048 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p1049 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p1050 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p1051 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p1052 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p1053 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p1054 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p1055 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p1056 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p1057 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p1058 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p1059 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p1060 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p1061 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p1062 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p1063 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p1064 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p1065 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p1066 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p1067 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p1068 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p1069 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p1070 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p1071 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p1072 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p1073 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p1074 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p1075 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p1076 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p1077 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p1078 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p1079 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p1080 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p1081 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p1082 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p1083 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p1084 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p1085 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p1086 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p1087 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p1088 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p1089 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p1090 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p1091 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p1092 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p1093 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p1094 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p1095 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p1096 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p1097 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p1098 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p1099 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p1100 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p1101 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p1102 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p1103 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p1104 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p1105 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p1106 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p1107 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p1108 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p1109 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p1110 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p1111 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p1112 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p1113 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p1114 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p1115 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p1116 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p1117 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p1118 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p1119 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p1120 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p1121 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p1122 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p1123 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p1124 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p1125 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p1126 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));

    while (true)

invariant (p0000 == (F#srtl($s,$phys_ptr_cast(P#l1,^s_node))));
invariant (p0001 == (F#srtl($s,$phys_ptr_cast(P#l2,^s_node))));
invariant (p0002 == (F#srtl($s,$phys_ptr_cast(L#list,^s_node))));
invariant (p0003 == (F#srtl($s,$phys_ptr_cast(L#l,^s_node))));
invariant (p0004 == (F#srtl($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant (p0005 == (F#srtl($s,$phys_ptr_cast(local.l1,^s_node))));
invariant (p0006 == (F#srtl($s,$phys_ptr_cast(local.l2,^s_node))));
invariant (p0007 == (F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant (p0008 == (F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant (p0009 == (F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant (p0010 == (F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant (p0011 == (F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant (p0012 == (F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant (p0013 == (F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant (p0014 == (F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant (p0015 == (F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant (p0016 == (F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant (p0017 == (F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant (p0018 == (F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant (p0019 == (F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant (p0020 == (F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant (p0021 == (F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant (p0022 == (F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant (p0023 == (F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant (p0024 == (F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant (p0025 == (F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant (p0026 == (F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant (p0027 == (F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant (p0028 == (F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant (p0029 == (F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant (p0030 == (F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant (p0031 == (F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant (p0032 == (F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant (p0033 == (F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant (p0034 == (F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant (p0035 == (F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant (p0036 == (F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant (p0037 == (F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant (p0038 == (F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant (p0039 == (F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant (p0040 == (F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant (p0041 == (F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant (p0042 == (F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant (p0043 == (F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant (p0044 == (F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant (p0045 == (F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant (p0046 == (F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant (p0047 == (F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant (p0048 == (F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant (p0049 == ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0050 == ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)))));
invariant (p0051 == ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)))));
invariant (p0052 == ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0053 == ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0054 == ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0055 == ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0056 == ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)))));
invariant (p0057 == ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)))));
invariant (p0058 == ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0059 == ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0060 == ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0061 == ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0062 == ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0063 == ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)))));
invariant (p0064 == ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0065 == ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0066 == ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0067 == ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0068 == ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0069 == ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)))));
invariant (p0070 == ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0071 == ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0072 == ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0073 == ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0074 == ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0075 == ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)))));
invariant (p0076 == ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)))));
invariant (p0077 == ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0078 == ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0079 == ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0080 == ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0081 == ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)))));
invariant (p0082 == ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)))));
invariant (p0083 == ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0084 == ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0085 == ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0086 == ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0087 == ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)))));
invariant (p0088 == ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)))));
invariant (p0089 == ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0090 == ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0091 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0092 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)))));
invariant (p0093 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)))));
invariant (p0094 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0095 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0096 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0097 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0098 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)))));
invariant (p0099 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)))));
invariant (p0100 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0101 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0102 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0103 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0104 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0105 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)))));
invariant (p0106 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0107 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0108 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0109 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0110 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0111 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)))));
invariant (p0112 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0113 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0114 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0115 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0116 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0117 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)))));
invariant (p0118 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)))));
invariant (p0119 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0120 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0121 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0122 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0123 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)))));
invariant (p0124 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)))));
invariant (p0125 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0126 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0127 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0128 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0129 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)))));
invariant (p0130 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)))));
invariant (p0131 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0132 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0133 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)))));
invariant (p0134 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)))));
invariant (p0135 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0136 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0137 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0138 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0139 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)))));
invariant (p0140 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0141 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0142 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0143 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0144 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)))));
invariant (p0145 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0146 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0147 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0148 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0149 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)))));
invariant (p0150 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)))));
invariant (p0151 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0152 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0153 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0154 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)))));
invariant (p0155 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)))));
invariant (p0156 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0157 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0158 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0159 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)))));
invariant (p0160 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)))));
invariant (p0161 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0162 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0163 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)))));
invariant (p0164 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)))));
invariant (p0165 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0166 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0167 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0168 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0169 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)))));
invariant (p0170 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0171 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0172 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0173 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0174 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)))));
invariant (p0175 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0176 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0177 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0178 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0179 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)))));
invariant (p0180 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)))));
invariant (p0181 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0182 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0183 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0184 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)))));
invariant (p0185 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)))));
invariant (p0186 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0187 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0188 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0189 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)))));
invariant (p0190 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)))));
invariant (p0191 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0192 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0193 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0194 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)))));
invariant (p0195 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0196 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0197 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0198 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0199 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)))));
invariant (p0200 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0201 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0202 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0203 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0204 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0205 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0206 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0207 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0208 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0209 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0210 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)))));
invariant (p0211 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0212 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0213 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0214 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0215 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)))));
invariant (p0216 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0217 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0218 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0219 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0220 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)))));
invariant (p0221 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0222 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0223 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0224 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)))));
invariant (p0225 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0226 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0227 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0228 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0229 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)))));
invariant (p0230 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0231 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0232 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0233 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0234 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0235 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0236 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0237 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0238 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0239 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0240 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)))));
invariant (p0241 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0242 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0243 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0244 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0245 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)))));
invariant (p0246 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0247 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0248 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0249 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0250 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)))));
invariant (p0251 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0252 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0253 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0254 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)))));
invariant (p0255 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)))));
invariant (p0256 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0257 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0258 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0259 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)))));
invariant (p0260 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)))));
invariant (p0261 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0262 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0263 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0264 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0265 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)))));
invariant (p0266 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0267 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0268 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0269 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0270 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)))));
invariant (p0271 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0272 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0273 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0274 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0275 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)))));
invariant (p0276 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)))));
invariant (p0277 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0278 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0279 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0280 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)))));
invariant (p0281 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)))));
invariant (p0282 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0283 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0284 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)))));
invariant (p0285 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)))));
invariant (p0286 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0287 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0288 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0289 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)))));
invariant (p0290 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)))));
invariant (p0291 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0292 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0293 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0294 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0295 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)))));
invariant (p0296 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0297 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0298 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0299 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0300 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)))));
invariant (p0301 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0302 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0303 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0304 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0305 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)))));
invariant (p0306 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)))));
invariant (p0307 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0308 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0309 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0310 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)))));
invariant (p0311 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)))));
invariant (p0312 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0313 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0314 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)))));
invariant (p0315 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)))));
invariant (p0316 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0317 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0318 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0319 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)))));
invariant (p0320 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)))));
invariant (p0321 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0322 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0323 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0324 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0325 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)))));
invariant (p0326 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0327 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0328 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0329 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0330 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)))));
invariant (p0331 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0332 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0333 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0334 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0335 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)))));
invariant (p0336 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)))));
invariant (p0337 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0338 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0339 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0340 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)))));
invariant (p0341 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)))));
invariant (p0342 == ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0343 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0344 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)))));
invariant (p0345 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)))));
invariant (p0346 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0347 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0348 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0349 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0350 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)))));
invariant (p0351 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)))));
invariant (p0352 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0353 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0354 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0355 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0356 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0357 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)))));
invariant (p0358 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0359 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0360 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0361 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0362 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0363 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)))));
invariant (p0364 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0365 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0366 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0367 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0368 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0369 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)))));
invariant (p0370 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)))));
invariant (p0371 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0372 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0373 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0374 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0375 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)))));
invariant (p0376 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)))));
invariant (p0377 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0378 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0379 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0380 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0381 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)))));
invariant (p0382 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)))));
invariant (p0383 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0384 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0385 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant (p0386 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant (p0387 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0388 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0389 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0390 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0391 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant (p0392 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0393 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0394 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0395 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0396 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant (p0397 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0398 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0399 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0400 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0401 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant (p0402 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant (p0403 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0404 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0405 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0406 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant (p0407 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant (p0408 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0409 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0410 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0411 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant (p0412 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant (p0413 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0414 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0415 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant (p0416 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant (p0417 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0418 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0419 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0420 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0421 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant (p0422 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0423 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0424 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0425 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0426 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant (p0427 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0428 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0429 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0430 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0431 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant (p0432 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant (p0433 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0434 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0435 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0436 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant (p0437 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant (p0438 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0439 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0440 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0441 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant (p0442 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant (p0443 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0444 == ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0445 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0446 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant (p0447 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0448 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0449 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0450 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0451 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant (p0452 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0453 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0454 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0455 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0456 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0457 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0458 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0459 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0460 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0461 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0462 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant (p0463 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0464 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0465 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0466 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0467 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant (p0468 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0469 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0470 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0471 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0472 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant (p0473 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0474 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0475 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0476 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant (p0477 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0478 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0479 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0480 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0481 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant (p0482 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0483 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0484 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0485 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0486 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0487 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0488 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0489 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0490 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0491 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0492 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant (p0493 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0494 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0495 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0496 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0497 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant (p0498 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0499 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0500 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0501 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0502 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant (p0503 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0504 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0505 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0506 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant (p0507 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant (p0508 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0509 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0510 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0511 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant (p0512 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant (p0513 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0514 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0515 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0516 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0517 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant (p0518 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0519 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0520 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0521 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0522 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant (p0523 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0524 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0525 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0526 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0527 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant (p0528 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant (p0529 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0530 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0531 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0532 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant (p0533 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant (p0534 == ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0535 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0536 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant (p0537 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant (p0538 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0539 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0540 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0541 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant (p0542 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant (p0543 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0544 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0545 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0546 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0547 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant (p0548 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0549 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0550 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0551 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0552 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant (p0553 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0554 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0555 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0556 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0557 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant (p0558 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant (p0559 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant (p0560 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0561 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0562 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant (p0563 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant (p0564 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0565 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0566 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant (p0567 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant (p0568 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0569 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0570 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0571 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant (p0572 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant (p0573 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0574 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0575 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0576 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0577 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant (p0578 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0579 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0580 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0581 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0582 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant (p0583 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0584 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0585 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0586 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0587 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant (p0588 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant (p0589 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant (p0590 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant (p0591 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant (p0592 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant (p0593 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant (p0594 == ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0595 == ($non_null($phys_ptr_cast(P#l1,^s_node))));
invariant (p0596 == ($non_null($phys_ptr_cast(P#l2,^s_node))));
invariant (p0597 == ($non_null($phys_ptr_cast(L#list,^s_node))));
invariant (p0598 == ($non_null($phys_ptr_cast(L#l,^s_node))));
invariant (p0599 == ($non_null($phys_ptr_cast(L#list_next,^s_node))));
invariant (p0600 == ($non_null($phys_ptr_cast(local.l1,^s_node))));
invariant (p0601 == ($non_null($phys_ptr_cast(local.l2,^s_node))));
invariant (p0602 == ($is_null($phys_ptr_cast(P#l1,^s_node))));
invariant (p0603 == ($is_null($phys_ptr_cast(P#l2,^s_node))));
invariant (p0604 == ($is_null($phys_ptr_cast(L#list,^s_node))));
invariant (p0605 == ($is_null($phys_ptr_cast(L#l,^s_node))));
invariant (p0606 == ($is_null($phys_ptr_cast(L#list_next,^s_node))));
invariant (p0607 == ($is_null($phys_ptr_cast(local.l1,^s_node))));
invariant (p0608 == ($is_null($phys_ptr_cast(local.l2,^s_node))));
invariant (p0609 == (($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant (p0610 == (($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant (p0611 == (($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant (p0612 == (($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant (p0613 == (($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant (p0614 == (($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant (p0615 == (($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant (p0616 == (($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant (p0617 == (($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant (p0618 == (($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant (p0619 == (($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant (p0620 == (($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant (p0621 == (($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant (p0622 == (($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant (p0623 == (($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant (p0624 == (($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant (p0625 == (($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant (p0626 == (($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant (p0627 == (($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant (p0628 == (($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant (p0629 == (($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant (p0630 == (($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant (p0631 == (($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant (p0632 == (($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant (p0633 == (($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant (p0634 == (($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant (p0635 == (($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant (p0636 == (($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant (p0637 == (($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant (p0638 == (($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant (p0639 == (($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant (p0640 == (($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant (p0641 == (($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant (p0642 == (($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant (p0643 == (($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant (p0644 == (($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant (p0645 == (($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant (p0646 == (($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant (p0647 == (($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant (p0648 == (($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant (p0649 == (($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant (p0650 == (($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant (p0651 == (($non_null($phys_ptr_cast(P#l1,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l1,^s_node),^s_node)))));
invariant (p0652 == (($non_null($phys_ptr_cast(P#l2,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l2,^s_node),^s_node)))));
invariant (p0653 == (($non_null($phys_ptr_cast(L#list,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list,^s_node),^s_node)))));
invariant (p0654 == (($non_null($phys_ptr_cast(L#l,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#l,^s_node),^s_node)))));
invariant (p0655 == (($non_null($phys_ptr_cast(L#list_next,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list_next,^s_node),^s_node)))));
invariant (p0656 == (($non_null($phys_ptr_cast(local.l1,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l1,^s_node),^s_node)))));
invariant (p0657 == (($non_null($phys_ptr_cast(local.l2,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l2,^s_node),^s_node)))));
invariant (p0658 == (($non_null($phys_ptr_cast(P#l1,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l1,^s_node),^s_node)))));
invariant (p0659 == (($non_null($phys_ptr_cast(P#l2,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l2,^s_node),^s_node)))));
invariant (p0660 == (($non_null($phys_ptr_cast(L#list,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list,^s_node),^s_node)))));
invariant (p0661 == (($non_null($phys_ptr_cast(L#l,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#l,^s_node),^s_node)))));
invariant (p0662 == (($non_null($phys_ptr_cast(L#list_next,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list_next,^s_node),^s_node)))));
invariant (p0663 == (($non_null($phys_ptr_cast(local.l1,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l1,^s_node),^s_node)))));
invariant (p0664 == (($non_null($phys_ptr_cast(local.l2,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l2,^s_node),^s_node)))));
invariant (p0665 == (($non_null($phys_ptr_cast(P#l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l1,^s_node),^s_node) == $phys_ptr_cast(P#l2,^s_node)))));
invariant (p0666 == (($non_null($phys_ptr_cast(P#l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l1,^s_node),^s_node) == $phys_ptr_cast(L#list,^s_node)))));
invariant (p0667 == (($non_null($phys_ptr_cast(P#l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l1,^s_node),^s_node) == $phys_ptr_cast(L#l,^s_node)))));
invariant (p0668 == (($non_null($phys_ptr_cast(P#l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l1,^s_node),^s_node) == $phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0669 == (($non_null($phys_ptr_cast(P#l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l1,^s_node),^s_node) == $phys_ptr_cast(local.l1,^s_node)))));
invariant (p0670 == (($non_null($phys_ptr_cast(P#l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l1,^s_node),^s_node) == $phys_ptr_cast(local.l2,^s_node)))));
invariant (p0671 == (($non_null($phys_ptr_cast(P#l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l2,^s_node),^s_node) == $phys_ptr_cast(P#l1,^s_node)))));
invariant (p0672 == (($non_null($phys_ptr_cast(P#l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l2,^s_node),^s_node) == $phys_ptr_cast(L#list,^s_node)))));
invariant (p0673 == (($non_null($phys_ptr_cast(P#l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l2,^s_node),^s_node) == $phys_ptr_cast(L#l,^s_node)))));
invariant (p0674 == (($non_null($phys_ptr_cast(P#l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l2,^s_node),^s_node) == $phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0675 == (($non_null($phys_ptr_cast(P#l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l2,^s_node),^s_node) == $phys_ptr_cast(local.l1,^s_node)))));
invariant (p0676 == (($non_null($phys_ptr_cast(P#l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l2,^s_node),^s_node) == $phys_ptr_cast(local.l2,^s_node)))));
invariant (p0677 == (($non_null($phys_ptr_cast(L#list,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list,^s_node),^s_node) == $phys_ptr_cast(P#l1,^s_node)))));
invariant (p0678 == (($non_null($phys_ptr_cast(L#list,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list,^s_node),^s_node) == $phys_ptr_cast(P#l2,^s_node)))));
invariant (p0679 == (($non_null($phys_ptr_cast(L#list,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list,^s_node),^s_node) == $phys_ptr_cast(L#l,^s_node)))));
invariant (p0680 == (($non_null($phys_ptr_cast(L#list,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list,^s_node),^s_node) == $phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0681 == (($non_null($phys_ptr_cast(L#list,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list,^s_node),^s_node) == $phys_ptr_cast(local.l1,^s_node)))));
invariant (p0682 == (($non_null($phys_ptr_cast(L#list,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list,^s_node),^s_node) == $phys_ptr_cast(local.l2,^s_node)))));
invariant (p0683 == (($non_null($phys_ptr_cast(L#l,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#l,^s_node),^s_node) == $phys_ptr_cast(P#l1,^s_node)))));
invariant (p0684 == (($non_null($phys_ptr_cast(L#l,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#l,^s_node),^s_node) == $phys_ptr_cast(P#l2,^s_node)))));
invariant (p0685 == (($non_null($phys_ptr_cast(L#l,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#l,^s_node),^s_node) == $phys_ptr_cast(L#list,^s_node)))));
invariant (p0686 == (($non_null($phys_ptr_cast(L#l,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#l,^s_node),^s_node) == $phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0687 == (($non_null($phys_ptr_cast(L#l,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#l,^s_node),^s_node) == $phys_ptr_cast(local.l1,^s_node)))));
invariant (p0688 == (($non_null($phys_ptr_cast(L#l,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#l,^s_node),^s_node) == $phys_ptr_cast(local.l2,^s_node)))));
invariant (p0689 == (($non_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list_next,^s_node),^s_node) == $phys_ptr_cast(P#l1,^s_node)))));
invariant (p0690 == (($non_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list_next,^s_node),^s_node) == $phys_ptr_cast(P#l2,^s_node)))));
invariant (p0691 == (($non_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list_next,^s_node),^s_node) == $phys_ptr_cast(L#list,^s_node)))));
invariant (p0692 == (($non_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list_next,^s_node),^s_node) == $phys_ptr_cast(L#l,^s_node)))));
invariant (p0693 == (($non_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list_next,^s_node),^s_node) == $phys_ptr_cast(local.l1,^s_node)))));
invariant (p0694 == (($non_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list_next,^s_node),^s_node) == $phys_ptr_cast(local.l2,^s_node)))));
invariant (p0695 == (($non_null($phys_ptr_cast(local.l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l1,^s_node),^s_node) == $phys_ptr_cast(P#l1,^s_node)))));
invariant (p0696 == (($non_null($phys_ptr_cast(local.l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l1,^s_node),^s_node) == $phys_ptr_cast(P#l2,^s_node)))));
invariant (p0697 == (($non_null($phys_ptr_cast(local.l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l1,^s_node),^s_node) == $phys_ptr_cast(L#list,^s_node)))));
invariant (p0698 == (($non_null($phys_ptr_cast(local.l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l1,^s_node),^s_node) == $phys_ptr_cast(L#l,^s_node)))));
invariant (p0699 == (($non_null($phys_ptr_cast(local.l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l1,^s_node),^s_node) == $phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0700 == (($non_null($phys_ptr_cast(local.l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l1,^s_node),^s_node) == $phys_ptr_cast(local.l2,^s_node)))));
invariant (p0701 == (($non_null($phys_ptr_cast(local.l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l2,^s_node),^s_node) == $phys_ptr_cast(P#l1,^s_node)))));
invariant (p0702 == (($non_null($phys_ptr_cast(local.l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l2,^s_node),^s_node) == $phys_ptr_cast(P#l2,^s_node)))));
invariant (p0703 == (($non_null($phys_ptr_cast(local.l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l2,^s_node),^s_node) == $phys_ptr_cast(L#list,^s_node)))));
invariant (p0704 == (($non_null($phys_ptr_cast(local.l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l2,^s_node),^s_node) == $phys_ptr_cast(L#l,^s_node)))));
invariant (p0705 == (($non_null($phys_ptr_cast(local.l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l2,^s_node),^s_node) == $phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0706 == (($non_null($phys_ptr_cast(local.l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l2,^s_node),^s_node) == $phys_ptr_cast(local.l1,^s_node)))));
invariant (p0707 == ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)))))));
invariant (p0708 == ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)))))));
invariant (p0709 == ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)))))));
invariant (p0710 == ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)))))));
invariant (p0711 == ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)))))));
invariant (p0712 == ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)))))));
invariant (p0713 == ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)))))));
invariant (p0714 == ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)))))));
invariant (p0715 == ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)))))));
invariant (p0716 == ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)))))));
invariant (p0717 == ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)))))));
invariant (p0718 == ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)))))));
invariant (p0719 == ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)))))));
invariant (p0720 == ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)))))));
invariant (p0721 == ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)))))));
invariant (p0722 == ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)))))));
invariant (p0723 == ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)))))));
invariant (p0724 == ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)))))));
invariant (p0725 == ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)))))));
invariant (p0726 == ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)))))));
invariant (p0727 == ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)))))));
invariant (p0728 == ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)))))));
invariant (p0729 == ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)))))));
invariant (p0730 == ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)))))));
invariant (p0731 == ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)))))));
invariant (p0732 == ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)))))));
invariant (p0733 == ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)))))));
invariant (p0734 == ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)))))));
invariant (p0735 == ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)))))));
invariant (p0736 == ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)))))));
invariant (p0737 == ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)))))));
invariant (p0738 == ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)))))));
invariant (p0739 == ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)))))));
invariant (p0740 == ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)))))));
invariant (p0741 == ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)))))));
invariant (p0742 == ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)))))));
invariant (p0743 == ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)))))));
invariant (p0744 == ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)))))));
invariant (p0745 == ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)))))));
invariant (p0746 == ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)))))));
invariant (p0747 == ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)))))));
invariant (p0748 == ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)))))));
invariant (p0749 == ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)))))));
invariant (p0750 == ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)))))));
invariant (p0751 == ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)))))));
invariant (p0752 == ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)))))));
invariant (p0753 == ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)))))));
invariant (p0754 == ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)))))));
invariant (p0755 == ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)))))));
invariant (p0756 == ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)))))));
invariant (p0757 == ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)))))));
invariant (p0758 == ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)))))));
invariant (p0759 == ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)))))));
invariant (p0760 == ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)))))));
invariant (p0761 == ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)))))));
invariant (p0762 == ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)))))));
invariant (p0763 == ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)))))));
invariant (p0764 == ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)))))));
invariant (p0765 == ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)))))));
invariant (p0766 == ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)))))));
invariant (p0767 == ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)))))));
invariant (p0768 == ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)))))));
invariant (p0769 == ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)))))));
invariant (p0770 == ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)))))));
invariant (p0771 == ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)))))));
invariant (p0772 == ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)))))));
invariant (p0773 == ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)))))));
invariant (p0774 == ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)))))));
invariant (p0775 == ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)))))));
invariant (p0776 == ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)))))));
invariant (p0777 == ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)))))));
invariant (p0778 == ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)))))));
invariant (p0779 == ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)))))));
invariant (p0780 == ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)))))));
invariant (p0781 == ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)))))));
invariant (p0782 == ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)))))));
invariant (p0783 == ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)))))));
invariant (p0784 == ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)))))));
invariant (p0785 == ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)))))));
invariant (p0786 == ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)))))));
invariant (p0787 == ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)))))));
invariant (p0788 == ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)))))));
invariant (p0789 == ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)))))));
invariant (p0790 == ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)))))));
invariant (p0791 == ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)))))));
invariant (p0792 == ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)))))));
invariant (p0793 == ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)))))));
invariant (p0794 == ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)))))));
invariant (p0795 == ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)))))));
invariant (p0796 == ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)))))));
invariant (p0797 == ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)))))));
invariant (p0798 == ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)))))));
invariant (p0799 == ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)))))));
invariant (p0800 == ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)))))));
invariant (p0801 == ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)))))));
invariant (p0802 == ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)))))));
invariant (p0803 == ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)))))));
invariant (p0804 == ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)))))));
invariant (p0805 == ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)))))));
invariant (p0806 == ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)))))));
invariant (p0807 == ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)))))));
invariant (p0808 == ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)))))));
invariant (p0809 == ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)))))));
invariant (p0810 == ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)))))));
invariant (p0811 == ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)))))));
invariant (p0812 == ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)))))));
invariant (p0813 == ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)))))));
invariant (p0814 == ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)))))));
invariant (p0815 == ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)))))));
invariant (p0816 == ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)))))));
invariant (p0817 == ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)))))));
invariant (p0818 == ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)))))));
invariant (p0819 == ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)))))));
invariant (p0820 == ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)))))));
invariant (p0821 == ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)))))));
invariant (p0822 == ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)))))));
invariant (p0823 == ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)))))));
invariant (p0824 == ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)))))));
invariant (p0825 == ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)))))));
invariant (p0826 == ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)))))));
invariant (p0827 == ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)))))));
invariant (p0828 == ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)))))));
invariant (p0829 == ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)))))));
invariant (p0830 == ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)))))));
invariant (p0831 == ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)))))));
invariant (p0832 == ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)))))));
invariant (p0833 == ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)))))));
invariant (p0834 == ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)))))));
invariant (p0835 == ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)))))));
invariant (p0836 == ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)))))));
invariant (p0837 == ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)))))));
invariant (p0838 == ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)))))));
invariant (p0839 == ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)))))));
invariant (p0840 == ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)))))));
invariant (p0841 == ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)))))));
invariant (p0842 == ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)))))));
invariant (p0843 == ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)))))));
invariant (p0844 == ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)))))));
invariant (p0845 == ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)))))));
invariant (p0846 == ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)))))));
invariant (p0847 == ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)))))));
invariant (p0848 == ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)))))));
invariant (p0849 == ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)))))));
invariant (p0850 == ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)))))));
invariant (p0851 == ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)))))));
invariant (p0852 == ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)))))));
invariant (p0853 == ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)))))));
invariant (p0854 == ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)))))));
invariant (p0855 == ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)))))));
invariant (p0856 == ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)))))));
invariant (p0857 == ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)))))));
invariant (p0858 == ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)))))));
invariant (p0859 == ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)))))));
invariant (p0860 == ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)))))));
invariant (p0861 == ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)))))));
invariant (p0862 == ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)))))));
invariant (p0863 == ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)))))));
invariant (p0864 == ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)))))));
invariant (p0865 == ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)))))));
invariant (p0866 == ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)))))));
invariant (p0867 == ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)))))));
invariant (p0868 == ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)))))));
invariant (p0869 == ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)))))));
invariant (p0870 == ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)))))));
invariant (p0871 == ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)))))));
invariant (p0872 == ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)))))));
invariant (p0873 == ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)))))));
invariant (p0874 == ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)))))));
invariant (p0875 == ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)))))));
invariant (p0876 == ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)))))));
invariant (p0877 == ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)))))));
invariant (p0878 == ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)))))));
invariant (p0879 == ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)))))));
invariant (p0880 == ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)))))));
invariant (p0881 == ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)))))));
invariant (p0882 == ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)))))));
invariant (p0883 == ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)))))));
invariant (p0884 == ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)))))));
invariant (p0885 == ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)))))));
invariant (p0886 == ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)))))));
invariant (p0887 == ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)))))));
invariant (p0888 == ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)))))));
invariant (p0889 == ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)))))));
invariant (p0890 == ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)))))));
invariant (p0891 == ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)))))));
invariant (p0892 == ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)))))));
invariant (p0893 == ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)))))));
invariant (p0894 == ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)))))));
invariant (p0895 == ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)))))));
invariant (p0896 == ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)))))));
invariant (p0897 == ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)))))));
invariant (p0898 == ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)))))));
invariant (p0899 == ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)))))));
invariant (p0900 == ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)))))));
invariant (p0901 == ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)))))));
invariant (p0902 == ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)))))));
invariant (p0903 == ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)))))));
invariant (p0904 == ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)))))));
invariant (p0905 == ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)))))));
invariant (p0906 == ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)))))));
invariant (p0907 == ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)))))));
invariant (p0908 == ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)))))));
invariant (p0909 == ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)))))));
invariant (p0910 == ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)))))));
invariant (p0911 == ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)))))));
invariant (p0912 == ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)))))));
invariant (p0913 == ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)))))));
invariant (p0914 == ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)))))));
invariant (p0915 == ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)))))));
invariant (p0916 == ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)))))));
invariant (p0917 == (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list,^s_node)))));
invariant (p0918 == (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#l,^s_node)))));
invariant (p0919 == (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0920 == (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l1,^s_node)))));
invariant (p0921 == (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l2,^s_node)))));
invariant (p0922 == (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l2,^s_node)))));
invariant (p0923 == (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#l,^s_node)))));
invariant (p0924 == (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0925 == (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l1,^s_node)))));
invariant (p0926 == (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l2,^s_node)))));
invariant (p0927 == (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l2,^s_node)))));
invariant (p0928 == (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list,^s_node)))));
invariant (p0929 == (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0930 == (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l1,^s_node)))));
invariant (p0931 == (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l2,^s_node)))));
invariant (p0932 == (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l2,^s_node)))));
invariant (p0933 == (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#list,^s_node)))));
invariant (p0934 == (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#l,^s_node)))));
invariant (p0935 == (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l1,^s_node)))));
invariant (p0936 == (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l2,^s_node)))));
invariant (p0937 == (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l2,^s_node)))));
invariant (p0938 == (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list,^s_node)))));
invariant (p0939 == (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#l,^s_node)))));
invariant (p0940 == (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0941 == (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(local.l2,^s_node)))));
invariant (p0942 == (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l2,^s_node)))));
invariant (p0943 == (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list,^s_node)))));
invariant (p0944 == (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#l,^s_node)))));
invariant (p0945 == (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0946 == (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(local.l1,^s_node)))));
invariant (p0947 == (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list,^s_node)))));
invariant (p0948 == (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#l,^s_node)))));
invariant (p0949 == (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0950 == (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l1,^s_node)))));
invariant (p0951 == (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l2,^s_node)))));
invariant (p0952 == (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l1,^s_node)))));
invariant (p0953 == (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#l,^s_node)))));
invariant (p0954 == (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0955 == (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l1,^s_node)))));
invariant (p0956 == (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l2,^s_node)))));
invariant (p0957 == (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l1,^s_node)))));
invariant (p0958 == (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list,^s_node)))));
invariant (p0959 == (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0960 == (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l1,^s_node)))));
invariant (p0961 == (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l2,^s_node)))));
invariant (p0962 == (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l1,^s_node)))));
invariant (p0963 == (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#list,^s_node)))));
invariant (p0964 == (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#l,^s_node)))));
invariant (p0965 == (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l1,^s_node)))));
invariant (p0966 == (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l2,^s_node)))));
invariant (p0967 == (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l1,^s_node)))));
invariant (p0968 == (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list,^s_node)))));
invariant (p0969 == (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#l,^s_node)))));
invariant (p0970 == (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0971 == (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(local.l2,^s_node)))));
invariant (p0972 == (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l1,^s_node)))));
invariant (p0973 == (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list,^s_node)))));
invariant (p0974 == (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#l,^s_node)))));
invariant (p0975 == (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0976 == (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(local.l1,^s_node)))));
invariant (p0977 == (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(P#l2,^s_node)))));
invariant (p0978 == (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#l,^s_node)))));
invariant (p0979 == (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0980 == (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l1,^s_node)))));
invariant (p0981 == (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l2,^s_node)))));
invariant (p0982 == (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(P#l1,^s_node)))));
invariant (p0983 == (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#l,^s_node)))));
invariant (p0984 == (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0985 == (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l1,^s_node)))));
invariant (p0986 == (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l2,^s_node)))));
invariant (p0987 == (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l1,^s_node)))));
invariant (p0988 == (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l2,^s_node)))));
invariant (p0989 == (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list_next,^s_node)))));
invariant (p0990 == (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l1,^s_node)))));
invariant (p0991 == (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l2,^s_node)))));
invariant (p0992 == (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l1,^s_node)))));
invariant (p0993 == (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l2,^s_node)))));
invariant (p0994 == (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#l,^s_node)))));
invariant (p0995 == (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l1,^s_node)))));
invariant (p0996 == (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l2,^s_node)))));
invariant (p0997 == (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l1,^s_node)))));
invariant (p0998 == (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l2,^s_node)))));
invariant (p0999 == (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#l,^s_node)))));
invariant (p1000 == (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node)))));
invariant (p1001 == (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(local.l2,^s_node)))));
invariant (p1002 == (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l1,^s_node)))));
invariant (p1003 == (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l2,^s_node)))));
invariant (p1004 == (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#l,^s_node)))));
invariant (p1005 == (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node)))));
invariant (p1006 == (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(local.l1,^s_node)))));
invariant (p1007 == (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(P#l2,^s_node)))));
invariant (p1008 == (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list,^s_node)))));
invariant (p1009 == (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node)))));
invariant (p1010 == (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l1,^s_node)))));
invariant (p1011 == (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l2,^s_node)))));
invariant (p1012 == (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(P#l1,^s_node)))));
invariant (p1013 == (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list,^s_node)))));
invariant (p1014 == (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node)))));
invariant (p1015 == (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l1,^s_node)))));
invariant (p1016 == (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l2,^s_node)))));
invariant (p1017 == (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l1,^s_node)))));
invariant (p1018 == (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l2,^s_node)))));
invariant (p1019 == (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#list_next,^s_node)))));
invariant (p1020 == (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l1,^s_node)))));
invariant (p1021 == (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l2,^s_node)))));
invariant (p1022 == (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l1,^s_node)))));
invariant (p1023 == (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l2,^s_node)))));
invariant (p1024 == (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#list,^s_node)))));
invariant (p1025 == (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l1,^s_node)))));
invariant (p1026 == (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l2,^s_node)))));
invariant (p1027 == (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l1,^s_node)))));
invariant (p1028 == (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l2,^s_node)))));
invariant (p1029 == (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list,^s_node)))));
invariant (p1030 == (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node)))));
invariant (p1031 == (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(local.l2,^s_node)))));
invariant (p1032 == (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l1,^s_node)))));
invariant (p1033 == (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l2,^s_node)))));
invariant (p1034 == (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list,^s_node)))));
invariant (p1035 == (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node)))));
invariant (p1036 == (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(local.l1,^s_node)))));
invariant (p1037 == (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(P#l2,^s_node)))));
invariant (p1038 == (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list,^s_node)))));
invariant (p1039 == (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#l,^s_node)))));
invariant (p1040 == (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l1,^s_node)))));
invariant (p1041 == (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l2,^s_node)))));
invariant (p1042 == (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(P#l1,^s_node)))));
invariant (p1043 == (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list,^s_node)))));
invariant (p1044 == (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#l,^s_node)))));
invariant (p1045 == (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l1,^s_node)))));
invariant (p1046 == (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l2,^s_node)))));
invariant (p1047 == (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l1,^s_node)))));
invariant (p1048 == (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l2,^s_node)))));
invariant (p1049 == (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#l,^s_node)))));
invariant (p1050 == (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l1,^s_node)))));
invariant (p1051 == (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l2,^s_node)))));
invariant (p1052 == (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l1,^s_node)))));
invariant (p1053 == (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l2,^s_node)))));
invariant (p1054 == (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list,^s_node)))));
invariant (p1055 == (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l1,^s_node)))));
invariant (p1056 == (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l2,^s_node)))));
invariant (p1057 == (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l1,^s_node)))));
invariant (p1058 == (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l2,^s_node)))));
invariant (p1059 == (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list,^s_node)))));
invariant (p1060 == (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#l,^s_node)))));
invariant (p1061 == (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(local.l2,^s_node)))));
invariant (p1062 == (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l1,^s_node)))));
invariant (p1063 == (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l2,^s_node)))));
invariant (p1064 == (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list,^s_node)))));
invariant (p1065 == (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#l,^s_node)))));
invariant (p1066 == (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(local.l1,^s_node)))));
invariant (p1067 == (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(P#l2,^s_node)))));
invariant (p1068 == (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list,^s_node)))));
invariant (p1069 == (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#l,^s_node)))));
invariant (p1070 == (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node)))));
invariant (p1071 == (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l2,^s_node)))));
invariant (p1072 == (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(P#l1,^s_node)))));
invariant (p1073 == (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list,^s_node)))));
invariant (p1074 == (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#l,^s_node)))));
invariant (p1075 == (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node)))));
invariant (p1076 == (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l2,^s_node)))));
invariant (p1077 == (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l1,^s_node)))));
invariant (p1078 == (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l2,^s_node)))));
invariant (p1079 == (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#l,^s_node)))));
invariant (p1080 == (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#list_next,^s_node)))));
invariant (p1081 == (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l2,^s_node)))));
invariant (p1082 == (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l1,^s_node)))));
invariant (p1083 == (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l2,^s_node)))));
invariant (p1084 == (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list,^s_node)))));
invariant (p1085 == (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list_next,^s_node)))));
invariant (p1086 == (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l2,^s_node)))));
invariant (p1087 == (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l1,^s_node)))));
invariant (p1088 == (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l2,^s_node)))));
invariant (p1089 == (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#list,^s_node)))));
invariant (p1090 == (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#l,^s_node)))));
invariant (p1091 == (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l2,^s_node)))));
invariant (p1092 == (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l1,^s_node)))));
invariant (p1093 == (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l2,^s_node)))));
invariant (p1094 == (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list,^s_node)))));
invariant (p1095 == (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#l,^s_node)))));
invariant (p1096 == (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node)))));
invariant (p1097 == (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(P#l2,^s_node)))));
invariant (p1098 == (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list,^s_node)))));
invariant (p1099 == (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#l,^s_node)))));
invariant (p1100 == (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node)))));
invariant (p1101 == (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l1,^s_node)))));
invariant (p1102 == (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(P#l1,^s_node)))));
invariant (p1103 == (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list,^s_node)))));
invariant (p1104 == (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#l,^s_node)))));
invariant (p1105 == (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node)))));
invariant (p1106 == (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l1,^s_node)))));
invariant (p1107 == (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l1,^s_node)))));
invariant (p1108 == (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l2,^s_node)))));
invariant (p1109 == (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#l,^s_node)))));
invariant (p1110 == (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#list_next,^s_node)))));
invariant (p1111 == (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l1,^s_node)))));
invariant (p1112 == (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l1,^s_node)))));
invariant (p1113 == (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l2,^s_node)))));
invariant (p1114 == (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list,^s_node)))));
invariant (p1115 == (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list_next,^s_node)))));
invariant (p1116 == (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l1,^s_node)))));
invariant (p1117 == (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l1,^s_node)))));
invariant (p1118 == (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l2,^s_node)))));
invariant (p1119 == (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#list,^s_node)))));
invariant (p1120 == (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#l,^s_node)))));
invariant (p1121 == (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l1,^s_node)))));
invariant (p1122 == (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l1,^s_node)))));
invariant (p1123 == (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l2,^s_node)))));
invariant (p1124 == (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list,^s_node)))));
invariant (p1125 == (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#l,^s_node)))));
invariant (p1126 == (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node)))));

invariant my_inv (
p0000,
p0001,
p0002,
p0003,
p0004,
p0005,
p0006,
p0007,
p0008,
p0009,
p0010,
p0011,
p0012,
p0013,
p0014,
p0015,
p0016,
p0017,
p0018,
p0019,
p0020,
p0021,
p0022,
p0023,
p0024,
p0025,
p0026,
p0027,
p0028,
p0029,
p0030,
p0031,
p0032,
p0033,
p0034,
p0035,
p0036,
p0037,
p0038,
p0039,
p0040,
p0041,
p0042,
p0043,
p0044,
p0045,
p0046,
p0047,
p0048,
p0049,
p0050,
p0051,
p0052,
p0053,
p0054,
p0055,
p0056,
p0057,
p0058,
p0059,
p0060,
p0061,
p0062,
p0063,
p0064,
p0065,
p0066,
p0067,
p0068,
p0069,
p0070,
p0071,
p0072,
p0073,
p0074,
p0075,
p0076,
p0077,
p0078,
p0079,
p0080,
p0081,
p0082,
p0083,
p0084,
p0085,
p0086,
p0087,
p0088,
p0089,
p0090,
p0091,
p0092,
p0093,
p0094,
p0095,
p0096,
p0097,
p0098,
p0099,
p0100,
p0101,
p0102,
p0103,
p0104,
p0105,
p0106,
p0107,
p0108,
p0109,
p0110,
p0111,
p0112,
p0113,
p0114,
p0115,
p0116,
p0117,
p0118,
p0119,
p0120,
p0121,
p0122,
p0123,
p0124,
p0125,
p0126,
p0127,
p0128,
p0129,
p0130,
p0131,
p0132,
p0133,
p0134,
p0135,
p0136,
p0137,
p0138,
p0139,
p0140,
p0141,
p0142,
p0143,
p0144,
p0145,
p0146,
p0147,
p0148,
p0149,
p0150,
p0151,
p0152,
p0153,
p0154,
p0155,
p0156,
p0157,
p0158,
p0159,
p0160,
p0161,
p0162,
p0163,
p0164,
p0165,
p0166,
p0167,
p0168,
p0169,
p0170,
p0171,
p0172,
p0173,
p0174,
p0175,
p0176,
p0177,
p0178,
p0179,
p0180,
p0181,
p0182,
p0183,
p0184,
p0185,
p0186,
p0187,
p0188,
p0189,
p0190,
p0191,
p0192,
p0193,
p0194,
p0195,
p0196,
p0197,
p0198,
p0199,
p0200,
p0201,
p0202,
p0203,
p0204,
p0205,
p0206,
p0207,
p0208,
p0209,
p0210,
p0211,
p0212,
p0213,
p0214,
p0215,
p0216,
p0217,
p0218,
p0219,
p0220,
p0221,
p0222,
p0223,
p0224,
p0225,
p0226,
p0227,
p0228,
p0229,
p0230,
p0231,
p0232,
p0233,
p0234,
p0235,
p0236,
p0237,
p0238,
p0239,
p0240,
p0241,
p0242,
p0243,
p0244,
p0245,
p0246,
p0247,
p0248,
p0249,
p0250,
p0251,
p0252,
p0253,
p0254,
p0255,
p0256,
p0257,
p0258,
p0259,
p0260,
p0261,
p0262,
p0263,
p0264,
p0265,
p0266,
p0267,
p0268,
p0269,
p0270,
p0271,
p0272,
p0273,
p0274,
p0275,
p0276,
p0277,
p0278,
p0279,
p0280,
p0281,
p0282,
p0283,
p0284,
p0285,
p0286,
p0287,
p0288,
p0289,
p0290,
p0291,
p0292,
p0293,
p0294,
p0295,
p0296,
p0297,
p0298,
p0299,
p0300,
p0301,
p0302,
p0303,
p0304,
p0305,
p0306,
p0307,
p0308,
p0309,
p0310,
p0311,
p0312,
p0313,
p0314,
p0315,
p0316,
p0317,
p0318,
p0319,
p0320,
p0321,
p0322,
p0323,
p0324,
p0325,
p0326,
p0327,
p0328,
p0329,
p0330,
p0331,
p0332,
p0333,
p0334,
p0335,
p0336,
p0337,
p0338,
p0339,
p0340,
p0341,
p0342,
p0343,
p0344,
p0345,
p0346,
p0347,
p0348,
p0349,
p0350,
p0351,
p0352,
p0353,
p0354,
p0355,
p0356,
p0357,
p0358,
p0359,
p0360,
p0361,
p0362,
p0363,
p0364,
p0365,
p0366,
p0367,
p0368,
p0369,
p0370,
p0371,
p0372,
p0373,
p0374,
p0375,
p0376,
p0377,
p0378,
p0379,
p0380,
p0381,
p0382,
p0383,
p0384,
p0385,
p0386,
p0387,
p0388,
p0389,
p0390,
p0391,
p0392,
p0393,
p0394,
p0395,
p0396,
p0397,
p0398,
p0399,
p0400,
p0401,
p0402,
p0403,
p0404,
p0405,
p0406,
p0407,
p0408,
p0409,
p0410,
p0411,
p0412,
p0413,
p0414,
p0415,
p0416,
p0417,
p0418,
p0419,
p0420,
p0421,
p0422,
p0423,
p0424,
p0425,
p0426,
p0427,
p0428,
p0429,
p0430,
p0431,
p0432,
p0433,
p0434,
p0435,
p0436,
p0437,
p0438,
p0439,
p0440,
p0441,
p0442,
p0443,
p0444,
p0445,
p0446,
p0447,
p0448,
p0449,
p0450,
p0451,
p0452,
p0453,
p0454,
p0455,
p0456,
p0457,
p0458,
p0459,
p0460,
p0461,
p0462,
p0463,
p0464,
p0465,
p0466,
p0467,
p0468,
p0469,
p0470,
p0471,
p0472,
p0473,
p0474,
p0475,
p0476,
p0477,
p0478,
p0479,
p0480,
p0481,
p0482,
p0483,
p0484,
p0485,
p0486,
p0487,
p0488,
p0489,
p0490,
p0491,
p0492,
p0493,
p0494,
p0495,
p0496,
p0497,
p0498,
p0499,
p0500,
p0501,
p0502,
p0503,
p0504,
p0505,
p0506,
p0507,
p0508,
p0509,
p0510,
p0511,
p0512,
p0513,
p0514,
p0515,
p0516,
p0517,
p0518,
p0519,
p0520,
p0521,
p0522,
p0523,
p0524,
p0525,
p0526,
p0527,
p0528,
p0529,
p0530,
p0531,
p0532,
p0533,
p0534,
p0535,
p0536,
p0537,
p0538,
p0539,
p0540,
p0541,
p0542,
p0543,
p0544,
p0545,
p0546,
p0547,
p0548,
p0549,
p0550,
p0551,
p0552,
p0553,
p0554,
p0555,
p0556,
p0557,
p0558,
p0559,
p0560,
p0561,
p0562,
p0563,
p0564,
p0565,
p0566,
p0567,
p0568,
p0569,
p0570,
p0571,
p0572,
p0573,
p0574,
p0575,
p0576,
p0577,
p0578,
p0579,
p0580,
p0581,
p0582,
p0583,
p0584,
p0585,
p0586,
p0587,
p0588,
p0589,
p0590,
p0591,
p0592,
p0593,
p0594,
p0595,
p0596,
p0597,
p0598,
p0599,
p0600,
p0601,
p0602,
p0603,
p0604,
p0605,
p0606,
p0607,
p0608,
p0609,
p0610,
p0611,
p0612,
p0613,
p0614,
p0615,
p0616,
p0617,
p0618,
p0619,
p0620,
p0621,
p0622,
p0623,
p0624,
p0625,
p0626,
p0627,
p0628,
p0629,
p0630,
p0631,
p0632,
p0633,
p0634,
p0635,
p0636,
p0637,
p0638,
p0639,
p0640,
p0641,
p0642,
p0643,
p0644,
p0645,
p0646,
p0647,
p0648,
p0649,
p0650,
p0651,
p0652,
p0653,
p0654,
p0655,
p0656,
p0657,
p0658,
p0659,
p0660,
p0661,
p0662,
p0663,
p0664,
p0665,
p0666,
p0667,
p0668,
p0669,
p0670,
p0671,
p0672,
p0673,
p0674,
p0675,
p0676,
p0677,
p0678,
p0679,
p0680,
p0681,
p0682,
p0683,
p0684,
p0685,
p0686,
p0687,
p0688,
p0689,
p0690,
p0691,
p0692,
p0693,
p0694,
p0695,
p0696,
p0697,
p0698,
p0699,
p0700,
p0701,
p0702,
p0703,
p0704,
p0705,
p0706,
p0707,
p0708,
p0709,
p0710,
p0711,
p0712,
p0713,
p0714,
p0715,
p0716,
p0717,
p0718,
p0719,
p0720,
p0721,
p0722,
p0723,
p0724,
p0725,
p0726,
p0727,
p0728,
p0729,
p0730,
p0731,
p0732,
p0733,
p0734,
p0735,
p0736,
p0737,
p0738,
p0739,
p0740,
p0741,
p0742,
p0743,
p0744,
p0745,
p0746,
p0747,
p0748,
p0749,
p0750,
p0751,
p0752,
p0753,
p0754,
p0755,
p0756,
p0757,
p0758,
p0759,
p0760,
p0761,
p0762,
p0763,
p0764,
p0765,
p0766,
p0767,
p0768,
p0769,
p0770,
p0771,
p0772,
p0773,
p0774,
p0775,
p0776,
p0777,
p0778,
p0779,
p0780,
p0781,
p0782,
p0783,
p0784,
p0785,
p0786,
p0787,
p0788,
p0789,
p0790,
p0791,
p0792,
p0793,
p0794,
p0795,
p0796,
p0797,
p0798,
p0799,
p0800,
p0801,
p0802,
p0803,
p0804,
p0805,
p0806,
p0807,
p0808,
p0809,
p0810,
p0811,
p0812,
p0813,
p0814,
p0815,
p0816,
p0817,
p0818,
p0819,
p0820,
p0821,
p0822,
p0823,
p0824,
p0825,
p0826,
p0827,
p0828,
p0829,
p0830,
p0831,
p0832,
p0833,
p0834,
p0835,
p0836,
p0837,
p0838,
p0839,
p0840,
p0841,
p0842,
p0843,
p0844,
p0845,
p0846,
p0847,
p0848,
p0849,
p0850,
p0851,
p0852,
p0853,
p0854,
p0855,
p0856,
p0857,
p0858,
p0859,
p0860,
p0861,
p0862,
p0863,
p0864,
p0865,
p0866,
p0867,
p0868,
p0869,
p0870,
p0871,
p0872,
p0873,
p0874,
p0875,
p0876,
p0877,
p0878,
p0879,
p0880,
p0881,
p0882,
p0883,
p0884,
p0885,
p0886,
p0887,
p0888,
p0889,
p0890,
p0891,
p0892,
p0893,
p0894,
p0895,
p0896,
p0897,
p0898,
p0899,
p0900,
p0901,
p0902,
p0903,
p0904,
p0905,
p0906,
p0907,
p0908,
p0909,
p0910,
p0911,
p0912,
p0913,
p0914,
p0915,
p0916,
p0917,
p0918,
p0919,
p0920,
p0921,
p0922,
p0923,
p0924,
p0925,
p0926,
p0927,
p0928,
p0929,
p0930,
p0931,
p0932,
p0933,
p0934,
p0935,
p0936,
p0937,
p0938,
p0939,
p0940,
p0941,
p0942,
p0943,
p0944,
p0945,
p0946,
p0947,
p0948,
p0949,
p0950,
p0951,
p0952,
p0953,
p0954,
p0955,
p0956,
p0957,
p0958,
p0959,
p0960,
p0961,
p0962,
p0963,
p0964,
p0965,
p0966,
p0967,
p0968,
p0969,
p0970,
p0971,
p0972,
p0973,
p0974,
p0975,
p0976,
p0977,
p0978,
p0979,
p0980,
p0981,
p0982,
p0983,
p0984,
p0985,
p0986,
p0987,
p0988,
p0989,
p0990,
p0991,
p0992,
p0993,
p0994,
p0995,
p0996,
p0997,
p0998,
p0999,
p1000,
p1001,
p1002,
p1003,
p1004,
p1005,
p1006,
p1007,
p1008,
p1009,
p1010,
p1011,
p1012,
p1013,
p1014,
p1015,
p1016,
p1017,
p1018,
p1019,
p1020,
p1021,
p1022,
p1023,
p1024,
p1025,
p1026,
p1027,
p1028,
p1029,
p1030,
p1031,
p1032,
p1033,
p1034,
p1035,
p1036,
p1037,
p1038,
p1039,
p1040,
p1041,
p1042,
p1043,
p1044,
p1045,
p1046,
p1047,
p1048,
p1049,
p1050,
p1051,
p1052,
p1053,
p1054,
p1055,
p1056,
p1057,
p1058,
p1059,
p1060,
p1061,
p1062,
p1063,
p1064,
p1065,
p1066,
p1067,
p1068,
p1069,
p1070,
p1071,
p1072,
p1073,
p1074,
p1075,
p1076,
p1077,
p1078,
p1079,
p1080,
p1081,
p1082,
p1083,
p1084,
p1085,
p1086,
p1087,
p1088,
p1089,
p1090,
p1091,
p1092,
p1093,
p1094,
p1095,
p1096,
p1097,
p1098,
p1099,
p1100,
p1101,
p1102,
p1103,
p1104,
p1105,
p1106,
p1107,
p1108,
p1109,
p1110,
p1111,
p1112,
p1113,
p1114,
p1115,
p1116,
p1117,
p1118,
p1119,
p1120,
p1121,
p1122,
p1123,
p1124,
p1125,
p1126,
true
);

      invariant $non_null($phys_ptr_cast(L#l, ^s_node)) ==> $mutable($s, $phys_ptr_cast(L#l, ^s_node));
      invariant $non_null($phys_ptr_cast(L#l, ^s_node)) ==> $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(L#l, ^s_node));
      invariant $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> $mutable($s, $phys_ptr_cast(local.l1, ^s_node));
      invariant $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(local.l1, ^s_node));
      invariant $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> $mutable($s, $phys_ptr_cast(local.l2, ^s_node));
      invariant $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(local.l2, ^s_node));
    {
      anon6:
        assume $writes_nothing(old($s), $s);
        assume $timestamp_post(loopState#0, $s);
        assume $full_stop_ext(#tok$3^33.2, $s);
        // assume @_vcc_meta_eq(old(@prestate, @state), @state); 
        assume $meta_eq(loopState#0, $s);
        // _Bool ite#1; 
        // ite#1 := &&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(local.l2)); 
        ite#1 := $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($phys_ptr_cast(local.l2, ^s_node));
        assume true;
        // if (ite#1) ...
        if (ite#1)
        {
          anon3:
            // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_keys(list2), @_vcc_intset_union(sll_keys(*((list2->next))), @_vcc_intset_singleton(*((list2->key)))))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#list2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_list_len_next(list2), unchecked+(sll_list_len_next(*((list2->next))), 1))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#list2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(rsrtl(list2), &&(&&(rsrtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, rsrtl_reach(*((list2->next)))))), >=(*((list2->key)), sll_max_key(*((list2->next))))))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list2), ==(rsrtl_reach(list2), @_vcc_oset_union(rsrtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll(list2), &&(sll(*((list2->next))), unchecked!(@_vcc_oset_in(list2, sll_reach(*((list2->next)))))))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_reach(list2), @_vcc_oset_union(sll_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_max_key(list2), @\int_max(*((list2->key)), sll_max_key(*((list2->next)))))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_min_key(list2), @\int_min(*((list2->key)), sll_min_key(*((list2->next)))))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(srtl(list2), &&(&&(srtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, srtl_reach(*((list2->next)))))), <=(*((list2->key)), sll_min_key(*((list2->next))))))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list2), ==(srtl_reach(list2), @_vcc_oset_union(srtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg(list, l), &&(sll_lseg(*((list->next)), l), unchecked!(@_vcc_oset_in(list, sll_lseg_reach(*((list->next)), l)))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_reach(list, l), @_vcc_oset_union(sll_lseg_reach(*((list->next)), l), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_keys(list, l), @_vcc_intset_union(sll_lseg_keys(*((list->next)), l), @_vcc_intset_singleton(*((list->key)))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_len_next(list, l), unchecked+(sll_lseg_len_next(*((list->next)), l), 1))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(sll_lseg_max_key(list, l), @\int_max(*((list->key)), sll_lseg_max_key(*((list->next)), l)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(sll_lseg_min_key(list, l), @\int_min(*((list->key)), sll_lseg_min_key(*((list->next)), l)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(srtl_lseg(list, l), &&(&&(srtl_lseg(*((list->next)), l), unchecked!(@_vcc_oset_in(list, srtl_lseg_reach(*((list->next)), l)))), <=(*((list->key)), sll_lseg_min_key(*((list->next)), l))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(srtl_lseg_reach(list, l), @_vcc_oset_union(srtl_lseg_reach(*((list->next)), l), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), &&(==(@_vcc_mutable(@state, l), @_vcc_mutable(@state, *((l->next)))), ==(@writes_check(l), @writes_check(*((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> $mutable($s, $phys_ptr_cast(L#l, ^s_node)) == $mutable($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(L#l, ^s_node)) == $top_writable($s, #wrTime$3^3.3, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node));
            // assert @reads_check_normal((local.l1->key)); 
            assert $thread_local($s, $phys_ptr_cast(local.l1, ^s_node));
            // assert @reads_check_normal((local.l2->key)); 
            assert $thread_local($s, $phys_ptr_cast(local.l2, ^s_node));
            assume true;
            // if (<=(*((local.l1->key)), *((local.l2->key)))) ...
            if ($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)))
            {
              anon1:
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_keys(list2), @_vcc_intset_union(sll_keys(*((list2->next))), @_vcc_intset_singleton(*((list2->key)))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#list2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_list_len_next(list2), unchecked+(sll_list_len_next(*((list2->next))), 1))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#list2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(rsrtl(list2), &&(&&(rsrtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, rsrtl_reach(*((list2->next)))))), >=(*((list2->key)), sll_max_key(*((list2->next))))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(rsrtl_reach(list2), @_vcc_oset_union(rsrtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll(list2), &&(sll(*((list2->next))), unchecked!(@_vcc_oset_in(list2, sll_reach(*((list2->next)))))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_reach(list2), @_vcc_oset_union(sll_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_max_key(list2), @\int_max(*((list2->key)), sll_max_key(*((list2->next)))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_min_key(list2), @\int_min(*((list2->key)), sll_min_key(*((list2->next)))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(srtl(list2), &&(&&(srtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, srtl_reach(*((list2->next)))))), <=(*((list2->key)), sll_min_key(*((list2->next))))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(srtl_reach(list2), @_vcc_oset_union(srtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg(list, l), &&(sll_lseg(*((list->next)), l), unchecked!(@_vcc_oset_in(list, sll_lseg_reach(*((list->next)), l)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node))));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_reach(list, l), @_vcc_oset_union(sll_lseg_reach(*((list->next)), l), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_keys(list, l), @_vcc_intset_union(sll_lseg_keys(*((list->next)), l), @_vcc_intset_singleton(*((list->key)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_len_next(list, l), unchecked+(sll_lseg_len_next(*((list->next)), l), 1))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), 1);
                // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(sll_lseg_max_key(list, l), @\int_max(*((list->key)), sll_lseg_max_key(*((list->next)), l)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(sll_lseg_min_key(list, l), @\int_min(*((list->key)), sll_lseg_min_key(*((list->next)), l)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(srtl_lseg(list, l), &&(&&(srtl_lseg(*((list->next)), l), unchecked!(@_vcc_oset_in(list, srtl_lseg_reach(*((list->next)), l)))), <=(*((list->key)), sll_lseg_min_key(*((list->next)), l))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(srtl_lseg_reach(list, l), @_vcc_oset_union(srtl_lseg_reach(*((list->next)), l), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // _math \state _dryad_S6; 
                // _dryad_S6 := @_vcc_current_state(@state); 
                SL#_dryad_S6 := $current_state($s);
                // _math \state stmtexpr0#9; 
                // stmtexpr0#9 := _dryad_S6; 
                stmtexpr0#9 := SL#_dryad_S6;
                // assert @prim_writes_check((l->next)); 
                assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#l, ^s_node), s_node.next));
                // *(l->next) := local.l1; 
                call $write_int(s_node.next, $phys_ptr_cast(L#l, ^s_node), $ptr_to_int($phys_ptr_cast(local.l1, ^s_node)));
                assume $full_stop_ext(#tok$3^70.4, $s);
                // _math \state _dryad_S7; 
                // _dryad_S7 := @_vcc_current_state(@state); 
                SL#_dryad_S7 := $current_state($s);
                // _math \state stmtexpr1#10; 
                // stmtexpr1#10 := _dryad_S7; 
                stmtexpr1#10 := SL#_dryad_S7;
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list2)))), ==(old(_dryad_S6, sll_keys(list2)), old(_dryad_S7, sll_keys(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list2)))), ==(old(_dryad_S6, sll_list_len_next(list2)), old(_dryad_S7, sll_list_len_next(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, rsrtl_reach(list2)))), ==(old(_dryad_S6, rsrtl(list2)), old(_dryad_S7, rsrtl(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, rsrtl_reach(list2)))), ==(old(_dryad_S6, rsrtl_reach(list2)), old(_dryad_S7, rsrtl_reach(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list2)))), ==(old(_dryad_S6, sll(list2)), old(_dryad_S7, sll(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list2)))), ==(old(_dryad_S6, sll_reach(list2)), old(_dryad_S7, sll_reach(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list2)))), ==(old(_dryad_S6, sll_max_key(list2)), old(_dryad_S7, sll_max_key(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list2)))), ==(old(_dryad_S6, sll_min_key(list2)), old(_dryad_S7, sll_min_key(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, srtl_reach(list2)))), ==(old(_dryad_S6, srtl(list2)), old(_dryad_S7, srtl(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, srtl_reach(list2)))), ==(old(_dryad_S6, srtl_reach(list2)), old(_dryad_S7, srtl_reach(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list)))), ==(old(_dryad_S6, sll_keys(list)), old(_dryad_S7, sll_keys(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list)))), ==(old(_dryad_S6, sll_list_len_next(list)), old(_dryad_S7, sll_list_len_next(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, rsrtl_reach(list)))), ==(old(_dryad_S6, rsrtl(list)), old(_dryad_S7, rsrtl(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, rsrtl_reach(list)))), ==(old(_dryad_S6, rsrtl_reach(list)), old(_dryad_S7, rsrtl_reach(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list)))), ==(old(_dryad_S6, sll(list)), old(_dryad_S7, sll(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list)))), ==(old(_dryad_S6, sll_reach(list)), old(_dryad_S7, sll_reach(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list)))), ==(old(_dryad_S6, sll_max_key(list)), old(_dryad_S7, sll_max_key(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list)))), ==(old(_dryad_S6, sll_min_key(list)), old(_dryad_S7, sll_min_key(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, srtl_reach(list)))), ==(old(_dryad_S6, srtl(list)), old(_dryad_S7, srtl(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, srtl_reach(list)))), ==(old(_dryad_S6, srtl_reach(list)), old(_dryad_S7, srtl_reach(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list_next)))), ==(old(_dryad_S6, sll_keys(list_next)), old(_dryad_S7, sll_keys(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list_next)))), ==(old(_dryad_S6, sll_list_len_next(list_next)), old(_dryad_S7, sll_list_len_next(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, rsrtl_reach(list_next)))), ==(old(_dryad_S6, rsrtl(list_next)), old(_dryad_S7, rsrtl(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, rsrtl_reach(list_next)))), ==(old(_dryad_S6, rsrtl_reach(list_next)), old(_dryad_S7, rsrtl_reach(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list_next)))), ==(old(_dryad_S6, sll(list_next)), old(_dryad_S7, sll(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list_next)))), ==(old(_dryad_S6, sll_reach(list_next)), old(_dryad_S7, sll_reach(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list_next)))), ==(old(_dryad_S6, sll_max_key(list_next)), old(_dryad_S7, sll_max_key(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list_next)))), ==(old(_dryad_S6, sll_min_key(list_next)), old(_dryad_S7, sll_min_key(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, srtl_reach(list_next)))), ==(old(_dryad_S6, srtl(list_next)), old(_dryad_S7, srtl(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, srtl_reach(list_next)))), ==(old(_dryad_S6, srtl_reach(list_next)), old(_dryad_S7, srtl_reach(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(local.l2)))), ==(old(_dryad_S6, sll_keys(local.l2)), old(_dryad_S7, sll_keys(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(local.l2)))), ==(old(_dryad_S6, sll_list_len_next(local.l2)), old(_dryad_S7, sll_list_len_next(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, rsrtl_reach(local.l2)))), ==(old(_dryad_S6, rsrtl(local.l2)), old(_dryad_S7, rsrtl(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, rsrtl_reach(local.l2)))), ==(old(_dryad_S6, rsrtl_reach(local.l2)), old(_dryad_S7, rsrtl_reach(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(local.l2)))), ==(old(_dryad_S6, sll(local.l2)), old(_dryad_S7, sll(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(local.l2)))), ==(old(_dryad_S6, sll_reach(local.l2)), old(_dryad_S7, sll_reach(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(local.l2)))), ==(old(_dryad_S6, sll_max_key(local.l2)), old(_dryad_S7, sll_max_key(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(local.l2)))), ==(old(_dryad_S6, sll_min_key(local.l2)), old(_dryad_S7, sll_min_key(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, srtl_reach(local.l2)))), ==(old(_dryad_S6, srtl(local.l2)), old(_dryad_S7, srtl(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, srtl_reach(local.l2)))), ==(old(_dryad_S6, srtl_reach(local.l2)), old(_dryad_S7, srtl_reach(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(local.l1)))), ==(old(_dryad_S6, sll_keys(local.l1)), old(_dryad_S7, sll_keys(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(local.l1)))), ==(old(_dryad_S6, sll_list_len_next(local.l1)), old(_dryad_S7, sll_list_len_next(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, rsrtl_reach(local.l1)))), ==(old(_dryad_S6, rsrtl(local.l1)), old(_dryad_S7, rsrtl(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, rsrtl_reach(local.l1)))), ==(old(_dryad_S6, rsrtl_reach(local.l1)), old(_dryad_S7, rsrtl_reach(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(local.l1)))), ==(old(_dryad_S6, sll(local.l1)), old(_dryad_S7, sll(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(local.l1)))), ==(old(_dryad_S6, sll_reach(local.l1)), old(_dryad_S7, sll_reach(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(local.l1)))), ==(old(_dryad_S6, sll_max_key(local.l1)), old(_dryad_S7, sll_max_key(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(local.l1)))), ==(old(_dryad_S6, sll_min_key(local.l1)), old(_dryad_S7, sll_min_key(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, srtl_reach(local.l1)))), ==(old(_dryad_S6, srtl(local.l1)), old(_dryad_S7, srtl(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, srtl_reach(local.l1)))), ==(old(_dryad_S6, srtl_reach(local.l1)), old(_dryad_S7, srtl_reach(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_lseg_reach(list, l)))), ==(old(_dryad_S6, sll_lseg(list, l)), old(_dryad_S7, sll_lseg(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_lseg_reach(list, l)))), ==(old(_dryad_S6, sll_lseg_reach(list, l)), old(_dryad_S7, sll_lseg_reach(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_lseg_reach(list, l)))), ==(old(_dryad_S6, sll_lseg_keys(list, l)), old(_dryad_S7, sll_lseg_keys(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_lseg_reach(list, l)))), ==(old(_dryad_S6, sll_lseg_len_next(list, l)), old(_dryad_S7, sll_lseg_len_next(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_lseg_reach(list, l)))), ==(old(_dryad_S6, sll_lseg_max_key(list, l)), old(_dryad_S7, sll_lseg_max_key(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_lseg_reach(list, l)))), ==(old(_dryad_S6, sll_lseg_min_key(list, l)), old(_dryad_S7, sll_lseg_min_key(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, srtl_lseg_reach(list, l)))), ==(old(_dryad_S6, srtl_lseg(list, l)), old(_dryad_S7, srtl_lseg(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#srtl_lseg(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, srtl_lseg_reach(list, l)))), ==(old(_dryad_S6, srtl_lseg_reach(list, l)), old(_dryad_S7, srtl_lseg_reach(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(l, list2)), ==(*((list2->key)), old(_dryad_S6, *((list2->key))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(SL#list2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) == $rd_inv(SL#_dryad_S6, s_node.key, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(l, list2)), @_vcc_ptr_eq_pure(*((list2->next)), old(_dryad_S6, *((list2->next))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(SL#list2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S6, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(l, list)), ==(*((list->key)), old(_dryad_S6, *((list->key))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) == $rd_inv(SL#_dryad_S6, s_node.key, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(l, list)), @_vcc_ptr_eq_pure(*((list->next)), old(_dryad_S6, *((list->next))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S6, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(l, list_next)), ==(*((list_next->key)), old(_dryad_S6, *((list_next->key))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) == $rd_inv(SL#_dryad_S6, s_node.key, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(l, list_next)), @_vcc_ptr_eq_pure(*((list_next->next)), old(_dryad_S6, *((list_next->next))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S6, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l2)), ==(*((local.l2->key)), old(_dryad_S6, *((local.l2->key))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) == $rd_inv(SL#_dryad_S6, s_node.key, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l2)), @_vcc_ptr_eq_pure(*((local.l2->next)), old(_dryad_S6, *((local.l2->next))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S6, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l1)), ==(*((local.l1->key)), old(_dryad_S6, *((local.l1->key))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) == $rd_inv(SL#_dryad_S6, s_node.key, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l1)), @_vcc_ptr_eq_pure(*((local.l1->next)), old(_dryad_S6, *((local.l1->next))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S6, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node);
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_keys(list2), @_vcc_intset_union(sll_keys(*((list2->next))), @_vcc_intset_singleton(*((list2->key)))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#list2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_list_len_next(list2), unchecked+(sll_list_len_next(*((list2->next))), 1))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#list2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(rsrtl(list2), &&(&&(rsrtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, rsrtl_reach(*((list2->next)))))), >=(*((list2->key)), sll_max_key(*((list2->next))))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(rsrtl_reach(list2), @_vcc_oset_union(rsrtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll(list2), &&(sll(*((list2->next))), unchecked!(@_vcc_oset_in(list2, sll_reach(*((list2->next)))))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_reach(list2), @_vcc_oset_union(sll_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_max_key(list2), @\int_max(*((list2->key)), sll_max_key(*((list2->next)))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_min_key(list2), @\int_min(*((list2->key)), sll_min_key(*((list2->next)))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(srtl(list2), &&(&&(srtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, srtl_reach(*((list2->next)))))), <=(*((list2->key)), sll_min_key(*((list2->next))))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(srtl_reach(list2), @_vcc_oset_union(srtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), &&(==(@_vcc_mutable(@state, local.l1), @_vcc_mutable(@state, *((local.l1->next)))), ==(@writes_check(local.l1), @writes_check(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> $mutable($s, $phys_ptr_cast(local.l1, ^s_node)) == $mutable($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(local.l1, ^s_node)) == $top_writable($s, #wrTime$3^3.3, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node));
                // struct s_node* l14; 
                // l14 := local.l1; 
                SL#l14 := $phys_ptr_cast(local.l1, ^s_node);
                // struct s_node* stmtexpr2#11; 
                // stmtexpr2#11 := l14; 
                stmtexpr2#11 := $phys_ptr_cast(SL#l14, ^s_node);
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_pure(local.l1, *((local.l1->next)))), ==(sll_lseg(local.l1, *((local.l1->next))), &&(sll_lseg(*((local.l1->next)), *((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_lseg_reach(*((local.l1->next)), *((local.l1->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $phys_ptr_cast(local.l1, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(local.l1, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_pure(local.l1, *((local.l1->next)))), ==(sll_lseg_reach(local.l1, *((local.l1->next))), @_vcc_oset_union(sll_lseg_reach(*((local.l1->next)), *((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $phys_ptr_cast(local.l1, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(local.l1, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_pure(local.l1, *((local.l1->next)))), ==(sll_lseg_keys(local.l1, *((local.l1->next))), @_vcc_intset_union(sll_lseg_keys(*((local.l1->next)), *((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $phys_ptr_cast(local.l1, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(local.l1, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_pure(local.l1, *((local.l1->next)))), ==(sll_lseg_len_next(local.l1, *((local.l1->next))), unchecked+(sll_lseg_len_next(*((local.l1->next)), *((local.l1->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $phys_ptr_cast(local.l1, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(local.l1, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
                // assume ==>(&&(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_pure(local.l1, *((local.l1->next)))), @_vcc_ptr_neq_pure(*((local.l1->next)), *((local.l1->next)))), ==(sll_lseg_max_key(local.l1, *((local.l1->next))), @\int_max(*((local.l1->key)), sll_lseg_max_key(*((local.l1->next)), *((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $phys_ptr_cast(local.l1, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(local.l1, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_pure(local.l1, *((local.l1->next)))), @_vcc_ptr_neq_pure(*((local.l1->next)), *((local.l1->next)))), ==(sll_lseg_min_key(local.l1, *((local.l1->next))), @\int_min(*((local.l1->key)), sll_lseg_min_key(*((local.l1->next)), *((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $phys_ptr_cast(local.l1, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(local.l1, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_pure(local.l1, *((local.l1->next)))), @_vcc_ptr_neq_pure(*((local.l1->next)), *((local.l1->next)))), ==(srtl_lseg(local.l1, *((local.l1->next))), &&(&&(srtl_lseg(*((local.l1->next)), *((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_lseg_reach(*((local.l1->next)), *((local.l1->next)))))), <=(*((local.l1->key)), sll_lseg_min_key(*((local.l1->next)), *((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $phys_ptr_cast(local.l1, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(local.l1, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_pure(local.l1, *((local.l1->next)))), ==(srtl_lseg_reach(local.l1, *((local.l1->next))), @_vcc_oset_union(srtl_lseg_reach(*((local.l1->next)), *((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $phys_ptr_cast(local.l1, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(local.l1, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assert @reads_check_normal((local.l1->next)); 
                assert $thread_local($s, $phys_ptr_cast(local.l1, ^s_node));
                // local.l1 := *((local.l1->next)); 
                local.l1 := $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node);
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
            }
            else
            {
              anon2:
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_keys(list2), @_vcc_intset_union(sll_keys(*((list2->next))), @_vcc_intset_singleton(*((list2->key)))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#list2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_list_len_next(list2), unchecked+(sll_list_len_next(*((list2->next))), 1))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#list2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(rsrtl(list2), &&(&&(rsrtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, rsrtl_reach(*((list2->next)))))), >=(*((list2->key)), sll_max_key(*((list2->next))))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(rsrtl_reach(list2), @_vcc_oset_union(rsrtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll(list2), &&(sll(*((list2->next))), unchecked!(@_vcc_oset_in(list2, sll_reach(*((list2->next)))))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_reach(list2), @_vcc_oset_union(sll_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_max_key(list2), @\int_max(*((list2->key)), sll_max_key(*((list2->next)))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_min_key(list2), @\int_min(*((list2->key)), sll_min_key(*((list2->next)))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(srtl(list2), &&(&&(srtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, srtl_reach(*((list2->next)))))), <=(*((list2->key)), sll_min_key(*((list2->next))))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(srtl_reach(list2), @_vcc_oset_union(srtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg(list, l), &&(sll_lseg(*((list->next)), l), unchecked!(@_vcc_oset_in(list, sll_lseg_reach(*((list->next)), l)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node))));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_reach(list, l), @_vcc_oset_union(sll_lseg_reach(*((list->next)), l), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_keys(list, l), @_vcc_intset_union(sll_lseg_keys(*((list->next)), l), @_vcc_intset_singleton(*((list->key)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_len_next(list, l), unchecked+(sll_lseg_len_next(*((list->next)), l), 1))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), 1);
                // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(sll_lseg_max_key(list, l), @\int_max(*((list->key)), sll_lseg_max_key(*((list->next)), l)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(sll_lseg_min_key(list, l), @\int_min(*((list->key)), sll_lseg_min_key(*((list->next)), l)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(srtl_lseg(list, l), &&(&&(srtl_lseg(*((list->next)), l), unchecked!(@_vcc_oset_in(list, srtl_lseg_reach(*((list->next)), l)))), <=(*((list->key)), sll_lseg_min_key(*((list->next)), l))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(srtl_lseg_reach(list, l), @_vcc_oset_union(srtl_lseg_reach(*((list->next)), l), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // _math \state _dryad_S6#0; 
                // _dryad_S6#0 := @_vcc_current_state(@state); 
                _dryad_S6#0 := $current_state($s);
                // _math \state stmtexpr0#12; 
                // stmtexpr0#12 := _dryad_S6#0; 
                stmtexpr0#12 := _dryad_S6#0;
                // assert @prim_writes_check((l->next)); 
                assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#l, ^s_node), s_node.next));
                // *(l->next) := local.l2; 
                call $write_int(s_node.next, $phys_ptr_cast(L#l, ^s_node), $ptr_to_int($phys_ptr_cast(local.l2, ^s_node)));
                assume $full_stop_ext(#tok$3^74.4, $s);
                // _math \state _dryad_S7#1; 
                // _dryad_S7#1 := @_vcc_current_state(@state); 
                _dryad_S7#1 := $current_state($s);
                // _math \state stmtexpr1#13; 
                // stmtexpr1#13 := _dryad_S7#1; 
                stmtexpr1#13 := _dryad_S7#1;
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list2)))), ==(old(_dryad_S6#0, sll_keys(list2)), old(_dryad_S7#1, sll_keys(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_keys(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_keys(_dryad_S7#1, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list2)))), ==(old(_dryad_S6#0, sll_list_len_next(list2)), old(_dryad_S7#1, sll_list_len_next(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_list_len_next(_dryad_S7#1, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, rsrtl_reach(list2)))), ==(old(_dryad_S6#0, rsrtl(list2)), old(_dryad_S7#1, rsrtl(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#rsrtl(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node)) == F#rsrtl(_dryad_S7#1, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, rsrtl_reach(list2)))), ==(old(_dryad_S6#0, rsrtl_reach(list2)), old(_dryad_S7#1, rsrtl_reach(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node)) == F#rsrtl_reach(_dryad_S7#1, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list2)))), ==(old(_dryad_S6#0, sll(list2)), old(_dryad_S7#1, sll(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll(_dryad_S7#1, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list2)))), ==(old(_dryad_S6#0, sll_reach(list2)), old(_dryad_S7#1, sll_reach(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_reach(_dryad_S7#1, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list2)))), ==(old(_dryad_S6#0, sll_max_key(list2)), old(_dryad_S7#1, sll_max_key(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_max_key(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_max_key(_dryad_S7#1, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list2)))), ==(old(_dryad_S6#0, sll_min_key(list2)), old(_dryad_S7#1, sll_min_key(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_min_key(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_min_key(_dryad_S7#1, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, srtl_reach(list2)))), ==(old(_dryad_S6#0, srtl(list2)), old(_dryad_S7#1, srtl(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#srtl(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node)) == F#srtl(_dryad_S7#1, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, srtl_reach(list2)))), ==(old(_dryad_S6#0, srtl_reach(list2)), old(_dryad_S7#1, srtl_reach(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node)) == F#srtl_reach(_dryad_S7#1, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list)))), ==(old(_dryad_S6#0, sll_keys(list)), old(_dryad_S7#1, sll_keys(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_keys(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node)) == F#sll_keys(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list)))), ==(old(_dryad_S6#0, sll_list_len_next(list)), old(_dryad_S7#1, sll_list_len_next(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node)) == F#sll_list_len_next(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, rsrtl_reach(list)))), ==(old(_dryad_S6#0, rsrtl(list)), old(_dryad_S7#1, rsrtl(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node))) ==> F#rsrtl(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node)) == F#rsrtl(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, rsrtl_reach(list)))), ==(old(_dryad_S6#0, rsrtl_reach(list)), old(_dryad_S7#1, rsrtl_reach(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node)) == F#rsrtl_reach(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list)))), ==(old(_dryad_S6#0, sll(list)), old(_dryad_S7#1, sll(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node)) == F#sll(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list)))), ==(old(_dryad_S6#0, sll_reach(list)), old(_dryad_S7#1, sll_reach(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node)) == F#sll_reach(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list)))), ==(old(_dryad_S6#0, sll_max_key(list)), old(_dryad_S7#1, sll_max_key(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_max_key(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node)) == F#sll_max_key(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list)))), ==(old(_dryad_S6#0, sll_min_key(list)), old(_dryad_S7#1, sll_min_key(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_min_key(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node)) == F#sll_min_key(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, srtl_reach(list)))), ==(old(_dryad_S6#0, srtl(list)), old(_dryad_S7#1, srtl(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node))) ==> F#srtl(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node)) == F#srtl(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, srtl_reach(list)))), ==(old(_dryad_S6#0, srtl_reach(list)), old(_dryad_S7#1, srtl_reach(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node))) ==> F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node)) == F#srtl_reach(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list_next)))), ==(old(_dryad_S6#0, sll_keys(list_next)), old(_dryad_S7#1, sll_keys(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_keys(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_keys(_dryad_S7#1, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list_next)))), ==(old(_dryad_S6#0, sll_list_len_next(list_next)), old(_dryad_S7#1, sll_list_len_next(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_list_len_next(_dryad_S7#1, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, rsrtl_reach(list_next)))), ==(old(_dryad_S6#0, rsrtl(list_next)), old(_dryad_S7#1, rsrtl(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl(_dryad_S7#1, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, rsrtl_reach(list_next)))), ==(old(_dryad_S6#0, rsrtl_reach(list_next)), old(_dryad_S7#1, rsrtl_reach(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl_reach(_dryad_S7#1, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list_next)))), ==(old(_dryad_S6#0, sll(list_next)), old(_dryad_S7#1, sll(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll(_dryad_S7#1, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list_next)))), ==(old(_dryad_S6#0, sll_reach(list_next)), old(_dryad_S7#1, sll_reach(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_reach(_dryad_S7#1, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list_next)))), ==(old(_dryad_S6#0, sll_max_key(list_next)), old(_dryad_S7#1, sll_max_key(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_max_key(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_max_key(_dryad_S7#1, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list_next)))), ==(old(_dryad_S6#0, sll_min_key(list_next)), old(_dryad_S7#1, sll_min_key(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_min_key(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_min_key(_dryad_S7#1, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, srtl_reach(list_next)))), ==(old(_dryad_S6#0, srtl(list_next)), old(_dryad_S7#1, srtl(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl(_dryad_S7#1, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, srtl_reach(list_next)))), ==(old(_dryad_S6#0, srtl_reach(list_next)), old(_dryad_S7#1, srtl_reach(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl_reach(_dryad_S7#1, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(local.l2)))), ==(old(_dryad_S6#0, sll_keys(local.l2)), old(_dryad_S7#1, sll_keys(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_keys(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_keys(_dryad_S7#1, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(local.l2)))), ==(old(_dryad_S6#0, sll_list_len_next(local.l2)), old(_dryad_S7#1, sll_list_len_next(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_list_len_next(_dryad_S7#1, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, rsrtl_reach(local.l2)))), ==(old(_dryad_S6#0, rsrtl(local.l2)), old(_dryad_S7#1, rsrtl(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl(_dryad_S7#1, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, rsrtl_reach(local.l2)))), ==(old(_dryad_S6#0, rsrtl_reach(local.l2)), old(_dryad_S7#1, rsrtl_reach(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl_reach(_dryad_S7#1, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(local.l2)))), ==(old(_dryad_S6#0, sll(local.l2)), old(_dryad_S7#1, sll(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node)) == F#sll(_dryad_S7#1, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(local.l2)))), ==(old(_dryad_S6#0, sll_reach(local.l2)), old(_dryad_S7#1, sll_reach(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_reach(_dryad_S7#1, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(local.l2)))), ==(old(_dryad_S6#0, sll_max_key(local.l2)), old(_dryad_S7#1, sll_max_key(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_max_key(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_max_key(_dryad_S7#1, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(local.l2)))), ==(old(_dryad_S6#0, sll_min_key(local.l2)), old(_dryad_S7#1, sll_min_key(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_min_key(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_min_key(_dryad_S7#1, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, srtl_reach(local.l2)))), ==(old(_dryad_S6#0, srtl(local.l2)), old(_dryad_S7#1, srtl(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl(_dryad_S7#1, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, srtl_reach(local.l2)))), ==(old(_dryad_S6#0, srtl_reach(local.l2)), old(_dryad_S7#1, srtl_reach(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl_reach(_dryad_S7#1, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(local.l1)))), ==(old(_dryad_S6#0, sll_keys(local.l1)), old(_dryad_S7#1, sll_keys(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_keys(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_keys(_dryad_S7#1, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(local.l1)))), ==(old(_dryad_S6#0, sll_list_len_next(local.l1)), old(_dryad_S7#1, sll_list_len_next(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_list_len_next(_dryad_S7#1, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, rsrtl_reach(local.l1)))), ==(old(_dryad_S6#0, rsrtl(local.l1)), old(_dryad_S7#1, rsrtl(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl(_dryad_S7#1, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, rsrtl_reach(local.l1)))), ==(old(_dryad_S6#0, rsrtl_reach(local.l1)), old(_dryad_S7#1, rsrtl_reach(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl_reach(_dryad_S7#1, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(local.l1)))), ==(old(_dryad_S6#0, sll(local.l1)), old(_dryad_S7#1, sll(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node)) == F#sll(_dryad_S7#1, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(local.l1)))), ==(old(_dryad_S6#0, sll_reach(local.l1)), old(_dryad_S7#1, sll_reach(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_reach(_dryad_S7#1, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(local.l1)))), ==(old(_dryad_S6#0, sll_max_key(local.l1)), old(_dryad_S7#1, sll_max_key(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_max_key(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_max_key(_dryad_S7#1, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(local.l1)))), ==(old(_dryad_S6#0, sll_min_key(local.l1)), old(_dryad_S7#1, sll_min_key(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_min_key(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_min_key(_dryad_S7#1, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, srtl_reach(local.l1)))), ==(old(_dryad_S6#0, srtl(local.l1)), old(_dryad_S7#1, srtl(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl(_dryad_S7#1, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, srtl_reach(local.l1)))), ==(old(_dryad_S6#0, srtl_reach(local.l1)), old(_dryad_S7#1, srtl_reach(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl_reach(_dryad_S7#1, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#0, sll_lseg(list, l)), old(_dryad_S7#1, sll_lseg(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#0, sll_lseg_reach(list, l)), old(_dryad_S7#1, sll_lseg_reach(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_reach(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#0, sll_lseg_keys(list, l)), old(_dryad_S7#1, sll_lseg_keys(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_keys(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_keys(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#0, sll_lseg_len_next(list, l)), old(_dryad_S7#1, sll_lseg_len_next(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_len_next(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#0, sll_lseg_max_key(list, l)), old(_dryad_S7#1, sll_lseg_max_key(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_max_key(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_max_key(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#0, sll_lseg_min_key(list, l)), old(_dryad_S7#1, sll_lseg_min_key(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_min_key(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_min_key(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, srtl_lseg_reach(list, l)))), ==(old(_dryad_S6#0, srtl_lseg(list, l)), old(_dryad_S7#1, srtl_lseg(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_lseg(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#srtl_lseg(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, srtl_lseg_reach(list, l)))), ==(old(_dryad_S6#0, srtl_lseg_reach(list, l)), old(_dryad_S7#1, srtl_lseg_reach(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_lseg_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#srtl_lseg_reach(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(l, list2)), ==(*((list2->key)), old(_dryad_S6#0, *((list2->key))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(SL#list2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) == $rd_inv(_dryad_S6#0, s_node.key, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(l, list2)), @_vcc_ptr_eq_pure(*((list2->next)), old(_dryad_S6#0, *((list2->next))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(SL#list2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#0, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(l, list)), ==(*((list->key)), old(_dryad_S6#0, *((list->key))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) == $rd_inv(_dryad_S6#0, s_node.key, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(l, list)), @_vcc_ptr_eq_pure(*((list->next)), old(_dryad_S6#0, *((list->next))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#0, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(l, list_next)), ==(*((list_next->key)), old(_dryad_S6#0, *((list_next->key))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) == $rd_inv(_dryad_S6#0, s_node.key, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(l, list_next)), @_vcc_ptr_eq_pure(*((list_next->next)), old(_dryad_S6#0, *((list_next->next))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#0, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l2)), ==(*((local.l2->key)), old(_dryad_S6#0, *((local.l2->key))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) == $rd_inv(_dryad_S6#0, s_node.key, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l2)), @_vcc_ptr_eq_pure(*((local.l2->next)), old(_dryad_S6#0, *((local.l2->next))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#0, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l1)), ==(*((local.l1->key)), old(_dryad_S6#0, *((local.l1->key))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) == $rd_inv(_dryad_S6#0, s_node.key, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l1)), @_vcc_ptr_eq_pure(*((local.l1->next)), old(_dryad_S6#0, *((local.l1->next))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#0, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node);
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_keys(list2), @_vcc_intset_union(sll_keys(*((list2->next))), @_vcc_intset_singleton(*((list2->key)))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#list2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_list_len_next(list2), unchecked+(sll_list_len_next(*((list2->next))), 1))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#list2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(rsrtl(list2), &&(&&(rsrtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, rsrtl_reach(*((list2->next)))))), >=(*((list2->key)), sll_max_key(*((list2->next))))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(rsrtl_reach(list2), @_vcc_oset_union(rsrtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll(list2), &&(sll(*((list2->next))), unchecked!(@_vcc_oset_in(list2, sll_reach(*((list2->next)))))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_reach(list2), @_vcc_oset_union(sll_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_max_key(list2), @\int_max(*((list2->key)), sll_max_key(*((list2->next)))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_min_key(list2), @\int_min(*((list2->key)), sll_min_key(*((list2->next)))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(srtl(list2), &&(&&(srtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, srtl_reach(*((list2->next)))))), <=(*((list2->key)), sll_min_key(*((list2->next))))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(srtl_reach(list2), @_vcc_oset_union(srtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), &&(==(@_vcc_mutable(@state, local.l2), @_vcc_mutable(@state, *((local.l2->next)))), ==(@writes_check(local.l2), @writes_check(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> $mutable($s, $phys_ptr_cast(local.l2, ^s_node)) == $mutable($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(local.l2, ^s_node)) == $top_writable($s, #wrTime$3^3.3, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node));
                // struct s_node* l24; 
                // l24 := local.l2; 
                SL#l24 := $phys_ptr_cast(local.l2, ^s_node);
                // struct s_node* stmtexpr2#14; 
                // stmtexpr2#14 := l24; 
                stmtexpr2#14 := $phys_ptr_cast(SL#l24, ^s_node);
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_pure(local.l2, *((local.l2->next)))), ==(sll_lseg(local.l2, *((local.l2->next))), &&(sll_lseg(*((local.l2->next)), *((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_lseg_reach(*((local.l2->next)), *((local.l2->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $phys_ptr_cast(local.l2, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(local.l2, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_pure(local.l2, *((local.l2->next)))), ==(sll_lseg_reach(local.l2, *((local.l2->next))), @_vcc_oset_union(sll_lseg_reach(*((local.l2->next)), *((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $phys_ptr_cast(local.l2, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(local.l2, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_pure(local.l2, *((local.l2->next)))), ==(sll_lseg_keys(local.l2, *((local.l2->next))), @_vcc_intset_union(sll_lseg_keys(*((local.l2->next)), *((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $phys_ptr_cast(local.l2, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(local.l2, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_pure(local.l2, *((local.l2->next)))), ==(sll_lseg_len_next(local.l2, *((local.l2->next))), unchecked+(sll_lseg_len_next(*((local.l2->next)), *((local.l2->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $phys_ptr_cast(local.l2, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(local.l2, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_pure(local.l2, *((local.l2->next)))), @_vcc_ptr_neq_pure(*((local.l2->next)), *((local.l2->next)))), ==(sll_lseg_max_key(local.l2, *((local.l2->next))), @\int_max(*((local.l2->key)), sll_lseg_max_key(*((local.l2->next)), *((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $phys_ptr_cast(local.l2, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(local.l2, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_pure(local.l2, *((local.l2->next)))), @_vcc_ptr_neq_pure(*((local.l2->next)), *((local.l2->next)))), ==(sll_lseg_min_key(local.l2, *((local.l2->next))), @\int_min(*((local.l2->key)), sll_lseg_min_key(*((local.l2->next)), *((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $phys_ptr_cast(local.l2, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(local.l2, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_pure(local.l2, *((local.l2->next)))), @_vcc_ptr_neq_pure(*((local.l2->next)), *((local.l2->next)))), ==(srtl_lseg(local.l2, *((local.l2->next))), &&(&&(srtl_lseg(*((local.l2->next)), *((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_lseg_reach(*((local.l2->next)), *((local.l2->next)))))), <=(*((local.l2->key)), sll_lseg_min_key(*((local.l2->next)), *((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $phys_ptr_cast(local.l2, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(local.l2, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_pure(local.l2, *((local.l2->next)))), ==(srtl_lseg_reach(local.l2, *((local.l2->next))), @_vcc_oset_union(srtl_lseg_reach(*((local.l2->next)), *((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $phys_ptr_cast(local.l2, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(local.l2, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assert @reads_check_normal((local.l2->next)); 
                assert $thread_local($s, $phys_ptr_cast(local.l2, ^s_node));
                // local.l2 := *((local.l2->next)); 
                local.l2 := $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node);
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
            }

          anon4:
            // struct s_node* l3; 
            // l3 := l; 
            SL#l3 := $phys_ptr_cast(L#l, ^s_node);
            // struct s_node* stmtexpr0#15; 
            // stmtexpr0#15 := l3; 
            stmtexpr0#15 := $phys_ptr_cast(SL#l3, ^s_node);
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_pure(l, *((l->next)))), ==(sll_lseg(l, *((l->next))), &&(sll_lseg(*((l->next)), *((l->next))), unchecked!(@_vcc_oset_in(l, sll_lseg_reach(*((l->next)), *((l->next)))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $phys_ptr_cast(L#l, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#l, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_pure(l, *((l->next)))), ==(sll_lseg_reach(l, *((l->next))), @_vcc_oset_union(sll_lseg_reach(*((l->next)), *((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $phys_ptr_cast(L#l, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#l, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_pure(l, *((l->next)))), ==(sll_lseg_keys(l, *((l->next))), @_vcc_intset_union(sll_lseg_keys(*((l->next)), *((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $phys_ptr_cast(L#l, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#l, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_pure(l, *((l->next)))), ==(sll_lseg_len_next(l, *((l->next))), unchecked+(sll_lseg_len_next(*((l->next)), *((l->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $phys_ptr_cast(L#l, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#l, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_pure(l, *((l->next)))), @_vcc_ptr_neq_pure(*((l->next)), *((l->next)))), ==(sll_lseg_max_key(l, *((l->next))), @\int_max(*((l->key)), sll_lseg_max_key(*((l->next)), *((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $phys_ptr_cast(L#l, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#l, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_pure(l, *((l->next)))), @_vcc_ptr_neq_pure(*((l->next)), *((l->next)))), ==(sll_lseg_min_key(l, *((l->next))), @\int_min(*((l->key)), sll_lseg_min_key(*((l->next)), *((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $phys_ptr_cast(L#l, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(L#l, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_pure(l, *((l->next)))), @_vcc_ptr_neq_pure(*((l->next)), *((l->next)))), ==(srtl_lseg(l, *((l->next))), &&(&&(srtl_lseg(*((l->next)), *((l->next))), unchecked!(@_vcc_oset_in(l, srtl_lseg_reach(*((l->next)), *((l->next)))))), <=(*((l->key)), sll_lseg_min_key(*((l->next)), *((l->next))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $phys_ptr_cast(L#l, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(L#l, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_pure(l, *((l->next)))), ==(srtl_lseg_reach(l, *((l->next))), @_vcc_oset_union(srtl_lseg_reach(*((l->next)), *((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $phys_ptr_cast(L#l, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(L#l, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assert @reads_check_normal((l->next)); 
            assert $thread_local($s, $phys_ptr_cast(L#l, ^s_node));
            // l := *((l->next)); 
            L#l := $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node);
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg(list, l), &&(sll_lseg(*((list->next)), l), unchecked!(@_vcc_oset_in(list, sll_lseg_reach(*((list->next)), l)))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_reach(list, l), @_vcc_oset_union(sll_lseg_reach(*((list->next)), l), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_keys(list, l), @_vcc_intset_union(sll_lseg_keys(*((list->next)), l), @_vcc_intset_singleton(*((list->key)))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_len_next(list, l), unchecked+(sll_lseg_len_next(*((list->next)), l), 1))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(sll_lseg_max_key(list, l), @\int_max(*((list->key)), sll_lseg_max_key(*((list->next)), l)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(sll_lseg_min_key(list, l), @\int_min(*((list->key)), sll_lseg_min_key(*((list->next)), l)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(srtl_lseg(list, l), &&(&&(srtl_lseg(*((list->next)), l), unchecked!(@_vcc_oset_in(list, srtl_lseg_reach(*((list->next)), l)))), <=(*((list->key)), sll_lseg_min_key(*((list->next)), l))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(srtl_lseg_reach(list, l), @_vcc_oset_union(srtl_lseg_reach(*((list->next)), l), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
            // _math \state _dryad_S6#2; 
            // _dryad_S6#2 := @_vcc_current_state(@state); 
            _dryad_S6#2 := $current_state($s);
            // _math \state stmtexpr1#16; 
            // stmtexpr1#16 := _dryad_S6#2; 
            stmtexpr1#16 := _dryad_S6#2;
            // assert @prim_writes_check((l->next)); 
            assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#l, ^s_node), s_node.next));
            // *(l->next) := (struct s_node*)@null; 
            call $write_int(s_node.next, $phys_ptr_cast(L#l, ^s_node), $ptr_to_int($phys_ptr_cast($null, ^s_node)));
            assume $full_stop_ext(#tok$3^80.3, $s);
            // _math \state _dryad_S7#3; 
            // _dryad_S7#3 := @_vcc_current_state(@state); 
            _dryad_S7#3 := $current_state($s);
            // _math \state stmtexpr2#17; 
            // stmtexpr2#17 := _dryad_S7#3; 
            stmtexpr2#17 := _dryad_S7#3;
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(l3)))), ==(old(_dryad_S6#2, sll_keys(l3)), old(_dryad_S7#3, sll_keys(l3)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node))) ==> F#sll_keys(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node)) == F#sll_keys(_dryad_S7#3, $phys_ptr_cast(SL#l3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(l3)))), ==(old(_dryad_S6#2, sll_list_len_next(l3)), old(_dryad_S7#3, sll_list_len_next(l3)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node)) == F#sll_list_len_next(_dryad_S7#3, $phys_ptr_cast(SL#l3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, rsrtl_reach(l3)))), ==(old(_dryad_S6#2, rsrtl(l3)), old(_dryad_S7#3, rsrtl(l3)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node))) ==> F#rsrtl(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node)) == F#rsrtl(_dryad_S7#3, $phys_ptr_cast(SL#l3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, rsrtl_reach(l3)))), ==(old(_dryad_S6#2, rsrtl_reach(l3)), old(_dryad_S7#3, rsrtl_reach(l3)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node)) == F#rsrtl_reach(_dryad_S7#3, $phys_ptr_cast(SL#l3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(l3)))), ==(old(_dryad_S6#2, sll(l3)), old(_dryad_S7#3, sll(l3)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node))) ==> F#sll(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node)) == F#sll(_dryad_S7#3, $phys_ptr_cast(SL#l3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(l3)))), ==(old(_dryad_S6#2, sll_reach(l3)), old(_dryad_S7#3, sll_reach(l3)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node))) ==> F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node)) == F#sll_reach(_dryad_S7#3, $phys_ptr_cast(SL#l3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(l3)))), ==(old(_dryad_S6#2, sll_max_key(l3)), old(_dryad_S7#3, sll_max_key(l3)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node))) ==> F#sll_max_key(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node)) == F#sll_max_key(_dryad_S7#3, $phys_ptr_cast(SL#l3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(l3)))), ==(old(_dryad_S6#2, sll_min_key(l3)), old(_dryad_S7#3, sll_min_key(l3)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node))) ==> F#sll_min_key(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node)) == F#sll_min_key(_dryad_S7#3, $phys_ptr_cast(SL#l3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_reach(l3)))), ==(old(_dryad_S6#2, srtl(l3)), old(_dryad_S7#3, srtl(l3)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node))) ==> F#srtl(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node)) == F#srtl(_dryad_S7#3, $phys_ptr_cast(SL#l3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_reach(l3)))), ==(old(_dryad_S6#2, srtl_reach(l3)), old(_dryad_S7#3, srtl_reach(l3)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node))) ==> F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node)) == F#srtl_reach(_dryad_S7#3, $phys_ptr_cast(SL#l3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list2)))), ==(old(_dryad_S6#2, sll_keys(list2)), old(_dryad_S7#3, sll_keys(list2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_keys(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_keys(_dryad_S7#3, $phys_ptr_cast(SL#list2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list2)))), ==(old(_dryad_S6#2, sll_list_len_next(list2)), old(_dryad_S7#3, sll_list_len_next(list2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_list_len_next(_dryad_S7#3, $phys_ptr_cast(SL#list2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, rsrtl_reach(list2)))), ==(old(_dryad_S6#2, rsrtl(list2)), old(_dryad_S7#3, rsrtl(list2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#rsrtl(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node)) == F#rsrtl(_dryad_S7#3, $phys_ptr_cast(SL#list2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, rsrtl_reach(list2)))), ==(old(_dryad_S6#2, rsrtl_reach(list2)), old(_dryad_S7#3, rsrtl_reach(list2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node)) == F#rsrtl_reach(_dryad_S7#3, $phys_ptr_cast(SL#list2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list2)))), ==(old(_dryad_S6#2, sll(list2)), old(_dryad_S7#3, sll(list2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll(_dryad_S7#3, $phys_ptr_cast(SL#list2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list2)))), ==(old(_dryad_S6#2, sll_reach(list2)), old(_dryad_S7#3, sll_reach(list2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_reach(_dryad_S7#3, $phys_ptr_cast(SL#list2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list2)))), ==(old(_dryad_S6#2, sll_max_key(list2)), old(_dryad_S7#3, sll_max_key(list2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_max_key(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_max_key(_dryad_S7#3, $phys_ptr_cast(SL#list2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list2)))), ==(old(_dryad_S6#2, sll_min_key(list2)), old(_dryad_S7#3, sll_min_key(list2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_min_key(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_min_key(_dryad_S7#3, $phys_ptr_cast(SL#list2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_reach(list2)))), ==(old(_dryad_S6#2, srtl(list2)), old(_dryad_S7#3, srtl(list2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#srtl(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node)) == F#srtl(_dryad_S7#3, $phys_ptr_cast(SL#list2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_reach(list2)))), ==(old(_dryad_S6#2, srtl_reach(list2)), old(_dryad_S7#3, srtl_reach(list2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node)) == F#srtl_reach(_dryad_S7#3, $phys_ptr_cast(SL#list2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list)))), ==(old(_dryad_S6#2, sll_keys(list)), old(_dryad_S7#3, sll_keys(list)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_keys(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node)) == F#sll_keys(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list)))), ==(old(_dryad_S6#2, sll_list_len_next(list)), old(_dryad_S7#3, sll_list_len_next(list)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node)) == F#sll_list_len_next(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, rsrtl_reach(list)))), ==(old(_dryad_S6#2, rsrtl(list)), old(_dryad_S7#3, rsrtl(list)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node))) ==> F#rsrtl(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node)) == F#rsrtl(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, rsrtl_reach(list)))), ==(old(_dryad_S6#2, rsrtl_reach(list)), old(_dryad_S7#3, rsrtl_reach(list)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node)) == F#rsrtl_reach(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list)))), ==(old(_dryad_S6#2, sll(list)), old(_dryad_S7#3, sll(list)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node)) == F#sll(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list)))), ==(old(_dryad_S6#2, sll_reach(list)), old(_dryad_S7#3, sll_reach(list)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node)) == F#sll_reach(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list)))), ==(old(_dryad_S6#2, sll_max_key(list)), old(_dryad_S7#3, sll_max_key(list)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_max_key(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node)) == F#sll_max_key(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list)))), ==(old(_dryad_S6#2, sll_min_key(list)), old(_dryad_S7#3, sll_min_key(list)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_min_key(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node)) == F#sll_min_key(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_reach(list)))), ==(old(_dryad_S6#2, srtl(list)), old(_dryad_S7#3, srtl(list)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node))) ==> F#srtl(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node)) == F#srtl(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_reach(list)))), ==(old(_dryad_S6#2, srtl_reach(list)), old(_dryad_S7#3, srtl_reach(list)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node))) ==> F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node)) == F#srtl_reach(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list_next)))), ==(old(_dryad_S6#2, sll_keys(list_next)), old(_dryad_S7#3, sll_keys(list_next)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_keys(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_keys(_dryad_S7#3, $phys_ptr_cast(L#list_next, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list_next)))), ==(old(_dryad_S6#2, sll_list_len_next(list_next)), old(_dryad_S7#3, sll_list_len_next(list_next)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_list_len_next(_dryad_S7#3, $phys_ptr_cast(L#list_next, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, rsrtl_reach(list_next)))), ==(old(_dryad_S6#2, rsrtl(list_next)), old(_dryad_S7#3, rsrtl(list_next)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl(_dryad_S7#3, $phys_ptr_cast(L#list_next, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, rsrtl_reach(list_next)))), ==(old(_dryad_S6#2, rsrtl_reach(list_next)), old(_dryad_S7#3, rsrtl_reach(list_next)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl_reach(_dryad_S7#3, $phys_ptr_cast(L#list_next, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list_next)))), ==(old(_dryad_S6#2, sll(list_next)), old(_dryad_S7#3, sll(list_next)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll(_dryad_S7#3, $phys_ptr_cast(L#list_next, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list_next)))), ==(old(_dryad_S6#2, sll_reach(list_next)), old(_dryad_S7#3, sll_reach(list_next)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_reach(_dryad_S7#3, $phys_ptr_cast(L#list_next, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list_next)))), ==(old(_dryad_S6#2, sll_max_key(list_next)), old(_dryad_S7#3, sll_max_key(list_next)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_max_key(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_max_key(_dryad_S7#3, $phys_ptr_cast(L#list_next, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list_next)))), ==(old(_dryad_S6#2, sll_min_key(list_next)), old(_dryad_S7#3, sll_min_key(list_next)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_min_key(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_min_key(_dryad_S7#3, $phys_ptr_cast(L#list_next, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_reach(list_next)))), ==(old(_dryad_S6#2, srtl(list_next)), old(_dryad_S7#3, srtl(list_next)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl(_dryad_S7#3, $phys_ptr_cast(L#list_next, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_reach(list_next)))), ==(old(_dryad_S6#2, srtl_reach(list_next)), old(_dryad_S7#3, srtl_reach(list_next)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl_reach(_dryad_S7#3, $phys_ptr_cast(L#list_next, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(local.l2)))), ==(old(_dryad_S6#2, sll_keys(local.l2)), old(_dryad_S7#3, sll_keys(local.l2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_keys(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_keys(_dryad_S7#3, $phys_ptr_cast(local.l2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(local.l2)))), ==(old(_dryad_S6#2, sll_list_len_next(local.l2)), old(_dryad_S7#3, sll_list_len_next(local.l2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_list_len_next(_dryad_S7#3, $phys_ptr_cast(local.l2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, rsrtl_reach(local.l2)))), ==(old(_dryad_S6#2, rsrtl(local.l2)), old(_dryad_S7#3, rsrtl(local.l2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl(_dryad_S7#3, $phys_ptr_cast(local.l2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, rsrtl_reach(local.l2)))), ==(old(_dryad_S6#2, rsrtl_reach(local.l2)), old(_dryad_S7#3, rsrtl_reach(local.l2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl_reach(_dryad_S7#3, $phys_ptr_cast(local.l2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(local.l2)))), ==(old(_dryad_S6#2, sll(local.l2)), old(_dryad_S7#3, sll(local.l2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll(_dryad_S7#3, $phys_ptr_cast(local.l2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(local.l2)))), ==(old(_dryad_S6#2, sll_reach(local.l2)), old(_dryad_S7#3, sll_reach(local.l2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_reach(_dryad_S7#3, $phys_ptr_cast(local.l2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(local.l2)))), ==(old(_dryad_S6#2, sll_max_key(local.l2)), old(_dryad_S7#3, sll_max_key(local.l2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_max_key(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_max_key(_dryad_S7#3, $phys_ptr_cast(local.l2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(local.l2)))), ==(old(_dryad_S6#2, sll_min_key(local.l2)), old(_dryad_S7#3, sll_min_key(local.l2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_min_key(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_min_key(_dryad_S7#3, $phys_ptr_cast(local.l2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_reach(local.l2)))), ==(old(_dryad_S6#2, srtl(local.l2)), old(_dryad_S7#3, srtl(local.l2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl(_dryad_S7#3, $phys_ptr_cast(local.l2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_reach(local.l2)))), ==(old(_dryad_S6#2, srtl_reach(local.l2)), old(_dryad_S7#3, srtl_reach(local.l2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl_reach(_dryad_S7#3, $phys_ptr_cast(local.l2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(local.l1)))), ==(old(_dryad_S6#2, sll_keys(local.l1)), old(_dryad_S7#3, sll_keys(local.l1)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_keys(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_keys(_dryad_S7#3, $phys_ptr_cast(local.l1, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(local.l1)))), ==(old(_dryad_S6#2, sll_list_len_next(local.l1)), old(_dryad_S7#3, sll_list_len_next(local.l1)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_list_len_next(_dryad_S7#3, $phys_ptr_cast(local.l1, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, rsrtl_reach(local.l1)))), ==(old(_dryad_S6#2, rsrtl(local.l1)), old(_dryad_S7#3, rsrtl(local.l1)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl(_dryad_S7#3, $phys_ptr_cast(local.l1, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, rsrtl_reach(local.l1)))), ==(old(_dryad_S6#2, rsrtl_reach(local.l1)), old(_dryad_S7#3, rsrtl_reach(local.l1)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl_reach(_dryad_S7#3, $phys_ptr_cast(local.l1, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(local.l1)))), ==(old(_dryad_S6#2, sll(local.l1)), old(_dryad_S7#3, sll(local.l1)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll(_dryad_S7#3, $phys_ptr_cast(local.l1, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(local.l1)))), ==(old(_dryad_S6#2, sll_reach(local.l1)), old(_dryad_S7#3, sll_reach(local.l1)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_reach(_dryad_S7#3, $phys_ptr_cast(local.l1, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(local.l1)))), ==(old(_dryad_S6#2, sll_max_key(local.l1)), old(_dryad_S7#3, sll_max_key(local.l1)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_max_key(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_max_key(_dryad_S7#3, $phys_ptr_cast(local.l1, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(local.l1)))), ==(old(_dryad_S6#2, sll_min_key(local.l1)), old(_dryad_S7#3, sll_min_key(local.l1)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_min_key(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_min_key(_dryad_S7#3, $phys_ptr_cast(local.l1, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_reach(local.l1)))), ==(old(_dryad_S6#2, srtl(local.l1)), old(_dryad_S7#3, srtl(local.l1)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl(_dryad_S7#3, $phys_ptr_cast(local.l1, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_reach(local.l1)))), ==(old(_dryad_S6#2, srtl_reach(local.l1)), old(_dryad_S7#3, srtl_reach(local.l1)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl_reach(_dryad_S7#3, $phys_ptr_cast(local.l1, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#2, sll_lseg(list, l)), old(_dryad_S7#3, sll_lseg(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#2, sll_lseg_reach(list, l)), old(_dryad_S7#3, sll_lseg_reach(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_reach(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#2, sll_lseg_keys(list, l)), old(_dryad_S7#3, sll_lseg_keys(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_keys(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_keys(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#2, sll_lseg_len_next(list, l)), old(_dryad_S7#3, sll_lseg_len_next(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_len_next(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#2, sll_lseg_max_key(list, l)), old(_dryad_S7#3, sll_lseg_max_key(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_max_key(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_max_key(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#2, sll_lseg_min_key(list, l)), old(_dryad_S7#3, sll_lseg_min_key(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_min_key(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_min_key(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_lseg_reach(list, l)))), ==(old(_dryad_S6#2, srtl_lseg(list, l)), old(_dryad_S7#3, srtl_lseg(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_lseg(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#srtl_lseg(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_lseg_reach(list, l)))), ==(old(_dryad_S6#2, srtl_lseg_reach(list, l)), old(_dryad_S7#3, srtl_lseg_reach(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#srtl_lseg_reach(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#2, sll_lseg(list, l)), old(_dryad_S7#3, sll_lseg(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#2, sll_lseg_reach(list, l)), old(_dryad_S7#3, sll_lseg_reach(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_reach(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#2, sll_lseg_keys(list, l)), old(_dryad_S7#3, sll_lseg_keys(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_keys(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_keys(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#2, sll_lseg_len_next(list, l)), old(_dryad_S7#3, sll_lseg_len_next(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_len_next(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#2, sll_lseg_max_key(list, l)), old(_dryad_S7#3, sll_lseg_max_key(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_max_key(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_max_key(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#2, sll_lseg_min_key(list, l)), old(_dryad_S7#3, sll_lseg_min_key(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_min_key(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_min_key(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_lseg_reach(list, l)))), ==(old(_dryad_S6#2, srtl_lseg(list, l)), old(_dryad_S7#3, srtl_lseg(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_lseg(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#srtl_lseg(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_lseg_reach(list, l)))), ==(old(_dryad_S6#2, srtl_lseg_reach(list, l)), old(_dryad_S7#3, srtl_lseg_reach(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#srtl_lseg_reach(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(l, l3)), ==(*((l3->key)), old(_dryad_S6#2, *((l3->key))))); 
            assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(SL#l3, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l3, ^s_node)) == $rd_inv(_dryad_S6#2, s_node.key, $phys_ptr_cast(SL#l3, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(l, l3)), @_vcc_ptr_eq_pure(*((l3->next)), old(_dryad_S6#2, *((l3->next))))); 
            assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(SL#l3, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#2, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(l, list2)), ==(*((list2->key)), old(_dryad_S6#2, *((list2->key))))); 
            assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(SL#list2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) == $rd_inv(_dryad_S6#2, s_node.key, $phys_ptr_cast(SL#list2, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(l, list2)), @_vcc_ptr_eq_pure(*((list2->next)), old(_dryad_S6#2, *((list2->next))))); 
            assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(SL#list2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#2, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(l, list)), ==(*((list->key)), old(_dryad_S6#2, *((list->key))))); 
            assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) == $rd_inv(_dryad_S6#2, s_node.key, $phys_ptr_cast(L#list, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(l, list)), @_vcc_ptr_eq_pure(*((list->next)), old(_dryad_S6#2, *((list->next))))); 
            assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(l, list_next)), ==(*((list_next->key)), old(_dryad_S6#2, *((list_next->key))))); 
            assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) == $rd_inv(_dryad_S6#2, s_node.key, $phys_ptr_cast(L#list_next, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(l, list_next)), @_vcc_ptr_eq_pure(*((list_next->next)), old(_dryad_S6#2, *((list_next->next))))); 
            assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#2, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l2)), ==(*((local.l2->key)), old(_dryad_S6#2, *((local.l2->key))))); 
            assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) == $rd_inv(_dryad_S6#2, s_node.key, $phys_ptr_cast(local.l2, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l2)), @_vcc_ptr_eq_pure(*((local.l2->next)), old(_dryad_S6#2, *((local.l2->next))))); 
            assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#2, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l1)), ==(*((local.l1->key)), old(_dryad_S6#2, *((local.l1->key))))); 
            assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) == $rd_inv(_dryad_S6#2, s_node.key, $phys_ptr_cast(local.l1, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l1)), @_vcc_ptr_eq_pure(*((local.l1->next)), old(_dryad_S6#2, *((local.l1->next))))); 
            assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#2, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node);
            // assume ==>(@_vcc_ptr_neq_null(l3), ==(sll_keys(l3), @_vcc_intset_union(sll_keys(*((l3->next))), @_vcc_intset_singleton(*((l3->key)))))); 
            assume $non_null($phys_ptr_cast(SL#l3, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#l3, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l3, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l3), ==(sll_list_len_next(l3), unchecked+(sll_list_len_next(*((l3->next))), 1))); 
            assume $non_null($phys_ptr_cast(SL#l3, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#l3, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(l3), @_vcc_ptr_neq_null(*((l3->next)))), ==(rsrtl(l3), &&(&&(rsrtl(*((l3->next))), unchecked!(@_vcc_oset_in(l3, rsrtl_reach(*((l3->next)))))), >=(*((l3->key)), sll_max_key(*((l3->next))))))); 
            assume $non_null($phys_ptr_cast(SL#l3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#l3, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l3, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l3, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l3), ==(rsrtl_reach(l3), @_vcc_oset_union(rsrtl_reach(*((l3->next))), @_vcc_oset_singleton(l3)))); 
            assume $non_null($phys_ptr_cast(SL#l3, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#l3, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l3, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l3), ==(sll(l3), &&(sll(*((l3->next))), unchecked!(@_vcc_oset_in(l3, sll_reach(*((l3->next)))))))); 
            assume $non_null($phys_ptr_cast(SL#l3, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#l3, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l3, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l3), ==(sll_reach(l3), @_vcc_oset_union(sll_reach(*((l3->next))), @_vcc_oset_singleton(l3)))); 
            assume $non_null($phys_ptr_cast(SL#l3, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#l3, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l3, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l3), @_vcc_ptr_neq_null(*((l3->next)))), ==(sll_max_key(l3), @\int_max(*((l3->key)), sll_max_key(*((l3->next)))))); 
            assume $non_null($phys_ptr_cast(SL#l3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#l3, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l3, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l3), @_vcc_ptr_neq_null(*((l3->next)))), ==(sll_min_key(l3), @\int_min(*((l3->key)), sll_min_key(*((l3->next)))))); 
            assume $non_null($phys_ptr_cast(SL#l3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#l3, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l3, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l3), @_vcc_ptr_neq_null(*((l3->next)))), ==(srtl(l3), &&(&&(srtl(*((l3->next))), unchecked!(@_vcc_oset_in(l3, srtl_reach(*((l3->next)))))), <=(*((l3->key)), sll_min_key(*((l3->next))))))); 
            assume $non_null($phys_ptr_cast(SL#l3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#l3, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l3, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l3, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l3), ==(srtl_reach(l3), @_vcc_oset_union(srtl_reach(*((l3->next))), @_vcc_oset_singleton(l3)))); 
            assume $non_null($phys_ptr_cast(SL#l3, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#l3, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l3, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_keys(list2), @_vcc_intset_union(sll_keys(*((list2->next))), @_vcc_intset_singleton(*((list2->key)))))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#list2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_list_len_next(list2), unchecked+(sll_list_len_next(*((list2->next))), 1))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#list2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(rsrtl(list2), &&(&&(rsrtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, rsrtl_reach(*((list2->next)))))), >=(*((list2->key)), sll_max_key(*((list2->next))))))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list2), ==(rsrtl_reach(list2), @_vcc_oset_union(rsrtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll(list2), &&(sll(*((list2->next))), unchecked!(@_vcc_oset_in(list2, sll_reach(*((list2->next)))))))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_reach(list2), @_vcc_oset_union(sll_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_max_key(list2), @\int_max(*((list2->key)), sll_max_key(*((list2->next)))))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_min_key(list2), @\int_min(*((list2->key)), sll_min_key(*((list2->next)))))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(srtl(list2), &&(&&(srtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, srtl_reach(*((list2->next)))))), <=(*((list2->key)), sll_min_key(*((list2->next))))))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list2), ==(srtl_reach(list2), @_vcc_oset_union(srtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
        }
        else
        {
          anon5:
            // assert @_vcc_possibly_unreachable; 
            assert {:PossiblyUnreachable true} true;
            // goto #break_2; 
            goto #break_2;
        }

      #continue_2:
        assume true;
p0000 := (F#srtl($s,$phys_ptr_cast(P#l1,^s_node)));
p0001 := (F#srtl($s,$phys_ptr_cast(P#l2,^s_node)));
p0002 := (F#srtl($s,$phys_ptr_cast(L#list,^s_node)));
p0003 := (F#srtl($s,$phys_ptr_cast(L#l,^s_node)));
p0004 := (F#srtl($s,$phys_ptr_cast(L#list_next,^s_node)));
p0005 := (F#srtl($s,$phys_ptr_cast(local.l1,^s_node)));
p0006 := (F#srtl($s,$phys_ptr_cast(local.l2,^s_node)));
p0007 := (F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)));
p0008 := (F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)));
p0009 := (F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)));
p0010 := (F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)));
p0011 := (F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)));
p0012 := (F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)));
p0013 := (F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)));
p0014 := (F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)));
p0015 := (F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)));
p0016 := (F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)));
p0017 := (F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)));
p0018 := (F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)));
p0019 := (F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)));
p0020 := (F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)));
p0021 := (F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)));
p0022 := (F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)));
p0023 := (F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)));
p0024 := (F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)));
p0025 := (F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)));
p0026 := (F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)));
p0027 := (F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)));
p0028 := (F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)));
p0029 := (F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)));
p0030 := (F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)));
p0031 := (F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)));
p0032 := (F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)));
p0033 := (F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)));
p0034 := (F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)));
p0035 := (F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)));
p0036 := (F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)));
p0037 := (F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)));
p0038 := (F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)));
p0039 := (F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)));
p0040 := (F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)));
p0041 := (F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)));
p0042 := (F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)));
p0043 := (F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)));
p0044 := (F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)));
p0045 := (F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)));
p0046 := (F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)));
p0047 := (F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)));
p0048 := (F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)));
p0049 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0050 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0051 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0052 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0053 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0054 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0055 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0056 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0057 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0058 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0059 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0060 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0061 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0062 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0063 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0064 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0065 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0066 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0067 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0068 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0069 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0070 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0071 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0072 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0073 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0074 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0075 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0076 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0077 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0078 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0079 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0080 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0081 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0082 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0083 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0084 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0085 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0086 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0087 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0088 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0089 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0090 := ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0091 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0092 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0093 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0094 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0095 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0096 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0097 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0098 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0099 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0100 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0101 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0102 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0103 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0104 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0105 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0106 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0107 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0108 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0109 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0110 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0111 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0112 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0113 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0114 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0115 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0116 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0117 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0118 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0119 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0120 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0121 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0122 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0123 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0124 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0125 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0126 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0127 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0128 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0129 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0130 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0131 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0132 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0133 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0134 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0135 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0136 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0137 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0138 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0139 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0140 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0141 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0142 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0143 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0144 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0145 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0146 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0147 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0148 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0149 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0150 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0151 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0152 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0153 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0154 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0155 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0156 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0157 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0158 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0159 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0160 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0161 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0162 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0163 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0164 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0165 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0166 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0167 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0168 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0169 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0170 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0171 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0172 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0173 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0174 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0175 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0176 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0177 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0178 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0179 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0180 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0181 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0182 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0183 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0184 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0185 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0186 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0187 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0188 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0189 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0190 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0191 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0192 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0193 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0194 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0195 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0196 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0197 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0198 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0199 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0200 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0201 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0202 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0203 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0204 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0205 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0206 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0207 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0208 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0209 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0210 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0211 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0212 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0213 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0214 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0215 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0216 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0217 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0218 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0219 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0220 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0221 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0222 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0223 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0224 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0225 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0226 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0227 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0228 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0229 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0230 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0231 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0232 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0233 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0234 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0235 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0236 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0237 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0238 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0239 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0240 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0241 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0242 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0243 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0244 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0245 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0246 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0247 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0248 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0249 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0250 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0251 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0252 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0253 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0254 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0255 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0256 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0257 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0258 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0259 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0260 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0261 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0262 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0263 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0264 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0265 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0266 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0267 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0268 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0269 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0270 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0271 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0272 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0273 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0274 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0275 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0276 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0277 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0278 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0279 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0280 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0281 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0282 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0283 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0284 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0285 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0286 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0287 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0288 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0289 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0290 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0291 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0292 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0293 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0294 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0295 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0296 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0297 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0298 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0299 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0300 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0301 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0302 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0303 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0304 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0305 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0306 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0307 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0308 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0309 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0310 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0311 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0312 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0313 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0314 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0315 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0316 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0317 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0318 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0319 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0320 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0321 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0322 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0323 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0324 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0325 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0326 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0327 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0328 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0329 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0330 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0331 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0332 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0333 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0334 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0335 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0336 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0337 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0338 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0339 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0340 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0341 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0342 := ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0343 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0344 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0345 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0346 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0347 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0348 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0349 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0350 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0351 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0352 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0353 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0354 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0355 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0356 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0357 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0358 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0359 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0360 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0361 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0362 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0363 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0364 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0365 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0366 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0367 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0368 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0369 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0370 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0371 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0372 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0373 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0374 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0375 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0376 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0377 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0378 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
p0379 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
p0380 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
p0381 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
p0382 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
p0383 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
p0384 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
p0385 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0386 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0387 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0388 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0389 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0390 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0391 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0392 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0393 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0394 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0395 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0396 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0397 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0398 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0399 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0400 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0401 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0402 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0403 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0404 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0405 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0406 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0407 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0408 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0409 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0410 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0411 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0412 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0413 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0414 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0415 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0416 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0417 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0418 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0419 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0420 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0421 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0422 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0423 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0424 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0425 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0426 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0427 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0428 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0429 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0430 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0431 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0432 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0433 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0434 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0435 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0436 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0437 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0438 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0439 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0440 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0441 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0442 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0443 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0444 := ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0445 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0446 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0447 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0448 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0449 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0450 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0451 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0452 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0453 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0454 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0455 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0456 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0457 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0458 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0459 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0460 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0461 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0462 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0463 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0464 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0465 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0466 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0467 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0468 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0469 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0470 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0471 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0472 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0473 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0474 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0475 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0476 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0477 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0478 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0479 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0480 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0481 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0482 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0483 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0484 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0485 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0486 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0487 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0488 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0489 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0490 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0491 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0492 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0493 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0494 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0495 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0496 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0497 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0498 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0499 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0500 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0501 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0502 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0503 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0504 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0505 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0506 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0507 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0508 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0509 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0510 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0511 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0512 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0513 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0514 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0515 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0516 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0517 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0518 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0519 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0520 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0521 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0522 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0523 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0524 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0525 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0526 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0527 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0528 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0529 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0530 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0531 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0532 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0533 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0534 := ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0535 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0536 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0537 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0538 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0539 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0540 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0541 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0542 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0543 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0544 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0545 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0546 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0547 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0548 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0549 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0550 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0551 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0552 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0553 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0554 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0555 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0556 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0557 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0558 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0559 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))));
p0560 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0561 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0562 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0563 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0564 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0565 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0566 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0567 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0568 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0569 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0570 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0571 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0572 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0573 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0574 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0575 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0576 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0577 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0578 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0579 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0580 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0581 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0582 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0583 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0584 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0585 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0586 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0587 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0588 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0589 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))));
p0590 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))));
p0591 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
p0592 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
p0593 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
p0594 := ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
p0595 := ($non_null($phys_ptr_cast(P#l1,^s_node)));
p0596 := ($non_null($phys_ptr_cast(P#l2,^s_node)));
p0597 := ($non_null($phys_ptr_cast(L#list,^s_node)));
p0598 := ($non_null($phys_ptr_cast(L#l,^s_node)));
p0599 := ($non_null($phys_ptr_cast(L#list_next,^s_node)));
p0600 := ($non_null($phys_ptr_cast(local.l1,^s_node)));
p0601 := ($non_null($phys_ptr_cast(local.l2,^s_node)));
p0602 := ($is_null($phys_ptr_cast(P#l1,^s_node)));
p0603 := ($is_null($phys_ptr_cast(P#l2,^s_node)));
p0604 := ($is_null($phys_ptr_cast(L#list,^s_node)));
p0605 := ($is_null($phys_ptr_cast(L#l,^s_node)));
p0606 := ($is_null($phys_ptr_cast(L#list_next,^s_node)));
p0607 := ($is_null($phys_ptr_cast(local.l1,^s_node)));
p0608 := ($is_null($phys_ptr_cast(local.l2,^s_node)));
p0609 := (($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(P#l2,^s_node)));
p0610 := (($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list,^s_node)));
p0611 := (($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#l,^s_node)));
p0612 := (($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node)));
p0613 := (($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l1,^s_node)));
p0614 := (($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l2,^s_node)));
p0615 := (($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(P#l1,^s_node)));
p0616 := (($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list,^s_node)));
p0617 := (($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#l,^s_node)));
p0618 := (($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node)));
p0619 := (($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l1,^s_node)));
p0620 := (($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l2,^s_node)));
p0621 := (($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l1,^s_node)));
p0622 := (($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l2,^s_node)));
p0623 := (($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#l,^s_node)));
p0624 := (($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#list_next,^s_node)));
p0625 := (($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l1,^s_node)));
p0626 := (($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l2,^s_node)));
p0627 := (($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l1,^s_node)));
p0628 := (($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l2,^s_node)));
p0629 := (($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list,^s_node)));
p0630 := (($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list_next,^s_node)));
p0631 := (($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l1,^s_node)));
p0632 := (($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l2,^s_node)));
p0633 := (($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l1,^s_node)));
p0634 := (($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l2,^s_node)));
p0635 := (($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#list,^s_node)));
p0636 := (($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#l,^s_node)));
p0637 := (($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l1,^s_node)));
p0638 := (($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l2,^s_node)));
p0639 := (($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l1,^s_node)));
p0640 := (($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l2,^s_node)));
p0641 := (($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list,^s_node)));
p0642 := (($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#l,^s_node)));
p0643 := (($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node)));
p0644 := (($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(local.l2,^s_node)));
p0645 := (($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l1,^s_node)));
p0646 := (($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l2,^s_node)));
p0647 := (($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list,^s_node)));
p0648 := (($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#l,^s_node)));
p0649 := (($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node)));
p0650 := (($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(local.l1,^s_node)));
p0651 := (($non_null($phys_ptr_cast(P#l1,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l1,^s_node),^s_node))));
p0652 := (($non_null($phys_ptr_cast(P#l2,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l2,^s_node),^s_node))));
p0653 := (($non_null($phys_ptr_cast(L#list,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list,^s_node),^s_node))));
p0654 := (($non_null($phys_ptr_cast(L#l,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#l,^s_node),^s_node))));
p0655 := (($non_null($phys_ptr_cast(L#list_next,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list_next,^s_node),^s_node))));
p0656 := (($non_null($phys_ptr_cast(local.l1,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l1,^s_node),^s_node))));
p0657 := (($non_null($phys_ptr_cast(local.l2,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l2,^s_node),^s_node))));
p0658 := (($non_null($phys_ptr_cast(P#l1,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l1,^s_node),^s_node))));
p0659 := (($non_null($phys_ptr_cast(P#l2,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l2,^s_node),^s_node))));
p0660 := (($non_null($phys_ptr_cast(L#list,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list,^s_node),^s_node))));
p0661 := (($non_null($phys_ptr_cast(L#l,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#l,^s_node),^s_node))));
p0662 := (($non_null($phys_ptr_cast(L#list_next,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list_next,^s_node),^s_node))));
p0663 := (($non_null($phys_ptr_cast(local.l1,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l1,^s_node),^s_node))));
p0664 := (($non_null($phys_ptr_cast(local.l2,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l2,^s_node),^s_node))));
p0665 := (($non_null($phys_ptr_cast(P#l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l1,^s_node),^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p0666 := (($non_null($phys_ptr_cast(P#l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l1,^s_node),^s_node) == $phys_ptr_cast(L#list,^s_node))));
p0667 := (($non_null($phys_ptr_cast(P#l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l1,^s_node),^s_node) == $phys_ptr_cast(L#l,^s_node))));
p0668 := (($non_null($phys_ptr_cast(P#l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l1,^s_node),^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p0669 := (($non_null($phys_ptr_cast(P#l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l1,^s_node),^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p0670 := (($non_null($phys_ptr_cast(P#l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l1,^s_node),^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p0671 := (($non_null($phys_ptr_cast(P#l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l2,^s_node),^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p0672 := (($non_null($phys_ptr_cast(P#l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l2,^s_node),^s_node) == $phys_ptr_cast(L#list,^s_node))));
p0673 := (($non_null($phys_ptr_cast(P#l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l2,^s_node),^s_node) == $phys_ptr_cast(L#l,^s_node))));
p0674 := (($non_null($phys_ptr_cast(P#l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l2,^s_node),^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p0675 := (($non_null($phys_ptr_cast(P#l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l2,^s_node),^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p0676 := (($non_null($phys_ptr_cast(P#l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l2,^s_node),^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p0677 := (($non_null($phys_ptr_cast(L#list,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list,^s_node),^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p0678 := (($non_null($phys_ptr_cast(L#list,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list,^s_node),^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p0679 := (($non_null($phys_ptr_cast(L#list,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list,^s_node),^s_node) == $phys_ptr_cast(L#l,^s_node))));
p0680 := (($non_null($phys_ptr_cast(L#list,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list,^s_node),^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p0681 := (($non_null($phys_ptr_cast(L#list,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list,^s_node),^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p0682 := (($non_null($phys_ptr_cast(L#list,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list,^s_node),^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p0683 := (($non_null($phys_ptr_cast(L#l,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#l,^s_node),^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p0684 := (($non_null($phys_ptr_cast(L#l,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#l,^s_node),^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p0685 := (($non_null($phys_ptr_cast(L#l,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#l,^s_node),^s_node) == $phys_ptr_cast(L#list,^s_node))));
p0686 := (($non_null($phys_ptr_cast(L#l,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#l,^s_node),^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p0687 := (($non_null($phys_ptr_cast(L#l,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#l,^s_node),^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p0688 := (($non_null($phys_ptr_cast(L#l,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#l,^s_node),^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p0689 := (($non_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list_next,^s_node),^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p0690 := (($non_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list_next,^s_node),^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p0691 := (($non_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list_next,^s_node),^s_node) == $phys_ptr_cast(L#list,^s_node))));
p0692 := (($non_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list_next,^s_node),^s_node) == $phys_ptr_cast(L#l,^s_node))));
p0693 := (($non_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list_next,^s_node),^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p0694 := (($non_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list_next,^s_node),^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p0695 := (($non_null($phys_ptr_cast(local.l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l1,^s_node),^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p0696 := (($non_null($phys_ptr_cast(local.l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l1,^s_node),^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p0697 := (($non_null($phys_ptr_cast(local.l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l1,^s_node),^s_node) == $phys_ptr_cast(L#list,^s_node))));
p0698 := (($non_null($phys_ptr_cast(local.l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l1,^s_node),^s_node) == $phys_ptr_cast(L#l,^s_node))));
p0699 := (($non_null($phys_ptr_cast(local.l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l1,^s_node),^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p0700 := (($non_null($phys_ptr_cast(local.l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l1,^s_node),^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p0701 := (($non_null($phys_ptr_cast(local.l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l2,^s_node),^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p0702 := (($non_null($phys_ptr_cast(local.l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l2,^s_node),^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p0703 := (($non_null($phys_ptr_cast(local.l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l2,^s_node),^s_node) == $phys_ptr_cast(L#list,^s_node))));
p0704 := (($non_null($phys_ptr_cast(local.l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l2,^s_node),^s_node) == $phys_ptr_cast(L#l,^s_node))));
p0705 := (($non_null($phys_ptr_cast(local.l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l2,^s_node),^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p0706 := (($non_null($phys_ptr_cast(local.l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l2,^s_node),^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p0707 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0708 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0709 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0710 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0711 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0712 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0713 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0714 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0715 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0716 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0717 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0718 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0719 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0720 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0721 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0722 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0723 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0724 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0725 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0726 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0727 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0728 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0729 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0730 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0731 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0732 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0733 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0734 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0735 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0736 := ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0737 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0738 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0739 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0740 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0741 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0742 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0743 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0744 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0745 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0746 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0747 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0748 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0749 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0750 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0751 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0752 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0753 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0754 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0755 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0756 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0757 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0758 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0759 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0760 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0761 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0762 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0763 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0764 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0765 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0766 := ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0767 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0768 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0769 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0770 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0771 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0772 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0773 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0774 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0775 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0776 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0777 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0778 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0779 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0780 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0781 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0782 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0783 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0784 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0785 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0786 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0787 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0788 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0789 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0790 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0791 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0792 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0793 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0794 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0795 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0796 := ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0797 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0798 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0799 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0800 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0801 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0802 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0803 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0804 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0805 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0806 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0807 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0808 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0809 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0810 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0811 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0812 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0813 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0814 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0815 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0816 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0817 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0818 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0819 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0820 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0821 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0822 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0823 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0824 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0825 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0826 := ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0827 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0828 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0829 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0830 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0831 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0832 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0833 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0834 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0835 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0836 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0837 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0838 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0839 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0840 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0841 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0842 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0843 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0844 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0845 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0846 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0847 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0848 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0849 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0850 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0851 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0852 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0853 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0854 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0855 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0856 := ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0857 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0858 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0859 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0860 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0861 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0862 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0863 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0864 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0865 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0866 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0867 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0868 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0869 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0870 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0871 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0872 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0873 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0874 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0875 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0876 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0877 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0878 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0879 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0880 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0881 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
p0882 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0883 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0884 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0885 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0886 := ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0887 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0888 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0889 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0890 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0891 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0892 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0893 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0894 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0895 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0896 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0897 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0898 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0899 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0900 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0901 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0902 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0903 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0904 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0905 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0906 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0907 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0908 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0909 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0910 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0911 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
p0912 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
p0913 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
p0914 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))))));
p0915 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))))));
p0916 := ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
p0917 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p0918 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p0919 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p0920 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p0921 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p0922 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p0923 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p0924 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p0925 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p0926 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p0927 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p0928 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p0929 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p0930 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p0931 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p0932 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p0933 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p0934 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p0935 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p0936 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p0937 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p0938 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p0939 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p0940 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p0941 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p0942 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p0943 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p0944 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p0945 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p0946 := (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p0947 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p0948 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p0949 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p0950 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p0951 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p0952 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p0953 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p0954 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p0955 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p0956 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p0957 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p0958 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p0959 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p0960 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p0961 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p0962 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p0963 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p0964 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p0965 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p0966 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p0967 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p0968 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p0969 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p0970 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p0971 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p0972 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p0973 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p0974 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p0975 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p0976 := (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p0977 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p0978 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p0979 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p0980 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p0981 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p0982 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p0983 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p0984 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p0985 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p0986 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p0987 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p0988 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p0989 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p0990 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p0991 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p0992 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p0993 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p0994 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p0995 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p0996 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p0997 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p0998 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p0999 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p1000 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p1001 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p1002 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p1003 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p1004 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p1005 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p1006 := (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p1007 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p1008 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p1009 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p1010 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p1011 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p1012 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p1013 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p1014 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p1015 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p1016 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p1017 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p1018 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p1019 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p1020 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p1021 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p1022 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p1023 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p1024 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p1025 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p1026 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p1027 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p1028 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p1029 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p1030 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p1031 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p1032 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p1033 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p1034 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p1035 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p1036 := (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p1037 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p1038 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p1039 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p1040 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p1041 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p1042 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p1043 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p1044 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p1045 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p1046 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p1047 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p1048 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p1049 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p1050 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p1051 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p1052 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p1053 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p1054 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p1055 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p1056 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p1057 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p1058 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p1059 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p1060 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p1061 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p1062 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p1063 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p1064 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p1065 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p1066 := (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p1067 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p1068 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p1069 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p1070 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p1071 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p1072 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p1073 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p1074 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p1075 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p1076 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p1077 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p1078 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p1079 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p1080 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p1081 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p1082 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p1083 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p1084 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p1085 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p1086 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p1087 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p1088 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p1089 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p1090 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p1091 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
p1092 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p1093 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p1094 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p1095 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p1096 := (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p1097 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p1098 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p1099 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p1100 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p1101 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p1102 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p1103 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p1104 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p1105 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p1106 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p1107 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p1108 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p1109 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p1110 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p1111 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p1112 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p1113 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p1114 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p1115 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
p1116 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p1117 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p1118 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p1119 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p1120 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p1121 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
p1122 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
p1123 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
p1124 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list,^s_node))));
p1125 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#l,^s_node))));
p1126 := (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));

    }

  anon10:
    assume $full_stop_ext(#tok$3^33.2, $s);

  #break_2:
    // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_keys(list2), @_vcc_intset_union(sll_keys(*((list2->next))), @_vcc_intset_singleton(*((list2->key)))))); 
    assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#list2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_list_len_next(list2), unchecked+(sll_list_len_next(*((list2->next))), 1))); 
    assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#list2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(rsrtl(list2), &&(&&(rsrtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, rsrtl_reach(*((list2->next)))))), >=(*((list2->key)), sll_max_key(*((list2->next))))))); 
    assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list2), ==(rsrtl_reach(list2), @_vcc_oset_union(rsrtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
    assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll(list2), &&(sll(*((list2->next))), unchecked!(@_vcc_oset_in(list2, sll_reach(*((list2->next)))))))); 
    assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_reach(list2), @_vcc_oset_union(sll_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
    assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_max_key(list2), @\int_max(*((list2->key)), sll_max_key(*((list2->next)))))); 
    assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_min_key(list2), @\int_min(*((list2->key)), sll_min_key(*((list2->next)))))); 
    assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(srtl(list2), &&(&&(srtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, srtl_reach(*((list2->next)))))), <=(*((list2->key)), sll_min_key(*((list2->next))))))); 
    assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list2), ==(srtl_reach(list2), @_vcc_oset_union(srtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
    assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    assume true;
    // if (@_vcc_ptr_neq_null(local.l1)) ...
    if ($non_null($phys_ptr_cast(local.l1, ^s_node)))
    {
      anon7:
        // _math \state _dryad_S6#4; 
        // _dryad_S6#4 := @_vcc_current_state(@state); 
        _dryad_S6#4 := $current_state($s);
        // _math \state stmtexpr0#18; 
        // stmtexpr0#18 := _dryad_S6#4; 
        stmtexpr0#18 := _dryad_S6#4;
        // assert @prim_writes_check((l->next)); 
        assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#l, ^s_node), s_node.next));
        // *(l->next) := local.l1; 
        call $write_int(s_node.next, $phys_ptr_cast(L#l, ^s_node), $ptr_to_int($phys_ptr_cast(local.l1, ^s_node)));
        assume $full_stop_ext(#tok$3^83.3, $s);
        // _math \state _dryad_S7#5; 
        // _dryad_S7#5 := @_vcc_current_state(@state); 
        _dryad_S7#5 := $current_state($s);
        // _math \state stmtexpr1#19; 
        // stmtexpr1#19 := _dryad_S7#5; 
        stmtexpr1#19 := _dryad_S7#5;
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list2)))), ==(old(_dryad_S6#4, sll_keys(list2)), old(_dryad_S7#5, sll_keys(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_keys(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_keys(_dryad_S7#5, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list2)))), ==(old(_dryad_S6#4, sll_list_len_next(list2)), old(_dryad_S7#5, sll_list_len_next(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_list_len_next(_dryad_S7#5, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, rsrtl_reach(list2)))), ==(old(_dryad_S6#4, rsrtl(list2)), old(_dryad_S7#5, rsrtl(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#rsrtl(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node)) == F#rsrtl(_dryad_S7#5, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, rsrtl_reach(list2)))), ==(old(_dryad_S6#4, rsrtl_reach(list2)), old(_dryad_S7#5, rsrtl_reach(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node)) == F#rsrtl_reach(_dryad_S7#5, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list2)))), ==(old(_dryad_S6#4, sll(list2)), old(_dryad_S7#5, sll(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll(_dryad_S7#5, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list2)))), ==(old(_dryad_S6#4, sll_reach(list2)), old(_dryad_S7#5, sll_reach(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_reach(_dryad_S7#5, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list2)))), ==(old(_dryad_S6#4, sll_max_key(list2)), old(_dryad_S7#5, sll_max_key(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_max_key(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_max_key(_dryad_S7#5, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list2)))), ==(old(_dryad_S6#4, sll_min_key(list2)), old(_dryad_S7#5, sll_min_key(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_min_key(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_min_key(_dryad_S7#5, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, srtl_reach(list2)))), ==(old(_dryad_S6#4, srtl(list2)), old(_dryad_S7#5, srtl(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#srtl(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node)) == F#srtl(_dryad_S7#5, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, srtl_reach(list2)))), ==(old(_dryad_S6#4, srtl_reach(list2)), old(_dryad_S7#5, srtl_reach(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node)) == F#srtl_reach(_dryad_S7#5, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list)))), ==(old(_dryad_S6#4, sll_keys(list)), old(_dryad_S7#5, sll_keys(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_keys(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node)) == F#sll_keys(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list)))), ==(old(_dryad_S6#4, sll_list_len_next(list)), old(_dryad_S7#5, sll_list_len_next(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node)) == F#sll_list_len_next(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, rsrtl_reach(list)))), ==(old(_dryad_S6#4, rsrtl(list)), old(_dryad_S7#5, rsrtl(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node))) ==> F#rsrtl(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node)) == F#rsrtl(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, rsrtl_reach(list)))), ==(old(_dryad_S6#4, rsrtl_reach(list)), old(_dryad_S7#5, rsrtl_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node)) == F#rsrtl_reach(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list)))), ==(old(_dryad_S6#4, sll(list)), old(_dryad_S7#5, sll(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node)) == F#sll(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list)))), ==(old(_dryad_S6#4, sll_reach(list)), old(_dryad_S7#5, sll_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node)) == F#sll_reach(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list)))), ==(old(_dryad_S6#4, sll_max_key(list)), old(_dryad_S7#5, sll_max_key(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_max_key(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node)) == F#sll_max_key(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list)))), ==(old(_dryad_S6#4, sll_min_key(list)), old(_dryad_S7#5, sll_min_key(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_min_key(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node)) == F#sll_min_key(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, srtl_reach(list)))), ==(old(_dryad_S6#4, srtl(list)), old(_dryad_S7#5, srtl(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node))) ==> F#srtl(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node)) == F#srtl(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, srtl_reach(list)))), ==(old(_dryad_S6#4, srtl_reach(list)), old(_dryad_S7#5, srtl_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node))) ==> F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node)) == F#srtl_reach(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list_next)))), ==(old(_dryad_S6#4, sll_keys(list_next)), old(_dryad_S7#5, sll_keys(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_keys(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_keys(_dryad_S7#5, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list_next)))), ==(old(_dryad_S6#4, sll_list_len_next(list_next)), old(_dryad_S7#5, sll_list_len_next(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_list_len_next(_dryad_S7#5, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, rsrtl_reach(list_next)))), ==(old(_dryad_S6#4, rsrtl(list_next)), old(_dryad_S7#5, rsrtl(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl(_dryad_S7#5, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, rsrtl_reach(list_next)))), ==(old(_dryad_S6#4, rsrtl_reach(list_next)), old(_dryad_S7#5, rsrtl_reach(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl_reach(_dryad_S7#5, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list_next)))), ==(old(_dryad_S6#4, sll(list_next)), old(_dryad_S7#5, sll(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll(_dryad_S7#5, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list_next)))), ==(old(_dryad_S6#4, sll_reach(list_next)), old(_dryad_S7#5, sll_reach(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_reach(_dryad_S7#5, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list_next)))), ==(old(_dryad_S6#4, sll_max_key(list_next)), old(_dryad_S7#5, sll_max_key(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_max_key(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_max_key(_dryad_S7#5, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list_next)))), ==(old(_dryad_S6#4, sll_min_key(list_next)), old(_dryad_S7#5, sll_min_key(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_min_key(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_min_key(_dryad_S7#5, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, srtl_reach(list_next)))), ==(old(_dryad_S6#4, srtl(list_next)), old(_dryad_S7#5, srtl(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl(_dryad_S7#5, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, srtl_reach(list_next)))), ==(old(_dryad_S6#4, srtl_reach(list_next)), old(_dryad_S7#5, srtl_reach(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl_reach(_dryad_S7#5, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(local.l2)))), ==(old(_dryad_S6#4, sll_keys(local.l2)), old(_dryad_S7#5, sll_keys(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_keys(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_keys(_dryad_S7#5, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(local.l2)))), ==(old(_dryad_S6#4, sll_list_len_next(local.l2)), old(_dryad_S7#5, sll_list_len_next(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_list_len_next(_dryad_S7#5, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, rsrtl_reach(local.l2)))), ==(old(_dryad_S6#4, rsrtl(local.l2)), old(_dryad_S7#5, rsrtl(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl(_dryad_S7#5, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, rsrtl_reach(local.l2)))), ==(old(_dryad_S6#4, rsrtl_reach(local.l2)), old(_dryad_S7#5, rsrtl_reach(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl_reach(_dryad_S7#5, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(local.l2)))), ==(old(_dryad_S6#4, sll(local.l2)), old(_dryad_S7#5, sll(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node)) == F#sll(_dryad_S7#5, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(local.l2)))), ==(old(_dryad_S6#4, sll_reach(local.l2)), old(_dryad_S7#5, sll_reach(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_reach(_dryad_S7#5, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(local.l2)))), ==(old(_dryad_S6#4, sll_max_key(local.l2)), old(_dryad_S7#5, sll_max_key(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_max_key(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_max_key(_dryad_S7#5, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(local.l2)))), ==(old(_dryad_S6#4, sll_min_key(local.l2)), old(_dryad_S7#5, sll_min_key(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_min_key(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_min_key(_dryad_S7#5, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, srtl_reach(local.l2)))), ==(old(_dryad_S6#4, srtl(local.l2)), old(_dryad_S7#5, srtl(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl(_dryad_S7#5, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, srtl_reach(local.l2)))), ==(old(_dryad_S6#4, srtl_reach(local.l2)), old(_dryad_S7#5, srtl_reach(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl_reach(_dryad_S7#5, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(local.l1)))), ==(old(_dryad_S6#4, sll_keys(local.l1)), old(_dryad_S7#5, sll_keys(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_keys(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_keys(_dryad_S7#5, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(local.l1)))), ==(old(_dryad_S6#4, sll_list_len_next(local.l1)), old(_dryad_S7#5, sll_list_len_next(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_list_len_next(_dryad_S7#5, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, rsrtl_reach(local.l1)))), ==(old(_dryad_S6#4, rsrtl(local.l1)), old(_dryad_S7#5, rsrtl(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl(_dryad_S7#5, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, rsrtl_reach(local.l1)))), ==(old(_dryad_S6#4, rsrtl_reach(local.l1)), old(_dryad_S7#5, rsrtl_reach(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl_reach(_dryad_S7#5, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(local.l1)))), ==(old(_dryad_S6#4, sll(local.l1)), old(_dryad_S7#5, sll(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node)) == F#sll(_dryad_S7#5, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(local.l1)))), ==(old(_dryad_S6#4, sll_reach(local.l1)), old(_dryad_S7#5, sll_reach(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_reach(_dryad_S7#5, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(local.l1)))), ==(old(_dryad_S6#4, sll_max_key(local.l1)), old(_dryad_S7#5, sll_max_key(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_max_key(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_max_key(_dryad_S7#5, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(local.l1)))), ==(old(_dryad_S6#4, sll_min_key(local.l1)), old(_dryad_S7#5, sll_min_key(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_min_key(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_min_key(_dryad_S7#5, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, srtl_reach(local.l1)))), ==(old(_dryad_S6#4, srtl(local.l1)), old(_dryad_S7#5, srtl(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl(_dryad_S7#5, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, srtl_reach(local.l1)))), ==(old(_dryad_S6#4, srtl_reach(local.l1)), old(_dryad_S7#5, srtl_reach(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl_reach(_dryad_S7#5, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#4, sll_lseg(list, l)), old(_dryad_S7#5, sll_lseg(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#4, sll_lseg_reach(list, l)), old(_dryad_S7#5, sll_lseg_reach(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_reach(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#4, sll_lseg_keys(list, l)), old(_dryad_S7#5, sll_lseg_keys(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_keys(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_keys(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#4, sll_lseg_len_next(list, l)), old(_dryad_S7#5, sll_lseg_len_next(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_len_next(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#4, sll_lseg_max_key(list, l)), old(_dryad_S7#5, sll_lseg_max_key(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_max_key(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_max_key(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#4, sll_lseg_min_key(list, l)), old(_dryad_S7#5, sll_lseg_min_key(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_min_key(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_min_key(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, srtl_lseg_reach(list, l)))), ==(old(_dryad_S6#4, srtl_lseg(list, l)), old(_dryad_S7#5, srtl_lseg(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_lseg(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#srtl_lseg(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, srtl_lseg_reach(list, l)))), ==(old(_dryad_S6#4, srtl_lseg_reach(list, l)), old(_dryad_S7#5, srtl_lseg_reach(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_lseg_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#srtl_lseg_reach(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(l, list2)), ==(*((list2->key)), old(_dryad_S6#4, *((list2->key))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(SL#list2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) == $rd_inv(_dryad_S6#4, s_node.key, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(l, list2)), @_vcc_ptr_eq_pure(*((list2->next)), old(_dryad_S6#4, *((list2->next))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(SL#list2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#4, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(l, list)), ==(*((list->key)), old(_dryad_S6#4, *((list->key))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) == $rd_inv(_dryad_S6#4, s_node.key, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(l, list)), @_vcc_ptr_eq_pure(*((list->next)), old(_dryad_S6#4, *((list->next))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#4, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(l, list_next)), ==(*((list_next->key)), old(_dryad_S6#4, *((list_next->key))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) == $rd_inv(_dryad_S6#4, s_node.key, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(l, list_next)), @_vcc_ptr_eq_pure(*((list_next->next)), old(_dryad_S6#4, *((list_next->next))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#4, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l2)), ==(*((local.l2->key)), old(_dryad_S6#4, *((local.l2->key))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) == $rd_inv(_dryad_S6#4, s_node.key, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l2)), @_vcc_ptr_eq_pure(*((local.l2->next)), old(_dryad_S6#4, *((local.l2->next))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#4, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l1)), ==(*((local.l1->key)), old(_dryad_S6#4, *((local.l1->key))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) == $rd_inv(_dryad_S6#4, s_node.key, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l1)), @_vcc_ptr_eq_pure(*((local.l1->next)), old(_dryad_S6#4, *((local.l1->next))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#4, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node);
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_keys(list2), @_vcc_intset_union(sll_keys(*((list2->next))), @_vcc_intset_singleton(*((list2->key)))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#list2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_list_len_next(list2), unchecked+(sll_list_len_next(*((list2->next))), 1))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#list2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(rsrtl(list2), &&(&&(rsrtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, rsrtl_reach(*((list2->next)))))), >=(*((list2->key)), sll_max_key(*((list2->next))))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(rsrtl_reach(list2), @_vcc_oset_union(rsrtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll(list2), &&(sll(*((list2->next))), unchecked!(@_vcc_oset_in(list2, sll_reach(*((list2->next)))))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_reach(list2), @_vcc_oset_union(sll_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_max_key(list2), @\int_max(*((list2->key)), sll_max_key(*((list2->next)))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_min_key(list2), @\int_min(*((list2->key)), sll_min_key(*((list2->next)))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(srtl(list2), &&(&&(srtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, srtl_reach(*((list2->next)))))), <=(*((list2->key)), sll_min_key(*((list2->next))))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(srtl_reach(list2), @_vcc_oset_union(srtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    }
    else
    {
      anon8:
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_keys(list2), @_vcc_intset_union(sll_keys(*((list2->next))), @_vcc_intset_singleton(*((list2->key)))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#list2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_list_len_next(list2), unchecked+(sll_list_len_next(*((list2->next))), 1))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#list2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(rsrtl(list2), &&(&&(rsrtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, rsrtl_reach(*((list2->next)))))), >=(*((list2->key)), sll_max_key(*((list2->next))))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(rsrtl_reach(list2), @_vcc_oset_union(rsrtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll(list2), &&(sll(*((list2->next))), unchecked!(@_vcc_oset_in(list2, sll_reach(*((list2->next)))))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_reach(list2), @_vcc_oset_union(sll_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_max_key(list2), @\int_max(*((list2->key)), sll_max_key(*((list2->next)))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_min_key(list2), @\int_min(*((list2->key)), sll_min_key(*((list2->next)))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(srtl(list2), &&(&&(srtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, srtl_reach(*((list2->next)))))), <=(*((list2->key)), sll_min_key(*((list2->next))))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(srtl_reach(list2), @_vcc_oset_union(srtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg(list, l), &&(sll_lseg(*((list->next)), l), unchecked!(@_vcc_oset_in(list, sll_lseg_reach(*((list->next)), l)))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_reach(list, l), @_vcc_oset_union(sll_lseg_reach(*((list->next)), l), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_keys(list, l), @_vcc_intset_union(sll_lseg_keys(*((list->next)), l), @_vcc_intset_singleton(*((list->key)))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_len_next(list, l), unchecked+(sll_lseg_len_next(*((list->next)), l), 1))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), 1);
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(sll_lseg_max_key(list, l), @\int_max(*((list->key)), sll_lseg_max_key(*((list->next)), l)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(sll_lseg_min_key(list, l), @\int_min(*((list->key)), sll_lseg_min_key(*((list->next)), l)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(srtl_lseg(list, l), &&(&&(srtl_lseg(*((list->next)), l), unchecked!(@_vcc_oset_in(list, srtl_lseg_reach(*((list->next)), l)))), <=(*((list->key)), sll_lseg_min_key(*((list->next)), l))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(srtl_lseg_reach(list, l), @_vcc_oset_union(srtl_lseg_reach(*((list->next)), l), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
        // _math \state _dryad_S6#6; 
        // _dryad_S6#6 := @_vcc_current_state(@state); 
        _dryad_S6#6 := $current_state($s);
        // _math \state stmtexpr0#20; 
        // stmtexpr0#20 := _dryad_S6#6; 
        stmtexpr0#20 := _dryad_S6#6;
        // assert @prim_writes_check((l->next)); 
        assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#l, ^s_node), s_node.next));
        // *(l->next) := local.l2; 
        call $write_int(s_node.next, $phys_ptr_cast(L#l, ^s_node), $ptr_to_int($phys_ptr_cast(local.l2, ^s_node)));
        assume $full_stop_ext(#tok$3^85.3, $s);
        // _math \state _dryad_S7#7; 
        // _dryad_S7#7 := @_vcc_current_state(@state); 
        _dryad_S7#7 := $current_state($s);
        // _math \state stmtexpr1#21; 
        // stmtexpr1#21 := _dryad_S7#7; 
        stmtexpr1#21 := _dryad_S7#7;
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list2)))), ==(old(_dryad_S6#6, sll_keys(list2)), old(_dryad_S7#7, sll_keys(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_keys(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_keys(_dryad_S7#7, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list2)))), ==(old(_dryad_S6#6, sll_list_len_next(list2)), old(_dryad_S7#7, sll_list_len_next(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_list_len_next(_dryad_S7#7, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, rsrtl_reach(list2)))), ==(old(_dryad_S6#6, rsrtl(list2)), old(_dryad_S7#7, rsrtl(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#rsrtl(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node)) == F#rsrtl(_dryad_S7#7, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, rsrtl_reach(list2)))), ==(old(_dryad_S6#6, rsrtl_reach(list2)), old(_dryad_S7#7, rsrtl_reach(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node)) == F#rsrtl_reach(_dryad_S7#7, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list2)))), ==(old(_dryad_S6#6, sll(list2)), old(_dryad_S7#7, sll(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll(_dryad_S7#7, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list2)))), ==(old(_dryad_S6#6, sll_reach(list2)), old(_dryad_S7#7, sll_reach(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_reach(_dryad_S7#7, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list2)))), ==(old(_dryad_S6#6, sll_max_key(list2)), old(_dryad_S7#7, sll_max_key(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_max_key(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_max_key(_dryad_S7#7, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list2)))), ==(old(_dryad_S6#6, sll_min_key(list2)), old(_dryad_S7#7, sll_min_key(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_min_key(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_min_key(_dryad_S7#7, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, srtl_reach(list2)))), ==(old(_dryad_S6#6, srtl(list2)), old(_dryad_S7#7, srtl(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#srtl(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node)) == F#srtl(_dryad_S7#7, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, srtl_reach(list2)))), ==(old(_dryad_S6#6, srtl_reach(list2)), old(_dryad_S7#7, srtl_reach(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node)) == F#srtl_reach(_dryad_S7#7, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list)))), ==(old(_dryad_S6#6, sll_keys(list)), old(_dryad_S7#7, sll_keys(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_keys(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node)) == F#sll_keys(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list)))), ==(old(_dryad_S6#6, sll_list_len_next(list)), old(_dryad_S7#7, sll_list_len_next(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node)) == F#sll_list_len_next(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, rsrtl_reach(list)))), ==(old(_dryad_S6#6, rsrtl(list)), old(_dryad_S7#7, rsrtl(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node))) ==> F#rsrtl(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node)) == F#rsrtl(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, rsrtl_reach(list)))), ==(old(_dryad_S6#6, rsrtl_reach(list)), old(_dryad_S7#7, rsrtl_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node)) == F#rsrtl_reach(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list)))), ==(old(_dryad_S6#6, sll(list)), old(_dryad_S7#7, sll(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node)) == F#sll(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list)))), ==(old(_dryad_S6#6, sll_reach(list)), old(_dryad_S7#7, sll_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node)) == F#sll_reach(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list)))), ==(old(_dryad_S6#6, sll_max_key(list)), old(_dryad_S7#7, sll_max_key(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_max_key(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node)) == F#sll_max_key(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list)))), ==(old(_dryad_S6#6, sll_min_key(list)), old(_dryad_S7#7, sll_min_key(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_min_key(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node)) == F#sll_min_key(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, srtl_reach(list)))), ==(old(_dryad_S6#6, srtl(list)), old(_dryad_S7#7, srtl(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node))) ==> F#srtl(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node)) == F#srtl(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, srtl_reach(list)))), ==(old(_dryad_S6#6, srtl_reach(list)), old(_dryad_S7#7, srtl_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node))) ==> F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node)) == F#srtl_reach(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list_next)))), ==(old(_dryad_S6#6, sll_keys(list_next)), old(_dryad_S7#7, sll_keys(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_keys(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_keys(_dryad_S7#7, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list_next)))), ==(old(_dryad_S6#6, sll_list_len_next(list_next)), old(_dryad_S7#7, sll_list_len_next(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_list_len_next(_dryad_S7#7, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, rsrtl_reach(list_next)))), ==(old(_dryad_S6#6, rsrtl(list_next)), old(_dryad_S7#7, rsrtl(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl(_dryad_S7#7, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, rsrtl_reach(list_next)))), ==(old(_dryad_S6#6, rsrtl_reach(list_next)), old(_dryad_S7#7, rsrtl_reach(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl_reach(_dryad_S7#7, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list_next)))), ==(old(_dryad_S6#6, sll(list_next)), old(_dryad_S7#7, sll(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll(_dryad_S7#7, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list_next)))), ==(old(_dryad_S6#6, sll_reach(list_next)), old(_dryad_S7#7, sll_reach(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_reach(_dryad_S7#7, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list_next)))), ==(old(_dryad_S6#6, sll_max_key(list_next)), old(_dryad_S7#7, sll_max_key(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_max_key(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_max_key(_dryad_S7#7, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list_next)))), ==(old(_dryad_S6#6, sll_min_key(list_next)), old(_dryad_S7#7, sll_min_key(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_min_key(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_min_key(_dryad_S7#7, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, srtl_reach(list_next)))), ==(old(_dryad_S6#6, srtl(list_next)), old(_dryad_S7#7, srtl(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl(_dryad_S7#7, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, srtl_reach(list_next)))), ==(old(_dryad_S6#6, srtl_reach(list_next)), old(_dryad_S7#7, srtl_reach(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl_reach(_dryad_S7#7, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(local.l2)))), ==(old(_dryad_S6#6, sll_keys(local.l2)), old(_dryad_S7#7, sll_keys(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_keys(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_keys(_dryad_S7#7, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(local.l2)))), ==(old(_dryad_S6#6, sll_list_len_next(local.l2)), old(_dryad_S7#7, sll_list_len_next(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_list_len_next(_dryad_S7#7, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, rsrtl_reach(local.l2)))), ==(old(_dryad_S6#6, rsrtl(local.l2)), old(_dryad_S7#7, rsrtl(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl(_dryad_S7#7, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, rsrtl_reach(local.l2)))), ==(old(_dryad_S6#6, rsrtl_reach(local.l2)), old(_dryad_S7#7, rsrtl_reach(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl_reach(_dryad_S7#7, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(local.l2)))), ==(old(_dryad_S6#6, sll(local.l2)), old(_dryad_S7#7, sll(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node)) == F#sll(_dryad_S7#7, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(local.l2)))), ==(old(_dryad_S6#6, sll_reach(local.l2)), old(_dryad_S7#7, sll_reach(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_reach(_dryad_S7#7, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(local.l2)))), ==(old(_dryad_S6#6, sll_max_key(local.l2)), old(_dryad_S7#7, sll_max_key(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_max_key(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_max_key(_dryad_S7#7, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(local.l2)))), ==(old(_dryad_S6#6, sll_min_key(local.l2)), old(_dryad_S7#7, sll_min_key(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_min_key(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_min_key(_dryad_S7#7, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, srtl_reach(local.l2)))), ==(old(_dryad_S6#6, srtl(local.l2)), old(_dryad_S7#7, srtl(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl(_dryad_S7#7, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, srtl_reach(local.l2)))), ==(old(_dryad_S6#6, srtl_reach(local.l2)), old(_dryad_S7#7, srtl_reach(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl_reach(_dryad_S7#7, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(local.l1)))), ==(old(_dryad_S6#6, sll_keys(local.l1)), old(_dryad_S7#7, sll_keys(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_keys(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_keys(_dryad_S7#7, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(local.l1)))), ==(old(_dryad_S6#6, sll_list_len_next(local.l1)), old(_dryad_S7#7, sll_list_len_next(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_list_len_next(_dryad_S7#7, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, rsrtl_reach(local.l1)))), ==(old(_dryad_S6#6, rsrtl(local.l1)), old(_dryad_S7#7, rsrtl(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl(_dryad_S7#7, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, rsrtl_reach(local.l1)))), ==(old(_dryad_S6#6, rsrtl_reach(local.l1)), old(_dryad_S7#7, rsrtl_reach(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl_reach(_dryad_S7#7, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(local.l1)))), ==(old(_dryad_S6#6, sll(local.l1)), old(_dryad_S7#7, sll(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node)) == F#sll(_dryad_S7#7, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(local.l1)))), ==(old(_dryad_S6#6, sll_reach(local.l1)), old(_dryad_S7#7, sll_reach(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_reach(_dryad_S7#7, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(local.l1)))), ==(old(_dryad_S6#6, sll_max_key(local.l1)), old(_dryad_S7#7, sll_max_key(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_max_key(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_max_key(_dryad_S7#7, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(local.l1)))), ==(old(_dryad_S6#6, sll_min_key(local.l1)), old(_dryad_S7#7, sll_min_key(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_min_key(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_min_key(_dryad_S7#7, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, srtl_reach(local.l1)))), ==(old(_dryad_S6#6, srtl(local.l1)), old(_dryad_S7#7, srtl(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl(_dryad_S7#7, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, srtl_reach(local.l1)))), ==(old(_dryad_S6#6, srtl_reach(local.l1)), old(_dryad_S7#7, srtl_reach(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl_reach(_dryad_S7#7, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#6, sll_lseg(list, l)), old(_dryad_S7#7, sll_lseg(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#6, sll_lseg_reach(list, l)), old(_dryad_S7#7, sll_lseg_reach(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_reach(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#6, sll_lseg_keys(list, l)), old(_dryad_S7#7, sll_lseg_keys(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_keys(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_keys(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#6, sll_lseg_len_next(list, l)), old(_dryad_S7#7, sll_lseg_len_next(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_len_next(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#6, sll_lseg_max_key(list, l)), old(_dryad_S7#7, sll_lseg_max_key(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_max_key(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_max_key(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#6, sll_lseg_min_key(list, l)), old(_dryad_S7#7, sll_lseg_min_key(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_min_key(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_min_key(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, srtl_lseg_reach(list, l)))), ==(old(_dryad_S6#6, srtl_lseg(list, l)), old(_dryad_S7#7, srtl_lseg(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_lseg(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#srtl_lseg(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, srtl_lseg_reach(list, l)))), ==(old(_dryad_S6#6, srtl_lseg_reach(list, l)), old(_dryad_S7#7, srtl_lseg_reach(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_lseg_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#srtl_lseg_reach(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(l, list2)), ==(*((list2->key)), old(_dryad_S6#6, *((list2->key))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(SL#list2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) == $rd_inv(_dryad_S6#6, s_node.key, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(l, list2)), @_vcc_ptr_eq_pure(*((list2->next)), old(_dryad_S6#6, *((list2->next))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(SL#list2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#6, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(l, list)), ==(*((list->key)), old(_dryad_S6#6, *((list->key))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) == $rd_inv(_dryad_S6#6, s_node.key, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(l, list)), @_vcc_ptr_eq_pure(*((list->next)), old(_dryad_S6#6, *((list->next))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#6, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(l, list_next)), ==(*((list_next->key)), old(_dryad_S6#6, *((list_next->key))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) == $rd_inv(_dryad_S6#6, s_node.key, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(l, list_next)), @_vcc_ptr_eq_pure(*((list_next->next)), old(_dryad_S6#6, *((list_next->next))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#6, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l2)), ==(*((local.l2->key)), old(_dryad_S6#6, *((local.l2->key))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) == $rd_inv(_dryad_S6#6, s_node.key, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l2)), @_vcc_ptr_eq_pure(*((local.l2->next)), old(_dryad_S6#6, *((local.l2->next))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#6, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l1)), ==(*((local.l1->key)), old(_dryad_S6#6, *((local.l1->key))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) == $rd_inv(_dryad_S6#6, s_node.key, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l1)), @_vcc_ptr_eq_pure(*((local.l1->next)), old(_dryad_S6#6, *((local.l1->next))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#6, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node);
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_keys(list2), @_vcc_intset_union(sll_keys(*((list2->next))), @_vcc_intset_singleton(*((list2->key)))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#list2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_list_len_next(list2), unchecked+(sll_list_len_next(*((list2->next))), 1))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#list2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(rsrtl(list2), &&(&&(rsrtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, rsrtl_reach(*((list2->next)))))), >=(*((list2->key)), sll_max_key(*((list2->next))))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(rsrtl_reach(list2), @_vcc_oset_union(rsrtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll(list2), &&(sll(*((list2->next))), unchecked!(@_vcc_oset_in(list2, sll_reach(*((list2->next)))))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_reach(list2), @_vcc_oset_union(sll_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_max_key(list2), @\int_max(*((list2->key)), sll_max_key(*((list2->next)))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_min_key(list2), @\int_min(*((list2->key)), sll_min_key(*((list2->next)))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(srtl(list2), &&(&&(srtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, srtl_reach(*((list2->next)))))), <=(*((list2->key)), sll_min_key(*((list2->next))))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(srtl_reach(list2), @_vcc_oset_union(srtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    }

  anon11:
    // return list_next; 
    $result := $phys_ptr_cast(L#list_next, ^s_node);
    assume true;
    assert $position_marker();
    goto #exit;

  anon12:
    // skip

  #exit:
}



axiom (forall Q#__vcc_state$2^687.9#tc2#1700: $state, Q#x$2^687.9#dt1#1624: $ptr :: {:weight 10} { F#srtl(Q#__vcc_state$2^687.9#tc2#1700, $phys_ptr_cast(Q#x$2^687.9#dt1#1624, ^s_node)) } { F#sll(Q#__vcc_state$2^687.9#tc2#1700, $phys_ptr_cast(Q#x$2^687.9#dt1#1624, ^s_node)) } $good_state(Q#__vcc_state$2^687.9#tc2#1700) && true ==> F#srtl(Q#__vcc_state$2^687.9#tc2#1700, $phys_ptr_cast(Q#x$2^687.9#dt1#1624, ^s_node)) ==> F#sll(Q#__vcc_state$2^687.9#tc2#1700, $phys_ptr_cast(Q#x$2^687.9#dt1#1624, ^s_node)));

axiom (forall Q#__vcc_state$2^688.9#tc2#1701: $state, Q#x$2^688.9#dt1#1625: $ptr :: {:weight 10} { F#rsrtl(Q#__vcc_state$2^688.9#tc2#1701, $phys_ptr_cast(Q#x$2^688.9#dt1#1625, ^s_node)) } { F#sll(Q#__vcc_state$2^688.9#tc2#1701, $phys_ptr_cast(Q#x$2^688.9#dt1#1625, ^s_node)) } $good_state(Q#__vcc_state$2^688.9#tc2#1701) && true ==> F#rsrtl(Q#__vcc_state$2^688.9#tc2#1701, $phys_ptr_cast(Q#x$2^688.9#dt1#1625, ^s_node)) ==> F#sll(Q#__vcc_state$2^688.9#tc2#1701, $phys_ptr_cast(Q#x$2^688.9#dt1#1625, ^s_node)));

axiom (forall Q#__vcc_state$2^689.9#tc2#1702: $state, Q#x$2^689.9#dt1#1626: $ptr :: {:weight 10} { F#sll_reach(Q#__vcc_state$2^689.9#tc2#1702, $phys_ptr_cast(Q#x$2^689.9#dt1#1626, ^s_node)) } { F#srtl_reach(Q#__vcc_state$2^689.9#tc2#1702, $phys_ptr_cast(Q#x$2^689.9#dt1#1626, ^s_node)) } $good_state(Q#__vcc_state$2^689.9#tc2#1702) && true ==> F#sll_reach(Q#__vcc_state$2^689.9#tc2#1702, $phys_ptr_cast(Q#x$2^689.9#dt1#1626, ^s_node)) == F#srtl_reach(Q#__vcc_state$2^689.9#tc2#1702, $phys_ptr_cast(Q#x$2^689.9#dt1#1626, ^s_node)));

axiom (forall Q#__vcc_state$2^690.9#tc2#1703: $state, Q#x$2^690.9#dt1#1627: $ptr :: {:weight 10} { F#srtl_reach(Q#__vcc_state$2^690.9#tc2#1703, $phys_ptr_cast(Q#x$2^690.9#dt1#1627, ^s_node)) } { F#rsrtl_reach(Q#__vcc_state$2^690.9#tc2#1703, $phys_ptr_cast(Q#x$2^690.9#dt1#1627, ^s_node)) } $good_state(Q#__vcc_state$2^690.9#tc2#1703) && true ==> F#srtl_reach(Q#__vcc_state$2^690.9#tc2#1703, $phys_ptr_cast(Q#x$2^690.9#dt1#1627, ^s_node)) == F#rsrtl_reach(Q#__vcc_state$2^690.9#tc2#1703, $phys_ptr_cast(Q#x$2^690.9#dt1#1627, ^s_node)));

axiom (forall Q#__vcc_state$2^691.9#tc2#1704: $state, Q#x$2^691.9#dt1#1628: $ptr, Q#y$2^691.9#dt1#1629: $ptr :: {:weight 10} { F#sll_lseg_reach(Q#__vcc_state$2^691.9#tc2#1704, $phys_ptr_cast(Q#x$2^691.9#dt1#1628, ^s_node), $phys_ptr_cast(Q#y$2^691.9#dt1#1629, ^s_node)) } { F#srtl_lseg_reach(Q#__vcc_state$2^691.9#tc2#1704, $phys_ptr_cast(Q#x$2^691.9#dt1#1628, ^s_node), $phys_ptr_cast(Q#y$2^691.9#dt1#1629, ^s_node)) } $good_state(Q#__vcc_state$2^691.9#tc2#1704) && true ==> F#sll_lseg_reach(Q#__vcc_state$2^691.9#tc2#1704, $phys_ptr_cast(Q#x$2^691.9#dt1#1628, ^s_node), $phys_ptr_cast(Q#y$2^691.9#dt1#1629, ^s_node)) == F#srtl_lseg_reach(Q#__vcc_state$2^691.9#tc2#1704, $phys_ptr_cast(Q#x$2^691.9#dt1#1628, ^s_node), $phys_ptr_cast(Q#y$2^691.9#dt1#1629, ^s_node)));

const unique l#public: $label;

axiom $type_code_is(2, ^$#state_t);

const unique #tok$3^85.3: $token;

const unique #tok$3^83.3: $token;

const unique #tok$3^80.3: $token;

const unique #tok$3^74.4: $token;

const unique #tok$3^70.4: $token;

const unique #tok$3^33.2: $token;

const unique #tok$3^27.2: $token;

const unique #tok$3^26.2: $token;

const unique #tok$3^18.9: $token;

const unique #tok$3^13.56: $token;

const unique #tok$3^13.41: $token;

const unique #tok$3^12.62: $token;

const unique #tok$3^12.48: $token;

const unique #tok$3^11.23: $token;

const unique #tok$3^10.23: $token;

const unique #tok$4^0.0: $token;

const unique #file^?3Cno?20file?3E: $token;

axiom $file_name_is(4, #file^?3Cno?20file?3E);

const unique #tok$3^3.3: $token;

const unique #file^Z?3A?5CInvariantSynthesis?5CVCDryad?5Cvcc?5CHost?5Cbin?5CTests?5Cgslist?5Cg_slist_sort_merge.c: $token;

axiom $file_name_is(3, #file^Z?3A?5CInvariantSynthesis?5CVCDryad?5Cvcc?5CHost?5Cbin?5CTests?5Cgslist?5Cg_slist_sort_merge.c);

const unique #file^z?3A?5Cinvariantsynthesis?5Cvcdryad?5Cvcc?5Chost?5Cbin?5Ctests?5Cgslist?5Cdryad_gslist.h: $token;

axiom $file_name_is(2, #file^z?3A?5Cinvariantsynthesis?5Cvcdryad?5Cvcc?5Chost?5Cbin?5Ctests?5Cgslist?5Cdryad_gslist.h);

const unique #file^Z?3A?5CInvariantSynthesis?5CVCDryad?2Dbin?5CHeaders?5Cvccp.h: $token;

axiom $file_name_is(1, #file^Z?3A?5CInvariantSynthesis?5CVCDryad?2Dbin?5CHeaders?5Cvccp.h);

const unique #distTp1: $ctype;

axiom #distTp1 == $ptr_to(^s_node);

