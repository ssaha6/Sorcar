
const {:existential true} b0000 : bool;
const {:existential true} b0001 : bool;
const {:existential true} b0002 : bool;
const {:existential true} b0003 : bool;
const {:existential true} b0004 : bool;
const {:existential true} b0005 : bool;
const {:existential true} b0006 : bool;
const {:existential true} b0007 : bool;
const {:existential true} b0008 : bool;
const {:existential true} b0009 : bool;
const {:existential true} b0010 : bool;
const {:existential true} b0011 : bool;
const {:existential true} b0012 : bool;
const {:existential true} b0013 : bool;
const {:existential true} b0014 : bool;
const {:existential true} b0015 : bool;
const {:existential true} b0016 : bool;
const {:existential true} b0017 : bool;
const {:existential true} b0018 : bool;
const {:existential true} b0019 : bool;
const {:existential true} b0020 : bool;
const {:existential true} b0021 : bool;
const {:existential true} b0022 : bool;
const {:existential true} b0023 : bool;
const {:existential true} b0024 : bool;
const {:existential true} b0025 : bool;
const {:existential true} b0026 : bool;
const {:existential true} b0027 : bool;
const {:existential true} b0028 : bool;
const {:existential true} b0029 : bool;
const {:existential true} b0030 : bool;
const {:existential true} b0031 : bool;
const {:existential true} b0032 : bool;
const {:existential true} b0033 : bool;
const {:existential true} b0034 : bool;
const {:existential true} b0035 : bool;
const {:existential true} b0036 : bool;
const {:existential true} b0037 : bool;
const {:existential true} b0038 : bool;
const {:existential true} b0039 : bool;
const {:existential true} b0040 : bool;
const {:existential true} b0041 : bool;
const {:existential true} b0042 : bool;
const {:existential true} b0043 : bool;
const {:existential true} b0044 : bool;
const {:existential true} b0045 : bool;
const {:existential true} b0046 : bool;
const {:existential true} b0047 : bool;
const {:existential true} b0048 : bool;
const {:existential true} b0049 : bool;
const {:existential true} b0050 : bool;
const {:existential true} b0051 : bool;
const {:existential true} b0052 : bool;
const {:existential true} b0053 : bool;
const {:existential true} b0054 : bool;
const {:existential true} b0055 : bool;
const {:existential true} b0056 : bool;
const {:existential true} b0057 : bool;
const {:existential true} b0058 : bool;
const {:existential true} b0059 : bool;
const {:existential true} b0060 : bool;
const {:existential true} b0061 : bool;
const {:existential true} b0062 : bool;
const {:existential true} b0063 : bool;
const {:existential true} b0064 : bool;
const {:existential true} b0065 : bool;
const {:existential true} b0066 : bool;
const {:existential true} b0067 : bool;
const {:existential true} b0068 : bool;
const {:existential true} b0069 : bool;
const {:existential true} b0070 : bool;
const {:existential true} b0071 : bool;
const {:existential true} b0072 : bool;
const {:existential true} b0073 : bool;
const {:existential true} b0074 : bool;
const {:existential true} b0075 : bool;
const {:existential true} b0076 : bool;
const {:existential true} b0077 : bool;
const {:existential true} b0078 : bool;
const {:existential true} b0079 : bool;
const {:existential true} b0080 : bool;
const {:existential true} b0081 : bool;
const {:existential true} b0082 : bool;
const {:existential true} b0083 : bool;
const {:existential true} b0084 : bool;
const {:existential true} b0085 : bool;
const {:existential true} b0086 : bool;
const {:existential true} b0087 : bool;
const {:existential true} b0088 : bool;
const {:existential true} b0089 : bool;
const {:existential true} b0090 : bool;
const {:existential true} b0091 : bool;
const {:existential true} b0092 : bool;
const {:existential true} b0093 : bool;
const {:existential true} b0094 : bool;
const {:existential true} b0095 : bool;
const {:existential true} b0096 : bool;
const {:existential true} b0097 : bool;
const {:existential true} b0098 : bool;
const {:existential true} b0099 : bool;
const {:existential true} b0100 : bool;
const {:existential true} b0101 : bool;
const {:existential true} b0102 : bool;
const {:existential true} b0103 : bool;
const {:existential true} b0104 : bool;
const {:existential true} b0105 : bool;
const {:existential true} b0106 : bool;
const {:existential true} b0107 : bool;
const {:existential true} b0108 : bool;
const {:existential true} b0109 : bool;
const {:existential true} b0110 : bool;
const {:existential true} b0111 : bool;
const {:existential true} b0112 : bool;
const {:existential true} b0113 : bool;
const {:existential true} b0114 : bool;
const {:existential true} b0115 : bool;
const {:existential true} b0116 : bool;
const {:existential true} b0117 : bool;
const {:existential true} b0118 : bool;
const {:existential true} b0119 : bool;
const {:existential true} b0120 : bool;
const {:existential true} b0121 : bool;
const {:existential true} b0122 : bool;
const {:existential true} b0123 : bool;
const {:existential true} b0124 : bool;
const {:existential true} b0125 : bool;
const {:existential true} b0126 : bool;
const {:existential true} b0127 : bool;
const {:existential true} b0128 : bool;
const {:existential true} b0129 : bool;
const {:existential true} b0130 : bool;
const {:existential true} b0131 : bool;
const {:existential true} b0132 : bool;
const {:existential true} b0133 : bool;
const {:existential true} b0134 : bool;
const {:existential true} b0135 : bool;
const {:existential true} b0136 : bool;
const {:existential true} b0137 : bool;
const {:existential true} b0138 : bool;
const {:existential true} b0139 : bool;
const {:existential true} b0140 : bool;
const {:existential true} b0141 : bool;
const {:existential true} b0142 : bool;
const {:existential true} b0143 : bool;
const {:existential true} b0144 : bool;
const {:existential true} b0145 : bool;
const {:existential true} b0146 : bool;
const {:existential true} b0147 : bool;
const {:existential true} b0148 : bool;
const {:existential true} b0149 : bool;
const {:existential true} b0150 : bool;
const {:existential true} b0151 : bool;
const {:existential true} b0152 : bool;
const {:existential true} b0153 : bool;
const {:existential true} b0154 : bool;
const {:existential true} b0155 : bool;
const {:existential true} b0156 : bool;
const {:existential true} b0157 : bool;
const {:existential true} b0158 : bool;
const {:existential true} b0159 : bool;
const {:existential true} b0160 : bool;
const {:existential true} b0161 : bool;
const {:existential true} b0162 : bool;
const {:existential true} b0163 : bool;
const {:existential true} b0164 : bool;
const {:existential true} b0165 : bool;
const {:existential true} b0166 : bool;
const {:existential true} b0167 : bool;
const {:existential true} b0168 : bool;
const {:existential true} b0169 : bool;
const {:existential true} b0170 : bool;
const {:existential true} b0171 : bool;
const {:existential true} b0172 : bool;
const {:existential true} b0173 : bool;
const {:existential true} b0174 : bool;
const {:existential true} b0175 : bool;
const {:existential true} b0176 : bool;
const {:existential true} b0177 : bool;
const {:existential true} b0178 : bool;
const {:existential true} b0179 : bool;
const {:existential true} b0180 : bool;
const {:existential true} b0181 : bool;
const {:existential true} b0182 : bool;
const {:existential true} b0183 : bool;
const {:existential true} b0184 : bool;
const {:existential true} b0185 : bool;
const {:existential true} b0186 : bool;
const {:existential true} b0187 : bool;
const {:existential true} b0188 : bool;
const {:existential true} b0189 : bool;
const {:existential true} b0190 : bool;
const {:existential true} b0191 : bool;
const {:existential true} b0192 : bool;
const {:existential true} b0193 : bool;
const {:existential true} b0194 : bool;
const {:existential true} b0195 : bool;
const {:existential true} b0196 : bool;
const {:existential true} b0197 : bool;
const {:existential true} b0198 : bool;
const {:existential true} b0199 : bool;
const {:existential true} b0200 : bool;
const {:existential true} b0201 : bool;
const {:existential true} b0202 : bool;
const {:existential true} b0203 : bool;
const {:existential true} b0204 : bool;
const {:existential true} b0205 : bool;
const {:existential true} b0206 : bool;
const {:existential true} b0207 : bool;
const {:existential true} b0208 : bool;
const {:existential true} b0209 : bool;
const {:existential true} b0210 : bool;
const {:existential true} b0211 : bool;
const {:existential true} b0212 : bool;
const {:existential true} b0213 : bool;
const {:existential true} b0214 : bool;
const {:existential true} b0215 : bool;
const {:existential true} b0216 : bool;
const {:existential true} b0217 : bool;
const {:existential true} b0218 : bool;
const {:existential true} b0219 : bool;
const {:existential true} b0220 : bool;
const {:existential true} b0221 : bool;
const {:existential true} b0222 : bool;
const {:existential true} b0223 : bool;
const {:existential true} b0224 : bool;
const {:existential true} b0225 : bool;
const {:existential true} b0226 : bool;
const {:existential true} b0227 : bool;
const {:existential true} b0228 : bool;
const {:existential true} b0229 : bool;
const {:existential true} b0230 : bool;
const {:existential true} b0231 : bool;
const {:existential true} b0232 : bool;
const {:existential true} b0233 : bool;
const {:existential true} b0234 : bool;
const {:existential true} b0235 : bool;
const {:existential true} b0236 : bool;
const {:existential true} b0237 : bool;
const {:existential true} b0238 : bool;
const {:existential true} b0239 : bool;
const {:existential true} b0240 : bool;
const {:existential true} b0241 : bool;
const {:existential true} b0242 : bool;
const {:existential true} b0243 : bool;
const {:existential true} b0244 : bool;
const {:existential true} b0245 : bool;
const {:existential true} b0246 : bool;
const {:existential true} b0247 : bool;
const {:existential true} b0248 : bool;
const {:existential true} b0249 : bool;
const {:existential true} b0250 : bool;
const {:existential true} b0251 : bool;
const {:existential true} b0252 : bool;
const {:existential true} b0253 : bool;
const {:existential true} b0254 : bool;
const {:existential true} b0255 : bool;
const {:existential true} b0256 : bool;
const {:existential true} b0257 : bool;
const {:existential true} b0258 : bool;
const {:existential true} b0259 : bool;
const {:existential true} b0260 : bool;
const {:existential true} b0261 : bool;
const {:existential true} b0262 : bool;
const {:existential true} b0263 : bool;
const {:existential true} b0264 : bool;
const {:existential true} b0265 : bool;
const {:existential true} b0266 : bool;
const {:existential true} b0267 : bool;
const {:existential true} b0268 : bool;
const {:existential true} b0269 : bool;
const {:existential true} b0270 : bool;
const {:existential true} b0271 : bool;
const {:existential true} b0272 : bool;
const {:existential true} b0273 : bool;
const {:existential true} b0274 : bool;
const {:existential true} b0275 : bool;
const {:existential true} b0276 : bool;
const {:existential true} b0277 : bool;
const {:existential true} b0278 : bool;
const {:existential true} b0279 : bool;
const {:existential true} b0280 : bool;
const {:existential true} b0281 : bool;
const {:existential true} b0282 : bool;
const {:existential true} b0283 : bool;
const {:existential true} b0284 : bool;
const {:existential true} b0285 : bool;
const {:existential true} b0286 : bool;
const {:existential true} b0287 : bool;
const {:existential true} b0288 : bool;
const {:existential true} b0289 : bool;
const {:existential true} b0290 : bool;
const {:existential true} b0291 : bool;
const {:existential true} b0292 : bool;
const {:existential true} b0293 : bool;
const {:existential true} b0294 : bool;
const {:existential true} b0295 : bool;
const {:existential true} b0296 : bool;
const {:existential true} b0297 : bool;
const {:existential true} b0298 : bool;
const {:existential true} b0299 : bool;
const {:existential true} b0300 : bool;
const {:existential true} b0301 : bool;
const {:existential true} b0302 : bool;
const {:existential true} b0303 : bool;
const {:existential true} b0304 : bool;
const {:existential true} b0305 : bool;
const {:existential true} b0306 : bool;
const {:existential true} b0307 : bool;
const {:existential true} b0308 : bool;
const {:existential true} b0309 : bool;
const {:existential true} b0310 : bool;
const {:existential true} b0311 : bool;
const {:existential true} b0312 : bool;
const {:existential true} b0313 : bool;
const {:existential true} b0314 : bool;
const {:existential true} b0315 : bool;
const {:existential true} b0316 : bool;
const {:existential true} b0317 : bool;
const {:existential true} b0318 : bool;
const {:existential true} b0319 : bool;
const {:existential true} b0320 : bool;
const {:existential true} b0321 : bool;
const {:existential true} b0322 : bool;
const {:existential true} b0323 : bool;
const {:existential true} b0324 : bool;
const {:existential true} b0325 : bool;
const {:existential true} b0326 : bool;
const {:existential true} b0327 : bool;
const {:existential true} b0328 : bool;
const {:existential true} b0329 : bool;
const {:existential true} b0330 : bool;
const {:existential true} b0331 : bool;
const {:existential true} b0332 : bool;
const {:existential true} b0333 : bool;
const {:existential true} b0334 : bool;
const {:existential true} b0335 : bool;
const {:existential true} b0336 : bool;
const {:existential true} b0337 : bool;
const {:existential true} b0338 : bool;
const {:existential true} b0339 : bool;
const {:existential true} b0340 : bool;
const {:existential true} b0341 : bool;
const {:existential true} b0342 : bool;
const {:existential true} b0343 : bool;
const {:existential true} b0344 : bool;
const {:existential true} b0345 : bool;
const {:existential true} b0346 : bool;
const {:existential true} b0347 : bool;
const {:existential true} b0348 : bool;
const {:existential true} b0349 : bool;
const {:existential true} b0350 : bool;
const {:existential true} b0351 : bool;
const {:existential true} b0352 : bool;
const {:existential true} b0353 : bool;
const {:existential true} b0354 : bool;
const {:existential true} b0355 : bool;
const {:existential true} b0356 : bool;
const {:existential true} b0357 : bool;
const {:existential true} b0358 : bool;
const {:existential true} b0359 : bool;
const {:existential true} b0360 : bool;
const {:existential true} b0361 : bool;
const {:existential true} b0362 : bool;
const {:existential true} b0363 : bool;
const {:existential true} b0364 : bool;
const {:existential true} b0365 : bool;
const {:existential true} b0366 : bool;
const {:existential true} b0367 : bool;
const {:existential true} b0368 : bool;
const {:existential true} b0369 : bool;
const {:existential true} b0370 : bool;
const {:existential true} b0371 : bool;
const {:existential true} b0372 : bool;
const {:existential true} b0373 : bool;
const {:existential true} b0374 : bool;
const {:existential true} b0375 : bool;
const {:existential true} b0376 : bool;
const {:existential true} b0377 : bool;
const {:existential true} b0378 : bool;
const {:existential true} b0379 : bool;
const {:existential true} b0380 : bool;
const {:existential true} b0381 : bool;
const {:existential true} b0382 : bool;
const {:existential true} b0383 : bool;
const {:existential true} b0384 : bool;
const {:existential true} b0385 : bool;
const {:existential true} b0386 : bool;
const {:existential true} b0387 : bool;
const {:existential true} b0388 : bool;
const {:existential true} b0389 : bool;
const {:existential true} b0390 : bool;
const {:existential true} b0391 : bool;
const {:existential true} b0392 : bool;
const {:existential true} b0393 : bool;
const {:existential true} b0394 : bool;
const {:existential true} b0395 : bool;
const {:existential true} b0396 : bool;
const {:existential true} b0397 : bool;
const {:existential true} b0398 : bool;
const {:existential true} b0399 : bool;
const {:existential true} b0400 : bool;
const {:existential true} b0401 : bool;
const {:existential true} b0402 : bool;
const {:existential true} b0403 : bool;
const {:existential true} b0404 : bool;
const {:existential true} b0405 : bool;
const {:existential true} b0406 : bool;
const {:existential true} b0407 : bool;
const {:existential true} b0408 : bool;
const {:existential true} b0409 : bool;
const {:existential true} b0410 : bool;
const {:existential true} b0411 : bool;
const {:existential true} b0412 : bool;
const {:existential true} b0413 : bool;
const {:existential true} b0414 : bool;
const {:existential true} b0415 : bool;
const {:existential true} b0416 : bool;
const {:existential true} b0417 : bool;
const {:existential true} b0418 : bool;
const {:existential true} b0419 : bool;
const {:existential true} b0420 : bool;
const {:existential true} b0421 : bool;
const {:existential true} b0422 : bool;
const {:existential true} b0423 : bool;
const {:existential true} b0424 : bool;
const {:existential true} b0425 : bool;
const {:existential true} b0426 : bool;
const {:existential true} b0427 : bool;
const {:existential true} b0428 : bool;
const {:existential true} b0429 : bool;
const {:existential true} b0430 : bool;
const {:existential true} b0431 : bool;
const {:existential true} b0432 : bool;
const {:existential true} b0433 : bool;
const {:existential true} b0434 : bool;
const {:existential true} b0435 : bool;
const {:existential true} b0436 : bool;
const {:existential true} b0437 : bool;
const {:existential true} b0438 : bool;
const {:existential true} b0439 : bool;
const {:existential true} b0440 : bool;
const {:existential true} b0441 : bool;
const {:existential true} b0442 : bool;
const {:existential true} b0443 : bool;
const {:existential true} b0444 : bool;
const {:existential true} b0445 : bool;
const {:existential true} b0446 : bool;
const {:existential true} b0447 : bool;
const {:existential true} b0448 : bool;
const {:existential true} b0449 : bool;
const {:existential true} b0450 : bool;
const {:existential true} b0451 : bool;
const {:existential true} b0452 : bool;
const {:existential true} b0453 : bool;
const {:existential true} b0454 : bool;
const {:existential true} b0455 : bool;
const {:existential true} b0456 : bool;
const {:existential true} b0457 : bool;
const {:existential true} b0458 : bool;
const {:existential true} b0459 : bool;
const {:existential true} b0460 : bool;
const {:existential true} b0461 : bool;
const {:existential true} b0462 : bool;
const {:existential true} b0463 : bool;
const {:existential true} b0464 : bool;
const {:existential true} b0465 : bool;
const {:existential true} b0466 : bool;
const {:existential true} b0467 : bool;
const {:existential true} b0468 : bool;
const {:existential true} b0469 : bool;
const {:existential true} b0470 : bool;
const {:existential true} b0471 : bool;
const {:existential true} b0472 : bool;
const {:existential true} b0473 : bool;
const {:existential true} b0474 : bool;
const {:existential true} b0475 : bool;
const {:existential true} b0476 : bool;
const {:existential true} b0477 : bool;
const {:existential true} b0478 : bool;
const {:existential true} b0479 : bool;
const {:existential true} b0480 : bool;
const {:existential true} b0481 : bool;
const {:existential true} b0482 : bool;
const {:existential true} b0483 : bool;
const {:existential true} b0484 : bool;
const {:existential true} b0485 : bool;
const {:existential true} b0486 : bool;
const {:existential true} b0487 : bool;
const {:existential true} b0488 : bool;
const {:existential true} b0489 : bool;
const {:existential true} b0490 : bool;
const {:existential true} b0491 : bool;
const {:existential true} b0492 : bool;
const {:existential true} b0493 : bool;
const {:existential true} b0494 : bool;
const {:existential true} b0495 : bool;
const {:existential true} b0496 : bool;
const {:existential true} b0497 : bool;
const {:existential true} b0498 : bool;
const {:existential true} b0499 : bool;
const {:existential true} b0500 : bool;
const {:existential true} b0501 : bool;
const {:existential true} b0502 : bool;
const {:existential true} b0503 : bool;
const {:existential true} b0504 : bool;
const {:existential true} b0505 : bool;
const {:existential true} b0506 : bool;
const {:existential true} b0507 : bool;
const {:existential true} b0508 : bool;
const {:existential true} b0509 : bool;
const {:existential true} b0510 : bool;
const {:existential true} b0511 : bool;
const {:existential true} b0512 : bool;
const {:existential true} b0513 : bool;
const {:existential true} b0514 : bool;
const {:existential true} b0515 : bool;
const {:existential true} b0516 : bool;
const {:existential true} b0517 : bool;
const {:existential true} b0518 : bool;
const {:existential true} b0519 : bool;
const {:existential true} b0520 : bool;
const {:existential true} b0521 : bool;
const {:existential true} b0522 : bool;
const {:existential true} b0523 : bool;
const {:existential true} b0524 : bool;
const {:existential true} b0525 : bool;
const {:existential true} b0526 : bool;
const {:existential true} b0527 : bool;
const {:existential true} b0528 : bool;
const {:existential true} b0529 : bool;
const {:existential true} b0530 : bool;
const {:existential true} b0531 : bool;
const {:existential true} b0532 : bool;
const {:existential true} b0533 : bool;
const {:existential true} b0534 : bool;
const {:existential true} b0535 : bool;
const {:existential true} b0536 : bool;
const {:existential true} b0537 : bool;
const {:existential true} b0538 : bool;
const {:existential true} b0539 : bool;
const {:existential true} b0540 : bool;
const {:existential true} b0541 : bool;
const {:existential true} b0542 : bool;
const {:existential true} b0543 : bool;
const {:existential true} b0544 : bool;
const {:existential true} b0545 : bool;
const {:existential true} b0546 : bool;
const {:existential true} b0547 : bool;
const {:existential true} b0548 : bool;
const {:existential true} b0549 : bool;
const {:existential true} b0550 : bool;
const {:existential true} b0551 : bool;
const {:existential true} b0552 : bool;
const {:existential true} b0553 : bool;
const {:existential true} b0554 : bool;
const {:existential true} b0555 : bool;
const {:existential true} b0556 : bool;
const {:existential true} b0557 : bool;
const {:existential true} b0558 : bool;
const {:existential true} b0559 : bool;
const {:existential true} b0560 : bool;
const {:existential true} b0561 : bool;
const {:existential true} b0562 : bool;
const {:existential true} b0563 : bool;
const {:existential true} b0564 : bool;
const {:existential true} b0565 : bool;
const {:existential true} b0566 : bool;
const {:existential true} b0567 : bool;
const {:existential true} b0568 : bool;
const {:existential true} b0569 : bool;
const {:existential true} b0570 : bool;
const {:existential true} b0571 : bool;
const {:existential true} b0572 : bool;
const {:existential true} b0573 : bool;
const {:existential true} b0574 : bool;
const {:existential true} b0575 : bool;
const {:existential true} b0576 : bool;
const {:existential true} b0577 : bool;
const {:existential true} b0578 : bool;
const {:existential true} b0579 : bool;
const {:existential true} b0580 : bool;
const {:existential true} b0581 : bool;
const {:existential true} b0582 : bool;
const {:existential true} b0583 : bool;
const {:existential true} b0584 : bool;
const {:existential true} b0585 : bool;
const {:existential true} b0586 : bool;
const {:existential true} b0587 : bool;
const {:existential true} b0588 : bool;
const {:existential true} b0589 : bool;
const {:existential true} b0590 : bool;
const {:existential true} b0591 : bool;
const {:existential true} b0592 : bool;
const {:existential true} b0593 : bool;
const {:existential true} b0594 : bool;
const {:existential true} b0595 : bool;
const {:existential true} b0596 : bool;
const {:existential true} b0597 : bool;
const {:existential true} b0598 : bool;
const {:existential true} b0599 : bool;
const {:existential true} b0600 : bool;
const {:existential true} b0601 : bool;
const {:existential true} b0602 : bool;
const {:existential true} b0603 : bool;
const {:existential true} b0604 : bool;
const {:existential true} b0605 : bool;
const {:existential true} b0606 : bool;
const {:existential true} b0607 : bool;
const {:existential true} b0608 : bool;
const {:existential true} b0609 : bool;
const {:existential true} b0610 : bool;
const {:existential true} b0611 : bool;
const {:existential true} b0612 : bool;
const {:existential true} b0613 : bool;
const {:existential true} b0614 : bool;
const {:existential true} b0615 : bool;
const {:existential true} b0616 : bool;
const {:existential true} b0617 : bool;
const {:existential true} b0618 : bool;
const {:existential true} b0619 : bool;
const {:existential true} b0620 : bool;
const {:existential true} b0621 : bool;
const {:existential true} b0622 : bool;
const {:existential true} b0623 : bool;
const {:existential true} b0624 : bool;
const {:existential true} b0625 : bool;
const {:existential true} b0626 : bool;
const {:existential true} b0627 : bool;
const {:existential true} b0628 : bool;
const {:existential true} b0629 : bool;
const {:existential true} b0630 : bool;
const {:existential true} b0631 : bool;
const {:existential true} b0632 : bool;
const {:existential true} b0633 : bool;
const {:existential true} b0634 : bool;
const {:existential true} b0635 : bool;
const {:existential true} b0636 : bool;
const {:existential true} b0637 : bool;
const {:existential true} b0638 : bool;
const {:existential true} b0639 : bool;
const {:existential true} b0640 : bool;
const {:existential true} b0641 : bool;
const {:existential true} b0642 : bool;
const {:existential true} b0643 : bool;
const {:existential true} b0644 : bool;
const {:existential true} b0645 : bool;
const {:existential true} b0646 : bool;
const {:existential true} b0647 : bool;
const {:existential true} b0648 : bool;
const {:existential true} b0649 : bool;
const {:existential true} b0650 : bool;
const {:existential true} b0651 : bool;
const {:existential true} b0652 : bool;
const {:existential true} b0653 : bool;
const {:existential true} b0654 : bool;
const {:existential true} b0655 : bool;
const {:existential true} b0656 : bool;
const {:existential true} b0657 : bool;
const {:existential true} b0658 : bool;
const {:existential true} b0659 : bool;
const {:existential true} b0660 : bool;
const {:existential true} b0661 : bool;
const {:existential true} b0662 : bool;
const {:existential true} b0663 : bool;
const {:existential true} b0664 : bool;
const {:existential true} b0665 : bool;
const {:existential true} b0666 : bool;
const {:existential true} b0667 : bool;
const {:existential true} b0668 : bool;
const {:existential true} b0669 : bool;
const {:existential true} b0670 : bool;
const {:existential true} b0671 : bool;
const {:existential true} b0672 : bool;
const {:existential true} b0673 : bool;
const {:existential true} b0674 : bool;
const {:existential true} b0675 : bool;
const {:existential true} b0676 : bool;
const {:existential true} b0677 : bool;
const {:existential true} b0678 : bool;
const {:existential true} b0679 : bool;
const {:existential true} b0680 : bool;
const {:existential true} b0681 : bool;
const {:existential true} b0682 : bool;
const {:existential true} b0683 : bool;
const {:existential true} b0684 : bool;
const {:existential true} b0685 : bool;
const {:existential true} b0686 : bool;
const {:existential true} b0687 : bool;
const {:existential true} b0688 : bool;
const {:existential true} b0689 : bool;
const {:existential true} b0690 : bool;
const {:existential true} b0691 : bool;
const {:existential true} b0692 : bool;
const {:existential true} b0693 : bool;
const {:existential true} b0694 : bool;
const {:existential true} b0695 : bool;
const {:existential true} b0696 : bool;
const {:existential true} b0697 : bool;
const {:existential true} b0698 : bool;
const {:existential true} b0699 : bool;
const {:existential true} b0700 : bool;
const {:existential true} b0701 : bool;
const {:existential true} b0702 : bool;
const {:existential true} b0703 : bool;
const {:existential true} b0704 : bool;
const {:existential true} b0705 : bool;
const {:existential true} b0706 : bool;
const {:existential true} b0707 : bool;
const {:existential true} b0708 : bool;
const {:existential true} b0709 : bool;
const {:existential true} b0710 : bool;
const {:existential true} b0711 : bool;
const {:existential true} b0712 : bool;
const {:existential true} b0713 : bool;
const {:existential true} b0714 : bool;
const {:existential true} b0715 : bool;
const {:existential true} b0716 : bool;
const {:existential true} b0717 : bool;
const {:existential true} b0718 : bool;
const {:existential true} b0719 : bool;
const {:existential true} b0720 : bool;
const {:existential true} b0721 : bool;
const {:existential true} b0722 : bool;
const {:existential true} b0723 : bool;
const {:existential true} b0724 : bool;
const {:existential true} b0725 : bool;
const {:existential true} b0726 : bool;
const {:existential true} b0727 : bool;
const {:existential true} b0728 : bool;
const {:existential true} b0729 : bool;
const {:existential true} b0730 : bool;
const {:existential true} b0731 : bool;
const {:existential true} b0732 : bool;
const {:existential true} b0733 : bool;
const {:existential true} b0734 : bool;
const {:existential true} b0735 : bool;
const {:existential true} b0736 : bool;
const {:existential true} b0737 : bool;
const {:existential true} b0738 : bool;
const {:existential true} b0739 : bool;
const {:existential true} b0740 : bool;
const {:existential true} b0741 : bool;
const {:existential true} b0742 : bool;
const {:existential true} b0743 : bool;
const {:existential true} b0744 : bool;
const {:existential true} b0745 : bool;
const {:existential true} b0746 : bool;
const {:existential true} b0747 : bool;
const {:existential true} b0748 : bool;
const {:existential true} b0749 : bool;
const {:existential true} b0750 : bool;
const {:existential true} b0751 : bool;
const {:existential true} b0752 : bool;
const {:existential true} b0753 : bool;
const {:existential true} b0754 : bool;
const {:existential true} b0755 : bool;
const {:existential true} b0756 : bool;
const {:existential true} b0757 : bool;
const {:existential true} b0758 : bool;
const {:existential true} b0759 : bool;
const {:existential true} b0760 : bool;
const {:existential true} b0761 : bool;
const {:existential true} b0762 : bool;
const {:existential true} b0763 : bool;
const {:existential true} b0764 : bool;
const {:existential true} b0765 : bool;
const {:existential true} b0766 : bool;
const {:existential true} b0767 : bool;
const {:existential true} b0768 : bool;
const {:existential true} b0769 : bool;
const {:existential true} b0770 : bool;
const {:existential true} b0771 : bool;
const {:existential true} b0772 : bool;
const {:existential true} b0773 : bool;
const {:existential true} b0774 : bool;
const {:existential true} b0775 : bool;
const {:existential true} b0776 : bool;
const {:existential true} b0777 : bool;
const {:existential true} b0778 : bool;
const {:existential true} b0779 : bool;
const {:existential true} b0780 : bool;
const {:existential true} b0781 : bool;
const {:existential true} b0782 : bool;
const {:existential true} b0783 : bool;
const {:existential true} b0784 : bool;
const {:existential true} b0785 : bool;
const {:existential true} b0786 : bool;
const {:existential true} b0787 : bool;
const {:existential true} b0788 : bool;
const {:existential true} b0789 : bool;
const {:existential true} b0790 : bool;
const {:existential true} b0791 : bool;
const {:existential true} b0792 : bool;
const {:existential true} b0793 : bool;
const {:existential true} b0794 : bool;
const {:existential true} b0795 : bool;
const {:existential true} b0796 : bool;
const {:existential true} b0797 : bool;
const {:existential true} b0798 : bool;
const {:existential true} b0799 : bool;
const {:existential true} b0800 : bool;
const {:existential true} b0801 : bool;
const {:existential true} b0802 : bool;
const {:existential true} b0803 : bool;
const {:existential true} b0804 : bool;
const {:existential true} b0805 : bool;
const {:existential true} b0806 : bool;
const {:existential true} b0807 : bool;
const {:existential true} b0808 : bool;
const {:existential true} b0809 : bool;
const {:existential true} b0810 : bool;
const {:existential true} b0811 : bool;
const {:existential true} b0812 : bool;
const {:existential true} b0813 : bool;
const {:existential true} b0814 : bool;
const {:existential true} b0815 : bool;
const {:existential true} b0816 : bool;
const {:existential true} b0817 : bool;
const {:existential true} b0818 : bool;
const {:existential true} b0819 : bool;
const {:existential true} b0820 : bool;
const {:existential true} b0821 : bool;
const {:existential true} b0822 : bool;
const {:existential true} b0823 : bool;
const {:existential true} b0824 : bool;
const {:existential true} b0825 : bool;
const {:existential true} b0826 : bool;
const {:existential true} b0827 : bool;
const {:existential true} b0828 : bool;
const {:existential true} b0829 : bool;
const {:existential true} b0830 : bool;
const {:existential true} b0831 : bool;
const {:existential true} b0832 : bool;
const {:existential true} b0833 : bool;
const {:existential true} b0834 : bool;
const {:existential true} b0835 : bool;
const {:existential true} b0836 : bool;
const {:existential true} b0837 : bool;
const {:existential true} b0838 : bool;
const {:existential true} b0839 : bool;
const {:existential true} b0840 : bool;
const {:existential true} b0841 : bool;
const {:existential true} b0842 : bool;
const {:existential true} b0843 : bool;
const {:existential true} b0844 : bool;
const {:existential true} b0845 : bool;
const {:existential true} b0846 : bool;
const {:existential true} b0847 : bool;
const {:existential true} b0848 : bool;
const {:existential true} b0849 : bool;
const {:existential true} b0850 : bool;
const {:existential true} b0851 : bool;
const {:existential true} b0852 : bool;
const {:existential true} b0853 : bool;
const {:existential true} b0854 : bool;
const {:existential true} b0855 : bool;
const {:existential true} b0856 : bool;
const {:existential true} b0857 : bool;
const {:existential true} b0858 : bool;
const {:existential true} b0859 : bool;
const {:existential true} b0860 : bool;
const {:existential true} b0861 : bool;
const {:existential true} b0862 : bool;
const {:existential true} b0863 : bool;
const {:existential true} b0864 : bool;
const {:existential true} b0865 : bool;
const {:existential true} b0866 : bool;
const {:existential true} b0867 : bool;
const {:existential true} b0868 : bool;
const {:existential true} b0869 : bool;
const {:existential true} b0870 : bool;
const {:existential true} b0871 : bool;
const {:existential true} b0872 : bool;
const {:existential true} b0873 : bool;
const {:existential true} b0874 : bool;
const {:existential true} b0875 : bool;
const {:existential true} b0876 : bool;
const {:existential true} b0877 : bool;
const {:existential true} b0878 : bool;
const {:existential true} b0879 : bool;
const {:existential true} b0880 : bool;
const {:existential true} b0881 : bool;
const {:existential true} b0882 : bool;
const {:existential true} b0883 : bool;
const {:existential true} b0884 : bool;
const {:existential true} b0885 : bool;
const {:existential true} b0886 : bool;
const {:existential true} b0887 : bool;
const {:existential true} b0888 : bool;
const {:existential true} b0889 : bool;
const {:existential true} b0890 : bool;
const {:existential true} b0891 : bool;
const {:existential true} b0892 : bool;
const {:existential true} b0893 : bool;
const {:existential true} b0894 : bool;
const {:existential true} b0895 : bool;
const {:existential true} b0896 : bool;
const {:existential true} b0897 : bool;
const {:existential true} b0898 : bool;
const {:existential true} b0899 : bool;
const {:existential true} b0900 : bool;
const {:existential true} b0901 : bool;
const {:existential true} b0902 : bool;
const {:existential true} b0903 : bool;
const {:existential true} b0904 : bool;
const {:existential true} b0905 : bool;
const {:existential true} b0906 : bool;
const {:existential true} b0907 : bool;
const {:existential true} b0908 : bool;
const {:existential true} b0909 : bool;
const {:existential true} b0910 : bool;
const {:existential true} b0911 : bool;
const {:existential true} b0912 : bool;
const {:existential true} b0913 : bool;
const {:existential true} b0914 : bool;
const {:existential true} b0915 : bool;
const {:existential true} b0916 : bool;
const {:existential true} b0917 : bool;
const {:existential true} b0918 : bool;
const {:existential true} b0919 : bool;
const {:existential true} b0920 : bool;
const {:existential true} b0921 : bool;
const {:existential true} b0922 : bool;
const {:existential true} b0923 : bool;
const {:existential true} b0924 : bool;
const {:existential true} b0925 : bool;
const {:existential true} b0926 : bool;
const {:existential true} b0927 : bool;
const {:existential true} b0928 : bool;
const {:existential true} b0929 : bool;
const {:existential true} b0930 : bool;
const {:existential true} b0931 : bool;
const {:existential true} b0932 : bool;
const {:existential true} b0933 : bool;
const {:existential true} b0934 : bool;
const {:existential true} b0935 : bool;
const {:existential true} b0936 : bool;
const {:existential true} b0937 : bool;
const {:existential true} b0938 : bool;
const {:existential true} b0939 : bool;
const {:existential true} b0940 : bool;
const {:existential true} b0941 : bool;
const {:existential true} b0942 : bool;
const {:existential true} b0943 : bool;
const {:existential true} b0944 : bool;
const {:existential true} b0945 : bool;
const {:existential true} b0946 : bool;
const {:existential true} b0947 : bool;
const {:existential true} b0948 : bool;
const {:existential true} b0949 : bool;
const {:existential true} b0950 : bool;
const {:existential true} b0951 : bool;
const {:existential true} b0952 : bool;
const {:existential true} b0953 : bool;
const {:existential true} b0954 : bool;
const {:existential true} b0955 : bool;
const {:existential true} b0956 : bool;
const {:existential true} b0957 : bool;
const {:existential true} b0958 : bool;
const {:existential true} b0959 : bool;
const {:existential true} b0960 : bool;
const {:existential true} b0961 : bool;
const {:existential true} b0962 : bool;
const {:existential true} b0963 : bool;
const {:existential true} b0964 : bool;
const {:existential true} b0965 : bool;
const {:existential true} b0966 : bool;
const {:existential true} b0967 : bool;
const {:existential true} b0968 : bool;
const {:existential true} b0969 : bool;
const {:existential true} b0970 : bool;
const {:existential true} b0971 : bool;
const {:existential true} b0972 : bool;
const {:existential true} b0973 : bool;
const {:existential true} b0974 : bool;
const {:existential true} b0975 : bool;
const {:existential true} b0976 : bool;
const {:existential true} b0977 : bool;
const {:existential true} b0978 : bool;
const {:existential true} b0979 : bool;
const {:existential true} b0980 : bool;
const {:existential true} b0981 : bool;
const {:existential true} b0982 : bool;
const {:existential true} b0983 : bool;
const {:existential true} b0984 : bool;
const {:existential true} b0985 : bool;
const {:existential true} b0986 : bool;
const {:existential true} b0987 : bool;
const {:existential true} b0988 : bool;
const {:existential true} b0989 : bool;
const {:existential true} b0990 : bool;
const {:existential true} b0991 : bool;
const {:existential true} b0992 : bool;
const {:existential true} b0993 : bool;
const {:existential true} b0994 : bool;
const {:existential true} b0995 : bool;
const {:existential true} b0996 : bool;
const {:existential true} b0997 : bool;
const {:existential true} b0998 : bool;
const {:existential true} b0999 : bool;
const {:existential true} b1000 : bool;
const {:existential true} b1001 : bool;
const {:existential true} b1002 : bool;
const {:existential true} b1003 : bool;
const {:existential true} b1004 : bool;
const {:existential true} b1005 : bool;
const {:existential true} b1006 : bool;
const {:existential true} b1007 : bool;
const {:existential true} b1008 : bool;
const {:existential true} b1009 : bool;
const {:existential true} b1010 : bool;
const {:existential true} b1011 : bool;
const {:existential true} b1012 : bool;
const {:existential true} b1013 : bool;
const {:existential true} b1014 : bool;
const {:existential true} b1015 : bool;
const {:existential true} b1016 : bool;
const {:existential true} b1017 : bool;
const {:existential true} b1018 : bool;
const {:existential true} b1019 : bool;
const {:existential true} b1020 : bool;
const {:existential true} b1021 : bool;
const {:existential true} b1022 : bool;
const {:existential true} b1023 : bool;
const {:existential true} b1024 : bool;
const {:existential true} b1025 : bool;
const {:existential true} b1026 : bool;
const {:existential true} b1027 : bool;
const {:existential true} b1028 : bool;
const {:existential true} b1029 : bool;
const {:existential true} b1030 : bool;
const {:existential true} b1031 : bool;
const {:existential true} b1032 : bool;
const {:existential true} b1033 : bool;
const {:existential true} b1034 : bool;
const {:existential true} b1035 : bool;
const {:existential true} b1036 : bool;
const {:existential true} b1037 : bool;
const {:existential true} b1038 : bool;
const {:existential true} b1039 : bool;
const {:existential true} b1040 : bool;
const {:existential true} b1041 : bool;
const {:existential true} b1042 : bool;
const {:existential true} b1043 : bool;
const {:existential true} b1044 : bool;
const {:existential true} b1045 : bool;
const {:existential true} b1046 : bool;
const {:existential true} b1047 : bool;
const {:existential true} b1048 : bool;
const {:existential true} b1049 : bool;
const {:existential true} b1050 : bool;
const {:existential true} b1051 : bool;
const {:existential true} b1052 : bool;
const {:existential true} b1053 : bool;
const {:existential true} b1054 : bool;
const {:existential true} b1055 : bool;
const {:existential true} b1056 : bool;
const {:existential true} b1057 : bool;
const {:existential true} b1058 : bool;
const {:existential true} b1059 : bool;
const {:existential true} b1060 : bool;
const {:existential true} b1061 : bool;
const {:existential true} b1062 : bool;
const {:existential true} b1063 : bool;
const {:existential true} b1064 : bool;
const {:existential true} b1065 : bool;
const {:existential true} b1066 : bool;
const {:existential true} b1067 : bool;
const {:existential true} b1068 : bool;
const {:existential true} b1069 : bool;
const {:existential true} b1070 : bool;
const {:existential true} b1071 : bool;
const {:existential true} b1072 : bool;
const {:existential true} b1073 : bool;
const {:existential true} b1074 : bool;
const {:existential true} b1075 : bool;
const {:existential true} b1076 : bool;
const {:existential true} b1077 : bool;
const {:existential true} b1078 : bool;
const {:existential true} b1079 : bool;
const {:existential true} b1080 : bool;
const {:existential true} b1081 : bool;
const {:existential true} b1082 : bool;
const {:existential true} b1083 : bool;
const {:existential true} b1084 : bool;
const {:existential true} b1085 : bool;
const {:existential true} b1086 : bool;
const {:existential true} b1087 : bool;
const {:existential true} b1088 : bool;
const {:existential true} b1089 : bool;
const {:existential true} b1090 : bool;
const {:existential true} b1091 : bool;
const {:existential true} b1092 : bool;
const {:existential true} b1093 : bool;
const {:existential true} b1094 : bool;
const {:existential true} b1095 : bool;
const {:existential true} b1096 : bool;
const {:existential true} b1097 : bool;
const {:existential true} b1098 : bool;
const {:existential true} b1099 : bool;
const {:existential true} b1100 : bool;
const {:existential true} b1101 : bool;
const {:existential true} b1102 : bool;
const {:existential true} b1103 : bool;
const {:existential true} b1104 : bool;
const {:existential true} b1105 : bool;
const {:existential true} b1106 : bool;
const {:existential true} b1107 : bool;
const {:existential true} b1108 : bool;
const {:existential true} b1109 : bool;
const {:existential true} b1110 : bool;
const {:existential true} b1111 : bool;
const {:existential true} b1112 : bool;
const {:existential true} b1113 : bool;
const {:existential true} b1114 : bool;
const {:existential true} b1115 : bool;
const {:existential true} b1116 : bool;
const {:existential true} b1117 : bool;
const {:existential true} b1118 : bool;
const {:existential true} b1119 : bool;
const {:existential true} b1120 : bool;
const {:existential true} b1121 : bool;
const {:existential true} b1122 : bool;
const {:existential true} b1123 : bool;
const {:existential true} b1124 : bool;
const {:existential true} b1125 : bool;
const {:existential true} b1126 : bool;

axiom $arch_ptr_size == 8;

axiom $arch_spec_ptr_start == $max.u8;

const unique ^$##thread_id: $ctype;

axiom $def_math_type(^$##thread_id);

type $##thread_id;

const unique ^$##club: $ctype;

axiom $def_math_type(^$##club);

type $##club;

const unique ^s_node: $ctype;

axiom $is_span_sequential(^s_node);

axiom $def_struct_type(^s_node, 16, false, false);

axiom (forall #s1: $state, #s2: $state, #p: $ptr :: { $inv2(#s1, #s2, #p, ^s_node) } $inv2(#s1, #s2, #p, ^s_node) == $set_eq($owns(#s2, #p), $set_empty()));

axiom (forall #s1: $state, #s2: $state, #p: $ptr :: { $inv2_without_lemmas(#s1, #s2, #p, ^s_node) } $inv2_without_lemmas(#s1, #s2, #p, ^s_node) == $set_eq($owns(#s2, #p), $set_empty()));

axiom (forall p: $ptr, q: $ptr, s: $state :: { $in(q, $composite_extent(s, p, ^s_node)) } $in(q, $composite_extent(s, p, ^s_node)) == (q == p));

const unique s_node.key: $field;

axiom $def_phys_field(^s_node, s_node.key, ^^i4, false, 0);

const unique s_node.next: $field;

axiom $def_phys_field(^s_node, s_node.next, $ptr_to(^s_node), false, 8);

function F#glob_reach() : $oset;

const unique cf#glob_reach: $pure_function;

axiom $function_arg_type(cf#glob_reach, 0, ^$#oset);

procedure glob_reach() returns ($result: $oset);
  free ensures $result == F#glob_reach();
  free ensures $call_transition(old($s), $s);



const unique ^$#_purecall_handler#1: $ctype;

axiom $def_fnptr_type(^$#_purecall_handler#1);

type $#_purecall_handler#1;

const unique ^$#_invalid_parameter_handler#2: $ctype;

axiom $def_fnptr_type(^$#_invalid_parameter_handler#2);

type $#_invalid_parameter_handler#2;

const unique ^$#g_slist_sort_merge.c..36263#3: $ctype;

axiom $def_fnptr_type(^$#g_slist_sort_merge.c..36263#3);

type $#g_slist_sort_merge.c..36263#3;

const unique ^$#_PtFuncCompare#4: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#4);

type $#_PtFuncCompare#4;

const unique ^$#_PtFuncCompare#5: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#5);

type $#_PtFuncCompare#5;

const unique ^$#_PtFuncCompare#6: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#6);

type $#_PtFuncCompare#6;

const unique ^$#_PtFuncCompare#7: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#7);

type $#_PtFuncCompare#7;

const unique ^$#_onexit_t#8: $ctype;

axiom $def_fnptr_type(^$#_onexit_t#8);

type $#_onexit_t#8;

function F##int_max(SP#x: int, SP#y: int) : int;

const unique cf##int_max: $pure_function;

axiom (forall SP#x: int, SP#y: int :: { F##int_max(SP#x, SP#y) } $in_range_i4(F##int_max(SP#x, SP#y)));

axiom $function_arg_type(cf##int_max, 0, ^^i4);

axiom $function_arg_type(cf##int_max, 1, ^^i4);

axiom $function_arg_type(cf##int_max, 2, ^^i4);

procedure #int_max(SP#x: int, SP#y: int) returns ($result: int);
  free ensures $in_range_i4($result);
  free ensures $result == F##int_max(SP#x, SP#y);
  free ensures $call_transition(old($s), $s);



function F##int_min(SP#x: int, SP#y: int) : int;

const unique cf##int_min: $pure_function;

axiom (forall SP#x: int, SP#y: int :: { F##int_min(SP#x, SP#y) } $in_range_i4(F##int_min(SP#x, SP#y)));

axiom $function_arg_type(cf##int_min, 0, ^^i4);

axiom $function_arg_type(cf##int_min, 1, ^^i4);

axiom $function_arg_type(cf##int_min, 2, ^^i4);

procedure #int_min(SP#x: int, SP#y: int) returns ($result: int);
  free ensures $in_range_i4($result);
  free ensures $result == F##int_min(SP#x, SP#y);
  free ensures $call_transition(old($s), $s);



function F#sll(#s: $state, SP#hd: $ptr) : bool;

const unique cf#sll: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll(#s, SP#hd) } 1 < $decreases_level ==> $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#sll(#s, SP#hd));

axiom $function_arg_type(cf#sll, 0, ^^bool);

axiom $function_arg_type(cf#sll, 1, $ptr_to(^s_node));

procedure sll(SP#hd: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result;
  free ensures $result == F#sll($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#srtl(#s: $state, SP#hd: $ptr) : bool;

const unique cf#srtl: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#srtl(#s, SP#hd) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#srtl(#s, SP#hd)) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> F#srtl(#s, SP#hd)));

axiom $function_arg_type(cf#srtl, 0, ^^bool);

axiom $function_arg_type(cf#srtl, 1, $ptr_to(^s_node));

procedure srtl(SP#hd: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result;
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> $result;
  free ensures $result == F#srtl($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#rsrtl(#s: $state, SP#hd: $ptr) : bool;

const unique cf#rsrtl: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#rsrtl(#s, SP#hd) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#rsrtl(#s, SP#hd)) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> F#rsrtl(#s, SP#hd)));

axiom $function_arg_type(cf#rsrtl, 0, ^^bool);

axiom $function_arg_type(cf#rsrtl, 1, $ptr_to(^s_node));

procedure rsrtl(SP#hd: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result;
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> $result;
  free ensures $result == F#rsrtl($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_reach(#s: $state, SP#hd: $ptr) : $oset;

const unique cf#sll_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll_reach(#s, SP#hd) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#sll_reach(#s, SP#hd))) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#sll_reach(#s, SP#hd) == $oset_empty()));

axiom $function_arg_type(cf#sll_reach, 0, ^$#oset);

axiom $function_arg_type(cf#sll_reach, 1, $ptr_to(^s_node));

procedure sll_reach(SP#hd: $ptr) returns ($result: $oset);
  ensures ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result)) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result == $oset_empty());
  free ensures $result == F#sll_reach($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#srtl_reach(#s: $state, SP#hd: $ptr) : $oset;

const unique cf#srtl_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#srtl_reach(#s, SP#hd) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#srtl_reach(#s, SP#hd))) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#srtl_reach(#s, SP#hd) == $oset_empty()));

axiom $function_arg_type(cf#srtl_reach, 0, ^$#oset);

axiom $function_arg_type(cf#srtl_reach, 1, $ptr_to(^s_node));

procedure srtl_reach(SP#hd: $ptr) returns ($result: $oset);
  ensures ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result)) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result == $oset_empty());
  free ensures $result == F#srtl_reach($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#rsrtl_reach(#s: $state, SP#hd: $ptr) : $oset;

const unique cf#rsrtl_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#rsrtl_reach(#s, SP#hd) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#rsrtl_reach(#s, SP#hd))) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#rsrtl_reach(#s, SP#hd) == $oset_empty()));

axiom $function_arg_type(cf#rsrtl_reach, 0, ^$#oset);

axiom $function_arg_type(cf#rsrtl_reach, 1, $ptr_to(^s_node));

procedure rsrtl_reach(SP#hd: $ptr) returns ($result: $oset);
  ensures ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result)) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result == $oset_empty());
  free ensures $result == F#rsrtl_reach($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_keys(#s: $state, SP#hd: $ptr) : $intset;

const unique cf#sll_keys: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll_keys(#s, SP#hd) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $intset_in($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node)), F#sll_keys(#s, SP#hd))) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#sll_keys(#s, SP#hd) == $intset_empty()));

axiom $function_arg_type(cf#sll_keys, 0, ^$#intset);

axiom $function_arg_type(cf#sll_keys, 1, $ptr_to(^s_node));

procedure sll_keys(SP#hd: $ptr) returns ($result: $intset);
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $intset_in($rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node)), $result);
  ensures $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result == $intset_empty();
  free ensures $result == F#sll_keys($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_min_key(#s: $state, SP#hd: $ptr) : int;

const unique cf#sll_min_key: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll_min_key(#s, SP#hd) } 1 < $decreases_level ==> $in_range_i4(F#sll_min_key(#s, SP#hd)) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> F#sll_min_key(#s, SP#hd) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node))));

axiom $function_arg_type(cf#sll_min_key, 0, ^^i4);

axiom $function_arg_type(cf#sll_min_key, 1, $ptr_to(^s_node));

procedure sll_min_key(SP#hd: $ptr) returns ($result: int);
  free ensures $in_range_i4($result);
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> $result == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node));
  free ensures $result == F#sll_min_key($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_max_key(#s: $state, SP#hd: $ptr) : int;

const unique cf#sll_max_key: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll_max_key(#s, SP#hd) } 1 < $decreases_level ==> $in_range_i4(F#sll_max_key(#s, SP#hd)) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> F#sll_max_key(#s, SP#hd) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node))));

axiom $function_arg_type(cf#sll_max_key, 0, ^^i4);

axiom $function_arg_type(cf#sll_max_key, 1, $ptr_to(^s_node));

procedure sll_max_key(SP#hd: $ptr) returns ($result: int);
  free ensures $in_range_i4($result);
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> $result == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node));
  free ensures $result == F#sll_max_key($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_list_len_next(#s: $state, SP#x: $ptr) : int;

const unique cf#sll_list_len_next: $pure_function;

axiom (forall #s: $state, SP#x: $ptr :: { F#sll_list_len_next(#s, SP#x) } 1 < $decreases_level ==> $in_range_nat(F#sll_list_len_next(#s, SP#x)) && ($non_null($phys_ptr_cast(SP#x, ^s_node)) ==> F#sll_list_len_next(#s, SP#x) > 0) && ($is_null($phys_ptr_cast(SP#x, ^s_node)) ==> F#sll_list_len_next(#s, SP#x) == 0));

axiom $function_arg_type(cf#sll_list_len_next, 0, ^^nat);

axiom $function_arg_type(cf#sll_list_len_next, 1, $ptr_to(^s_node));

procedure sll_list_len_next(SP#x: $ptr) returns ($result: int);
  free ensures $in_range_nat($result);
  ensures $non_null($phys_ptr_cast(SP#x, ^s_node)) ==> $result > 0;
  ensures $is_null($phys_ptr_cast(SP#x, ^s_node)) ==> $result == 0;
  free ensures $result == F#sll_list_len_next($s, SP#x);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : bool;

const unique cf#sll_lseg: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg(#s, SP#hd, SP#tl) == F#sll(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg(#s, SP#hd, SP#tl)) && (F#sll_lseg(#s, SP#hd, SP#tl) ==> $oset_disjoint(F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)))) && (F#sll_lseg(#s, SP#hd, SP#tl) && F#sll(#s, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll(#s, $phys_ptr_cast(SP#hd, ^s_node)) && F#sll_reach(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $oset_union(F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_reach(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_keys(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $intset_union(F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_keys(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_list_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_list_len_next(#s, $phys_ptr_cast(SP#tl, ^s_node)))) && (F#sll_lseg(#s, SP#hd, SP#tl) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#hd, ^s_node) && !$oset_in($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node), F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node))) ==> F#sll_lseg(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $intset_singleton($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)))) && F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), 1)));

axiom $function_arg_type(cf#sll_lseg, 0, ^^bool);

axiom $function_arg_type(cf#sll_lseg, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg, 2, $ptr_to(^s_node));

procedure sll_lseg(SP#hd: $ptr, SP#tl: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result;
  ensures $result ==> $oset_disjoint(F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)));
  ensures $result && F#sll($s, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SP#hd, ^s_node)) && F#sll_reach($s, $phys_ptr_cast(SP#hd, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_reach($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_keys($s, $phys_ptr_cast(SP#hd, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_keys($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_list_len_next($s, $phys_ptr_cast(SP#hd, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_list_len_next($s, $phys_ptr_cast(SP#tl, ^s_node)));
  ensures $result && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#hd, ^s_node) && !$oset_in($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node), F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node))) ==> F#sll_lseg($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)))) && F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), 1);
  free ensures $result == F#sll_lseg($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#srtl_lseg(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : bool;

const unique cf#srtl_lseg: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#srtl_lseg(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl_lseg(#s, SP#hd, SP#tl) == F#srtl(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#srtl_lseg(#s, SP#hd, SP#tl)) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#srtl_lseg(#s, SP#hd, SP#tl)) && (F#srtl_lseg(#s, SP#hd, SP#tl) ==> $oset_disjoint(F#srtl_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)))) && (F#srtl_lseg(#s, SP#hd, SP#tl) && F#srtl(#s, $phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) <= F#sll_min_key(#s, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl(#s, $phys_ptr_cast(SP#hd, ^s_node)) && F#srtl_reach(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $oset_union(F#srtl_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#srtl_reach(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_keys(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $intset_union(F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_keys(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_list_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_list_len_next(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node)) == F#sll_lseg_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node)) == F#sll_max_key(#s, $phys_ptr_cast(SP#tl, ^s_node))) && (F#srtl_lseg(#s, SP#hd, SP#tl) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && !$oset_in($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node), F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) <= $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl_lseg(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#srtl_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $intset_singleton($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)))) && F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), 1) && F#sll_lseg_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == F#sll_lseg_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node))) && (F#srtl_lseg(#s, SP#hd, SP#tl) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> F#srtl_lseg(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#srtl_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_singleton($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == 1 && F#sll_lseg_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node))));

axiom $function_arg_type(cf#srtl_lseg, 0, ^^bool);

axiom $function_arg_type(cf#srtl_lseg, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#srtl_lseg, 2, $ptr_to(^s_node));

procedure srtl_lseg(SP#hd: $ptr, SP#tl: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#srtl($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result;
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result;
  ensures $result ==> $oset_disjoint(F#srtl_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)));
  ensures $result && F#srtl($s, $phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) <= F#sll_min_key($s, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SP#hd, ^s_node)) && F#srtl_reach($s, $phys_ptr_cast(SP#hd, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#srtl_reach($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_keys($s, $phys_ptr_cast(SP#hd, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_keys($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_list_len_next($s, $phys_ptr_cast(SP#hd, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_list_len_next($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_min_key($s, $phys_ptr_cast(SP#hd, ^s_node)) == F#sll_lseg_min_key($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_max_key($s, $phys_ptr_cast(SP#hd, ^s_node)) == F#sll_max_key($s, $phys_ptr_cast(SP#tl, ^s_node));
  ensures $result && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && !$oset_in($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node), F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_max_key($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) <= $rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl_lseg($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#srtl_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)))) && F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), 1) && F#sll_lseg_min_key($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == F#sll_lseg_min_key($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node));
  ensures $result && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#srtl_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == 1 && F#sll_lseg_min_key($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node));
  free ensures $result == F#srtl_lseg($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_reach(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : $oset;

const unique cf#sll_lseg_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_reach(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_reach(#s, SP#hd, SP#tl) == F#sll_reach(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_reach(#s, SP#hd, SP#tl) == $oset_empty()) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#sll_lseg_reach(#s, SP#hd, SP#tl))));

axiom $function_arg_type(cf#sll_lseg_reach, 0, ^$#oset);

axiom $function_arg_type(cf#sll_lseg_reach, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_reach, 2, $ptr_to(^s_node));

procedure sll_lseg_reach(SP#hd: $ptr, SP#tl: $ptr) returns ($result: $oset);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_reach($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $oset_empty();
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result);
  free ensures $result == F#sll_lseg_reach($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#srtl_lseg_reach(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : $oset;

const unique cf#srtl_lseg_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#srtl_lseg_reach(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl_lseg_reach(#s, SP#hd, SP#tl) == F#srtl_reach(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#srtl_lseg_reach(#s, SP#hd, SP#tl) == $oset_empty()) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#srtl_lseg_reach(#s, SP#hd, SP#tl))));

axiom $function_arg_type(cf#srtl_lseg_reach, 0, ^$#oset);

axiom $function_arg_type(cf#srtl_lseg_reach, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#srtl_lseg_reach, 2, $ptr_to(^s_node));

procedure srtl_lseg_reach(SP#hd: $ptr, SP#tl: $ptr) returns ($result: $oset);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#srtl_reach($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $oset_empty();
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result);
  free ensures $result == F#srtl_lseg_reach($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_keys(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : $intset;

const unique cf#sll_lseg_keys: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_keys(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_keys(#s, SP#hd, SP#tl) == F#sll_keys(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_keys(#s, SP#hd, SP#tl) == $intset_empty()) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $intset_in($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node)), F#sll_lseg_keys(#s, SP#hd, SP#tl))));

axiom $function_arg_type(cf#sll_lseg_keys, 0, ^$#intset);

axiom $function_arg_type(cf#sll_lseg_keys, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_keys, 2, $ptr_to(^s_node));

procedure sll_lseg_keys(SP#hd: $ptr, SP#tl: $ptr) returns ($result: $intset);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_keys($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $intset_empty();
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $intset_in($rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node)), $result);
  free ensures $result == F#sll_lseg_keys($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_min_key(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : int;

const unique cf#sll_lseg_min_key: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_min_key(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> $in_range_i4(F#sll_lseg_min_key(#s, SP#hd, SP#tl)) && ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_min_key(#s, SP#hd, SP#tl) == F#sll_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_min_key(#s, SP#hd, SP#tl) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node))));

axiom $function_arg_type(cf#sll_lseg_min_key, 0, ^^i4);

axiom $function_arg_type(cf#sll_lseg_min_key, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_min_key, 2, $ptr_to(^s_node));

procedure sll_lseg_min_key(SP#hd: $ptr, SP#tl: $ptr) returns ($result: int);
  free ensures $in_range_i4($result);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_min_key($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node));
  free ensures $result == F#sll_lseg_min_key($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_max_key(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : int;

const unique cf#sll_lseg_max_key: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_max_key(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> $in_range_i4(F#sll_lseg_max_key(#s, SP#hd, SP#tl)) && ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_max_key(#s, SP#hd, SP#tl) == F#sll_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_max_key(#s, SP#hd, SP#tl) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node))));

axiom $function_arg_type(cf#sll_lseg_max_key, 0, ^^i4);

axiom $function_arg_type(cf#sll_lseg_max_key, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_max_key, 2, $ptr_to(^s_node));

procedure sll_lseg_max_key(SP#hd: $ptr, SP#tl: $ptr) returns ($result: int);
  free ensures $in_range_i4($result);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_max_key($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node));
  free ensures $result == F#sll_lseg_max_key($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_len_next(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : int;

const unique cf#sll_lseg_len_next: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_len_next(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> $in_range_nat(F#sll_lseg_len_next(#s, SP#hd, SP#tl)) && ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_len_next(#s, SP#hd, SP#tl) == F#sll_list_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_len_next(#s, SP#hd, SP#tl) == 0) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_len_next(#s, SP#hd, SP#tl) > 0));

axiom $function_arg_type(cf#sll_lseg_len_next, 0, ^^nat);

axiom $function_arg_type(cf#sll_lseg_len_next, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_len_next, 2, $ptr_to(^s_node));

procedure sll_lseg_len_next(SP#hd: $ptr, SP#tl: $ptr) returns ($result: int);
  free ensures $in_range_nat($result);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_list_len_next($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == 0;
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $result > 0;
  free ensures $result == F#sll_lseg_len_next($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



procedure g_slist_sort_merge(P#l1: $ptr, P#l2: $ptr) returns ($result: $ptr);
  requires F#srtl($s, $phys_ptr_cast(P#l1, ^s_node));
  requires F#srtl($s, $phys_ptr_cast(P#l2, ^s_node));
  requires $oset_disjoint(F#srtl_reach($s, $phys_ptr_cast(P#l1, ^s_node)), F#srtl_reach($s, $phys_ptr_cast(P#l2, ^s_node)));
  modifies $s, $cev_pc;
  ensures F#srtl($s, $phys_ptr_cast($result, ^s_node));
  free ensures $writes_nothing(old($s), $s);
  free ensures $call_transition(old($s), $s);



implementation g_slist_sort_merge(P#l1: $ptr, P#l2: $ptr) returns ($result: $ptr)
{
  var stmtexpr1#21: $state;
  var _dryad_S7#7: $state;
  var stmtexpr0#20: $state;
  var _dryad_S6#6: $state;
  var stmtexpr1#19: $state;
  var _dryad_S7#5: $state;
  var stmtexpr0#18: $state;
  var _dryad_S6#4: $state;
  var stmtexpr2#17: $state;
  var _dryad_S7#3: $state;
  var stmtexpr1#16: $state;
  var _dryad_S6#2: $state;
  var stmtexpr0#15: $ptr;
  var SL#l3: $ptr;
  var stmtexpr2#14: $ptr;
  var SL#l24: $ptr;
  var stmtexpr1#13: $state;
  var _dryad_S7#1: $state;
  var stmtexpr0#12: $state;
  var _dryad_S6#0: $state;
  var stmtexpr2#11: $ptr;
  var SL#l14: $ptr;
  var stmtexpr1#10: $state;
  var SL#_dryad_S7: $state;
  var stmtexpr0#9: $state;
  var SL#_dryad_S6: $state;
  var ite#1: bool;
  var loopState#0: $state;
  var stmtexpr9#31: $ptr;
  var SL#list2: $ptr;
  var stmtexpr8#30: $state;
  var SL#_dryad_S5: $state;
  var stmtexpr7#29: $state;
  var SL#_dryad_S4: $state;
  var stmtexpr6#28: $state;
  var SL#_dryad_S3: $state;
  var stmtexpr5#27: $state;
  var SL#_dryad_S2: $state;
  var stmtexpr4#26: $state;
  var SL#_dryad_S1: $state;
  var stmtexpr3#25: $oset;
  var stmtexpr2#24: $state;
  var SL#_dryad_S0: $state;
  var res_sll_reach#8: $oset;
  var res_sll_reach#7: $oset;
  var res_sll_keys#6: $intset;
  var res_sll_keys#5: $intset;
  var SL#k1: $intset;
  var SL#k2: $intset;
  var SL#init_sll_keys: $intset;
  var SL#INIT_REACH: $oset;
  var L#list: $ptr;
  var L#l: $ptr;
  var L#list_next: $ptr;
  var stmtexpr1#23: $oset;
  var stmtexpr0#22: $oset;
  var res_srtl_reach#4: $oset;
  var res_srtl_reach#3: $oset;
  var SL#_dryad_G1: $oset;
  var SL#_dryad_G0: $oset;
  var local.l1: $ptr;
  var local.l2: $ptr;
  var #wrTime$3^3.3: int;
  var #stackframe: int;

// INV:PTR: P#l1, P#l2, L#list, L#l, L#list_next, local.l1, local.l2
// INV:INT:
// INV:LST: srtl

  anon9:
    assume $function_entry($s);
    assume $full_stop_ext(#tok$3^3.3, $s);
    assume $can_use_all_frame_axioms($s);
    assume #wrTime$3^3.3 == $current_timestamp($s);
    assume $def_writes($s, #wrTime$3^3.3, (lambda #p: $ptr :: false));
    // assume true
    // assume true
    // assume @decreases_level_is(2147483647); 
    assume 2147483647 == $decreases_level;
    // struct s_node* local.l2; 
    // local.l2 := l2; 
    local.l2 := $phys_ptr_cast(P#l2, ^s_node);
    // struct s_node* local.l1; 
    // local.l1 := l1; 
    local.l1 := $phys_ptr_cast(P#l1, ^s_node);
    // assume ==(-2147483648, unchecked-(unchecked-(0, 2147483647), 1)); 
    assume -2147483648 == $unchk_sub(^^i4, $unchk_sub(^^i4, 0, 2147483647), 1);
    // assume true
    //  --- Dryad annotated function --- 
    // _math \oset _dryad_G0; 
    // _math \oset _dryad_G1; 
    // _math \oset res_srtl_reach#3; 
    // res_srtl_reach#3 := srtl_reach(local.l1); 
    call res_srtl_reach#3 := srtl_reach($phys_ptr_cast(local.l1, ^s_node));
    assume $full_stop_ext(#tok$4^0.0, $s);
    // _math \oset res_srtl_reach#4; 
    // res_srtl_reach#4 := srtl_reach(local.l2); 
    call res_srtl_reach#4 := srtl_reach($phys_ptr_cast(local.l2, ^s_node));
    assume $full_stop_ext(#tok$4^0.0, $s);
    // _dryad_G0 := @_vcc_oset_union(res_srtl_reach#3, res_srtl_reach#4); 
    SL#_dryad_G0 := $oset_union(res_srtl_reach#3, res_srtl_reach#4);
    // _math \oset stmtexpr0#22; 
    // stmtexpr0#22 := _dryad_G0; 
    stmtexpr0#22 := SL#_dryad_G0;
    // _dryad_G1 := _dryad_G0; 
    SL#_dryad_G1 := SL#_dryad_G0;
    // _math \oset stmtexpr1#23; 
    // stmtexpr1#23 := _dryad_G1; 
    stmtexpr1#23 := SL#_dryad_G1;
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // struct s_node* list_next; 
    // struct s_node* l; 
    // struct s_node* list; 
    // _math \oset INIT_REACH; 
    // _math \intset init_sll_keys; 
    // _math \intset k2; 
    // _math \intset k1; 
    // k1 := sll_keys(local.l1); 
    call SL#k1 := sll_keys($phys_ptr_cast(local.l1, ^s_node));
    assume $full_stop_ext(#tok$3^10.23, $s);
    // k2 := sll_keys(local.l2); 
    call SL#k2 := sll_keys($phys_ptr_cast(local.l2, ^s_node));
    assume $full_stop_ext(#tok$3^11.23, $s);
    // _math \intset res_sll_keys#5; 
    // res_sll_keys#5 := sll_keys(local.l1); 
    call res_sll_keys#5 := sll_keys($phys_ptr_cast(local.l1, ^s_node));
    assume $full_stop_ext(#tok$3^12.48, $s);
    // _math \intset res_sll_keys#6; 
    // res_sll_keys#6 := sll_keys(local.l2); 
    call res_sll_keys#6 := sll_keys($phys_ptr_cast(local.l2, ^s_node));
    assume $full_stop_ext(#tok$3^12.62, $s);
    // init_sll_keys := @_vcc_intset_union(res_sll_keys#5, res_sll_keys#6); 
    SL#init_sll_keys := $intset_union(res_sll_keys#5, res_sll_keys#6);
    // _math \oset res_sll_reach#7; 
    // res_sll_reach#7 := sll_reach(local.l1); 
    call res_sll_reach#7 := sll_reach($phys_ptr_cast(local.l1, ^s_node));
    assume $full_stop_ext(#tok$3^13.41, $s);
    // _math \oset res_sll_reach#8; 
    // res_sll_reach#8 := sll_reach(local.l2); 
    call res_sll_reach#8 := sll_reach($phys_ptr_cast(local.l2, ^s_node));
    assume $full_stop_ext(#tok$3^13.56, $s);
    // INIT_REACH := @_vcc_oset_union(res_sll_reach#7, res_sll_reach#8); 
    SL#INIT_REACH := $oset_union(res_sll_reach#7, res_sll_reach#8);
    // var struct s_node* list
    // var struct s_node* l
    // assume &&(==>(@_vcc_ptr_neq_null(local.l1), &&(@_vcc_mutable(@state, local.l1), @writes_check(local.l1))), ==>(@_vcc_ptr_neq_null(local.l2), &&(@_vcc_mutable(@state, local.l2), @writes_check(local.l2)))); 
    assume ($non_null($phys_ptr_cast(local.l1, ^s_node)) ==> $mutable($s, $phys_ptr_cast(local.l1, ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(local.l1, ^s_node))) && ($non_null($phys_ptr_cast(local.l2, ^s_node)) ==> $mutable($s, $phys_ptr_cast(local.l2, ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(local.l2, ^s_node)));
    // _math \state _dryad_S0; 
    // _dryad_S0 := @_vcc_current_state(@state); 
    SL#_dryad_S0 := $current_state($s);
    // _math \state stmtexpr2#24; 
    // stmtexpr2#24 := _dryad_S0; 
    stmtexpr2#24 := SL#_dryad_S0;
    // list := _vcc_alloc(@_vcc_typeof((struct s_node*)@null)); 
    call L#list := $alloc(^s_node);
    assume $full_stop_ext(#tok$3^18.9, $s);
    // assume !(@_vcc_oset_in(list, @_vcc_oset_union(_dryad_G0, _dryad_G1))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), $oset_union(SL#_dryad_G0, SL#_dryad_G1));
    // _dryad_G1 := @_vcc_oset_union(_dryad_G0, @_vcc_oset_singleton(list)); 
    SL#_dryad_G1 := $oset_union(SL#_dryad_G0, $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // _math \oset stmtexpr3#25; 
    // stmtexpr3#25 := _dryad_G1; 
    stmtexpr3#25 := SL#_dryad_G1;
    // assume ==(glob_reach(), _dryad_G1); 
    assume F#glob_reach() == SL#_dryad_G1;
    // _math \state _dryad_S1; 
    // _dryad_S1 := @_vcc_current_state(@state); 
    SL#_dryad_S1 := $current_state($s);
    // _math \state stmtexpr4#26; 
    // stmtexpr4#26 := _dryad_S1; 
    stmtexpr4#26 := SL#_dryad_S1;
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(l)))), ==(old(_dryad_S0, sll_keys(l)), old(_dryad_S1, sll_keys(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(l)))), ==(old(_dryad_S0, sll_list_len_next(l)), old(_dryad_S1, sll_list_len_next(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, rsrtl_reach(l)))), ==(old(_dryad_S0, rsrtl(l)), old(_dryad_S1, rsrtl(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node))) ==> F#rsrtl(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node)) == F#rsrtl(SL#_dryad_S1, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, rsrtl_reach(l)))), ==(old(_dryad_S0, rsrtl_reach(l)), old(_dryad_S1, rsrtl_reach(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node)) == F#rsrtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(l)))), ==(old(_dryad_S0, sll(l)), old(_dryad_S1, sll(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(l)))), ==(old(_dryad_S0, sll_reach(l)), old(_dryad_S1, sll_reach(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(l)))), ==(old(_dryad_S0, sll_max_key(l)), old(_dryad_S1, sll_max_key(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_max_key(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node)) == F#sll_max_key(SL#_dryad_S1, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(l)))), ==(old(_dryad_S0, sll_min_key(l)), old(_dryad_S1, sll_min_key(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_min_key(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node)) == F#sll_min_key(SL#_dryad_S1, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, srtl_reach(l)))), ==(old(_dryad_S0, srtl(l)), old(_dryad_S1, srtl(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node)) == F#srtl(SL#_dryad_S1, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, srtl_reach(l)))), ==(old(_dryad_S0, srtl_reach(l)), old(_dryad_S1, srtl_reach(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node)) == F#srtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(list_next)))), ==(old(_dryad_S0, sll_keys(list_next)), old(_dryad_S1, sll_keys(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(list_next)))), ==(old(_dryad_S0, sll_list_len_next(list_next)), old(_dryad_S1, sll_list_len_next(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, rsrtl_reach(list_next)))), ==(old(_dryad_S0, rsrtl(list_next)), old(_dryad_S1, rsrtl(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl(SL#_dryad_S1, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, rsrtl_reach(list_next)))), ==(old(_dryad_S0, rsrtl_reach(list_next)), old(_dryad_S1, rsrtl_reach(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(list_next)))), ==(old(_dryad_S0, sll(list_next)), old(_dryad_S1, sll(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(list_next)))), ==(old(_dryad_S0, sll_reach(list_next)), old(_dryad_S1, sll_reach(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(list_next)))), ==(old(_dryad_S0, sll_max_key(list_next)), old(_dryad_S1, sll_max_key(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_max_key(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_max_key(SL#_dryad_S1, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(list_next)))), ==(old(_dryad_S0, sll_min_key(list_next)), old(_dryad_S1, sll_min_key(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_min_key(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_min_key(SL#_dryad_S1, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, srtl_reach(list_next)))), ==(old(_dryad_S0, srtl(list_next)), old(_dryad_S1, srtl(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl(SL#_dryad_S1, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, srtl_reach(list_next)))), ==(old(_dryad_S0, srtl_reach(list_next)), old(_dryad_S1, srtl_reach(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(local.l2)))), ==(old(_dryad_S0, sll_keys(local.l2)), old(_dryad_S1, sll_keys(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(local.l2)))), ==(old(_dryad_S0, sll_list_len_next(local.l2)), old(_dryad_S1, sll_list_len_next(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, rsrtl_reach(local.l2)))), ==(old(_dryad_S0, rsrtl(local.l2)), old(_dryad_S1, rsrtl(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl(SL#_dryad_S1, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, rsrtl_reach(local.l2)))), ==(old(_dryad_S0, rsrtl_reach(local.l2)), old(_dryad_S1, rsrtl_reach(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl_reach(SL#_dryad_S1, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(local.l2)))), ==(old(_dryad_S0, sll(local.l2)), old(_dryad_S1, sll(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(local.l2)))), ==(old(_dryad_S0, sll_reach(local.l2)), old(_dryad_S1, sll_reach(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(local.l2)))), ==(old(_dryad_S0, sll_max_key(local.l2)), old(_dryad_S1, sll_max_key(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_max_key(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_max_key(SL#_dryad_S1, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(local.l2)))), ==(old(_dryad_S0, sll_min_key(local.l2)), old(_dryad_S1, sll_min_key(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_min_key(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_min_key(SL#_dryad_S1, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, srtl_reach(local.l2)))), ==(old(_dryad_S0, srtl(local.l2)), old(_dryad_S1, srtl(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl(SL#_dryad_S1, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, srtl_reach(local.l2)))), ==(old(_dryad_S0, srtl_reach(local.l2)), old(_dryad_S1, srtl_reach(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl_reach(SL#_dryad_S1, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(local.l1)))), ==(old(_dryad_S0, sll_keys(local.l1)), old(_dryad_S1, sll_keys(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(local.l1)))), ==(old(_dryad_S0, sll_list_len_next(local.l1)), old(_dryad_S1, sll_list_len_next(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, rsrtl_reach(local.l1)))), ==(old(_dryad_S0, rsrtl(local.l1)), old(_dryad_S1, rsrtl(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl(SL#_dryad_S1, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, rsrtl_reach(local.l1)))), ==(old(_dryad_S0, rsrtl_reach(local.l1)), old(_dryad_S1, rsrtl_reach(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl_reach(SL#_dryad_S1, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(local.l1)))), ==(old(_dryad_S0, sll(local.l1)), old(_dryad_S1, sll(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(local.l1)))), ==(old(_dryad_S0, sll_reach(local.l1)), old(_dryad_S1, sll_reach(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(local.l1)))), ==(old(_dryad_S0, sll_max_key(local.l1)), old(_dryad_S1, sll_max_key(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_max_key(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_max_key(SL#_dryad_S1, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(local.l1)))), ==(old(_dryad_S0, sll_min_key(local.l1)), old(_dryad_S1, sll_min_key(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_min_key(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_min_key(SL#_dryad_S1, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, srtl_reach(local.l1)))), ==(old(_dryad_S0, srtl(local.l1)), old(_dryad_S1, srtl(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl(SL#_dryad_S1, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, srtl_reach(local.l1)))), ==(old(_dryad_S0, srtl_reach(local.l1)), old(_dryad_S1, srtl_reach(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl_reach(SL#_dryad_S1, $phys_ptr_cast(local.l1, ^s_node));
    // assume @_vcc_ptr_neq_null(list); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node));
    // _math \state _dryad_S2; 
    // _dryad_S2 := @_vcc_current_state(@state); 
    SL#_dryad_S2 := $current_state($s);
    // _math \state stmtexpr5#27; 
    // stmtexpr5#27 := _dryad_S2; 
    stmtexpr5#27 := SL#_dryad_S2;
    // assert @prim_writes_check((list->key)); 
    assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#list, ^s_node), s_node.key));
    // *(list->key) := -2147483648; 
    call $write_int(s_node.key, $phys_ptr_cast(L#list, ^s_node), -2147483648);
    assume $full_stop_ext(#tok$3^26.2, $s);
    // _math \state _dryad_S3; 
    // _dryad_S3 := @_vcc_current_state(@state); 
    SL#_dryad_S3 := $current_state($s);
    // _math \state stmtexpr6#28; 
    // stmtexpr6#28 := _dryad_S3; 
    stmtexpr6#28 := SL#_dryad_S3;
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(*((list->next)))))), ==(old(_dryad_S2, sll_keys(*((list->next)))), old(_dryad_S3, sll_keys(*((list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) == F#sll_keys(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(*((list->next)))))), ==(old(_dryad_S2, sll_list_len_next(*((list->next)))), old(_dryad_S3, sll_list_len_next(*((list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, rsrtl_reach(*((list->next)))))), ==(old(_dryad_S2, rsrtl(*((list->next)))), old(_dryad_S3, rsrtl(*((list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) == F#rsrtl(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, rsrtl_reach(*((list->next)))))), ==(old(_dryad_S2, rsrtl_reach(*((list->next)))), old(_dryad_S3, rsrtl_reach(*((list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(*((list->next)))))), ==(old(_dryad_S2, sll(*((list->next)))), old(_dryad_S3, sll(*((list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) ==> F#sll(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) == F#sll(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(*((list->next)))))), ==(old(_dryad_S2, sll_reach(*((list->next)))), old(_dryad_S3, sll_reach(*((list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) == F#sll_reach(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(*((list->next)))))), ==(old(_dryad_S2, sll_max_key(*((list->next)))), old(_dryad_S3, sll_max_key(*((list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) == F#sll_max_key(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(*((list->next)))))), ==(old(_dryad_S2, sll_min_key(*((list->next)))), old(_dryad_S3, sll_min_key(*((list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) == F#sll_min_key(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, srtl_reach(*((list->next)))))), ==(old(_dryad_S2, srtl(*((list->next)))), old(_dryad_S3, srtl(*((list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) ==> F#srtl(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) == F#srtl(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, srtl_reach(*((list->next)))))), ==(old(_dryad_S2, srtl_reach(*((list->next)))), old(_dryad_S3, srtl_reach(*((list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) == F#srtl_reach(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node));
    // assume ==(old(_dryad_S2, sll_list_len_next(list)), old(_dryad_S3, sll_list_len_next(list))); 
    assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#list, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#list, ^s_node));
    // assume ==(old(_dryad_S2, rsrtl_reach(list)), old(_dryad_S3, rsrtl_reach(list))); 
    assume F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#list, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#list, ^s_node));
    // assume ==(old(_dryad_S2, sll(list)), old(_dryad_S3, sll(list))); 
    assume F#sll(SL#_dryad_S2, $phys_ptr_cast(L#list, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#list, ^s_node));
    // assume ==(old(_dryad_S2, sll_reach(list)), old(_dryad_S3, sll_reach(list))); 
    assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#list, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#list, ^s_node));
    // assume ==(old(_dryad_S2, srtl_reach(list)), old(_dryad_S3, srtl_reach(list))); 
    assume F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#list, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#list, ^s_node));
    // assume ==(old(_dryad_S2, sll_list_len_next(l)), old(_dryad_S3, sll_list_len_next(l))); 
    assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==(old(_dryad_S2, rsrtl_reach(l)), old(_dryad_S3, rsrtl_reach(l))); 
    assume F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==(old(_dryad_S2, sll(l)), old(_dryad_S3, sll(l))); 
    assume F#sll(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==(old(_dryad_S2, sll_reach(l)), old(_dryad_S3, sll_reach(l))); 
    assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==(old(_dryad_S2, srtl_reach(l)), old(_dryad_S3, srtl_reach(l))); 
    assume F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==(old(_dryad_S2, sll_list_len_next(list_next)), old(_dryad_S3, sll_list_len_next(list_next))); 
    assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==(old(_dryad_S2, rsrtl_reach(list_next)), old(_dryad_S3, rsrtl_reach(list_next))); 
    assume F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==(old(_dryad_S2, sll(list_next)), old(_dryad_S3, sll(list_next))); 
    assume F#sll(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==(old(_dryad_S2, sll_reach(list_next)), old(_dryad_S3, sll_reach(list_next))); 
    assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==(old(_dryad_S2, srtl_reach(list_next)), old(_dryad_S3, srtl_reach(list_next))); 
    assume F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==(old(_dryad_S2, sll_list_len_next(local.l2)), old(_dryad_S3, sll_list_len_next(local.l2))); 
    assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==(old(_dryad_S2, rsrtl_reach(local.l2)), old(_dryad_S3, rsrtl_reach(local.l2))); 
    assume F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==(old(_dryad_S2, sll(local.l2)), old(_dryad_S3, sll(local.l2))); 
    assume F#sll(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==(old(_dryad_S2, sll_reach(local.l2)), old(_dryad_S3, sll_reach(local.l2))); 
    assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==(old(_dryad_S2, srtl_reach(local.l2)), old(_dryad_S3, srtl_reach(local.l2))); 
    assume F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==(old(_dryad_S2, sll_list_len_next(local.l1)), old(_dryad_S3, sll_list_len_next(local.l1))); 
    assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==(old(_dryad_S2, rsrtl_reach(local.l1)), old(_dryad_S3, rsrtl_reach(local.l1))); 
    assume F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==(old(_dryad_S2, sll(local.l1)), old(_dryad_S3, sll(local.l1))); 
    assume F#sll(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==(old(_dryad_S2, sll_reach(local.l1)), old(_dryad_S3, sll_reach(local.l1))); 
    assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==(old(_dryad_S2, srtl_reach(local.l1)), old(_dryad_S3, srtl_reach(local.l1))); 
    assume F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(l)))), ==(old(_dryad_S2, sll_keys(l)), old(_dryad_S3, sll_keys(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(l)))), ==(old(_dryad_S2, sll_list_len_next(l)), old(_dryad_S3, sll_list_len_next(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, rsrtl_reach(l)))), ==(old(_dryad_S2, rsrtl(l)), old(_dryad_S3, rsrtl(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#rsrtl(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, rsrtl_reach(l)))), ==(old(_dryad_S2, rsrtl_reach(l)), old(_dryad_S3, rsrtl_reach(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(l)))), ==(old(_dryad_S2, sll(l)), old(_dryad_S3, sll(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(l)))), ==(old(_dryad_S2, sll_reach(l)), old(_dryad_S3, sll_reach(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(l)))), ==(old(_dryad_S2, sll_max_key(l)), old(_dryad_S3, sll_max_key(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#sll_max_key(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(l)))), ==(old(_dryad_S2, sll_min_key(l)), old(_dryad_S3, sll_min_key(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#sll_min_key(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, srtl_reach(l)))), ==(old(_dryad_S2, srtl(l)), old(_dryad_S3, srtl(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#srtl(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, srtl_reach(l)))), ==(old(_dryad_S2, srtl_reach(l)), old(_dryad_S3, srtl_reach(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(list_next)))), ==(old(_dryad_S2, sll_keys(list_next)), old(_dryad_S3, sll_keys(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(list_next)))), ==(old(_dryad_S2, sll_list_len_next(list_next)), old(_dryad_S3, sll_list_len_next(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, rsrtl_reach(list_next)))), ==(old(_dryad_S2, rsrtl(list_next)), old(_dryad_S3, rsrtl(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, rsrtl_reach(list_next)))), ==(old(_dryad_S2, rsrtl_reach(list_next)), old(_dryad_S3, rsrtl_reach(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(list_next)))), ==(old(_dryad_S2, sll(list_next)), old(_dryad_S3, sll(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(list_next)))), ==(old(_dryad_S2, sll_reach(list_next)), old(_dryad_S3, sll_reach(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(list_next)))), ==(old(_dryad_S2, sll_max_key(list_next)), old(_dryad_S3, sll_max_key(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_max_key(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(list_next)))), ==(old(_dryad_S2, sll_min_key(list_next)), old(_dryad_S3, sll_min_key(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_min_key(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, srtl_reach(list_next)))), ==(old(_dryad_S2, srtl(list_next)), old(_dryad_S3, srtl(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, srtl_reach(list_next)))), ==(old(_dryad_S2, srtl_reach(list_next)), old(_dryad_S3, srtl_reach(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(local.l2)))), ==(old(_dryad_S2, sll_keys(local.l2)), old(_dryad_S3, sll_keys(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(local.l2)))), ==(old(_dryad_S2, sll_list_len_next(local.l2)), old(_dryad_S3, sll_list_len_next(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, rsrtl_reach(local.l2)))), ==(old(_dryad_S2, rsrtl(local.l2)), old(_dryad_S3, rsrtl(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, rsrtl_reach(local.l2)))), ==(old(_dryad_S2, rsrtl_reach(local.l2)), old(_dryad_S3, rsrtl_reach(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(local.l2)))), ==(old(_dryad_S2, sll(local.l2)), old(_dryad_S3, sll(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(local.l2)))), ==(old(_dryad_S2, sll_reach(local.l2)), old(_dryad_S3, sll_reach(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(local.l2)))), ==(old(_dryad_S2, sll_max_key(local.l2)), old(_dryad_S3, sll_max_key(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_max_key(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(local.l2)))), ==(old(_dryad_S2, sll_min_key(local.l2)), old(_dryad_S3, sll_min_key(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_min_key(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, srtl_reach(local.l2)))), ==(old(_dryad_S2, srtl(local.l2)), old(_dryad_S3, srtl(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, srtl_reach(local.l2)))), ==(old(_dryad_S2, srtl_reach(local.l2)), old(_dryad_S3, srtl_reach(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(local.l1)))), ==(old(_dryad_S2, sll_keys(local.l1)), old(_dryad_S3, sll_keys(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(local.l1)))), ==(old(_dryad_S2, sll_list_len_next(local.l1)), old(_dryad_S3, sll_list_len_next(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, rsrtl_reach(local.l1)))), ==(old(_dryad_S2, rsrtl(local.l1)), old(_dryad_S3, rsrtl(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, rsrtl_reach(local.l1)))), ==(old(_dryad_S2, rsrtl_reach(local.l1)), old(_dryad_S3, rsrtl_reach(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(local.l1)))), ==(old(_dryad_S2, sll(local.l1)), old(_dryad_S3, sll(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(local.l1)))), ==(old(_dryad_S2, sll_reach(local.l1)), old(_dryad_S3, sll_reach(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(local.l1)))), ==(old(_dryad_S2, sll_max_key(local.l1)), old(_dryad_S3, sll_max_key(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_max_key(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(local.l1)))), ==(old(_dryad_S2, sll_min_key(local.l1)), old(_dryad_S3, sll_min_key(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_min_key(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, srtl_reach(local.l1)))), ==(old(_dryad_S2, srtl(local.l1)), old(_dryad_S3, srtl(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, srtl_reach(local.l1)))), ==(old(_dryad_S2, srtl_reach(local.l1)), old(_dryad_S3, srtl_reach(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(list, l)), ==(*((l->key)), old(_dryad_S2, *((l->key))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(L#l, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(list, l)), @_vcc_ptr_eq_pure(*((l->next)), old(_dryad_S2, *((l->next))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(L#l, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(list, list_next)), ==(*((list_next->key)), old(_dryad_S2, *((list_next->key))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(list, list_next)), @_vcc_ptr_eq_pure(*((list_next->next)), old(_dryad_S2, *((list_next->next))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(list, local.l2)), ==(*((local.l2->key)), old(_dryad_S2, *((local.l2->key))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(list, local.l2)), @_vcc_ptr_eq_pure(*((local.l2->next)), old(_dryad_S2, *((local.l2->next))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(list, local.l1)), ==(*((local.l1->key)), old(_dryad_S2, *((local.l1->key))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(list, local.l1)), @_vcc_ptr_eq_pure(*((local.l1->next)), old(_dryad_S2, *((local.l1->next))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node);
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // _math \state _dryad_S4; 
    // _dryad_S4 := @_vcc_current_state(@state); 
    SL#_dryad_S4 := $current_state($s);
    // _math \state stmtexpr7#29; 
    // stmtexpr7#29 := _dryad_S4; 
    stmtexpr7#29 := SL#_dryad_S4;
    // assert @prim_writes_check((list->next)); 
    assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#list, ^s_node), s_node.next));
    // *(list->next) := (struct s_node*)@null; 
    call $write_int(s_node.next, $phys_ptr_cast(L#list, ^s_node), $ptr_to_int($phys_ptr_cast($null, ^s_node)));
    assume $full_stop_ext(#tok$3^27.2, $s);
    // _math \state _dryad_S5; 
    // _dryad_S5 := @_vcc_current_state(@state); 
    SL#_dryad_S5 := $current_state($s);
    // _math \state stmtexpr8#30; 
    // stmtexpr8#30 := _dryad_S5; 
    stmtexpr8#30 := SL#_dryad_S5;
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(l)))), ==(old(_dryad_S4, sll_keys(l)), old(_dryad_S5, sll_keys(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(l)))), ==(old(_dryad_S4, sll_list_len_next(l)), old(_dryad_S5, sll_list_len_next(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, rsrtl_reach(l)))), ==(old(_dryad_S4, rsrtl(l)), old(_dryad_S5, rsrtl(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node))) ==> F#rsrtl(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node)) == F#rsrtl(SL#_dryad_S5, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, rsrtl_reach(l)))), ==(old(_dryad_S4, rsrtl_reach(l)), old(_dryad_S5, rsrtl_reach(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node)) == F#rsrtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(l)))), ==(old(_dryad_S4, sll(l)), old(_dryad_S5, sll(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(l)))), ==(old(_dryad_S4, sll_reach(l)), old(_dryad_S5, sll_reach(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(l)))), ==(old(_dryad_S4, sll_max_key(l)), old(_dryad_S5, sll_max_key(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_max_key(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node)) == F#sll_max_key(SL#_dryad_S5, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(l)))), ==(old(_dryad_S4, sll_min_key(l)), old(_dryad_S5, sll_min_key(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_min_key(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node)) == F#sll_min_key(SL#_dryad_S5, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, srtl_reach(l)))), ==(old(_dryad_S4, srtl(l)), old(_dryad_S5, srtl(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node)) == F#srtl(SL#_dryad_S5, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, srtl_reach(l)))), ==(old(_dryad_S4, srtl_reach(l)), old(_dryad_S5, srtl_reach(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node)) == F#srtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(list_next)))), ==(old(_dryad_S4, sll_keys(list_next)), old(_dryad_S5, sll_keys(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(list_next)))), ==(old(_dryad_S4, sll_list_len_next(list_next)), old(_dryad_S5, sll_list_len_next(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, rsrtl_reach(list_next)))), ==(old(_dryad_S4, rsrtl(list_next)), old(_dryad_S5, rsrtl(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl(SL#_dryad_S5, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, rsrtl_reach(list_next)))), ==(old(_dryad_S4, rsrtl_reach(list_next)), old(_dryad_S5, rsrtl_reach(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(list_next)))), ==(old(_dryad_S4, sll(list_next)), old(_dryad_S5, sll(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(list_next)))), ==(old(_dryad_S4, sll_reach(list_next)), old(_dryad_S5, sll_reach(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(list_next)))), ==(old(_dryad_S4, sll_max_key(list_next)), old(_dryad_S5, sll_max_key(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_max_key(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_max_key(SL#_dryad_S5, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(list_next)))), ==(old(_dryad_S4, sll_min_key(list_next)), old(_dryad_S5, sll_min_key(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_min_key(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_min_key(SL#_dryad_S5, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, srtl_reach(list_next)))), ==(old(_dryad_S4, srtl(list_next)), old(_dryad_S5, srtl(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl(SL#_dryad_S5, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, srtl_reach(list_next)))), ==(old(_dryad_S4, srtl_reach(list_next)), old(_dryad_S5, srtl_reach(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(local.l2)))), ==(old(_dryad_S4, sll_keys(local.l2)), old(_dryad_S5, sll_keys(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(local.l2)))), ==(old(_dryad_S4, sll_list_len_next(local.l2)), old(_dryad_S5, sll_list_len_next(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, rsrtl_reach(local.l2)))), ==(old(_dryad_S4, rsrtl(local.l2)), old(_dryad_S5, rsrtl(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl(SL#_dryad_S5, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, rsrtl_reach(local.l2)))), ==(old(_dryad_S4, rsrtl_reach(local.l2)), old(_dryad_S5, rsrtl_reach(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl_reach(SL#_dryad_S5, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(local.l2)))), ==(old(_dryad_S4, sll(local.l2)), old(_dryad_S5, sll(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(local.l2)))), ==(old(_dryad_S4, sll_reach(local.l2)), old(_dryad_S5, sll_reach(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(local.l2)))), ==(old(_dryad_S4, sll_max_key(local.l2)), old(_dryad_S5, sll_max_key(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_max_key(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_max_key(SL#_dryad_S5, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(local.l2)))), ==(old(_dryad_S4, sll_min_key(local.l2)), old(_dryad_S5, sll_min_key(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_min_key(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_min_key(SL#_dryad_S5, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, srtl_reach(local.l2)))), ==(old(_dryad_S4, srtl(local.l2)), old(_dryad_S5, srtl(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl(SL#_dryad_S5, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, srtl_reach(local.l2)))), ==(old(_dryad_S4, srtl_reach(local.l2)), old(_dryad_S5, srtl_reach(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl_reach(SL#_dryad_S5, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(local.l1)))), ==(old(_dryad_S4, sll_keys(local.l1)), old(_dryad_S5, sll_keys(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(local.l1)))), ==(old(_dryad_S4, sll_list_len_next(local.l1)), old(_dryad_S5, sll_list_len_next(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, rsrtl_reach(local.l1)))), ==(old(_dryad_S4, rsrtl(local.l1)), old(_dryad_S5, rsrtl(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl(SL#_dryad_S5, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, rsrtl_reach(local.l1)))), ==(old(_dryad_S4, rsrtl_reach(local.l1)), old(_dryad_S5, rsrtl_reach(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl_reach(SL#_dryad_S5, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(local.l1)))), ==(old(_dryad_S4, sll(local.l1)), old(_dryad_S5, sll(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(local.l1)))), ==(old(_dryad_S4, sll_reach(local.l1)), old(_dryad_S5, sll_reach(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(local.l1)))), ==(old(_dryad_S4, sll_max_key(local.l1)), old(_dryad_S5, sll_max_key(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_max_key(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_max_key(SL#_dryad_S5, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(local.l1)))), ==(old(_dryad_S4, sll_min_key(local.l1)), old(_dryad_S5, sll_min_key(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_min_key(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_min_key(SL#_dryad_S5, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, srtl_reach(local.l1)))), ==(old(_dryad_S4, srtl(local.l1)), old(_dryad_S5, srtl(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl(SL#_dryad_S5, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, srtl_reach(local.l1)))), ==(old(_dryad_S4, srtl_reach(local.l1)), old(_dryad_S5, srtl_reach(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl_reach(SL#_dryad_S5, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(list, l)), ==(*((l->key)), old(_dryad_S4, *((l->key))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(L#l, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(list, l)), @_vcc_ptr_eq_pure(*((l->next)), old(_dryad_S4, *((l->next))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(L#l, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(list, list_next)), ==(*((list_next->key)), old(_dryad_S4, *((list_next->key))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(list, list_next)), @_vcc_ptr_eq_pure(*((list_next->next)), old(_dryad_S4, *((list_next->next))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(list, local.l2)), ==(*((local.l2->key)), old(_dryad_S4, *((local.l2->key))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(list, local.l2)), @_vcc_ptr_eq_pure(*((local.l2->next)), old(_dryad_S4, *((local.l2->next))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(list, local.l1)), ==(*((local.l1->key)), old(_dryad_S4, *((local.l1->key))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(list, local.l1)), @_vcc_ptr_eq_pure(*((local.l1->next)), old(_dryad_S4, *((local.l1->next))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node);
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // l := list; 
    L#l := $phys_ptr_cast(L#list, ^s_node);
    // assert sll_lseg(list, list); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#list, ^s_node));
    // assume sll_lseg(list, list); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#list, ^s_node));
    // assert srtl_lseg(list, list); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#list, ^s_node));
    // assume srtl_lseg(list, list); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#list, ^s_node));
    // assert sll_lseg(l, l); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#l, ^s_node), $phys_ptr_cast(L#l, ^s_node));
    // assume sll_lseg(l, l); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#l, ^s_node), $phys_ptr_cast(L#l, ^s_node));
    // assert srtl_lseg(l, l); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#l, ^s_node), $phys_ptr_cast(L#l, ^s_node));
    // assume srtl_lseg(l, l); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#l, ^s_node), $phys_ptr_cast(L#l, ^s_node));
    // assert sll_lseg(list_next, list_next); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#list_next, ^s_node), $phys_ptr_cast(L#list_next, ^s_node));
    // assume sll_lseg(list_next, list_next); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#list_next, ^s_node), $phys_ptr_cast(L#list_next, ^s_node));
    // assert srtl_lseg(list_next, list_next); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#list_next, ^s_node), $phys_ptr_cast(L#list_next, ^s_node));
    // assume srtl_lseg(list_next, list_next); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#list_next, ^s_node), $phys_ptr_cast(L#list_next, ^s_node));
    // assert sll_lseg(local.l2, local.l2); 
    assert F#sll_lseg($s, $phys_ptr_cast(local.l2, ^s_node), $phys_ptr_cast(local.l2, ^s_node));
    // assume sll_lseg(local.l2, local.l2); 
    assume F#sll_lseg($s, $phys_ptr_cast(local.l2, ^s_node), $phys_ptr_cast(local.l2, ^s_node));
    // assert srtl_lseg(local.l2, local.l2); 
    assert F#srtl_lseg($s, $phys_ptr_cast(local.l2, ^s_node), $phys_ptr_cast(local.l2, ^s_node));
    // assume srtl_lseg(local.l2, local.l2); 
    assume F#srtl_lseg($s, $phys_ptr_cast(local.l2, ^s_node), $phys_ptr_cast(local.l2, ^s_node));
    // assert sll_lseg(local.l1, local.l1); 
    assert F#sll_lseg($s, $phys_ptr_cast(local.l1, ^s_node), $phys_ptr_cast(local.l1, ^s_node));
    // assume sll_lseg(local.l1, local.l1); 
    assume F#sll_lseg($s, $phys_ptr_cast(local.l1, ^s_node), $phys_ptr_cast(local.l1, ^s_node));
    // assert srtl_lseg(local.l1, local.l1); 
    assert F#srtl_lseg($s, $phys_ptr_cast(local.l1, ^s_node), $phys_ptr_cast(local.l1, ^s_node));
    // assume srtl_lseg(local.l1, local.l1); 
    assume F#srtl_lseg($s, $phys_ptr_cast(local.l1, ^s_node), $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), <=(-2147483648, sll_min_key(local.l1))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> -2147483648 <= F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), <=(-2147483648, sll_min_key(local.l2))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> -2147483648 <= F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(@_vcc_ptr_neq_null(l), &&(@_vcc_mutable(@state, l), @writes_check(l))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> $mutable($s, $phys_ptr_cast(L#l, ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(L#l, ^s_node));
    // struct s_node* list2; 
    // list2 := list; 
    SL#list2 := $phys_ptr_cast(L#list, ^s_node);
    // struct s_node* stmtexpr9#31; 
    // stmtexpr9#31 := list2; 
    stmtexpr9#31 := $phys_ptr_cast(SL#list2, ^s_node);
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assert @reads_check_normal((list->next)); 
    assert $thread_local($s, $phys_ptr_cast(L#list, ^s_node));
    // list_next := *((list->next)); 
    L#list_next := $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node);
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    loopState#0 := $s;
    assume true;
// INV:LOOPHEAD
    while (true)
 invariant b0000 ==> (F#srtl($s,$phys_ptr_cast(P#l1,^s_node)));
invariant b0001 ==> (F#srtl($s,$phys_ptr_cast(P#l2,^s_node)));
invariant b0002 ==> (F#srtl($s,$phys_ptr_cast(L#list,^s_node)));
invariant b0003 ==> (F#srtl($s,$phys_ptr_cast(L#l,^s_node)));
invariant b0004 ==> (F#srtl($s,$phys_ptr_cast(L#list_next,^s_node)));
invariant b0005 ==> (F#srtl($s,$phys_ptr_cast(local.l1,^s_node)));
invariant b0006 ==> (F#srtl($s,$phys_ptr_cast(local.l2,^s_node)));
invariant b0007 ==> (F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)));
invariant b0008 ==> (F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)));
invariant b0009 ==> (F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)));
invariant b0010 ==> (F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)));
invariant b0011 ==> (F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)));
invariant b0012 ==> (F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)));
invariant b0013 ==> (F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)));
invariant b0014 ==> (F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)));
invariant b0015 ==> (F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)));
invariant b0016 ==> (F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)));
invariant b0017 ==> (F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)));
invariant b0018 ==> (F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)));
invariant b0019 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)));
invariant b0020 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)));
invariant b0021 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)));
invariant b0022 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)));
invariant b0023 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)));
invariant b0024 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)));
invariant b0025 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)));
invariant b0026 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)));
invariant b0027 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)));
invariant b0028 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)));
invariant b0029 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)));
invariant b0030 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)));
invariant b0031 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)));
invariant b0032 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)));
invariant b0033 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)));
invariant b0034 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)));
invariant b0035 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)));
invariant b0036 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)));
invariant b0037 ==> (F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)));
invariant b0038 ==> (F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)));
invariant b0039 ==> (F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)));
invariant b0040 ==> (F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)));
invariant b0041 ==> (F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)));
invariant b0042 ==> (F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)));
invariant b0043 ==> (F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)));
invariant b0044 ==> (F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)));
invariant b0045 ==> (F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)));
invariant b0046 ==> (F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)));
invariant b0047 ==> (F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)));
invariant b0048 ==> (F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)));
invariant b0049 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0050 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0051 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0052 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0053 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0054 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0055 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0056 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0057 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0058 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0059 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0060 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0061 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0062 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0063 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0064 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0065 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0066 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0067 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0068 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0069 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0070 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0071 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0072 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0073 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0074 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0075 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0076 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0077 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0078 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0079 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0080 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0081 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0082 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0083 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0084 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0085 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0086 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0087 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0088 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0089 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0090 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0091 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0092 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0093 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0094 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0095 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0096 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0097 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0098 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0099 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0100 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0101 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0102 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0103 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0104 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0105 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0106 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0107 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0108 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0109 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0110 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0111 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0112 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0113 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0114 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0115 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0116 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0117 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0118 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0119 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0120 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0121 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0122 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0123 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0124 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0125 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0126 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0127 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0128 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0129 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0130 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0131 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0132 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0133 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0134 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0135 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0136 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0137 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0138 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0139 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0140 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0141 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0142 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0143 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0144 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0145 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0146 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0147 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0148 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0149 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0150 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0151 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0152 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0153 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0154 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0155 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0156 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0157 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0158 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0159 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0160 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0161 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0162 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0163 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0164 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0165 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0166 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0167 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0168 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0169 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0170 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0171 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0172 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0173 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0174 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0175 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0176 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0177 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0178 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0179 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0180 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0181 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0182 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0183 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0184 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0185 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0186 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0187 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0188 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0189 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0190 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0191 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0192 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0193 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0194 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0195 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0196 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0197 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0198 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0199 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0200 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0201 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0202 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0203 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0204 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0205 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0206 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0207 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0208 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0209 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0210 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0211 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0212 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0213 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0214 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0215 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0216 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0217 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0218 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0219 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0220 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0221 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0222 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0223 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0224 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0225 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0226 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0227 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0228 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0229 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0230 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0231 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0232 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0233 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0234 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0235 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0236 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0237 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0238 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0239 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0240 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0241 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0242 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0243 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0244 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0245 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0246 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0247 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0248 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0249 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0250 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0251 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0252 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0253 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0254 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0255 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0256 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0257 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0258 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0259 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0260 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0261 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0262 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0263 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0264 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0265 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0266 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0267 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0268 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0269 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0270 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0271 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0272 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0273 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0274 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0275 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0276 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0277 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0278 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0279 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0280 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0281 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0282 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0283 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0284 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0285 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0286 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0287 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0288 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0289 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0290 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0291 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0292 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0293 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0294 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0295 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0296 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0297 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0298 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0299 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0300 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0301 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0302 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0303 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0304 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0305 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0306 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0307 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0308 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0309 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0310 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0311 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0312 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0313 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0314 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0315 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0316 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0317 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0318 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0319 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0320 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0321 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0322 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0323 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0324 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0325 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0326 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0327 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0328 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0329 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0330 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0331 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0332 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0333 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0334 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0335 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0336 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0337 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0338 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0339 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0340 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0341 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0342 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0343 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0344 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0345 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0346 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0347 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0348 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0349 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0350 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0351 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0352 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0353 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0354 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0355 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0356 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0357 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0358 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0359 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0360 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0361 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0362 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0363 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0364 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0365 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0366 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0367 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0368 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0369 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0370 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0371 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0372 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0373 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0374 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0375 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0376 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0377 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0378 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0379 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0380 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0381 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0382 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0383 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0384 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0385 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0386 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0387 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0388 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0389 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0390 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0391 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0392 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0393 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0394 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0395 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0396 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0397 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0398 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0399 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0400 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0401 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0402 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0403 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0404 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0405 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0406 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0407 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0408 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0409 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0410 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0411 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0412 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0413 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0414 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0415 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0416 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0417 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0418 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0419 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0420 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0421 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0422 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0423 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0424 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0425 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0426 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0427 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0428 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0429 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0430 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0431 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0432 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0433 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0434 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0435 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0436 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0437 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0438 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0439 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0440 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0441 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0442 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0443 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0444 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0445 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0446 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0447 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0448 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0449 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0450 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0451 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0452 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0453 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0454 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0455 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0456 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0457 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0458 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0459 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0460 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0461 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0462 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0463 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0464 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0465 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0466 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0467 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0468 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0469 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0470 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0471 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0472 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0473 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0474 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0475 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0476 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0477 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0478 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0479 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0480 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0481 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0482 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0483 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0484 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0485 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0486 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0487 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0488 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0489 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0490 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0491 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0492 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0493 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0494 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0495 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0496 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0497 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0498 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0499 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0500 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0501 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0502 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0503 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0504 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0505 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0506 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0507 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0508 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0509 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0510 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0511 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0512 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0513 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0514 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0515 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0516 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0517 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0518 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0519 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0520 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0521 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0522 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0523 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0524 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0525 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0526 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0527 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0528 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0529 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0530 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0531 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0532 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0533 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0534 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0535 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0536 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0537 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0538 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0539 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0540 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0541 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0542 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0543 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0544 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0545 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0546 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0547 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0548 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0549 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0550 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0551 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0552 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0553 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0554 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0555 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0556 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0557 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0558 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0559 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0560 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0561 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0562 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0563 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0564 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0565 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0566 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0567 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0568 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0569 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0570 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0571 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0572 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0573 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0574 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0575 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0576 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0577 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0578 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0579 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0580 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0581 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0582 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0583 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0584 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0585 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0586 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0587 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0588 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0589 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0590 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0591 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0592 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0593 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0594 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0595 ==> ($non_null($phys_ptr_cast(P#l1,^s_node)));
invariant b0596 ==> ($non_null($phys_ptr_cast(P#l2,^s_node)));
invariant b0597 ==> ($non_null($phys_ptr_cast(L#list,^s_node)));
invariant b0598 ==> ($non_null($phys_ptr_cast(L#l,^s_node)));
invariant b0599 ==> ($non_null($phys_ptr_cast(L#list_next,^s_node)));
invariant b0600 ==> ($non_null($phys_ptr_cast(local.l1,^s_node)));
invariant b0601 ==> ($non_null($phys_ptr_cast(local.l2,^s_node)));
invariant b0602 ==> ($is_null($phys_ptr_cast(P#l1,^s_node)));
invariant b0603 ==> ($is_null($phys_ptr_cast(P#l2,^s_node)));
invariant b0604 ==> ($is_null($phys_ptr_cast(L#list,^s_node)));
invariant b0605 ==> ($is_null($phys_ptr_cast(L#l,^s_node)));
invariant b0606 ==> ($is_null($phys_ptr_cast(L#list_next,^s_node)));
invariant b0607 ==> ($is_null($phys_ptr_cast(local.l1,^s_node)));
invariant b0608 ==> ($is_null($phys_ptr_cast(local.l2,^s_node)));
invariant b0609 ==> (($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(P#l2,^s_node)));
invariant b0610 ==> (($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list,^s_node)));
invariant b0611 ==> (($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#l,^s_node)));
invariant b0612 ==> (($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node)));
invariant b0613 ==> (($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l1,^s_node)));
invariant b0614 ==> (($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l2,^s_node)));
invariant b0615 ==> (($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(P#l1,^s_node)));
invariant b0616 ==> (($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list,^s_node)));
invariant b0617 ==> (($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#l,^s_node)));
invariant b0618 ==> (($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node)));
invariant b0619 ==> (($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l1,^s_node)));
invariant b0620 ==> (($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l2,^s_node)));
invariant b0621 ==> (($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l1,^s_node)));
invariant b0622 ==> (($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l2,^s_node)));
invariant b0623 ==> (($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#l,^s_node)));
invariant b0624 ==> (($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#list_next,^s_node)));
invariant b0625 ==> (($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l1,^s_node)));
invariant b0626 ==> (($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l2,^s_node)));
invariant b0627 ==> (($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l1,^s_node)));
invariant b0628 ==> (($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l2,^s_node)));
invariant b0629 ==> (($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list,^s_node)));
invariant b0630 ==> (($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list_next,^s_node)));
invariant b0631 ==> (($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l1,^s_node)));
invariant b0632 ==> (($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l2,^s_node)));
invariant b0633 ==> (($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l1,^s_node)));
invariant b0634 ==> (($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l2,^s_node)));
invariant b0635 ==> (($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#list,^s_node)));
invariant b0636 ==> (($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#l,^s_node)));
invariant b0637 ==> (($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l1,^s_node)));
invariant b0638 ==> (($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l2,^s_node)));
invariant b0639 ==> (($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l1,^s_node)));
invariant b0640 ==> (($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l2,^s_node)));
invariant b0641 ==> (($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list,^s_node)));
invariant b0642 ==> (($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#l,^s_node)));
invariant b0643 ==> (($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node)));
invariant b0644 ==> (($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(local.l2,^s_node)));
invariant b0645 ==> (($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l1,^s_node)));
invariant b0646 ==> (($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l2,^s_node)));
invariant b0647 ==> (($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list,^s_node)));
invariant b0648 ==> (($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#l,^s_node)));
invariant b0649 ==> (($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node)));
invariant b0650 ==> (($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(local.l1,^s_node)));
invariant b0651 ==> (($non_null($phys_ptr_cast(P#l1,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l1,^s_node),^s_node))));
invariant b0652 ==> (($non_null($phys_ptr_cast(P#l2,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l2,^s_node),^s_node))));
invariant b0653 ==> (($non_null($phys_ptr_cast(L#list,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list,^s_node),^s_node))));
invariant b0654 ==> (($non_null($phys_ptr_cast(L#l,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#l,^s_node),^s_node))));
invariant b0655 ==> (($non_null($phys_ptr_cast(L#list_next,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list_next,^s_node),^s_node))));
invariant b0656 ==> (($non_null($phys_ptr_cast(local.l1,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l1,^s_node),^s_node))));
invariant b0657 ==> (($non_null($phys_ptr_cast(local.l2,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l2,^s_node),^s_node))));
invariant b0658 ==> (($non_null($phys_ptr_cast(P#l1,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l1,^s_node),^s_node))));
invariant b0659 ==> (($non_null($phys_ptr_cast(P#l2,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l2,^s_node),^s_node))));
invariant b0660 ==> (($non_null($phys_ptr_cast(L#list,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list,^s_node),^s_node))));
invariant b0661 ==> (($non_null($phys_ptr_cast(L#l,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#l,^s_node),^s_node))));
invariant b0662 ==> (($non_null($phys_ptr_cast(L#list_next,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list_next,^s_node),^s_node))));
invariant b0663 ==> (($non_null($phys_ptr_cast(local.l1,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l1,^s_node),^s_node))));
invariant b0664 ==> (($non_null($phys_ptr_cast(local.l2,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l2,^s_node),^s_node))));
invariant b0665 ==> (($non_null($phys_ptr_cast(P#l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l1,^s_node),^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b0666 ==> (($non_null($phys_ptr_cast(P#l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l1,^s_node),^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b0667 ==> (($non_null($phys_ptr_cast(P#l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l1,^s_node),^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b0668 ==> (($non_null($phys_ptr_cast(P#l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l1,^s_node),^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b0669 ==> (($non_null($phys_ptr_cast(P#l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l1,^s_node),^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b0670 ==> (($non_null($phys_ptr_cast(P#l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l1,^s_node),^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b0671 ==> (($non_null($phys_ptr_cast(P#l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l2,^s_node),^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b0672 ==> (($non_null($phys_ptr_cast(P#l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l2,^s_node),^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b0673 ==> (($non_null($phys_ptr_cast(P#l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l2,^s_node),^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b0674 ==> (($non_null($phys_ptr_cast(P#l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l2,^s_node),^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b0675 ==> (($non_null($phys_ptr_cast(P#l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l2,^s_node),^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b0676 ==> (($non_null($phys_ptr_cast(P#l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l2,^s_node),^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b0677 ==> (($non_null($phys_ptr_cast(L#list,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list,^s_node),^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b0678 ==> (($non_null($phys_ptr_cast(L#list,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list,^s_node),^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b0679 ==> (($non_null($phys_ptr_cast(L#list,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list,^s_node),^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b0680 ==> (($non_null($phys_ptr_cast(L#list,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list,^s_node),^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b0681 ==> (($non_null($phys_ptr_cast(L#list,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list,^s_node),^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b0682 ==> (($non_null($phys_ptr_cast(L#list,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list,^s_node),^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b0683 ==> (($non_null($phys_ptr_cast(L#l,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#l,^s_node),^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b0684 ==> (($non_null($phys_ptr_cast(L#l,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#l,^s_node),^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b0685 ==> (($non_null($phys_ptr_cast(L#l,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#l,^s_node),^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b0686 ==> (($non_null($phys_ptr_cast(L#l,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#l,^s_node),^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b0687 ==> (($non_null($phys_ptr_cast(L#l,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#l,^s_node),^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b0688 ==> (($non_null($phys_ptr_cast(L#l,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#l,^s_node),^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b0689 ==> (($non_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list_next,^s_node),^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b0690 ==> (($non_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list_next,^s_node),^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b0691 ==> (($non_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list_next,^s_node),^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b0692 ==> (($non_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list_next,^s_node),^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b0693 ==> (($non_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list_next,^s_node),^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b0694 ==> (($non_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list_next,^s_node),^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b0695 ==> (($non_null($phys_ptr_cast(local.l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l1,^s_node),^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b0696 ==> (($non_null($phys_ptr_cast(local.l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l1,^s_node),^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b0697 ==> (($non_null($phys_ptr_cast(local.l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l1,^s_node),^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b0698 ==> (($non_null($phys_ptr_cast(local.l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l1,^s_node),^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b0699 ==> (($non_null($phys_ptr_cast(local.l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l1,^s_node),^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b0700 ==> (($non_null($phys_ptr_cast(local.l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l1,^s_node),^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b0701 ==> (($non_null($phys_ptr_cast(local.l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l2,^s_node),^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b0702 ==> (($non_null($phys_ptr_cast(local.l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l2,^s_node),^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b0703 ==> (($non_null($phys_ptr_cast(local.l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l2,^s_node),^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b0704 ==> (($non_null($phys_ptr_cast(local.l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l2,^s_node),^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b0705 ==> (($non_null($phys_ptr_cast(local.l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l2,^s_node),^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b0706 ==> (($non_null($phys_ptr_cast(local.l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l2,^s_node),^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b0707 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0708 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0709 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0710 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0711 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0712 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0713 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0714 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0715 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0716 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0717 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0718 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0719 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0720 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0721 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0722 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0723 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0724 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0725 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0726 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0727 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0728 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0729 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0730 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0731 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0732 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0733 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0734 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0735 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0736 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0737 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0738 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0739 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0740 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0741 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0742 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0743 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0744 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0745 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0746 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0747 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0748 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0749 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0750 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0751 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0752 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0753 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0754 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0755 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0756 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0757 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0758 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0759 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0760 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0761 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0762 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0763 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0764 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0765 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0766 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0767 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0768 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0769 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0770 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0771 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0772 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0773 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0774 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0775 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0776 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0777 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0778 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0779 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0780 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0781 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0782 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0783 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0784 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0785 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0786 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0787 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0788 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0789 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0790 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0791 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0792 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0793 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0794 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0795 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0796 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0797 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0798 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0799 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0800 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0801 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0802 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0803 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0804 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0805 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0806 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0807 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0808 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0809 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0810 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0811 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0812 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0813 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0814 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0815 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0816 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0817 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0818 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0819 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0820 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0821 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0822 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0823 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0824 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0825 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0826 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0827 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0828 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0829 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0830 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0831 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0832 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0833 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0834 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0835 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0836 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0837 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0838 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0839 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0840 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0841 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0842 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0843 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0844 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0845 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0846 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0847 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0848 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0849 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0850 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0851 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0852 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0853 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0854 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0855 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0856 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0857 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0858 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0859 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0860 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0861 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0862 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0863 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0864 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0865 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0866 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0867 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0868 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0869 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0870 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0871 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0872 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0873 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0874 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0875 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0876 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0877 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0878 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0879 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0880 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0881 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0882 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0883 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0884 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0885 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0886 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0887 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0888 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0889 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0890 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0891 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0892 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0893 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0894 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0895 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0896 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0897 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0898 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0899 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0900 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0901 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0902 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0903 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0904 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0905 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0906 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0907 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0908 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0909 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0910 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0911 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0912 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0913 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0914 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0915 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0916 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0917 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b0918 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b0919 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b0920 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b0921 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b0922 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b0923 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b0924 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b0925 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b0926 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b0927 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b0928 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b0929 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b0930 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b0931 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b0932 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b0933 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b0934 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b0935 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b0936 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b0937 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b0938 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b0939 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b0940 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b0941 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b0942 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b0943 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b0944 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b0945 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b0946 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b0947 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b0948 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b0949 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b0950 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b0951 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b0952 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b0953 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b0954 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b0955 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b0956 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b0957 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b0958 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b0959 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b0960 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b0961 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b0962 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b0963 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b0964 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b0965 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b0966 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b0967 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b0968 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b0969 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b0970 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b0971 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b0972 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b0973 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b0974 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b0975 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b0976 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b0977 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b0978 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b0979 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b0980 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b0981 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b0982 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b0983 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b0984 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b0985 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b0986 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b0987 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b0988 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b0989 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b0990 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b0991 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b0992 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b0993 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b0994 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b0995 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b0996 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b0997 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b0998 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b0999 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b1000 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b1001 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b1002 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b1003 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b1004 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b1005 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b1006 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b1007 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b1008 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b1009 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b1010 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b1011 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b1012 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b1013 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b1014 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b1015 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b1016 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b1017 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b1018 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b1019 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b1020 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b1021 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b1022 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b1023 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b1024 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b1025 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b1026 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b1027 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b1028 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b1029 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b1030 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b1031 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b1032 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b1033 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b1034 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b1035 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b1036 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b1037 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b1038 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b1039 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b1040 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b1041 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b1042 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b1043 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b1044 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b1045 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b1046 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b1047 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b1048 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b1049 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b1050 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b1051 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b1052 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b1053 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b1054 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b1055 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b1056 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b1057 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b1058 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b1059 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b1060 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b1061 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b1062 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b1063 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b1064 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b1065 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b1066 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b1067 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b1068 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b1069 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b1070 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b1071 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b1072 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b1073 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b1074 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b1075 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b1076 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b1077 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b1078 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b1079 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b1080 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b1081 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b1082 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b1083 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b1084 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b1085 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b1086 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b1087 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b1088 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b1089 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b1090 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b1091 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b1092 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b1093 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b1094 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b1095 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b1096 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b1097 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b1098 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b1099 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b1100 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b1101 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b1102 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b1103 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b1104 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b1105 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b1106 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b1107 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b1108 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b1109 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b1110 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b1111 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b1112 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b1113 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b1114 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b1115 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b1116 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b1117 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b1118 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b1119 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b1120 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b1121 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b1122 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b1123 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b1124 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b1125 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b1126 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));

      invariant $non_null($phys_ptr_cast(L#l, ^s_node)) ==> $mutable($s, $phys_ptr_cast(L#l, ^s_node));
      invariant $non_null($phys_ptr_cast(L#l, ^s_node)) ==> $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(L#l, ^s_node));
      invariant $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> $mutable($s, $phys_ptr_cast(local.l1, ^s_node));
      invariant $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(local.l1, ^s_node));
      invariant $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> $mutable($s, $phys_ptr_cast(local.l2, ^s_node));
      invariant $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(local.l2, ^s_node));
    {
      anon6:
        assume $writes_nothing(old($s), $s);
        assume $timestamp_post(loopState#0, $s);
        assume $full_stop_ext(#tok$3^33.2, $s);
        // assume @_vcc_meta_eq(old(@prestate, @state), @state); 
        assume $meta_eq(loopState#0, $s);
        // _Bool ite#1; 
        // ite#1 := &&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(local.l2)); 
        ite#1 := $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($phys_ptr_cast(local.l2, ^s_node));
        assume true;
        // if (ite#1) ...
        if (ite#1)
        {
          anon3:
            // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_keys(list2), @_vcc_intset_union(sll_keys(*((list2->next))), @_vcc_intset_singleton(*((list2->key)))))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#list2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_list_len_next(list2), unchecked+(sll_list_len_next(*((list2->next))), 1))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#list2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(rsrtl(list2), &&(&&(rsrtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, rsrtl_reach(*((list2->next)))))), >=(*((list2->key)), sll_max_key(*((list2->next))))))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list2), ==(rsrtl_reach(list2), @_vcc_oset_union(rsrtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll(list2), &&(sll(*((list2->next))), unchecked!(@_vcc_oset_in(list2, sll_reach(*((list2->next)))))))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_reach(list2), @_vcc_oset_union(sll_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_max_key(list2), @\int_max(*((list2->key)), sll_max_key(*((list2->next)))))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_min_key(list2), @\int_min(*((list2->key)), sll_min_key(*((list2->next)))))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(srtl(list2), &&(&&(srtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, srtl_reach(*((list2->next)))))), <=(*((list2->key)), sll_min_key(*((list2->next))))))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list2), ==(srtl_reach(list2), @_vcc_oset_union(srtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg(list, l), &&(sll_lseg(*((list->next)), l), unchecked!(@_vcc_oset_in(list, sll_lseg_reach(*((list->next)), l)))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_reach(list, l), @_vcc_oset_union(sll_lseg_reach(*((list->next)), l), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_keys(list, l), @_vcc_intset_union(sll_lseg_keys(*((list->next)), l), @_vcc_intset_singleton(*((list->key)))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_len_next(list, l), unchecked+(sll_lseg_len_next(*((list->next)), l), 1))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(sll_lseg_max_key(list, l), @\int_max(*((list->key)), sll_lseg_max_key(*((list->next)), l)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(sll_lseg_min_key(list, l), @\int_min(*((list->key)), sll_lseg_min_key(*((list->next)), l)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(srtl_lseg(list, l), &&(&&(srtl_lseg(*((list->next)), l), unchecked!(@_vcc_oset_in(list, srtl_lseg_reach(*((list->next)), l)))), <=(*((list->key)), sll_lseg_min_key(*((list->next)), l))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(srtl_lseg_reach(list, l), @_vcc_oset_union(srtl_lseg_reach(*((list->next)), l), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), &&(==(@_vcc_mutable(@state, l), @_vcc_mutable(@state, *((l->next)))), ==(@writes_check(l), @writes_check(*((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> $mutable($s, $phys_ptr_cast(L#l, ^s_node)) == $mutable($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(L#l, ^s_node)) == $top_writable($s, #wrTime$3^3.3, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node));
            // assert @reads_check_normal((local.l1->key)); 
            assert $thread_local($s, $phys_ptr_cast(local.l1, ^s_node));
            // assert @reads_check_normal((local.l2->key)); 
            assert $thread_local($s, $phys_ptr_cast(local.l2, ^s_node));
            assume true;
            // if (<=(*((local.l1->key)), *((local.l2->key)))) ...
            if ($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)))
            {
              anon1:
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_keys(list2), @_vcc_intset_union(sll_keys(*((list2->next))), @_vcc_intset_singleton(*((list2->key)))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#list2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_list_len_next(list2), unchecked+(sll_list_len_next(*((list2->next))), 1))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#list2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(rsrtl(list2), &&(&&(rsrtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, rsrtl_reach(*((list2->next)))))), >=(*((list2->key)), sll_max_key(*((list2->next))))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(rsrtl_reach(list2), @_vcc_oset_union(rsrtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll(list2), &&(sll(*((list2->next))), unchecked!(@_vcc_oset_in(list2, sll_reach(*((list2->next)))))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_reach(list2), @_vcc_oset_union(sll_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_max_key(list2), @\int_max(*((list2->key)), sll_max_key(*((list2->next)))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_min_key(list2), @\int_min(*((list2->key)), sll_min_key(*((list2->next)))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(srtl(list2), &&(&&(srtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, srtl_reach(*((list2->next)))))), <=(*((list2->key)), sll_min_key(*((list2->next))))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(srtl_reach(list2), @_vcc_oset_union(srtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg(list, l), &&(sll_lseg(*((list->next)), l), unchecked!(@_vcc_oset_in(list, sll_lseg_reach(*((list->next)), l)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node))));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_reach(list, l), @_vcc_oset_union(sll_lseg_reach(*((list->next)), l), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_keys(list, l), @_vcc_intset_union(sll_lseg_keys(*((list->next)), l), @_vcc_intset_singleton(*((list->key)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_len_next(list, l), unchecked+(sll_lseg_len_next(*((list->next)), l), 1))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), 1);
                // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(sll_lseg_max_key(list, l), @\int_max(*((list->key)), sll_lseg_max_key(*((list->next)), l)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(sll_lseg_min_key(list, l), @\int_min(*((list->key)), sll_lseg_min_key(*((list->next)), l)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(srtl_lseg(list, l), &&(&&(srtl_lseg(*((list->next)), l), unchecked!(@_vcc_oset_in(list, srtl_lseg_reach(*((list->next)), l)))), <=(*((list->key)), sll_lseg_min_key(*((list->next)), l))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(srtl_lseg_reach(list, l), @_vcc_oset_union(srtl_lseg_reach(*((list->next)), l), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // _math \state _dryad_S6; 
                // _dryad_S6 := @_vcc_current_state(@state); 
                SL#_dryad_S6 := $current_state($s);
                // _math \state stmtexpr0#9; 
                // stmtexpr0#9 := _dryad_S6; 
                stmtexpr0#9 := SL#_dryad_S6;
                // assert @prim_writes_check((l->next)); 
                assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#l, ^s_node), s_node.next));
                // *(l->next) := local.l1; 
                call $write_int(s_node.next, $phys_ptr_cast(L#l, ^s_node), $ptr_to_int($phys_ptr_cast(local.l1, ^s_node)));
                assume $full_stop_ext(#tok$3^70.4, $s);
                // _math \state _dryad_S7; 
                // _dryad_S7 := @_vcc_current_state(@state); 
                SL#_dryad_S7 := $current_state($s);
                // _math \state stmtexpr1#10; 
                // stmtexpr1#10 := _dryad_S7; 
                stmtexpr1#10 := SL#_dryad_S7;
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list2)))), ==(old(_dryad_S6, sll_keys(list2)), old(_dryad_S7, sll_keys(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list2)))), ==(old(_dryad_S6, sll_list_len_next(list2)), old(_dryad_S7, sll_list_len_next(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, rsrtl_reach(list2)))), ==(old(_dryad_S6, rsrtl(list2)), old(_dryad_S7, rsrtl(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, rsrtl_reach(list2)))), ==(old(_dryad_S6, rsrtl_reach(list2)), old(_dryad_S7, rsrtl_reach(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list2)))), ==(old(_dryad_S6, sll(list2)), old(_dryad_S7, sll(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list2)))), ==(old(_dryad_S6, sll_reach(list2)), old(_dryad_S7, sll_reach(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list2)))), ==(old(_dryad_S6, sll_max_key(list2)), old(_dryad_S7, sll_max_key(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list2)))), ==(old(_dryad_S6, sll_min_key(list2)), old(_dryad_S7, sll_min_key(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, srtl_reach(list2)))), ==(old(_dryad_S6, srtl(list2)), old(_dryad_S7, srtl(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, srtl_reach(list2)))), ==(old(_dryad_S6, srtl_reach(list2)), old(_dryad_S7, srtl_reach(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list)))), ==(old(_dryad_S6, sll_keys(list)), old(_dryad_S7, sll_keys(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list)))), ==(old(_dryad_S6, sll_list_len_next(list)), old(_dryad_S7, sll_list_len_next(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, rsrtl_reach(list)))), ==(old(_dryad_S6, rsrtl(list)), old(_dryad_S7, rsrtl(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, rsrtl_reach(list)))), ==(old(_dryad_S6, rsrtl_reach(list)), old(_dryad_S7, rsrtl_reach(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list)))), ==(old(_dryad_S6, sll(list)), old(_dryad_S7, sll(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list)))), ==(old(_dryad_S6, sll_reach(list)), old(_dryad_S7, sll_reach(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list)))), ==(old(_dryad_S6, sll_max_key(list)), old(_dryad_S7, sll_max_key(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list)))), ==(old(_dryad_S6, sll_min_key(list)), old(_dryad_S7, sll_min_key(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, srtl_reach(list)))), ==(old(_dryad_S6, srtl(list)), old(_dryad_S7, srtl(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, srtl_reach(list)))), ==(old(_dryad_S6, srtl_reach(list)), old(_dryad_S7, srtl_reach(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list_next)))), ==(old(_dryad_S6, sll_keys(list_next)), old(_dryad_S7, sll_keys(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list_next)))), ==(old(_dryad_S6, sll_list_len_next(list_next)), old(_dryad_S7, sll_list_len_next(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, rsrtl_reach(list_next)))), ==(old(_dryad_S6, rsrtl(list_next)), old(_dryad_S7, rsrtl(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, rsrtl_reach(list_next)))), ==(old(_dryad_S6, rsrtl_reach(list_next)), old(_dryad_S7, rsrtl_reach(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list_next)))), ==(old(_dryad_S6, sll(list_next)), old(_dryad_S7, sll(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list_next)))), ==(old(_dryad_S6, sll_reach(list_next)), old(_dryad_S7, sll_reach(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list_next)))), ==(old(_dryad_S6, sll_max_key(list_next)), old(_dryad_S7, sll_max_key(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list_next)))), ==(old(_dryad_S6, sll_min_key(list_next)), old(_dryad_S7, sll_min_key(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, srtl_reach(list_next)))), ==(old(_dryad_S6, srtl(list_next)), old(_dryad_S7, srtl(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, srtl_reach(list_next)))), ==(old(_dryad_S6, srtl_reach(list_next)), old(_dryad_S7, srtl_reach(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(local.l2)))), ==(old(_dryad_S6, sll_keys(local.l2)), old(_dryad_S7, sll_keys(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(local.l2)))), ==(old(_dryad_S6, sll_list_len_next(local.l2)), old(_dryad_S7, sll_list_len_next(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, rsrtl_reach(local.l2)))), ==(old(_dryad_S6, rsrtl(local.l2)), old(_dryad_S7, rsrtl(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, rsrtl_reach(local.l2)))), ==(old(_dryad_S6, rsrtl_reach(local.l2)), old(_dryad_S7, rsrtl_reach(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(local.l2)))), ==(old(_dryad_S6, sll(local.l2)), old(_dryad_S7, sll(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(local.l2)))), ==(old(_dryad_S6, sll_reach(local.l2)), old(_dryad_S7, sll_reach(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(local.l2)))), ==(old(_dryad_S6, sll_max_key(local.l2)), old(_dryad_S7, sll_max_key(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(local.l2)))), ==(old(_dryad_S6, sll_min_key(local.l2)), old(_dryad_S7, sll_min_key(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, srtl_reach(local.l2)))), ==(old(_dryad_S6, srtl(local.l2)), old(_dryad_S7, srtl(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, srtl_reach(local.l2)))), ==(old(_dryad_S6, srtl_reach(local.l2)), old(_dryad_S7, srtl_reach(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(local.l1)))), ==(old(_dryad_S6, sll_keys(local.l1)), old(_dryad_S7, sll_keys(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(local.l1)))), ==(old(_dryad_S6, sll_list_len_next(local.l1)), old(_dryad_S7, sll_list_len_next(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, rsrtl_reach(local.l1)))), ==(old(_dryad_S6, rsrtl(local.l1)), old(_dryad_S7, rsrtl(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, rsrtl_reach(local.l1)))), ==(old(_dryad_S6, rsrtl_reach(local.l1)), old(_dryad_S7, rsrtl_reach(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(local.l1)))), ==(old(_dryad_S6, sll(local.l1)), old(_dryad_S7, sll(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(local.l1)))), ==(old(_dryad_S6, sll_reach(local.l1)), old(_dryad_S7, sll_reach(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(local.l1)))), ==(old(_dryad_S6, sll_max_key(local.l1)), old(_dryad_S7, sll_max_key(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(local.l1)))), ==(old(_dryad_S6, sll_min_key(local.l1)), old(_dryad_S7, sll_min_key(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, srtl_reach(local.l1)))), ==(old(_dryad_S6, srtl(local.l1)), old(_dryad_S7, srtl(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, srtl_reach(local.l1)))), ==(old(_dryad_S6, srtl_reach(local.l1)), old(_dryad_S7, srtl_reach(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_lseg_reach(list, l)))), ==(old(_dryad_S6, sll_lseg(list, l)), old(_dryad_S7, sll_lseg(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_lseg_reach(list, l)))), ==(old(_dryad_S6, sll_lseg_reach(list, l)), old(_dryad_S7, sll_lseg_reach(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_lseg_reach(list, l)))), ==(old(_dryad_S6, sll_lseg_keys(list, l)), old(_dryad_S7, sll_lseg_keys(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_lseg_reach(list, l)))), ==(old(_dryad_S6, sll_lseg_len_next(list, l)), old(_dryad_S7, sll_lseg_len_next(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_lseg_reach(list, l)))), ==(old(_dryad_S6, sll_lseg_max_key(list, l)), old(_dryad_S7, sll_lseg_max_key(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_lseg_reach(list, l)))), ==(old(_dryad_S6, sll_lseg_min_key(list, l)), old(_dryad_S7, sll_lseg_min_key(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, srtl_lseg_reach(list, l)))), ==(old(_dryad_S6, srtl_lseg(list, l)), old(_dryad_S7, srtl_lseg(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#srtl_lseg(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, srtl_lseg_reach(list, l)))), ==(old(_dryad_S6, srtl_lseg_reach(list, l)), old(_dryad_S7, srtl_lseg_reach(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(l, list2)), ==(*((list2->key)), old(_dryad_S6, *((list2->key))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(SL#list2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) == $rd_inv(SL#_dryad_S6, s_node.key, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(l, list2)), @_vcc_ptr_eq_pure(*((list2->next)), old(_dryad_S6, *((list2->next))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(SL#list2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S6, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(l, list)), ==(*((list->key)), old(_dryad_S6, *((list->key))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) == $rd_inv(SL#_dryad_S6, s_node.key, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(l, list)), @_vcc_ptr_eq_pure(*((list->next)), old(_dryad_S6, *((list->next))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S6, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(l, list_next)), ==(*((list_next->key)), old(_dryad_S6, *((list_next->key))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) == $rd_inv(SL#_dryad_S6, s_node.key, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(l, list_next)), @_vcc_ptr_eq_pure(*((list_next->next)), old(_dryad_S6, *((list_next->next))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S6, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l2)), ==(*((local.l2->key)), old(_dryad_S6, *((local.l2->key))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) == $rd_inv(SL#_dryad_S6, s_node.key, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l2)), @_vcc_ptr_eq_pure(*((local.l2->next)), old(_dryad_S6, *((local.l2->next))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S6, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l1)), ==(*((local.l1->key)), old(_dryad_S6, *((local.l1->key))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) == $rd_inv(SL#_dryad_S6, s_node.key, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l1)), @_vcc_ptr_eq_pure(*((local.l1->next)), old(_dryad_S6, *((local.l1->next))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S6, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node);
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_keys(list2), @_vcc_intset_union(sll_keys(*((list2->next))), @_vcc_intset_singleton(*((list2->key)))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#list2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_list_len_next(list2), unchecked+(sll_list_len_next(*((list2->next))), 1))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#list2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(rsrtl(list2), &&(&&(rsrtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, rsrtl_reach(*((list2->next)))))), >=(*((list2->key)), sll_max_key(*((list2->next))))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(rsrtl_reach(list2), @_vcc_oset_union(rsrtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll(list2), &&(sll(*((list2->next))), unchecked!(@_vcc_oset_in(list2, sll_reach(*((list2->next)))))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_reach(list2), @_vcc_oset_union(sll_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_max_key(list2), @\int_max(*((list2->key)), sll_max_key(*((list2->next)))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_min_key(list2), @\int_min(*((list2->key)), sll_min_key(*((list2->next)))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(srtl(list2), &&(&&(srtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, srtl_reach(*((list2->next)))))), <=(*((list2->key)), sll_min_key(*((list2->next))))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(srtl_reach(list2), @_vcc_oset_union(srtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), &&(==(@_vcc_mutable(@state, local.l1), @_vcc_mutable(@state, *((local.l1->next)))), ==(@writes_check(local.l1), @writes_check(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> $mutable($s, $phys_ptr_cast(local.l1, ^s_node)) == $mutable($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(local.l1, ^s_node)) == $top_writable($s, #wrTime$3^3.3, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node));
                // struct s_node* l14; 
                // l14 := local.l1; 
                SL#l14 := $phys_ptr_cast(local.l1, ^s_node);
                // struct s_node* stmtexpr2#11; 
                // stmtexpr2#11 := l14; 
                stmtexpr2#11 := $phys_ptr_cast(SL#l14, ^s_node);
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_pure(local.l1, *((local.l1->next)))), ==(sll_lseg(local.l1, *((local.l1->next))), &&(sll_lseg(*((local.l1->next)), *((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_lseg_reach(*((local.l1->next)), *((local.l1->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $phys_ptr_cast(local.l1, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(local.l1, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_pure(local.l1, *((local.l1->next)))), ==(sll_lseg_reach(local.l1, *((local.l1->next))), @_vcc_oset_union(sll_lseg_reach(*((local.l1->next)), *((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $phys_ptr_cast(local.l1, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(local.l1, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_pure(local.l1, *((local.l1->next)))), ==(sll_lseg_keys(local.l1, *((local.l1->next))), @_vcc_intset_union(sll_lseg_keys(*((local.l1->next)), *((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $phys_ptr_cast(local.l1, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(local.l1, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_pure(local.l1, *((local.l1->next)))), ==(sll_lseg_len_next(local.l1, *((local.l1->next))), unchecked+(sll_lseg_len_next(*((local.l1->next)), *((local.l1->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $phys_ptr_cast(local.l1, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(local.l1, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
                // assume ==>(&&(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_pure(local.l1, *((local.l1->next)))), @_vcc_ptr_neq_pure(*((local.l1->next)), *((local.l1->next)))), ==(sll_lseg_max_key(local.l1, *((local.l1->next))), @\int_max(*((local.l1->key)), sll_lseg_max_key(*((local.l1->next)), *((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $phys_ptr_cast(local.l1, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(local.l1, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_pure(local.l1, *((local.l1->next)))), @_vcc_ptr_neq_pure(*((local.l1->next)), *((local.l1->next)))), ==(sll_lseg_min_key(local.l1, *((local.l1->next))), @\int_min(*((local.l1->key)), sll_lseg_min_key(*((local.l1->next)), *((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $phys_ptr_cast(local.l1, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(local.l1, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_pure(local.l1, *((local.l1->next)))), @_vcc_ptr_neq_pure(*((local.l1->next)), *((local.l1->next)))), ==(srtl_lseg(local.l1, *((local.l1->next))), &&(&&(srtl_lseg(*((local.l1->next)), *((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_lseg_reach(*((local.l1->next)), *((local.l1->next)))))), <=(*((local.l1->key)), sll_lseg_min_key(*((local.l1->next)), *((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $phys_ptr_cast(local.l1, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(local.l1, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_pure(local.l1, *((local.l1->next)))), ==(srtl_lseg_reach(local.l1, *((local.l1->next))), @_vcc_oset_union(srtl_lseg_reach(*((local.l1->next)), *((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $phys_ptr_cast(local.l1, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(local.l1, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assert @reads_check_normal((local.l1->next)); 
                assert $thread_local($s, $phys_ptr_cast(local.l1, ^s_node));
                // local.l1 := *((local.l1->next)); 
                local.l1 := $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node);
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
            }
            else
            {
              anon2:
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_keys(list2), @_vcc_intset_union(sll_keys(*((list2->next))), @_vcc_intset_singleton(*((list2->key)))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#list2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_list_len_next(list2), unchecked+(sll_list_len_next(*((list2->next))), 1))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#list2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(rsrtl(list2), &&(&&(rsrtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, rsrtl_reach(*((list2->next)))))), >=(*((list2->key)), sll_max_key(*((list2->next))))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(rsrtl_reach(list2), @_vcc_oset_union(rsrtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll(list2), &&(sll(*((list2->next))), unchecked!(@_vcc_oset_in(list2, sll_reach(*((list2->next)))))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_reach(list2), @_vcc_oset_union(sll_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_max_key(list2), @\int_max(*((list2->key)), sll_max_key(*((list2->next)))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_min_key(list2), @\int_min(*((list2->key)), sll_min_key(*((list2->next)))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(srtl(list2), &&(&&(srtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, srtl_reach(*((list2->next)))))), <=(*((list2->key)), sll_min_key(*((list2->next))))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(srtl_reach(list2), @_vcc_oset_union(srtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg(list, l), &&(sll_lseg(*((list->next)), l), unchecked!(@_vcc_oset_in(list, sll_lseg_reach(*((list->next)), l)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node))));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_reach(list, l), @_vcc_oset_union(sll_lseg_reach(*((list->next)), l), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_keys(list, l), @_vcc_intset_union(sll_lseg_keys(*((list->next)), l), @_vcc_intset_singleton(*((list->key)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_len_next(list, l), unchecked+(sll_lseg_len_next(*((list->next)), l), 1))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), 1);
                // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(sll_lseg_max_key(list, l), @\int_max(*((list->key)), sll_lseg_max_key(*((list->next)), l)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(sll_lseg_min_key(list, l), @\int_min(*((list->key)), sll_lseg_min_key(*((list->next)), l)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(srtl_lseg(list, l), &&(&&(srtl_lseg(*((list->next)), l), unchecked!(@_vcc_oset_in(list, srtl_lseg_reach(*((list->next)), l)))), <=(*((list->key)), sll_lseg_min_key(*((list->next)), l))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(srtl_lseg_reach(list, l), @_vcc_oset_union(srtl_lseg_reach(*((list->next)), l), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // _math \state _dryad_S6#0; 
                // _dryad_S6#0 := @_vcc_current_state(@state); 
                _dryad_S6#0 := $current_state($s);
                // _math \state stmtexpr0#12; 
                // stmtexpr0#12 := _dryad_S6#0; 
                stmtexpr0#12 := _dryad_S6#0;
                // assert @prim_writes_check((l->next)); 
                assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#l, ^s_node), s_node.next));
                // *(l->next) := local.l2; 
                call $write_int(s_node.next, $phys_ptr_cast(L#l, ^s_node), $ptr_to_int($phys_ptr_cast(local.l2, ^s_node)));
                assume $full_stop_ext(#tok$3^74.4, $s);
                // _math \state _dryad_S7#1; 
                // _dryad_S7#1 := @_vcc_current_state(@state); 
                _dryad_S7#1 := $current_state($s);
                // _math \state stmtexpr1#13; 
                // stmtexpr1#13 := _dryad_S7#1; 
                stmtexpr1#13 := _dryad_S7#1;
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list2)))), ==(old(_dryad_S6#0, sll_keys(list2)), old(_dryad_S7#1, sll_keys(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_keys(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_keys(_dryad_S7#1, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list2)))), ==(old(_dryad_S6#0, sll_list_len_next(list2)), old(_dryad_S7#1, sll_list_len_next(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_list_len_next(_dryad_S7#1, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, rsrtl_reach(list2)))), ==(old(_dryad_S6#0, rsrtl(list2)), old(_dryad_S7#1, rsrtl(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#rsrtl(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node)) == F#rsrtl(_dryad_S7#1, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, rsrtl_reach(list2)))), ==(old(_dryad_S6#0, rsrtl_reach(list2)), old(_dryad_S7#1, rsrtl_reach(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node)) == F#rsrtl_reach(_dryad_S7#1, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list2)))), ==(old(_dryad_S6#0, sll(list2)), old(_dryad_S7#1, sll(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll(_dryad_S7#1, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list2)))), ==(old(_dryad_S6#0, sll_reach(list2)), old(_dryad_S7#1, sll_reach(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_reach(_dryad_S7#1, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list2)))), ==(old(_dryad_S6#0, sll_max_key(list2)), old(_dryad_S7#1, sll_max_key(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_max_key(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_max_key(_dryad_S7#1, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list2)))), ==(old(_dryad_S6#0, sll_min_key(list2)), old(_dryad_S7#1, sll_min_key(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_min_key(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_min_key(_dryad_S7#1, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, srtl_reach(list2)))), ==(old(_dryad_S6#0, srtl(list2)), old(_dryad_S7#1, srtl(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#srtl(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node)) == F#srtl(_dryad_S7#1, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, srtl_reach(list2)))), ==(old(_dryad_S6#0, srtl_reach(list2)), old(_dryad_S7#1, srtl_reach(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node)) == F#srtl_reach(_dryad_S7#1, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list)))), ==(old(_dryad_S6#0, sll_keys(list)), old(_dryad_S7#1, sll_keys(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_keys(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node)) == F#sll_keys(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list)))), ==(old(_dryad_S6#0, sll_list_len_next(list)), old(_dryad_S7#1, sll_list_len_next(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node)) == F#sll_list_len_next(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, rsrtl_reach(list)))), ==(old(_dryad_S6#0, rsrtl(list)), old(_dryad_S7#1, rsrtl(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node))) ==> F#rsrtl(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node)) == F#rsrtl(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, rsrtl_reach(list)))), ==(old(_dryad_S6#0, rsrtl_reach(list)), old(_dryad_S7#1, rsrtl_reach(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node)) == F#rsrtl_reach(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list)))), ==(old(_dryad_S6#0, sll(list)), old(_dryad_S7#1, sll(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node)) == F#sll(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list)))), ==(old(_dryad_S6#0, sll_reach(list)), old(_dryad_S7#1, sll_reach(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node)) == F#sll_reach(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list)))), ==(old(_dryad_S6#0, sll_max_key(list)), old(_dryad_S7#1, sll_max_key(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_max_key(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node)) == F#sll_max_key(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list)))), ==(old(_dryad_S6#0, sll_min_key(list)), old(_dryad_S7#1, sll_min_key(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_min_key(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node)) == F#sll_min_key(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, srtl_reach(list)))), ==(old(_dryad_S6#0, srtl(list)), old(_dryad_S7#1, srtl(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node))) ==> F#srtl(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node)) == F#srtl(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, srtl_reach(list)))), ==(old(_dryad_S6#0, srtl_reach(list)), old(_dryad_S7#1, srtl_reach(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node))) ==> F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node)) == F#srtl_reach(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list_next)))), ==(old(_dryad_S6#0, sll_keys(list_next)), old(_dryad_S7#1, sll_keys(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_keys(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_keys(_dryad_S7#1, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list_next)))), ==(old(_dryad_S6#0, sll_list_len_next(list_next)), old(_dryad_S7#1, sll_list_len_next(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_list_len_next(_dryad_S7#1, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, rsrtl_reach(list_next)))), ==(old(_dryad_S6#0, rsrtl(list_next)), old(_dryad_S7#1, rsrtl(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl(_dryad_S7#1, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, rsrtl_reach(list_next)))), ==(old(_dryad_S6#0, rsrtl_reach(list_next)), old(_dryad_S7#1, rsrtl_reach(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl_reach(_dryad_S7#1, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list_next)))), ==(old(_dryad_S6#0, sll(list_next)), old(_dryad_S7#1, sll(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll(_dryad_S7#1, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list_next)))), ==(old(_dryad_S6#0, sll_reach(list_next)), old(_dryad_S7#1, sll_reach(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_reach(_dryad_S7#1, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list_next)))), ==(old(_dryad_S6#0, sll_max_key(list_next)), old(_dryad_S7#1, sll_max_key(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_max_key(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_max_key(_dryad_S7#1, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list_next)))), ==(old(_dryad_S6#0, sll_min_key(list_next)), old(_dryad_S7#1, sll_min_key(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_min_key(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_min_key(_dryad_S7#1, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, srtl_reach(list_next)))), ==(old(_dryad_S6#0, srtl(list_next)), old(_dryad_S7#1, srtl(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl(_dryad_S7#1, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, srtl_reach(list_next)))), ==(old(_dryad_S6#0, srtl_reach(list_next)), old(_dryad_S7#1, srtl_reach(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl_reach(_dryad_S7#1, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(local.l2)))), ==(old(_dryad_S6#0, sll_keys(local.l2)), old(_dryad_S7#1, sll_keys(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_keys(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_keys(_dryad_S7#1, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(local.l2)))), ==(old(_dryad_S6#0, sll_list_len_next(local.l2)), old(_dryad_S7#1, sll_list_len_next(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_list_len_next(_dryad_S7#1, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, rsrtl_reach(local.l2)))), ==(old(_dryad_S6#0, rsrtl(local.l2)), old(_dryad_S7#1, rsrtl(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl(_dryad_S7#1, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, rsrtl_reach(local.l2)))), ==(old(_dryad_S6#0, rsrtl_reach(local.l2)), old(_dryad_S7#1, rsrtl_reach(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl_reach(_dryad_S7#1, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(local.l2)))), ==(old(_dryad_S6#0, sll(local.l2)), old(_dryad_S7#1, sll(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node)) == F#sll(_dryad_S7#1, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(local.l2)))), ==(old(_dryad_S6#0, sll_reach(local.l2)), old(_dryad_S7#1, sll_reach(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_reach(_dryad_S7#1, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(local.l2)))), ==(old(_dryad_S6#0, sll_max_key(local.l2)), old(_dryad_S7#1, sll_max_key(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_max_key(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_max_key(_dryad_S7#1, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(local.l2)))), ==(old(_dryad_S6#0, sll_min_key(local.l2)), old(_dryad_S7#1, sll_min_key(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_min_key(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_min_key(_dryad_S7#1, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, srtl_reach(local.l2)))), ==(old(_dryad_S6#0, srtl(local.l2)), old(_dryad_S7#1, srtl(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl(_dryad_S7#1, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, srtl_reach(local.l2)))), ==(old(_dryad_S6#0, srtl_reach(local.l2)), old(_dryad_S7#1, srtl_reach(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl_reach(_dryad_S7#1, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(local.l1)))), ==(old(_dryad_S6#0, sll_keys(local.l1)), old(_dryad_S7#1, sll_keys(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_keys(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_keys(_dryad_S7#1, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(local.l1)))), ==(old(_dryad_S6#0, sll_list_len_next(local.l1)), old(_dryad_S7#1, sll_list_len_next(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_list_len_next(_dryad_S7#1, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, rsrtl_reach(local.l1)))), ==(old(_dryad_S6#0, rsrtl(local.l1)), old(_dryad_S7#1, rsrtl(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl(_dryad_S7#1, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, rsrtl_reach(local.l1)))), ==(old(_dryad_S6#0, rsrtl_reach(local.l1)), old(_dryad_S7#1, rsrtl_reach(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl_reach(_dryad_S7#1, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(local.l1)))), ==(old(_dryad_S6#0, sll(local.l1)), old(_dryad_S7#1, sll(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node)) == F#sll(_dryad_S7#1, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(local.l1)))), ==(old(_dryad_S6#0, sll_reach(local.l1)), old(_dryad_S7#1, sll_reach(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_reach(_dryad_S7#1, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(local.l1)))), ==(old(_dryad_S6#0, sll_max_key(local.l1)), old(_dryad_S7#1, sll_max_key(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_max_key(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_max_key(_dryad_S7#1, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(local.l1)))), ==(old(_dryad_S6#0, sll_min_key(local.l1)), old(_dryad_S7#1, sll_min_key(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_min_key(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_min_key(_dryad_S7#1, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, srtl_reach(local.l1)))), ==(old(_dryad_S6#0, srtl(local.l1)), old(_dryad_S7#1, srtl(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl(_dryad_S7#1, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, srtl_reach(local.l1)))), ==(old(_dryad_S6#0, srtl_reach(local.l1)), old(_dryad_S7#1, srtl_reach(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl_reach(_dryad_S7#1, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#0, sll_lseg(list, l)), old(_dryad_S7#1, sll_lseg(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#0, sll_lseg_reach(list, l)), old(_dryad_S7#1, sll_lseg_reach(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_reach(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#0, sll_lseg_keys(list, l)), old(_dryad_S7#1, sll_lseg_keys(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_keys(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_keys(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#0, sll_lseg_len_next(list, l)), old(_dryad_S7#1, sll_lseg_len_next(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_len_next(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#0, sll_lseg_max_key(list, l)), old(_dryad_S7#1, sll_lseg_max_key(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_max_key(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_max_key(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#0, sll_lseg_min_key(list, l)), old(_dryad_S7#1, sll_lseg_min_key(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_min_key(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_min_key(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, srtl_lseg_reach(list, l)))), ==(old(_dryad_S6#0, srtl_lseg(list, l)), old(_dryad_S7#1, srtl_lseg(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_lseg(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#srtl_lseg(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, srtl_lseg_reach(list, l)))), ==(old(_dryad_S6#0, srtl_lseg_reach(list, l)), old(_dryad_S7#1, srtl_lseg_reach(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_lseg_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#srtl_lseg_reach(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(l, list2)), ==(*((list2->key)), old(_dryad_S6#0, *((list2->key))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(SL#list2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) == $rd_inv(_dryad_S6#0, s_node.key, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(l, list2)), @_vcc_ptr_eq_pure(*((list2->next)), old(_dryad_S6#0, *((list2->next))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(SL#list2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#0, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(l, list)), ==(*((list->key)), old(_dryad_S6#0, *((list->key))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) == $rd_inv(_dryad_S6#0, s_node.key, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(l, list)), @_vcc_ptr_eq_pure(*((list->next)), old(_dryad_S6#0, *((list->next))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#0, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(l, list_next)), ==(*((list_next->key)), old(_dryad_S6#0, *((list_next->key))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) == $rd_inv(_dryad_S6#0, s_node.key, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(l, list_next)), @_vcc_ptr_eq_pure(*((list_next->next)), old(_dryad_S6#0, *((list_next->next))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#0, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l2)), ==(*((local.l2->key)), old(_dryad_S6#0, *((local.l2->key))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) == $rd_inv(_dryad_S6#0, s_node.key, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l2)), @_vcc_ptr_eq_pure(*((local.l2->next)), old(_dryad_S6#0, *((local.l2->next))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#0, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l1)), ==(*((local.l1->key)), old(_dryad_S6#0, *((local.l1->key))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) == $rd_inv(_dryad_S6#0, s_node.key, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l1)), @_vcc_ptr_eq_pure(*((local.l1->next)), old(_dryad_S6#0, *((local.l1->next))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#0, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node);
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_keys(list2), @_vcc_intset_union(sll_keys(*((list2->next))), @_vcc_intset_singleton(*((list2->key)))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#list2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_list_len_next(list2), unchecked+(sll_list_len_next(*((list2->next))), 1))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#list2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(rsrtl(list2), &&(&&(rsrtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, rsrtl_reach(*((list2->next)))))), >=(*((list2->key)), sll_max_key(*((list2->next))))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(rsrtl_reach(list2), @_vcc_oset_union(rsrtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll(list2), &&(sll(*((list2->next))), unchecked!(@_vcc_oset_in(list2, sll_reach(*((list2->next)))))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_reach(list2), @_vcc_oset_union(sll_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_max_key(list2), @\int_max(*((list2->key)), sll_max_key(*((list2->next)))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_min_key(list2), @\int_min(*((list2->key)), sll_min_key(*((list2->next)))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(srtl(list2), &&(&&(srtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, srtl_reach(*((list2->next)))))), <=(*((list2->key)), sll_min_key(*((list2->next))))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(srtl_reach(list2), @_vcc_oset_union(srtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), &&(==(@_vcc_mutable(@state, local.l2), @_vcc_mutable(@state, *((local.l2->next)))), ==(@writes_check(local.l2), @writes_check(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> $mutable($s, $phys_ptr_cast(local.l2, ^s_node)) == $mutable($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(local.l2, ^s_node)) == $top_writable($s, #wrTime$3^3.3, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node));
                // struct s_node* l24; 
                // l24 := local.l2; 
                SL#l24 := $phys_ptr_cast(local.l2, ^s_node);
                // struct s_node* stmtexpr2#14; 
                // stmtexpr2#14 := l24; 
                stmtexpr2#14 := $phys_ptr_cast(SL#l24, ^s_node);
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_pure(local.l2, *((local.l2->next)))), ==(sll_lseg(local.l2, *((local.l2->next))), &&(sll_lseg(*((local.l2->next)), *((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_lseg_reach(*((local.l2->next)), *((local.l2->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $phys_ptr_cast(local.l2, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(local.l2, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_pure(local.l2, *((local.l2->next)))), ==(sll_lseg_reach(local.l2, *((local.l2->next))), @_vcc_oset_union(sll_lseg_reach(*((local.l2->next)), *((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $phys_ptr_cast(local.l2, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(local.l2, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_pure(local.l2, *((local.l2->next)))), ==(sll_lseg_keys(local.l2, *((local.l2->next))), @_vcc_intset_union(sll_lseg_keys(*((local.l2->next)), *((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $phys_ptr_cast(local.l2, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(local.l2, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_pure(local.l2, *((local.l2->next)))), ==(sll_lseg_len_next(local.l2, *((local.l2->next))), unchecked+(sll_lseg_len_next(*((local.l2->next)), *((local.l2->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $phys_ptr_cast(local.l2, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(local.l2, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_pure(local.l2, *((local.l2->next)))), @_vcc_ptr_neq_pure(*((local.l2->next)), *((local.l2->next)))), ==(sll_lseg_max_key(local.l2, *((local.l2->next))), @\int_max(*((local.l2->key)), sll_lseg_max_key(*((local.l2->next)), *((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $phys_ptr_cast(local.l2, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(local.l2, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_pure(local.l2, *((local.l2->next)))), @_vcc_ptr_neq_pure(*((local.l2->next)), *((local.l2->next)))), ==(sll_lseg_min_key(local.l2, *((local.l2->next))), @\int_min(*((local.l2->key)), sll_lseg_min_key(*((local.l2->next)), *((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $phys_ptr_cast(local.l2, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(local.l2, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_pure(local.l2, *((local.l2->next)))), @_vcc_ptr_neq_pure(*((local.l2->next)), *((local.l2->next)))), ==(srtl_lseg(local.l2, *((local.l2->next))), &&(&&(srtl_lseg(*((local.l2->next)), *((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_lseg_reach(*((local.l2->next)), *((local.l2->next)))))), <=(*((local.l2->key)), sll_lseg_min_key(*((local.l2->next)), *((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $phys_ptr_cast(local.l2, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(local.l2, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_pure(local.l2, *((local.l2->next)))), ==(srtl_lseg_reach(local.l2, *((local.l2->next))), @_vcc_oset_union(srtl_lseg_reach(*((local.l2->next)), *((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $phys_ptr_cast(local.l2, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(local.l2, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assert @reads_check_normal((local.l2->next)); 
                assert $thread_local($s, $phys_ptr_cast(local.l2, ^s_node));
                // local.l2 := *((local.l2->next)); 
                local.l2 := $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node);
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
            }

          anon4:
            // struct s_node* l3; 
            // l3 := l; 
            SL#l3 := $phys_ptr_cast(L#l, ^s_node);
            // struct s_node* stmtexpr0#15; 
            // stmtexpr0#15 := l3; 
            stmtexpr0#15 := $phys_ptr_cast(SL#l3, ^s_node);
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_pure(l, *((l->next)))), ==(sll_lseg(l, *((l->next))), &&(sll_lseg(*((l->next)), *((l->next))), unchecked!(@_vcc_oset_in(l, sll_lseg_reach(*((l->next)), *((l->next)))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $phys_ptr_cast(L#l, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#l, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_pure(l, *((l->next)))), ==(sll_lseg_reach(l, *((l->next))), @_vcc_oset_union(sll_lseg_reach(*((l->next)), *((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $phys_ptr_cast(L#l, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#l, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_pure(l, *((l->next)))), ==(sll_lseg_keys(l, *((l->next))), @_vcc_intset_union(sll_lseg_keys(*((l->next)), *((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $phys_ptr_cast(L#l, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#l, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_pure(l, *((l->next)))), ==(sll_lseg_len_next(l, *((l->next))), unchecked+(sll_lseg_len_next(*((l->next)), *((l->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $phys_ptr_cast(L#l, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#l, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_pure(l, *((l->next)))), @_vcc_ptr_neq_pure(*((l->next)), *((l->next)))), ==(sll_lseg_max_key(l, *((l->next))), @\int_max(*((l->key)), sll_lseg_max_key(*((l->next)), *((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $phys_ptr_cast(L#l, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#l, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_pure(l, *((l->next)))), @_vcc_ptr_neq_pure(*((l->next)), *((l->next)))), ==(sll_lseg_min_key(l, *((l->next))), @\int_min(*((l->key)), sll_lseg_min_key(*((l->next)), *((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $phys_ptr_cast(L#l, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(L#l, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_pure(l, *((l->next)))), @_vcc_ptr_neq_pure(*((l->next)), *((l->next)))), ==(srtl_lseg(l, *((l->next))), &&(&&(srtl_lseg(*((l->next)), *((l->next))), unchecked!(@_vcc_oset_in(l, srtl_lseg_reach(*((l->next)), *((l->next)))))), <=(*((l->key)), sll_lseg_min_key(*((l->next)), *((l->next))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $phys_ptr_cast(L#l, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(L#l, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_pure(l, *((l->next)))), ==(srtl_lseg_reach(l, *((l->next))), @_vcc_oset_union(srtl_lseg_reach(*((l->next)), *((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $phys_ptr_cast(L#l, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(L#l, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assert @reads_check_normal((l->next)); 
            assert $thread_local($s, $phys_ptr_cast(L#l, ^s_node));
            // l := *((l->next)); 
            L#l := $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node);
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg(list, l), &&(sll_lseg(*((list->next)), l), unchecked!(@_vcc_oset_in(list, sll_lseg_reach(*((list->next)), l)))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_reach(list, l), @_vcc_oset_union(sll_lseg_reach(*((list->next)), l), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_keys(list, l), @_vcc_intset_union(sll_lseg_keys(*((list->next)), l), @_vcc_intset_singleton(*((list->key)))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_len_next(list, l), unchecked+(sll_lseg_len_next(*((list->next)), l), 1))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(sll_lseg_max_key(list, l), @\int_max(*((list->key)), sll_lseg_max_key(*((list->next)), l)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(sll_lseg_min_key(list, l), @\int_min(*((list->key)), sll_lseg_min_key(*((list->next)), l)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(srtl_lseg(list, l), &&(&&(srtl_lseg(*((list->next)), l), unchecked!(@_vcc_oset_in(list, srtl_lseg_reach(*((list->next)), l)))), <=(*((list->key)), sll_lseg_min_key(*((list->next)), l))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(srtl_lseg_reach(list, l), @_vcc_oset_union(srtl_lseg_reach(*((list->next)), l), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
            // _math \state _dryad_S6#2; 
            // _dryad_S6#2 := @_vcc_current_state(@state); 
            _dryad_S6#2 := $current_state($s);
            // _math \state stmtexpr1#16; 
            // stmtexpr1#16 := _dryad_S6#2; 
            stmtexpr1#16 := _dryad_S6#2;
            // assert @prim_writes_check((l->next)); 
            assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#l, ^s_node), s_node.next));
            // *(l->next) := (struct s_node*)@null; 
            call $write_int(s_node.next, $phys_ptr_cast(L#l, ^s_node), $ptr_to_int($phys_ptr_cast($null, ^s_node)));
            assume $full_stop_ext(#tok$3^80.3, $s);
            // _math \state _dryad_S7#3; 
            // _dryad_S7#3 := @_vcc_current_state(@state); 
            _dryad_S7#3 := $current_state($s);
            // _math \state stmtexpr2#17; 
            // stmtexpr2#17 := _dryad_S7#3; 
            stmtexpr2#17 := _dryad_S7#3;
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(l3)))), ==(old(_dryad_S6#2, sll_keys(l3)), old(_dryad_S7#3, sll_keys(l3)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node))) ==> F#sll_keys(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node)) == F#sll_keys(_dryad_S7#3, $phys_ptr_cast(SL#l3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(l3)))), ==(old(_dryad_S6#2, sll_list_len_next(l3)), old(_dryad_S7#3, sll_list_len_next(l3)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node)) == F#sll_list_len_next(_dryad_S7#3, $phys_ptr_cast(SL#l3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, rsrtl_reach(l3)))), ==(old(_dryad_S6#2, rsrtl(l3)), old(_dryad_S7#3, rsrtl(l3)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node))) ==> F#rsrtl(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node)) == F#rsrtl(_dryad_S7#3, $phys_ptr_cast(SL#l3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, rsrtl_reach(l3)))), ==(old(_dryad_S6#2, rsrtl_reach(l3)), old(_dryad_S7#3, rsrtl_reach(l3)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node)) == F#rsrtl_reach(_dryad_S7#3, $phys_ptr_cast(SL#l3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(l3)))), ==(old(_dryad_S6#2, sll(l3)), old(_dryad_S7#3, sll(l3)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node))) ==> F#sll(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node)) == F#sll(_dryad_S7#3, $phys_ptr_cast(SL#l3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(l3)))), ==(old(_dryad_S6#2, sll_reach(l3)), old(_dryad_S7#3, sll_reach(l3)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node))) ==> F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node)) == F#sll_reach(_dryad_S7#3, $phys_ptr_cast(SL#l3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(l3)))), ==(old(_dryad_S6#2, sll_max_key(l3)), old(_dryad_S7#3, sll_max_key(l3)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node))) ==> F#sll_max_key(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node)) == F#sll_max_key(_dryad_S7#3, $phys_ptr_cast(SL#l3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(l3)))), ==(old(_dryad_S6#2, sll_min_key(l3)), old(_dryad_S7#3, sll_min_key(l3)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node))) ==> F#sll_min_key(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node)) == F#sll_min_key(_dryad_S7#3, $phys_ptr_cast(SL#l3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_reach(l3)))), ==(old(_dryad_S6#2, srtl(l3)), old(_dryad_S7#3, srtl(l3)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node))) ==> F#srtl(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node)) == F#srtl(_dryad_S7#3, $phys_ptr_cast(SL#l3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_reach(l3)))), ==(old(_dryad_S6#2, srtl_reach(l3)), old(_dryad_S7#3, srtl_reach(l3)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node))) ==> F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node)) == F#srtl_reach(_dryad_S7#3, $phys_ptr_cast(SL#l3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list2)))), ==(old(_dryad_S6#2, sll_keys(list2)), old(_dryad_S7#3, sll_keys(list2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_keys(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_keys(_dryad_S7#3, $phys_ptr_cast(SL#list2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list2)))), ==(old(_dryad_S6#2, sll_list_len_next(list2)), old(_dryad_S7#3, sll_list_len_next(list2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_list_len_next(_dryad_S7#3, $phys_ptr_cast(SL#list2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, rsrtl_reach(list2)))), ==(old(_dryad_S6#2, rsrtl(list2)), old(_dryad_S7#3, rsrtl(list2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#rsrtl(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node)) == F#rsrtl(_dryad_S7#3, $phys_ptr_cast(SL#list2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, rsrtl_reach(list2)))), ==(old(_dryad_S6#2, rsrtl_reach(list2)), old(_dryad_S7#3, rsrtl_reach(list2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node)) == F#rsrtl_reach(_dryad_S7#3, $phys_ptr_cast(SL#list2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list2)))), ==(old(_dryad_S6#2, sll(list2)), old(_dryad_S7#3, sll(list2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll(_dryad_S7#3, $phys_ptr_cast(SL#list2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list2)))), ==(old(_dryad_S6#2, sll_reach(list2)), old(_dryad_S7#3, sll_reach(list2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_reach(_dryad_S7#3, $phys_ptr_cast(SL#list2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list2)))), ==(old(_dryad_S6#2, sll_max_key(list2)), old(_dryad_S7#3, sll_max_key(list2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_max_key(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_max_key(_dryad_S7#3, $phys_ptr_cast(SL#list2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list2)))), ==(old(_dryad_S6#2, sll_min_key(list2)), old(_dryad_S7#3, sll_min_key(list2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_min_key(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_min_key(_dryad_S7#3, $phys_ptr_cast(SL#list2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_reach(list2)))), ==(old(_dryad_S6#2, srtl(list2)), old(_dryad_S7#3, srtl(list2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#srtl(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node)) == F#srtl(_dryad_S7#3, $phys_ptr_cast(SL#list2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_reach(list2)))), ==(old(_dryad_S6#2, srtl_reach(list2)), old(_dryad_S7#3, srtl_reach(list2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node)) == F#srtl_reach(_dryad_S7#3, $phys_ptr_cast(SL#list2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list)))), ==(old(_dryad_S6#2, sll_keys(list)), old(_dryad_S7#3, sll_keys(list)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_keys(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node)) == F#sll_keys(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list)))), ==(old(_dryad_S6#2, sll_list_len_next(list)), old(_dryad_S7#3, sll_list_len_next(list)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node)) == F#sll_list_len_next(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, rsrtl_reach(list)))), ==(old(_dryad_S6#2, rsrtl(list)), old(_dryad_S7#3, rsrtl(list)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node))) ==> F#rsrtl(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node)) == F#rsrtl(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, rsrtl_reach(list)))), ==(old(_dryad_S6#2, rsrtl_reach(list)), old(_dryad_S7#3, rsrtl_reach(list)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node)) == F#rsrtl_reach(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list)))), ==(old(_dryad_S6#2, sll(list)), old(_dryad_S7#3, sll(list)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node)) == F#sll(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list)))), ==(old(_dryad_S6#2, sll_reach(list)), old(_dryad_S7#3, sll_reach(list)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node)) == F#sll_reach(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list)))), ==(old(_dryad_S6#2, sll_max_key(list)), old(_dryad_S7#3, sll_max_key(list)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_max_key(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node)) == F#sll_max_key(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list)))), ==(old(_dryad_S6#2, sll_min_key(list)), old(_dryad_S7#3, sll_min_key(list)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_min_key(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node)) == F#sll_min_key(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_reach(list)))), ==(old(_dryad_S6#2, srtl(list)), old(_dryad_S7#3, srtl(list)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node))) ==> F#srtl(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node)) == F#srtl(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_reach(list)))), ==(old(_dryad_S6#2, srtl_reach(list)), old(_dryad_S7#3, srtl_reach(list)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node))) ==> F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node)) == F#srtl_reach(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list_next)))), ==(old(_dryad_S6#2, sll_keys(list_next)), old(_dryad_S7#3, sll_keys(list_next)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_keys(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_keys(_dryad_S7#3, $phys_ptr_cast(L#list_next, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list_next)))), ==(old(_dryad_S6#2, sll_list_len_next(list_next)), old(_dryad_S7#3, sll_list_len_next(list_next)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_list_len_next(_dryad_S7#3, $phys_ptr_cast(L#list_next, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, rsrtl_reach(list_next)))), ==(old(_dryad_S6#2, rsrtl(list_next)), old(_dryad_S7#3, rsrtl(list_next)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl(_dryad_S7#3, $phys_ptr_cast(L#list_next, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, rsrtl_reach(list_next)))), ==(old(_dryad_S6#2, rsrtl_reach(list_next)), old(_dryad_S7#3, rsrtl_reach(list_next)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl_reach(_dryad_S7#3, $phys_ptr_cast(L#list_next, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list_next)))), ==(old(_dryad_S6#2, sll(list_next)), old(_dryad_S7#3, sll(list_next)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll(_dryad_S7#3, $phys_ptr_cast(L#list_next, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list_next)))), ==(old(_dryad_S6#2, sll_reach(list_next)), old(_dryad_S7#3, sll_reach(list_next)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_reach(_dryad_S7#3, $phys_ptr_cast(L#list_next, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list_next)))), ==(old(_dryad_S6#2, sll_max_key(list_next)), old(_dryad_S7#3, sll_max_key(list_next)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_max_key(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_max_key(_dryad_S7#3, $phys_ptr_cast(L#list_next, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list_next)))), ==(old(_dryad_S6#2, sll_min_key(list_next)), old(_dryad_S7#3, sll_min_key(list_next)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_min_key(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_min_key(_dryad_S7#3, $phys_ptr_cast(L#list_next, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_reach(list_next)))), ==(old(_dryad_S6#2, srtl(list_next)), old(_dryad_S7#3, srtl(list_next)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl(_dryad_S7#3, $phys_ptr_cast(L#list_next, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_reach(list_next)))), ==(old(_dryad_S6#2, srtl_reach(list_next)), old(_dryad_S7#3, srtl_reach(list_next)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl_reach(_dryad_S7#3, $phys_ptr_cast(L#list_next, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(local.l2)))), ==(old(_dryad_S6#2, sll_keys(local.l2)), old(_dryad_S7#3, sll_keys(local.l2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_keys(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_keys(_dryad_S7#3, $phys_ptr_cast(local.l2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(local.l2)))), ==(old(_dryad_S6#2, sll_list_len_next(local.l2)), old(_dryad_S7#3, sll_list_len_next(local.l2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_list_len_next(_dryad_S7#3, $phys_ptr_cast(local.l2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, rsrtl_reach(local.l2)))), ==(old(_dryad_S6#2, rsrtl(local.l2)), old(_dryad_S7#3, rsrtl(local.l2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl(_dryad_S7#3, $phys_ptr_cast(local.l2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, rsrtl_reach(local.l2)))), ==(old(_dryad_S6#2, rsrtl_reach(local.l2)), old(_dryad_S7#3, rsrtl_reach(local.l2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl_reach(_dryad_S7#3, $phys_ptr_cast(local.l2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(local.l2)))), ==(old(_dryad_S6#2, sll(local.l2)), old(_dryad_S7#3, sll(local.l2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll(_dryad_S7#3, $phys_ptr_cast(local.l2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(local.l2)))), ==(old(_dryad_S6#2, sll_reach(local.l2)), old(_dryad_S7#3, sll_reach(local.l2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_reach(_dryad_S7#3, $phys_ptr_cast(local.l2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(local.l2)))), ==(old(_dryad_S6#2, sll_max_key(local.l2)), old(_dryad_S7#3, sll_max_key(local.l2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_max_key(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_max_key(_dryad_S7#3, $phys_ptr_cast(local.l2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(local.l2)))), ==(old(_dryad_S6#2, sll_min_key(local.l2)), old(_dryad_S7#3, sll_min_key(local.l2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_min_key(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_min_key(_dryad_S7#3, $phys_ptr_cast(local.l2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_reach(local.l2)))), ==(old(_dryad_S6#2, srtl(local.l2)), old(_dryad_S7#3, srtl(local.l2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl(_dryad_S7#3, $phys_ptr_cast(local.l2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_reach(local.l2)))), ==(old(_dryad_S6#2, srtl_reach(local.l2)), old(_dryad_S7#3, srtl_reach(local.l2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl_reach(_dryad_S7#3, $phys_ptr_cast(local.l2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(local.l1)))), ==(old(_dryad_S6#2, sll_keys(local.l1)), old(_dryad_S7#3, sll_keys(local.l1)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_keys(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_keys(_dryad_S7#3, $phys_ptr_cast(local.l1, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(local.l1)))), ==(old(_dryad_S6#2, sll_list_len_next(local.l1)), old(_dryad_S7#3, sll_list_len_next(local.l1)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_list_len_next(_dryad_S7#3, $phys_ptr_cast(local.l1, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, rsrtl_reach(local.l1)))), ==(old(_dryad_S6#2, rsrtl(local.l1)), old(_dryad_S7#3, rsrtl(local.l1)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl(_dryad_S7#3, $phys_ptr_cast(local.l1, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, rsrtl_reach(local.l1)))), ==(old(_dryad_S6#2, rsrtl_reach(local.l1)), old(_dryad_S7#3, rsrtl_reach(local.l1)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl_reach(_dryad_S7#3, $phys_ptr_cast(local.l1, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(local.l1)))), ==(old(_dryad_S6#2, sll(local.l1)), old(_dryad_S7#3, sll(local.l1)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll(_dryad_S7#3, $phys_ptr_cast(local.l1, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(local.l1)))), ==(old(_dryad_S6#2, sll_reach(local.l1)), old(_dryad_S7#3, sll_reach(local.l1)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_reach(_dryad_S7#3, $phys_ptr_cast(local.l1, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(local.l1)))), ==(old(_dryad_S6#2, sll_max_key(local.l1)), old(_dryad_S7#3, sll_max_key(local.l1)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_max_key(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_max_key(_dryad_S7#3, $phys_ptr_cast(local.l1, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(local.l1)))), ==(old(_dryad_S6#2, sll_min_key(local.l1)), old(_dryad_S7#3, sll_min_key(local.l1)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_min_key(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_min_key(_dryad_S7#3, $phys_ptr_cast(local.l1, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_reach(local.l1)))), ==(old(_dryad_S6#2, srtl(local.l1)), old(_dryad_S7#3, srtl(local.l1)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl(_dryad_S7#3, $phys_ptr_cast(local.l1, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_reach(local.l1)))), ==(old(_dryad_S6#2, srtl_reach(local.l1)), old(_dryad_S7#3, srtl_reach(local.l1)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl_reach(_dryad_S7#3, $phys_ptr_cast(local.l1, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#2, sll_lseg(list, l)), old(_dryad_S7#3, sll_lseg(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#2, sll_lseg_reach(list, l)), old(_dryad_S7#3, sll_lseg_reach(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_reach(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#2, sll_lseg_keys(list, l)), old(_dryad_S7#3, sll_lseg_keys(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_keys(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_keys(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#2, sll_lseg_len_next(list, l)), old(_dryad_S7#3, sll_lseg_len_next(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_len_next(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#2, sll_lseg_max_key(list, l)), old(_dryad_S7#3, sll_lseg_max_key(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_max_key(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_max_key(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#2, sll_lseg_min_key(list, l)), old(_dryad_S7#3, sll_lseg_min_key(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_min_key(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_min_key(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_lseg_reach(list, l)))), ==(old(_dryad_S6#2, srtl_lseg(list, l)), old(_dryad_S7#3, srtl_lseg(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_lseg(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#srtl_lseg(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_lseg_reach(list, l)))), ==(old(_dryad_S6#2, srtl_lseg_reach(list, l)), old(_dryad_S7#3, srtl_lseg_reach(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#srtl_lseg_reach(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#2, sll_lseg(list, l)), old(_dryad_S7#3, sll_lseg(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#2, sll_lseg_reach(list, l)), old(_dryad_S7#3, sll_lseg_reach(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_reach(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#2, sll_lseg_keys(list, l)), old(_dryad_S7#3, sll_lseg_keys(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_keys(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_keys(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#2, sll_lseg_len_next(list, l)), old(_dryad_S7#3, sll_lseg_len_next(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_len_next(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#2, sll_lseg_max_key(list, l)), old(_dryad_S7#3, sll_lseg_max_key(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_max_key(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_max_key(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#2, sll_lseg_min_key(list, l)), old(_dryad_S7#3, sll_lseg_min_key(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_min_key(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_min_key(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_lseg_reach(list, l)))), ==(old(_dryad_S6#2, srtl_lseg(list, l)), old(_dryad_S7#3, srtl_lseg(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_lseg(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#srtl_lseg(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_lseg_reach(list, l)))), ==(old(_dryad_S6#2, srtl_lseg_reach(list, l)), old(_dryad_S7#3, srtl_lseg_reach(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#srtl_lseg_reach(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(l, l3)), ==(*((l3->key)), old(_dryad_S6#2, *((l3->key))))); 
            assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(SL#l3, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l3, ^s_node)) == $rd_inv(_dryad_S6#2, s_node.key, $phys_ptr_cast(SL#l3, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(l, l3)), @_vcc_ptr_eq_pure(*((l3->next)), old(_dryad_S6#2, *((l3->next))))); 
            assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(SL#l3, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#2, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(l, list2)), ==(*((list2->key)), old(_dryad_S6#2, *((list2->key))))); 
            assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(SL#list2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) == $rd_inv(_dryad_S6#2, s_node.key, $phys_ptr_cast(SL#list2, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(l, list2)), @_vcc_ptr_eq_pure(*((list2->next)), old(_dryad_S6#2, *((list2->next))))); 
            assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(SL#list2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#2, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(l, list)), ==(*((list->key)), old(_dryad_S6#2, *((list->key))))); 
            assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) == $rd_inv(_dryad_S6#2, s_node.key, $phys_ptr_cast(L#list, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(l, list)), @_vcc_ptr_eq_pure(*((list->next)), old(_dryad_S6#2, *((list->next))))); 
            assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(l, list_next)), ==(*((list_next->key)), old(_dryad_S6#2, *((list_next->key))))); 
            assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) == $rd_inv(_dryad_S6#2, s_node.key, $phys_ptr_cast(L#list_next, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(l, list_next)), @_vcc_ptr_eq_pure(*((list_next->next)), old(_dryad_S6#2, *((list_next->next))))); 
            assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#2, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l2)), ==(*((local.l2->key)), old(_dryad_S6#2, *((local.l2->key))))); 
            assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) == $rd_inv(_dryad_S6#2, s_node.key, $phys_ptr_cast(local.l2, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l2)), @_vcc_ptr_eq_pure(*((local.l2->next)), old(_dryad_S6#2, *((local.l2->next))))); 
            assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#2, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l1)), ==(*((local.l1->key)), old(_dryad_S6#2, *((local.l1->key))))); 
            assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) == $rd_inv(_dryad_S6#2, s_node.key, $phys_ptr_cast(local.l1, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l1)), @_vcc_ptr_eq_pure(*((local.l1->next)), old(_dryad_S6#2, *((local.l1->next))))); 
            assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#2, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node);
            // assume ==>(@_vcc_ptr_neq_null(l3), ==(sll_keys(l3), @_vcc_intset_union(sll_keys(*((l3->next))), @_vcc_intset_singleton(*((l3->key)))))); 
            assume $non_null($phys_ptr_cast(SL#l3, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#l3, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l3, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l3), ==(sll_list_len_next(l3), unchecked+(sll_list_len_next(*((l3->next))), 1))); 
            assume $non_null($phys_ptr_cast(SL#l3, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#l3, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(l3), @_vcc_ptr_neq_null(*((l3->next)))), ==(rsrtl(l3), &&(&&(rsrtl(*((l3->next))), unchecked!(@_vcc_oset_in(l3, rsrtl_reach(*((l3->next)))))), >=(*((l3->key)), sll_max_key(*((l3->next))))))); 
            assume $non_null($phys_ptr_cast(SL#l3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#l3, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l3, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l3, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l3), ==(rsrtl_reach(l3), @_vcc_oset_union(rsrtl_reach(*((l3->next))), @_vcc_oset_singleton(l3)))); 
            assume $non_null($phys_ptr_cast(SL#l3, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#l3, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l3, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l3), ==(sll(l3), &&(sll(*((l3->next))), unchecked!(@_vcc_oset_in(l3, sll_reach(*((l3->next)))))))); 
            assume $non_null($phys_ptr_cast(SL#l3, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#l3, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l3, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l3), ==(sll_reach(l3), @_vcc_oset_union(sll_reach(*((l3->next))), @_vcc_oset_singleton(l3)))); 
            assume $non_null($phys_ptr_cast(SL#l3, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#l3, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l3, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l3), @_vcc_ptr_neq_null(*((l3->next)))), ==(sll_max_key(l3), @\int_max(*((l3->key)), sll_max_key(*((l3->next)))))); 
            assume $non_null($phys_ptr_cast(SL#l3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#l3, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l3, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l3), @_vcc_ptr_neq_null(*((l3->next)))), ==(sll_min_key(l3), @\int_min(*((l3->key)), sll_min_key(*((l3->next)))))); 
            assume $non_null($phys_ptr_cast(SL#l3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#l3, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l3, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l3), @_vcc_ptr_neq_null(*((l3->next)))), ==(srtl(l3), &&(&&(srtl(*((l3->next))), unchecked!(@_vcc_oset_in(l3, srtl_reach(*((l3->next)))))), <=(*((l3->key)), sll_min_key(*((l3->next))))))); 
            assume $non_null($phys_ptr_cast(SL#l3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#l3, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l3, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l3, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l3), ==(srtl_reach(l3), @_vcc_oset_union(srtl_reach(*((l3->next))), @_vcc_oset_singleton(l3)))); 
            assume $non_null($phys_ptr_cast(SL#l3, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#l3, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l3, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_keys(list2), @_vcc_intset_union(sll_keys(*((list2->next))), @_vcc_intset_singleton(*((list2->key)))))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#list2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_list_len_next(list2), unchecked+(sll_list_len_next(*((list2->next))), 1))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#list2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(rsrtl(list2), &&(&&(rsrtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, rsrtl_reach(*((list2->next)))))), >=(*((list2->key)), sll_max_key(*((list2->next))))))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list2), ==(rsrtl_reach(list2), @_vcc_oset_union(rsrtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll(list2), &&(sll(*((list2->next))), unchecked!(@_vcc_oset_in(list2, sll_reach(*((list2->next)))))))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_reach(list2), @_vcc_oset_union(sll_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_max_key(list2), @\int_max(*((list2->key)), sll_max_key(*((list2->next)))))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_min_key(list2), @\int_min(*((list2->key)), sll_min_key(*((list2->next)))))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(srtl(list2), &&(&&(srtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, srtl_reach(*((list2->next)))))), <=(*((list2->key)), sll_min_key(*((list2->next))))))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list2), ==(srtl_reach(list2), @_vcc_oset_union(srtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
        }
        else
        {
          anon5:
            // assert @_vcc_possibly_unreachable; 
            assert {:PossiblyUnreachable true} true;
            // goto #break_2; 
            goto #break_2;
        }

      #continue_2:
        assume true;
// INV:LOOPTAIL
    }

  anon10:
    assume $full_stop_ext(#tok$3^33.2, $s);

  #break_2:
    // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_keys(list2), @_vcc_intset_union(sll_keys(*((list2->next))), @_vcc_intset_singleton(*((list2->key)))))); 
    assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#list2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_list_len_next(list2), unchecked+(sll_list_len_next(*((list2->next))), 1))); 
    assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#list2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(rsrtl(list2), &&(&&(rsrtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, rsrtl_reach(*((list2->next)))))), >=(*((list2->key)), sll_max_key(*((list2->next))))))); 
    assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list2), ==(rsrtl_reach(list2), @_vcc_oset_union(rsrtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
    assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll(list2), &&(sll(*((list2->next))), unchecked!(@_vcc_oset_in(list2, sll_reach(*((list2->next)))))))); 
    assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_reach(list2), @_vcc_oset_union(sll_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
    assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_max_key(list2), @\int_max(*((list2->key)), sll_max_key(*((list2->next)))))); 
    assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_min_key(list2), @\int_min(*((list2->key)), sll_min_key(*((list2->next)))))); 
    assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(srtl(list2), &&(&&(srtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, srtl_reach(*((list2->next)))))), <=(*((list2->key)), sll_min_key(*((list2->next))))))); 
    assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list2), ==(srtl_reach(list2), @_vcc_oset_union(srtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
    assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    assume true;
    // if (@_vcc_ptr_neq_null(local.l1)) ...
    if ($non_null($phys_ptr_cast(local.l1, ^s_node)))
    {
      anon7:
        // _math \state _dryad_S6#4; 
        // _dryad_S6#4 := @_vcc_current_state(@state); 
        _dryad_S6#4 := $current_state($s);
        // _math \state stmtexpr0#18; 
        // stmtexpr0#18 := _dryad_S6#4; 
        stmtexpr0#18 := _dryad_S6#4;
        // assert @prim_writes_check((l->next)); 
        assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#l, ^s_node), s_node.next));
        // *(l->next) := local.l1; 
        call $write_int(s_node.next, $phys_ptr_cast(L#l, ^s_node), $ptr_to_int($phys_ptr_cast(local.l1, ^s_node)));
        assume $full_stop_ext(#tok$3^83.3, $s);
        // _math \state _dryad_S7#5; 
        // _dryad_S7#5 := @_vcc_current_state(@state); 
        _dryad_S7#5 := $current_state($s);
        // _math \state stmtexpr1#19; 
        // stmtexpr1#19 := _dryad_S7#5; 
        stmtexpr1#19 := _dryad_S7#5;
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list2)))), ==(old(_dryad_S6#4, sll_keys(list2)), old(_dryad_S7#5, sll_keys(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_keys(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_keys(_dryad_S7#5, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list2)))), ==(old(_dryad_S6#4, sll_list_len_next(list2)), old(_dryad_S7#5, sll_list_len_next(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_list_len_next(_dryad_S7#5, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, rsrtl_reach(list2)))), ==(old(_dryad_S6#4, rsrtl(list2)), old(_dryad_S7#5, rsrtl(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#rsrtl(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node)) == F#rsrtl(_dryad_S7#5, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, rsrtl_reach(list2)))), ==(old(_dryad_S6#4, rsrtl_reach(list2)), old(_dryad_S7#5, rsrtl_reach(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node)) == F#rsrtl_reach(_dryad_S7#5, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list2)))), ==(old(_dryad_S6#4, sll(list2)), old(_dryad_S7#5, sll(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll(_dryad_S7#5, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list2)))), ==(old(_dryad_S6#4, sll_reach(list2)), old(_dryad_S7#5, sll_reach(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_reach(_dryad_S7#5, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list2)))), ==(old(_dryad_S6#4, sll_max_key(list2)), old(_dryad_S7#5, sll_max_key(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_max_key(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_max_key(_dryad_S7#5, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list2)))), ==(old(_dryad_S6#4, sll_min_key(list2)), old(_dryad_S7#5, sll_min_key(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_min_key(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_min_key(_dryad_S7#5, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, srtl_reach(list2)))), ==(old(_dryad_S6#4, srtl(list2)), old(_dryad_S7#5, srtl(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#srtl(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node)) == F#srtl(_dryad_S7#5, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, srtl_reach(list2)))), ==(old(_dryad_S6#4, srtl_reach(list2)), old(_dryad_S7#5, srtl_reach(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node)) == F#srtl_reach(_dryad_S7#5, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list)))), ==(old(_dryad_S6#4, sll_keys(list)), old(_dryad_S7#5, sll_keys(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_keys(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node)) == F#sll_keys(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list)))), ==(old(_dryad_S6#4, sll_list_len_next(list)), old(_dryad_S7#5, sll_list_len_next(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node)) == F#sll_list_len_next(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, rsrtl_reach(list)))), ==(old(_dryad_S6#4, rsrtl(list)), old(_dryad_S7#5, rsrtl(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node))) ==> F#rsrtl(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node)) == F#rsrtl(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, rsrtl_reach(list)))), ==(old(_dryad_S6#4, rsrtl_reach(list)), old(_dryad_S7#5, rsrtl_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node)) == F#rsrtl_reach(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list)))), ==(old(_dryad_S6#4, sll(list)), old(_dryad_S7#5, sll(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node)) == F#sll(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list)))), ==(old(_dryad_S6#4, sll_reach(list)), old(_dryad_S7#5, sll_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node)) == F#sll_reach(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list)))), ==(old(_dryad_S6#4, sll_max_key(list)), old(_dryad_S7#5, sll_max_key(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_max_key(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node)) == F#sll_max_key(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list)))), ==(old(_dryad_S6#4, sll_min_key(list)), old(_dryad_S7#5, sll_min_key(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_min_key(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node)) == F#sll_min_key(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, srtl_reach(list)))), ==(old(_dryad_S6#4, srtl(list)), old(_dryad_S7#5, srtl(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node))) ==> F#srtl(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node)) == F#srtl(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, srtl_reach(list)))), ==(old(_dryad_S6#4, srtl_reach(list)), old(_dryad_S7#5, srtl_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node))) ==> F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node)) == F#srtl_reach(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list_next)))), ==(old(_dryad_S6#4, sll_keys(list_next)), old(_dryad_S7#5, sll_keys(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_keys(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_keys(_dryad_S7#5, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list_next)))), ==(old(_dryad_S6#4, sll_list_len_next(list_next)), old(_dryad_S7#5, sll_list_len_next(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_list_len_next(_dryad_S7#5, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, rsrtl_reach(list_next)))), ==(old(_dryad_S6#4, rsrtl(list_next)), old(_dryad_S7#5, rsrtl(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl(_dryad_S7#5, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, rsrtl_reach(list_next)))), ==(old(_dryad_S6#4, rsrtl_reach(list_next)), old(_dryad_S7#5, rsrtl_reach(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl_reach(_dryad_S7#5, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list_next)))), ==(old(_dryad_S6#4, sll(list_next)), old(_dryad_S7#5, sll(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll(_dryad_S7#5, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list_next)))), ==(old(_dryad_S6#4, sll_reach(list_next)), old(_dryad_S7#5, sll_reach(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_reach(_dryad_S7#5, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list_next)))), ==(old(_dryad_S6#4, sll_max_key(list_next)), old(_dryad_S7#5, sll_max_key(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_max_key(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_max_key(_dryad_S7#5, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list_next)))), ==(old(_dryad_S6#4, sll_min_key(list_next)), old(_dryad_S7#5, sll_min_key(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_min_key(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_min_key(_dryad_S7#5, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, srtl_reach(list_next)))), ==(old(_dryad_S6#4, srtl(list_next)), old(_dryad_S7#5, srtl(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl(_dryad_S7#5, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, srtl_reach(list_next)))), ==(old(_dryad_S6#4, srtl_reach(list_next)), old(_dryad_S7#5, srtl_reach(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl_reach(_dryad_S7#5, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(local.l2)))), ==(old(_dryad_S6#4, sll_keys(local.l2)), old(_dryad_S7#5, sll_keys(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_keys(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_keys(_dryad_S7#5, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(local.l2)))), ==(old(_dryad_S6#4, sll_list_len_next(local.l2)), old(_dryad_S7#5, sll_list_len_next(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_list_len_next(_dryad_S7#5, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, rsrtl_reach(local.l2)))), ==(old(_dryad_S6#4, rsrtl(local.l2)), old(_dryad_S7#5, rsrtl(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl(_dryad_S7#5, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, rsrtl_reach(local.l2)))), ==(old(_dryad_S6#4, rsrtl_reach(local.l2)), old(_dryad_S7#5, rsrtl_reach(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl_reach(_dryad_S7#5, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(local.l2)))), ==(old(_dryad_S6#4, sll(local.l2)), old(_dryad_S7#5, sll(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node)) == F#sll(_dryad_S7#5, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(local.l2)))), ==(old(_dryad_S6#4, sll_reach(local.l2)), old(_dryad_S7#5, sll_reach(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_reach(_dryad_S7#5, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(local.l2)))), ==(old(_dryad_S6#4, sll_max_key(local.l2)), old(_dryad_S7#5, sll_max_key(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_max_key(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_max_key(_dryad_S7#5, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(local.l2)))), ==(old(_dryad_S6#4, sll_min_key(local.l2)), old(_dryad_S7#5, sll_min_key(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_min_key(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_min_key(_dryad_S7#5, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, srtl_reach(local.l2)))), ==(old(_dryad_S6#4, srtl(local.l2)), old(_dryad_S7#5, srtl(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl(_dryad_S7#5, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, srtl_reach(local.l2)))), ==(old(_dryad_S6#4, srtl_reach(local.l2)), old(_dryad_S7#5, srtl_reach(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl_reach(_dryad_S7#5, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(local.l1)))), ==(old(_dryad_S6#4, sll_keys(local.l1)), old(_dryad_S7#5, sll_keys(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_keys(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_keys(_dryad_S7#5, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(local.l1)))), ==(old(_dryad_S6#4, sll_list_len_next(local.l1)), old(_dryad_S7#5, sll_list_len_next(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_list_len_next(_dryad_S7#5, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, rsrtl_reach(local.l1)))), ==(old(_dryad_S6#4, rsrtl(local.l1)), old(_dryad_S7#5, rsrtl(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl(_dryad_S7#5, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, rsrtl_reach(local.l1)))), ==(old(_dryad_S6#4, rsrtl_reach(local.l1)), old(_dryad_S7#5, rsrtl_reach(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl_reach(_dryad_S7#5, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(local.l1)))), ==(old(_dryad_S6#4, sll(local.l1)), old(_dryad_S7#5, sll(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node)) == F#sll(_dryad_S7#5, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(local.l1)))), ==(old(_dryad_S6#4, sll_reach(local.l1)), old(_dryad_S7#5, sll_reach(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_reach(_dryad_S7#5, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(local.l1)))), ==(old(_dryad_S6#4, sll_max_key(local.l1)), old(_dryad_S7#5, sll_max_key(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_max_key(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_max_key(_dryad_S7#5, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(local.l1)))), ==(old(_dryad_S6#4, sll_min_key(local.l1)), old(_dryad_S7#5, sll_min_key(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_min_key(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_min_key(_dryad_S7#5, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, srtl_reach(local.l1)))), ==(old(_dryad_S6#4, srtl(local.l1)), old(_dryad_S7#5, srtl(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl(_dryad_S7#5, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, srtl_reach(local.l1)))), ==(old(_dryad_S6#4, srtl_reach(local.l1)), old(_dryad_S7#5, srtl_reach(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl_reach(_dryad_S7#5, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#4, sll_lseg(list, l)), old(_dryad_S7#5, sll_lseg(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#4, sll_lseg_reach(list, l)), old(_dryad_S7#5, sll_lseg_reach(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_reach(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#4, sll_lseg_keys(list, l)), old(_dryad_S7#5, sll_lseg_keys(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_keys(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_keys(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#4, sll_lseg_len_next(list, l)), old(_dryad_S7#5, sll_lseg_len_next(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_len_next(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#4, sll_lseg_max_key(list, l)), old(_dryad_S7#5, sll_lseg_max_key(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_max_key(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_max_key(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#4, sll_lseg_min_key(list, l)), old(_dryad_S7#5, sll_lseg_min_key(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_min_key(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_min_key(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, srtl_lseg_reach(list, l)))), ==(old(_dryad_S6#4, srtl_lseg(list, l)), old(_dryad_S7#5, srtl_lseg(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_lseg(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#srtl_lseg(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, srtl_lseg_reach(list, l)))), ==(old(_dryad_S6#4, srtl_lseg_reach(list, l)), old(_dryad_S7#5, srtl_lseg_reach(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_lseg_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#srtl_lseg_reach(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(l, list2)), ==(*((list2->key)), old(_dryad_S6#4, *((list2->key))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(SL#list2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) == $rd_inv(_dryad_S6#4, s_node.key, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(l, list2)), @_vcc_ptr_eq_pure(*((list2->next)), old(_dryad_S6#4, *((list2->next))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(SL#list2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#4, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(l, list)), ==(*((list->key)), old(_dryad_S6#4, *((list->key))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) == $rd_inv(_dryad_S6#4, s_node.key, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(l, list)), @_vcc_ptr_eq_pure(*((list->next)), old(_dryad_S6#4, *((list->next))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#4, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(l, list_next)), ==(*((list_next->key)), old(_dryad_S6#4, *((list_next->key))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) == $rd_inv(_dryad_S6#4, s_node.key, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(l, list_next)), @_vcc_ptr_eq_pure(*((list_next->next)), old(_dryad_S6#4, *((list_next->next))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#4, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l2)), ==(*((local.l2->key)), old(_dryad_S6#4, *((local.l2->key))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) == $rd_inv(_dryad_S6#4, s_node.key, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l2)), @_vcc_ptr_eq_pure(*((local.l2->next)), old(_dryad_S6#4, *((local.l2->next))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#4, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l1)), ==(*((local.l1->key)), old(_dryad_S6#4, *((local.l1->key))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) == $rd_inv(_dryad_S6#4, s_node.key, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l1)), @_vcc_ptr_eq_pure(*((local.l1->next)), old(_dryad_S6#4, *((local.l1->next))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#4, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node);
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_keys(list2), @_vcc_intset_union(sll_keys(*((list2->next))), @_vcc_intset_singleton(*((list2->key)))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#list2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_list_len_next(list2), unchecked+(sll_list_len_next(*((list2->next))), 1))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#list2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(rsrtl(list2), &&(&&(rsrtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, rsrtl_reach(*((list2->next)))))), >=(*((list2->key)), sll_max_key(*((list2->next))))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(rsrtl_reach(list2), @_vcc_oset_union(rsrtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll(list2), &&(sll(*((list2->next))), unchecked!(@_vcc_oset_in(list2, sll_reach(*((list2->next)))))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_reach(list2), @_vcc_oset_union(sll_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_max_key(list2), @\int_max(*((list2->key)), sll_max_key(*((list2->next)))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_min_key(list2), @\int_min(*((list2->key)), sll_min_key(*((list2->next)))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(srtl(list2), &&(&&(srtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, srtl_reach(*((list2->next)))))), <=(*((list2->key)), sll_min_key(*((list2->next))))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(srtl_reach(list2), @_vcc_oset_union(srtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    }
    else
    {
      anon8:
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_keys(list2), @_vcc_intset_union(sll_keys(*((list2->next))), @_vcc_intset_singleton(*((list2->key)))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#list2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_list_len_next(list2), unchecked+(sll_list_len_next(*((list2->next))), 1))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#list2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(rsrtl(list2), &&(&&(rsrtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, rsrtl_reach(*((list2->next)))))), >=(*((list2->key)), sll_max_key(*((list2->next))))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(rsrtl_reach(list2), @_vcc_oset_union(rsrtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll(list2), &&(sll(*((list2->next))), unchecked!(@_vcc_oset_in(list2, sll_reach(*((list2->next)))))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_reach(list2), @_vcc_oset_union(sll_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_max_key(list2), @\int_max(*((list2->key)), sll_max_key(*((list2->next)))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_min_key(list2), @\int_min(*((list2->key)), sll_min_key(*((list2->next)))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(srtl(list2), &&(&&(srtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, srtl_reach(*((list2->next)))))), <=(*((list2->key)), sll_min_key(*((list2->next))))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(srtl_reach(list2), @_vcc_oset_union(srtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg(list, l), &&(sll_lseg(*((list->next)), l), unchecked!(@_vcc_oset_in(list, sll_lseg_reach(*((list->next)), l)))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_reach(list, l), @_vcc_oset_union(sll_lseg_reach(*((list->next)), l), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_keys(list, l), @_vcc_intset_union(sll_lseg_keys(*((list->next)), l), @_vcc_intset_singleton(*((list->key)))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_len_next(list, l), unchecked+(sll_lseg_len_next(*((list->next)), l), 1))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), 1);
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(sll_lseg_max_key(list, l), @\int_max(*((list->key)), sll_lseg_max_key(*((list->next)), l)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(sll_lseg_min_key(list, l), @\int_min(*((list->key)), sll_lseg_min_key(*((list->next)), l)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(srtl_lseg(list, l), &&(&&(srtl_lseg(*((list->next)), l), unchecked!(@_vcc_oset_in(list, srtl_lseg_reach(*((list->next)), l)))), <=(*((list->key)), sll_lseg_min_key(*((list->next)), l))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(srtl_lseg_reach(list, l), @_vcc_oset_union(srtl_lseg_reach(*((list->next)), l), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
        // _math \state _dryad_S6#6; 
        // _dryad_S6#6 := @_vcc_current_state(@state); 
        _dryad_S6#6 := $current_state($s);
        // _math \state stmtexpr0#20; 
        // stmtexpr0#20 := _dryad_S6#6; 
        stmtexpr0#20 := _dryad_S6#6;
        // assert @prim_writes_check((l->next)); 
        assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#l, ^s_node), s_node.next));
        // *(l->next) := local.l2; 
        call $write_int(s_node.next, $phys_ptr_cast(L#l, ^s_node), $ptr_to_int($phys_ptr_cast(local.l2, ^s_node)));
        assume $full_stop_ext(#tok$3^85.3, $s);
        // _math \state _dryad_S7#7; 
        // _dryad_S7#7 := @_vcc_current_state(@state); 
        _dryad_S7#7 := $current_state($s);
        // _math \state stmtexpr1#21; 
        // stmtexpr1#21 := _dryad_S7#7; 
        stmtexpr1#21 := _dryad_S7#7;
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list2)))), ==(old(_dryad_S6#6, sll_keys(list2)), old(_dryad_S7#7, sll_keys(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_keys(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_keys(_dryad_S7#7, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list2)))), ==(old(_dryad_S6#6, sll_list_len_next(list2)), old(_dryad_S7#7, sll_list_len_next(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_list_len_next(_dryad_S7#7, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, rsrtl_reach(list2)))), ==(old(_dryad_S6#6, rsrtl(list2)), old(_dryad_S7#7, rsrtl(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#rsrtl(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node)) == F#rsrtl(_dryad_S7#7, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, rsrtl_reach(list2)))), ==(old(_dryad_S6#6, rsrtl_reach(list2)), old(_dryad_S7#7, rsrtl_reach(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node)) == F#rsrtl_reach(_dryad_S7#7, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list2)))), ==(old(_dryad_S6#6, sll(list2)), old(_dryad_S7#7, sll(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll(_dryad_S7#7, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list2)))), ==(old(_dryad_S6#6, sll_reach(list2)), old(_dryad_S7#7, sll_reach(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_reach(_dryad_S7#7, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list2)))), ==(old(_dryad_S6#6, sll_max_key(list2)), old(_dryad_S7#7, sll_max_key(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_max_key(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_max_key(_dryad_S7#7, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list2)))), ==(old(_dryad_S6#6, sll_min_key(list2)), old(_dryad_S7#7, sll_min_key(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_min_key(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_min_key(_dryad_S7#7, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, srtl_reach(list2)))), ==(old(_dryad_S6#6, srtl(list2)), old(_dryad_S7#7, srtl(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#srtl(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node)) == F#srtl(_dryad_S7#7, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, srtl_reach(list2)))), ==(old(_dryad_S6#6, srtl_reach(list2)), old(_dryad_S7#7, srtl_reach(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node)) == F#srtl_reach(_dryad_S7#7, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list)))), ==(old(_dryad_S6#6, sll_keys(list)), old(_dryad_S7#7, sll_keys(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_keys(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node)) == F#sll_keys(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list)))), ==(old(_dryad_S6#6, sll_list_len_next(list)), old(_dryad_S7#7, sll_list_len_next(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node)) == F#sll_list_len_next(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, rsrtl_reach(list)))), ==(old(_dryad_S6#6, rsrtl(list)), old(_dryad_S7#7, rsrtl(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node))) ==> F#rsrtl(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node)) == F#rsrtl(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, rsrtl_reach(list)))), ==(old(_dryad_S6#6, rsrtl_reach(list)), old(_dryad_S7#7, rsrtl_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node)) == F#rsrtl_reach(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list)))), ==(old(_dryad_S6#6, sll(list)), old(_dryad_S7#7, sll(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node)) == F#sll(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list)))), ==(old(_dryad_S6#6, sll_reach(list)), old(_dryad_S7#7, sll_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node)) == F#sll_reach(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list)))), ==(old(_dryad_S6#6, sll_max_key(list)), old(_dryad_S7#7, sll_max_key(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_max_key(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node)) == F#sll_max_key(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list)))), ==(old(_dryad_S6#6, sll_min_key(list)), old(_dryad_S7#7, sll_min_key(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_min_key(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node)) == F#sll_min_key(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, srtl_reach(list)))), ==(old(_dryad_S6#6, srtl(list)), old(_dryad_S7#7, srtl(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node))) ==> F#srtl(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node)) == F#srtl(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, srtl_reach(list)))), ==(old(_dryad_S6#6, srtl_reach(list)), old(_dryad_S7#7, srtl_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node))) ==> F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node)) == F#srtl_reach(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list_next)))), ==(old(_dryad_S6#6, sll_keys(list_next)), old(_dryad_S7#7, sll_keys(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_keys(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_keys(_dryad_S7#7, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list_next)))), ==(old(_dryad_S6#6, sll_list_len_next(list_next)), old(_dryad_S7#7, sll_list_len_next(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_list_len_next(_dryad_S7#7, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, rsrtl_reach(list_next)))), ==(old(_dryad_S6#6, rsrtl(list_next)), old(_dryad_S7#7, rsrtl(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl(_dryad_S7#7, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, rsrtl_reach(list_next)))), ==(old(_dryad_S6#6, rsrtl_reach(list_next)), old(_dryad_S7#7, rsrtl_reach(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl_reach(_dryad_S7#7, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list_next)))), ==(old(_dryad_S6#6, sll(list_next)), old(_dryad_S7#7, sll(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll(_dryad_S7#7, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list_next)))), ==(old(_dryad_S6#6, sll_reach(list_next)), old(_dryad_S7#7, sll_reach(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_reach(_dryad_S7#7, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list_next)))), ==(old(_dryad_S6#6, sll_max_key(list_next)), old(_dryad_S7#7, sll_max_key(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_max_key(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_max_key(_dryad_S7#7, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list_next)))), ==(old(_dryad_S6#6, sll_min_key(list_next)), old(_dryad_S7#7, sll_min_key(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_min_key(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_min_key(_dryad_S7#7, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, srtl_reach(list_next)))), ==(old(_dryad_S6#6, srtl(list_next)), old(_dryad_S7#7, srtl(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl(_dryad_S7#7, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, srtl_reach(list_next)))), ==(old(_dryad_S6#6, srtl_reach(list_next)), old(_dryad_S7#7, srtl_reach(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl_reach(_dryad_S7#7, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(local.l2)))), ==(old(_dryad_S6#6, sll_keys(local.l2)), old(_dryad_S7#7, sll_keys(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_keys(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_keys(_dryad_S7#7, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(local.l2)))), ==(old(_dryad_S6#6, sll_list_len_next(local.l2)), old(_dryad_S7#7, sll_list_len_next(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_list_len_next(_dryad_S7#7, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, rsrtl_reach(local.l2)))), ==(old(_dryad_S6#6, rsrtl(local.l2)), old(_dryad_S7#7, rsrtl(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl(_dryad_S7#7, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, rsrtl_reach(local.l2)))), ==(old(_dryad_S6#6, rsrtl_reach(local.l2)), old(_dryad_S7#7, rsrtl_reach(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl_reach(_dryad_S7#7, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(local.l2)))), ==(old(_dryad_S6#6, sll(local.l2)), old(_dryad_S7#7, sll(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node)) == F#sll(_dryad_S7#7, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(local.l2)))), ==(old(_dryad_S6#6, sll_reach(local.l2)), old(_dryad_S7#7, sll_reach(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_reach(_dryad_S7#7, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(local.l2)))), ==(old(_dryad_S6#6, sll_max_key(local.l2)), old(_dryad_S7#7, sll_max_key(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_max_key(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_max_key(_dryad_S7#7, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(local.l2)))), ==(old(_dryad_S6#6, sll_min_key(local.l2)), old(_dryad_S7#7, sll_min_key(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_min_key(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_min_key(_dryad_S7#7, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, srtl_reach(local.l2)))), ==(old(_dryad_S6#6, srtl(local.l2)), old(_dryad_S7#7, srtl(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl(_dryad_S7#7, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, srtl_reach(local.l2)))), ==(old(_dryad_S6#6, srtl_reach(local.l2)), old(_dryad_S7#7, srtl_reach(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl_reach(_dryad_S7#7, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(local.l1)))), ==(old(_dryad_S6#6, sll_keys(local.l1)), old(_dryad_S7#7, sll_keys(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_keys(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_keys(_dryad_S7#7, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(local.l1)))), ==(old(_dryad_S6#6, sll_list_len_next(local.l1)), old(_dryad_S7#7, sll_list_len_next(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_list_len_next(_dryad_S7#7, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, rsrtl_reach(local.l1)))), ==(old(_dryad_S6#6, rsrtl(local.l1)), old(_dryad_S7#7, rsrtl(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl(_dryad_S7#7, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, rsrtl_reach(local.l1)))), ==(old(_dryad_S6#6, rsrtl_reach(local.l1)), old(_dryad_S7#7, rsrtl_reach(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl_reach(_dryad_S7#7, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(local.l1)))), ==(old(_dryad_S6#6, sll(local.l1)), old(_dryad_S7#7, sll(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node)) == F#sll(_dryad_S7#7, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(local.l1)))), ==(old(_dryad_S6#6, sll_reach(local.l1)), old(_dryad_S7#7, sll_reach(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_reach(_dryad_S7#7, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(local.l1)))), ==(old(_dryad_S6#6, sll_max_key(local.l1)), old(_dryad_S7#7, sll_max_key(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_max_key(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_max_key(_dryad_S7#7, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(local.l1)))), ==(old(_dryad_S6#6, sll_min_key(local.l1)), old(_dryad_S7#7, sll_min_key(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_min_key(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_min_key(_dryad_S7#7, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, srtl_reach(local.l1)))), ==(old(_dryad_S6#6, srtl(local.l1)), old(_dryad_S7#7, srtl(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl(_dryad_S7#7, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, srtl_reach(local.l1)))), ==(old(_dryad_S6#6, srtl_reach(local.l1)), old(_dryad_S7#7, srtl_reach(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl_reach(_dryad_S7#7, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#6, sll_lseg(list, l)), old(_dryad_S7#7, sll_lseg(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#6, sll_lseg_reach(list, l)), old(_dryad_S7#7, sll_lseg_reach(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_reach(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#6, sll_lseg_keys(list, l)), old(_dryad_S7#7, sll_lseg_keys(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_keys(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_keys(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#6, sll_lseg_len_next(list, l)), old(_dryad_S7#7, sll_lseg_len_next(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_len_next(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#6, sll_lseg_max_key(list, l)), old(_dryad_S7#7, sll_lseg_max_key(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_max_key(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_max_key(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#6, sll_lseg_min_key(list, l)), old(_dryad_S7#7, sll_lseg_min_key(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_min_key(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_min_key(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, srtl_lseg_reach(list, l)))), ==(old(_dryad_S6#6, srtl_lseg(list, l)), old(_dryad_S7#7, srtl_lseg(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_lseg(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#srtl_lseg(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, srtl_lseg_reach(list, l)))), ==(old(_dryad_S6#6, srtl_lseg_reach(list, l)), old(_dryad_S7#7, srtl_lseg_reach(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_lseg_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#srtl_lseg_reach(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(l, list2)), ==(*((list2->key)), old(_dryad_S6#6, *((list2->key))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(SL#list2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) == $rd_inv(_dryad_S6#6, s_node.key, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(l, list2)), @_vcc_ptr_eq_pure(*((list2->next)), old(_dryad_S6#6, *((list2->next))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(SL#list2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#6, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(l, list)), ==(*((list->key)), old(_dryad_S6#6, *((list->key))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) == $rd_inv(_dryad_S6#6, s_node.key, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(l, list)), @_vcc_ptr_eq_pure(*((list->next)), old(_dryad_S6#6, *((list->next))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#6, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(l, list_next)), ==(*((list_next->key)), old(_dryad_S6#6, *((list_next->key))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) == $rd_inv(_dryad_S6#6, s_node.key, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(l, list_next)), @_vcc_ptr_eq_pure(*((list_next->next)), old(_dryad_S6#6, *((list_next->next))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#6, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l2)), ==(*((local.l2->key)), old(_dryad_S6#6, *((local.l2->key))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) == $rd_inv(_dryad_S6#6, s_node.key, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l2)), @_vcc_ptr_eq_pure(*((local.l2->next)), old(_dryad_S6#6, *((local.l2->next))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#6, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l1)), ==(*((local.l1->key)), old(_dryad_S6#6, *((local.l1->key))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) == $rd_inv(_dryad_S6#6, s_node.key, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l1)), @_vcc_ptr_eq_pure(*((local.l1->next)), old(_dryad_S6#6, *((local.l1->next))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#6, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node);
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_keys(list2), @_vcc_intset_union(sll_keys(*((list2->next))), @_vcc_intset_singleton(*((list2->key)))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#list2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_list_len_next(list2), unchecked+(sll_list_len_next(*((list2->next))), 1))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#list2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(rsrtl(list2), &&(&&(rsrtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, rsrtl_reach(*((list2->next)))))), >=(*((list2->key)), sll_max_key(*((list2->next))))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(rsrtl_reach(list2), @_vcc_oset_union(rsrtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll(list2), &&(sll(*((list2->next))), unchecked!(@_vcc_oset_in(list2, sll_reach(*((list2->next)))))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_reach(list2), @_vcc_oset_union(sll_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_max_key(list2), @\int_max(*((list2->key)), sll_max_key(*((list2->next)))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_min_key(list2), @\int_min(*((list2->key)), sll_min_key(*((list2->next)))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(srtl(list2), &&(&&(srtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, srtl_reach(*((list2->next)))))), <=(*((list2->key)), sll_min_key(*((list2->next))))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(srtl_reach(list2), @_vcc_oset_union(srtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    }

  anon11:
    // return list_next; 
    $result := $phys_ptr_cast(L#list_next, ^s_node);
    assume true;
    assert $position_marker();
    goto #exit;

  anon12:
    // skip

  #exit:
}



axiom (forall Q#__vcc_state$2^687.9#tc2#1700: $state, Q#x$2^687.9#dt1#1624: $ptr :: {:weight 10} { F#srtl(Q#__vcc_state$2^687.9#tc2#1700, $phys_ptr_cast(Q#x$2^687.9#dt1#1624, ^s_node)) } { F#sll(Q#__vcc_state$2^687.9#tc2#1700, $phys_ptr_cast(Q#x$2^687.9#dt1#1624, ^s_node)) } $good_state(Q#__vcc_state$2^687.9#tc2#1700) && true ==> F#srtl(Q#__vcc_state$2^687.9#tc2#1700, $phys_ptr_cast(Q#x$2^687.9#dt1#1624, ^s_node)) ==> F#sll(Q#__vcc_state$2^687.9#tc2#1700, $phys_ptr_cast(Q#x$2^687.9#dt1#1624, ^s_node)));

axiom (forall Q#__vcc_state$2^688.9#tc2#1701: $state, Q#x$2^688.9#dt1#1625: $ptr :: {:weight 10} { F#rsrtl(Q#__vcc_state$2^688.9#tc2#1701, $phys_ptr_cast(Q#x$2^688.9#dt1#1625, ^s_node)) } { F#sll(Q#__vcc_state$2^688.9#tc2#1701, $phys_ptr_cast(Q#x$2^688.9#dt1#1625, ^s_node)) } $good_state(Q#__vcc_state$2^688.9#tc2#1701) && true ==> F#rsrtl(Q#__vcc_state$2^688.9#tc2#1701, $phys_ptr_cast(Q#x$2^688.9#dt1#1625, ^s_node)) ==> F#sll(Q#__vcc_state$2^688.9#tc2#1701, $phys_ptr_cast(Q#x$2^688.9#dt1#1625, ^s_node)));

axiom (forall Q#__vcc_state$2^689.9#tc2#1702: $state, Q#x$2^689.9#dt1#1626: $ptr :: {:weight 10} { F#sll_reach(Q#__vcc_state$2^689.9#tc2#1702, $phys_ptr_cast(Q#x$2^689.9#dt1#1626, ^s_node)) } { F#srtl_reach(Q#__vcc_state$2^689.9#tc2#1702, $phys_ptr_cast(Q#x$2^689.9#dt1#1626, ^s_node)) } $good_state(Q#__vcc_state$2^689.9#tc2#1702) && true ==> F#sll_reach(Q#__vcc_state$2^689.9#tc2#1702, $phys_ptr_cast(Q#x$2^689.9#dt1#1626, ^s_node)) == F#srtl_reach(Q#__vcc_state$2^689.9#tc2#1702, $phys_ptr_cast(Q#x$2^689.9#dt1#1626, ^s_node)));

axiom (forall Q#__vcc_state$2^690.9#tc2#1703: $state, Q#x$2^690.9#dt1#1627: $ptr :: {:weight 10} { F#srtl_reach(Q#__vcc_state$2^690.9#tc2#1703, $phys_ptr_cast(Q#x$2^690.9#dt1#1627, ^s_node)) } { F#rsrtl_reach(Q#__vcc_state$2^690.9#tc2#1703, $phys_ptr_cast(Q#x$2^690.9#dt1#1627, ^s_node)) } $good_state(Q#__vcc_state$2^690.9#tc2#1703) && true ==> F#srtl_reach(Q#__vcc_state$2^690.9#tc2#1703, $phys_ptr_cast(Q#x$2^690.9#dt1#1627, ^s_node)) == F#rsrtl_reach(Q#__vcc_state$2^690.9#tc2#1703, $phys_ptr_cast(Q#x$2^690.9#dt1#1627, ^s_node)));

axiom (forall Q#__vcc_state$2^691.9#tc2#1704: $state, Q#x$2^691.9#dt1#1628: $ptr, Q#y$2^691.9#dt1#1629: $ptr :: {:weight 10} { F#sll_lseg_reach(Q#__vcc_state$2^691.9#tc2#1704, $phys_ptr_cast(Q#x$2^691.9#dt1#1628, ^s_node), $phys_ptr_cast(Q#y$2^691.9#dt1#1629, ^s_node)) } { F#srtl_lseg_reach(Q#__vcc_state$2^691.9#tc2#1704, $phys_ptr_cast(Q#x$2^691.9#dt1#1628, ^s_node), $phys_ptr_cast(Q#y$2^691.9#dt1#1629, ^s_node)) } $good_state(Q#__vcc_state$2^691.9#tc2#1704) && true ==> F#sll_lseg_reach(Q#__vcc_state$2^691.9#tc2#1704, $phys_ptr_cast(Q#x$2^691.9#dt1#1628, ^s_node), $phys_ptr_cast(Q#y$2^691.9#dt1#1629, ^s_node)) == F#srtl_lseg_reach(Q#__vcc_state$2^691.9#tc2#1704, $phys_ptr_cast(Q#x$2^691.9#dt1#1628, ^s_node), $phys_ptr_cast(Q#y$2^691.9#dt1#1629, ^s_node)));

const unique l#public: $label;

axiom $type_code_is(2, ^$#state_t);

const unique #tok$3^85.3: $token;

const unique #tok$3^83.3: $token;

const unique #tok$3^80.3: $token;

const unique #tok$3^74.4: $token;

const unique #tok$3^70.4: $token;

const unique #tok$3^33.2: $token;

const unique #tok$3^27.2: $token;

const unique #tok$3^26.2: $token;

const unique #tok$3^18.9: $token;

const unique #tok$3^13.56: $token;

const unique #tok$3^13.41: $token;

const unique #tok$3^12.62: $token;

const unique #tok$3^12.48: $token;

const unique #tok$3^11.23: $token;

const unique #tok$3^10.23: $token;

const unique #tok$4^0.0: $token;

const unique #file^?3Cno?20file?3E: $token;

axiom $file_name_is(4, #file^?3Cno?20file?3E);

const unique #tok$3^3.3: $token;

const unique #file^Z?3A?5CInvariantSynthesis?5CVCDryad?5Cvcc?5CHost?5Cbin?5CTests?5Cgslist?5Cg_slist_sort_merge.c: $token;

axiom $file_name_is(3, #file^Z?3A?5CInvariantSynthesis?5CVCDryad?5Cvcc?5CHost?5Cbin?5CTests?5Cgslist?5Cg_slist_sort_merge.c);

const unique #file^z?3A?5Cinvariantsynthesis?5Cvcdryad?5Cvcc?5Chost?5Cbin?5Ctests?5Cgslist?5Cdryad_gslist.h: $token;

axiom $file_name_is(2, #file^z?3A?5Cinvariantsynthesis?5Cvcdryad?5Cvcc?5Chost?5Cbin?5Ctests?5Cgslist?5Cdryad_gslist.h);

const unique #file^Z?3A?5CInvariantSynthesis?5CVCDryad?2Dbin?5CHeaders?5Cvccp.h: $token;

axiom $file_name_is(1, #file^Z?3A?5CInvariantSynthesis?5CVCDryad?2Dbin?5CHeaders?5Cvccp.h);

const unique #distTp1: $ctype;

axiom #distTp1 == $ptr_to(^s_node);

