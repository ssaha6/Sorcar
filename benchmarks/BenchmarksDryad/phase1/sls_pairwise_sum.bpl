
const {:existential true} b0000 : bool;
const {:existential true} b0001 : bool;
const {:existential true} b0002 : bool;
const {:existential true} b0003 : bool;
const {:existential true} b0004 : bool;
const {:existential true} b0005 : bool;
const {:existential true} b0006 : bool;
const {:existential true} b0007 : bool;
const {:existential true} b0008 : bool;
const {:existential true} b0009 : bool;
const {:existential true} b0010 : bool;
const {:existential true} b0011 : bool;
const {:existential true} b0012 : bool;
const {:existential true} b0013 : bool;
const {:existential true} b0014 : bool;
const {:existential true} b0015 : bool;
const {:existential true} b0016 : bool;
const {:existential true} b0017 : bool;
const {:existential true} b0018 : bool;
const {:existential true} b0019 : bool;
const {:existential true} b0020 : bool;
const {:existential true} b0021 : bool;
const {:existential true} b0022 : bool;
const {:existential true} b0023 : bool;
const {:existential true} b0024 : bool;
const {:existential true} b0025 : bool;
const {:existential true} b0026 : bool;
const {:existential true} b0027 : bool;
const {:existential true} b0028 : bool;
const {:existential true} b0029 : bool;
const {:existential true} b0030 : bool;
const {:existential true} b0031 : bool;
const {:existential true} b0032 : bool;
const {:existential true} b0033 : bool;
const {:existential true} b0034 : bool;
const {:existential true} b0035 : bool;
const {:existential true} b0036 : bool;
const {:existential true} b0037 : bool;
const {:existential true} b0038 : bool;
const {:existential true} b0039 : bool;
const {:existential true} b0040 : bool;
const {:existential true} b0041 : bool;
const {:existential true} b0042 : bool;
const {:existential true} b0043 : bool;
const {:existential true} b0044 : bool;
const {:existential true} b0045 : bool;
const {:existential true} b0046 : bool;
const {:existential true} b0047 : bool;
const {:existential true} b0048 : bool;
const {:existential true} b0049 : bool;
const {:existential true} b0050 : bool;
const {:existential true} b0051 : bool;
const {:existential true} b0052 : bool;
const {:existential true} b0053 : bool;
const {:existential true} b0054 : bool;
const {:existential true} b0055 : bool;
const {:existential true} b0056 : bool;
const {:existential true} b0057 : bool;
const {:existential true} b0058 : bool;
const {:existential true} b0059 : bool;
const {:existential true} b0060 : bool;
const {:existential true} b0061 : bool;
const {:existential true} b0062 : bool;
const {:existential true} b0063 : bool;
const {:existential true} b0064 : bool;
const {:existential true} b0065 : bool;
const {:existential true} b0066 : bool;
const {:existential true} b0067 : bool;
const {:existential true} b0068 : bool;
const {:existential true} b0069 : bool;
const {:existential true} b0070 : bool;
const {:existential true} b0071 : bool;
const {:existential true} b0072 : bool;
const {:existential true} b0073 : bool;
const {:existential true} b0074 : bool;
const {:existential true} b0075 : bool;
const {:existential true} b0076 : bool;
const {:existential true} b0077 : bool;
const {:existential true} b0078 : bool;
const {:existential true} b0079 : bool;
const {:existential true} b0080 : bool;
const {:existential true} b0081 : bool;
const {:existential true} b0082 : bool;
const {:existential true} b0083 : bool;
const {:existential true} b0084 : bool;
const {:existential true} b0085 : bool;
const {:existential true} b0086 : bool;
const {:existential true} b0087 : bool;
const {:existential true} b0088 : bool;
const {:existential true} b0089 : bool;
const {:existential true} b0090 : bool;
const {:existential true} b0091 : bool;
const {:existential true} b0092 : bool;
const {:existential true} b0093 : bool;
const {:existential true} b0094 : bool;
const {:existential true} b0095 : bool;
const {:existential true} b0096 : bool;
const {:existential true} b0097 : bool;
const {:existential true} b0098 : bool;
const {:existential true} b0099 : bool;
const {:existential true} b0100 : bool;
const {:existential true} b0101 : bool;
const {:existential true} b0102 : bool;
const {:existential true} b0103 : bool;
const {:existential true} b0104 : bool;
const {:existential true} b0105 : bool;
const {:existential true} b0106 : bool;
const {:existential true} b0107 : bool;
const {:existential true} b0108 : bool;
const {:existential true} b0109 : bool;
const {:existential true} b0110 : bool;
const {:existential true} b0111 : bool;
const {:existential true} b0112 : bool;
const {:existential true} b0113 : bool;
const {:existential true} b0114 : bool;
const {:existential true} b0115 : bool;
const {:existential true} b0116 : bool;
const {:existential true} b0117 : bool;
const {:existential true} b0118 : bool;
const {:existential true} b0119 : bool;
const {:existential true} b0120 : bool;
const {:existential true} b0121 : bool;
const {:existential true} b0122 : bool;
const {:existential true} b0123 : bool;
const {:existential true} b0124 : bool;
const {:existential true} b0125 : bool;
const {:existential true} b0126 : bool;
const {:existential true} b0127 : bool;
const {:existential true} b0128 : bool;
const {:existential true} b0129 : bool;
const {:existential true} b0130 : bool;
const {:existential true} b0131 : bool;
const {:existential true} b0132 : bool;
const {:existential true} b0133 : bool;
const {:existential true} b0134 : bool;
const {:existential true} b0135 : bool;
const {:existential true} b0136 : bool;
const {:existential true} b0137 : bool;
const {:existential true} b0138 : bool;
const {:existential true} b0139 : bool;
const {:existential true} b0140 : bool;
const {:existential true} b0141 : bool;
const {:existential true} b0142 : bool;
const {:existential true} b0143 : bool;
const {:existential true} b0144 : bool;
const {:existential true} b0145 : bool;
const {:existential true} b0146 : bool;
const {:existential true} b0147 : bool;
const {:existential true} b0148 : bool;
const {:existential true} b0149 : bool;
const {:existential true} b0150 : bool;
const {:existential true} b0151 : bool;
const {:existential true} b0152 : bool;
const {:existential true} b0153 : bool;
const {:existential true} b0154 : bool;
const {:existential true} b0155 : bool;
const {:existential true} b0156 : bool;
const {:existential true} b0157 : bool;
const {:existential true} b0158 : bool;
const {:existential true} b0159 : bool;
const {:existential true} b0160 : bool;
const {:existential true} b0161 : bool;
const {:existential true} b0162 : bool;
const {:existential true} b0163 : bool;
const {:existential true} b0164 : bool;
const {:existential true} b0165 : bool;
const {:existential true} b0166 : bool;
const {:existential true} b0167 : bool;
const {:existential true} b0168 : bool;
const {:existential true} b0169 : bool;
const {:existential true} b0170 : bool;
const {:existential true} b0171 : bool;
const {:existential true} b0172 : bool;
const {:existential true} b0173 : bool;
const {:existential true} b0174 : bool;
const {:existential true} b0175 : bool;
const {:existential true} b0176 : bool;
const {:existential true} b0177 : bool;
const {:existential true} b0178 : bool;
const {:existential true} b0179 : bool;
const {:existential true} b0180 : bool;
const {:existential true} b0181 : bool;
const {:existential true} b0182 : bool;
const {:existential true} b0183 : bool;
const {:existential true} b0184 : bool;
const {:existential true} b0185 : bool;
const {:existential true} b0186 : bool;
const {:existential true} b0187 : bool;
const {:existential true} b0188 : bool;
const {:existential true} b0189 : bool;
const {:existential true} b0190 : bool;
const {:existential true} b0191 : bool;
const {:existential true} b0192 : bool;
const {:existential true} b0193 : bool;
const {:existential true} b0194 : bool;
const {:existential true} b0195 : bool;
const {:existential true} b0196 : bool;
const {:existential true} b0197 : bool;
const {:existential true} b0198 : bool;
const {:existential true} b0199 : bool;
const {:existential true} b0200 : bool;
const {:existential true} b0201 : bool;
const {:existential true} b0202 : bool;
const {:existential true} b0203 : bool;
const {:existential true} b0204 : bool;
const {:existential true} b0205 : bool;
const {:existential true} b0206 : bool;
const {:existential true} b0207 : bool;
const {:existential true} b0208 : bool;
const {:existential true} b0209 : bool;
const {:existential true} b0210 : bool;
const {:existential true} b0211 : bool;
const {:existential true} b0212 : bool;
const {:existential true} b0213 : bool;
const {:existential true} b0214 : bool;
const {:existential true} b0215 : bool;
const {:existential true} b0216 : bool;
const {:existential true} b0217 : bool;
const {:existential true} b0218 : bool;
const {:existential true} b0219 : bool;
const {:existential true} b0220 : bool;
const {:existential true} b0221 : bool;
const {:existential true} b0222 : bool;
const {:existential true} b0223 : bool;
const {:existential true} b0224 : bool;
const {:existential true} b0225 : bool;
const {:existential true} b0226 : bool;
const {:existential true} b0227 : bool;
const {:existential true} b0228 : bool;
const {:existential true} b0229 : bool;
const {:existential true} b0230 : bool;
const {:existential true} b0231 : bool;
const {:existential true} b0232 : bool;
const {:existential true} b0233 : bool;
const {:existential true} b0234 : bool;
const {:existential true} b0235 : bool;
const {:existential true} b0236 : bool;
const {:existential true} b0237 : bool;
const {:existential true} b0238 : bool;
const {:existential true} b0239 : bool;
const {:existential true} b0240 : bool;
const {:existential true} b0241 : bool;
const {:existential true} b0242 : bool;
const {:existential true} b0243 : bool;
const {:existential true} b0244 : bool;
const {:existential true} b0245 : bool;
const {:existential true} b0246 : bool;
const {:existential true} b0247 : bool;
const {:existential true} b0248 : bool;
const {:existential true} b0249 : bool;
const {:existential true} b0250 : bool;
const {:existential true} b0251 : bool;
const {:existential true} b0252 : bool;
const {:existential true} b0253 : bool;
const {:existential true} b0254 : bool;
const {:existential true} b0255 : bool;
const {:existential true} b0256 : bool;
const {:existential true} b0257 : bool;
const {:existential true} b0258 : bool;
const {:existential true} b0259 : bool;
const {:existential true} b0260 : bool;
const {:existential true} b0261 : bool;
const {:existential true} b0262 : bool;
const {:existential true} b0263 : bool;
const {:existential true} b0264 : bool;
const {:existential true} b0265 : bool;
const {:existential true} b0266 : bool;
const {:existential true} b0267 : bool;
const {:existential true} b0268 : bool;
const {:existential true} b0269 : bool;
const {:existential true} b0270 : bool;
const {:existential true} b0271 : bool;
const {:existential true} b0272 : bool;
const {:existential true} b0273 : bool;
const {:existential true} b0274 : bool;
const {:existential true} b0275 : bool;
const {:existential true} b0276 : bool;
const {:existential true} b0277 : bool;
const {:existential true} b0278 : bool;
const {:existential true} b0279 : bool;
const {:existential true} b0280 : bool;
const {:existential true} b0281 : bool;
const {:existential true} b0282 : bool;
const {:existential true} b0283 : bool;
const {:existential true} b0284 : bool;
const {:existential true} b0285 : bool;
const {:existential true} b0286 : bool;
const {:existential true} b0287 : bool;
const {:existential true} b0288 : bool;
const {:existential true} b0289 : bool;
const {:existential true} b0290 : bool;
const {:existential true} b0291 : bool;
const {:existential true} b0292 : bool;
const {:existential true} b0293 : bool;
const {:existential true} b0294 : bool;
const {:existential true} b0295 : bool;
const {:existential true} b0296 : bool;
const {:existential true} b0297 : bool;
const {:existential true} b0298 : bool;
const {:existential true} b0299 : bool;
const {:existential true} b0300 : bool;
const {:existential true} b0301 : bool;
const {:existential true} b0302 : bool;
const {:existential true} b0303 : bool;
const {:existential true} b0304 : bool;
const {:existential true} b0305 : bool;
const {:existential true} b0306 : bool;
const {:existential true} b0307 : bool;
const {:existential true} b0308 : bool;
const {:existential true} b0309 : bool;
const {:existential true} b0310 : bool;
const {:existential true} b0311 : bool;
const {:existential true} b0312 : bool;
const {:existential true} b0313 : bool;
const {:existential true} b0314 : bool;
const {:existential true} b0315 : bool;
const {:existential true} b0316 : bool;
const {:existential true} b0317 : bool;
const {:existential true} b0318 : bool;
const {:existential true} b0319 : bool;
const {:existential true} b0320 : bool;
const {:existential true} b0321 : bool;
const {:existential true} b0322 : bool;
const {:existential true} b0323 : bool;
const {:existential true} b0324 : bool;
const {:existential true} b0325 : bool;
const {:existential true} b0326 : bool;
const {:existential true} b0327 : bool;
const {:existential true} b0328 : bool;
const {:existential true} b0329 : bool;
const {:existential true} b0330 : bool;
const {:existential true} b0331 : bool;
const {:existential true} b0332 : bool;
const {:existential true} b0333 : bool;
const {:existential true} b0334 : bool;
const {:existential true} b0335 : bool;
const {:existential true} b0336 : bool;
const {:existential true} b0337 : bool;
const {:existential true} b0338 : bool;
const {:existential true} b0339 : bool;
const {:existential true} b0340 : bool;
const {:existential true} b0341 : bool;
const {:existential true} b0342 : bool;
const {:existential true} b0343 : bool;
const {:existential true} b0344 : bool;
const {:existential true} b0345 : bool;
const {:existential true} b0346 : bool;
const {:existential true} b0347 : bool;
const {:existential true} b0348 : bool;
const {:existential true} b0349 : bool;
const {:existential true} b0350 : bool;
const {:existential true} b0351 : bool;
const {:existential true} b0352 : bool;
const {:existential true} b0353 : bool;
const {:existential true} b0354 : bool;
const {:existential true} b0355 : bool;
const {:existential true} b0356 : bool;
const {:existential true} b0357 : bool;
const {:existential true} b0358 : bool;
const {:existential true} b0359 : bool;
const {:existential true} b0360 : bool;
const {:existential true} b0361 : bool;
const {:existential true} b0362 : bool;
const {:existential true} b0363 : bool;
const {:existential true} b0364 : bool;
const {:existential true} b0365 : bool;
const {:existential true} b0366 : bool;
const {:existential true} b0367 : bool;
const {:existential true} b0368 : bool;
const {:existential true} b0369 : bool;
const {:existential true} b0370 : bool;
const {:existential true} b0371 : bool;
const {:existential true} b0372 : bool;
const {:existential true} b0373 : bool;
const {:existential true} b0374 : bool;
const {:existential true} b0375 : bool;
const {:existential true} b0376 : bool;
const {:existential true} b0377 : bool;
const {:existential true} b0378 : bool;
const {:existential true} b0379 : bool;
const {:existential true} b0380 : bool;
const {:existential true} b0381 : bool;
const {:existential true} b0382 : bool;
const {:existential true} b0383 : bool;
const {:existential true} b0384 : bool;
const {:existential true} b0385 : bool;
const {:existential true} b0386 : bool;
const {:existential true} b0387 : bool;
const {:existential true} b0388 : bool;
const {:existential true} b0389 : bool;
const {:existential true} b0390 : bool;
const {:existential true} b0391 : bool;
const {:existential true} b0392 : bool;
const {:existential true} b0393 : bool;
const {:existential true} b0394 : bool;
const {:existential true} b0395 : bool;
const {:existential true} b0396 : bool;
const {:existential true} b0397 : bool;
const {:existential true} b0398 : bool;
const {:existential true} b0399 : bool;
const {:existential true} b0400 : bool;
const {:existential true} b0401 : bool;
const {:existential true} b0402 : bool;
const {:existential true} b0403 : bool;
const {:existential true} b0404 : bool;
const {:existential true} b0405 : bool;
const {:existential true} b0406 : bool;
const {:existential true} b0407 : bool;
const {:existential true} b0408 : bool;
const {:existential true} b0409 : bool;
const {:existential true} b0410 : bool;
const {:existential true} b0411 : bool;
const {:existential true} b0412 : bool;
const {:existential true} b0413 : bool;
const {:existential true} b0414 : bool;
const {:existential true} b0415 : bool;
const {:existential true} b0416 : bool;
const {:existential true} b0417 : bool;
const {:existential true} b0418 : bool;
const {:existential true} b0419 : bool;
const {:existential true} b0420 : bool;
const {:existential true} b0421 : bool;
const {:existential true} b0422 : bool;
const {:existential true} b0423 : bool;
const {:existential true} b0424 : bool;
const {:existential true} b0425 : bool;
const {:existential true} b0426 : bool;
const {:existential true} b0427 : bool;
const {:existential true} b0428 : bool;
const {:existential true} b0429 : bool;
const {:existential true} b0430 : bool;
const {:existential true} b0431 : bool;
const {:existential true} b0432 : bool;
const {:existential true} b0433 : bool;
const {:existential true} b0434 : bool;
const {:existential true} b0435 : bool;
const {:existential true} b0436 : bool;
const {:existential true} b0437 : bool;
const {:existential true} b0438 : bool;
const {:existential true} b0439 : bool;
const {:existential true} b0440 : bool;
const {:existential true} b0441 : bool;
const {:existential true} b0442 : bool;
const {:existential true} b0443 : bool;
const {:existential true} b0444 : bool;
const {:existential true} b0445 : bool;
const {:existential true} b0446 : bool;
const {:existential true} b0447 : bool;
const {:existential true} b0448 : bool;
const {:existential true} b0449 : bool;
const {:existential true} b0450 : bool;
const {:existential true} b0451 : bool;
const {:existential true} b0452 : bool;
const {:existential true} b0453 : bool;
const {:existential true} b0454 : bool;
const {:existential true} b0455 : bool;
const {:existential true} b0456 : bool;
const {:existential true} b0457 : bool;
const {:existential true} b0458 : bool;
const {:existential true} b0459 : bool;
const {:existential true} b0460 : bool;
const {:existential true} b0461 : bool;
const {:existential true} b0462 : bool;
const {:existential true} b0463 : bool;
const {:existential true} b0464 : bool;
const {:existential true} b0465 : bool;
const {:existential true} b0466 : bool;
const {:existential true} b0467 : bool;
const {:existential true} b0468 : bool;
const {:existential true} b0469 : bool;
const {:existential true} b0470 : bool;
const {:existential true} b0471 : bool;
const {:existential true} b0472 : bool;
const {:existential true} b0473 : bool;
const {:existential true} b0474 : bool;
const {:existential true} b0475 : bool;
const {:existential true} b0476 : bool;
const {:existential true} b0477 : bool;
const {:existential true} b0478 : bool;
const {:existential true} b0479 : bool;
const {:existential true} b0480 : bool;
const {:existential true} b0481 : bool;
const {:existential true} b0482 : bool;
const {:existential true} b0483 : bool;
const {:existential true} b0484 : bool;
const {:existential true} b0485 : bool;
const {:existential true} b0486 : bool;
const {:existential true} b0487 : bool;
const {:existential true} b0488 : bool;
const {:existential true} b0489 : bool;
const {:existential true} b0490 : bool;
const {:existential true} b0491 : bool;
const {:existential true} b0492 : bool;
const {:existential true} b0493 : bool;
const {:existential true} b0494 : bool;
const {:existential true} b0495 : bool;
const {:existential true} b0496 : bool;
const {:existential true} b0497 : bool;
const {:existential true} b0498 : bool;
const {:existential true} b0499 : bool;
const {:existential true} b0500 : bool;
const {:existential true} b0501 : bool;
const {:existential true} b0502 : bool;
const {:existential true} b0503 : bool;
const {:existential true} b0504 : bool;
const {:existential true} b0505 : bool;
const {:existential true} b0506 : bool;
const {:existential true} b0507 : bool;
const {:existential true} b0508 : bool;
const {:existential true} b0509 : bool;
const {:existential true} b0510 : bool;
const {:existential true} b0511 : bool;
const {:existential true} b0512 : bool;
const {:existential true} b0513 : bool;
const {:existential true} b0514 : bool;
const {:existential true} b0515 : bool;
const {:existential true} b0516 : bool;
const {:existential true} b0517 : bool;
const {:existential true} b0518 : bool;
const {:existential true} b0519 : bool;
const {:existential true} b0520 : bool;
const {:existential true} b0521 : bool;
const {:existential true} b0522 : bool;
const {:existential true} b0523 : bool;
const {:existential true} b0524 : bool;
const {:existential true} b0525 : bool;
const {:existential true} b0526 : bool;
const {:existential true} b0527 : bool;
const {:existential true} b0528 : bool;
const {:existential true} b0529 : bool;
const {:existential true} b0530 : bool;
const {:existential true} b0531 : bool;
const {:existential true} b0532 : bool;
const {:existential true} b0533 : bool;
const {:existential true} b0534 : bool;
const {:existential true} b0535 : bool;
const {:existential true} b0536 : bool;
const {:existential true} b0537 : bool;
const {:existential true} b0538 : bool;
const {:existential true} b0539 : bool;
const {:existential true} b0540 : bool;
const {:existential true} b0541 : bool;
const {:existential true} b0542 : bool;
const {:existential true} b0543 : bool;
const {:existential true} b0544 : bool;
const {:existential true} b0545 : bool;
const {:existential true} b0546 : bool;
const {:existential true} b0547 : bool;
const {:existential true} b0548 : bool;
const {:existential true} b0549 : bool;
const {:existential true} b0550 : bool;
const {:existential true} b0551 : bool;
const {:existential true} b0552 : bool;
const {:existential true} b0553 : bool;
const {:existential true} b0554 : bool;
const {:existential true} b0555 : bool;
const {:existential true} b0556 : bool;
const {:existential true} b0557 : bool;
const {:existential true} b0558 : bool;
const {:existential true} b0559 : bool;
const {:existential true} b0560 : bool;
const {:existential true} b0561 : bool;
const {:existential true} b0562 : bool;
const {:existential true} b0563 : bool;
const {:existential true} b0564 : bool;
const {:existential true} b0565 : bool;
const {:existential true} b0566 : bool;
const {:existential true} b0567 : bool;
const {:existential true} b0568 : bool;
const {:existential true} b0569 : bool;
const {:existential true} b0570 : bool;
const {:existential true} b0571 : bool;
const {:existential true} b0572 : bool;
const {:existential true} b0573 : bool;
const {:existential true} b0574 : bool;
const {:existential true} b0575 : bool;
const {:existential true} b0576 : bool;
const {:existential true} b0577 : bool;
const {:existential true} b0578 : bool;
const {:existential true} b0579 : bool;
const {:existential true} b0580 : bool;
const {:existential true} b0581 : bool;
const {:existential true} b0582 : bool;
const {:existential true} b0583 : bool;
const {:existential true} b0584 : bool;
const {:existential true} b0585 : bool;
const {:existential true} b0586 : bool;
const {:existential true} b0587 : bool;
const {:existential true} b0588 : bool;
const {:existential true} b0589 : bool;
const {:existential true} b0590 : bool;
const {:existential true} b0591 : bool;
const {:existential true} b0592 : bool;
const {:existential true} b0593 : bool;
const {:existential true} b0594 : bool;
const {:existential true} b0595 : bool;
const {:existential true} b0596 : bool;
const {:existential true} b0597 : bool;
const {:existential true} b0598 : bool;
const {:existential true} b0599 : bool;
const {:existential true} b0600 : bool;
const {:existential true} b0601 : bool;
const {:existential true} b0602 : bool;
const {:existential true} b0603 : bool;
const {:existential true} b0604 : bool;
const {:existential true} b0605 : bool;
const {:existential true} b0606 : bool;
const {:existential true} b0607 : bool;
const {:existential true} b0608 : bool;
const {:existential true} b0609 : bool;
const {:existential true} b0610 : bool;
const {:existential true} b0611 : bool;
const {:existential true} b0612 : bool;
const {:existential true} b0613 : bool;
const {:existential true} b0614 : bool;
const {:existential true} b0615 : bool;
const {:existential true} b0616 : bool;
const {:existential true} b0617 : bool;
const {:existential true} b0618 : bool;
const {:existential true} b0619 : bool;
const {:existential true} b0620 : bool;
const {:existential true} b0621 : bool;
const {:existential true} b0622 : bool;
const {:existential true} b0623 : bool;
const {:existential true} b0624 : bool;
const {:existential true} b0625 : bool;
const {:existential true} b0626 : bool;
const {:existential true} b0627 : bool;
const {:existential true} b0628 : bool;
const {:existential true} b0629 : bool;
const {:existential true} b0630 : bool;
const {:existential true} b0631 : bool;
const {:existential true} b0632 : bool;
const {:existential true} b0633 : bool;
const {:existential true} b0634 : bool;
const {:existential true} b0635 : bool;
const {:existential true} b0636 : bool;
const {:existential true} b0637 : bool;
const {:existential true} b0638 : bool;
const {:existential true} b0639 : bool;
const {:existential true} b0640 : bool;
const {:existential true} b0641 : bool;
const {:existential true} b0642 : bool;
const {:existential true} b0643 : bool;
const {:existential true} b0644 : bool;
const {:existential true} b0645 : bool;
const {:existential true} b0646 : bool;
const {:existential true} b0647 : bool;
const {:existential true} b0648 : bool;
const {:existential true} b0649 : bool;
const {:existential true} b0650 : bool;
const {:existential true} b0651 : bool;
const {:existential true} b0652 : bool;
const {:existential true} b0653 : bool;
const {:existential true} b0654 : bool;
const {:existential true} b0655 : bool;
const {:existential true} b0656 : bool;
const {:existential true} b0657 : bool;
const {:existential true} b0658 : bool;
const {:existential true} b0659 : bool;
const {:existential true} b0660 : bool;
const {:existential true} b0661 : bool;
const {:existential true} b0662 : bool;
const {:existential true} b0663 : bool;
const {:existential true} b0664 : bool;
const {:existential true} b0665 : bool;
const {:existential true} b0666 : bool;
const {:existential true} b0667 : bool;
const {:existential true} b0668 : bool;
const {:existential true} b0669 : bool;
const {:existential true} b0670 : bool;
const {:existential true} b0671 : bool;
const {:existential true} b0672 : bool;
const {:existential true} b0673 : bool;
const {:existential true} b0674 : bool;
const {:existential true} b0675 : bool;
const {:existential true} b0676 : bool;
const {:existential true} b0677 : bool;
const {:existential true} b0678 : bool;
const {:existential true} b0679 : bool;
const {:existential true} b0680 : bool;
const {:existential true} b0681 : bool;
const {:existential true} b0682 : bool;
const {:existential true} b0683 : bool;
const {:existential true} b0684 : bool;
const {:existential true} b0685 : bool;
const {:existential true} b0686 : bool;
const {:existential true} b0687 : bool;
const {:existential true} b0688 : bool;
const {:existential true} b0689 : bool;

axiom $arch_ptr_size == 8;

axiom $arch_spec_ptr_start == $max.u8;

const unique ^$##thread_id: $ctype;

axiom $def_math_type(^$##thread_id);

type $##thread_id;

const unique ^$##club: $ctype;

axiom $def_math_type(^$##club);

type $##club;

const unique ^s_node: $ctype;

axiom $is_span_sequential(^s_node);

axiom $def_struct_type(^s_node, 16, false, false);

axiom (forall #s1: $state, #s2: $state, #p: $ptr :: { $inv2(#s1, #s2, #p, ^s_node) } $inv2(#s1, #s2, #p, ^s_node) == $set_eq($owns(#s2, #p), $set_empty()));

axiom (forall #s1: $state, #s2: $state, #p: $ptr :: { $inv2_without_lemmas(#s1, #s2, #p, ^s_node) } $inv2_without_lemmas(#s1, #s2, #p, ^s_node) == $set_eq($owns(#s2, #p), $set_empty()));

axiom (forall p: $ptr, q: $ptr, s: $state :: { $in(q, $composite_extent(s, p, ^s_node)) } $in(q, $composite_extent(s, p, ^s_node)) == (q == p));

const unique s_node.key: $field;

axiom $def_phys_field(^s_node, s_node.key, ^^i4, false, 0);

const unique s_node.next: $field;

axiom $def_phys_field(^s_node, s_node.next, $ptr_to(^s_node), false, 8);

function F#glob_reach() : $oset;

const unique cf#glob_reach: $pure_function;

axiom $function_arg_type(cf#glob_reach, 0, ^$#oset);

procedure glob_reach() returns ($result: $oset);
  free ensures $result == F#glob_reach();
  free ensures $call_transition(old($s), $s);



const unique ^$#_purecall_handler#1: $ctype;

axiom $def_fnptr_type(^$#_purecall_handler#1);

type $#_purecall_handler#1;

const unique ^$#_invalid_parameter_handler#2: $ctype;

axiom $def_fnptr_type(^$#_invalid_parameter_handler#2);

type $#_invalid_parameter_handler#2;

const unique ^$#sls_pairwise_sum.c..36263#3: $ctype;

axiom $def_fnptr_type(^$#sls_pairwise_sum.c..36263#3);

type $#sls_pairwise_sum.c..36263#3;

const unique ^$#_PtFuncCompare#4: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#4);

type $#_PtFuncCompare#4;

const unique ^$#_PtFuncCompare#5: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#5);

type $#_PtFuncCompare#5;

const unique ^$#_PtFuncCompare#6: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#6);

type $#_PtFuncCompare#6;

const unique ^$#_PtFuncCompare#7: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#7);

type $#_PtFuncCompare#7;

const unique ^$#_onexit_t#8: $ctype;

axiom $def_fnptr_type(^$#_onexit_t#8);

type $#_onexit_t#8;

function F##int_max(SP#x: int, SP#y: int) : int;

const unique cf##int_max: $pure_function;

axiom (forall SP#x: int, SP#y: int :: { F##int_max(SP#x, SP#y) } $in_range_i4(F##int_max(SP#x, SP#y)));

axiom $function_arg_type(cf##int_max, 0, ^^i4);

axiom $function_arg_type(cf##int_max, 1, ^^i4);

axiom $function_arg_type(cf##int_max, 2, ^^i4);

procedure #int_max(SP#x: int, SP#y: int) returns ($result: int);
  free ensures $in_range_i4($result);
  free ensures $result == F##int_max(SP#x, SP#y);
  free ensures $call_transition(old($s), $s);



function F##int_min(SP#x: int, SP#y: int) : int;

const unique cf##int_min: $pure_function;

axiom (forall SP#x: int, SP#y: int :: { F##int_min(SP#x, SP#y) } $in_range_i4(F##int_min(SP#x, SP#y)));

axiom $function_arg_type(cf##int_min, 0, ^^i4);

axiom $function_arg_type(cf##int_min, 1, ^^i4);

axiom $function_arg_type(cf##int_min, 2, ^^i4);

procedure #int_min(SP#x: int, SP#y: int) returns ($result: int);
  free ensures $in_range_i4($result);
  free ensures $result == F##int_min(SP#x, SP#y);
  free ensures $call_transition(old($s), $s);



function F#sll(#s: $state, SP#hd: $ptr) : bool;

const unique cf#sll: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll(#s, SP#hd) } 1 < $decreases_level ==> $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#sll(#s, SP#hd));

axiom $function_arg_type(cf#sll, 0, ^^bool);

axiom $function_arg_type(cf#sll, 1, $ptr_to(^s_node));

procedure sll(SP#hd: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result;
  free ensures $result == F#sll($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#srtl(#s: $state, SP#hd: $ptr) : bool;

const unique cf#srtl: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#srtl(#s, SP#hd) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#srtl(#s, SP#hd)) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> F#srtl(#s, SP#hd)));

axiom $function_arg_type(cf#srtl, 0, ^^bool);

axiom $function_arg_type(cf#srtl, 1, $ptr_to(^s_node));

procedure srtl(SP#hd: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result;
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> $result;
  free ensures $result == F#srtl($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#rsrtl(#s: $state, SP#hd: $ptr) : bool;

const unique cf#rsrtl: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#rsrtl(#s, SP#hd) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#rsrtl(#s, SP#hd)) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> F#rsrtl(#s, SP#hd)));

axiom $function_arg_type(cf#rsrtl, 0, ^^bool);

axiom $function_arg_type(cf#rsrtl, 1, $ptr_to(^s_node));

procedure rsrtl(SP#hd: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result;
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> $result;
  free ensures $result == F#rsrtl($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_reach(#s: $state, SP#hd: $ptr) : $oset;

const unique cf#sll_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll_reach(#s, SP#hd) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#sll_reach(#s, SP#hd))) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#sll_reach(#s, SP#hd) == $oset_empty()));

axiom $function_arg_type(cf#sll_reach, 0, ^$#oset);

axiom $function_arg_type(cf#sll_reach, 1, $ptr_to(^s_node));

procedure sll_reach(SP#hd: $ptr) returns ($result: $oset);
  ensures ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result)) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result == $oset_empty());
  free ensures $result == F#sll_reach($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#srtl_reach(#s: $state, SP#hd: $ptr) : $oset;

const unique cf#srtl_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#srtl_reach(#s, SP#hd) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#srtl_reach(#s, SP#hd))) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#srtl_reach(#s, SP#hd) == $oset_empty()));

axiom $function_arg_type(cf#srtl_reach, 0, ^$#oset);

axiom $function_arg_type(cf#srtl_reach, 1, $ptr_to(^s_node));

procedure srtl_reach(SP#hd: $ptr) returns ($result: $oset);
  ensures ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result)) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result == $oset_empty());
  free ensures $result == F#srtl_reach($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#rsrtl_reach(#s: $state, SP#hd: $ptr) : $oset;

const unique cf#rsrtl_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#rsrtl_reach(#s, SP#hd) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#rsrtl_reach(#s, SP#hd))) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#rsrtl_reach(#s, SP#hd) == $oset_empty()));

axiom $function_arg_type(cf#rsrtl_reach, 0, ^$#oset);

axiom $function_arg_type(cf#rsrtl_reach, 1, $ptr_to(^s_node));

procedure rsrtl_reach(SP#hd: $ptr) returns ($result: $oset);
  ensures ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result)) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result == $oset_empty());
  free ensures $result == F#rsrtl_reach($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_keys(#s: $state, SP#hd: $ptr) : $intset;

const unique cf#sll_keys: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll_keys(#s, SP#hd) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $intset_in($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node)), F#sll_keys(#s, SP#hd))) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#sll_keys(#s, SP#hd) == $intset_empty()));

axiom $function_arg_type(cf#sll_keys, 0, ^$#intset);

axiom $function_arg_type(cf#sll_keys, 1, $ptr_to(^s_node));

procedure sll_keys(SP#hd: $ptr) returns ($result: $intset);
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $intset_in($rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node)), $result);
  ensures $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result == $intset_empty();
  free ensures $result == F#sll_keys($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_min_key(#s: $state, SP#hd: $ptr) : int;

const unique cf#sll_min_key: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll_min_key(#s, SP#hd) } 1 < $decreases_level ==> $in_range_i4(F#sll_min_key(#s, SP#hd)) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> F#sll_min_key(#s, SP#hd) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node))));

axiom $function_arg_type(cf#sll_min_key, 0, ^^i4);

axiom $function_arg_type(cf#sll_min_key, 1, $ptr_to(^s_node));

procedure sll_min_key(SP#hd: $ptr) returns ($result: int);
  free ensures $in_range_i4($result);
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> $result == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node));
  free ensures $result == F#sll_min_key($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_max_key(#s: $state, SP#hd: $ptr) : int;

const unique cf#sll_max_key: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll_max_key(#s, SP#hd) } 1 < $decreases_level ==> $in_range_i4(F#sll_max_key(#s, SP#hd)) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> F#sll_max_key(#s, SP#hd) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node))));

axiom $function_arg_type(cf#sll_max_key, 0, ^^i4);

axiom $function_arg_type(cf#sll_max_key, 1, $ptr_to(^s_node));

procedure sll_max_key(SP#hd: $ptr) returns ($result: int);
  free ensures $in_range_i4($result);
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> $result == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node));
  free ensures $result == F#sll_max_key($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_list_len_next(#s: $state, SP#x: $ptr) : int;

const unique cf#sll_list_len_next: $pure_function;

axiom (forall #s: $state, SP#x: $ptr :: { F#sll_list_len_next(#s, SP#x) } 1 < $decreases_level ==> $in_range_nat(F#sll_list_len_next(#s, SP#x)) && ($non_null($phys_ptr_cast(SP#x, ^s_node)) ==> F#sll_list_len_next(#s, SP#x) > 0) && ($is_null($phys_ptr_cast(SP#x, ^s_node)) ==> F#sll_list_len_next(#s, SP#x) == 0));

axiom $function_arg_type(cf#sll_list_len_next, 0, ^^nat);

axiom $function_arg_type(cf#sll_list_len_next, 1, $ptr_to(^s_node));

procedure sll_list_len_next(SP#x: $ptr) returns ($result: int);
  free ensures $in_range_nat($result);
  ensures $non_null($phys_ptr_cast(SP#x, ^s_node)) ==> $result > 0;
  ensures $is_null($phys_ptr_cast(SP#x, ^s_node)) ==> $result == 0;
  free ensures $result == F#sll_list_len_next($s, SP#x);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : bool;

const unique cf#sll_lseg: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg(#s, SP#hd, SP#tl) == F#sll(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg(#s, SP#hd, SP#tl)) && (F#sll_lseg(#s, SP#hd, SP#tl) ==> $oset_disjoint(F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)))) && (F#sll_lseg(#s, SP#hd, SP#tl) && F#sll(#s, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll(#s, $phys_ptr_cast(SP#hd, ^s_node)) && F#sll_reach(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $oset_union(F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_reach(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_keys(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $intset_union(F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_keys(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_list_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_list_len_next(#s, $phys_ptr_cast(SP#tl, ^s_node)))) && (F#sll_lseg(#s, SP#hd, SP#tl) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#hd, ^s_node) && !$oset_in($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node), F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node))) ==> F#sll_lseg(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $intset_singleton($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)))) && F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), 1)));

axiom $function_arg_type(cf#sll_lseg, 0, ^^bool);

axiom $function_arg_type(cf#sll_lseg, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg, 2, $ptr_to(^s_node));

procedure sll_lseg(SP#hd: $ptr, SP#tl: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result;
  ensures $result ==> $oset_disjoint(F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)));
  ensures $result && F#sll($s, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SP#hd, ^s_node)) && F#sll_reach($s, $phys_ptr_cast(SP#hd, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_reach($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_keys($s, $phys_ptr_cast(SP#hd, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_keys($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_list_len_next($s, $phys_ptr_cast(SP#hd, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_list_len_next($s, $phys_ptr_cast(SP#tl, ^s_node)));
  ensures $result && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#hd, ^s_node) && !$oset_in($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node), F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node))) ==> F#sll_lseg($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)))) && F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), 1);
  free ensures $result == F#sll_lseg($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#srtl_lseg(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : bool;

const unique cf#srtl_lseg: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#srtl_lseg(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl_lseg(#s, SP#hd, SP#tl) == F#srtl(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#srtl_lseg(#s, SP#hd, SP#tl)) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#srtl_lseg(#s, SP#hd, SP#tl)) && (F#srtl_lseg(#s, SP#hd, SP#tl) ==> $oset_disjoint(F#srtl_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)))) && (F#srtl_lseg(#s, SP#hd, SP#tl) && F#srtl(#s, $phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) <= F#sll_min_key(#s, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl(#s, $phys_ptr_cast(SP#hd, ^s_node)) && F#srtl_reach(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $oset_union(F#srtl_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#srtl_reach(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_keys(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $intset_union(F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_keys(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_list_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_list_len_next(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node)) == F#sll_lseg_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node)) == F#sll_max_key(#s, $phys_ptr_cast(SP#tl, ^s_node))) && (F#srtl_lseg(#s, SP#hd, SP#tl) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && !$oset_in($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node), F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) <= $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl_lseg(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#srtl_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $intset_singleton($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)))) && F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), 1) && F#sll_lseg_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == F#sll_lseg_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node))) && (F#srtl_lseg(#s, SP#hd, SP#tl) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> F#srtl_lseg(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#srtl_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_singleton($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == 1 && F#sll_lseg_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node))));

axiom $function_arg_type(cf#srtl_lseg, 0, ^^bool);

axiom $function_arg_type(cf#srtl_lseg, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#srtl_lseg, 2, $ptr_to(^s_node));

procedure srtl_lseg(SP#hd: $ptr, SP#tl: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#srtl($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result;
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result;
  ensures $result ==> $oset_disjoint(F#srtl_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)));
  ensures $result && F#srtl($s, $phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) <= F#sll_min_key($s, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SP#hd, ^s_node)) && F#srtl_reach($s, $phys_ptr_cast(SP#hd, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#srtl_reach($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_keys($s, $phys_ptr_cast(SP#hd, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_keys($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_list_len_next($s, $phys_ptr_cast(SP#hd, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_list_len_next($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_min_key($s, $phys_ptr_cast(SP#hd, ^s_node)) == F#sll_lseg_min_key($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_max_key($s, $phys_ptr_cast(SP#hd, ^s_node)) == F#sll_max_key($s, $phys_ptr_cast(SP#tl, ^s_node));
  ensures $result && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && !$oset_in($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node), F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_max_key($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) <= $rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl_lseg($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#srtl_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)))) && F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), 1) && F#sll_lseg_min_key($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == F#sll_lseg_min_key($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node));
  ensures $result && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#srtl_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == 1 && F#sll_lseg_min_key($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node));
  free ensures $result == F#srtl_lseg($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_reach(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : $oset;

const unique cf#sll_lseg_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_reach(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_reach(#s, SP#hd, SP#tl) == F#sll_reach(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_reach(#s, SP#hd, SP#tl) == $oset_empty()) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#sll_lseg_reach(#s, SP#hd, SP#tl))));

axiom $function_arg_type(cf#sll_lseg_reach, 0, ^$#oset);

axiom $function_arg_type(cf#sll_lseg_reach, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_reach, 2, $ptr_to(^s_node));

procedure sll_lseg_reach(SP#hd: $ptr, SP#tl: $ptr) returns ($result: $oset);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_reach($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $oset_empty();
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result);
  free ensures $result == F#sll_lseg_reach($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#srtl_lseg_reach(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : $oset;

const unique cf#srtl_lseg_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#srtl_lseg_reach(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl_lseg_reach(#s, SP#hd, SP#tl) == F#srtl_reach(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#srtl_lseg_reach(#s, SP#hd, SP#tl) == $oset_empty()) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#srtl_lseg_reach(#s, SP#hd, SP#tl))));

axiom $function_arg_type(cf#srtl_lseg_reach, 0, ^$#oset);

axiom $function_arg_type(cf#srtl_lseg_reach, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#srtl_lseg_reach, 2, $ptr_to(^s_node));

procedure srtl_lseg_reach(SP#hd: $ptr, SP#tl: $ptr) returns ($result: $oset);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#srtl_reach($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $oset_empty();
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result);
  free ensures $result == F#srtl_lseg_reach($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_keys(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : $intset;

const unique cf#sll_lseg_keys: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_keys(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_keys(#s, SP#hd, SP#tl) == F#sll_keys(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_keys(#s, SP#hd, SP#tl) == $intset_empty()) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $intset_in($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node)), F#sll_lseg_keys(#s, SP#hd, SP#tl))));

axiom $function_arg_type(cf#sll_lseg_keys, 0, ^$#intset);

axiom $function_arg_type(cf#sll_lseg_keys, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_keys, 2, $ptr_to(^s_node));

procedure sll_lseg_keys(SP#hd: $ptr, SP#tl: $ptr) returns ($result: $intset);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_keys($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $intset_empty();
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $intset_in($rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node)), $result);
  free ensures $result == F#sll_lseg_keys($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_min_key(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : int;

const unique cf#sll_lseg_min_key: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_min_key(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> $in_range_i4(F#sll_lseg_min_key(#s, SP#hd, SP#tl)) && ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_min_key(#s, SP#hd, SP#tl) == F#sll_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_min_key(#s, SP#hd, SP#tl) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node))));

axiom $function_arg_type(cf#sll_lseg_min_key, 0, ^^i4);

axiom $function_arg_type(cf#sll_lseg_min_key, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_min_key, 2, $ptr_to(^s_node));

procedure sll_lseg_min_key(SP#hd: $ptr, SP#tl: $ptr) returns ($result: int);
  free ensures $in_range_i4($result);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_min_key($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node));
  free ensures $result == F#sll_lseg_min_key($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_max_key(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : int;

const unique cf#sll_lseg_max_key: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_max_key(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> $in_range_i4(F#sll_lseg_max_key(#s, SP#hd, SP#tl)) && ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_max_key(#s, SP#hd, SP#tl) == F#sll_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_max_key(#s, SP#hd, SP#tl) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node))));

axiom $function_arg_type(cf#sll_lseg_max_key, 0, ^^i4);

axiom $function_arg_type(cf#sll_lseg_max_key, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_max_key, 2, $ptr_to(^s_node));

procedure sll_lseg_max_key(SP#hd: $ptr, SP#tl: $ptr) returns ($result: int);
  free ensures $in_range_i4($result);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_max_key($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node));
  free ensures $result == F#sll_lseg_max_key($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_len_next(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : int;

const unique cf#sll_lseg_len_next: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_len_next(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> $in_range_nat(F#sll_lseg_len_next(#s, SP#hd, SP#tl)) && ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_len_next(#s, SP#hd, SP#tl) == F#sll_list_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_len_next(#s, SP#hd, SP#tl) == 0) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_len_next(#s, SP#hd, SP#tl) > 0));

axiom $function_arg_type(cf#sll_lseg_len_next, 0, ^^nat);

axiom $function_arg_type(cf#sll_lseg_len_next, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_len_next, 2, $ptr_to(^s_node));

procedure sll_lseg_len_next(SP#hd: $ptr, SP#tl: $ptr) returns ($result: int);
  free ensures $in_range_nat($result);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_list_len_next($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == 0;
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $result > 0;
  free ensures $result == F#sll_lseg_len_next($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



procedure sls_pairwise_sum(P#x: $ptr, P#y: $ptr) returns ($result: $ptr);
  requires F#srtl($s, $phys_ptr_cast(P#x, ^s_node));
  requires F#srtl($s, $phys_ptr_cast(P#y, ^s_node));
  requires $oset_disjoint(F#srtl_reach($s, $phys_ptr_cast(P#x, ^s_node)), F#srtl_reach($s, $phys_ptr_cast(P#y, ^s_node)));
  modifies $s, $cev_pc;
  ensures F#srtl($s, $phys_ptr_cast(P#x, ^s_node));
  ensures F#srtl($s, $phys_ptr_cast(P#y, ^s_node));
  ensures $oset_disjoint(F#srtl_reach($s, $phys_ptr_cast(P#x, ^s_node)), F#srtl_reach($s, $phys_ptr_cast(P#y, ^s_node)));
  ensures F#srtl($s, $phys_ptr_cast($result, ^s_node));
  ensures $oset_disjoint(F#srtl_reach($s, $phys_ptr_cast($result, ^s_node)), F#srtl_reach($s, $phys_ptr_cast(P#x, ^s_node)));
  free ensures $writes_nothing(old($s), $s);
  free ensures $call_transition(old($s), $s);



implementation sls_pairwise_sum(P#x: $ptr, P#y: $ptr) returns ($result: $ptr)
{
  var stmtexpr10#18: $state;
  var SL#_dryad_S13: $state;
  var stmtexpr9#17: $state;
  var SL#_dryad_S12: $state;
  var stmtexpr8#16: $state;
  var SL#_dryad_S11: $state;
  var stmtexpr7#15: $state;
  var SL#_dryad_S10: $state;
  var stmtexpr6#14: $state;
  var SL#_dryad_S9: $state;
  var stmtexpr5#13: $state;
  var SL#_dryad_S8: $state;
  var stmtexpr4#12: $state;
  var SL#_dryad_S7: $state;
  var stmtexpr3#11: $oset;
  var stmtexpr2#10: $state;
  var SL#_dryad_S6: $state;
  var stmtexpr1#9: $ptr;
  var SL#curr_y3: $ptr;
  var stmtexpr0#8: $ptr;
  var SL#curr_x2: $ptr;
  var L#tmp: $ptr;
  var ite#2: bool;
  var loopState#0: $state;
  var stmtexpr8#27: $state;
  var SL#_dryad_S5: $state;
  var stmtexpr7#26: $state;
  var SL#_dryad_S4: $state;
  var stmtexpr6#25: $state;
  var SL#_dryad_S3: $state;
  var stmtexpr5#24: $state;
  var SL#_dryad_S2: $state;
  var stmtexpr4#23: $state;
  var SL#_dryad_S1: $state;
  var stmtexpr3#22: $oset;
  var stmtexpr2#21: $state;
  var SL#_dryad_S0: $state;
  var ite#1: bool;
  var res_srtl_reach#7: $oset;
  var res_srtl_reach#6: $oset;
  var SL#ALL_REACH: $oset;
  var L#curr_x: $ptr;
  var L#curr_y: $ptr;
  var L#z: $ptr;
  var L#last_z: $ptr;
  var L#z_key: int where $in_range_i4(L#z_key);
  var stmtexpr1#20: $oset;
  var stmtexpr0#19: $oset;
  var res_srtl_reach#5: $oset;
  var res_srtl_reach#4: $oset;
  var SL#_dryad_G1: $oset;
  var SL#_dryad_G0: $oset;
  var #wrTime$3^3.3: int;
  var #stackframe: int;

// INV:PTR: P#x, P#y, L#curr_x, L#curr_y, L#z, L#last_z
// INV:INT: L#z_key
// INV:LST: srtl

  anon9:
    assume $function_entry($s);
    assume $full_stop_ext(#tok$3^3.3, $s);
    assume $can_use_all_frame_axioms($s);
    assume #wrTime$3^3.3 == $current_timestamp($s);
    assume $def_writes($s, #wrTime$3^3.3, (lambda #p: $ptr :: false));
    // assume true
    // assume true
    // assume @decreases_level_is(2147483647); 
    assume 2147483647 == $decreases_level;
    // assume true
    //  --- Dryad annotated function --- 
    // _math \oset _dryad_G0; 
    // _math \oset _dryad_G1; 
    // _math \oset res_srtl_reach#4; 
    // res_srtl_reach#4 := srtl_reach(x); 
    call res_srtl_reach#4 := srtl_reach($phys_ptr_cast(P#x, ^s_node));
    assume $full_stop_ext(#tok$4^0.0, $s);
    // _math \oset res_srtl_reach#5; 
    // res_srtl_reach#5 := srtl_reach(y); 
    call res_srtl_reach#5 := srtl_reach($phys_ptr_cast(P#y, ^s_node));
    assume $full_stop_ext(#tok$4^0.0, $s);
    // _dryad_G0 := @_vcc_oset_union(res_srtl_reach#4, res_srtl_reach#5); 
    SL#_dryad_G0 := $oset_union(res_srtl_reach#4, res_srtl_reach#5);
    // _math \oset stmtexpr0#19; 
    // stmtexpr0#19 := _dryad_G0; 
    stmtexpr0#19 := SL#_dryad_G0;
    // _dryad_G1 := _dryad_G0; 
    SL#_dryad_G1 := SL#_dryad_G0;
    // _math \oset stmtexpr1#20; 
    // stmtexpr1#20 := _dryad_G1; 
    stmtexpr1#20 := SL#_dryad_G1;
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_keys(y), @_vcc_intset_union(sll_keys(*((y->next))), @_vcc_intset_singleton(*((y->key)))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_list_len_next(y), unchecked+(sll_list_len_next(*((y->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(rsrtl(y), &&(&&(rsrtl(*((y->next))), unchecked!(@_vcc_oset_in(y, rsrtl_reach(*((y->next)))))), >=(*((y->key)), sll_max_key(*((y->next))))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(rsrtl_reach(y), @_vcc_oset_union(rsrtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll(y), &&(sll(*((y->next))), unchecked!(@_vcc_oset_in(y, sll_reach(*((y->next)))))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_reach(y), @_vcc_oset_union(sll_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_max_key(y), @\int_max(*((y->key)), sll_max_key(*((y->next)))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_min_key(y), @\int_min(*((y->key)), sll_min_key(*((y->next)))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(srtl(y), &&(&&(srtl(*((y->next))), unchecked!(@_vcc_oset_in(y, srtl_reach(*((y->next)))))), <=(*((y->key)), sll_min_key(*((y->next))))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(srtl_reach(y), @_vcc_oset_union(srtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_keys(x), @_vcc_intset_union(sll_keys(*((x->next))), @_vcc_intset_singleton(*((x->key)))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_list_len_next(x), unchecked+(sll_list_len_next(*((x->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(rsrtl(x), &&(&&(rsrtl(*((x->next))), unchecked!(@_vcc_oset_in(x, rsrtl_reach(*((x->next)))))), >=(*((x->key)), sll_max_key(*((x->next))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(rsrtl_reach(x), @_vcc_oset_union(rsrtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll(x), &&(sll(*((x->next))), unchecked!(@_vcc_oset_in(x, sll_reach(*((x->next)))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_reach(x), @_vcc_oset_union(sll_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_max_key(x), @\int_max(*((x->key)), sll_max_key(*((x->next)))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_min_key(x), @\int_min(*((x->key)), sll_min_key(*((x->next)))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(srtl(x), &&(&&(srtl(*((x->next))), unchecked!(@_vcc_oset_in(x, srtl_reach(*((x->next)))))), <=(*((x->key)), sll_min_key(*((x->next))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(srtl_reach(x), @_vcc_oset_union(srtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
    // int32_t z_key; 
    // struct s_node* last_z; 
    // struct s_node* z; 
    // struct s_node* curr_y; 
    // struct s_node* curr_x; 
    // _math \oset ALL_REACH; 
    // assume ==>(@_vcc_ptr_neq_null(x), &&(@_vcc_mutable(@state, x), @writes_check(x))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> $mutable($s, $phys_ptr_cast(P#x, ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(@_vcc_ptr_neq_null(y), &&(@_vcc_mutable(@state, y), @writes_check(y))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> $mutable($s, $phys_ptr_cast(P#y, ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(P#y, ^s_node));
    // _math \oset res_srtl_reach#6; 
    // res_srtl_reach#6 := srtl_reach(x); 
    call res_srtl_reach#6 := srtl_reach($phys_ptr_cast(P#x, ^s_node));
    assume $full_stop_ext(#tok$3^17.41, $s);
    // _math \oset res_srtl_reach#7; 
    // res_srtl_reach#7 := srtl_reach(y); 
    call res_srtl_reach#7 := srtl_reach($phys_ptr_cast(P#y, ^s_node));
    assume $full_stop_ext(#tok$3^17.56, $s);
    // ALL_REACH := @_vcc_oset_union(res_srtl_reach#6, res_srtl_reach#7); 
    SL#ALL_REACH := $oset_union(res_srtl_reach#6, res_srtl_reach#7);
    // _Bool ite#1; 
    // ite#1 := ||(@_vcc_ptr_eq_null(x), @_vcc_ptr_eq_null(y)); 
    ite#1 := $is_null($phys_ptr_cast(P#x, ^s_node)) || $is_null($phys_ptr_cast(P#y, ^s_node));
    assume true;
    // if (ite#1) ...
    if (ite#1)
    {
      anon1:
        // return (struct s_node*)@null; 
        $result := $phys_ptr_cast($null, ^s_node);
        assume true;
        assert $position_marker();
        goto #exit;
    }
    else
    {
      anon2:
        // assert @_vcc_possibly_unreachable; 
        assert {:PossiblyUnreachable true} true;
    }

  anon10:
    // curr_x := x; 
    L#curr_x := $phys_ptr_cast(P#x, ^s_node);
    // assert sll_lseg(curr_x, curr_x); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
    // assume sll_lseg(curr_x, curr_x); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
    // assert srtl_lseg(curr_x, curr_x); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
    // assume srtl_lseg(curr_x, curr_x); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
    // assert sll_lseg(curr_y, curr_y); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
    // assume sll_lseg(curr_y, curr_y); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
    // assert srtl_lseg(curr_y, curr_y); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
    // assume srtl_lseg(curr_y, curr_y); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
    // assert sll_lseg(z, z); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#z, ^s_node));
    // assume sll_lseg(z, z); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#z, ^s_node));
    // assert srtl_lseg(z, z); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#z, ^s_node));
    // assume srtl_lseg(z, z); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#z, ^s_node));
    // assert sll_lseg(last_z, last_z); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#last_z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
    // assume sll_lseg(last_z, last_z); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#last_z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
    // assert srtl_lseg(last_z, last_z); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#last_z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
    // assume srtl_lseg(last_z, last_z); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#last_z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
    // assert sll_lseg(y, y); 
    assert F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(P#y, ^s_node));
    // assume sll_lseg(y, y); 
    assume F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(P#y, ^s_node));
    // assert srtl_lseg(y, y); 
    assert F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(P#y, ^s_node));
    // assume srtl_lseg(y, y); 
    assume F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(P#y, ^s_node));
    // assert sll_lseg(x, x); 
    assert F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(P#x, ^s_node));
    // assume sll_lseg(x, x); 
    assume F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(P#x, ^s_node));
    // assert srtl_lseg(x, x); 
    assert F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(P#x, ^s_node));
    // assume srtl_lseg(x, x); 
    assume F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(P#x, ^s_node));
    // curr_y := y; 
    L#curr_y := $phys_ptr_cast(P#y, ^s_node);
    // assert sll_lseg(curr_x, curr_x); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
    // assume sll_lseg(curr_x, curr_x); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
    // assert srtl_lseg(curr_x, curr_x); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
    // assume srtl_lseg(curr_x, curr_x); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
    // assert sll_lseg(curr_y, curr_y); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
    // assume sll_lseg(curr_y, curr_y); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
    // assert srtl_lseg(curr_y, curr_y); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
    // assume srtl_lseg(curr_y, curr_y); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
    // assert sll_lseg(z, z); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#z, ^s_node));
    // assume sll_lseg(z, z); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#z, ^s_node));
    // assert srtl_lseg(z, z); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#z, ^s_node));
    // assume srtl_lseg(z, z); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#z, ^s_node));
    // assert sll_lseg(last_z, last_z); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#last_z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
    // assume sll_lseg(last_z, last_z); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#last_z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
    // assert srtl_lseg(last_z, last_z); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#last_z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
    // assume srtl_lseg(last_z, last_z); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#last_z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
    // assert sll_lseg(y, y); 
    assert F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(P#y, ^s_node));
    // assume sll_lseg(y, y); 
    assume F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(P#y, ^s_node));
    // assert srtl_lseg(y, y); 
    assert F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(P#y, ^s_node));
    // assume srtl_lseg(y, y); 
    assume F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(P#y, ^s_node));
    // assert sll_lseg(x, x); 
    assert F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(P#x, ^s_node));
    // assume sll_lseg(x, x); 
    assume F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(P#x, ^s_node));
    // assert srtl_lseg(x, x); 
    assert F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(P#x, ^s_node));
    // assume srtl_lseg(x, x); 
    assume F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(P#x, ^s_node));
    // _math \state _dryad_S0; 
    // _dryad_S0 := @_vcc_current_state(@state); 
    SL#_dryad_S0 := $current_state($s);
    // _math \state stmtexpr2#21; 
    // stmtexpr2#21 := _dryad_S0; 
    stmtexpr2#21 := SL#_dryad_S0;
    // z := _vcc_alloc(@_vcc_typeof((struct s_node*)@null)); 
    call L#z := $alloc(^s_node);
    assume $full_stop_ext(#tok$3^23.14, $s);
    // assume !(@_vcc_oset_in(z, @_vcc_oset_union(_dryad_G0, _dryad_G1))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), $oset_union(SL#_dryad_G0, SL#_dryad_G1));
    // _dryad_G1 := @_vcc_oset_union(_dryad_G0, @_vcc_oset_singleton(z)); 
    SL#_dryad_G1 := $oset_union(SL#_dryad_G0, $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
    // _math \oset stmtexpr3#22; 
    // stmtexpr3#22 := _dryad_G1; 
    stmtexpr3#22 := SL#_dryad_G1;
    // assume ==(glob_reach(), _dryad_G1); 
    assume F#glob_reach() == SL#_dryad_G1;
    // _math \state _dryad_S1; 
    // _dryad_S1 := @_vcc_current_state(@state); 
    SL#_dryad_S1 := $current_state($s);
    // _math \state stmtexpr4#23; 
    // stmtexpr4#23 := _dryad_S1; 
    stmtexpr4#23 := SL#_dryad_S1;
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_keys(curr_x), @_vcc_intset_union(sll_keys(*((curr_x->next))), @_vcc_intset_singleton(*((curr_x->key)))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_list_len_next(curr_x), unchecked+(sll_list_len_next(*((curr_x->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(rsrtl(curr_x), &&(&&(rsrtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, rsrtl_reach(*((curr_x->next)))))), >=(*((curr_x->key)), sll_max_key(*((curr_x->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(rsrtl_reach(curr_x), @_vcc_oset_union(rsrtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll(curr_x), &&(sll(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, sll_reach(*((curr_x->next)))))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_reach(curr_x), @_vcc_oset_union(sll_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_max_key(curr_x), @\int_max(*((curr_x->key)), sll_max_key(*((curr_x->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_min_key(curr_x), @\int_min(*((curr_x->key)), sll_min_key(*((curr_x->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(srtl(curr_x), &&(&&(srtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, srtl_reach(*((curr_x->next)))))), <=(*((curr_x->key)), sll_min_key(*((curr_x->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(srtl_reach(curr_x), @_vcc_oset_union(srtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_keys(curr_y), @_vcc_intset_union(sll_keys(*((curr_y->next))), @_vcc_intset_singleton(*((curr_y->key)))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_list_len_next(curr_y), unchecked+(sll_list_len_next(*((curr_y->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(rsrtl(curr_y), &&(&&(rsrtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, rsrtl_reach(*((curr_y->next)))))), >=(*((curr_y->key)), sll_max_key(*((curr_y->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(rsrtl_reach(curr_y), @_vcc_oset_union(rsrtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll(curr_y), &&(sll(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, sll_reach(*((curr_y->next)))))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_reach(curr_y), @_vcc_oset_union(sll_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_max_key(curr_y), @\int_max(*((curr_y->key)), sll_max_key(*((curr_y->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_min_key(curr_y), @\int_min(*((curr_y->key)), sll_min_key(*((curr_y->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(srtl(curr_y), &&(&&(srtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, srtl_reach(*((curr_y->next)))))), <=(*((curr_y->key)), sll_min_key(*((curr_y->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(srtl_reach(curr_y), @_vcc_oset_union(srtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_keys(z), @_vcc_intset_union(sll_keys(*((z->next))), @_vcc_intset_singleton(*((z->key)))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_list_len_next(z), unchecked+(sll_list_len_next(*((z->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(rsrtl(z), &&(&&(rsrtl(*((z->next))), unchecked!(@_vcc_oset_in(z, rsrtl_reach(*((z->next)))))), >=(*((z->key)), sll_max_key(*((z->next))))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(rsrtl_reach(z), @_vcc_oset_union(rsrtl_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(sll(z), &&(sll(*((z->next))), unchecked!(@_vcc_oset_in(z, sll_reach(*((z->next)))))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_reach(z), @_vcc_oset_union(sll_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_max_key(z), @\int_max(*((z->key)), sll_max_key(*((z->next)))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_min_key(z), @\int_min(*((z->key)), sll_min_key(*((z->next)))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(srtl(z), &&(&&(srtl(*((z->next))), unchecked!(@_vcc_oset_in(z, srtl_reach(*((z->next)))))), <=(*((z->key)), sll_min_key(*((z->next))))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(srtl_reach(z), @_vcc_oset_union(srtl_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_keys(last_z), @_vcc_intset_union(sll_keys(*((last_z->next))), @_vcc_intset_singleton(*((last_z->key)))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#last_z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_list_len_next(last_z), unchecked+(sll_list_len_next(*((last_z->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#last_z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(rsrtl(last_z), &&(&&(rsrtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, rsrtl_reach(*((last_z->next)))))), >=(*((last_z->key)), sll_max_key(*((last_z->next))))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(rsrtl_reach(last_z), @_vcc_oset_union(rsrtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll(last_z), &&(sll(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, sll_reach(*((last_z->next)))))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_reach(last_z), @_vcc_oset_union(sll_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_max_key(last_z), @\int_max(*((last_z->key)), sll_max_key(*((last_z->next)))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_min_key(last_z), @\int_min(*((last_z->key)), sll_min_key(*((last_z->next)))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(srtl(last_z), &&(&&(srtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, srtl_reach(*((last_z->next)))))), <=(*((last_z->key)), sll_min_key(*((last_z->next))))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(srtl_reach(last_z), @_vcc_oset_union(srtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_keys(y), @_vcc_intset_union(sll_keys(*((y->next))), @_vcc_intset_singleton(*((y->key)))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_list_len_next(y), unchecked+(sll_list_len_next(*((y->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(rsrtl(y), &&(&&(rsrtl(*((y->next))), unchecked!(@_vcc_oset_in(y, rsrtl_reach(*((y->next)))))), >=(*((y->key)), sll_max_key(*((y->next))))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(rsrtl_reach(y), @_vcc_oset_union(rsrtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll(y), &&(sll(*((y->next))), unchecked!(@_vcc_oset_in(y, sll_reach(*((y->next)))))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_reach(y), @_vcc_oset_union(sll_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_max_key(y), @\int_max(*((y->key)), sll_max_key(*((y->next)))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_min_key(y), @\int_min(*((y->key)), sll_min_key(*((y->next)))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(srtl(y), &&(&&(srtl(*((y->next))), unchecked!(@_vcc_oset_in(y, srtl_reach(*((y->next)))))), <=(*((y->key)), sll_min_key(*((y->next))))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(srtl_reach(y), @_vcc_oset_union(srtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_keys(x), @_vcc_intset_union(sll_keys(*((x->next))), @_vcc_intset_singleton(*((x->key)))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_list_len_next(x), unchecked+(sll_list_len_next(*((x->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(rsrtl(x), &&(&&(rsrtl(*((x->next))), unchecked!(@_vcc_oset_in(x, rsrtl_reach(*((x->next)))))), >=(*((x->key)), sll_max_key(*((x->next))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(rsrtl_reach(x), @_vcc_oset_union(rsrtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll(x), &&(sll(*((x->next))), unchecked!(@_vcc_oset_in(x, sll_reach(*((x->next)))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_reach(x), @_vcc_oset_union(sll_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_max_key(x), @\int_max(*((x->key)), sll_max_key(*((x->next)))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_min_key(x), @\int_min(*((x->key)), sll_min_key(*((x->next)))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(srtl(x), &&(&&(srtl(*((x->next))), unchecked!(@_vcc_oset_in(x, srtl_reach(*((x->next)))))), <=(*((x->key)), sll_min_key(*((x->next))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(srtl_reach(x), @_vcc_oset_union(srtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(curr_x)))), ==(old(_dryad_S0, sll_keys(curr_x)), old(_dryad_S1, sll_keys(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(curr_x)))), ==(old(_dryad_S0, sll_list_len_next(curr_x)), old(_dryad_S1, sll_list_len_next(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, rsrtl_reach(curr_x)))), ==(old(_dryad_S0, rsrtl(curr_x)), old(_dryad_S1, rsrtl(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#rsrtl(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node)) == F#rsrtl(SL#_dryad_S1, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, rsrtl_reach(curr_x)))), ==(old(_dryad_S0, rsrtl_reach(curr_x)), old(_dryad_S1, rsrtl_reach(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(curr_x)))), ==(old(_dryad_S0, sll(curr_x)), old(_dryad_S1, sll(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(curr_x)))), ==(old(_dryad_S0, sll_reach(curr_x)), old(_dryad_S1, sll_reach(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(curr_x)))), ==(old(_dryad_S0, sll_max_key(curr_x)), old(_dryad_S1, sll_max_key(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_max_key(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_max_key(SL#_dryad_S1, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(curr_x)))), ==(old(_dryad_S0, sll_min_key(curr_x)), old(_dryad_S1, sll_min_key(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_min_key(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_min_key(SL#_dryad_S1, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, srtl_reach(curr_x)))), ==(old(_dryad_S0, srtl(curr_x)), old(_dryad_S1, srtl(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl(SL#_dryad_S1, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, srtl_reach(curr_x)))), ==(old(_dryad_S0, srtl_reach(curr_x)), old(_dryad_S1, srtl_reach(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(curr_y)))), ==(old(_dryad_S0, sll_keys(curr_y)), old(_dryad_S1, sll_keys(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(curr_y)))), ==(old(_dryad_S0, sll_list_len_next(curr_y)), old(_dryad_S1, sll_list_len_next(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, rsrtl_reach(curr_y)))), ==(old(_dryad_S0, rsrtl(curr_y)), old(_dryad_S1, rsrtl(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#rsrtl(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node)) == F#rsrtl(SL#_dryad_S1, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, rsrtl_reach(curr_y)))), ==(old(_dryad_S0, rsrtl_reach(curr_y)), old(_dryad_S1, rsrtl_reach(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(curr_y)))), ==(old(_dryad_S0, sll(curr_y)), old(_dryad_S1, sll(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(curr_y)))), ==(old(_dryad_S0, sll_reach(curr_y)), old(_dryad_S1, sll_reach(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(curr_y)))), ==(old(_dryad_S0, sll_max_key(curr_y)), old(_dryad_S1, sll_max_key(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_max_key(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_max_key(SL#_dryad_S1, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(curr_y)))), ==(old(_dryad_S0, sll_min_key(curr_y)), old(_dryad_S1, sll_min_key(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_min_key(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_min_key(SL#_dryad_S1, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, srtl_reach(curr_y)))), ==(old(_dryad_S0, srtl(curr_y)), old(_dryad_S1, srtl(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl(SL#_dryad_S1, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, srtl_reach(curr_y)))), ==(old(_dryad_S0, srtl_reach(curr_y)), old(_dryad_S1, srtl_reach(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(last_z)))), ==(old(_dryad_S0, sll_keys(last_z)), old(_dryad_S1, sll_keys(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(last_z)))), ==(old(_dryad_S0, sll_list_len_next(last_z)), old(_dryad_S1, sll_list_len_next(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, rsrtl_reach(last_z)))), ==(old(_dryad_S0, rsrtl(last_z)), old(_dryad_S1, rsrtl(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#rsrtl(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node)) == F#rsrtl(SL#_dryad_S1, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, rsrtl_reach(last_z)))), ==(old(_dryad_S0, rsrtl_reach(last_z)), old(_dryad_S1, rsrtl_reach(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node)) == F#rsrtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(last_z)))), ==(old(_dryad_S0, sll(last_z)), old(_dryad_S1, sll(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(last_z)))), ==(old(_dryad_S0, sll_reach(last_z)), old(_dryad_S1, sll_reach(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(last_z)))), ==(old(_dryad_S0, sll_max_key(last_z)), old(_dryad_S1, sll_max_key(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_max_key(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_max_key(SL#_dryad_S1, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(last_z)))), ==(old(_dryad_S0, sll_min_key(last_z)), old(_dryad_S1, sll_min_key(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_min_key(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_min_key(SL#_dryad_S1, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, srtl_reach(last_z)))), ==(old(_dryad_S0, srtl(last_z)), old(_dryad_S1, srtl(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#srtl(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl(SL#_dryad_S1, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, srtl_reach(last_z)))), ==(old(_dryad_S0, srtl_reach(last_z)), old(_dryad_S1, srtl_reach(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(y)))), ==(old(_dryad_S0, sll_keys(y)), old(_dryad_S1, sll_keys(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(y)))), ==(old(_dryad_S0, sll_list_len_next(y)), old(_dryad_S1, sll_list_len_next(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, rsrtl_reach(y)))), ==(old(_dryad_S0, rsrtl(y)), old(_dryad_S1, rsrtl(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node))) ==> F#rsrtl(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node)) == F#rsrtl(SL#_dryad_S1, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, rsrtl_reach(y)))), ==(old(_dryad_S0, rsrtl_reach(y)), old(_dryad_S1, rsrtl_reach(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S1, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(y)))), ==(old(_dryad_S0, sll(y)), old(_dryad_S1, sll(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(y)))), ==(old(_dryad_S0, sll_reach(y)), old(_dryad_S1, sll_reach(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(y)))), ==(old(_dryad_S0, sll_max_key(y)), old(_dryad_S1, sll_max_key(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_max_key(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node)) == F#sll_max_key(SL#_dryad_S1, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(y)))), ==(old(_dryad_S0, sll_min_key(y)), old(_dryad_S1, sll_min_key(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_min_key(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node)) == F#sll_min_key(SL#_dryad_S1, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, srtl_reach(y)))), ==(old(_dryad_S0, srtl(y)), old(_dryad_S1, srtl(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node))) ==> F#srtl(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node)) == F#srtl(SL#_dryad_S1, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, srtl_reach(y)))), ==(old(_dryad_S0, srtl_reach(y)), old(_dryad_S1, srtl_reach(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node))) ==> F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node)) == F#srtl_reach(SL#_dryad_S1, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(x)))), ==(old(_dryad_S0, sll_keys(x)), old(_dryad_S1, sll_keys(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(x)))), ==(old(_dryad_S0, sll_list_len_next(x)), old(_dryad_S1, sll_list_len_next(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, rsrtl_reach(x)))), ==(old(_dryad_S0, rsrtl(x)), old(_dryad_S1, rsrtl(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node))) ==> F#rsrtl(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node)) == F#rsrtl(SL#_dryad_S1, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, rsrtl_reach(x)))), ==(old(_dryad_S0, rsrtl_reach(x)), old(_dryad_S1, rsrtl_reach(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S1, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(x)))), ==(old(_dryad_S0, sll(x)), old(_dryad_S1, sll(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(x)))), ==(old(_dryad_S0, sll_reach(x)), old(_dryad_S1, sll_reach(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(x)))), ==(old(_dryad_S0, sll_max_key(x)), old(_dryad_S1, sll_max_key(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_max_key(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node)) == F#sll_max_key(SL#_dryad_S1, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(x)))), ==(old(_dryad_S0, sll_min_key(x)), old(_dryad_S1, sll_min_key(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_min_key(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node)) == F#sll_min_key(SL#_dryad_S1, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, srtl_reach(x)))), ==(old(_dryad_S0, srtl(x)), old(_dryad_S1, srtl(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node))) ==> F#srtl(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node)) == F#srtl(SL#_dryad_S1, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, srtl_reach(x)))), ==(old(_dryad_S0, srtl_reach(x)), old(_dryad_S1, srtl_reach(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node))) ==> F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node)) == F#srtl_reach(SL#_dryad_S1, $phys_ptr_cast(P#x, ^s_node));
    // assume @_vcc_ptr_neq_null(z); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node));
    // assume unchecked!(@_vcc_oset_in(z, ALL_REACH)); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), SL#ALL_REACH);
    // ALL_REACH := @_vcc_oset_union(ALL_REACH, @_vcc_oset_singleton(z)); 
    SL#ALL_REACH := $oset_union(SL#ALL_REACH, $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
    // last_z := z; 
    L#last_z := $phys_ptr_cast(L#z, ^s_node);
    // assert sll_lseg(curr_x, curr_x); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
    // assume sll_lseg(curr_x, curr_x); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
    // assert srtl_lseg(curr_x, curr_x); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
    // assume srtl_lseg(curr_x, curr_x); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
    // assert sll_lseg(curr_y, curr_y); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
    // assume sll_lseg(curr_y, curr_y); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
    // assert srtl_lseg(curr_y, curr_y); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
    // assume srtl_lseg(curr_y, curr_y); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
    // assert sll_lseg(z, z); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#z, ^s_node));
    // assume sll_lseg(z, z); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#z, ^s_node));
    // assert srtl_lseg(z, z); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#z, ^s_node));
    // assume srtl_lseg(z, z); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#z, ^s_node));
    // assert sll_lseg(last_z, last_z); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#last_z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
    // assume sll_lseg(last_z, last_z); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#last_z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
    // assert srtl_lseg(last_z, last_z); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#last_z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
    // assume srtl_lseg(last_z, last_z); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#last_z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
    // assert sll_lseg(y, y); 
    assert F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(P#y, ^s_node));
    // assume sll_lseg(y, y); 
    assume F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(P#y, ^s_node));
    // assert srtl_lseg(y, y); 
    assert F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(P#y, ^s_node));
    // assume srtl_lseg(y, y); 
    assume F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(P#y, ^s_node));
    // assert sll_lseg(x, x); 
    assert F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(P#x, ^s_node));
    // assume sll_lseg(x, x); 
    assume F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(P#x, ^s_node));
    // assert srtl_lseg(x, x); 
    assert F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(P#x, ^s_node));
    // assume srtl_lseg(x, x); 
    assume F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(P#x, ^s_node));
    // assert @reads_check_normal((curr_x->key)); 
    assert $thread_local($s, $phys_ptr_cast(L#curr_x, ^s_node));
    // assert @reads_check_normal((curr_y->key)); 
    assert $thread_local($s, $phys_ptr_cast(L#curr_y, ^s_node));
    // z_key := unchecked+(*((curr_x->key)), *((curr_y->key))); 
    L#z_key := $unchk_add(^^i4, $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)));
    // _math \state _dryad_S2; 
    // _dryad_S2 := @_vcc_current_state(@state); 
    SL#_dryad_S2 := $current_state($s);
    // _math \state stmtexpr5#24; 
    // stmtexpr5#24 := _dryad_S2; 
    stmtexpr5#24 := SL#_dryad_S2;
    // assert @prim_writes_check((z->key)); 
    assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#z, ^s_node), s_node.key));
    // *(z->key) := z_key; 
    call $write_int(s_node.key, $phys_ptr_cast(L#z, ^s_node), L#z_key);
    assume $full_stop_ext(#tok$3^29.3, $s);
    // _math \state _dryad_S3; 
    // _dryad_S3 := @_vcc_current_state(@state); 
    SL#_dryad_S3 := $current_state($s);
    // _math \state stmtexpr6#25; 
    // stmtexpr6#25 := _dryad_S3; 
    stmtexpr6#25 := SL#_dryad_S3;
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(*((z->next)))))), ==(old(_dryad_S2, sll_keys(*((z->next)))), old(_dryad_S3, sll_keys(*((z->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) == F#sll_keys(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(*((z->next)))))), ==(old(_dryad_S2, sll_list_len_next(*((z->next)))), old(_dryad_S3, sll_list_len_next(*((z->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, rsrtl_reach(*((z->next)))))), ==(old(_dryad_S2, rsrtl(*((z->next)))), old(_dryad_S3, rsrtl(*((z->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) == F#rsrtl(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, rsrtl_reach(*((z->next)))))), ==(old(_dryad_S2, rsrtl_reach(*((z->next)))), old(_dryad_S3, rsrtl_reach(*((z->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(*((z->next)))))), ==(old(_dryad_S2, sll(*((z->next)))), old(_dryad_S3, sll(*((z->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) ==> F#sll(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) == F#sll(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(*((z->next)))))), ==(old(_dryad_S2, sll_reach(*((z->next)))), old(_dryad_S3, sll_reach(*((z->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) == F#sll_reach(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(*((z->next)))))), ==(old(_dryad_S2, sll_max_key(*((z->next)))), old(_dryad_S3, sll_max_key(*((z->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) == F#sll_max_key(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(*((z->next)))))), ==(old(_dryad_S2, sll_min_key(*((z->next)))), old(_dryad_S3, sll_min_key(*((z->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) == F#sll_min_key(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, srtl_reach(*((z->next)))))), ==(old(_dryad_S2, srtl(*((z->next)))), old(_dryad_S3, srtl(*((z->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) ==> F#srtl(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) == F#srtl(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, srtl_reach(*((z->next)))))), ==(old(_dryad_S2, srtl_reach(*((z->next)))), old(_dryad_S3, srtl_reach(*((z->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) == F#srtl_reach(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node));
    // assume ==(old(_dryad_S2, sll_list_len_next(curr_x)), old(_dryad_S3, sll_list_len_next(curr_x))); 
    assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==(old(_dryad_S2, rsrtl_reach(curr_x)), old(_dryad_S3, rsrtl_reach(curr_x))); 
    assume F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==(old(_dryad_S2, sll(curr_x)), old(_dryad_S3, sll(curr_x))); 
    assume F#sll(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==(old(_dryad_S2, sll_reach(curr_x)), old(_dryad_S3, sll_reach(curr_x))); 
    assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==(old(_dryad_S2, srtl_reach(curr_x)), old(_dryad_S3, srtl_reach(curr_x))); 
    assume F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==(old(_dryad_S2, sll_list_len_next(curr_y)), old(_dryad_S3, sll_list_len_next(curr_y))); 
    assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==(old(_dryad_S2, rsrtl_reach(curr_y)), old(_dryad_S3, rsrtl_reach(curr_y))); 
    assume F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==(old(_dryad_S2, sll(curr_y)), old(_dryad_S3, sll(curr_y))); 
    assume F#sll(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==(old(_dryad_S2, sll_reach(curr_y)), old(_dryad_S3, sll_reach(curr_y))); 
    assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==(old(_dryad_S2, srtl_reach(curr_y)), old(_dryad_S3, srtl_reach(curr_y))); 
    assume F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==(old(_dryad_S2, sll_list_len_next(z)), old(_dryad_S3, sll_list_len_next(z))); 
    assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#z, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#z, ^s_node));
    // assume ==(old(_dryad_S2, rsrtl_reach(z)), old(_dryad_S3, rsrtl_reach(z))); 
    assume F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#z, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#z, ^s_node));
    // assume ==(old(_dryad_S2, sll(z)), old(_dryad_S3, sll(z))); 
    assume F#sll(SL#_dryad_S2, $phys_ptr_cast(L#z, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#z, ^s_node));
    // assume ==(old(_dryad_S2, sll_reach(z)), old(_dryad_S3, sll_reach(z))); 
    assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#z, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#z, ^s_node));
    // assume ==(old(_dryad_S2, srtl_reach(z)), old(_dryad_S3, srtl_reach(z))); 
    assume F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#z, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#z, ^s_node));
    // assume ==(old(_dryad_S2, sll_list_len_next(last_z)), old(_dryad_S3, sll_list_len_next(last_z))); 
    assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==(old(_dryad_S2, rsrtl_reach(last_z)), old(_dryad_S3, rsrtl_reach(last_z))); 
    assume F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==(old(_dryad_S2, sll(last_z)), old(_dryad_S3, sll(last_z))); 
    assume F#sll(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==(old(_dryad_S2, sll_reach(last_z)), old(_dryad_S3, sll_reach(last_z))); 
    assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==(old(_dryad_S2, srtl_reach(last_z)), old(_dryad_S3, srtl_reach(last_z))); 
    assume F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==(old(_dryad_S2, sll_list_len_next(y)), old(_dryad_S3, sll_list_len_next(y))); 
    assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(P#y, ^s_node));
    // assume ==(old(_dryad_S2, rsrtl_reach(y)), old(_dryad_S3, rsrtl_reach(y))); 
    assume F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(P#y, ^s_node));
    // assume ==(old(_dryad_S2, sll(y)), old(_dryad_S3, sll(y))); 
    assume F#sll(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(P#y, ^s_node));
    // assume ==(old(_dryad_S2, sll_reach(y)), old(_dryad_S3, sll_reach(y))); 
    assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(P#y, ^s_node));
    // assume ==(old(_dryad_S2, srtl_reach(y)), old(_dryad_S3, srtl_reach(y))); 
    assume F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(P#y, ^s_node));
    // assume ==(old(_dryad_S2, sll_list_len_next(x)), old(_dryad_S3, sll_list_len_next(x))); 
    assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(P#x, ^s_node));
    // assume ==(old(_dryad_S2, rsrtl_reach(x)), old(_dryad_S3, rsrtl_reach(x))); 
    assume F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(P#x, ^s_node));
    // assume ==(old(_dryad_S2, sll(x)), old(_dryad_S3, sll(x))); 
    assume F#sll(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(P#x, ^s_node));
    // assume ==(old(_dryad_S2, sll_reach(x)), old(_dryad_S3, sll_reach(x))); 
    assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(P#x, ^s_node));
    // assume ==(old(_dryad_S2, srtl_reach(x)), old(_dryad_S3, srtl_reach(x))); 
    assume F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(curr_x)))), ==(old(_dryad_S2, sll_keys(curr_x)), old(_dryad_S3, sll_keys(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(curr_x)))), ==(old(_dryad_S2, sll_list_len_next(curr_x)), old(_dryad_S3, sll_list_len_next(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, rsrtl_reach(curr_x)))), ==(old(_dryad_S2, rsrtl(curr_x)), old(_dryad_S3, rsrtl(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node)) == F#rsrtl(SL#_dryad_S3, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, rsrtl_reach(curr_x)))), ==(old(_dryad_S2, rsrtl_reach(curr_x)), old(_dryad_S3, rsrtl_reach(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(curr_x)))), ==(old(_dryad_S2, sll(curr_x)), old(_dryad_S3, sll(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(curr_x)))), ==(old(_dryad_S2, sll_reach(curr_x)), old(_dryad_S3, sll_reach(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(curr_x)))), ==(old(_dryad_S2, sll_max_key(curr_x)), old(_dryad_S3, sll_max_key(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_max_key(SL#_dryad_S3, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(curr_x)))), ==(old(_dryad_S2, sll_min_key(curr_x)), old(_dryad_S3, sll_min_key(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_min_key(SL#_dryad_S3, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, srtl_reach(curr_x)))), ==(old(_dryad_S2, srtl(curr_x)), old(_dryad_S3, srtl(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl(SL#_dryad_S3, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, srtl_reach(curr_x)))), ==(old(_dryad_S2, srtl_reach(curr_x)), old(_dryad_S3, srtl_reach(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(curr_y)))), ==(old(_dryad_S2, sll_keys(curr_y)), old(_dryad_S3, sll_keys(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(curr_y)))), ==(old(_dryad_S2, sll_list_len_next(curr_y)), old(_dryad_S3, sll_list_len_next(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, rsrtl_reach(curr_y)))), ==(old(_dryad_S2, rsrtl(curr_y)), old(_dryad_S3, rsrtl(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node)) == F#rsrtl(SL#_dryad_S3, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, rsrtl_reach(curr_y)))), ==(old(_dryad_S2, rsrtl_reach(curr_y)), old(_dryad_S3, rsrtl_reach(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(curr_y)))), ==(old(_dryad_S2, sll(curr_y)), old(_dryad_S3, sll(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(curr_y)))), ==(old(_dryad_S2, sll_reach(curr_y)), old(_dryad_S3, sll_reach(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(curr_y)))), ==(old(_dryad_S2, sll_max_key(curr_y)), old(_dryad_S3, sll_max_key(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_max_key(SL#_dryad_S3, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(curr_y)))), ==(old(_dryad_S2, sll_min_key(curr_y)), old(_dryad_S3, sll_min_key(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_min_key(SL#_dryad_S3, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, srtl_reach(curr_y)))), ==(old(_dryad_S2, srtl(curr_y)), old(_dryad_S3, srtl(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl(SL#_dryad_S3, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, srtl_reach(curr_y)))), ==(old(_dryad_S2, srtl_reach(curr_y)), old(_dryad_S3, srtl_reach(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(last_z)))), ==(old(_dryad_S2, sll_keys(last_z)), old(_dryad_S3, sll_keys(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(last_z)))), ==(old(_dryad_S2, sll_list_len_next(last_z)), old(_dryad_S3, sll_list_len_next(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, rsrtl_reach(last_z)))), ==(old(_dryad_S2, rsrtl(last_z)), old(_dryad_S3, rsrtl(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node)) == F#rsrtl(SL#_dryad_S3, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, rsrtl_reach(last_z)))), ==(old(_dryad_S2, rsrtl_reach(last_z)), old(_dryad_S3, rsrtl_reach(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(last_z)))), ==(old(_dryad_S2, sll(last_z)), old(_dryad_S3, sll(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(last_z)))), ==(old(_dryad_S2, sll_reach(last_z)), old(_dryad_S3, sll_reach(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(last_z)))), ==(old(_dryad_S2, sll_max_key(last_z)), old(_dryad_S3, sll_max_key(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_max_key(SL#_dryad_S3, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(last_z)))), ==(old(_dryad_S2, sll_min_key(last_z)), old(_dryad_S3, sll_min_key(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_min_key(SL#_dryad_S3, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, srtl_reach(last_z)))), ==(old(_dryad_S2, srtl(last_z)), old(_dryad_S3, srtl(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#srtl(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl(SL#_dryad_S3, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, srtl_reach(last_z)))), ==(old(_dryad_S2, srtl_reach(last_z)), old(_dryad_S3, srtl_reach(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(y)))), ==(old(_dryad_S2, sll_keys(y)), old(_dryad_S3, sll_keys(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(y)))), ==(old(_dryad_S2, sll_list_len_next(y)), old(_dryad_S3, sll_list_len_next(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, rsrtl_reach(y)))), ==(old(_dryad_S2, rsrtl(y)), old(_dryad_S3, rsrtl(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node)) == F#rsrtl(SL#_dryad_S3, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, rsrtl_reach(y)))), ==(old(_dryad_S2, rsrtl_reach(y)), old(_dryad_S3, rsrtl_reach(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(y)))), ==(old(_dryad_S2, sll(y)), old(_dryad_S3, sll(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(y)))), ==(old(_dryad_S2, sll_reach(y)), old(_dryad_S3, sll_reach(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(y)))), ==(old(_dryad_S2, sll_max_key(y)), old(_dryad_S3, sll_max_key(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node)) == F#sll_max_key(SL#_dryad_S3, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(y)))), ==(old(_dryad_S2, sll_min_key(y)), old(_dryad_S3, sll_min_key(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node)) == F#sll_min_key(SL#_dryad_S3, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, srtl_reach(y)))), ==(old(_dryad_S2, srtl(y)), old(_dryad_S3, srtl(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node))) ==> F#srtl(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node)) == F#srtl(SL#_dryad_S3, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, srtl_reach(y)))), ==(old(_dryad_S2, srtl_reach(y)), old(_dryad_S3, srtl_reach(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(x)))), ==(old(_dryad_S2, sll_keys(x)), old(_dryad_S3, sll_keys(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(x)))), ==(old(_dryad_S2, sll_list_len_next(x)), old(_dryad_S3, sll_list_len_next(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, rsrtl_reach(x)))), ==(old(_dryad_S2, rsrtl(x)), old(_dryad_S3, rsrtl(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node)) == F#rsrtl(SL#_dryad_S3, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, rsrtl_reach(x)))), ==(old(_dryad_S2, rsrtl_reach(x)), old(_dryad_S3, rsrtl_reach(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(x)))), ==(old(_dryad_S2, sll(x)), old(_dryad_S3, sll(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(x)))), ==(old(_dryad_S2, sll_reach(x)), old(_dryad_S3, sll_reach(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(x)))), ==(old(_dryad_S2, sll_max_key(x)), old(_dryad_S3, sll_max_key(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node)) == F#sll_max_key(SL#_dryad_S3, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(x)))), ==(old(_dryad_S2, sll_min_key(x)), old(_dryad_S3, sll_min_key(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node)) == F#sll_min_key(SL#_dryad_S3, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, srtl_reach(x)))), ==(old(_dryad_S2, srtl(x)), old(_dryad_S3, srtl(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node))) ==> F#srtl(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node)) == F#srtl(SL#_dryad_S3, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, srtl_reach(x)))), ==(old(_dryad_S2, srtl_reach(x)), old(_dryad_S3, srtl_reach(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(z, curr_x)), ==(*((curr_x->key)), old(_dryad_S2, *((curr_x->key))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(L#curr_x, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(z, curr_x)), @_vcc_ptr_eq_pure(*((curr_x->next)), old(_dryad_S2, *((curr_x->next))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(L#curr_x, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(z, curr_y)), ==(*((curr_y->key)), old(_dryad_S2, *((curr_y->key))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(L#curr_y, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(z, curr_y)), @_vcc_ptr_eq_pure(*((curr_y->next)), old(_dryad_S2, *((curr_y->next))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(L#curr_y, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(z, last_z)), ==(*((last_z->key)), old(_dryad_S2, *((last_z->key))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(L#last_z, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(z, last_z)), @_vcc_ptr_eq_pure(*((last_z->next)), old(_dryad_S2, *((last_z->next))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(L#last_z, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(z, y)), ==(*((y->key)), old(_dryad_S2, *((y->key))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(P#y, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(z, y)), @_vcc_ptr_eq_pure(*((y->next)), old(_dryad_S2, *((y->next))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(P#y, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(z, x)), ==(*((x->key)), old(_dryad_S2, *((x->key))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(P#x, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(z, x)), @_vcc_ptr_eq_pure(*((x->next)), old(_dryad_S2, *((x->next))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(P#x, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node);
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_keys(curr_x), @_vcc_intset_union(sll_keys(*((curr_x->next))), @_vcc_intset_singleton(*((curr_x->key)))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_list_len_next(curr_x), unchecked+(sll_list_len_next(*((curr_x->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(rsrtl(curr_x), &&(&&(rsrtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, rsrtl_reach(*((curr_x->next)))))), >=(*((curr_x->key)), sll_max_key(*((curr_x->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(rsrtl_reach(curr_x), @_vcc_oset_union(rsrtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll(curr_x), &&(sll(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, sll_reach(*((curr_x->next)))))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_reach(curr_x), @_vcc_oset_union(sll_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_max_key(curr_x), @\int_max(*((curr_x->key)), sll_max_key(*((curr_x->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_min_key(curr_x), @\int_min(*((curr_x->key)), sll_min_key(*((curr_x->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(srtl(curr_x), &&(&&(srtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, srtl_reach(*((curr_x->next)))))), <=(*((curr_x->key)), sll_min_key(*((curr_x->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(srtl_reach(curr_x), @_vcc_oset_union(srtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_keys(curr_y), @_vcc_intset_union(sll_keys(*((curr_y->next))), @_vcc_intset_singleton(*((curr_y->key)))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_list_len_next(curr_y), unchecked+(sll_list_len_next(*((curr_y->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(rsrtl(curr_y), &&(&&(rsrtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, rsrtl_reach(*((curr_y->next)))))), >=(*((curr_y->key)), sll_max_key(*((curr_y->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(rsrtl_reach(curr_y), @_vcc_oset_union(rsrtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll(curr_y), &&(sll(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, sll_reach(*((curr_y->next)))))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_reach(curr_y), @_vcc_oset_union(sll_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_max_key(curr_y), @\int_max(*((curr_y->key)), sll_max_key(*((curr_y->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_min_key(curr_y), @\int_min(*((curr_y->key)), sll_min_key(*((curr_y->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(srtl(curr_y), &&(&&(srtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, srtl_reach(*((curr_y->next)))))), <=(*((curr_y->key)), sll_min_key(*((curr_y->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(srtl_reach(curr_y), @_vcc_oset_union(srtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_keys(last_z), @_vcc_intset_union(sll_keys(*((last_z->next))), @_vcc_intset_singleton(*((last_z->key)))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#last_z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_list_len_next(last_z), unchecked+(sll_list_len_next(*((last_z->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#last_z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(rsrtl(last_z), &&(&&(rsrtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, rsrtl_reach(*((last_z->next)))))), >=(*((last_z->key)), sll_max_key(*((last_z->next))))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(rsrtl_reach(last_z), @_vcc_oset_union(rsrtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll(last_z), &&(sll(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, sll_reach(*((last_z->next)))))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_reach(last_z), @_vcc_oset_union(sll_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_max_key(last_z), @\int_max(*((last_z->key)), sll_max_key(*((last_z->next)))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_min_key(last_z), @\int_min(*((last_z->key)), sll_min_key(*((last_z->next)))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(srtl(last_z), &&(&&(srtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, srtl_reach(*((last_z->next)))))), <=(*((last_z->key)), sll_min_key(*((last_z->next))))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(srtl_reach(last_z), @_vcc_oset_union(srtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_keys(y), @_vcc_intset_union(sll_keys(*((y->next))), @_vcc_intset_singleton(*((y->key)))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_list_len_next(y), unchecked+(sll_list_len_next(*((y->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(rsrtl(y), &&(&&(rsrtl(*((y->next))), unchecked!(@_vcc_oset_in(y, rsrtl_reach(*((y->next)))))), >=(*((y->key)), sll_max_key(*((y->next))))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(rsrtl_reach(y), @_vcc_oset_union(rsrtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll(y), &&(sll(*((y->next))), unchecked!(@_vcc_oset_in(y, sll_reach(*((y->next)))))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_reach(y), @_vcc_oset_union(sll_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_max_key(y), @\int_max(*((y->key)), sll_max_key(*((y->next)))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_min_key(y), @\int_min(*((y->key)), sll_min_key(*((y->next)))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(srtl(y), &&(&&(srtl(*((y->next))), unchecked!(@_vcc_oset_in(y, srtl_reach(*((y->next)))))), <=(*((y->key)), sll_min_key(*((y->next))))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(srtl_reach(y), @_vcc_oset_union(srtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_keys(x), @_vcc_intset_union(sll_keys(*((x->next))), @_vcc_intset_singleton(*((x->key)))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_list_len_next(x), unchecked+(sll_list_len_next(*((x->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(rsrtl(x), &&(&&(rsrtl(*((x->next))), unchecked!(@_vcc_oset_in(x, rsrtl_reach(*((x->next)))))), >=(*((x->key)), sll_max_key(*((x->next))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(rsrtl_reach(x), @_vcc_oset_union(rsrtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll(x), &&(sll(*((x->next))), unchecked!(@_vcc_oset_in(x, sll_reach(*((x->next)))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_reach(x), @_vcc_oset_union(sll_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_max_key(x), @\int_max(*((x->key)), sll_max_key(*((x->next)))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_min_key(x), @\int_min(*((x->key)), sll_min_key(*((x->next)))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(srtl(x), &&(&&(srtl(*((x->next))), unchecked!(@_vcc_oset_in(x, srtl_reach(*((x->next)))))), <=(*((x->key)), sll_min_key(*((x->next))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(srtl_reach(x), @_vcc_oset_union(srtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_keys(z), @_vcc_intset_union(sll_keys(*((z->next))), @_vcc_intset_singleton(*((z->key)))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node))));
    // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(rsrtl(z), &&(&&(rsrtl(*((z->next))), unchecked!(@_vcc_oset_in(z, rsrtl_reach(*((z->next)))))), >=(*((z->key)), sll_max_key(*((z->next))))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_max_key(z), @\int_max(*((z->key)), sll_max_key(*((z->next)))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_min_key(z), @\int_min(*((z->key)), sll_min_key(*((z->next)))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(srtl(z), &&(&&(srtl(*((z->next))), unchecked!(@_vcc_oset_in(z, srtl_reach(*((z->next)))))), <=(*((z->key)), sll_min_key(*((z->next))))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
    // assume ==(*((z->key)), +(*((curr_x->key)), *((curr_y->key)))); 
    assume $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) == $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) + $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node));
    // _math \state _dryad_S4; 
    // _dryad_S4 := @_vcc_current_state(@state); 
    SL#_dryad_S4 := $current_state($s);
    // _math \state stmtexpr7#26; 
    // stmtexpr7#26 := _dryad_S4; 
    stmtexpr7#26 := SL#_dryad_S4;
    // assert @prim_writes_check((z->next)); 
    assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#z, ^s_node), s_node.next));
    // *(z->next) := (struct s_node*)@null; 
    call $write_int(s_node.next, $phys_ptr_cast(L#z, ^s_node), $ptr_to_int($phys_ptr_cast($null, ^s_node)));
    assume $full_stop_ext(#tok$3^31.3, $s);
    // _math \state _dryad_S5; 
    // _dryad_S5 := @_vcc_current_state(@state); 
    SL#_dryad_S5 := $current_state($s);
    // _math \state stmtexpr8#27; 
    // stmtexpr8#27 := _dryad_S5; 
    stmtexpr8#27 := SL#_dryad_S5;
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(curr_x)))), ==(old(_dryad_S4, sll_keys(curr_x)), old(_dryad_S5, sll_keys(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(curr_x)))), ==(old(_dryad_S4, sll_list_len_next(curr_x)), old(_dryad_S5, sll_list_len_next(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, rsrtl_reach(curr_x)))), ==(old(_dryad_S4, rsrtl(curr_x)), old(_dryad_S5, rsrtl(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#rsrtl(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node)) == F#rsrtl(SL#_dryad_S5, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, rsrtl_reach(curr_x)))), ==(old(_dryad_S4, rsrtl_reach(curr_x)), old(_dryad_S5, rsrtl_reach(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(curr_x)))), ==(old(_dryad_S4, sll(curr_x)), old(_dryad_S5, sll(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(curr_x)))), ==(old(_dryad_S4, sll_reach(curr_x)), old(_dryad_S5, sll_reach(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(curr_x)))), ==(old(_dryad_S4, sll_max_key(curr_x)), old(_dryad_S5, sll_max_key(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_max_key(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_max_key(SL#_dryad_S5, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(curr_x)))), ==(old(_dryad_S4, sll_min_key(curr_x)), old(_dryad_S5, sll_min_key(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_min_key(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_min_key(SL#_dryad_S5, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, srtl_reach(curr_x)))), ==(old(_dryad_S4, srtl(curr_x)), old(_dryad_S5, srtl(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl(SL#_dryad_S5, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, srtl_reach(curr_x)))), ==(old(_dryad_S4, srtl_reach(curr_x)), old(_dryad_S5, srtl_reach(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(curr_y)))), ==(old(_dryad_S4, sll_keys(curr_y)), old(_dryad_S5, sll_keys(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(curr_y)))), ==(old(_dryad_S4, sll_list_len_next(curr_y)), old(_dryad_S5, sll_list_len_next(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, rsrtl_reach(curr_y)))), ==(old(_dryad_S4, rsrtl(curr_y)), old(_dryad_S5, rsrtl(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#rsrtl(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node)) == F#rsrtl(SL#_dryad_S5, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, rsrtl_reach(curr_y)))), ==(old(_dryad_S4, rsrtl_reach(curr_y)), old(_dryad_S5, rsrtl_reach(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(curr_y)))), ==(old(_dryad_S4, sll(curr_y)), old(_dryad_S5, sll(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(curr_y)))), ==(old(_dryad_S4, sll_reach(curr_y)), old(_dryad_S5, sll_reach(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(curr_y)))), ==(old(_dryad_S4, sll_max_key(curr_y)), old(_dryad_S5, sll_max_key(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_max_key(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_max_key(SL#_dryad_S5, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(curr_y)))), ==(old(_dryad_S4, sll_min_key(curr_y)), old(_dryad_S5, sll_min_key(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_min_key(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_min_key(SL#_dryad_S5, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, srtl_reach(curr_y)))), ==(old(_dryad_S4, srtl(curr_y)), old(_dryad_S5, srtl(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl(SL#_dryad_S5, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, srtl_reach(curr_y)))), ==(old(_dryad_S4, srtl_reach(curr_y)), old(_dryad_S5, srtl_reach(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(last_z)))), ==(old(_dryad_S4, sll_keys(last_z)), old(_dryad_S5, sll_keys(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(last_z)))), ==(old(_dryad_S4, sll_list_len_next(last_z)), old(_dryad_S5, sll_list_len_next(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, rsrtl_reach(last_z)))), ==(old(_dryad_S4, rsrtl(last_z)), old(_dryad_S5, rsrtl(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#rsrtl(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node)) == F#rsrtl(SL#_dryad_S5, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, rsrtl_reach(last_z)))), ==(old(_dryad_S4, rsrtl_reach(last_z)), old(_dryad_S5, rsrtl_reach(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node)) == F#rsrtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(last_z)))), ==(old(_dryad_S4, sll(last_z)), old(_dryad_S5, sll(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(last_z)))), ==(old(_dryad_S4, sll_reach(last_z)), old(_dryad_S5, sll_reach(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(last_z)))), ==(old(_dryad_S4, sll_max_key(last_z)), old(_dryad_S5, sll_max_key(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_max_key(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_max_key(SL#_dryad_S5, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(last_z)))), ==(old(_dryad_S4, sll_min_key(last_z)), old(_dryad_S5, sll_min_key(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_min_key(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_min_key(SL#_dryad_S5, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, srtl_reach(last_z)))), ==(old(_dryad_S4, srtl(last_z)), old(_dryad_S5, srtl(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#srtl(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl(SL#_dryad_S5, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, srtl_reach(last_z)))), ==(old(_dryad_S4, srtl_reach(last_z)), old(_dryad_S5, srtl_reach(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(y)))), ==(old(_dryad_S4, sll_keys(y)), old(_dryad_S5, sll_keys(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(y)))), ==(old(_dryad_S4, sll_list_len_next(y)), old(_dryad_S5, sll_list_len_next(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, rsrtl_reach(y)))), ==(old(_dryad_S4, rsrtl(y)), old(_dryad_S5, rsrtl(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node))) ==> F#rsrtl(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node)) == F#rsrtl(SL#_dryad_S5, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, rsrtl_reach(y)))), ==(old(_dryad_S4, rsrtl_reach(y)), old(_dryad_S5, rsrtl_reach(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S5, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(y)))), ==(old(_dryad_S4, sll(y)), old(_dryad_S5, sll(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(y)))), ==(old(_dryad_S4, sll_reach(y)), old(_dryad_S5, sll_reach(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(y)))), ==(old(_dryad_S4, sll_max_key(y)), old(_dryad_S5, sll_max_key(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_max_key(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node)) == F#sll_max_key(SL#_dryad_S5, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(y)))), ==(old(_dryad_S4, sll_min_key(y)), old(_dryad_S5, sll_min_key(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_min_key(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node)) == F#sll_min_key(SL#_dryad_S5, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, srtl_reach(y)))), ==(old(_dryad_S4, srtl(y)), old(_dryad_S5, srtl(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node))) ==> F#srtl(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node)) == F#srtl(SL#_dryad_S5, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, srtl_reach(y)))), ==(old(_dryad_S4, srtl_reach(y)), old(_dryad_S5, srtl_reach(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node))) ==> F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node)) == F#srtl_reach(SL#_dryad_S5, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(x)))), ==(old(_dryad_S4, sll_keys(x)), old(_dryad_S5, sll_keys(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(x)))), ==(old(_dryad_S4, sll_list_len_next(x)), old(_dryad_S5, sll_list_len_next(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, rsrtl_reach(x)))), ==(old(_dryad_S4, rsrtl(x)), old(_dryad_S5, rsrtl(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node))) ==> F#rsrtl(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node)) == F#rsrtl(SL#_dryad_S5, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, rsrtl_reach(x)))), ==(old(_dryad_S4, rsrtl_reach(x)), old(_dryad_S5, rsrtl_reach(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S5, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(x)))), ==(old(_dryad_S4, sll(x)), old(_dryad_S5, sll(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(x)))), ==(old(_dryad_S4, sll_reach(x)), old(_dryad_S5, sll_reach(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(x)))), ==(old(_dryad_S4, sll_max_key(x)), old(_dryad_S5, sll_max_key(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_max_key(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node)) == F#sll_max_key(SL#_dryad_S5, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(x)))), ==(old(_dryad_S4, sll_min_key(x)), old(_dryad_S5, sll_min_key(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_min_key(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node)) == F#sll_min_key(SL#_dryad_S5, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, srtl_reach(x)))), ==(old(_dryad_S4, srtl(x)), old(_dryad_S5, srtl(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node))) ==> F#srtl(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node)) == F#srtl(SL#_dryad_S5, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, srtl_reach(x)))), ==(old(_dryad_S4, srtl_reach(x)), old(_dryad_S5, srtl_reach(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node))) ==> F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node)) == F#srtl_reach(SL#_dryad_S5, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(z, curr_x)), ==(*((curr_x->key)), old(_dryad_S4, *((curr_x->key))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(L#curr_x, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(z, curr_x)), @_vcc_ptr_eq_pure(*((curr_x->next)), old(_dryad_S4, *((curr_x->next))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(L#curr_x, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(z, curr_y)), ==(*((curr_y->key)), old(_dryad_S4, *((curr_y->key))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(L#curr_y, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(z, curr_y)), @_vcc_ptr_eq_pure(*((curr_y->next)), old(_dryad_S4, *((curr_y->next))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(L#curr_y, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(z, last_z)), ==(*((last_z->key)), old(_dryad_S4, *((last_z->key))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(L#last_z, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(z, last_z)), @_vcc_ptr_eq_pure(*((last_z->next)), old(_dryad_S4, *((last_z->next))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(L#last_z, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(z, y)), ==(*((y->key)), old(_dryad_S4, *((y->key))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(P#y, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(z, y)), @_vcc_ptr_eq_pure(*((y->next)), old(_dryad_S4, *((y->next))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(P#y, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(z, x)), ==(*((x->key)), old(_dryad_S4, *((x->key))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(P#x, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(z, x)), @_vcc_ptr_eq_pure(*((x->next)), old(_dryad_S4, *((x->next))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(P#x, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node);
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_keys(curr_x), @_vcc_intset_union(sll_keys(*((curr_x->next))), @_vcc_intset_singleton(*((curr_x->key)))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_list_len_next(curr_x), unchecked+(sll_list_len_next(*((curr_x->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(rsrtl(curr_x), &&(&&(rsrtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, rsrtl_reach(*((curr_x->next)))))), >=(*((curr_x->key)), sll_max_key(*((curr_x->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(rsrtl_reach(curr_x), @_vcc_oset_union(rsrtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll(curr_x), &&(sll(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, sll_reach(*((curr_x->next)))))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_reach(curr_x), @_vcc_oset_union(sll_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_max_key(curr_x), @\int_max(*((curr_x->key)), sll_max_key(*((curr_x->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_min_key(curr_x), @\int_min(*((curr_x->key)), sll_min_key(*((curr_x->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(srtl(curr_x), &&(&&(srtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, srtl_reach(*((curr_x->next)))))), <=(*((curr_x->key)), sll_min_key(*((curr_x->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(srtl_reach(curr_x), @_vcc_oset_union(srtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_keys(curr_y), @_vcc_intset_union(sll_keys(*((curr_y->next))), @_vcc_intset_singleton(*((curr_y->key)))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_list_len_next(curr_y), unchecked+(sll_list_len_next(*((curr_y->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(rsrtl(curr_y), &&(&&(rsrtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, rsrtl_reach(*((curr_y->next)))))), >=(*((curr_y->key)), sll_max_key(*((curr_y->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(rsrtl_reach(curr_y), @_vcc_oset_union(rsrtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll(curr_y), &&(sll(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, sll_reach(*((curr_y->next)))))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_reach(curr_y), @_vcc_oset_union(sll_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_max_key(curr_y), @\int_max(*((curr_y->key)), sll_max_key(*((curr_y->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_min_key(curr_y), @\int_min(*((curr_y->key)), sll_min_key(*((curr_y->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(srtl(curr_y), &&(&&(srtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, srtl_reach(*((curr_y->next)))))), <=(*((curr_y->key)), sll_min_key(*((curr_y->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(srtl_reach(curr_y), @_vcc_oset_union(srtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_keys(last_z), @_vcc_intset_union(sll_keys(*((last_z->next))), @_vcc_intset_singleton(*((last_z->key)))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#last_z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_list_len_next(last_z), unchecked+(sll_list_len_next(*((last_z->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#last_z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(rsrtl(last_z), &&(&&(rsrtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, rsrtl_reach(*((last_z->next)))))), >=(*((last_z->key)), sll_max_key(*((last_z->next))))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(rsrtl_reach(last_z), @_vcc_oset_union(rsrtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll(last_z), &&(sll(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, sll_reach(*((last_z->next)))))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_reach(last_z), @_vcc_oset_union(sll_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_max_key(last_z), @\int_max(*((last_z->key)), sll_max_key(*((last_z->next)))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_min_key(last_z), @\int_min(*((last_z->key)), sll_min_key(*((last_z->next)))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(srtl(last_z), &&(&&(srtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, srtl_reach(*((last_z->next)))))), <=(*((last_z->key)), sll_min_key(*((last_z->next))))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(srtl_reach(last_z), @_vcc_oset_union(srtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_keys(y), @_vcc_intset_union(sll_keys(*((y->next))), @_vcc_intset_singleton(*((y->key)))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_list_len_next(y), unchecked+(sll_list_len_next(*((y->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(rsrtl(y), &&(&&(rsrtl(*((y->next))), unchecked!(@_vcc_oset_in(y, rsrtl_reach(*((y->next)))))), >=(*((y->key)), sll_max_key(*((y->next))))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(rsrtl_reach(y), @_vcc_oset_union(rsrtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll(y), &&(sll(*((y->next))), unchecked!(@_vcc_oset_in(y, sll_reach(*((y->next)))))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_reach(y), @_vcc_oset_union(sll_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_max_key(y), @\int_max(*((y->key)), sll_max_key(*((y->next)))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_min_key(y), @\int_min(*((y->key)), sll_min_key(*((y->next)))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(srtl(y), &&(&&(srtl(*((y->next))), unchecked!(@_vcc_oset_in(y, srtl_reach(*((y->next)))))), <=(*((y->key)), sll_min_key(*((y->next))))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(srtl_reach(y), @_vcc_oset_union(srtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_keys(x), @_vcc_intset_union(sll_keys(*((x->next))), @_vcc_intset_singleton(*((x->key)))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_list_len_next(x), unchecked+(sll_list_len_next(*((x->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(rsrtl(x), &&(&&(rsrtl(*((x->next))), unchecked!(@_vcc_oset_in(x, rsrtl_reach(*((x->next)))))), >=(*((x->key)), sll_max_key(*((x->next))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(rsrtl_reach(x), @_vcc_oset_union(rsrtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll(x), &&(sll(*((x->next))), unchecked!(@_vcc_oset_in(x, sll_reach(*((x->next)))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_reach(x), @_vcc_oset_union(sll_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_max_key(x), @\int_max(*((x->key)), sll_max_key(*((x->next)))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_min_key(x), @\int_min(*((x->key)), sll_min_key(*((x->next)))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(srtl(x), &&(&&(srtl(*((x->next))), unchecked!(@_vcc_oset_in(x, srtl_reach(*((x->next)))))), <=(*((x->key)), sll_min_key(*((x->next))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(srtl_reach(x), @_vcc_oset_union(srtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_keys(z), @_vcc_intset_union(sll_keys(*((z->next))), @_vcc_intset_singleton(*((z->key)))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_list_len_next(z), unchecked+(sll_list_len_next(*((z->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(rsrtl(z), &&(&&(rsrtl(*((z->next))), unchecked!(@_vcc_oset_in(z, rsrtl_reach(*((z->next)))))), >=(*((z->key)), sll_max_key(*((z->next))))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(rsrtl_reach(z), @_vcc_oset_union(rsrtl_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(sll(z), &&(sll(*((z->next))), unchecked!(@_vcc_oset_in(z, sll_reach(*((z->next)))))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_reach(z), @_vcc_oset_union(sll_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_max_key(z), @\int_max(*((z->key)), sll_max_key(*((z->next)))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_min_key(z), @\int_min(*((z->key)), sll_min_key(*((z->next)))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(srtl(z), &&(&&(srtl(*((z->next))), unchecked!(@_vcc_oset_in(z, srtl_reach(*((z->next)))))), <=(*((z->key)), sll_min_key(*((z->next))))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(srtl_reach(z), @_vcc_oset_union(srtl_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), &&(@_vcc_mutable(@state, curr_x), @writes_check(curr_x))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> $mutable($s, $phys_ptr_cast(L#curr_x, ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), &&(@_vcc_mutable(@state, curr_y), @writes_check(curr_y))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> $mutable($s, $phys_ptr_cast(L#curr_y, ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(@_vcc_ptr_neq_null(last_z), &&(@_vcc_mutable(@state, last_z), @writes_check(last_z))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> $mutable($s, $phys_ptr_cast(L#last_z, ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(L#last_z, ^s_node));
    loopState#0 := $s;
    assume true;
// INV:LOOPHEAD
    while (true)
 invariant b0000 ==> (F#srtl($s,$phys_ptr_cast(P#x,^s_node)));
invariant b0001 ==> (F#srtl($s,$phys_ptr_cast(P#y,^s_node)));
invariant b0002 ==> (F#srtl($s,$phys_ptr_cast(L#curr_x,^s_node)));
invariant b0003 ==> (F#srtl($s,$phys_ptr_cast(L#curr_y,^s_node)));
invariant b0004 ==> (F#srtl($s,$phys_ptr_cast(L#z,^s_node)));
invariant b0005 ==> (F#srtl($s,$phys_ptr_cast(L#last_z,^s_node)));
invariant b0006 ==> (F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node)));
invariant b0007 ==> (F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node)));
invariant b0008 ==> (F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)));
invariant b0009 ==> (F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node)));
invariant b0010 ==> (F#srtl_lseg($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node)));
invariant b0011 ==> (F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node)));
invariant b0012 ==> (F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)));
invariant b0013 ==> (F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node)));
invariant b0014 ==> (F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node)));
invariant b0015 ==> (F#srtl_lseg($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node)));
invariant b0016 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node)));
invariant b0017 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node)));
invariant b0018 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)));
invariant b0019 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node)));
invariant b0020 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node)));
invariant b0021 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node)));
invariant b0022 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node)));
invariant b0023 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)));
invariant b0024 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node)));
invariant b0025 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node)));
invariant b0026 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node)));
invariant b0027 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node)));
invariant b0028 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)));
invariant b0029 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)));
invariant b0030 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node)));
invariant b0031 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node)));
invariant b0032 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node)));
invariant b0033 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)));
invariant b0034 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)));
invariant b0035 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node)));
invariant b0036 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0037 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0038 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0039 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0040 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0041 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0042 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0043 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0044 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0045 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0046 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0047 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0048 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0049 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0050 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0051 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0052 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0053 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0054 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0055 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0056 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0057 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0058 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0059 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0060 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0061 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0062 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0063 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0064 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0065 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0066 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0067 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0068 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0069 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0070 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0071 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0072 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0073 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0074 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0075 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0076 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0077 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0078 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0079 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0080 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0081 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0082 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0083 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0084 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0085 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0086 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0087 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0088 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0089 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0090 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0091 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0092 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0093 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0094 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0095 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0096 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0097 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0098 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0099 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0100 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0101 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0102 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0103 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0104 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0105 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0106 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0107 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0108 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0109 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0110 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0111 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0112 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0113 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0114 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0115 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0116 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0117 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0118 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0119 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0120 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0121 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0122 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0123 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0124 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0125 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0126 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0127 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0128 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0129 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0130 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0131 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0132 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0133 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0134 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0135 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0136 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0137 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0138 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0139 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0140 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0141 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0142 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0143 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0144 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0145 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0146 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0147 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0148 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0149 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0150 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0151 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0152 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0153 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0154 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0155 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0156 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0157 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0158 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0159 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0160 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0161 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0162 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0163 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0164 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0165 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0166 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0167 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0168 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0169 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0170 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0171 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0172 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0173 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0174 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0175 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0176 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0177 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0178 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0179 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0180 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0181 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0182 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0183 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0184 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0185 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0186 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0187 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0188 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0189 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0190 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0191 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0192 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0193 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0194 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0195 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0196 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0197 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0198 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0199 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0200 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0201 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0202 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0203 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0204 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0205 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0206 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0207 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0208 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0209 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0210 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0211 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0212 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0213 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0214 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0215 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0216 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0217 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0218 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0219 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0220 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0221 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0222 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0223 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0224 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0225 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0226 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0227 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0228 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0229 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0230 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_x,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0231 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0232 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0233 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0234 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0235 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_y,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0236 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0237 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0238 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0239 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0240 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#last_z,^s_node))));
invariant b0241 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#x,^s_node))));
invariant b0242 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#y,^s_node))));
invariant b0243 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0244 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0245 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last_z,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#z,^s_node))));
invariant b0246 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0247 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0248 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0249 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0250 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0251 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0252 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0253 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0254 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0255 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0256 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0257 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0258 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0259 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0260 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0261 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0262 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0263 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0264 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0265 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0266 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0267 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0268 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0269 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0270 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0271 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0272 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0273 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0274 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0275 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0276 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0277 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0278 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0279 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0280 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0281 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0282 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0283 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0284 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0285 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0286 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0287 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0288 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0289 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0290 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0291 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0292 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0293 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0294 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0295 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0296 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0297 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0298 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0299 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0300 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0301 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0302 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0303 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0304 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0305 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_x,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0306 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0307 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0308 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0309 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0310 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0311 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0312 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0313 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0314 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0315 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0316 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0317 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0318 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0319 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0320 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0321 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0322 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0323 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0324 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0325 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#curr_y,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0326 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0327 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0328 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0329 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0330 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0331 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0332 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0333 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0334 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0335 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0336 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0337 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0338 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0339 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0340 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0341 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node))));
invariant b0342 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0343 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0344 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0345 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0346 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last_z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0347 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last_z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0348 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last_z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0349 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last_z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0350 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last_z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0351 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last_z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0352 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last_z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0353 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last_z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0354 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last_z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0355 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last_z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0356 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last_z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0357 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last_z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0358 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last_z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0359 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last_z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0360 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last_z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0361 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last_z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node))));
invariant b0362 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last_z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node))));
invariant b0363 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last_z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node))));
invariant b0364 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last_z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))));
invariant b0365 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#last_z,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))));
invariant b0366 ==> ($non_null($phys_ptr_cast(P#x,^s_node)));
invariant b0367 ==> ($non_null($phys_ptr_cast(P#y,^s_node)));
invariant b0368 ==> ($non_null($phys_ptr_cast(L#curr_x,^s_node)));
invariant b0369 ==> ($non_null($phys_ptr_cast(L#curr_y,^s_node)));
invariant b0370 ==> ($non_null($phys_ptr_cast(L#z,^s_node)));
invariant b0371 ==> ($non_null($phys_ptr_cast(L#last_z,^s_node)));
invariant b0372 ==> ($is_null($phys_ptr_cast(P#x,^s_node)));
invariant b0373 ==> ($is_null($phys_ptr_cast(P#y,^s_node)));
invariant b0374 ==> ($is_null($phys_ptr_cast(L#curr_x,^s_node)));
invariant b0375 ==> ($is_null($phys_ptr_cast(L#curr_y,^s_node)));
invariant b0376 ==> ($is_null($phys_ptr_cast(L#z,^s_node)));
invariant b0377 ==> ($is_null($phys_ptr_cast(L#last_z,^s_node)));
invariant b0378 ==> (($phys_ptr_cast(P#x,^s_node) == $phys_ptr_cast(P#y,^s_node)));
invariant b0379 ==> (($phys_ptr_cast(P#x,^s_node) == $phys_ptr_cast(L#curr_x,^s_node)));
invariant b0380 ==> (($phys_ptr_cast(P#x,^s_node) == $phys_ptr_cast(L#curr_y,^s_node)));
invariant b0381 ==> (($phys_ptr_cast(P#x,^s_node) == $phys_ptr_cast(L#z,^s_node)));
invariant b0382 ==> (($phys_ptr_cast(P#x,^s_node) == $phys_ptr_cast(L#last_z,^s_node)));
invariant b0383 ==> (($phys_ptr_cast(P#y,^s_node) == $phys_ptr_cast(P#x,^s_node)));
invariant b0384 ==> (($phys_ptr_cast(P#y,^s_node) == $phys_ptr_cast(L#curr_x,^s_node)));
invariant b0385 ==> (($phys_ptr_cast(P#y,^s_node) == $phys_ptr_cast(L#curr_y,^s_node)));
invariant b0386 ==> (($phys_ptr_cast(P#y,^s_node) == $phys_ptr_cast(L#z,^s_node)));
invariant b0387 ==> (($phys_ptr_cast(P#y,^s_node) == $phys_ptr_cast(L#last_z,^s_node)));
invariant b0388 ==> (($phys_ptr_cast(L#curr_x,^s_node) == $phys_ptr_cast(P#x,^s_node)));
invariant b0389 ==> (($phys_ptr_cast(L#curr_x,^s_node) == $phys_ptr_cast(P#y,^s_node)));
invariant b0390 ==> (($phys_ptr_cast(L#curr_x,^s_node) == $phys_ptr_cast(L#curr_y,^s_node)));
invariant b0391 ==> (($phys_ptr_cast(L#curr_x,^s_node) == $phys_ptr_cast(L#z,^s_node)));
invariant b0392 ==> (($phys_ptr_cast(L#curr_x,^s_node) == $phys_ptr_cast(L#last_z,^s_node)));
invariant b0393 ==> (($phys_ptr_cast(L#curr_y,^s_node) == $phys_ptr_cast(P#x,^s_node)));
invariant b0394 ==> (($phys_ptr_cast(L#curr_y,^s_node) == $phys_ptr_cast(P#y,^s_node)));
invariant b0395 ==> (($phys_ptr_cast(L#curr_y,^s_node) == $phys_ptr_cast(L#curr_x,^s_node)));
invariant b0396 ==> (($phys_ptr_cast(L#curr_y,^s_node) == $phys_ptr_cast(L#z,^s_node)));
invariant b0397 ==> (($phys_ptr_cast(L#curr_y,^s_node) == $phys_ptr_cast(L#last_z,^s_node)));
invariant b0398 ==> (($phys_ptr_cast(L#z,^s_node) == $phys_ptr_cast(P#x,^s_node)));
invariant b0399 ==> (($phys_ptr_cast(L#z,^s_node) == $phys_ptr_cast(P#y,^s_node)));
invariant b0400 ==> (($phys_ptr_cast(L#z,^s_node) == $phys_ptr_cast(L#curr_x,^s_node)));
invariant b0401 ==> (($phys_ptr_cast(L#z,^s_node) == $phys_ptr_cast(L#curr_y,^s_node)));
invariant b0402 ==> (($phys_ptr_cast(L#z,^s_node) == $phys_ptr_cast(L#last_z,^s_node)));
invariant b0403 ==> (($phys_ptr_cast(L#last_z,^s_node) == $phys_ptr_cast(P#x,^s_node)));
invariant b0404 ==> (($phys_ptr_cast(L#last_z,^s_node) == $phys_ptr_cast(P#y,^s_node)));
invariant b0405 ==> (($phys_ptr_cast(L#last_z,^s_node) == $phys_ptr_cast(L#curr_x,^s_node)));
invariant b0406 ==> (($phys_ptr_cast(L#last_z,^s_node) == $phys_ptr_cast(L#curr_y,^s_node)));
invariant b0407 ==> (($phys_ptr_cast(L#last_z,^s_node) == $phys_ptr_cast(L#z,^s_node)));
invariant b0408 ==> (($non_null($phys_ptr_cast(P#x,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#x,^s_node),^s_node))));
invariant b0409 ==> (($non_null($phys_ptr_cast(P#y,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#y,^s_node),^s_node))));
invariant b0410 ==> (($non_null($phys_ptr_cast(L#curr_x,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#curr_x,^s_node),^s_node))));
invariant b0411 ==> (($non_null($phys_ptr_cast(L#curr_y,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#curr_y,^s_node),^s_node))));
invariant b0412 ==> (($non_null($phys_ptr_cast(L#z,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#z,^s_node),^s_node))));
invariant b0413 ==> (($non_null($phys_ptr_cast(L#last_z,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#last_z,^s_node),^s_node))));
invariant b0414 ==> (($non_null($phys_ptr_cast(P#x,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#x,^s_node),^s_node))));
invariant b0415 ==> (($non_null($phys_ptr_cast(P#y,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#y,^s_node),^s_node))));
invariant b0416 ==> (($non_null($phys_ptr_cast(L#curr_x,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#curr_x,^s_node),^s_node))));
invariant b0417 ==> (($non_null($phys_ptr_cast(L#curr_y,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#curr_y,^s_node),^s_node))));
invariant b0418 ==> (($non_null($phys_ptr_cast(L#z,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#z,^s_node),^s_node))));
invariant b0419 ==> (($non_null($phys_ptr_cast(L#last_z,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#last_z,^s_node),^s_node))));
invariant b0420 ==> (($non_null($phys_ptr_cast(P#x,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#x,^s_node),^s_node) == $phys_ptr_cast(P#y,^s_node))));
invariant b0421 ==> (($non_null($phys_ptr_cast(P#x,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#x,^s_node),^s_node) == $phys_ptr_cast(L#curr_x,^s_node))));
invariant b0422 ==> (($non_null($phys_ptr_cast(P#x,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#x,^s_node),^s_node) == $phys_ptr_cast(L#curr_y,^s_node))));
invariant b0423 ==> (($non_null($phys_ptr_cast(P#x,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#x,^s_node),^s_node) == $phys_ptr_cast(L#z,^s_node))));
invariant b0424 ==> (($non_null($phys_ptr_cast(P#x,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#x,^s_node),^s_node) == $phys_ptr_cast(L#last_z,^s_node))));
invariant b0425 ==> (($non_null($phys_ptr_cast(P#y,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#y,^s_node),^s_node) == $phys_ptr_cast(P#x,^s_node))));
invariant b0426 ==> (($non_null($phys_ptr_cast(P#y,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#y,^s_node),^s_node) == $phys_ptr_cast(L#curr_x,^s_node))));
invariant b0427 ==> (($non_null($phys_ptr_cast(P#y,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#y,^s_node),^s_node) == $phys_ptr_cast(L#curr_y,^s_node))));
invariant b0428 ==> (($non_null($phys_ptr_cast(P#y,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#y,^s_node),^s_node) == $phys_ptr_cast(L#z,^s_node))));
invariant b0429 ==> (($non_null($phys_ptr_cast(P#y,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#y,^s_node),^s_node) == $phys_ptr_cast(L#last_z,^s_node))));
invariant b0430 ==> (($non_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#curr_x,^s_node),^s_node) == $phys_ptr_cast(P#x,^s_node))));
invariant b0431 ==> (($non_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#curr_x,^s_node),^s_node) == $phys_ptr_cast(P#y,^s_node))));
invariant b0432 ==> (($non_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#curr_x,^s_node),^s_node) == $phys_ptr_cast(L#curr_y,^s_node))));
invariant b0433 ==> (($non_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#curr_x,^s_node),^s_node) == $phys_ptr_cast(L#z,^s_node))));
invariant b0434 ==> (($non_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#curr_x,^s_node),^s_node) == $phys_ptr_cast(L#last_z,^s_node))));
invariant b0435 ==> (($non_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#curr_y,^s_node),^s_node) == $phys_ptr_cast(P#x,^s_node))));
invariant b0436 ==> (($non_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#curr_y,^s_node),^s_node) == $phys_ptr_cast(P#y,^s_node))));
invariant b0437 ==> (($non_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#curr_y,^s_node),^s_node) == $phys_ptr_cast(L#curr_x,^s_node))));
invariant b0438 ==> (($non_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#curr_y,^s_node),^s_node) == $phys_ptr_cast(L#z,^s_node))));
invariant b0439 ==> (($non_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#curr_y,^s_node),^s_node) == $phys_ptr_cast(L#last_z,^s_node))));
invariant b0440 ==> (($non_null($phys_ptr_cast(L#z,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#z,^s_node),^s_node) == $phys_ptr_cast(P#x,^s_node))));
invariant b0441 ==> (($non_null($phys_ptr_cast(L#z,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#z,^s_node),^s_node) == $phys_ptr_cast(P#y,^s_node))));
invariant b0442 ==> (($non_null($phys_ptr_cast(L#z,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#z,^s_node),^s_node) == $phys_ptr_cast(L#curr_x,^s_node))));
invariant b0443 ==> (($non_null($phys_ptr_cast(L#z,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#z,^s_node),^s_node) == $phys_ptr_cast(L#curr_y,^s_node))));
invariant b0444 ==> (($non_null($phys_ptr_cast(L#z,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#z,^s_node),^s_node) == $phys_ptr_cast(L#last_z,^s_node))));
invariant b0445 ==> (($non_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#last_z,^s_node),^s_node) == $phys_ptr_cast(P#x,^s_node))));
invariant b0446 ==> (($non_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#last_z,^s_node),^s_node) == $phys_ptr_cast(P#y,^s_node))));
invariant b0447 ==> (($non_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#last_z,^s_node),^s_node) == $phys_ptr_cast(L#curr_x,^s_node))));
invariant b0448 ==> (($non_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#last_z,^s_node),^s_node) == $phys_ptr_cast(L#curr_y,^s_node))));
invariant b0449 ==> (($non_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#last_z,^s_node),^s_node) == $phys_ptr_cast(L#z,^s_node))));
invariant b0450 ==> ((!($oset_in($phys_ptr_cast(P#x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))))));
invariant b0451 ==> ((!($oset_in($phys_ptr_cast(P#x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node))))));
invariant b0452 ==> ((!($oset_in($phys_ptr_cast(P#x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node))))));
invariant b0453 ==> ((!($oset_in($phys_ptr_cast(P#x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node))))));
invariant b0454 ==> ((!($oset_in($phys_ptr_cast(P#x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node))))));
invariant b0455 ==> ((!($oset_in($phys_ptr_cast(P#x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))))));
invariant b0456 ==> ((!($oset_in($phys_ptr_cast(P#x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node))))));
invariant b0457 ==> ((!($oset_in($phys_ptr_cast(P#x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node))))));
invariant b0458 ==> ((!($oset_in($phys_ptr_cast(P#x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node))))));
invariant b0459 ==> ((!($oset_in($phys_ptr_cast(P#x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))))));
invariant b0460 ==> ((!($oset_in($phys_ptr_cast(P#x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node))))));
invariant b0461 ==> ((!($oset_in($phys_ptr_cast(P#x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node))))));
invariant b0462 ==> ((!($oset_in($phys_ptr_cast(P#x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node))))));
invariant b0463 ==> ((!($oset_in($phys_ptr_cast(P#x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))))));
invariant b0464 ==> ((!($oset_in($phys_ptr_cast(P#x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))))));
invariant b0465 ==> ((!($oset_in($phys_ptr_cast(P#x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node))))));
invariant b0466 ==> ((!($oset_in($phys_ptr_cast(P#x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node))))));
invariant b0467 ==> ((!($oset_in($phys_ptr_cast(P#x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))))));
invariant b0468 ==> ((!($oset_in($phys_ptr_cast(P#x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))))));
invariant b0469 ==> ((!($oset_in($phys_ptr_cast(P#x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node))))));
invariant b0470 ==> ((!($oset_in($phys_ptr_cast(P#y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node))))));
invariant b0471 ==> ((!($oset_in($phys_ptr_cast(P#y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))))));
invariant b0472 ==> ((!($oset_in($phys_ptr_cast(P#y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node))))));
invariant b0473 ==> ((!($oset_in($phys_ptr_cast(P#y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node))))));
invariant b0474 ==> ((!($oset_in($phys_ptr_cast(P#y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node))))));
invariant b0475 ==> ((!($oset_in($phys_ptr_cast(P#y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))))));
invariant b0476 ==> ((!($oset_in($phys_ptr_cast(P#y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node))))));
invariant b0477 ==> ((!($oset_in($phys_ptr_cast(P#y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node))))));
invariant b0478 ==> ((!($oset_in($phys_ptr_cast(P#y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node))))));
invariant b0479 ==> ((!($oset_in($phys_ptr_cast(P#y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))))));
invariant b0480 ==> ((!($oset_in($phys_ptr_cast(P#y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node))))));
invariant b0481 ==> ((!($oset_in($phys_ptr_cast(P#y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node))))));
invariant b0482 ==> ((!($oset_in($phys_ptr_cast(P#y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node))))));
invariant b0483 ==> ((!($oset_in($phys_ptr_cast(P#y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))))));
invariant b0484 ==> ((!($oset_in($phys_ptr_cast(P#y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))))));
invariant b0485 ==> ((!($oset_in($phys_ptr_cast(P#y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node))))));
invariant b0486 ==> ((!($oset_in($phys_ptr_cast(P#y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node))))));
invariant b0487 ==> ((!($oset_in($phys_ptr_cast(P#y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))))));
invariant b0488 ==> ((!($oset_in($phys_ptr_cast(P#y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))))));
invariant b0489 ==> ((!($oset_in($phys_ptr_cast(P#y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node))))));
invariant b0490 ==> ((!($oset_in($phys_ptr_cast(L#curr_x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node))))));
invariant b0491 ==> ((!($oset_in($phys_ptr_cast(L#curr_x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))))));
invariant b0492 ==> ((!($oset_in($phys_ptr_cast(L#curr_x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node))))));
invariant b0493 ==> ((!($oset_in($phys_ptr_cast(L#curr_x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node))))));
invariant b0494 ==> ((!($oset_in($phys_ptr_cast(L#curr_x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node))))));
invariant b0495 ==> ((!($oset_in($phys_ptr_cast(L#curr_x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node))))));
invariant b0496 ==> ((!($oset_in($phys_ptr_cast(L#curr_x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node))))));
invariant b0497 ==> ((!($oset_in($phys_ptr_cast(L#curr_x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node))))));
invariant b0498 ==> ((!($oset_in($phys_ptr_cast(L#curr_x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node))))));
invariant b0499 ==> ((!($oset_in($phys_ptr_cast(L#curr_x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node))))));
invariant b0500 ==> ((!($oset_in($phys_ptr_cast(L#curr_x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node))))));
invariant b0501 ==> ((!($oset_in($phys_ptr_cast(L#curr_x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node))))));
invariant b0502 ==> ((!($oset_in($phys_ptr_cast(L#curr_x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node))))));
invariant b0503 ==> ((!($oset_in($phys_ptr_cast(L#curr_x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node))))));
invariant b0504 ==> ((!($oset_in($phys_ptr_cast(L#curr_x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))))));
invariant b0505 ==> ((!($oset_in($phys_ptr_cast(L#curr_x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node))))));
invariant b0506 ==> ((!($oset_in($phys_ptr_cast(L#curr_x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node))))));
invariant b0507 ==> ((!($oset_in($phys_ptr_cast(L#curr_x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node))))));
invariant b0508 ==> ((!($oset_in($phys_ptr_cast(L#curr_x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))))));
invariant b0509 ==> ((!($oset_in($phys_ptr_cast(L#curr_x,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node))))));
invariant b0510 ==> ((!($oset_in($phys_ptr_cast(L#curr_y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node))))));
invariant b0511 ==> ((!($oset_in($phys_ptr_cast(L#curr_y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node))))));
invariant b0512 ==> ((!($oset_in($phys_ptr_cast(L#curr_y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node))))));
invariant b0513 ==> ((!($oset_in($phys_ptr_cast(L#curr_y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node))))));
invariant b0514 ==> ((!($oset_in($phys_ptr_cast(L#curr_y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node))))));
invariant b0515 ==> ((!($oset_in($phys_ptr_cast(L#curr_y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))))));
invariant b0516 ==> ((!($oset_in($phys_ptr_cast(L#curr_y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node))))));
invariant b0517 ==> ((!($oset_in($phys_ptr_cast(L#curr_y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node))))));
invariant b0518 ==> ((!($oset_in($phys_ptr_cast(L#curr_y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node))))));
invariant b0519 ==> ((!($oset_in($phys_ptr_cast(L#curr_y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node))))));
invariant b0520 ==> ((!($oset_in($phys_ptr_cast(L#curr_y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node))))));
invariant b0521 ==> ((!($oset_in($phys_ptr_cast(L#curr_y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node))))));
invariant b0522 ==> ((!($oset_in($phys_ptr_cast(L#curr_y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node))))));
invariant b0523 ==> ((!($oset_in($phys_ptr_cast(L#curr_y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node))))));
invariant b0524 ==> ((!($oset_in($phys_ptr_cast(L#curr_y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))))));
invariant b0525 ==> ((!($oset_in($phys_ptr_cast(L#curr_y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#last_z,^s_node))))));
invariant b0526 ==> ((!($oset_in($phys_ptr_cast(L#curr_y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node))))));
invariant b0527 ==> ((!($oset_in($phys_ptr_cast(L#curr_y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node))))));
invariant b0528 ==> ((!($oset_in($phys_ptr_cast(L#curr_y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))))));
invariant b0529 ==> ((!($oset_in($phys_ptr_cast(L#curr_y,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#z,^s_node))))));
invariant b0530 ==> ((!($oset_in($phys_ptr_cast(L#z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node))))));
invariant b0531 ==> ((!($oset_in($phys_ptr_cast(L#z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node))))));
invariant b0532 ==> ((!($oset_in($phys_ptr_cast(L#z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))))));
invariant b0533 ==> ((!($oset_in($phys_ptr_cast(L#z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#last_z,^s_node))))));
invariant b0534 ==> ((!($oset_in($phys_ptr_cast(L#z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node))))));
invariant b0535 ==> ((!($oset_in($phys_ptr_cast(L#z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))))));
invariant b0536 ==> ((!($oset_in($phys_ptr_cast(L#z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node))))));
invariant b0537 ==> ((!($oset_in($phys_ptr_cast(L#z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#last_z,^s_node))))));
invariant b0538 ==> ((!($oset_in($phys_ptr_cast(L#z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node))))));
invariant b0539 ==> ((!($oset_in($phys_ptr_cast(L#z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node))))));
invariant b0540 ==> ((!($oset_in($phys_ptr_cast(L#z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))))));
invariant b0541 ==> ((!($oset_in($phys_ptr_cast(L#z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#last_z,^s_node))))));
invariant b0542 ==> ((!($oset_in($phys_ptr_cast(L#z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node))))));
invariant b0543 ==> ((!($oset_in($phys_ptr_cast(L#z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node))))));
invariant b0544 ==> ((!($oset_in($phys_ptr_cast(L#z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))))));
invariant b0545 ==> ((!($oset_in($phys_ptr_cast(L#z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#last_z,^s_node))))));
invariant b0546 ==> ((!($oset_in($phys_ptr_cast(L#z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#x,^s_node))))));
invariant b0547 ==> ((!($oset_in($phys_ptr_cast(L#z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(P#y,^s_node))))));
invariant b0548 ==> ((!($oset_in($phys_ptr_cast(L#z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))))));
invariant b0549 ==> ((!($oset_in($phys_ptr_cast(L#z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#last_z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))))));
invariant b0550 ==> ((!($oset_in($phys_ptr_cast(L#last_z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(P#y,^s_node))))));
invariant b0551 ==> ((!($oset_in($phys_ptr_cast(L#last_z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_x,^s_node))))));
invariant b0552 ==> ((!($oset_in($phys_ptr_cast(L#last_z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))))));
invariant b0553 ==> ((!($oset_in($phys_ptr_cast(L#last_z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#x,^s_node),$phys_ptr_cast(L#z,^s_node))))));
invariant b0554 ==> ((!($oset_in($phys_ptr_cast(L#last_z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(P#x,^s_node))))));
invariant b0555 ==> ((!($oset_in($phys_ptr_cast(L#last_z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))))));
invariant b0556 ==> ((!($oset_in($phys_ptr_cast(L#last_z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#curr_y,^s_node))))));
invariant b0557 ==> ((!($oset_in($phys_ptr_cast(L#last_z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#y,^s_node),$phys_ptr_cast(L#z,^s_node))))));
invariant b0558 ==> ((!($oset_in($phys_ptr_cast(L#last_z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#x,^s_node))))));
invariant b0559 ==> ((!($oset_in($phys_ptr_cast(L#last_z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(P#y,^s_node))))));
invariant b0560 ==> ((!($oset_in($phys_ptr_cast(L#last_z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#curr_y,^s_node))))));
invariant b0561 ==> ((!($oset_in($phys_ptr_cast(L#last_z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_x,^s_node),$phys_ptr_cast(L#z,^s_node))))));
invariant b0562 ==> ((!($oset_in($phys_ptr_cast(L#last_z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#x,^s_node))))));
invariant b0563 ==> ((!($oset_in($phys_ptr_cast(L#last_z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(P#y,^s_node))))));
invariant b0564 ==> ((!($oset_in($phys_ptr_cast(L#last_z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#curr_x,^s_node))))));
invariant b0565 ==> ((!($oset_in($phys_ptr_cast(L#last_z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#curr_y,^s_node),$phys_ptr_cast(L#z,^s_node))))));
invariant b0566 ==> ((!($oset_in($phys_ptr_cast(L#last_z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#x,^s_node))))));
invariant b0567 ==> ((!($oset_in($phys_ptr_cast(L#last_z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(P#y,^s_node))))));
invariant b0568 ==> ((!($oset_in($phys_ptr_cast(L#last_z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_x,^s_node))))));
invariant b0569 ==> ((!($oset_in($phys_ptr_cast(L#last_z,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#z,^s_node),$phys_ptr_cast(L#curr_y,^s_node))))));
invariant b0570 ==> (($is_null($phys_ptr_cast(P#x,^s_node)) ==> ($phys_ptr_cast(P#y,^s_node) == $phys_ptr_cast(L#curr_x,^s_node))));
invariant b0571 ==> (($is_null($phys_ptr_cast(P#x,^s_node)) ==> ($phys_ptr_cast(P#y,^s_node) == $phys_ptr_cast(L#curr_y,^s_node))));
invariant b0572 ==> (($is_null($phys_ptr_cast(P#x,^s_node)) ==> ($phys_ptr_cast(P#y,^s_node) == $phys_ptr_cast(L#z,^s_node))));
invariant b0573 ==> (($is_null($phys_ptr_cast(P#x,^s_node)) ==> ($phys_ptr_cast(P#y,^s_node) == $phys_ptr_cast(L#last_z,^s_node))));
invariant b0574 ==> (($is_null($phys_ptr_cast(P#x,^s_node)) ==> ($phys_ptr_cast(L#curr_x,^s_node) == $phys_ptr_cast(P#y,^s_node))));
invariant b0575 ==> (($is_null($phys_ptr_cast(P#x,^s_node)) ==> ($phys_ptr_cast(L#curr_x,^s_node) == $phys_ptr_cast(L#curr_y,^s_node))));
invariant b0576 ==> (($is_null($phys_ptr_cast(P#x,^s_node)) ==> ($phys_ptr_cast(L#curr_x,^s_node) == $phys_ptr_cast(L#z,^s_node))));
invariant b0577 ==> (($is_null($phys_ptr_cast(P#x,^s_node)) ==> ($phys_ptr_cast(L#curr_x,^s_node) == $phys_ptr_cast(L#last_z,^s_node))));
invariant b0578 ==> (($is_null($phys_ptr_cast(P#x,^s_node)) ==> ($phys_ptr_cast(L#curr_y,^s_node) == $phys_ptr_cast(P#y,^s_node))));
invariant b0579 ==> (($is_null($phys_ptr_cast(P#x,^s_node)) ==> ($phys_ptr_cast(L#curr_y,^s_node) == $phys_ptr_cast(L#curr_x,^s_node))));
invariant b0580 ==> (($is_null($phys_ptr_cast(P#x,^s_node)) ==> ($phys_ptr_cast(L#curr_y,^s_node) == $phys_ptr_cast(L#z,^s_node))));
invariant b0581 ==> (($is_null($phys_ptr_cast(P#x,^s_node)) ==> ($phys_ptr_cast(L#curr_y,^s_node) == $phys_ptr_cast(L#last_z,^s_node))));
invariant b0582 ==> (($is_null($phys_ptr_cast(P#x,^s_node)) ==> ($phys_ptr_cast(L#z,^s_node) == $phys_ptr_cast(P#y,^s_node))));
invariant b0583 ==> (($is_null($phys_ptr_cast(P#x,^s_node)) ==> ($phys_ptr_cast(L#z,^s_node) == $phys_ptr_cast(L#curr_x,^s_node))));
invariant b0584 ==> (($is_null($phys_ptr_cast(P#x,^s_node)) ==> ($phys_ptr_cast(L#z,^s_node) == $phys_ptr_cast(L#curr_y,^s_node))));
invariant b0585 ==> (($is_null($phys_ptr_cast(P#x,^s_node)) ==> ($phys_ptr_cast(L#z,^s_node) == $phys_ptr_cast(L#last_z,^s_node))));
invariant b0586 ==> (($is_null($phys_ptr_cast(P#x,^s_node)) ==> ($phys_ptr_cast(L#last_z,^s_node) == $phys_ptr_cast(P#y,^s_node))));
invariant b0587 ==> (($is_null($phys_ptr_cast(P#x,^s_node)) ==> ($phys_ptr_cast(L#last_z,^s_node) == $phys_ptr_cast(L#curr_x,^s_node))));
invariant b0588 ==> (($is_null($phys_ptr_cast(P#x,^s_node)) ==> ($phys_ptr_cast(L#last_z,^s_node) == $phys_ptr_cast(L#curr_y,^s_node))));
invariant b0589 ==> (($is_null($phys_ptr_cast(P#x,^s_node)) ==> ($phys_ptr_cast(L#last_z,^s_node) == $phys_ptr_cast(L#z,^s_node))));
invariant b0590 ==> (($is_null($phys_ptr_cast(P#y,^s_node)) ==> ($phys_ptr_cast(P#x,^s_node) == $phys_ptr_cast(L#curr_x,^s_node))));
invariant b0591 ==> (($is_null($phys_ptr_cast(P#y,^s_node)) ==> ($phys_ptr_cast(P#x,^s_node) == $phys_ptr_cast(L#curr_y,^s_node))));
invariant b0592 ==> (($is_null($phys_ptr_cast(P#y,^s_node)) ==> ($phys_ptr_cast(P#x,^s_node) == $phys_ptr_cast(L#z,^s_node))));
invariant b0593 ==> (($is_null($phys_ptr_cast(P#y,^s_node)) ==> ($phys_ptr_cast(P#x,^s_node) == $phys_ptr_cast(L#last_z,^s_node))));
invariant b0594 ==> (($is_null($phys_ptr_cast(P#y,^s_node)) ==> ($phys_ptr_cast(L#curr_x,^s_node) == $phys_ptr_cast(P#x,^s_node))));
invariant b0595 ==> (($is_null($phys_ptr_cast(P#y,^s_node)) ==> ($phys_ptr_cast(L#curr_x,^s_node) == $phys_ptr_cast(L#curr_y,^s_node))));
invariant b0596 ==> (($is_null($phys_ptr_cast(P#y,^s_node)) ==> ($phys_ptr_cast(L#curr_x,^s_node) == $phys_ptr_cast(L#z,^s_node))));
invariant b0597 ==> (($is_null($phys_ptr_cast(P#y,^s_node)) ==> ($phys_ptr_cast(L#curr_x,^s_node) == $phys_ptr_cast(L#last_z,^s_node))));
invariant b0598 ==> (($is_null($phys_ptr_cast(P#y,^s_node)) ==> ($phys_ptr_cast(L#curr_y,^s_node) == $phys_ptr_cast(P#x,^s_node))));
invariant b0599 ==> (($is_null($phys_ptr_cast(P#y,^s_node)) ==> ($phys_ptr_cast(L#curr_y,^s_node) == $phys_ptr_cast(L#curr_x,^s_node))));
invariant b0600 ==> (($is_null($phys_ptr_cast(P#y,^s_node)) ==> ($phys_ptr_cast(L#curr_y,^s_node) == $phys_ptr_cast(L#z,^s_node))));
invariant b0601 ==> (($is_null($phys_ptr_cast(P#y,^s_node)) ==> ($phys_ptr_cast(L#curr_y,^s_node) == $phys_ptr_cast(L#last_z,^s_node))));
invariant b0602 ==> (($is_null($phys_ptr_cast(P#y,^s_node)) ==> ($phys_ptr_cast(L#z,^s_node) == $phys_ptr_cast(P#x,^s_node))));
invariant b0603 ==> (($is_null($phys_ptr_cast(P#y,^s_node)) ==> ($phys_ptr_cast(L#z,^s_node) == $phys_ptr_cast(L#curr_x,^s_node))));
invariant b0604 ==> (($is_null($phys_ptr_cast(P#y,^s_node)) ==> ($phys_ptr_cast(L#z,^s_node) == $phys_ptr_cast(L#curr_y,^s_node))));
invariant b0605 ==> (($is_null($phys_ptr_cast(P#y,^s_node)) ==> ($phys_ptr_cast(L#z,^s_node) == $phys_ptr_cast(L#last_z,^s_node))));
invariant b0606 ==> (($is_null($phys_ptr_cast(P#y,^s_node)) ==> ($phys_ptr_cast(L#last_z,^s_node) == $phys_ptr_cast(P#x,^s_node))));
invariant b0607 ==> (($is_null($phys_ptr_cast(P#y,^s_node)) ==> ($phys_ptr_cast(L#last_z,^s_node) == $phys_ptr_cast(L#curr_x,^s_node))));
invariant b0608 ==> (($is_null($phys_ptr_cast(P#y,^s_node)) ==> ($phys_ptr_cast(L#last_z,^s_node) == $phys_ptr_cast(L#curr_y,^s_node))));
invariant b0609 ==> (($is_null($phys_ptr_cast(P#y,^s_node)) ==> ($phys_ptr_cast(L#last_z,^s_node) == $phys_ptr_cast(L#z,^s_node))));
invariant b0610 ==> (($is_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($phys_ptr_cast(P#x,^s_node) == $phys_ptr_cast(P#y,^s_node))));
invariant b0611 ==> (($is_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($phys_ptr_cast(P#x,^s_node) == $phys_ptr_cast(L#curr_y,^s_node))));
invariant b0612 ==> (($is_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($phys_ptr_cast(P#x,^s_node) == $phys_ptr_cast(L#z,^s_node))));
invariant b0613 ==> (($is_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($phys_ptr_cast(P#x,^s_node) == $phys_ptr_cast(L#last_z,^s_node))));
invariant b0614 ==> (($is_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($phys_ptr_cast(P#y,^s_node) == $phys_ptr_cast(P#x,^s_node))));
invariant b0615 ==> (($is_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($phys_ptr_cast(P#y,^s_node) == $phys_ptr_cast(L#curr_y,^s_node))));
invariant b0616 ==> (($is_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($phys_ptr_cast(P#y,^s_node) == $phys_ptr_cast(L#z,^s_node))));
invariant b0617 ==> (($is_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($phys_ptr_cast(P#y,^s_node) == $phys_ptr_cast(L#last_z,^s_node))));
invariant b0618 ==> (($is_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($phys_ptr_cast(L#curr_y,^s_node) == $phys_ptr_cast(P#x,^s_node))));
invariant b0619 ==> (($is_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($phys_ptr_cast(L#curr_y,^s_node) == $phys_ptr_cast(P#y,^s_node))));
invariant b0620 ==> (($is_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($phys_ptr_cast(L#curr_y,^s_node) == $phys_ptr_cast(L#z,^s_node))));
invariant b0621 ==> (($is_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($phys_ptr_cast(L#curr_y,^s_node) == $phys_ptr_cast(L#last_z,^s_node))));
invariant b0622 ==> (($is_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($phys_ptr_cast(L#z,^s_node) == $phys_ptr_cast(P#x,^s_node))));
invariant b0623 ==> (($is_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($phys_ptr_cast(L#z,^s_node) == $phys_ptr_cast(P#y,^s_node))));
invariant b0624 ==> (($is_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($phys_ptr_cast(L#z,^s_node) == $phys_ptr_cast(L#curr_y,^s_node))));
invariant b0625 ==> (($is_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($phys_ptr_cast(L#z,^s_node) == $phys_ptr_cast(L#last_z,^s_node))));
invariant b0626 ==> (($is_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($phys_ptr_cast(L#last_z,^s_node) == $phys_ptr_cast(P#x,^s_node))));
invariant b0627 ==> (($is_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($phys_ptr_cast(L#last_z,^s_node) == $phys_ptr_cast(P#y,^s_node))));
invariant b0628 ==> (($is_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($phys_ptr_cast(L#last_z,^s_node) == $phys_ptr_cast(L#curr_y,^s_node))));
invariant b0629 ==> (($is_null($phys_ptr_cast(L#curr_x,^s_node)) ==> ($phys_ptr_cast(L#last_z,^s_node) == $phys_ptr_cast(L#z,^s_node))));
invariant b0630 ==> (($is_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($phys_ptr_cast(P#x,^s_node) == $phys_ptr_cast(P#y,^s_node))));
invariant b0631 ==> (($is_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($phys_ptr_cast(P#x,^s_node) == $phys_ptr_cast(L#curr_x,^s_node))));
invariant b0632 ==> (($is_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($phys_ptr_cast(P#x,^s_node) == $phys_ptr_cast(L#z,^s_node))));
invariant b0633 ==> (($is_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($phys_ptr_cast(P#x,^s_node) == $phys_ptr_cast(L#last_z,^s_node))));
invariant b0634 ==> (($is_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($phys_ptr_cast(P#y,^s_node) == $phys_ptr_cast(P#x,^s_node))));
invariant b0635 ==> (($is_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($phys_ptr_cast(P#y,^s_node) == $phys_ptr_cast(L#curr_x,^s_node))));
invariant b0636 ==> (($is_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($phys_ptr_cast(P#y,^s_node) == $phys_ptr_cast(L#z,^s_node))));
invariant b0637 ==> (($is_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($phys_ptr_cast(P#y,^s_node) == $phys_ptr_cast(L#last_z,^s_node))));
invariant b0638 ==> (($is_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($phys_ptr_cast(L#curr_x,^s_node) == $phys_ptr_cast(P#x,^s_node))));
invariant b0639 ==> (($is_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($phys_ptr_cast(L#curr_x,^s_node) == $phys_ptr_cast(P#y,^s_node))));
invariant b0640 ==> (($is_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($phys_ptr_cast(L#curr_x,^s_node) == $phys_ptr_cast(L#z,^s_node))));
invariant b0641 ==> (($is_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($phys_ptr_cast(L#curr_x,^s_node) == $phys_ptr_cast(L#last_z,^s_node))));
invariant b0642 ==> (($is_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($phys_ptr_cast(L#z,^s_node) == $phys_ptr_cast(P#x,^s_node))));
invariant b0643 ==> (($is_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($phys_ptr_cast(L#z,^s_node) == $phys_ptr_cast(P#y,^s_node))));
invariant b0644 ==> (($is_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($phys_ptr_cast(L#z,^s_node) == $phys_ptr_cast(L#curr_x,^s_node))));
invariant b0645 ==> (($is_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($phys_ptr_cast(L#z,^s_node) == $phys_ptr_cast(L#last_z,^s_node))));
invariant b0646 ==> (($is_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($phys_ptr_cast(L#last_z,^s_node) == $phys_ptr_cast(P#x,^s_node))));
invariant b0647 ==> (($is_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($phys_ptr_cast(L#last_z,^s_node) == $phys_ptr_cast(P#y,^s_node))));
invariant b0648 ==> (($is_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($phys_ptr_cast(L#last_z,^s_node) == $phys_ptr_cast(L#curr_x,^s_node))));
invariant b0649 ==> (($is_null($phys_ptr_cast(L#curr_y,^s_node)) ==> ($phys_ptr_cast(L#last_z,^s_node) == $phys_ptr_cast(L#z,^s_node))));
invariant b0650 ==> (($is_null($phys_ptr_cast(L#z,^s_node)) ==> ($phys_ptr_cast(P#x,^s_node) == $phys_ptr_cast(P#y,^s_node))));
invariant b0651 ==> (($is_null($phys_ptr_cast(L#z,^s_node)) ==> ($phys_ptr_cast(P#x,^s_node) == $phys_ptr_cast(L#curr_x,^s_node))));
invariant b0652 ==> (($is_null($phys_ptr_cast(L#z,^s_node)) ==> ($phys_ptr_cast(P#x,^s_node) == $phys_ptr_cast(L#curr_y,^s_node))));
invariant b0653 ==> (($is_null($phys_ptr_cast(L#z,^s_node)) ==> ($phys_ptr_cast(P#x,^s_node) == $phys_ptr_cast(L#last_z,^s_node))));
invariant b0654 ==> (($is_null($phys_ptr_cast(L#z,^s_node)) ==> ($phys_ptr_cast(P#y,^s_node) == $phys_ptr_cast(P#x,^s_node))));
invariant b0655 ==> (($is_null($phys_ptr_cast(L#z,^s_node)) ==> ($phys_ptr_cast(P#y,^s_node) == $phys_ptr_cast(L#curr_x,^s_node))));
invariant b0656 ==> (($is_null($phys_ptr_cast(L#z,^s_node)) ==> ($phys_ptr_cast(P#y,^s_node) == $phys_ptr_cast(L#curr_y,^s_node))));
invariant b0657 ==> (($is_null($phys_ptr_cast(L#z,^s_node)) ==> ($phys_ptr_cast(P#y,^s_node) == $phys_ptr_cast(L#last_z,^s_node))));
invariant b0658 ==> (($is_null($phys_ptr_cast(L#z,^s_node)) ==> ($phys_ptr_cast(L#curr_x,^s_node) == $phys_ptr_cast(P#x,^s_node))));
invariant b0659 ==> (($is_null($phys_ptr_cast(L#z,^s_node)) ==> ($phys_ptr_cast(L#curr_x,^s_node) == $phys_ptr_cast(P#y,^s_node))));
invariant b0660 ==> (($is_null($phys_ptr_cast(L#z,^s_node)) ==> ($phys_ptr_cast(L#curr_x,^s_node) == $phys_ptr_cast(L#curr_y,^s_node))));
invariant b0661 ==> (($is_null($phys_ptr_cast(L#z,^s_node)) ==> ($phys_ptr_cast(L#curr_x,^s_node) == $phys_ptr_cast(L#last_z,^s_node))));
invariant b0662 ==> (($is_null($phys_ptr_cast(L#z,^s_node)) ==> ($phys_ptr_cast(L#curr_y,^s_node) == $phys_ptr_cast(P#x,^s_node))));
invariant b0663 ==> (($is_null($phys_ptr_cast(L#z,^s_node)) ==> ($phys_ptr_cast(L#curr_y,^s_node) == $phys_ptr_cast(P#y,^s_node))));
invariant b0664 ==> (($is_null($phys_ptr_cast(L#z,^s_node)) ==> ($phys_ptr_cast(L#curr_y,^s_node) == $phys_ptr_cast(L#curr_x,^s_node))));
invariant b0665 ==> (($is_null($phys_ptr_cast(L#z,^s_node)) ==> ($phys_ptr_cast(L#curr_y,^s_node) == $phys_ptr_cast(L#last_z,^s_node))));
invariant b0666 ==> (($is_null($phys_ptr_cast(L#z,^s_node)) ==> ($phys_ptr_cast(L#last_z,^s_node) == $phys_ptr_cast(P#x,^s_node))));
invariant b0667 ==> (($is_null($phys_ptr_cast(L#z,^s_node)) ==> ($phys_ptr_cast(L#last_z,^s_node) == $phys_ptr_cast(P#y,^s_node))));
invariant b0668 ==> (($is_null($phys_ptr_cast(L#z,^s_node)) ==> ($phys_ptr_cast(L#last_z,^s_node) == $phys_ptr_cast(L#curr_x,^s_node))));
invariant b0669 ==> (($is_null($phys_ptr_cast(L#z,^s_node)) ==> ($phys_ptr_cast(L#last_z,^s_node) == $phys_ptr_cast(L#curr_y,^s_node))));
invariant b0670 ==> (($is_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($phys_ptr_cast(P#x,^s_node) == $phys_ptr_cast(P#y,^s_node))));
invariant b0671 ==> (($is_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($phys_ptr_cast(P#x,^s_node) == $phys_ptr_cast(L#curr_x,^s_node))));
invariant b0672 ==> (($is_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($phys_ptr_cast(P#x,^s_node) == $phys_ptr_cast(L#curr_y,^s_node))));
invariant b0673 ==> (($is_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($phys_ptr_cast(P#x,^s_node) == $phys_ptr_cast(L#z,^s_node))));
invariant b0674 ==> (($is_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($phys_ptr_cast(P#y,^s_node) == $phys_ptr_cast(P#x,^s_node))));
invariant b0675 ==> (($is_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($phys_ptr_cast(P#y,^s_node) == $phys_ptr_cast(L#curr_x,^s_node))));
invariant b0676 ==> (($is_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($phys_ptr_cast(P#y,^s_node) == $phys_ptr_cast(L#curr_y,^s_node))));
invariant b0677 ==> (($is_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($phys_ptr_cast(P#y,^s_node) == $phys_ptr_cast(L#z,^s_node))));
invariant b0678 ==> (($is_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($phys_ptr_cast(L#curr_x,^s_node) == $phys_ptr_cast(P#x,^s_node))));
invariant b0679 ==> (($is_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($phys_ptr_cast(L#curr_x,^s_node) == $phys_ptr_cast(P#y,^s_node))));
invariant b0680 ==> (($is_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($phys_ptr_cast(L#curr_x,^s_node) == $phys_ptr_cast(L#curr_y,^s_node))));
invariant b0681 ==> (($is_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($phys_ptr_cast(L#curr_x,^s_node) == $phys_ptr_cast(L#z,^s_node))));
invariant b0682 ==> (($is_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($phys_ptr_cast(L#curr_y,^s_node) == $phys_ptr_cast(P#x,^s_node))));
invariant b0683 ==> (($is_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($phys_ptr_cast(L#curr_y,^s_node) == $phys_ptr_cast(P#y,^s_node))));
invariant b0684 ==> (($is_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($phys_ptr_cast(L#curr_y,^s_node) == $phys_ptr_cast(L#curr_x,^s_node))));
invariant b0685 ==> (($is_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($phys_ptr_cast(L#curr_y,^s_node) == $phys_ptr_cast(L#z,^s_node))));
invariant b0686 ==> (($is_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($phys_ptr_cast(L#z,^s_node) == $phys_ptr_cast(P#x,^s_node))));
invariant b0687 ==> (($is_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($phys_ptr_cast(L#z,^s_node) == $phys_ptr_cast(P#y,^s_node))));
invariant b0688 ==> (($is_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($phys_ptr_cast(L#z,^s_node) == $phys_ptr_cast(L#curr_x,^s_node))));
invariant b0689 ==> (($is_null($phys_ptr_cast(L#last_z,^s_node)) ==> ($phys_ptr_cast(L#z,^s_node) == $phys_ptr_cast(L#curr_y,^s_node))));

      invariant $oset_subset(F#srtl_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), SL#ALL_REACH);
      invariant $oset_subset(F#srtl_reach($s, $phys_ptr_cast(P#x, ^s_node)), SL#ALL_REACH);
      invariant $oset_subset(F#srtl_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), SL#ALL_REACH);
      invariant $oset_subset(F#srtl_reach($s, $phys_ptr_cast(P#y, ^s_node)), SL#ALL_REACH);
      invariant $oset_subset(F#srtl_lseg_reach($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)), SL#ALL_REACH);
      invariant $oset_subset(F#srtl_reach($s, $phys_ptr_cast(L#z, ^s_node)), SL#ALL_REACH);
      invariant $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> $mutable($s, $phys_ptr_cast(L#curr_x, ^s_node));
      invariant $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(L#curr_x, ^s_node));
      invariant $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> $mutable($s, $phys_ptr_cast(L#curr_y, ^s_node));
      invariant $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(L#curr_y, ^s_node));
      invariant $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> $mutable($s, $phys_ptr_cast(L#last_z, ^s_node));
      invariant $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(L#last_z, ^s_node));
    {
      anon7:
        assume $writes_nothing(old($s), $s);
        assume $timestamp_post(loopState#0, $s);
        assume $full_stop_ext(#tok$3^35.3, $s);
        // assume @_vcc_meta_eq(old(@prestate, @state), @state); 
        assume $meta_eq(loopState#0, $s);
        // _Bool ite#2; 
        // assert @reads_check_normal((curr_x->next)); 
        assert $thread_local($s, $phys_ptr_cast(L#curr_x, ^s_node));
        assume true;
        // if (@_vcc_ptr_neq_null(*((curr_x->next)))) ...
        if ($non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)))
        {
          anon3:
            // assert @_vcc_possibly_unreachable; 
            assert {:PossiblyUnreachable true} true;
            // assert @reads_check_normal((curr_y->next)); 
            assert $thread_local($s, $phys_ptr_cast(L#curr_y, ^s_node));
            // ite#2 := @_vcc_ptr_neq_null(*((curr_y->next))); 
            ite#2 := $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node));
        }
        else
        {
          anon4:
            // assert @_vcc_possibly_unreachable; 
            assert {:PossiblyUnreachable true} true;
            // ite#2 := false; 
            ite#2 := false;
        }

      anon8:
        assume true;
        // if (ite#2) ...
        if (ite#2)
        {
          anon5:
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_keys(curr_x), @_vcc_intset_union(sll_keys(*((curr_x->next))), @_vcc_intset_singleton(*((curr_x->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_list_len_next(curr_x), unchecked+(sll_list_len_next(*((curr_x->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(rsrtl(curr_x), &&(&&(rsrtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, rsrtl_reach(*((curr_x->next)))))), >=(*((curr_x->key)), sll_max_key(*((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(rsrtl_reach(curr_x), @_vcc_oset_union(rsrtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll(curr_x), &&(sll(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, sll_reach(*((curr_x->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_reach(curr_x), @_vcc_oset_union(sll_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_max_key(curr_x), @\int_max(*((curr_x->key)), sll_max_key(*((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_min_key(curr_x), @\int_min(*((curr_x->key)), sll_min_key(*((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(srtl(curr_x), &&(&&(srtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, srtl_reach(*((curr_x->next)))))), <=(*((curr_x->key)), sll_min_key(*((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(srtl_reach(curr_x), @_vcc_oset_union(srtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_keys(curr_y), @_vcc_intset_union(sll_keys(*((curr_y->next))), @_vcc_intset_singleton(*((curr_y->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_list_len_next(curr_y), unchecked+(sll_list_len_next(*((curr_y->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(rsrtl(curr_y), &&(&&(rsrtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, rsrtl_reach(*((curr_y->next)))))), >=(*((curr_y->key)), sll_max_key(*((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(rsrtl_reach(curr_y), @_vcc_oset_union(rsrtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll(curr_y), &&(sll(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, sll_reach(*((curr_y->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_reach(curr_y), @_vcc_oset_union(sll_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_max_key(curr_y), @\int_max(*((curr_y->key)), sll_max_key(*((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_min_key(curr_y), @\int_min(*((curr_y->key)), sll_min_key(*((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(srtl(curr_y), &&(&&(srtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, srtl_reach(*((curr_y->next)))))), <=(*((curr_y->key)), sll_min_key(*((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(srtl_reach(curr_y), @_vcc_oset_union(srtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_keys(z), @_vcc_intset_union(sll_keys(*((z->next))), @_vcc_intset_singleton(*((z->key)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_list_len_next(z), unchecked+(sll_list_len_next(*((z->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(rsrtl(z), &&(&&(rsrtl(*((z->next))), unchecked!(@_vcc_oset_in(z, rsrtl_reach(*((z->next)))))), >=(*((z->key)), sll_max_key(*((z->next))))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(rsrtl_reach(z), @_vcc_oset_union(rsrtl_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll(z), &&(sll(*((z->next))), unchecked!(@_vcc_oset_in(z, sll_reach(*((z->next)))))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_reach(z), @_vcc_oset_union(sll_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_max_key(z), @\int_max(*((z->key)), sll_max_key(*((z->next)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_min_key(z), @\int_min(*((z->key)), sll_min_key(*((z->next)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(srtl(z), &&(&&(srtl(*((z->next))), unchecked!(@_vcc_oset_in(z, srtl_reach(*((z->next)))))), <=(*((z->key)), sll_min_key(*((z->next))))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(srtl_reach(z), @_vcc_oset_union(srtl_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_keys(last_z), @_vcc_intset_union(sll_keys(*((last_z->next))), @_vcc_intset_singleton(*((last_z->key)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#last_z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_list_len_next(last_z), unchecked+(sll_list_len_next(*((last_z->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#last_z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(rsrtl(last_z), &&(&&(rsrtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, rsrtl_reach(*((last_z->next)))))), >=(*((last_z->key)), sll_max_key(*((last_z->next))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(rsrtl_reach(last_z), @_vcc_oset_union(rsrtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll(last_z), &&(sll(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, sll_reach(*((last_z->next)))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_reach(last_z), @_vcc_oset_union(sll_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_max_key(last_z), @\int_max(*((last_z->key)), sll_max_key(*((last_z->next)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_min_key(last_z), @\int_min(*((last_z->key)), sll_min_key(*((last_z->next)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(srtl(last_z), &&(&&(srtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, srtl_reach(*((last_z->next)))))), <=(*((last_z->key)), sll_min_key(*((last_z->next))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(srtl_reach(last_z), @_vcc_oset_union(srtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_keys(y), @_vcc_intset_union(sll_keys(*((y->next))), @_vcc_intset_singleton(*((y->key)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_list_len_next(y), unchecked+(sll_list_len_next(*((y->next))), 1))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(rsrtl(y), &&(&&(rsrtl(*((y->next))), unchecked!(@_vcc_oset_in(y, rsrtl_reach(*((y->next)))))), >=(*((y->key)), sll_max_key(*((y->next))))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(rsrtl_reach(y), @_vcc_oset_union(rsrtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll(y), &&(sll(*((y->next))), unchecked!(@_vcc_oset_in(y, sll_reach(*((y->next)))))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_reach(y), @_vcc_oset_union(sll_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_max_key(y), @\int_max(*((y->key)), sll_max_key(*((y->next)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_min_key(y), @\int_min(*((y->key)), sll_min_key(*((y->next)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(srtl(y), &&(&&(srtl(*((y->next))), unchecked!(@_vcc_oset_in(y, srtl_reach(*((y->next)))))), <=(*((y->key)), sll_min_key(*((y->next))))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(srtl_reach(y), @_vcc_oset_union(srtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_keys(x), @_vcc_intset_union(sll_keys(*((x->next))), @_vcc_intset_singleton(*((x->key)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_list_len_next(x), unchecked+(sll_list_len_next(*((x->next))), 1))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(rsrtl(x), &&(&&(rsrtl(*((x->next))), unchecked!(@_vcc_oset_in(x, rsrtl_reach(*((x->next)))))), >=(*((x->key)), sll_max_key(*((x->next))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(rsrtl_reach(x), @_vcc_oset_union(rsrtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll(x), &&(sll(*((x->next))), unchecked!(@_vcc_oset_in(x, sll_reach(*((x->next)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_reach(x), @_vcc_oset_union(sll_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_max_key(x), @\int_max(*((x->key)), sll_max_key(*((x->next)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_min_key(x), @\int_min(*((x->key)), sll_min_key(*((x->next)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(srtl(x), &&(&&(srtl(*((x->next))), unchecked!(@_vcc_oset_in(x, srtl_reach(*((x->next)))))), <=(*((x->key)), sll_min_key(*((x->next))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(srtl_reach(x), @_vcc_oset_union(srtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg(y, curr_y), &&(sll_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, sll_lseg_reach(*((y->next)), curr_y)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_reach(y, curr_y), @_vcc_oset_union(sll_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_keys(y, curr_y), @_vcc_intset_union(sll_lseg_keys(*((y->next)), curr_y), @_vcc_intset_singleton(*((y->key)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_len_next(y, curr_y), unchecked+(sll_lseg_len_next(*((y->next)), curr_y), 1))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_max_key(y, curr_y), @\int_max(*((y->key)), sll_lseg_max_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_min_key(y, curr_y), @\int_min(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(srtl_lseg(y, curr_y), &&(&&(srtl_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, srtl_lseg_reach(*((y->next)), curr_y)))), <=(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(srtl_lseg_reach(y, curr_y), @_vcc_oset_union(srtl_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), ==(sll_lseg(z, last_z), &&(sll_lseg(*((z->next)), last_z), unchecked!(@_vcc_oset_in(z, sll_lseg_reach(*((z->next)), last_z)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), ==(sll_lseg_reach(z, last_z), @_vcc_oset_union(sll_lseg_reach(*((z->next)), last_z), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), ==(sll_lseg_keys(z, last_z), @_vcc_intset_union(sll_lseg_keys(*((z->next)), last_z), @_vcc_intset_singleton(*((z->key)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), ==(sll_lseg_len_next(z, last_z), unchecked+(sll_lseg_len_next(*((z->next)), last_z), 1))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), @_vcc_ptr_neq_pure(*((z->next)), last_z)), ==(sll_lseg_max_key(z, last_z), @\int_max(*((z->key)), sll_lseg_max_key(*((z->next)), last_z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), @_vcc_ptr_neq_pure(*((z->next)), last_z)), ==(sll_lseg_min_key(z, last_z), @\int_min(*((z->key)), sll_lseg_min_key(*((z->next)), last_z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), @_vcc_ptr_neq_pure(*((z->next)), last_z)), ==(srtl_lseg(z, last_z), &&(&&(srtl_lseg(*((z->next)), last_z), unchecked!(@_vcc_oset_in(z, srtl_lseg_reach(*((z->next)), last_z)))), <=(*((z->key)), sll_lseg_min_key(*((z->next)), last_z))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), ==(srtl_lseg_reach(z, last_z), @_vcc_oset_union(srtl_lseg_reach(*((z->next)), last_z), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg(x, curr_x), &&(sll_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, sll_lseg_reach(*((x->next)), curr_x)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_reach(x, curr_x), @_vcc_oset_union(sll_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_keys(x, curr_x), @_vcc_intset_union(sll_lseg_keys(*((x->next)), curr_x), @_vcc_intset_singleton(*((x->key)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_len_next(x, curr_x), unchecked+(sll_lseg_len_next(*((x->next)), curr_x), 1))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_max_key(x, curr_x), @\int_max(*((x->key)), sll_lseg_max_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_min_key(x, curr_x), @\int_min(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(srtl_lseg(x, curr_x), &&(&&(srtl_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, srtl_lseg_reach(*((x->next)), curr_x)))), <=(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(srtl_lseg_reach(x, curr_x), @_vcc_oset_union(srtl_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // struct s_node* tmp; 
            // tmp := last_z; 
            L#tmp := $phys_ptr_cast(L#last_z, ^s_node);
            // assert sll_lseg(tmp, tmp); 
            assert F#sll_lseg($s, $phys_ptr_cast(L#tmp, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume sll_lseg(tmp, tmp); 
            assume F#sll_lseg($s, $phys_ptr_cast(L#tmp, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assert srtl_lseg(tmp, tmp); 
            assert F#srtl_lseg($s, $phys_ptr_cast(L#tmp, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume srtl_lseg(tmp, tmp); 
            assume F#srtl_lseg($s, $phys_ptr_cast(L#tmp, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assert sll_lseg(curr_x, curr_x); 
            assert F#sll_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume sll_lseg(curr_x, curr_x); 
            assume F#sll_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assert srtl_lseg(curr_x, curr_x); 
            assert F#srtl_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume srtl_lseg(curr_x, curr_x); 
            assume F#srtl_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assert sll_lseg(curr_y, curr_y); 
            assert F#sll_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume sll_lseg(curr_y, curr_y); 
            assume F#sll_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assert srtl_lseg(curr_y, curr_y); 
            assert F#srtl_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume srtl_lseg(curr_y, curr_y); 
            assume F#srtl_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assert sll_lseg(z, z); 
            assert F#sll_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#z, ^s_node));
            // assume sll_lseg(z, z); 
            assume F#sll_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#z, ^s_node));
            // assert srtl_lseg(z, z); 
            assert F#srtl_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#z, ^s_node));
            // assume srtl_lseg(z, z); 
            assume F#srtl_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#z, ^s_node));
            // assert sll_lseg(last_z, last_z); 
            assert F#sll_lseg($s, $phys_ptr_cast(L#last_z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume sll_lseg(last_z, last_z); 
            assume F#sll_lseg($s, $phys_ptr_cast(L#last_z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assert srtl_lseg(last_z, last_z); 
            assert F#srtl_lseg($s, $phys_ptr_cast(L#last_z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume srtl_lseg(last_z, last_z); 
            assume F#srtl_lseg($s, $phys_ptr_cast(L#last_z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assert sll_lseg(y, y); 
            assert F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(P#y, ^s_node));
            // assume sll_lseg(y, y); 
            assume F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(P#y, ^s_node));
            // assert srtl_lseg(y, y); 
            assert F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(P#y, ^s_node));
            // assume srtl_lseg(y, y); 
            assume F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(P#y, ^s_node));
            // assert sll_lseg(x, x); 
            assert F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(P#x, ^s_node));
            // assume sll_lseg(x, x); 
            assume F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(P#x, ^s_node));
            // assert srtl_lseg(x, x); 
            assert F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(P#x, ^s_node));
            // assume srtl_lseg(x, x); 
            assume F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(P#x, ^s_node));
            // struct s_node* curr_x2; 
            // curr_x2 := curr_x; 
            SL#curr_x2 := $phys_ptr_cast(L#curr_x, ^s_node);
            // struct s_node* stmtexpr0#8; 
            // stmtexpr0#8 := curr_x2; 
            stmtexpr0#8 := $phys_ptr_cast(SL#curr_x2, ^s_node);
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_keys(curr_x), @_vcc_intset_union(sll_keys(*((curr_x->next))), @_vcc_intset_singleton(*((curr_x->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_list_len_next(curr_x), unchecked+(sll_list_len_next(*((curr_x->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(rsrtl(curr_x), &&(&&(rsrtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, rsrtl_reach(*((curr_x->next)))))), >=(*((curr_x->key)), sll_max_key(*((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(rsrtl_reach(curr_x), @_vcc_oset_union(rsrtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll(curr_x), &&(sll(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, sll_reach(*((curr_x->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_reach(curr_x), @_vcc_oset_union(sll_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_max_key(curr_x), @\int_max(*((curr_x->key)), sll_max_key(*((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_min_key(curr_x), @\int_min(*((curr_x->key)), sll_min_key(*((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(srtl(curr_x), &&(&&(srtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, srtl_reach(*((curr_x->next)))))), <=(*((curr_x->key)), sll_min_key(*((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(srtl_reach(curr_x), @_vcc_oset_union(srtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_pure(curr_x, *((curr_x->next)))), ==(sll_lseg(curr_x, *((curr_x->next))), &&(sll_lseg(*((curr_x->next)), *((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, sll_lseg_reach(*((curr_x->next)), *((curr_x->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $phys_ptr_cast(L#curr_x, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_pure(curr_x, *((curr_x->next)))), ==(sll_lseg_reach(curr_x, *((curr_x->next))), @_vcc_oset_union(sll_lseg_reach(*((curr_x->next)), *((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $phys_ptr_cast(L#curr_x, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#curr_x, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_pure(curr_x, *((curr_x->next)))), ==(sll_lseg_keys(curr_x, *((curr_x->next))), @_vcc_intset_union(sll_lseg_keys(*((curr_x->next)), *((curr_x->next))), @_vcc_intset_singleton(*((curr_x->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $phys_ptr_cast(L#curr_x, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#curr_x, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_pure(curr_x, *((curr_x->next)))), ==(sll_lseg_len_next(curr_x, *((curr_x->next))), unchecked+(sll_lseg_len_next(*((curr_x->next)), *((curr_x->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $phys_ptr_cast(L#curr_x, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#curr_x, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_pure(curr_x, *((curr_x->next)))), @_vcc_ptr_neq_pure(*((curr_x->next)), *((curr_x->next)))), ==(sll_lseg_max_key(curr_x, *((curr_x->next))), @\int_max(*((curr_x->key)), sll_lseg_max_key(*((curr_x->next)), *((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $phys_ptr_cast(L#curr_x, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#curr_x, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_pure(curr_x, *((curr_x->next)))), @_vcc_ptr_neq_pure(*((curr_x->next)), *((curr_x->next)))), ==(sll_lseg_min_key(curr_x, *((curr_x->next))), @\int_min(*((curr_x->key)), sll_lseg_min_key(*((curr_x->next)), *((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $phys_ptr_cast(L#curr_x, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(L#curr_x, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_pure(curr_x, *((curr_x->next)))), @_vcc_ptr_neq_pure(*((curr_x->next)), *((curr_x->next)))), ==(srtl_lseg(curr_x, *((curr_x->next))), &&(&&(srtl_lseg(*((curr_x->next)), *((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, srtl_lseg_reach(*((curr_x->next)), *((curr_x->next)))))), <=(*((curr_x->key)), sll_lseg_min_key(*((curr_x->next)), *((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $phys_ptr_cast(L#curr_x, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_pure(curr_x, *((curr_x->next)))), ==(srtl_lseg_reach(curr_x, *((curr_x->next))), @_vcc_oset_union(srtl_lseg_reach(*((curr_x->next)), *((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $phys_ptr_cast(L#curr_x, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(L#curr_x, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assert @reads_check_normal((curr_x->next)); 
            assert $thread_local($s, $phys_ptr_cast(L#curr_x, ^s_node));
            // curr_x := *((curr_x->next)); 
            L#curr_x := $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node);
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_keys(curr_x), @_vcc_intset_union(sll_keys(*((curr_x->next))), @_vcc_intset_singleton(*((curr_x->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_list_len_next(curr_x), unchecked+(sll_list_len_next(*((curr_x->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(rsrtl(curr_x), &&(&&(rsrtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, rsrtl_reach(*((curr_x->next)))))), >=(*((curr_x->key)), sll_max_key(*((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(rsrtl_reach(curr_x), @_vcc_oset_union(rsrtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll(curr_x), &&(sll(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, sll_reach(*((curr_x->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_reach(curr_x), @_vcc_oset_union(sll_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_max_key(curr_x), @\int_max(*((curr_x->key)), sll_max_key(*((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_min_key(curr_x), @\int_min(*((curr_x->key)), sll_min_key(*((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(srtl(curr_x), &&(&&(srtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, srtl_reach(*((curr_x->next)))))), <=(*((curr_x->key)), sll_min_key(*((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(srtl_reach(curr_x), @_vcc_oset_union(srtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_keys(curr_x), @_vcc_intset_union(sll_keys(*((curr_x->next))), @_vcc_intset_singleton(*((curr_x->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_list_len_next(curr_x), unchecked+(sll_list_len_next(*((curr_x->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(rsrtl(curr_x), &&(&&(rsrtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, rsrtl_reach(*((curr_x->next)))))), >=(*((curr_x->key)), sll_max_key(*((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(rsrtl_reach(curr_x), @_vcc_oset_union(rsrtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll(curr_x), &&(sll(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, sll_reach(*((curr_x->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_reach(curr_x), @_vcc_oset_union(sll_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_max_key(curr_x), @\int_max(*((curr_x->key)), sll_max_key(*((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_min_key(curr_x), @\int_min(*((curr_x->key)), sll_min_key(*((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(srtl(curr_x), &&(&&(srtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, srtl_reach(*((curr_x->next)))))), <=(*((curr_x->key)), sll_min_key(*((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(srtl_reach(curr_x), @_vcc_oset_union(srtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg(x, curr_x), &&(sll_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, sll_lseg_reach(*((x->next)), curr_x)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_reach(x, curr_x), @_vcc_oset_union(sll_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_keys(x, curr_x), @_vcc_intset_union(sll_lseg_keys(*((x->next)), curr_x), @_vcc_intset_singleton(*((x->key)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_len_next(x, curr_x), unchecked+(sll_lseg_len_next(*((x->next)), curr_x), 1))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_max_key(x, curr_x), @\int_max(*((x->key)), sll_lseg_max_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_min_key(x, curr_x), @\int_min(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(srtl_lseg(x, curr_x), &&(&&(srtl_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, srtl_lseg_reach(*((x->next)), curr_x)))), <=(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(srtl_lseg_reach(x, curr_x), @_vcc_oset_union(srtl_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // struct s_node* curr_y3; 
            // curr_y3 := curr_y; 
            SL#curr_y3 := $phys_ptr_cast(L#curr_y, ^s_node);
            // struct s_node* stmtexpr1#9; 
            // stmtexpr1#9 := curr_y3; 
            stmtexpr1#9 := $phys_ptr_cast(SL#curr_y3, ^s_node);
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_keys(curr_y), @_vcc_intset_union(sll_keys(*((curr_y->next))), @_vcc_intset_singleton(*((curr_y->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_list_len_next(curr_y), unchecked+(sll_list_len_next(*((curr_y->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(rsrtl(curr_y), &&(&&(rsrtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, rsrtl_reach(*((curr_y->next)))))), >=(*((curr_y->key)), sll_max_key(*((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(rsrtl_reach(curr_y), @_vcc_oset_union(rsrtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll(curr_y), &&(sll(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, sll_reach(*((curr_y->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_reach(curr_y), @_vcc_oset_union(sll_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_max_key(curr_y), @\int_max(*((curr_y->key)), sll_max_key(*((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_min_key(curr_y), @\int_min(*((curr_y->key)), sll_min_key(*((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(srtl(curr_y), &&(&&(srtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, srtl_reach(*((curr_y->next)))))), <=(*((curr_y->key)), sll_min_key(*((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(srtl_reach(curr_y), @_vcc_oset_union(srtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_pure(curr_y, *((curr_y->next)))), ==(sll_lseg(curr_y, *((curr_y->next))), &&(sll_lseg(*((curr_y->next)), *((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, sll_lseg_reach(*((curr_y->next)), *((curr_y->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $phys_ptr_cast(L#curr_y, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_pure(curr_y, *((curr_y->next)))), ==(sll_lseg_reach(curr_y, *((curr_y->next))), @_vcc_oset_union(sll_lseg_reach(*((curr_y->next)), *((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $phys_ptr_cast(L#curr_y, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#curr_y, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_pure(curr_y, *((curr_y->next)))), ==(sll_lseg_keys(curr_y, *((curr_y->next))), @_vcc_intset_union(sll_lseg_keys(*((curr_y->next)), *((curr_y->next))), @_vcc_intset_singleton(*((curr_y->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $phys_ptr_cast(L#curr_y, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#curr_y, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_pure(curr_y, *((curr_y->next)))), ==(sll_lseg_len_next(curr_y, *((curr_y->next))), unchecked+(sll_lseg_len_next(*((curr_y->next)), *((curr_y->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $phys_ptr_cast(L#curr_y, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#curr_y, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_pure(curr_y, *((curr_y->next)))), @_vcc_ptr_neq_pure(*((curr_y->next)), *((curr_y->next)))), ==(sll_lseg_max_key(curr_y, *((curr_y->next))), @\int_max(*((curr_y->key)), sll_lseg_max_key(*((curr_y->next)), *((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $phys_ptr_cast(L#curr_y, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#curr_y, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_pure(curr_y, *((curr_y->next)))), @_vcc_ptr_neq_pure(*((curr_y->next)), *((curr_y->next)))), ==(sll_lseg_min_key(curr_y, *((curr_y->next))), @\int_min(*((curr_y->key)), sll_lseg_min_key(*((curr_y->next)), *((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $phys_ptr_cast(L#curr_y, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(L#curr_y, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_pure(curr_y, *((curr_y->next)))), @_vcc_ptr_neq_pure(*((curr_y->next)), *((curr_y->next)))), ==(srtl_lseg(curr_y, *((curr_y->next))), &&(&&(srtl_lseg(*((curr_y->next)), *((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, srtl_lseg_reach(*((curr_y->next)), *((curr_y->next)))))), <=(*((curr_y->key)), sll_lseg_min_key(*((curr_y->next)), *((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $phys_ptr_cast(L#curr_y, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_pure(curr_y, *((curr_y->next)))), ==(srtl_lseg_reach(curr_y, *((curr_y->next))), @_vcc_oset_union(srtl_lseg_reach(*((curr_y->next)), *((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $phys_ptr_cast(L#curr_y, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(L#curr_y, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assert @reads_check_normal((curr_y->next)); 
            assert $thread_local($s, $phys_ptr_cast(L#curr_y, ^s_node));
            // curr_y := *((curr_y->next)); 
            L#curr_y := $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node);
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_keys(curr_y), @_vcc_intset_union(sll_keys(*((curr_y->next))), @_vcc_intset_singleton(*((curr_y->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_list_len_next(curr_y), unchecked+(sll_list_len_next(*((curr_y->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(rsrtl(curr_y), &&(&&(rsrtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, rsrtl_reach(*((curr_y->next)))))), >=(*((curr_y->key)), sll_max_key(*((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(rsrtl_reach(curr_y), @_vcc_oset_union(rsrtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll(curr_y), &&(sll(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, sll_reach(*((curr_y->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_reach(curr_y), @_vcc_oset_union(sll_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_max_key(curr_y), @\int_max(*((curr_y->key)), sll_max_key(*((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_min_key(curr_y), @\int_min(*((curr_y->key)), sll_min_key(*((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(srtl(curr_y), &&(&&(srtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, srtl_reach(*((curr_y->next)))))), <=(*((curr_y->key)), sll_min_key(*((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(srtl_reach(curr_y), @_vcc_oset_union(srtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_keys(curr_y), @_vcc_intset_union(sll_keys(*((curr_y->next))), @_vcc_intset_singleton(*((curr_y->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_list_len_next(curr_y), unchecked+(sll_list_len_next(*((curr_y->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(rsrtl(curr_y), &&(&&(rsrtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, rsrtl_reach(*((curr_y->next)))))), >=(*((curr_y->key)), sll_max_key(*((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(rsrtl_reach(curr_y), @_vcc_oset_union(rsrtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll(curr_y), &&(sll(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, sll_reach(*((curr_y->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_reach(curr_y), @_vcc_oset_union(sll_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_max_key(curr_y), @\int_max(*((curr_y->key)), sll_max_key(*((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_min_key(curr_y), @\int_min(*((curr_y->key)), sll_min_key(*((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(srtl(curr_y), &&(&&(srtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, srtl_reach(*((curr_y->next)))))), <=(*((curr_y->key)), sll_min_key(*((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(srtl_reach(curr_y), @_vcc_oset_union(srtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg(y, curr_y), &&(sll_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, sll_lseg_reach(*((y->next)), curr_y)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_reach(y, curr_y), @_vcc_oset_union(sll_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_keys(y, curr_y), @_vcc_intset_union(sll_lseg_keys(*((y->next)), curr_y), @_vcc_intset_singleton(*((y->key)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_len_next(y, curr_y), unchecked+(sll_lseg_len_next(*((y->next)), curr_y), 1))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_max_key(y, curr_y), @\int_max(*((y->key)), sll_lseg_max_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_min_key(y, curr_y), @\int_min(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(srtl_lseg(y, curr_y), &&(&&(srtl_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, srtl_lseg_reach(*((y->next)), curr_y)))), <=(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(srtl_lseg_reach(y, curr_y), @_vcc_oset_union(srtl_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // _math \state _dryad_S6; 
            // _dryad_S6 := @_vcc_current_state(@state); 
            SL#_dryad_S6 := $current_state($s);
            // _math \state stmtexpr2#10; 
            // stmtexpr2#10 := _dryad_S6; 
            stmtexpr2#10 := SL#_dryad_S6;
            // last_z := _vcc_alloc(@_vcc_typeof((struct s_node*)@null)); 
            call L#last_z := $alloc(^s_node);
            assume $full_stop_ext(#tok$3^70.14, $s);
            // assume !(@_vcc_oset_in(last_z, @_vcc_oset_union(_dryad_G0, _dryad_G1))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), $oset_union(SL#_dryad_G0, SL#_dryad_G1));
            // _dryad_G1 := @_vcc_oset_union(_dryad_G0, @_vcc_oset_singleton(last_z)); 
            SL#_dryad_G1 := $oset_union(SL#_dryad_G0, $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // _math \oset stmtexpr3#11; 
            // stmtexpr3#11 := _dryad_G1; 
            stmtexpr3#11 := SL#_dryad_G1;
            // assume ==(glob_reach(), _dryad_G1); 
            assume F#glob_reach() == SL#_dryad_G1;
            // _math \state _dryad_S7; 
            // _dryad_S7 := @_vcc_current_state(@state); 
            SL#_dryad_S7 := $current_state($s);
            // _math \state stmtexpr4#12; 
            // stmtexpr4#12 := _dryad_S7; 
            stmtexpr4#12 := SL#_dryad_S7;
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(sll_keys(curr_y3), @_vcc_intset_union(sll_keys(*((curr_y3->next))), @_vcc_intset_singleton(*((curr_y3->key)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(sll_list_len_next(curr_y3), unchecked+(sll_list_len_next(*((curr_y3->next))), 1))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y3), @_vcc_ptr_neq_null(*((curr_y3->next)))), ==(rsrtl(curr_y3), &&(&&(rsrtl(*((curr_y3->next))), unchecked!(@_vcc_oset_in(curr_y3, rsrtl_reach(*((curr_y3->next)))))), >=(*((curr_y3->key)), sll_max_key(*((curr_y3->next))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_y3, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(rsrtl_reach(curr_y3), @_vcc_oset_union(rsrtl_reach(*((curr_y3->next))), @_vcc_oset_singleton(curr_y3)))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_y3, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(sll(curr_y3), &&(sll(*((curr_y3->next))), unchecked!(@_vcc_oset_in(curr_y3, sll_reach(*((curr_y3->next)))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_y3, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(sll_reach(curr_y3), @_vcc_oset_union(sll_reach(*((curr_y3->next))), @_vcc_oset_singleton(curr_y3)))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_y3, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y3), @_vcc_ptr_neq_null(*((curr_y3->next)))), ==(sll_max_key(curr_y3), @\int_max(*((curr_y3->key)), sll_max_key(*((curr_y3->next)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y3), @_vcc_ptr_neq_null(*((curr_y3->next)))), ==(sll_min_key(curr_y3), @\int_min(*((curr_y3->key)), sll_min_key(*((curr_y3->next)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y3), @_vcc_ptr_neq_null(*((curr_y3->next)))), ==(srtl(curr_y3), &&(&&(srtl(*((curr_y3->next))), unchecked!(@_vcc_oset_in(curr_y3, srtl_reach(*((curr_y3->next)))))), <=(*((curr_y3->key)), sll_min_key(*((curr_y3->next))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_y3, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(srtl_reach(curr_y3), @_vcc_oset_union(srtl_reach(*((curr_y3->next))), @_vcc_oset_singleton(curr_y3)))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_y3, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(sll_keys(curr_x2), @_vcc_intset_union(sll_keys(*((curr_x2->next))), @_vcc_intset_singleton(*((curr_x2->key)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(sll_list_len_next(curr_x2), unchecked+(sll_list_len_next(*((curr_x2->next))), 1))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x2), @_vcc_ptr_neq_null(*((curr_x2->next)))), ==(rsrtl(curr_x2), &&(&&(rsrtl(*((curr_x2->next))), unchecked!(@_vcc_oset_in(curr_x2, rsrtl_reach(*((curr_x2->next)))))), >=(*((curr_x2->key)), sll_max_key(*((curr_x2->next))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_x2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(rsrtl_reach(curr_x2), @_vcc_oset_union(rsrtl_reach(*((curr_x2->next))), @_vcc_oset_singleton(curr_x2)))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_x2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(sll(curr_x2), &&(sll(*((curr_x2->next))), unchecked!(@_vcc_oset_in(curr_x2, sll_reach(*((curr_x2->next)))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_x2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(sll_reach(curr_x2), @_vcc_oset_union(sll_reach(*((curr_x2->next))), @_vcc_oset_singleton(curr_x2)))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_x2, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x2), @_vcc_ptr_neq_null(*((curr_x2->next)))), ==(sll_max_key(curr_x2), @\int_max(*((curr_x2->key)), sll_max_key(*((curr_x2->next)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x2), @_vcc_ptr_neq_null(*((curr_x2->next)))), ==(sll_min_key(curr_x2), @\int_min(*((curr_x2->key)), sll_min_key(*((curr_x2->next)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x2), @_vcc_ptr_neq_null(*((curr_x2->next)))), ==(srtl(curr_x2), &&(&&(srtl(*((curr_x2->next))), unchecked!(@_vcc_oset_in(curr_x2, srtl_reach(*((curr_x2->next)))))), <=(*((curr_x2->key)), sll_min_key(*((curr_x2->next))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_x2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(srtl_reach(curr_x2), @_vcc_oset_union(srtl_reach(*((curr_x2->next))), @_vcc_oset_singleton(curr_x2)))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_x2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_keys(tmp), @_vcc_intset_union(sll_keys(*((tmp->next))), @_vcc_intset_singleton(*((tmp->key)))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_list_len_next(tmp), unchecked+(sll_list_len_next(*((tmp->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(rsrtl(tmp), &&(&&(rsrtl(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, rsrtl_reach(*((tmp->next)))))), >=(*((tmp->key)), sll_max_key(*((tmp->next))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(rsrtl_reach(tmp), @_vcc_oset_union(rsrtl_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll(tmp), &&(sll(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, sll_reach(*((tmp->next)))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_reach(tmp), @_vcc_oset_union(sll_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(sll_max_key(tmp), @\int_max(*((tmp->key)), sll_max_key(*((tmp->next)))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#tmp, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(sll_min_key(tmp), @\int_min(*((tmp->key)), sll_min_key(*((tmp->next)))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#tmp, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(srtl(tmp), &&(&&(srtl(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, srtl_reach(*((tmp->next)))))), <=(*((tmp->key)), sll_min_key(*((tmp->next))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(srtl_reach(tmp), @_vcc_oset_union(srtl_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_keys(curr_x), @_vcc_intset_union(sll_keys(*((curr_x->next))), @_vcc_intset_singleton(*((curr_x->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_list_len_next(curr_x), unchecked+(sll_list_len_next(*((curr_x->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(rsrtl(curr_x), &&(&&(rsrtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, rsrtl_reach(*((curr_x->next)))))), >=(*((curr_x->key)), sll_max_key(*((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(rsrtl_reach(curr_x), @_vcc_oset_union(rsrtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll(curr_x), &&(sll(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, sll_reach(*((curr_x->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_reach(curr_x), @_vcc_oset_union(sll_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_max_key(curr_x), @\int_max(*((curr_x->key)), sll_max_key(*((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_min_key(curr_x), @\int_min(*((curr_x->key)), sll_min_key(*((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(srtl(curr_x), &&(&&(srtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, srtl_reach(*((curr_x->next)))))), <=(*((curr_x->key)), sll_min_key(*((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(srtl_reach(curr_x), @_vcc_oset_union(srtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_keys(curr_y), @_vcc_intset_union(sll_keys(*((curr_y->next))), @_vcc_intset_singleton(*((curr_y->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_list_len_next(curr_y), unchecked+(sll_list_len_next(*((curr_y->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(rsrtl(curr_y), &&(&&(rsrtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, rsrtl_reach(*((curr_y->next)))))), >=(*((curr_y->key)), sll_max_key(*((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(rsrtl_reach(curr_y), @_vcc_oset_union(rsrtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll(curr_y), &&(sll(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, sll_reach(*((curr_y->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_reach(curr_y), @_vcc_oset_union(sll_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_max_key(curr_y), @\int_max(*((curr_y->key)), sll_max_key(*((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_min_key(curr_y), @\int_min(*((curr_y->key)), sll_min_key(*((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(srtl(curr_y), &&(&&(srtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, srtl_reach(*((curr_y->next)))))), <=(*((curr_y->key)), sll_min_key(*((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(srtl_reach(curr_y), @_vcc_oset_union(srtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_keys(z), @_vcc_intset_union(sll_keys(*((z->next))), @_vcc_intset_singleton(*((z->key)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_list_len_next(z), unchecked+(sll_list_len_next(*((z->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(rsrtl(z), &&(&&(rsrtl(*((z->next))), unchecked!(@_vcc_oset_in(z, rsrtl_reach(*((z->next)))))), >=(*((z->key)), sll_max_key(*((z->next))))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(rsrtl_reach(z), @_vcc_oset_union(rsrtl_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll(z), &&(sll(*((z->next))), unchecked!(@_vcc_oset_in(z, sll_reach(*((z->next)))))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_reach(z), @_vcc_oset_union(sll_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_max_key(z), @\int_max(*((z->key)), sll_max_key(*((z->next)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_min_key(z), @\int_min(*((z->key)), sll_min_key(*((z->next)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(srtl(z), &&(&&(srtl(*((z->next))), unchecked!(@_vcc_oset_in(z, srtl_reach(*((z->next)))))), <=(*((z->key)), sll_min_key(*((z->next))))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(srtl_reach(z), @_vcc_oset_union(srtl_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_keys(last_z), @_vcc_intset_union(sll_keys(*((last_z->next))), @_vcc_intset_singleton(*((last_z->key)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#last_z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_list_len_next(last_z), unchecked+(sll_list_len_next(*((last_z->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#last_z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(rsrtl(last_z), &&(&&(rsrtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, rsrtl_reach(*((last_z->next)))))), >=(*((last_z->key)), sll_max_key(*((last_z->next))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(rsrtl_reach(last_z), @_vcc_oset_union(rsrtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll(last_z), &&(sll(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, sll_reach(*((last_z->next)))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_reach(last_z), @_vcc_oset_union(sll_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_max_key(last_z), @\int_max(*((last_z->key)), sll_max_key(*((last_z->next)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_min_key(last_z), @\int_min(*((last_z->key)), sll_min_key(*((last_z->next)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(srtl(last_z), &&(&&(srtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, srtl_reach(*((last_z->next)))))), <=(*((last_z->key)), sll_min_key(*((last_z->next))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(srtl_reach(last_z), @_vcc_oset_union(srtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_keys(y), @_vcc_intset_union(sll_keys(*((y->next))), @_vcc_intset_singleton(*((y->key)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_list_len_next(y), unchecked+(sll_list_len_next(*((y->next))), 1))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(rsrtl(y), &&(&&(rsrtl(*((y->next))), unchecked!(@_vcc_oset_in(y, rsrtl_reach(*((y->next)))))), >=(*((y->key)), sll_max_key(*((y->next))))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(rsrtl_reach(y), @_vcc_oset_union(rsrtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll(y), &&(sll(*((y->next))), unchecked!(@_vcc_oset_in(y, sll_reach(*((y->next)))))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_reach(y), @_vcc_oset_union(sll_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_max_key(y), @\int_max(*((y->key)), sll_max_key(*((y->next)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_min_key(y), @\int_min(*((y->key)), sll_min_key(*((y->next)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(srtl(y), &&(&&(srtl(*((y->next))), unchecked!(@_vcc_oset_in(y, srtl_reach(*((y->next)))))), <=(*((y->key)), sll_min_key(*((y->next))))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(srtl_reach(y), @_vcc_oset_union(srtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_keys(x), @_vcc_intset_union(sll_keys(*((x->next))), @_vcc_intset_singleton(*((x->key)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_list_len_next(x), unchecked+(sll_list_len_next(*((x->next))), 1))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(rsrtl(x), &&(&&(rsrtl(*((x->next))), unchecked!(@_vcc_oset_in(x, rsrtl_reach(*((x->next)))))), >=(*((x->key)), sll_max_key(*((x->next))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(rsrtl_reach(x), @_vcc_oset_union(rsrtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll(x), &&(sll(*((x->next))), unchecked!(@_vcc_oset_in(x, sll_reach(*((x->next)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_reach(x), @_vcc_oset_union(sll_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_max_key(x), @\int_max(*((x->key)), sll_max_key(*((x->next)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_min_key(x), @\int_min(*((x->key)), sll_min_key(*((x->next)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(srtl(x), &&(&&(srtl(*((x->next))), unchecked!(@_vcc_oset_in(x, srtl_reach(*((x->next)))))), <=(*((x->key)), sll_min_key(*((x->next))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(srtl_reach(x), @_vcc_oset_union(srtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg(y, curr_y), &&(sll_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, sll_lseg_reach(*((y->next)), curr_y)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_reach(y, curr_y), @_vcc_oset_union(sll_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_keys(y, curr_y), @_vcc_intset_union(sll_lseg_keys(*((y->next)), curr_y), @_vcc_intset_singleton(*((y->key)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_len_next(y, curr_y), unchecked+(sll_lseg_len_next(*((y->next)), curr_y), 1))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_max_key(y, curr_y), @\int_max(*((y->key)), sll_lseg_max_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_min_key(y, curr_y), @\int_min(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(srtl_lseg(y, curr_y), &&(&&(srtl_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, srtl_lseg_reach(*((y->next)), curr_y)))), <=(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(srtl_lseg_reach(y, curr_y), @_vcc_oset_union(srtl_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), ==(sll_lseg(z, last_z), &&(sll_lseg(*((z->next)), last_z), unchecked!(@_vcc_oset_in(z, sll_lseg_reach(*((z->next)), last_z)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), ==(sll_lseg_reach(z, last_z), @_vcc_oset_union(sll_lseg_reach(*((z->next)), last_z), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), ==(sll_lseg_keys(z, last_z), @_vcc_intset_union(sll_lseg_keys(*((z->next)), last_z), @_vcc_intset_singleton(*((z->key)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), ==(sll_lseg_len_next(z, last_z), unchecked+(sll_lseg_len_next(*((z->next)), last_z), 1))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), @_vcc_ptr_neq_pure(*((z->next)), last_z)), ==(sll_lseg_max_key(z, last_z), @\int_max(*((z->key)), sll_lseg_max_key(*((z->next)), last_z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), @_vcc_ptr_neq_pure(*((z->next)), last_z)), ==(sll_lseg_min_key(z, last_z), @\int_min(*((z->key)), sll_lseg_min_key(*((z->next)), last_z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), @_vcc_ptr_neq_pure(*((z->next)), last_z)), ==(srtl_lseg(z, last_z), &&(&&(srtl_lseg(*((z->next)), last_z), unchecked!(@_vcc_oset_in(z, srtl_lseg_reach(*((z->next)), last_z)))), <=(*((z->key)), sll_lseg_min_key(*((z->next)), last_z))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), ==(srtl_lseg_reach(z, last_z), @_vcc_oset_union(srtl_lseg_reach(*((z->next)), last_z), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg(x, curr_x), &&(sll_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, sll_lseg_reach(*((x->next)), curr_x)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_reach(x, curr_x), @_vcc_oset_union(sll_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_keys(x, curr_x), @_vcc_intset_union(sll_lseg_keys(*((x->next)), curr_x), @_vcc_intset_singleton(*((x->key)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_len_next(x, curr_x), unchecked+(sll_lseg_len_next(*((x->next)), curr_x), 1))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_max_key(x, curr_x), @\int_max(*((x->key)), sll_lseg_max_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_min_key(x, curr_x), @\int_min(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(srtl_lseg(x, curr_x), &&(&&(srtl_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, srtl_lseg_reach(*((x->next)), curr_x)))), <=(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(srtl_lseg_reach(x, curr_x), @_vcc_oset_union(srtl_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), ==(sll_lseg(z, tmp), &&(sll_lseg(*((z->next)), tmp), unchecked!(@_vcc_oset_in(z, sll_lseg_reach(*((z->next)), tmp)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), ==(sll_lseg_reach(z, tmp), @_vcc_oset_union(sll_lseg_reach(*((z->next)), tmp), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), ==(sll_lseg_keys(z, tmp), @_vcc_intset_union(sll_lseg_keys(*((z->next)), tmp), @_vcc_intset_singleton(*((z->key)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), ==(sll_lseg_len_next(z, tmp), unchecked+(sll_lseg_len_next(*((z->next)), tmp), 1))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), @_vcc_ptr_neq_pure(*((z->next)), tmp)), ==(sll_lseg_max_key(z, tmp), @\int_max(*((z->key)), sll_lseg_max_key(*((z->next)), tmp)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), @_vcc_ptr_neq_pure(*((z->next)), tmp)), ==(sll_lseg_min_key(z, tmp), @\int_min(*((z->key)), sll_lseg_min_key(*((z->next)), tmp)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), @_vcc_ptr_neq_pure(*((z->next)), tmp)), ==(srtl_lseg(z, tmp), &&(&&(srtl_lseg(*((z->next)), tmp), unchecked!(@_vcc_oset_in(z, srtl_lseg_reach(*((z->next)), tmp)))), <=(*((z->key)), sll_lseg_min_key(*((z->next)), tmp))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), ==(srtl_lseg_reach(z, tmp), @_vcc_oset_union(srtl_lseg_reach(*((z->next)), tmp), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg(x, curr_x), &&(sll_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, sll_lseg_reach(*((x->next)), curr_x)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_reach(x, curr_x), @_vcc_oset_union(sll_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_keys(x, curr_x), @_vcc_intset_union(sll_lseg_keys(*((x->next)), curr_x), @_vcc_intset_singleton(*((x->key)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_len_next(x, curr_x), unchecked+(sll_lseg_len_next(*((x->next)), curr_x), 1))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_max_key(x, curr_x), @\int_max(*((x->key)), sll_lseg_max_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_min_key(x, curr_x), @\int_min(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(srtl_lseg(x, curr_x), &&(&&(srtl_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, srtl_lseg_reach(*((x->next)), curr_x)))), <=(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(srtl_lseg_reach(x, curr_x), @_vcc_oset_union(srtl_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg(y, curr_y), &&(sll_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, sll_lseg_reach(*((y->next)), curr_y)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_reach(y, curr_y), @_vcc_oset_union(sll_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_keys(y, curr_y), @_vcc_intset_union(sll_lseg_keys(*((y->next)), curr_y), @_vcc_intset_singleton(*((y->key)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_len_next(y, curr_y), unchecked+(sll_lseg_len_next(*((y->next)), curr_y), 1))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_max_key(y, curr_y), @\int_max(*((y->key)), sll_lseg_max_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_min_key(y, curr_y), @\int_min(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(srtl_lseg(y, curr_y), &&(&&(srtl_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, srtl_lseg_reach(*((y->next)), curr_y)))), <=(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(srtl_lseg_reach(y, curr_y), @_vcc_oset_union(srtl_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_y3)))), ==(old(_dryad_S6, sll_keys(curr_y3)), old(_dryad_S7, sll_keys(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_y3)))), ==(old(_dryad_S6, sll_list_len_next(curr_y3)), old(_dryad_S7, sll_list_len_next(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, rsrtl_reach(curr_y3)))), ==(old(_dryad_S6, rsrtl(curr_y3)), old(_dryad_S7, rsrtl(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, rsrtl_reach(curr_y3)))), ==(old(_dryad_S6, rsrtl_reach(curr_y3)), old(_dryad_S7, rsrtl_reach(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_y3)))), ==(old(_dryad_S6, sll(curr_y3)), old(_dryad_S7, sll(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_y3)))), ==(old(_dryad_S6, sll_reach(curr_y3)), old(_dryad_S7, sll_reach(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_y3)))), ==(old(_dryad_S6, sll_max_key(curr_y3)), old(_dryad_S7, sll_max_key(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_y3)))), ==(old(_dryad_S6, sll_min_key(curr_y3)), old(_dryad_S7, sll_min_key(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_reach(curr_y3)))), ==(old(_dryad_S6, srtl(curr_y3)), old(_dryad_S7, srtl(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_reach(curr_y3)))), ==(old(_dryad_S6, srtl_reach(curr_y3)), old(_dryad_S7, srtl_reach(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_x2)))), ==(old(_dryad_S6, sll_keys(curr_x2)), old(_dryad_S7, sll_keys(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_x2)))), ==(old(_dryad_S6, sll_list_len_next(curr_x2)), old(_dryad_S7, sll_list_len_next(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, rsrtl_reach(curr_x2)))), ==(old(_dryad_S6, rsrtl(curr_x2)), old(_dryad_S7, rsrtl(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, rsrtl_reach(curr_x2)))), ==(old(_dryad_S6, rsrtl_reach(curr_x2)), old(_dryad_S7, rsrtl_reach(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_x2)))), ==(old(_dryad_S6, sll(curr_x2)), old(_dryad_S7, sll(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_x2)))), ==(old(_dryad_S6, sll_reach(curr_x2)), old(_dryad_S7, sll_reach(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_x2)))), ==(old(_dryad_S6, sll_max_key(curr_x2)), old(_dryad_S7, sll_max_key(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_x2)))), ==(old(_dryad_S6, sll_min_key(curr_x2)), old(_dryad_S7, sll_min_key(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_reach(curr_x2)))), ==(old(_dryad_S6, srtl(curr_x2)), old(_dryad_S7, srtl(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_reach(curr_x2)))), ==(old(_dryad_S6, srtl_reach(curr_x2)), old(_dryad_S7, srtl_reach(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(tmp)))), ==(old(_dryad_S6, sll_keys(tmp)), old(_dryad_S7, sll_keys(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(tmp)))), ==(old(_dryad_S6, sll_list_len_next(tmp)), old(_dryad_S7, sll_list_len_next(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, rsrtl_reach(tmp)))), ==(old(_dryad_S6, rsrtl(tmp)), old(_dryad_S7, rsrtl(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, rsrtl_reach(tmp)))), ==(old(_dryad_S6, rsrtl_reach(tmp)), old(_dryad_S7, rsrtl_reach(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(tmp)))), ==(old(_dryad_S6, sll(tmp)), old(_dryad_S7, sll(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(tmp)))), ==(old(_dryad_S6, sll_reach(tmp)), old(_dryad_S7, sll_reach(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(tmp)))), ==(old(_dryad_S6, sll_max_key(tmp)), old(_dryad_S7, sll_max_key(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(tmp)))), ==(old(_dryad_S6, sll_min_key(tmp)), old(_dryad_S7, sll_min_key(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_reach(tmp)))), ==(old(_dryad_S6, srtl(tmp)), old(_dryad_S7, srtl(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_reach(tmp)))), ==(old(_dryad_S6, srtl_reach(tmp)), old(_dryad_S7, srtl_reach(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_x)))), ==(old(_dryad_S6, sll_keys(curr_x)), old(_dryad_S7, sll_keys(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_x)))), ==(old(_dryad_S6, sll_list_len_next(curr_x)), old(_dryad_S7, sll_list_len_next(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, rsrtl_reach(curr_x)))), ==(old(_dryad_S6, rsrtl(curr_x)), old(_dryad_S7, rsrtl(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, rsrtl_reach(curr_x)))), ==(old(_dryad_S6, rsrtl_reach(curr_x)), old(_dryad_S7, rsrtl_reach(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_x)))), ==(old(_dryad_S6, sll(curr_x)), old(_dryad_S7, sll(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_x)))), ==(old(_dryad_S6, sll_reach(curr_x)), old(_dryad_S7, sll_reach(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_x)))), ==(old(_dryad_S6, sll_max_key(curr_x)), old(_dryad_S7, sll_max_key(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_x)))), ==(old(_dryad_S6, sll_min_key(curr_x)), old(_dryad_S7, sll_min_key(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_reach(curr_x)))), ==(old(_dryad_S6, srtl(curr_x)), old(_dryad_S7, srtl(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_reach(curr_x)))), ==(old(_dryad_S6, srtl_reach(curr_x)), old(_dryad_S7, srtl_reach(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_y)))), ==(old(_dryad_S6, sll_keys(curr_y)), old(_dryad_S7, sll_keys(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_y)))), ==(old(_dryad_S6, sll_list_len_next(curr_y)), old(_dryad_S7, sll_list_len_next(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, rsrtl_reach(curr_y)))), ==(old(_dryad_S6, rsrtl(curr_y)), old(_dryad_S7, rsrtl(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, rsrtl_reach(curr_y)))), ==(old(_dryad_S6, rsrtl_reach(curr_y)), old(_dryad_S7, rsrtl_reach(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_y)))), ==(old(_dryad_S6, sll(curr_y)), old(_dryad_S7, sll(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_y)))), ==(old(_dryad_S6, sll_reach(curr_y)), old(_dryad_S7, sll_reach(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_y)))), ==(old(_dryad_S6, sll_max_key(curr_y)), old(_dryad_S7, sll_max_key(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_y)))), ==(old(_dryad_S6, sll_min_key(curr_y)), old(_dryad_S7, sll_min_key(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_reach(curr_y)))), ==(old(_dryad_S6, srtl(curr_y)), old(_dryad_S7, srtl(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_reach(curr_y)))), ==(old(_dryad_S6, srtl_reach(curr_y)), old(_dryad_S7, srtl_reach(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(z)))), ==(old(_dryad_S6, sll_keys(z)), old(_dryad_S7, sll_keys(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(z)))), ==(old(_dryad_S6, sll_list_len_next(z)), old(_dryad_S7, sll_list_len_next(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, rsrtl_reach(z)))), ==(old(_dryad_S6, rsrtl(z)), old(_dryad_S7, rsrtl(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, rsrtl_reach(z)))), ==(old(_dryad_S6, rsrtl_reach(z)), old(_dryad_S7, rsrtl_reach(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(z)))), ==(old(_dryad_S6, sll(z)), old(_dryad_S7, sll(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(z)))), ==(old(_dryad_S6, sll_reach(z)), old(_dryad_S7, sll_reach(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(z)))), ==(old(_dryad_S6, sll_max_key(z)), old(_dryad_S7, sll_max_key(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(z)))), ==(old(_dryad_S6, sll_min_key(z)), old(_dryad_S7, sll_min_key(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_reach(z)))), ==(old(_dryad_S6, srtl(z)), old(_dryad_S7, srtl(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_reach(z)))), ==(old(_dryad_S6, srtl_reach(z)), old(_dryad_S7, srtl_reach(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(y)))), ==(old(_dryad_S6, sll_keys(y)), old(_dryad_S7, sll_keys(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(y)))), ==(old(_dryad_S6, sll_list_len_next(y)), old(_dryad_S7, sll_list_len_next(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, rsrtl_reach(y)))), ==(old(_dryad_S6, rsrtl(y)), old(_dryad_S7, rsrtl(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, rsrtl_reach(y)))), ==(old(_dryad_S6, rsrtl_reach(y)), old(_dryad_S7, rsrtl_reach(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(y)))), ==(old(_dryad_S6, sll(y)), old(_dryad_S7, sll(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(y)))), ==(old(_dryad_S6, sll_reach(y)), old(_dryad_S7, sll_reach(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(y)))), ==(old(_dryad_S6, sll_max_key(y)), old(_dryad_S7, sll_max_key(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(y)))), ==(old(_dryad_S6, sll_min_key(y)), old(_dryad_S7, sll_min_key(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_reach(y)))), ==(old(_dryad_S6, srtl(y)), old(_dryad_S7, srtl(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_reach(y)))), ==(old(_dryad_S6, srtl_reach(y)), old(_dryad_S7, srtl_reach(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(x)))), ==(old(_dryad_S6, sll_keys(x)), old(_dryad_S7, sll_keys(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(x)))), ==(old(_dryad_S6, sll_list_len_next(x)), old(_dryad_S7, sll_list_len_next(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, rsrtl_reach(x)))), ==(old(_dryad_S6, rsrtl(x)), old(_dryad_S7, rsrtl(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, rsrtl_reach(x)))), ==(old(_dryad_S6, rsrtl_reach(x)), old(_dryad_S7, rsrtl_reach(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(x)))), ==(old(_dryad_S6, sll(x)), old(_dryad_S7, sll(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(x)))), ==(old(_dryad_S6, sll_reach(x)), old(_dryad_S7, sll_reach(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(x)))), ==(old(_dryad_S6, sll_max_key(x)), old(_dryad_S7, sll_max_key(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(x)))), ==(old(_dryad_S6, sll_min_key(x)), old(_dryad_S7, sll_min_key(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_reach(x)))), ==(old(_dryad_S6, srtl(x)), old(_dryad_S7, srtl(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_reach(x)))), ==(old(_dryad_S6, srtl_reach(x)), old(_dryad_S7, srtl_reach(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S6, sll_lseg(y, curr_y)), old(_dryad_S7, sll_lseg(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S6, sll_lseg_reach(y, curr_y)), old(_dryad_S7, sll_lseg_reach(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S6, sll_lseg_keys(y, curr_y)), old(_dryad_S7, sll_lseg_keys(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S6, sll_lseg_len_next(y, curr_y)), old(_dryad_S7, sll_lseg_len_next(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S6, sll_lseg_max_key(y, curr_y)), old(_dryad_S7, sll_lseg_max_key(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S6, sll_lseg_min_key(y, curr_y)), old(_dryad_S7, sll_lseg_min_key(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_lseg_reach(y, curr_y)))), ==(old(_dryad_S6, srtl_lseg(y, curr_y)), old(_dryad_S7, srtl_lseg(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_lseg(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_lseg_reach(y, curr_y)))), ==(old(_dryad_S6, srtl_lseg_reach(y, curr_y)), old(_dryad_S7, srtl_lseg_reach(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S6, sll_lseg(z, last_z)), old(_dryad_S7, sll_lseg(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S6, sll_lseg_reach(z, last_z)), old(_dryad_S7, sll_lseg_reach(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S6, sll_lseg_keys(z, last_z)), old(_dryad_S7, sll_lseg_keys(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S6, sll_lseg_len_next(z, last_z)), old(_dryad_S7, sll_lseg_len_next(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S6, sll_lseg_max_key(z, last_z)), old(_dryad_S7, sll_lseg_max_key(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S6, sll_lseg_min_key(z, last_z)), old(_dryad_S7, sll_lseg_min_key(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_lseg_reach(z, last_z)))), ==(old(_dryad_S6, srtl_lseg(z, last_z)), old(_dryad_S7, srtl_lseg(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl_lseg(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_lseg_reach(z, last_z)))), ==(old(_dryad_S6, srtl_lseg_reach(z, last_z)), old(_dryad_S7, srtl_lseg_reach(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S6, sll_lseg(x, curr_x)), old(_dryad_S7, sll_lseg(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S6, sll_lseg_reach(x, curr_x)), old(_dryad_S7, sll_lseg_reach(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S6, sll_lseg_keys(x, curr_x)), old(_dryad_S7, sll_lseg_keys(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S6, sll_lseg_len_next(x, curr_x)), old(_dryad_S7, sll_lseg_len_next(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S6, sll_lseg_max_key(x, curr_x)), old(_dryad_S7, sll_lseg_max_key(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S6, sll_lseg_min_key(x, curr_x)), old(_dryad_S7, sll_lseg_min_key(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_lseg_reach(x, curr_x)))), ==(old(_dryad_S6, srtl_lseg(x, curr_x)), old(_dryad_S7, srtl_lseg(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_lseg(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_lseg_reach(x, curr_x)))), ==(old(_dryad_S6, srtl_lseg_reach(x, curr_x)), old(_dryad_S7, srtl_lseg_reach(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S6, sll_lseg(z, tmp)), old(_dryad_S7, sll_lseg(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S6, sll_lseg_reach(z, tmp)), old(_dryad_S7, sll_lseg_reach(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S6, sll_lseg_keys(z, tmp)), old(_dryad_S7, sll_lseg_keys(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S6, sll_lseg_len_next(z, tmp)), old(_dryad_S7, sll_lseg_len_next(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S6, sll_lseg_max_key(z, tmp)), old(_dryad_S7, sll_lseg_max_key(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S6, sll_lseg_min_key(z, tmp)), old(_dryad_S7, sll_lseg_min_key(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_lseg_reach(z, tmp)))), ==(old(_dryad_S6, srtl_lseg(z, tmp)), old(_dryad_S7, srtl_lseg(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl_lseg(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_lseg_reach(z, tmp)))), ==(old(_dryad_S6, srtl_lseg_reach(z, tmp)), old(_dryad_S7, srtl_lseg_reach(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S6, sll_lseg(x, curr_x)), old(_dryad_S7, sll_lseg(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S6, sll_lseg_reach(x, curr_x)), old(_dryad_S7, sll_lseg_reach(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S6, sll_lseg_keys(x, curr_x)), old(_dryad_S7, sll_lseg_keys(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S6, sll_lseg_len_next(x, curr_x)), old(_dryad_S7, sll_lseg_len_next(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S6, sll_lseg_max_key(x, curr_x)), old(_dryad_S7, sll_lseg_max_key(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S6, sll_lseg_min_key(x, curr_x)), old(_dryad_S7, sll_lseg_min_key(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_lseg_reach(x, curr_x)))), ==(old(_dryad_S6, srtl_lseg(x, curr_x)), old(_dryad_S7, srtl_lseg(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_lseg(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_lseg_reach(x, curr_x)))), ==(old(_dryad_S6, srtl_lseg_reach(x, curr_x)), old(_dryad_S7, srtl_lseg_reach(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S6, sll_lseg(y, curr_y)), old(_dryad_S7, sll_lseg(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S6, sll_lseg_reach(y, curr_y)), old(_dryad_S7, sll_lseg_reach(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S6, sll_lseg_keys(y, curr_y)), old(_dryad_S7, sll_lseg_keys(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S6, sll_lseg_len_next(y, curr_y)), old(_dryad_S7, sll_lseg_len_next(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S6, sll_lseg_max_key(y, curr_y)), old(_dryad_S7, sll_lseg_max_key(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S6, sll_lseg_min_key(y, curr_y)), old(_dryad_S7, sll_lseg_min_key(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_lseg_reach(y, curr_y)))), ==(old(_dryad_S6, srtl_lseg(y, curr_y)), old(_dryad_S7, srtl_lseg(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_lseg(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_lseg_reach(y, curr_y)))), ==(old(_dryad_S6, srtl_lseg_reach(y, curr_y)), old(_dryad_S7, srtl_lseg_reach(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume @_vcc_ptr_neq_null(last_z); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node));
            // assume unchecked!(@_vcc_oset_in(last_z, ALL_REACH)); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), SL#ALL_REACH);
            // ALL_REACH := @_vcc_oset_union(ALL_REACH, @_vcc_oset_singleton(last_z)); 
            SL#ALL_REACH := $oset_union(SL#ALL_REACH, $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // _math \state _dryad_S8; 
            // _dryad_S8 := @_vcc_current_state(@state); 
            SL#_dryad_S8 := $current_state($s);
            // _math \state stmtexpr5#13; 
            // stmtexpr5#13 := _dryad_S8; 
            stmtexpr5#13 := SL#_dryad_S8;
            // assert @prim_writes_check((last_z->next)); 
            assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#last_z, ^s_node), s_node.next));
            // *(last_z->next) := (struct s_node*)@null; 
            call $write_int(s_node.next, $phys_ptr_cast(L#last_z, ^s_node), $ptr_to_int($phys_ptr_cast($null, ^s_node)));
            assume $full_stop_ext(#tok$3^75.5, $s);
            // _math \state _dryad_S9; 
            // _dryad_S9 := @_vcc_current_state(@state); 
            SL#_dryad_S9 := $current_state($s);
            // _math \state stmtexpr6#14; 
            // stmtexpr6#14 := _dryad_S9; 
            stmtexpr6#14 := SL#_dryad_S9;
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_y3)))), ==(old(_dryad_S8, sll_keys(curr_y3)), old(_dryad_S9, sll_keys(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_keys(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_keys(SL#_dryad_S9, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_y3)))), ==(old(_dryad_S8, sll_list_len_next(curr_y3)), old(_dryad_S9, sll_list_len_next(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_list_len_next(SL#_dryad_S9, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, rsrtl_reach(curr_y3)))), ==(old(_dryad_S8, rsrtl(curr_y3)), old(_dryad_S9, rsrtl(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#rsrtl(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#rsrtl(SL#_dryad_S9, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, rsrtl_reach(curr_y3)))), ==(old(_dryad_S8, rsrtl_reach(curr_y3)), old(_dryad_S9, rsrtl_reach(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#rsrtl_reach(SL#_dryad_S9, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_y3)))), ==(old(_dryad_S8, sll(curr_y3)), old(_dryad_S9, sll(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll(SL#_dryad_S9, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_y3)))), ==(old(_dryad_S8, sll_reach(curr_y3)), old(_dryad_S9, sll_reach(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_reach(SL#_dryad_S9, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_y3)))), ==(old(_dryad_S8, sll_max_key(curr_y3)), old(_dryad_S9, sll_max_key(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_max_key(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_max_key(SL#_dryad_S9, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_y3)))), ==(old(_dryad_S8, sll_min_key(curr_y3)), old(_dryad_S9, sll_min_key(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_min_key(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_min_key(SL#_dryad_S9, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_reach(curr_y3)))), ==(old(_dryad_S8, srtl(curr_y3)), old(_dryad_S9, srtl(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#srtl(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#srtl(SL#_dryad_S9, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_reach(curr_y3)))), ==(old(_dryad_S8, srtl_reach(curr_y3)), old(_dryad_S9, srtl_reach(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#srtl_reach(SL#_dryad_S9, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_x2)))), ==(old(_dryad_S8, sll_keys(curr_x2)), old(_dryad_S9, sll_keys(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_keys(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_keys(SL#_dryad_S9, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_x2)))), ==(old(_dryad_S8, sll_list_len_next(curr_x2)), old(_dryad_S9, sll_list_len_next(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_list_len_next(SL#_dryad_S9, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, rsrtl_reach(curr_x2)))), ==(old(_dryad_S8, rsrtl(curr_x2)), old(_dryad_S9, rsrtl(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#rsrtl(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#rsrtl(SL#_dryad_S9, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, rsrtl_reach(curr_x2)))), ==(old(_dryad_S8, rsrtl_reach(curr_x2)), old(_dryad_S9, rsrtl_reach(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#rsrtl_reach(SL#_dryad_S9, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_x2)))), ==(old(_dryad_S8, sll(curr_x2)), old(_dryad_S9, sll(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll(SL#_dryad_S9, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_x2)))), ==(old(_dryad_S8, sll_reach(curr_x2)), old(_dryad_S9, sll_reach(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_reach(SL#_dryad_S9, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_x2)))), ==(old(_dryad_S8, sll_max_key(curr_x2)), old(_dryad_S9, sll_max_key(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_max_key(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_max_key(SL#_dryad_S9, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_x2)))), ==(old(_dryad_S8, sll_min_key(curr_x2)), old(_dryad_S9, sll_min_key(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_min_key(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_min_key(SL#_dryad_S9, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_reach(curr_x2)))), ==(old(_dryad_S8, srtl(curr_x2)), old(_dryad_S9, srtl(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#srtl(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#srtl(SL#_dryad_S9, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_reach(curr_x2)))), ==(old(_dryad_S8, srtl_reach(curr_x2)), old(_dryad_S9, srtl_reach(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#srtl_reach(SL#_dryad_S9, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(tmp)))), ==(old(_dryad_S8, sll_keys(tmp)), old(_dryad_S9, sll_keys(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_keys(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_keys(SL#_dryad_S9, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(tmp)))), ==(old(_dryad_S8, sll_list_len_next(tmp)), old(_dryad_S9, sll_list_len_next(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_list_len_next(SL#_dryad_S9, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, rsrtl_reach(tmp)))), ==(old(_dryad_S8, rsrtl(tmp)), old(_dryad_S9, rsrtl(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#rsrtl(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node)) == F#rsrtl(SL#_dryad_S9, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, rsrtl_reach(tmp)))), ==(old(_dryad_S8, rsrtl_reach(tmp)), old(_dryad_S9, rsrtl_reach(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node)) == F#rsrtl_reach(SL#_dryad_S9, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(tmp)))), ==(old(_dryad_S8, sll(tmp)), old(_dryad_S9, sll(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll(SL#_dryad_S9, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(tmp)))), ==(old(_dryad_S8, sll_reach(tmp)), old(_dryad_S9, sll_reach(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_reach(SL#_dryad_S9, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(tmp)))), ==(old(_dryad_S8, sll_max_key(tmp)), old(_dryad_S9, sll_max_key(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_max_key(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_max_key(SL#_dryad_S9, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(tmp)))), ==(old(_dryad_S8, sll_min_key(tmp)), old(_dryad_S9, sll_min_key(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_min_key(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_min_key(SL#_dryad_S9, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_reach(tmp)))), ==(old(_dryad_S8, srtl(tmp)), old(_dryad_S9, srtl(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl(SL#_dryad_S9, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_reach(tmp)))), ==(old(_dryad_S8, srtl_reach(tmp)), old(_dryad_S9, srtl_reach(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl_reach(SL#_dryad_S9, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_x)))), ==(old(_dryad_S8, sll_keys(curr_x)), old(_dryad_S9, sll_keys(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_keys(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_keys(SL#_dryad_S9, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_x)))), ==(old(_dryad_S8, sll_list_len_next(curr_x)), old(_dryad_S9, sll_list_len_next(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S9, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, rsrtl_reach(curr_x)))), ==(old(_dryad_S8, rsrtl(curr_x)), old(_dryad_S9, rsrtl(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#rsrtl(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node)) == F#rsrtl(SL#_dryad_S9, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, rsrtl_reach(curr_x)))), ==(old(_dryad_S8, rsrtl_reach(curr_x)), old(_dryad_S9, rsrtl_reach(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S9, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_x)))), ==(old(_dryad_S8, sll(curr_x)), old(_dryad_S9, sll(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll(SL#_dryad_S9, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_x)))), ==(old(_dryad_S8, sll_reach(curr_x)), old(_dryad_S9, sll_reach(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_reach(SL#_dryad_S9, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_x)))), ==(old(_dryad_S8, sll_max_key(curr_x)), old(_dryad_S9, sll_max_key(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_max_key(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_max_key(SL#_dryad_S9, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_x)))), ==(old(_dryad_S8, sll_min_key(curr_x)), old(_dryad_S9, sll_min_key(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_min_key(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_min_key(SL#_dryad_S9, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_reach(curr_x)))), ==(old(_dryad_S8, srtl(curr_x)), old(_dryad_S9, srtl(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl(SL#_dryad_S9, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_reach(curr_x)))), ==(old(_dryad_S8, srtl_reach(curr_x)), old(_dryad_S9, srtl_reach(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_reach(SL#_dryad_S9, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_y)))), ==(old(_dryad_S8, sll_keys(curr_y)), old(_dryad_S9, sll_keys(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_keys(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_keys(SL#_dryad_S9, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_y)))), ==(old(_dryad_S8, sll_list_len_next(curr_y)), old(_dryad_S9, sll_list_len_next(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S9, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, rsrtl_reach(curr_y)))), ==(old(_dryad_S8, rsrtl(curr_y)), old(_dryad_S9, rsrtl(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#rsrtl(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node)) == F#rsrtl(SL#_dryad_S9, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, rsrtl_reach(curr_y)))), ==(old(_dryad_S8, rsrtl_reach(curr_y)), old(_dryad_S9, rsrtl_reach(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S9, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_y)))), ==(old(_dryad_S8, sll(curr_y)), old(_dryad_S9, sll(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll(SL#_dryad_S9, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_y)))), ==(old(_dryad_S8, sll_reach(curr_y)), old(_dryad_S9, sll_reach(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_reach(SL#_dryad_S9, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_y)))), ==(old(_dryad_S8, sll_max_key(curr_y)), old(_dryad_S9, sll_max_key(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_max_key(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_max_key(SL#_dryad_S9, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_y)))), ==(old(_dryad_S8, sll_min_key(curr_y)), old(_dryad_S9, sll_min_key(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_min_key(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_min_key(SL#_dryad_S9, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_reach(curr_y)))), ==(old(_dryad_S8, srtl(curr_y)), old(_dryad_S9, srtl(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl(SL#_dryad_S9, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_reach(curr_y)))), ==(old(_dryad_S8, srtl_reach(curr_y)), old(_dryad_S9, srtl_reach(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_reach(SL#_dryad_S9, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(z)))), ==(old(_dryad_S8, sll_keys(z)), old(_dryad_S9, sll_keys(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_keys(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node)) == F#sll_keys(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(z)))), ==(old(_dryad_S8, sll_list_len_next(z)), old(_dryad_S9, sll_list_len_next(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node)) == F#sll_list_len_next(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, rsrtl_reach(z)))), ==(old(_dryad_S8, rsrtl(z)), old(_dryad_S9, rsrtl(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node))) ==> F#rsrtl(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node)) == F#rsrtl(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, rsrtl_reach(z)))), ==(old(_dryad_S8, rsrtl_reach(z)), old(_dryad_S9, rsrtl_reach(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node)) == F#rsrtl_reach(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(z)))), ==(old(_dryad_S8, sll(z)), old(_dryad_S9, sll(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node)) == F#sll(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(z)))), ==(old(_dryad_S8, sll_reach(z)), old(_dryad_S9, sll_reach(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node)) == F#sll_reach(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(z)))), ==(old(_dryad_S8, sll_max_key(z)), old(_dryad_S9, sll_max_key(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_max_key(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node)) == F#sll_max_key(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(z)))), ==(old(_dryad_S8, sll_min_key(z)), old(_dryad_S9, sll_min_key(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_min_key(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node)) == F#sll_min_key(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_reach(z)))), ==(old(_dryad_S8, srtl(z)), old(_dryad_S9, srtl(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node))) ==> F#srtl(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node)) == F#srtl(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_reach(z)))), ==(old(_dryad_S8, srtl_reach(z)), old(_dryad_S9, srtl_reach(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node))) ==> F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node)) == F#srtl_reach(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(y)))), ==(old(_dryad_S8, sll_keys(y)), old(_dryad_S9, sll_keys(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_keys(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node)) == F#sll_keys(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(y)))), ==(old(_dryad_S8, sll_list_len_next(y)), old(_dryad_S9, sll_list_len_next(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, rsrtl_reach(y)))), ==(old(_dryad_S8, rsrtl(y)), old(_dryad_S9, rsrtl(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node))) ==> F#rsrtl(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node)) == F#rsrtl(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, rsrtl_reach(y)))), ==(old(_dryad_S8, rsrtl_reach(y)), old(_dryad_S9, rsrtl_reach(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(y)))), ==(old(_dryad_S8, sll(y)), old(_dryad_S9, sll(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node)) == F#sll(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(y)))), ==(old(_dryad_S8, sll_reach(y)), old(_dryad_S9, sll_reach(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node)) == F#sll_reach(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(y)))), ==(old(_dryad_S8, sll_max_key(y)), old(_dryad_S9, sll_max_key(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_max_key(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node)) == F#sll_max_key(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(y)))), ==(old(_dryad_S8, sll_min_key(y)), old(_dryad_S9, sll_min_key(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_min_key(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node)) == F#sll_min_key(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_reach(y)))), ==(old(_dryad_S8, srtl(y)), old(_dryad_S9, srtl(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node))) ==> F#srtl(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node)) == F#srtl(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_reach(y)))), ==(old(_dryad_S8, srtl_reach(y)), old(_dryad_S9, srtl_reach(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node))) ==> F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node)) == F#srtl_reach(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(x)))), ==(old(_dryad_S8, sll_keys(x)), old(_dryad_S9, sll_keys(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_keys(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node)) == F#sll_keys(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(x)))), ==(old(_dryad_S8, sll_list_len_next(x)), old(_dryad_S9, sll_list_len_next(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, rsrtl_reach(x)))), ==(old(_dryad_S8, rsrtl(x)), old(_dryad_S9, rsrtl(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node))) ==> F#rsrtl(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node)) == F#rsrtl(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, rsrtl_reach(x)))), ==(old(_dryad_S8, rsrtl_reach(x)), old(_dryad_S9, rsrtl_reach(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(x)))), ==(old(_dryad_S8, sll(x)), old(_dryad_S9, sll(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node)) == F#sll(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(x)))), ==(old(_dryad_S8, sll_reach(x)), old(_dryad_S9, sll_reach(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node)) == F#sll_reach(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(x)))), ==(old(_dryad_S8, sll_max_key(x)), old(_dryad_S9, sll_max_key(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_max_key(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node)) == F#sll_max_key(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(x)))), ==(old(_dryad_S8, sll_min_key(x)), old(_dryad_S9, sll_min_key(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_min_key(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node)) == F#sll_min_key(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_reach(x)))), ==(old(_dryad_S8, srtl(x)), old(_dryad_S9, srtl(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node))) ==> F#srtl(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node)) == F#srtl(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_reach(x)))), ==(old(_dryad_S8, srtl_reach(x)), old(_dryad_S9, srtl_reach(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node))) ==> F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node)) == F#srtl_reach(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S8, sll_lseg(y, curr_y)), old(_dryad_S9, sll_lseg(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S8, sll_lseg_reach(y, curr_y)), old(_dryad_S9, sll_lseg_reach(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S8, sll_lseg_keys(y, curr_y)), old(_dryad_S9, sll_lseg_keys(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S8, sll_lseg_len_next(y, curr_y)), old(_dryad_S9, sll_lseg_len_next(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S8, sll_lseg_max_key(y, curr_y)), old(_dryad_S9, sll_lseg_max_key(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S8, sll_lseg_min_key(y, curr_y)), old(_dryad_S9, sll_lseg_min_key(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_lseg_reach(y, curr_y)))), ==(old(_dryad_S8, srtl_lseg(y, curr_y)), old(_dryad_S9, srtl_lseg(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_lseg(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_lseg_reach(y, curr_y)))), ==(old(_dryad_S8, srtl_lseg_reach(y, curr_y)), old(_dryad_S9, srtl_lseg_reach(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S8, sll_lseg(z, last_z)), old(_dryad_S9, sll_lseg(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S8, sll_lseg_reach(z, last_z)), old(_dryad_S9, sll_lseg_reach(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S8, sll_lseg_keys(z, last_z)), old(_dryad_S9, sll_lseg_keys(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S8, sll_lseg_len_next(z, last_z)), old(_dryad_S9, sll_lseg_len_next(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S8, sll_lseg_max_key(z, last_z)), old(_dryad_S9, sll_lseg_max_key(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S8, sll_lseg_min_key(z, last_z)), old(_dryad_S9, sll_lseg_min_key(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_lseg_reach(z, last_z)))), ==(old(_dryad_S8, srtl_lseg(z, last_z)), old(_dryad_S9, srtl_lseg(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl_lseg(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_lseg_reach(z, last_z)))), ==(old(_dryad_S8, srtl_lseg_reach(z, last_z)), old(_dryad_S9, srtl_lseg_reach(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S8, sll_lseg(x, curr_x)), old(_dryad_S9, sll_lseg(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S8, sll_lseg_reach(x, curr_x)), old(_dryad_S9, sll_lseg_reach(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S8, sll_lseg_keys(x, curr_x)), old(_dryad_S9, sll_lseg_keys(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S8, sll_lseg_len_next(x, curr_x)), old(_dryad_S9, sll_lseg_len_next(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S8, sll_lseg_max_key(x, curr_x)), old(_dryad_S9, sll_lseg_max_key(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S8, sll_lseg_min_key(x, curr_x)), old(_dryad_S9, sll_lseg_min_key(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_lseg_reach(x, curr_x)))), ==(old(_dryad_S8, srtl_lseg(x, curr_x)), old(_dryad_S9, srtl_lseg(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_lseg(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_lseg_reach(x, curr_x)))), ==(old(_dryad_S8, srtl_lseg_reach(x, curr_x)), old(_dryad_S9, srtl_lseg_reach(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S8, sll_lseg(z, tmp)), old(_dryad_S9, sll_lseg(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S8, sll_lseg_reach(z, tmp)), old(_dryad_S9, sll_lseg_reach(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S8, sll_lseg_keys(z, tmp)), old(_dryad_S9, sll_lseg_keys(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S8, sll_lseg_len_next(z, tmp)), old(_dryad_S9, sll_lseg_len_next(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S8, sll_lseg_max_key(z, tmp)), old(_dryad_S9, sll_lseg_max_key(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S8, sll_lseg_min_key(z, tmp)), old(_dryad_S9, sll_lseg_min_key(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_lseg_reach(z, tmp)))), ==(old(_dryad_S8, srtl_lseg(z, tmp)), old(_dryad_S9, srtl_lseg(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl_lseg(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_lseg_reach(z, tmp)))), ==(old(_dryad_S8, srtl_lseg_reach(z, tmp)), old(_dryad_S9, srtl_lseg_reach(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S8, sll_lseg(x, curr_x)), old(_dryad_S9, sll_lseg(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S8, sll_lseg_reach(x, curr_x)), old(_dryad_S9, sll_lseg_reach(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S8, sll_lseg_keys(x, curr_x)), old(_dryad_S9, sll_lseg_keys(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S8, sll_lseg_len_next(x, curr_x)), old(_dryad_S9, sll_lseg_len_next(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S8, sll_lseg_max_key(x, curr_x)), old(_dryad_S9, sll_lseg_max_key(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S8, sll_lseg_min_key(x, curr_x)), old(_dryad_S9, sll_lseg_min_key(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_lseg_reach(x, curr_x)))), ==(old(_dryad_S8, srtl_lseg(x, curr_x)), old(_dryad_S9, srtl_lseg(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_lseg(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_lseg_reach(x, curr_x)))), ==(old(_dryad_S8, srtl_lseg_reach(x, curr_x)), old(_dryad_S9, srtl_lseg_reach(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S8, sll_lseg(y, curr_y)), old(_dryad_S9, sll_lseg(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S8, sll_lseg_reach(y, curr_y)), old(_dryad_S9, sll_lseg_reach(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S8, sll_lseg_keys(y, curr_y)), old(_dryad_S9, sll_lseg_keys(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S8, sll_lseg_len_next(y, curr_y)), old(_dryad_S9, sll_lseg_len_next(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S8, sll_lseg_max_key(y, curr_y)), old(_dryad_S9, sll_lseg_max_key(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S8, sll_lseg_min_key(y, curr_y)), old(_dryad_S9, sll_lseg_min_key(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_lseg_reach(y, curr_y)))), ==(old(_dryad_S8, srtl_lseg(y, curr_y)), old(_dryad_S9, srtl_lseg(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_lseg(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_lseg_reach(y, curr_y)))), ==(old(_dryad_S8, srtl_lseg_reach(y, curr_y)), old(_dryad_S9, srtl_lseg_reach(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, curr_y3)), ==(*((curr_y3->key)), old(_dryad_S8, *((curr_y3->key))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(SL#curr_y3, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $rd_inv(SL#_dryad_S8, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, curr_y3)), @_vcc_ptr_eq_pure(*((curr_y3->next)), old(_dryad_S8, *((curr_y3->next))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(SL#curr_y3, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S8, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, curr_x2)), ==(*((curr_x2->key)), old(_dryad_S8, *((curr_x2->key))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(SL#curr_x2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $rd_inv(SL#_dryad_S8, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, curr_x2)), @_vcc_ptr_eq_pure(*((curr_x2->next)), old(_dryad_S8, *((curr_x2->next))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(SL#curr_x2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S8, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, tmp)), ==(*((tmp->key)), old(_dryad_S8, *((tmp->key))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(L#tmp, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) == $rd_inv(SL#_dryad_S8, s_node.key, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, tmp)), @_vcc_ptr_eq_pure(*((tmp->next)), old(_dryad_S8, *((tmp->next))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(L#tmp, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S8, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, curr_x)), ==(*((curr_x->key)), old(_dryad_S8, *((curr_x->key))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(L#curr_x, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) == $rd_inv(SL#_dryad_S8, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, curr_x)), @_vcc_ptr_eq_pure(*((curr_x->next)), old(_dryad_S8, *((curr_x->next))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(L#curr_x, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S8, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, curr_y)), ==(*((curr_y->key)), old(_dryad_S8, *((curr_y->key))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(L#curr_y, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) == $rd_inv(SL#_dryad_S8, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, curr_y)), @_vcc_ptr_eq_pure(*((curr_y->next)), old(_dryad_S8, *((curr_y->next))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(L#curr_y, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S8, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, z)), ==(*((z->key)), old(_dryad_S8, *((z->key))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(L#z, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) == $rd_inv(SL#_dryad_S8, s_node.key, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, z)), @_vcc_ptr_eq_pure(*((z->next)), old(_dryad_S8, *((z->next))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(L#z, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S8, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, y)), ==(*((y->key)), old(_dryad_S8, *((y->key))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(P#y, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) == $rd_inv(SL#_dryad_S8, s_node.key, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, y)), @_vcc_ptr_eq_pure(*((y->next)), old(_dryad_S8, *((y->next))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(P#y, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S8, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, x)), ==(*((x->key)), old(_dryad_S8, *((x->key))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(P#x, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) == $rd_inv(SL#_dryad_S8, s_node.key, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, x)), @_vcc_ptr_eq_pure(*((x->next)), old(_dryad_S8, *((x->next))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(P#x, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S8, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node);
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(sll_keys(curr_y3), @_vcc_intset_union(sll_keys(*((curr_y3->next))), @_vcc_intset_singleton(*((curr_y3->key)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(sll_list_len_next(curr_y3), unchecked+(sll_list_len_next(*((curr_y3->next))), 1))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y3), @_vcc_ptr_neq_null(*((curr_y3->next)))), ==(rsrtl(curr_y3), &&(&&(rsrtl(*((curr_y3->next))), unchecked!(@_vcc_oset_in(curr_y3, rsrtl_reach(*((curr_y3->next)))))), >=(*((curr_y3->key)), sll_max_key(*((curr_y3->next))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_y3, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(rsrtl_reach(curr_y3), @_vcc_oset_union(rsrtl_reach(*((curr_y3->next))), @_vcc_oset_singleton(curr_y3)))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_y3, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(sll(curr_y3), &&(sll(*((curr_y3->next))), unchecked!(@_vcc_oset_in(curr_y3, sll_reach(*((curr_y3->next)))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_y3, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(sll_reach(curr_y3), @_vcc_oset_union(sll_reach(*((curr_y3->next))), @_vcc_oset_singleton(curr_y3)))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_y3, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y3), @_vcc_ptr_neq_null(*((curr_y3->next)))), ==(sll_max_key(curr_y3), @\int_max(*((curr_y3->key)), sll_max_key(*((curr_y3->next)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y3), @_vcc_ptr_neq_null(*((curr_y3->next)))), ==(sll_min_key(curr_y3), @\int_min(*((curr_y3->key)), sll_min_key(*((curr_y3->next)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y3), @_vcc_ptr_neq_null(*((curr_y3->next)))), ==(srtl(curr_y3), &&(&&(srtl(*((curr_y3->next))), unchecked!(@_vcc_oset_in(curr_y3, srtl_reach(*((curr_y3->next)))))), <=(*((curr_y3->key)), sll_min_key(*((curr_y3->next))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_y3, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(srtl_reach(curr_y3), @_vcc_oset_union(srtl_reach(*((curr_y3->next))), @_vcc_oset_singleton(curr_y3)))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_y3, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(sll_keys(curr_x2), @_vcc_intset_union(sll_keys(*((curr_x2->next))), @_vcc_intset_singleton(*((curr_x2->key)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(sll_list_len_next(curr_x2), unchecked+(sll_list_len_next(*((curr_x2->next))), 1))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x2), @_vcc_ptr_neq_null(*((curr_x2->next)))), ==(rsrtl(curr_x2), &&(&&(rsrtl(*((curr_x2->next))), unchecked!(@_vcc_oset_in(curr_x2, rsrtl_reach(*((curr_x2->next)))))), >=(*((curr_x2->key)), sll_max_key(*((curr_x2->next))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_x2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(rsrtl_reach(curr_x2), @_vcc_oset_union(rsrtl_reach(*((curr_x2->next))), @_vcc_oset_singleton(curr_x2)))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_x2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(sll(curr_x2), &&(sll(*((curr_x2->next))), unchecked!(@_vcc_oset_in(curr_x2, sll_reach(*((curr_x2->next)))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_x2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(sll_reach(curr_x2), @_vcc_oset_union(sll_reach(*((curr_x2->next))), @_vcc_oset_singleton(curr_x2)))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_x2, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x2), @_vcc_ptr_neq_null(*((curr_x2->next)))), ==(sll_max_key(curr_x2), @\int_max(*((curr_x2->key)), sll_max_key(*((curr_x2->next)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x2), @_vcc_ptr_neq_null(*((curr_x2->next)))), ==(sll_min_key(curr_x2), @\int_min(*((curr_x2->key)), sll_min_key(*((curr_x2->next)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x2), @_vcc_ptr_neq_null(*((curr_x2->next)))), ==(srtl(curr_x2), &&(&&(srtl(*((curr_x2->next))), unchecked!(@_vcc_oset_in(curr_x2, srtl_reach(*((curr_x2->next)))))), <=(*((curr_x2->key)), sll_min_key(*((curr_x2->next))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_x2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(srtl_reach(curr_x2), @_vcc_oset_union(srtl_reach(*((curr_x2->next))), @_vcc_oset_singleton(curr_x2)))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_x2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_keys(tmp), @_vcc_intset_union(sll_keys(*((tmp->next))), @_vcc_intset_singleton(*((tmp->key)))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_list_len_next(tmp), unchecked+(sll_list_len_next(*((tmp->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(rsrtl(tmp), &&(&&(rsrtl(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, rsrtl_reach(*((tmp->next)))))), >=(*((tmp->key)), sll_max_key(*((tmp->next))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(rsrtl_reach(tmp), @_vcc_oset_union(rsrtl_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll(tmp), &&(sll(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, sll_reach(*((tmp->next)))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_reach(tmp), @_vcc_oset_union(sll_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(sll_max_key(tmp), @\int_max(*((tmp->key)), sll_max_key(*((tmp->next)))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#tmp, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(sll_min_key(tmp), @\int_min(*((tmp->key)), sll_min_key(*((tmp->next)))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#tmp, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(srtl(tmp), &&(&&(srtl(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, srtl_reach(*((tmp->next)))))), <=(*((tmp->key)), sll_min_key(*((tmp->next))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(srtl_reach(tmp), @_vcc_oset_union(srtl_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_keys(curr_x), @_vcc_intset_union(sll_keys(*((curr_x->next))), @_vcc_intset_singleton(*((curr_x->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_list_len_next(curr_x), unchecked+(sll_list_len_next(*((curr_x->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(rsrtl(curr_x), &&(&&(rsrtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, rsrtl_reach(*((curr_x->next)))))), >=(*((curr_x->key)), sll_max_key(*((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(rsrtl_reach(curr_x), @_vcc_oset_union(rsrtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll(curr_x), &&(sll(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, sll_reach(*((curr_x->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_reach(curr_x), @_vcc_oset_union(sll_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_max_key(curr_x), @\int_max(*((curr_x->key)), sll_max_key(*((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_min_key(curr_x), @\int_min(*((curr_x->key)), sll_min_key(*((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(srtl(curr_x), &&(&&(srtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, srtl_reach(*((curr_x->next)))))), <=(*((curr_x->key)), sll_min_key(*((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(srtl_reach(curr_x), @_vcc_oset_union(srtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_keys(curr_y), @_vcc_intset_union(sll_keys(*((curr_y->next))), @_vcc_intset_singleton(*((curr_y->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_list_len_next(curr_y), unchecked+(sll_list_len_next(*((curr_y->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(rsrtl(curr_y), &&(&&(rsrtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, rsrtl_reach(*((curr_y->next)))))), >=(*((curr_y->key)), sll_max_key(*((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(rsrtl_reach(curr_y), @_vcc_oset_union(rsrtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll(curr_y), &&(sll(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, sll_reach(*((curr_y->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_reach(curr_y), @_vcc_oset_union(sll_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_max_key(curr_y), @\int_max(*((curr_y->key)), sll_max_key(*((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_min_key(curr_y), @\int_min(*((curr_y->key)), sll_min_key(*((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(srtl(curr_y), &&(&&(srtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, srtl_reach(*((curr_y->next)))))), <=(*((curr_y->key)), sll_min_key(*((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(srtl_reach(curr_y), @_vcc_oset_union(srtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_keys(z), @_vcc_intset_union(sll_keys(*((z->next))), @_vcc_intset_singleton(*((z->key)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_list_len_next(z), unchecked+(sll_list_len_next(*((z->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(rsrtl(z), &&(&&(rsrtl(*((z->next))), unchecked!(@_vcc_oset_in(z, rsrtl_reach(*((z->next)))))), >=(*((z->key)), sll_max_key(*((z->next))))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(rsrtl_reach(z), @_vcc_oset_union(rsrtl_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll(z), &&(sll(*((z->next))), unchecked!(@_vcc_oset_in(z, sll_reach(*((z->next)))))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_reach(z), @_vcc_oset_union(sll_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_max_key(z), @\int_max(*((z->key)), sll_max_key(*((z->next)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_min_key(z), @\int_min(*((z->key)), sll_min_key(*((z->next)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(srtl(z), &&(&&(srtl(*((z->next))), unchecked!(@_vcc_oset_in(z, srtl_reach(*((z->next)))))), <=(*((z->key)), sll_min_key(*((z->next))))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(srtl_reach(z), @_vcc_oset_union(srtl_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_keys(y), @_vcc_intset_union(sll_keys(*((y->next))), @_vcc_intset_singleton(*((y->key)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_list_len_next(y), unchecked+(sll_list_len_next(*((y->next))), 1))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(rsrtl(y), &&(&&(rsrtl(*((y->next))), unchecked!(@_vcc_oset_in(y, rsrtl_reach(*((y->next)))))), >=(*((y->key)), sll_max_key(*((y->next))))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(rsrtl_reach(y), @_vcc_oset_union(rsrtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll(y), &&(sll(*((y->next))), unchecked!(@_vcc_oset_in(y, sll_reach(*((y->next)))))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_reach(y), @_vcc_oset_union(sll_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_max_key(y), @\int_max(*((y->key)), sll_max_key(*((y->next)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_min_key(y), @\int_min(*((y->key)), sll_min_key(*((y->next)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(srtl(y), &&(&&(srtl(*((y->next))), unchecked!(@_vcc_oset_in(y, srtl_reach(*((y->next)))))), <=(*((y->key)), sll_min_key(*((y->next))))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(srtl_reach(y), @_vcc_oset_union(srtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_keys(x), @_vcc_intset_union(sll_keys(*((x->next))), @_vcc_intset_singleton(*((x->key)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_list_len_next(x), unchecked+(sll_list_len_next(*((x->next))), 1))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(rsrtl(x), &&(&&(rsrtl(*((x->next))), unchecked!(@_vcc_oset_in(x, rsrtl_reach(*((x->next)))))), >=(*((x->key)), sll_max_key(*((x->next))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(rsrtl_reach(x), @_vcc_oset_union(rsrtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll(x), &&(sll(*((x->next))), unchecked!(@_vcc_oset_in(x, sll_reach(*((x->next)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_reach(x), @_vcc_oset_union(sll_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_max_key(x), @\int_max(*((x->key)), sll_max_key(*((x->next)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_min_key(x), @\int_min(*((x->key)), sll_min_key(*((x->next)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(srtl(x), &&(&&(srtl(*((x->next))), unchecked!(@_vcc_oset_in(x, srtl_reach(*((x->next)))))), <=(*((x->key)), sll_min_key(*((x->next))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(srtl_reach(x), @_vcc_oset_union(srtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_keys(last_z), @_vcc_intset_union(sll_keys(*((last_z->next))), @_vcc_intset_singleton(*((last_z->key)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#last_z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_list_len_next(last_z), unchecked+(sll_list_len_next(*((last_z->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#last_z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(rsrtl(last_z), &&(&&(rsrtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, rsrtl_reach(*((last_z->next)))))), >=(*((last_z->key)), sll_max_key(*((last_z->next))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(rsrtl_reach(last_z), @_vcc_oset_union(rsrtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll(last_z), &&(sll(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, sll_reach(*((last_z->next)))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_reach(last_z), @_vcc_oset_union(sll_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_max_key(last_z), @\int_max(*((last_z->key)), sll_max_key(*((last_z->next)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_min_key(last_z), @\int_min(*((last_z->key)), sll_min_key(*((last_z->next)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(srtl(last_z), &&(&&(srtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, srtl_reach(*((last_z->next)))))), <=(*((last_z->key)), sll_min_key(*((last_z->next))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(srtl_reach(last_z), @_vcc_oset_union(srtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg(y, curr_y), &&(sll_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, sll_lseg_reach(*((y->next)), curr_y)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_reach(y, curr_y), @_vcc_oset_union(sll_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_keys(y, curr_y), @_vcc_intset_union(sll_lseg_keys(*((y->next)), curr_y), @_vcc_intset_singleton(*((y->key)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_len_next(y, curr_y), unchecked+(sll_lseg_len_next(*((y->next)), curr_y), 1))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_max_key(y, curr_y), @\int_max(*((y->key)), sll_lseg_max_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_min_key(y, curr_y), @\int_min(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(srtl_lseg(y, curr_y), &&(&&(srtl_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, srtl_lseg_reach(*((y->next)), curr_y)))), <=(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(srtl_lseg_reach(y, curr_y), @_vcc_oset_union(srtl_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg(x, curr_x), &&(sll_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, sll_lseg_reach(*((x->next)), curr_x)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_reach(x, curr_x), @_vcc_oset_union(sll_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_keys(x, curr_x), @_vcc_intset_union(sll_lseg_keys(*((x->next)), curr_x), @_vcc_intset_singleton(*((x->key)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_len_next(x, curr_x), unchecked+(sll_lseg_len_next(*((x->next)), curr_x), 1))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_max_key(x, curr_x), @\int_max(*((x->key)), sll_lseg_max_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_min_key(x, curr_x), @\int_min(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(srtl_lseg(x, curr_x), &&(&&(srtl_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, srtl_lseg_reach(*((x->next)), curr_x)))), <=(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(srtl_lseg_reach(x, curr_x), @_vcc_oset_union(srtl_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), ==(sll_lseg(z, tmp), &&(sll_lseg(*((z->next)), tmp), unchecked!(@_vcc_oset_in(z, sll_lseg_reach(*((z->next)), tmp)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), ==(sll_lseg_reach(z, tmp), @_vcc_oset_union(sll_lseg_reach(*((z->next)), tmp), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), ==(sll_lseg_keys(z, tmp), @_vcc_intset_union(sll_lseg_keys(*((z->next)), tmp), @_vcc_intset_singleton(*((z->key)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), ==(sll_lseg_len_next(z, tmp), unchecked+(sll_lseg_len_next(*((z->next)), tmp), 1))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), @_vcc_ptr_neq_pure(*((z->next)), tmp)), ==(sll_lseg_max_key(z, tmp), @\int_max(*((z->key)), sll_lseg_max_key(*((z->next)), tmp)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), @_vcc_ptr_neq_pure(*((z->next)), tmp)), ==(sll_lseg_min_key(z, tmp), @\int_min(*((z->key)), sll_lseg_min_key(*((z->next)), tmp)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), @_vcc_ptr_neq_pure(*((z->next)), tmp)), ==(srtl_lseg(z, tmp), &&(&&(srtl_lseg(*((z->next)), tmp), unchecked!(@_vcc_oset_in(z, srtl_lseg_reach(*((z->next)), tmp)))), <=(*((z->key)), sll_lseg_min_key(*((z->next)), tmp))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), ==(srtl_lseg_reach(z, tmp), @_vcc_oset_union(srtl_lseg_reach(*((z->next)), tmp), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg(x, curr_x), &&(sll_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, sll_lseg_reach(*((x->next)), curr_x)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_reach(x, curr_x), @_vcc_oset_union(sll_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_keys(x, curr_x), @_vcc_intset_union(sll_lseg_keys(*((x->next)), curr_x), @_vcc_intset_singleton(*((x->key)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_len_next(x, curr_x), unchecked+(sll_lseg_len_next(*((x->next)), curr_x), 1))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_max_key(x, curr_x), @\int_max(*((x->key)), sll_lseg_max_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_min_key(x, curr_x), @\int_min(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(srtl_lseg(x, curr_x), &&(&&(srtl_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, srtl_lseg_reach(*((x->next)), curr_x)))), <=(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(srtl_lseg_reach(x, curr_x), @_vcc_oset_union(srtl_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg(y, curr_y), &&(sll_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, sll_lseg_reach(*((y->next)), curr_y)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_reach(y, curr_y), @_vcc_oset_union(sll_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_keys(y, curr_y), @_vcc_intset_union(sll_lseg_keys(*((y->next)), curr_y), @_vcc_intset_singleton(*((y->key)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_len_next(y, curr_y), unchecked+(sll_lseg_len_next(*((y->next)), curr_y), 1))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_max_key(y, curr_y), @\int_max(*((y->key)), sll_lseg_max_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_min_key(y, curr_y), @\int_min(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(srtl_lseg(y, curr_y), &&(&&(srtl_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, srtl_lseg_reach(*((y->next)), curr_y)))), <=(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(srtl_lseg_reach(y, curr_y), @_vcc_oset_union(srtl_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assert @reads_check_normal((curr_x->key)); 
            assert $thread_local($s, $phys_ptr_cast(L#curr_x, ^s_node));
            // assert @reads_check_normal((curr_y->key)); 
            assert $thread_local($s, $phys_ptr_cast(L#curr_y, ^s_node));
            // z_key := unchecked+(*((curr_x->key)), *((curr_y->key))); 
            L#z_key := $unchk_add(^^i4, $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)));
            // _math \state _dryad_S10; 
            // _dryad_S10 := @_vcc_current_state(@state); 
            SL#_dryad_S10 := $current_state($s);
            // _math \state stmtexpr7#15; 
            // stmtexpr7#15 := _dryad_S10; 
            stmtexpr7#15 := SL#_dryad_S10;
            // assert @prim_writes_check((last_z->key)); 
            assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#last_z, ^s_node), s_node.key));
            // *(last_z->key) := z_key; 
            call $write_int(s_node.key, $phys_ptr_cast(L#last_z, ^s_node), L#z_key);
            assume $full_stop_ext(#tok$3^77.5, $s);
            // _math \state _dryad_S11; 
            // _dryad_S11 := @_vcc_current_state(@state); 
            SL#_dryad_S11 := $current_state($s);
            // _math \state stmtexpr8#16; 
            // stmtexpr8#16 := _dryad_S11; 
            stmtexpr8#16 := SL#_dryad_S11;
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(*((last_z->next)))))), ==(old(_dryad_S10, sll_keys(*((last_z->next)))), old(_dryad_S11, sll_keys(*((last_z->next)))))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) ==> F#sll_keys(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) == F#sll_keys(SL#_dryad_S11, $rd_phys_ptr(SL#_dryad_S11, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(*((last_z->next)))))), ==(old(_dryad_S10, sll_list_len_next(*((last_z->next)))), old(_dryad_S11, sll_list_len_next(*((last_z->next)))))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $rd_phys_ptr(SL#_dryad_S11, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(*((last_z->next)))))), ==(old(_dryad_S10, rsrtl(*((last_z->next)))), old(_dryad_S11, rsrtl(*((last_z->next)))))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) ==> F#rsrtl(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) == F#rsrtl(SL#_dryad_S11, $rd_phys_ptr(SL#_dryad_S11, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(*((last_z->next)))))), ==(old(_dryad_S10, rsrtl_reach(*((last_z->next)))), old(_dryad_S11, rsrtl_reach(*((last_z->next)))))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $rd_phys_ptr(SL#_dryad_S11, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(*((last_z->next)))))), ==(old(_dryad_S10, sll(*((last_z->next)))), old(_dryad_S11, sll(*((last_z->next)))))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) ==> F#sll(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) == F#sll(SL#_dryad_S11, $rd_phys_ptr(SL#_dryad_S11, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(*((last_z->next)))))), ==(old(_dryad_S10, sll_reach(*((last_z->next)))), old(_dryad_S11, sll_reach(*((last_z->next)))))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) ==> F#sll_reach(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) == F#sll_reach(SL#_dryad_S11, $rd_phys_ptr(SL#_dryad_S11, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(*((last_z->next)))))), ==(old(_dryad_S10, sll_max_key(*((last_z->next)))), old(_dryad_S11, sll_max_key(*((last_z->next)))))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) ==> F#sll_max_key(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) == F#sll_max_key(SL#_dryad_S11, $rd_phys_ptr(SL#_dryad_S11, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(*((last_z->next)))))), ==(old(_dryad_S10, sll_min_key(*((last_z->next)))), old(_dryad_S11, sll_min_key(*((last_z->next)))))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) ==> F#sll_min_key(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) == F#sll_min_key(SL#_dryad_S11, $rd_phys_ptr(SL#_dryad_S11, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(*((last_z->next)))))), ==(old(_dryad_S10, srtl(*((last_z->next)))), old(_dryad_S11, srtl(*((last_z->next)))))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) ==> F#srtl(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) == F#srtl(SL#_dryad_S11, $rd_phys_ptr(SL#_dryad_S11, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(*((last_z->next)))))), ==(old(_dryad_S10, srtl_reach(*((last_z->next)))), old(_dryad_S11, srtl_reach(*((last_z->next)))))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) ==> F#srtl_reach(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) == F#srtl_reach(SL#_dryad_S11, $rd_phys_ptr(SL#_dryad_S11, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node));
            // assume ==(old(_dryad_S10, sll_list_len_next(curr_y3)), old(_dryad_S11, sll_list_len_next(curr_y3))); 
            assume F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==(old(_dryad_S10, rsrtl_reach(curr_y3)), old(_dryad_S11, rsrtl_reach(curr_y3))); 
            assume F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==(old(_dryad_S10, sll(curr_y3)), old(_dryad_S11, sll(curr_y3))); 
            assume F#sll(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==(old(_dryad_S10, sll_reach(curr_y3)), old(_dryad_S11, sll_reach(curr_y3))); 
            assume F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==(old(_dryad_S10, srtl_reach(curr_y3)), old(_dryad_S11, srtl_reach(curr_y3))); 
            assume F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==(old(_dryad_S10, sll_list_len_next(curr_x2)), old(_dryad_S11, sll_list_len_next(curr_x2))); 
            assume F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==(old(_dryad_S10, rsrtl_reach(curr_x2)), old(_dryad_S11, rsrtl_reach(curr_x2))); 
            assume F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==(old(_dryad_S10, sll(curr_x2)), old(_dryad_S11, sll(curr_x2))); 
            assume F#sll(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==(old(_dryad_S10, sll_reach(curr_x2)), old(_dryad_S11, sll_reach(curr_x2))); 
            assume F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==(old(_dryad_S10, srtl_reach(curr_x2)), old(_dryad_S11, srtl_reach(curr_x2))); 
            assume F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==(old(_dryad_S10, sll_list_len_next(tmp)), old(_dryad_S11, sll_list_len_next(tmp))); 
            assume F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==(old(_dryad_S10, rsrtl_reach(tmp)), old(_dryad_S11, rsrtl_reach(tmp))); 
            assume F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==(old(_dryad_S10, sll(tmp)), old(_dryad_S11, sll(tmp))); 
            assume F#sll(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==(old(_dryad_S10, sll_reach(tmp)), old(_dryad_S11, sll_reach(tmp))); 
            assume F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==(old(_dryad_S10, srtl_reach(tmp)), old(_dryad_S11, srtl_reach(tmp))); 
            assume F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==(old(_dryad_S10, sll_list_len_next(curr_x)), old(_dryad_S11, sll_list_len_next(curr_x))); 
            assume F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==(old(_dryad_S10, rsrtl_reach(curr_x)), old(_dryad_S11, rsrtl_reach(curr_x))); 
            assume F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==(old(_dryad_S10, sll(curr_x)), old(_dryad_S11, sll(curr_x))); 
            assume F#sll(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==(old(_dryad_S10, sll_reach(curr_x)), old(_dryad_S11, sll_reach(curr_x))); 
            assume F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==(old(_dryad_S10, srtl_reach(curr_x)), old(_dryad_S11, srtl_reach(curr_x))); 
            assume F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==(old(_dryad_S10, sll_list_len_next(curr_y)), old(_dryad_S11, sll_list_len_next(curr_y))); 
            assume F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==(old(_dryad_S10, rsrtl_reach(curr_y)), old(_dryad_S11, rsrtl_reach(curr_y))); 
            assume F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==(old(_dryad_S10, sll(curr_y)), old(_dryad_S11, sll(curr_y))); 
            assume F#sll(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==(old(_dryad_S10, sll_reach(curr_y)), old(_dryad_S11, sll_reach(curr_y))); 
            assume F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==(old(_dryad_S10, srtl_reach(curr_y)), old(_dryad_S11, srtl_reach(curr_y))); 
            assume F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==(old(_dryad_S10, sll_list_len_next(z)), old(_dryad_S11, sll_list_len_next(z))); 
            assume F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node));
            // assume ==(old(_dryad_S10, rsrtl_reach(z)), old(_dryad_S11, rsrtl_reach(z))); 
            assume F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node));
            // assume ==(old(_dryad_S10, sll(z)), old(_dryad_S11, sll(z))); 
            assume F#sll(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node));
            // assume ==(old(_dryad_S10, sll_reach(z)), old(_dryad_S11, sll_reach(z))); 
            assume F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node));
            // assume ==(old(_dryad_S10, srtl_reach(z)), old(_dryad_S11, srtl_reach(z))); 
            assume F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node));
            // assume ==(old(_dryad_S10, sll_list_len_next(last_z)), old(_dryad_S11, sll_list_len_next(last_z))); 
            assume F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==(old(_dryad_S10, rsrtl_reach(last_z)), old(_dryad_S11, rsrtl_reach(last_z))); 
            assume F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#last_z, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==(old(_dryad_S10, sll(last_z)), old(_dryad_S11, sll(last_z))); 
            assume F#sll(SL#_dryad_S10, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==(old(_dryad_S10, sll_reach(last_z)), old(_dryad_S11, sll_reach(last_z))); 
            assume F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==(old(_dryad_S10, srtl_reach(last_z)), old(_dryad_S11, srtl_reach(last_z))); 
            assume F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==(old(_dryad_S10, sll_list_len_next(y)), old(_dryad_S11, sll_list_len_next(y))); 
            assume F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node));
            // assume ==(old(_dryad_S10, rsrtl_reach(y)), old(_dryad_S11, rsrtl_reach(y))); 
            assume F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node));
            // assume ==(old(_dryad_S10, sll(y)), old(_dryad_S11, sll(y))); 
            assume F#sll(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node));
            // assume ==(old(_dryad_S10, sll_reach(y)), old(_dryad_S11, sll_reach(y))); 
            assume F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node));
            // assume ==(old(_dryad_S10, srtl_reach(y)), old(_dryad_S11, srtl_reach(y))); 
            assume F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node));
            // assume ==(old(_dryad_S10, sll_list_len_next(x)), old(_dryad_S11, sll_list_len_next(x))); 
            assume F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node));
            // assume ==(old(_dryad_S10, rsrtl_reach(x)), old(_dryad_S11, rsrtl_reach(x))); 
            assume F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node));
            // assume ==(old(_dryad_S10, sll(x)), old(_dryad_S11, sll(x))); 
            assume F#sll(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node));
            // assume ==(old(_dryad_S10, sll_reach(x)), old(_dryad_S11, sll_reach(x))); 
            assume F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node));
            // assume ==(old(_dryad_S10, srtl_reach(x)), old(_dryad_S11, srtl_reach(x))); 
            assume F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_y3)))), ==(old(_dryad_S10, sll_keys(curr_y3)), old(_dryad_S11, sll_keys(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_keys(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_keys(SL#_dryad_S11, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_y3)))), ==(old(_dryad_S10, sll_list_len_next(curr_y3)), old(_dryad_S11, sll_list_len_next(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(curr_y3)))), ==(old(_dryad_S10, rsrtl(curr_y3)), old(_dryad_S11, rsrtl(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#rsrtl(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#rsrtl(SL#_dryad_S11, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(curr_y3)))), ==(old(_dryad_S10, rsrtl_reach(curr_y3)), old(_dryad_S11, rsrtl_reach(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_y3)))), ==(old(_dryad_S10, sll(curr_y3)), old(_dryad_S11, sll(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_y3)))), ==(old(_dryad_S10, sll_reach(curr_y3)), old(_dryad_S11, sll_reach(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_y3)))), ==(old(_dryad_S10, sll_max_key(curr_y3)), old(_dryad_S11, sll_max_key(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_max_key(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_max_key(SL#_dryad_S11, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_y3)))), ==(old(_dryad_S10, sll_min_key(curr_y3)), old(_dryad_S11, sll_min_key(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_min_key(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_min_key(SL#_dryad_S11, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(curr_y3)))), ==(old(_dryad_S10, srtl(curr_y3)), old(_dryad_S11, srtl(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#srtl(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#srtl(SL#_dryad_S11, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(curr_y3)))), ==(old(_dryad_S10, srtl_reach(curr_y3)), old(_dryad_S11, srtl_reach(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_x2)))), ==(old(_dryad_S10, sll_keys(curr_x2)), old(_dryad_S11, sll_keys(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_keys(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_keys(SL#_dryad_S11, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_x2)))), ==(old(_dryad_S10, sll_list_len_next(curr_x2)), old(_dryad_S11, sll_list_len_next(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(curr_x2)))), ==(old(_dryad_S10, rsrtl(curr_x2)), old(_dryad_S11, rsrtl(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#rsrtl(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#rsrtl(SL#_dryad_S11, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(curr_x2)))), ==(old(_dryad_S10, rsrtl_reach(curr_x2)), old(_dryad_S11, rsrtl_reach(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_x2)))), ==(old(_dryad_S10, sll(curr_x2)), old(_dryad_S11, sll(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_x2)))), ==(old(_dryad_S10, sll_reach(curr_x2)), old(_dryad_S11, sll_reach(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_x2)))), ==(old(_dryad_S10, sll_max_key(curr_x2)), old(_dryad_S11, sll_max_key(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_max_key(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_max_key(SL#_dryad_S11, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_x2)))), ==(old(_dryad_S10, sll_min_key(curr_x2)), old(_dryad_S11, sll_min_key(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_min_key(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_min_key(SL#_dryad_S11, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(curr_x2)))), ==(old(_dryad_S10, srtl(curr_x2)), old(_dryad_S11, srtl(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#srtl(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#srtl(SL#_dryad_S11, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(curr_x2)))), ==(old(_dryad_S10, srtl_reach(curr_x2)), old(_dryad_S11, srtl_reach(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(tmp)))), ==(old(_dryad_S10, sll_keys(tmp)), old(_dryad_S11, sll_keys(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_keys(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_keys(SL#_dryad_S11, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(tmp)))), ==(old(_dryad_S10, sll_list_len_next(tmp)), old(_dryad_S11, sll_list_len_next(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(tmp)))), ==(old(_dryad_S10, rsrtl(tmp)), old(_dryad_S11, rsrtl(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#rsrtl(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node)) == F#rsrtl(SL#_dryad_S11, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(tmp)))), ==(old(_dryad_S10, rsrtl_reach(tmp)), old(_dryad_S11, rsrtl_reach(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(tmp)))), ==(old(_dryad_S10, sll(tmp)), old(_dryad_S11, sll(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(tmp)))), ==(old(_dryad_S10, sll_reach(tmp)), old(_dryad_S11, sll_reach(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(tmp)))), ==(old(_dryad_S10, sll_max_key(tmp)), old(_dryad_S11, sll_max_key(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_max_key(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_max_key(SL#_dryad_S11, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(tmp)))), ==(old(_dryad_S10, sll_min_key(tmp)), old(_dryad_S11, sll_min_key(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_min_key(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_min_key(SL#_dryad_S11, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(tmp)))), ==(old(_dryad_S10, srtl(tmp)), old(_dryad_S11, srtl(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl(SL#_dryad_S11, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(tmp)))), ==(old(_dryad_S10, srtl_reach(tmp)), old(_dryad_S11, srtl_reach(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_x)))), ==(old(_dryad_S10, sll_keys(curr_x)), old(_dryad_S11, sll_keys(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_keys(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_keys(SL#_dryad_S11, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_x)))), ==(old(_dryad_S10, sll_list_len_next(curr_x)), old(_dryad_S11, sll_list_len_next(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(curr_x)))), ==(old(_dryad_S10, rsrtl(curr_x)), old(_dryad_S11, rsrtl(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#rsrtl(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node)) == F#rsrtl(SL#_dryad_S11, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(curr_x)))), ==(old(_dryad_S10, rsrtl_reach(curr_x)), old(_dryad_S11, rsrtl_reach(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_x)))), ==(old(_dryad_S10, sll(curr_x)), old(_dryad_S11, sll(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_x)))), ==(old(_dryad_S10, sll_reach(curr_x)), old(_dryad_S11, sll_reach(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_x)))), ==(old(_dryad_S10, sll_max_key(curr_x)), old(_dryad_S11, sll_max_key(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_max_key(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_max_key(SL#_dryad_S11, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_x)))), ==(old(_dryad_S10, sll_min_key(curr_x)), old(_dryad_S11, sll_min_key(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_min_key(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_min_key(SL#_dryad_S11, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(curr_x)))), ==(old(_dryad_S10, srtl(curr_x)), old(_dryad_S11, srtl(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl(SL#_dryad_S11, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(curr_x)))), ==(old(_dryad_S10, srtl_reach(curr_x)), old(_dryad_S11, srtl_reach(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_y)))), ==(old(_dryad_S10, sll_keys(curr_y)), old(_dryad_S11, sll_keys(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_keys(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_keys(SL#_dryad_S11, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_y)))), ==(old(_dryad_S10, sll_list_len_next(curr_y)), old(_dryad_S11, sll_list_len_next(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(curr_y)))), ==(old(_dryad_S10, rsrtl(curr_y)), old(_dryad_S11, rsrtl(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#rsrtl(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node)) == F#rsrtl(SL#_dryad_S11, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(curr_y)))), ==(old(_dryad_S10, rsrtl_reach(curr_y)), old(_dryad_S11, rsrtl_reach(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_y)))), ==(old(_dryad_S10, sll(curr_y)), old(_dryad_S11, sll(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_y)))), ==(old(_dryad_S10, sll_reach(curr_y)), old(_dryad_S11, sll_reach(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_y)))), ==(old(_dryad_S10, sll_max_key(curr_y)), old(_dryad_S11, sll_max_key(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_max_key(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_max_key(SL#_dryad_S11, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_y)))), ==(old(_dryad_S10, sll_min_key(curr_y)), old(_dryad_S11, sll_min_key(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_min_key(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_min_key(SL#_dryad_S11, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(curr_y)))), ==(old(_dryad_S10, srtl(curr_y)), old(_dryad_S11, srtl(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl(SL#_dryad_S11, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(curr_y)))), ==(old(_dryad_S10, srtl_reach(curr_y)), old(_dryad_S11, srtl_reach(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(z)))), ==(old(_dryad_S10, sll_keys(z)), old(_dryad_S11, sll_keys(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_keys(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node)) == F#sll_keys(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(z)))), ==(old(_dryad_S10, sll_list_len_next(z)), old(_dryad_S11, sll_list_len_next(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(z)))), ==(old(_dryad_S10, rsrtl(z)), old(_dryad_S11, rsrtl(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node))) ==> F#rsrtl(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node)) == F#rsrtl(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(z)))), ==(old(_dryad_S10, rsrtl_reach(z)), old(_dryad_S11, rsrtl_reach(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(z)))), ==(old(_dryad_S10, sll(z)), old(_dryad_S11, sll(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(z)))), ==(old(_dryad_S10, sll_reach(z)), old(_dryad_S11, sll_reach(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(z)))), ==(old(_dryad_S10, sll_max_key(z)), old(_dryad_S11, sll_max_key(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_max_key(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node)) == F#sll_max_key(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(z)))), ==(old(_dryad_S10, sll_min_key(z)), old(_dryad_S11, sll_min_key(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_min_key(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node)) == F#sll_min_key(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(z)))), ==(old(_dryad_S10, srtl(z)), old(_dryad_S11, srtl(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node))) ==> F#srtl(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node)) == F#srtl(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(z)))), ==(old(_dryad_S10, srtl_reach(z)), old(_dryad_S11, srtl_reach(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node))) ==> F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(y)))), ==(old(_dryad_S10, sll_keys(y)), old(_dryad_S11, sll_keys(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_keys(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node)) == F#sll_keys(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(y)))), ==(old(_dryad_S10, sll_list_len_next(y)), old(_dryad_S11, sll_list_len_next(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(y)))), ==(old(_dryad_S10, rsrtl(y)), old(_dryad_S11, rsrtl(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node))) ==> F#rsrtl(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node)) == F#rsrtl(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(y)))), ==(old(_dryad_S10, rsrtl_reach(y)), old(_dryad_S11, rsrtl_reach(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(y)))), ==(old(_dryad_S10, sll(y)), old(_dryad_S11, sll(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(y)))), ==(old(_dryad_S10, sll_reach(y)), old(_dryad_S11, sll_reach(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(y)))), ==(old(_dryad_S10, sll_max_key(y)), old(_dryad_S11, sll_max_key(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_max_key(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node)) == F#sll_max_key(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(y)))), ==(old(_dryad_S10, sll_min_key(y)), old(_dryad_S11, sll_min_key(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_min_key(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node)) == F#sll_min_key(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(y)))), ==(old(_dryad_S10, srtl(y)), old(_dryad_S11, srtl(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node))) ==> F#srtl(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node)) == F#srtl(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(y)))), ==(old(_dryad_S10, srtl_reach(y)), old(_dryad_S11, srtl_reach(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node))) ==> F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(x)))), ==(old(_dryad_S10, sll_keys(x)), old(_dryad_S11, sll_keys(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_keys(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node)) == F#sll_keys(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(x)))), ==(old(_dryad_S10, sll_list_len_next(x)), old(_dryad_S11, sll_list_len_next(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(x)))), ==(old(_dryad_S10, rsrtl(x)), old(_dryad_S11, rsrtl(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node))) ==> F#rsrtl(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node)) == F#rsrtl(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(x)))), ==(old(_dryad_S10, rsrtl_reach(x)), old(_dryad_S11, rsrtl_reach(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(x)))), ==(old(_dryad_S10, sll(x)), old(_dryad_S11, sll(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(x)))), ==(old(_dryad_S10, sll_reach(x)), old(_dryad_S11, sll_reach(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(x)))), ==(old(_dryad_S10, sll_max_key(x)), old(_dryad_S11, sll_max_key(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_max_key(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node)) == F#sll_max_key(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(x)))), ==(old(_dryad_S10, sll_min_key(x)), old(_dryad_S11, sll_min_key(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_min_key(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node)) == F#sll_min_key(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(x)))), ==(old(_dryad_S10, srtl(x)), old(_dryad_S11, srtl(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node))) ==> F#srtl(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node)) == F#srtl(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(x)))), ==(old(_dryad_S10, srtl_reach(x)), old(_dryad_S11, srtl_reach(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node))) ==> F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S10, sll_lseg(y, curr_y)), old(_dryad_S11, sll_lseg(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S10, sll_lseg_reach(y, curr_y)), old(_dryad_S11, sll_lseg_reach(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S10, sll_lseg_keys(y, curr_y)), old(_dryad_S11, sll_lseg_keys(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S10, sll_lseg_len_next(y, curr_y)), old(_dryad_S11, sll_lseg_len_next(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S10, sll_lseg_max_key(y, curr_y)), old(_dryad_S11, sll_lseg_max_key(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S10, sll_lseg_min_key(y, curr_y)), old(_dryad_S11, sll_lseg_min_key(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_lseg_reach(y, curr_y)))), ==(old(_dryad_S10, srtl_lseg(y, curr_y)), old(_dryad_S11, srtl_lseg(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_lseg(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_lseg_reach(y, curr_y)))), ==(old(_dryad_S10, srtl_lseg_reach(y, curr_y)), old(_dryad_S11, srtl_lseg_reach(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S10, sll_lseg(z, last_z)), old(_dryad_S11, sll_lseg(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S10, sll_lseg_reach(z, last_z)), old(_dryad_S11, sll_lseg_reach(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S10, sll_lseg_keys(z, last_z)), old(_dryad_S11, sll_lseg_keys(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S10, sll_lseg_len_next(z, last_z)), old(_dryad_S11, sll_lseg_len_next(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S10, sll_lseg_max_key(z, last_z)), old(_dryad_S11, sll_lseg_max_key(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S10, sll_lseg_min_key(z, last_z)), old(_dryad_S11, sll_lseg_min_key(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_lseg_reach(z, last_z)))), ==(old(_dryad_S10, srtl_lseg(z, last_z)), old(_dryad_S11, srtl_lseg(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl_lseg(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_lseg_reach(z, last_z)))), ==(old(_dryad_S10, srtl_lseg_reach(z, last_z)), old(_dryad_S11, srtl_lseg_reach(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S10, sll_lseg(x, curr_x)), old(_dryad_S11, sll_lseg(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S10, sll_lseg_reach(x, curr_x)), old(_dryad_S11, sll_lseg_reach(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S10, sll_lseg_keys(x, curr_x)), old(_dryad_S11, sll_lseg_keys(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S10, sll_lseg_len_next(x, curr_x)), old(_dryad_S11, sll_lseg_len_next(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S10, sll_lseg_max_key(x, curr_x)), old(_dryad_S11, sll_lseg_max_key(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S10, sll_lseg_min_key(x, curr_x)), old(_dryad_S11, sll_lseg_min_key(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_lseg_reach(x, curr_x)))), ==(old(_dryad_S10, srtl_lseg(x, curr_x)), old(_dryad_S11, srtl_lseg(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_lseg(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_lseg_reach(x, curr_x)))), ==(old(_dryad_S10, srtl_lseg_reach(x, curr_x)), old(_dryad_S11, srtl_lseg_reach(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S10, sll_lseg(z, tmp)), old(_dryad_S11, sll_lseg(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S10, sll_lseg_reach(z, tmp)), old(_dryad_S11, sll_lseg_reach(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S10, sll_lseg_keys(z, tmp)), old(_dryad_S11, sll_lseg_keys(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S10, sll_lseg_len_next(z, tmp)), old(_dryad_S11, sll_lseg_len_next(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S10, sll_lseg_max_key(z, tmp)), old(_dryad_S11, sll_lseg_max_key(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S10, sll_lseg_min_key(z, tmp)), old(_dryad_S11, sll_lseg_min_key(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_lseg_reach(z, tmp)))), ==(old(_dryad_S10, srtl_lseg(z, tmp)), old(_dryad_S11, srtl_lseg(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl_lseg(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_lseg_reach(z, tmp)))), ==(old(_dryad_S10, srtl_lseg_reach(z, tmp)), old(_dryad_S11, srtl_lseg_reach(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S10, sll_lseg(x, curr_x)), old(_dryad_S11, sll_lseg(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S10, sll_lseg_reach(x, curr_x)), old(_dryad_S11, sll_lseg_reach(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S10, sll_lseg_keys(x, curr_x)), old(_dryad_S11, sll_lseg_keys(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S10, sll_lseg_len_next(x, curr_x)), old(_dryad_S11, sll_lseg_len_next(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S10, sll_lseg_max_key(x, curr_x)), old(_dryad_S11, sll_lseg_max_key(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S10, sll_lseg_min_key(x, curr_x)), old(_dryad_S11, sll_lseg_min_key(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_lseg_reach(x, curr_x)))), ==(old(_dryad_S10, srtl_lseg(x, curr_x)), old(_dryad_S11, srtl_lseg(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_lseg(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_lseg_reach(x, curr_x)))), ==(old(_dryad_S10, srtl_lseg_reach(x, curr_x)), old(_dryad_S11, srtl_lseg_reach(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S10, sll_lseg(y, curr_y)), old(_dryad_S11, sll_lseg(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S10, sll_lseg_reach(y, curr_y)), old(_dryad_S11, sll_lseg_reach(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S10, sll_lseg_keys(y, curr_y)), old(_dryad_S11, sll_lseg_keys(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S10, sll_lseg_len_next(y, curr_y)), old(_dryad_S11, sll_lseg_len_next(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S10, sll_lseg_max_key(y, curr_y)), old(_dryad_S11, sll_lseg_max_key(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S10, sll_lseg_min_key(y, curr_y)), old(_dryad_S11, sll_lseg_min_key(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_lseg_reach(y, curr_y)))), ==(old(_dryad_S10, srtl_lseg(y, curr_y)), old(_dryad_S11, srtl_lseg(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_lseg(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_lseg_reach(y, curr_y)))), ==(old(_dryad_S10, srtl_lseg_reach(y, curr_y)), old(_dryad_S11, srtl_lseg_reach(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, curr_y3)), ==(*((curr_y3->key)), old(_dryad_S10, *((curr_y3->key))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(SL#curr_y3, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $rd_inv(SL#_dryad_S10, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, curr_y3)), @_vcc_ptr_eq_pure(*((curr_y3->next)), old(_dryad_S10, *((curr_y3->next))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(SL#curr_y3, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, curr_x2)), ==(*((curr_x2->key)), old(_dryad_S10, *((curr_x2->key))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(SL#curr_x2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $rd_inv(SL#_dryad_S10, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, curr_x2)), @_vcc_ptr_eq_pure(*((curr_x2->next)), old(_dryad_S10, *((curr_x2->next))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(SL#curr_x2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, tmp)), ==(*((tmp->key)), old(_dryad_S10, *((tmp->key))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(L#tmp, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) == $rd_inv(SL#_dryad_S10, s_node.key, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, tmp)), @_vcc_ptr_eq_pure(*((tmp->next)), old(_dryad_S10, *((tmp->next))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(L#tmp, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, curr_x)), ==(*((curr_x->key)), old(_dryad_S10, *((curr_x->key))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(L#curr_x, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) == $rd_inv(SL#_dryad_S10, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, curr_x)), @_vcc_ptr_eq_pure(*((curr_x->next)), old(_dryad_S10, *((curr_x->next))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(L#curr_x, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, curr_y)), ==(*((curr_y->key)), old(_dryad_S10, *((curr_y->key))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(L#curr_y, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) == $rd_inv(SL#_dryad_S10, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, curr_y)), @_vcc_ptr_eq_pure(*((curr_y->next)), old(_dryad_S10, *((curr_y->next))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(L#curr_y, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, z)), ==(*((z->key)), old(_dryad_S10, *((z->key))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(L#z, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) == $rd_inv(SL#_dryad_S10, s_node.key, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, z)), @_vcc_ptr_eq_pure(*((z->next)), old(_dryad_S10, *((z->next))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(L#z, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, y)), ==(*((y->key)), old(_dryad_S10, *((y->key))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(P#y, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) == $rd_inv(SL#_dryad_S10, s_node.key, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, y)), @_vcc_ptr_eq_pure(*((y->next)), old(_dryad_S10, *((y->next))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(P#y, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, x)), ==(*((x->key)), old(_dryad_S10, *((x->key))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(P#x, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) == $rd_inv(SL#_dryad_S10, s_node.key, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, x)), @_vcc_ptr_eq_pure(*((x->next)), old(_dryad_S10, *((x->next))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(P#x, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node);
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(sll_keys(curr_y3), @_vcc_intset_union(sll_keys(*((curr_y3->next))), @_vcc_intset_singleton(*((curr_y3->key)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(sll_list_len_next(curr_y3), unchecked+(sll_list_len_next(*((curr_y3->next))), 1))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y3), @_vcc_ptr_neq_null(*((curr_y3->next)))), ==(rsrtl(curr_y3), &&(&&(rsrtl(*((curr_y3->next))), unchecked!(@_vcc_oset_in(curr_y3, rsrtl_reach(*((curr_y3->next)))))), >=(*((curr_y3->key)), sll_max_key(*((curr_y3->next))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_y3, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(rsrtl_reach(curr_y3), @_vcc_oset_union(rsrtl_reach(*((curr_y3->next))), @_vcc_oset_singleton(curr_y3)))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_y3, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(sll(curr_y3), &&(sll(*((curr_y3->next))), unchecked!(@_vcc_oset_in(curr_y3, sll_reach(*((curr_y3->next)))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_y3, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(sll_reach(curr_y3), @_vcc_oset_union(sll_reach(*((curr_y3->next))), @_vcc_oset_singleton(curr_y3)))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_y3, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y3), @_vcc_ptr_neq_null(*((curr_y3->next)))), ==(sll_max_key(curr_y3), @\int_max(*((curr_y3->key)), sll_max_key(*((curr_y3->next)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y3), @_vcc_ptr_neq_null(*((curr_y3->next)))), ==(sll_min_key(curr_y3), @\int_min(*((curr_y3->key)), sll_min_key(*((curr_y3->next)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y3), @_vcc_ptr_neq_null(*((curr_y3->next)))), ==(srtl(curr_y3), &&(&&(srtl(*((curr_y3->next))), unchecked!(@_vcc_oset_in(curr_y3, srtl_reach(*((curr_y3->next)))))), <=(*((curr_y3->key)), sll_min_key(*((curr_y3->next))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_y3, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(srtl_reach(curr_y3), @_vcc_oset_union(srtl_reach(*((curr_y3->next))), @_vcc_oset_singleton(curr_y3)))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_y3, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(sll_keys(curr_x2), @_vcc_intset_union(sll_keys(*((curr_x2->next))), @_vcc_intset_singleton(*((curr_x2->key)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(sll_list_len_next(curr_x2), unchecked+(sll_list_len_next(*((curr_x2->next))), 1))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x2), @_vcc_ptr_neq_null(*((curr_x2->next)))), ==(rsrtl(curr_x2), &&(&&(rsrtl(*((curr_x2->next))), unchecked!(@_vcc_oset_in(curr_x2, rsrtl_reach(*((curr_x2->next)))))), >=(*((curr_x2->key)), sll_max_key(*((curr_x2->next))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_x2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(rsrtl_reach(curr_x2), @_vcc_oset_union(rsrtl_reach(*((curr_x2->next))), @_vcc_oset_singleton(curr_x2)))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_x2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(sll(curr_x2), &&(sll(*((curr_x2->next))), unchecked!(@_vcc_oset_in(curr_x2, sll_reach(*((curr_x2->next)))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_x2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(sll_reach(curr_x2), @_vcc_oset_union(sll_reach(*((curr_x2->next))), @_vcc_oset_singleton(curr_x2)))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_x2, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x2), @_vcc_ptr_neq_null(*((curr_x2->next)))), ==(sll_max_key(curr_x2), @\int_max(*((curr_x2->key)), sll_max_key(*((curr_x2->next)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x2), @_vcc_ptr_neq_null(*((curr_x2->next)))), ==(sll_min_key(curr_x2), @\int_min(*((curr_x2->key)), sll_min_key(*((curr_x2->next)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x2), @_vcc_ptr_neq_null(*((curr_x2->next)))), ==(srtl(curr_x2), &&(&&(srtl(*((curr_x2->next))), unchecked!(@_vcc_oset_in(curr_x2, srtl_reach(*((curr_x2->next)))))), <=(*((curr_x2->key)), sll_min_key(*((curr_x2->next))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_x2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(srtl_reach(curr_x2), @_vcc_oset_union(srtl_reach(*((curr_x2->next))), @_vcc_oset_singleton(curr_x2)))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_x2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_keys(tmp), @_vcc_intset_union(sll_keys(*((tmp->next))), @_vcc_intset_singleton(*((tmp->key)))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_list_len_next(tmp), unchecked+(sll_list_len_next(*((tmp->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(rsrtl(tmp), &&(&&(rsrtl(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, rsrtl_reach(*((tmp->next)))))), >=(*((tmp->key)), sll_max_key(*((tmp->next))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(rsrtl_reach(tmp), @_vcc_oset_union(rsrtl_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll(tmp), &&(sll(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, sll_reach(*((tmp->next)))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_reach(tmp), @_vcc_oset_union(sll_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(sll_max_key(tmp), @\int_max(*((tmp->key)), sll_max_key(*((tmp->next)))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#tmp, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(sll_min_key(tmp), @\int_min(*((tmp->key)), sll_min_key(*((tmp->next)))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#tmp, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(srtl(tmp), &&(&&(srtl(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, srtl_reach(*((tmp->next)))))), <=(*((tmp->key)), sll_min_key(*((tmp->next))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(srtl_reach(tmp), @_vcc_oset_union(srtl_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_keys(curr_x), @_vcc_intset_union(sll_keys(*((curr_x->next))), @_vcc_intset_singleton(*((curr_x->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_list_len_next(curr_x), unchecked+(sll_list_len_next(*((curr_x->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(rsrtl(curr_x), &&(&&(rsrtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, rsrtl_reach(*((curr_x->next)))))), >=(*((curr_x->key)), sll_max_key(*((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(rsrtl_reach(curr_x), @_vcc_oset_union(rsrtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll(curr_x), &&(sll(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, sll_reach(*((curr_x->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_reach(curr_x), @_vcc_oset_union(sll_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_max_key(curr_x), @\int_max(*((curr_x->key)), sll_max_key(*((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_min_key(curr_x), @\int_min(*((curr_x->key)), sll_min_key(*((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(srtl(curr_x), &&(&&(srtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, srtl_reach(*((curr_x->next)))))), <=(*((curr_x->key)), sll_min_key(*((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(srtl_reach(curr_x), @_vcc_oset_union(srtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_keys(curr_y), @_vcc_intset_union(sll_keys(*((curr_y->next))), @_vcc_intset_singleton(*((curr_y->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_list_len_next(curr_y), unchecked+(sll_list_len_next(*((curr_y->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(rsrtl(curr_y), &&(&&(rsrtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, rsrtl_reach(*((curr_y->next)))))), >=(*((curr_y->key)), sll_max_key(*((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(rsrtl_reach(curr_y), @_vcc_oset_union(rsrtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll(curr_y), &&(sll(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, sll_reach(*((curr_y->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_reach(curr_y), @_vcc_oset_union(sll_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_max_key(curr_y), @\int_max(*((curr_y->key)), sll_max_key(*((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_min_key(curr_y), @\int_min(*((curr_y->key)), sll_min_key(*((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(srtl(curr_y), &&(&&(srtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, srtl_reach(*((curr_y->next)))))), <=(*((curr_y->key)), sll_min_key(*((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(srtl_reach(curr_y), @_vcc_oset_union(srtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_keys(z), @_vcc_intset_union(sll_keys(*((z->next))), @_vcc_intset_singleton(*((z->key)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_list_len_next(z), unchecked+(sll_list_len_next(*((z->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(rsrtl(z), &&(&&(rsrtl(*((z->next))), unchecked!(@_vcc_oset_in(z, rsrtl_reach(*((z->next)))))), >=(*((z->key)), sll_max_key(*((z->next))))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(rsrtl_reach(z), @_vcc_oset_union(rsrtl_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll(z), &&(sll(*((z->next))), unchecked!(@_vcc_oset_in(z, sll_reach(*((z->next)))))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_reach(z), @_vcc_oset_union(sll_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_max_key(z), @\int_max(*((z->key)), sll_max_key(*((z->next)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_min_key(z), @\int_min(*((z->key)), sll_min_key(*((z->next)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(srtl(z), &&(&&(srtl(*((z->next))), unchecked!(@_vcc_oset_in(z, srtl_reach(*((z->next)))))), <=(*((z->key)), sll_min_key(*((z->next))))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(srtl_reach(z), @_vcc_oset_union(srtl_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_keys(y), @_vcc_intset_union(sll_keys(*((y->next))), @_vcc_intset_singleton(*((y->key)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_list_len_next(y), unchecked+(sll_list_len_next(*((y->next))), 1))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(rsrtl(y), &&(&&(rsrtl(*((y->next))), unchecked!(@_vcc_oset_in(y, rsrtl_reach(*((y->next)))))), >=(*((y->key)), sll_max_key(*((y->next))))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(rsrtl_reach(y), @_vcc_oset_union(rsrtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll(y), &&(sll(*((y->next))), unchecked!(@_vcc_oset_in(y, sll_reach(*((y->next)))))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_reach(y), @_vcc_oset_union(sll_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_max_key(y), @\int_max(*((y->key)), sll_max_key(*((y->next)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_min_key(y), @\int_min(*((y->key)), sll_min_key(*((y->next)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(srtl(y), &&(&&(srtl(*((y->next))), unchecked!(@_vcc_oset_in(y, srtl_reach(*((y->next)))))), <=(*((y->key)), sll_min_key(*((y->next))))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(srtl_reach(y), @_vcc_oset_union(srtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_keys(x), @_vcc_intset_union(sll_keys(*((x->next))), @_vcc_intset_singleton(*((x->key)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_list_len_next(x), unchecked+(sll_list_len_next(*((x->next))), 1))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(rsrtl(x), &&(&&(rsrtl(*((x->next))), unchecked!(@_vcc_oset_in(x, rsrtl_reach(*((x->next)))))), >=(*((x->key)), sll_max_key(*((x->next))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(rsrtl_reach(x), @_vcc_oset_union(rsrtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll(x), &&(sll(*((x->next))), unchecked!(@_vcc_oset_in(x, sll_reach(*((x->next)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_reach(x), @_vcc_oset_union(sll_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_max_key(x), @\int_max(*((x->key)), sll_max_key(*((x->next)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_min_key(x), @\int_min(*((x->key)), sll_min_key(*((x->next)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(srtl(x), &&(&&(srtl(*((x->next))), unchecked!(@_vcc_oset_in(x, srtl_reach(*((x->next)))))), <=(*((x->key)), sll_min_key(*((x->next))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(srtl_reach(x), @_vcc_oset_union(srtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_keys(last_z), @_vcc_intset_union(sll_keys(*((last_z->next))), @_vcc_intset_singleton(*((last_z->key)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#last_z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(rsrtl(last_z), &&(&&(rsrtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, rsrtl_reach(*((last_z->next)))))), >=(*((last_z->key)), sll_max_key(*((last_z->next))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_max_key(last_z), @\int_max(*((last_z->key)), sll_max_key(*((last_z->next)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_min_key(last_z), @\int_min(*((last_z->key)), sll_min_key(*((last_z->next)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(srtl(last_z), &&(&&(srtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, srtl_reach(*((last_z->next)))))), <=(*((last_z->key)), sll_min_key(*((last_z->next))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg(y, curr_y), &&(sll_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, sll_lseg_reach(*((y->next)), curr_y)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_reach(y, curr_y), @_vcc_oset_union(sll_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_keys(y, curr_y), @_vcc_intset_union(sll_lseg_keys(*((y->next)), curr_y), @_vcc_intset_singleton(*((y->key)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_len_next(y, curr_y), unchecked+(sll_lseg_len_next(*((y->next)), curr_y), 1))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_max_key(y, curr_y), @\int_max(*((y->key)), sll_lseg_max_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_min_key(y, curr_y), @\int_min(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(srtl_lseg(y, curr_y), &&(&&(srtl_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, srtl_lseg_reach(*((y->next)), curr_y)))), <=(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(srtl_lseg_reach(y, curr_y), @_vcc_oset_union(srtl_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg(x, curr_x), &&(sll_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, sll_lseg_reach(*((x->next)), curr_x)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_reach(x, curr_x), @_vcc_oset_union(sll_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_keys(x, curr_x), @_vcc_intset_union(sll_lseg_keys(*((x->next)), curr_x), @_vcc_intset_singleton(*((x->key)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_len_next(x, curr_x), unchecked+(sll_lseg_len_next(*((x->next)), curr_x), 1))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_max_key(x, curr_x), @\int_max(*((x->key)), sll_lseg_max_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_min_key(x, curr_x), @\int_min(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(srtl_lseg(x, curr_x), &&(&&(srtl_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, srtl_lseg_reach(*((x->next)), curr_x)))), <=(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(srtl_lseg_reach(x, curr_x), @_vcc_oset_union(srtl_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), ==(sll_lseg(z, tmp), &&(sll_lseg(*((z->next)), tmp), unchecked!(@_vcc_oset_in(z, sll_lseg_reach(*((z->next)), tmp)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), ==(sll_lseg_reach(z, tmp), @_vcc_oset_union(sll_lseg_reach(*((z->next)), tmp), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), ==(sll_lseg_keys(z, tmp), @_vcc_intset_union(sll_lseg_keys(*((z->next)), tmp), @_vcc_intset_singleton(*((z->key)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), ==(sll_lseg_len_next(z, tmp), unchecked+(sll_lseg_len_next(*((z->next)), tmp), 1))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), @_vcc_ptr_neq_pure(*((z->next)), tmp)), ==(sll_lseg_max_key(z, tmp), @\int_max(*((z->key)), sll_lseg_max_key(*((z->next)), tmp)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), @_vcc_ptr_neq_pure(*((z->next)), tmp)), ==(sll_lseg_min_key(z, tmp), @\int_min(*((z->key)), sll_lseg_min_key(*((z->next)), tmp)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), @_vcc_ptr_neq_pure(*((z->next)), tmp)), ==(srtl_lseg(z, tmp), &&(&&(srtl_lseg(*((z->next)), tmp), unchecked!(@_vcc_oset_in(z, srtl_lseg_reach(*((z->next)), tmp)))), <=(*((z->key)), sll_lseg_min_key(*((z->next)), tmp))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), ==(srtl_lseg_reach(z, tmp), @_vcc_oset_union(srtl_lseg_reach(*((z->next)), tmp), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg(x, curr_x), &&(sll_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, sll_lseg_reach(*((x->next)), curr_x)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_reach(x, curr_x), @_vcc_oset_union(sll_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_keys(x, curr_x), @_vcc_intset_union(sll_lseg_keys(*((x->next)), curr_x), @_vcc_intset_singleton(*((x->key)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_len_next(x, curr_x), unchecked+(sll_lseg_len_next(*((x->next)), curr_x), 1))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_max_key(x, curr_x), @\int_max(*((x->key)), sll_lseg_max_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_min_key(x, curr_x), @\int_min(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(srtl_lseg(x, curr_x), &&(&&(srtl_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, srtl_lseg_reach(*((x->next)), curr_x)))), <=(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(srtl_lseg_reach(x, curr_x), @_vcc_oset_union(srtl_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg(y, curr_y), &&(sll_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, sll_lseg_reach(*((y->next)), curr_y)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_reach(y, curr_y), @_vcc_oset_union(sll_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_keys(y, curr_y), @_vcc_intset_union(sll_lseg_keys(*((y->next)), curr_y), @_vcc_intset_singleton(*((y->key)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_len_next(y, curr_y), unchecked+(sll_lseg_len_next(*((y->next)), curr_y), 1))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_max_key(y, curr_y), @\int_max(*((y->key)), sll_lseg_max_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_min_key(y, curr_y), @\int_min(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(srtl_lseg(y, curr_y), &&(&&(srtl_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, srtl_lseg_reach(*((y->next)), curr_y)))), <=(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(srtl_lseg_reach(y, curr_y), @_vcc_oset_union(srtl_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==(*((last_z->key)), +(*((curr_x->key)), *((curr_y->key)))); 
            assume $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) == $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) + $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node));
            // _math \state _dryad_S12; 
            // _dryad_S12 := @_vcc_current_state(@state); 
            SL#_dryad_S12 := $current_state($s);
            // _math \state stmtexpr9#17; 
            // stmtexpr9#17 := _dryad_S12; 
            stmtexpr9#17 := SL#_dryad_S12;
            // assert @prim_writes_check((tmp->next)); 
            assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#tmp, ^s_node), s_node.next));
            // *(tmp->next) := last_z; 
            call $write_int(s_node.next, $phys_ptr_cast(L#tmp, ^s_node), $ptr_to_int($phys_ptr_cast(L#last_z, ^s_node)));
            assume $full_stop_ext(#tok$3^79.5, $s);
            // _math \state _dryad_S13; 
            // _dryad_S13 := @_vcc_current_state(@state); 
            SL#_dryad_S13 := $current_state($s);
            // _math \state stmtexpr10#18; 
            // stmtexpr10#18 := _dryad_S13; 
            stmtexpr10#18 := SL#_dryad_S13;
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_y3)))), ==(old(_dryad_S12, sll_keys(curr_y3)), old(_dryad_S13, sll_keys(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_keys(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_keys(SL#_dryad_S13, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_y3)))), ==(old(_dryad_S12, sll_list_len_next(curr_y3)), old(_dryad_S13, sll_list_len_next(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_list_len_next(SL#_dryad_S13, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, rsrtl_reach(curr_y3)))), ==(old(_dryad_S12, rsrtl(curr_y3)), old(_dryad_S13, rsrtl(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#rsrtl(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#rsrtl(SL#_dryad_S13, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, rsrtl_reach(curr_y3)))), ==(old(_dryad_S12, rsrtl_reach(curr_y3)), old(_dryad_S13, rsrtl_reach(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#rsrtl_reach(SL#_dryad_S13, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_y3)))), ==(old(_dryad_S12, sll(curr_y3)), old(_dryad_S13, sll(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll(SL#_dryad_S13, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_y3)))), ==(old(_dryad_S12, sll_reach(curr_y3)), old(_dryad_S13, sll_reach(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_reach(SL#_dryad_S13, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_y3)))), ==(old(_dryad_S12, sll_max_key(curr_y3)), old(_dryad_S13, sll_max_key(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_max_key(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_max_key(SL#_dryad_S13, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_y3)))), ==(old(_dryad_S12, sll_min_key(curr_y3)), old(_dryad_S13, sll_min_key(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_min_key(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_min_key(SL#_dryad_S13, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_reach(curr_y3)))), ==(old(_dryad_S12, srtl(curr_y3)), old(_dryad_S13, srtl(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#srtl(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#srtl(SL#_dryad_S13, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_reach(curr_y3)))), ==(old(_dryad_S12, srtl_reach(curr_y3)), old(_dryad_S13, srtl_reach(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#srtl_reach(SL#_dryad_S13, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_x2)))), ==(old(_dryad_S12, sll_keys(curr_x2)), old(_dryad_S13, sll_keys(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_keys(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_keys(SL#_dryad_S13, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_x2)))), ==(old(_dryad_S12, sll_list_len_next(curr_x2)), old(_dryad_S13, sll_list_len_next(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_list_len_next(SL#_dryad_S13, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, rsrtl_reach(curr_x2)))), ==(old(_dryad_S12, rsrtl(curr_x2)), old(_dryad_S13, rsrtl(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#rsrtl(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#rsrtl(SL#_dryad_S13, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, rsrtl_reach(curr_x2)))), ==(old(_dryad_S12, rsrtl_reach(curr_x2)), old(_dryad_S13, rsrtl_reach(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#rsrtl_reach(SL#_dryad_S13, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_x2)))), ==(old(_dryad_S12, sll(curr_x2)), old(_dryad_S13, sll(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll(SL#_dryad_S13, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_x2)))), ==(old(_dryad_S12, sll_reach(curr_x2)), old(_dryad_S13, sll_reach(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_reach(SL#_dryad_S13, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_x2)))), ==(old(_dryad_S12, sll_max_key(curr_x2)), old(_dryad_S13, sll_max_key(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_max_key(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_max_key(SL#_dryad_S13, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_x2)))), ==(old(_dryad_S12, sll_min_key(curr_x2)), old(_dryad_S13, sll_min_key(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_min_key(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_min_key(SL#_dryad_S13, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_reach(curr_x2)))), ==(old(_dryad_S12, srtl(curr_x2)), old(_dryad_S13, srtl(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#srtl(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#srtl(SL#_dryad_S13, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_reach(curr_x2)))), ==(old(_dryad_S12, srtl_reach(curr_x2)), old(_dryad_S13, srtl_reach(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#srtl_reach(SL#_dryad_S13, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_x)))), ==(old(_dryad_S12, sll_keys(curr_x)), old(_dryad_S13, sll_keys(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_keys(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_keys(SL#_dryad_S13, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_x)))), ==(old(_dryad_S12, sll_list_len_next(curr_x)), old(_dryad_S13, sll_list_len_next(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S13, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, rsrtl_reach(curr_x)))), ==(old(_dryad_S12, rsrtl(curr_x)), old(_dryad_S13, rsrtl(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#rsrtl(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node)) == F#rsrtl(SL#_dryad_S13, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, rsrtl_reach(curr_x)))), ==(old(_dryad_S12, rsrtl_reach(curr_x)), old(_dryad_S13, rsrtl_reach(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S13, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_x)))), ==(old(_dryad_S12, sll(curr_x)), old(_dryad_S13, sll(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll(SL#_dryad_S13, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_x)))), ==(old(_dryad_S12, sll_reach(curr_x)), old(_dryad_S13, sll_reach(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_reach(SL#_dryad_S13, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_x)))), ==(old(_dryad_S12, sll_max_key(curr_x)), old(_dryad_S13, sll_max_key(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_max_key(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_max_key(SL#_dryad_S13, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_x)))), ==(old(_dryad_S12, sll_min_key(curr_x)), old(_dryad_S13, sll_min_key(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_min_key(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_min_key(SL#_dryad_S13, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_reach(curr_x)))), ==(old(_dryad_S12, srtl(curr_x)), old(_dryad_S13, srtl(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl(SL#_dryad_S13, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_reach(curr_x)))), ==(old(_dryad_S12, srtl_reach(curr_x)), old(_dryad_S13, srtl_reach(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_reach(SL#_dryad_S13, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_y)))), ==(old(_dryad_S12, sll_keys(curr_y)), old(_dryad_S13, sll_keys(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_keys(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_keys(SL#_dryad_S13, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_y)))), ==(old(_dryad_S12, sll_list_len_next(curr_y)), old(_dryad_S13, sll_list_len_next(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S13, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, rsrtl_reach(curr_y)))), ==(old(_dryad_S12, rsrtl(curr_y)), old(_dryad_S13, rsrtl(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#rsrtl(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node)) == F#rsrtl(SL#_dryad_S13, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, rsrtl_reach(curr_y)))), ==(old(_dryad_S12, rsrtl_reach(curr_y)), old(_dryad_S13, rsrtl_reach(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S13, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_y)))), ==(old(_dryad_S12, sll(curr_y)), old(_dryad_S13, sll(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll(SL#_dryad_S13, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_y)))), ==(old(_dryad_S12, sll_reach(curr_y)), old(_dryad_S13, sll_reach(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_reach(SL#_dryad_S13, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_y)))), ==(old(_dryad_S12, sll_max_key(curr_y)), old(_dryad_S13, sll_max_key(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_max_key(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_max_key(SL#_dryad_S13, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_y)))), ==(old(_dryad_S12, sll_min_key(curr_y)), old(_dryad_S13, sll_min_key(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_min_key(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_min_key(SL#_dryad_S13, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_reach(curr_y)))), ==(old(_dryad_S12, srtl(curr_y)), old(_dryad_S13, srtl(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl(SL#_dryad_S13, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_reach(curr_y)))), ==(old(_dryad_S12, srtl_reach(curr_y)), old(_dryad_S13, srtl_reach(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_reach(SL#_dryad_S13, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(z)))), ==(old(_dryad_S12, sll_keys(z)), old(_dryad_S13, sll_keys(z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_keys(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node)) == F#sll_keys(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(z)))), ==(old(_dryad_S12, sll_list_len_next(z)), old(_dryad_S13, sll_list_len_next(z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node)) == F#sll_list_len_next(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, rsrtl_reach(z)))), ==(old(_dryad_S12, rsrtl(z)), old(_dryad_S13, rsrtl(z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node))) ==> F#rsrtl(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node)) == F#rsrtl(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, rsrtl_reach(z)))), ==(old(_dryad_S12, rsrtl_reach(z)), old(_dryad_S13, rsrtl_reach(z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node)) == F#rsrtl_reach(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(z)))), ==(old(_dryad_S12, sll(z)), old(_dryad_S13, sll(z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node)) == F#sll(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(z)))), ==(old(_dryad_S12, sll_reach(z)), old(_dryad_S13, sll_reach(z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node)) == F#sll_reach(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(z)))), ==(old(_dryad_S12, sll_max_key(z)), old(_dryad_S13, sll_max_key(z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_max_key(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node)) == F#sll_max_key(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(z)))), ==(old(_dryad_S12, sll_min_key(z)), old(_dryad_S13, sll_min_key(z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_min_key(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node)) == F#sll_min_key(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_reach(z)))), ==(old(_dryad_S12, srtl(z)), old(_dryad_S13, srtl(z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node))) ==> F#srtl(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node)) == F#srtl(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_reach(z)))), ==(old(_dryad_S12, srtl_reach(z)), old(_dryad_S13, srtl_reach(z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node))) ==> F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node)) == F#srtl_reach(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(last_z)))), ==(old(_dryad_S12, sll_keys(last_z)), old(_dryad_S13, sll_keys(last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_keys(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_keys(SL#_dryad_S13, $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(last_z)))), ==(old(_dryad_S12, sll_list_len_next(last_z)), old(_dryad_S13, sll_list_len_next(last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_list_len_next(SL#_dryad_S13, $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, rsrtl_reach(last_z)))), ==(old(_dryad_S12, rsrtl(last_z)), old(_dryad_S13, rsrtl(last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#rsrtl(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node)) == F#rsrtl(SL#_dryad_S13, $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, rsrtl_reach(last_z)))), ==(old(_dryad_S12, rsrtl_reach(last_z)), old(_dryad_S13, rsrtl_reach(last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node)) == F#rsrtl_reach(SL#_dryad_S13, $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(last_z)))), ==(old(_dryad_S12, sll(last_z)), old(_dryad_S13, sll(last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll(SL#_dryad_S13, $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(last_z)))), ==(old(_dryad_S12, sll_reach(last_z)), old(_dryad_S13, sll_reach(last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_reach(SL#_dryad_S13, $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(last_z)))), ==(old(_dryad_S12, sll_max_key(last_z)), old(_dryad_S13, sll_max_key(last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_max_key(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_max_key(SL#_dryad_S13, $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(last_z)))), ==(old(_dryad_S12, sll_min_key(last_z)), old(_dryad_S13, sll_min_key(last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_min_key(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_min_key(SL#_dryad_S13, $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_reach(last_z)))), ==(old(_dryad_S12, srtl(last_z)), old(_dryad_S13, srtl(last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#srtl(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl(SL#_dryad_S13, $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_reach(last_z)))), ==(old(_dryad_S12, srtl_reach(last_z)), old(_dryad_S13, srtl_reach(last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl_reach(SL#_dryad_S13, $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(y)))), ==(old(_dryad_S12, sll_keys(y)), old(_dryad_S13, sll_keys(y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_keys(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node)) == F#sll_keys(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(y)))), ==(old(_dryad_S12, sll_list_len_next(y)), old(_dryad_S13, sll_list_len_next(y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, rsrtl_reach(y)))), ==(old(_dryad_S12, rsrtl(y)), old(_dryad_S13, rsrtl(y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node))) ==> F#rsrtl(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node)) == F#rsrtl(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, rsrtl_reach(y)))), ==(old(_dryad_S12, rsrtl_reach(y)), old(_dryad_S13, rsrtl_reach(y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(y)))), ==(old(_dryad_S12, sll(y)), old(_dryad_S13, sll(y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node)) == F#sll(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(y)))), ==(old(_dryad_S12, sll_reach(y)), old(_dryad_S13, sll_reach(y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node)) == F#sll_reach(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(y)))), ==(old(_dryad_S12, sll_max_key(y)), old(_dryad_S13, sll_max_key(y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_max_key(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node)) == F#sll_max_key(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(y)))), ==(old(_dryad_S12, sll_min_key(y)), old(_dryad_S13, sll_min_key(y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_min_key(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node)) == F#sll_min_key(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_reach(y)))), ==(old(_dryad_S12, srtl(y)), old(_dryad_S13, srtl(y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node))) ==> F#srtl(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node)) == F#srtl(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_reach(y)))), ==(old(_dryad_S12, srtl_reach(y)), old(_dryad_S13, srtl_reach(y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node))) ==> F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node)) == F#srtl_reach(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(x)))), ==(old(_dryad_S12, sll_keys(x)), old(_dryad_S13, sll_keys(x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_keys(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node)) == F#sll_keys(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(x)))), ==(old(_dryad_S12, sll_list_len_next(x)), old(_dryad_S13, sll_list_len_next(x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, rsrtl_reach(x)))), ==(old(_dryad_S12, rsrtl(x)), old(_dryad_S13, rsrtl(x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node))) ==> F#rsrtl(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node)) == F#rsrtl(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, rsrtl_reach(x)))), ==(old(_dryad_S12, rsrtl_reach(x)), old(_dryad_S13, rsrtl_reach(x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(x)))), ==(old(_dryad_S12, sll(x)), old(_dryad_S13, sll(x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node)) == F#sll(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(x)))), ==(old(_dryad_S12, sll_reach(x)), old(_dryad_S13, sll_reach(x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node)) == F#sll_reach(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(x)))), ==(old(_dryad_S12, sll_max_key(x)), old(_dryad_S13, sll_max_key(x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_max_key(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node)) == F#sll_max_key(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(x)))), ==(old(_dryad_S12, sll_min_key(x)), old(_dryad_S13, sll_min_key(x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_min_key(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node)) == F#sll_min_key(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_reach(x)))), ==(old(_dryad_S12, srtl(x)), old(_dryad_S13, srtl(x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node))) ==> F#srtl(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node)) == F#srtl(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_reach(x)))), ==(old(_dryad_S12, srtl_reach(x)), old(_dryad_S13, srtl_reach(x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node))) ==> F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node)) == F#srtl_reach(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S12, sll_lseg(y, curr_y)), old(_dryad_S13, sll_lseg(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S12, sll_lseg_reach(y, curr_y)), old(_dryad_S13, sll_lseg_reach(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S12, sll_lseg_keys(y, curr_y)), old(_dryad_S13, sll_lseg_keys(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S12, sll_lseg_len_next(y, curr_y)), old(_dryad_S13, sll_lseg_len_next(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S12, sll_lseg_max_key(y, curr_y)), old(_dryad_S13, sll_lseg_max_key(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S12, sll_lseg_min_key(y, curr_y)), old(_dryad_S13, sll_lseg_min_key(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_lseg_reach(y, curr_y)))), ==(old(_dryad_S12, srtl_lseg(y, curr_y)), old(_dryad_S13, srtl_lseg(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_lseg(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_lseg_reach(y, curr_y)))), ==(old(_dryad_S12, srtl_lseg_reach(y, curr_y)), old(_dryad_S13, srtl_lseg_reach(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S12, sll_lseg(z, last_z)), old(_dryad_S13, sll_lseg(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S12, sll_lseg_reach(z, last_z)), old(_dryad_S13, sll_lseg_reach(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S12, sll_lseg_keys(z, last_z)), old(_dryad_S13, sll_lseg_keys(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S12, sll_lseg_len_next(z, last_z)), old(_dryad_S13, sll_lseg_len_next(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S12, sll_lseg_max_key(z, last_z)), old(_dryad_S13, sll_lseg_max_key(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S12, sll_lseg_min_key(z, last_z)), old(_dryad_S13, sll_lseg_min_key(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_lseg_reach(z, last_z)))), ==(old(_dryad_S12, srtl_lseg(z, last_z)), old(_dryad_S13, srtl_lseg(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl_lseg(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_lseg_reach(z, last_z)))), ==(old(_dryad_S12, srtl_lseg_reach(z, last_z)), old(_dryad_S13, srtl_lseg_reach(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S12, sll_lseg(x, curr_x)), old(_dryad_S13, sll_lseg(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S12, sll_lseg_reach(x, curr_x)), old(_dryad_S13, sll_lseg_reach(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S12, sll_lseg_keys(x, curr_x)), old(_dryad_S13, sll_lseg_keys(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S12, sll_lseg_len_next(x, curr_x)), old(_dryad_S13, sll_lseg_len_next(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S12, sll_lseg_max_key(x, curr_x)), old(_dryad_S13, sll_lseg_max_key(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S12, sll_lseg_min_key(x, curr_x)), old(_dryad_S13, sll_lseg_min_key(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_lseg_reach(x, curr_x)))), ==(old(_dryad_S12, srtl_lseg(x, curr_x)), old(_dryad_S13, srtl_lseg(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_lseg(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_lseg_reach(x, curr_x)))), ==(old(_dryad_S12, srtl_lseg_reach(x, curr_x)), old(_dryad_S13, srtl_lseg_reach(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S12, sll_lseg(z, tmp)), old(_dryad_S13, sll_lseg(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S12, sll_lseg_reach(z, tmp)), old(_dryad_S13, sll_lseg_reach(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S12, sll_lseg_keys(z, tmp)), old(_dryad_S13, sll_lseg_keys(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S12, sll_lseg_len_next(z, tmp)), old(_dryad_S13, sll_lseg_len_next(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S12, sll_lseg_max_key(z, tmp)), old(_dryad_S13, sll_lseg_max_key(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S12, sll_lseg_min_key(z, tmp)), old(_dryad_S13, sll_lseg_min_key(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_lseg_reach(z, tmp)))), ==(old(_dryad_S12, srtl_lseg(z, tmp)), old(_dryad_S13, srtl_lseg(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl_lseg(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_lseg_reach(z, tmp)))), ==(old(_dryad_S12, srtl_lseg_reach(z, tmp)), old(_dryad_S13, srtl_lseg_reach(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S12, sll_lseg(x, curr_x)), old(_dryad_S13, sll_lseg(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S12, sll_lseg_reach(x, curr_x)), old(_dryad_S13, sll_lseg_reach(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S12, sll_lseg_keys(x, curr_x)), old(_dryad_S13, sll_lseg_keys(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S12, sll_lseg_len_next(x, curr_x)), old(_dryad_S13, sll_lseg_len_next(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S12, sll_lseg_max_key(x, curr_x)), old(_dryad_S13, sll_lseg_max_key(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S12, sll_lseg_min_key(x, curr_x)), old(_dryad_S13, sll_lseg_min_key(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_lseg_reach(x, curr_x)))), ==(old(_dryad_S12, srtl_lseg(x, curr_x)), old(_dryad_S13, srtl_lseg(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_lseg(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_lseg_reach(x, curr_x)))), ==(old(_dryad_S12, srtl_lseg_reach(x, curr_x)), old(_dryad_S13, srtl_lseg_reach(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S12, sll_lseg(y, curr_y)), old(_dryad_S13, sll_lseg(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S12, sll_lseg_reach(y, curr_y)), old(_dryad_S13, sll_lseg_reach(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S12, sll_lseg_keys(y, curr_y)), old(_dryad_S13, sll_lseg_keys(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S12, sll_lseg_len_next(y, curr_y)), old(_dryad_S13, sll_lseg_len_next(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S12, sll_lseg_max_key(y, curr_y)), old(_dryad_S13, sll_lseg_max_key(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S12, sll_lseg_min_key(y, curr_y)), old(_dryad_S13, sll_lseg_min_key(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_lseg_reach(y, curr_y)))), ==(old(_dryad_S12, srtl_lseg(y, curr_y)), old(_dryad_S13, srtl_lseg(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_lseg(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_lseg_reach(y, curr_y)))), ==(old(_dryad_S12, srtl_lseg_reach(y, curr_y)), old(_dryad_S13, srtl_lseg_reach(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(tmp, curr_y3)), ==(*((curr_y3->key)), old(_dryad_S12, *((curr_y3->key))))); 
            assume !($phys_ptr_cast(L#tmp, ^s_node) == $phys_ptr_cast(SL#curr_y3, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $rd_inv(SL#_dryad_S12, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(tmp, curr_y3)), @_vcc_ptr_eq_pure(*((curr_y3->next)), old(_dryad_S12, *((curr_y3->next))))); 
            assume !($phys_ptr_cast(L#tmp, ^s_node) == $phys_ptr_cast(SL#curr_y3, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S12, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(tmp, curr_x2)), ==(*((curr_x2->key)), old(_dryad_S12, *((curr_x2->key))))); 
            assume !($phys_ptr_cast(L#tmp, ^s_node) == $phys_ptr_cast(SL#curr_x2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $rd_inv(SL#_dryad_S12, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(tmp, curr_x2)), @_vcc_ptr_eq_pure(*((curr_x2->next)), old(_dryad_S12, *((curr_x2->next))))); 
            assume !($phys_ptr_cast(L#tmp, ^s_node) == $phys_ptr_cast(SL#curr_x2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S12, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(tmp, curr_x)), ==(*((curr_x->key)), old(_dryad_S12, *((curr_x->key))))); 
            assume !($phys_ptr_cast(L#tmp, ^s_node) == $phys_ptr_cast(L#curr_x, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) == $rd_inv(SL#_dryad_S12, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(tmp, curr_x)), @_vcc_ptr_eq_pure(*((curr_x->next)), old(_dryad_S12, *((curr_x->next))))); 
            assume !($phys_ptr_cast(L#tmp, ^s_node) == $phys_ptr_cast(L#curr_x, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S12, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(tmp, curr_y)), ==(*((curr_y->key)), old(_dryad_S12, *((curr_y->key))))); 
            assume !($phys_ptr_cast(L#tmp, ^s_node) == $phys_ptr_cast(L#curr_y, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) == $rd_inv(SL#_dryad_S12, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(tmp, curr_y)), @_vcc_ptr_eq_pure(*((curr_y->next)), old(_dryad_S12, *((curr_y->next))))); 
            assume !($phys_ptr_cast(L#tmp, ^s_node) == $phys_ptr_cast(L#curr_y, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S12, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(tmp, z)), ==(*((z->key)), old(_dryad_S12, *((z->key))))); 
            assume !($phys_ptr_cast(L#tmp, ^s_node) == $phys_ptr_cast(L#z, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) == $rd_inv(SL#_dryad_S12, s_node.key, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(tmp, z)), @_vcc_ptr_eq_pure(*((z->next)), old(_dryad_S12, *((z->next))))); 
            assume !($phys_ptr_cast(L#tmp, ^s_node) == $phys_ptr_cast(L#z, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S12, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(tmp, last_z)), ==(*((last_z->key)), old(_dryad_S12, *((last_z->key))))); 
            assume !($phys_ptr_cast(L#tmp, ^s_node) == $phys_ptr_cast(L#last_z, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) == $rd_inv(SL#_dryad_S12, s_node.key, $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(tmp, last_z)), @_vcc_ptr_eq_pure(*((last_z->next)), old(_dryad_S12, *((last_z->next))))); 
            assume !($phys_ptr_cast(L#tmp, ^s_node) == $phys_ptr_cast(L#last_z, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S12, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(tmp, y)), ==(*((y->key)), old(_dryad_S12, *((y->key))))); 
            assume !($phys_ptr_cast(L#tmp, ^s_node) == $phys_ptr_cast(P#y, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) == $rd_inv(SL#_dryad_S12, s_node.key, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(tmp, y)), @_vcc_ptr_eq_pure(*((y->next)), old(_dryad_S12, *((y->next))))); 
            assume !($phys_ptr_cast(L#tmp, ^s_node) == $phys_ptr_cast(P#y, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S12, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(tmp, x)), ==(*((x->key)), old(_dryad_S12, *((x->key))))); 
            assume !($phys_ptr_cast(L#tmp, ^s_node) == $phys_ptr_cast(P#x, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) == $rd_inv(SL#_dryad_S12, s_node.key, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(tmp, x)), @_vcc_ptr_eq_pure(*((x->next)), old(_dryad_S12, *((x->next))))); 
            assume !($phys_ptr_cast(L#tmp, ^s_node) == $phys_ptr_cast(P#x, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S12, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node);
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(sll_keys(curr_y3), @_vcc_intset_union(sll_keys(*((curr_y3->next))), @_vcc_intset_singleton(*((curr_y3->key)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(sll_list_len_next(curr_y3), unchecked+(sll_list_len_next(*((curr_y3->next))), 1))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y3), @_vcc_ptr_neq_null(*((curr_y3->next)))), ==(rsrtl(curr_y3), &&(&&(rsrtl(*((curr_y3->next))), unchecked!(@_vcc_oset_in(curr_y3, rsrtl_reach(*((curr_y3->next)))))), >=(*((curr_y3->key)), sll_max_key(*((curr_y3->next))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_y3, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(rsrtl_reach(curr_y3), @_vcc_oset_union(rsrtl_reach(*((curr_y3->next))), @_vcc_oset_singleton(curr_y3)))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_y3, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(sll(curr_y3), &&(sll(*((curr_y3->next))), unchecked!(@_vcc_oset_in(curr_y3, sll_reach(*((curr_y3->next)))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_y3, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(sll_reach(curr_y3), @_vcc_oset_union(sll_reach(*((curr_y3->next))), @_vcc_oset_singleton(curr_y3)))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_y3, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y3), @_vcc_ptr_neq_null(*((curr_y3->next)))), ==(sll_max_key(curr_y3), @\int_max(*((curr_y3->key)), sll_max_key(*((curr_y3->next)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y3), @_vcc_ptr_neq_null(*((curr_y3->next)))), ==(sll_min_key(curr_y3), @\int_min(*((curr_y3->key)), sll_min_key(*((curr_y3->next)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y3), @_vcc_ptr_neq_null(*((curr_y3->next)))), ==(srtl(curr_y3), &&(&&(srtl(*((curr_y3->next))), unchecked!(@_vcc_oset_in(curr_y3, srtl_reach(*((curr_y3->next)))))), <=(*((curr_y3->key)), sll_min_key(*((curr_y3->next))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_y3, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(srtl_reach(curr_y3), @_vcc_oset_union(srtl_reach(*((curr_y3->next))), @_vcc_oset_singleton(curr_y3)))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_y3, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(sll_keys(curr_x2), @_vcc_intset_union(sll_keys(*((curr_x2->next))), @_vcc_intset_singleton(*((curr_x2->key)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(sll_list_len_next(curr_x2), unchecked+(sll_list_len_next(*((curr_x2->next))), 1))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x2), @_vcc_ptr_neq_null(*((curr_x2->next)))), ==(rsrtl(curr_x2), &&(&&(rsrtl(*((curr_x2->next))), unchecked!(@_vcc_oset_in(curr_x2, rsrtl_reach(*((curr_x2->next)))))), >=(*((curr_x2->key)), sll_max_key(*((curr_x2->next))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_x2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(rsrtl_reach(curr_x2), @_vcc_oset_union(rsrtl_reach(*((curr_x2->next))), @_vcc_oset_singleton(curr_x2)))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_x2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(sll(curr_x2), &&(sll(*((curr_x2->next))), unchecked!(@_vcc_oset_in(curr_x2, sll_reach(*((curr_x2->next)))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_x2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(sll_reach(curr_x2), @_vcc_oset_union(sll_reach(*((curr_x2->next))), @_vcc_oset_singleton(curr_x2)))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_x2, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x2), @_vcc_ptr_neq_null(*((curr_x2->next)))), ==(sll_max_key(curr_x2), @\int_max(*((curr_x2->key)), sll_max_key(*((curr_x2->next)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x2), @_vcc_ptr_neq_null(*((curr_x2->next)))), ==(sll_min_key(curr_x2), @\int_min(*((curr_x2->key)), sll_min_key(*((curr_x2->next)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x2), @_vcc_ptr_neq_null(*((curr_x2->next)))), ==(srtl(curr_x2), &&(&&(srtl(*((curr_x2->next))), unchecked!(@_vcc_oset_in(curr_x2, srtl_reach(*((curr_x2->next)))))), <=(*((curr_x2->key)), sll_min_key(*((curr_x2->next))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_x2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(srtl_reach(curr_x2), @_vcc_oset_union(srtl_reach(*((curr_x2->next))), @_vcc_oset_singleton(curr_x2)))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_x2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_keys(curr_x), @_vcc_intset_union(sll_keys(*((curr_x->next))), @_vcc_intset_singleton(*((curr_x->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_list_len_next(curr_x), unchecked+(sll_list_len_next(*((curr_x->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(rsrtl(curr_x), &&(&&(rsrtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, rsrtl_reach(*((curr_x->next)))))), >=(*((curr_x->key)), sll_max_key(*((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(rsrtl_reach(curr_x), @_vcc_oset_union(rsrtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll(curr_x), &&(sll(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, sll_reach(*((curr_x->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_reach(curr_x), @_vcc_oset_union(sll_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_max_key(curr_x), @\int_max(*((curr_x->key)), sll_max_key(*((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_min_key(curr_x), @\int_min(*((curr_x->key)), sll_min_key(*((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(srtl(curr_x), &&(&&(srtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, srtl_reach(*((curr_x->next)))))), <=(*((curr_x->key)), sll_min_key(*((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(srtl_reach(curr_x), @_vcc_oset_union(srtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_keys(curr_y), @_vcc_intset_union(sll_keys(*((curr_y->next))), @_vcc_intset_singleton(*((curr_y->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_list_len_next(curr_y), unchecked+(sll_list_len_next(*((curr_y->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(rsrtl(curr_y), &&(&&(rsrtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, rsrtl_reach(*((curr_y->next)))))), >=(*((curr_y->key)), sll_max_key(*((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(rsrtl_reach(curr_y), @_vcc_oset_union(rsrtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll(curr_y), &&(sll(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, sll_reach(*((curr_y->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_reach(curr_y), @_vcc_oset_union(sll_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_max_key(curr_y), @\int_max(*((curr_y->key)), sll_max_key(*((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_min_key(curr_y), @\int_min(*((curr_y->key)), sll_min_key(*((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(srtl(curr_y), &&(&&(srtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, srtl_reach(*((curr_y->next)))))), <=(*((curr_y->key)), sll_min_key(*((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(srtl_reach(curr_y), @_vcc_oset_union(srtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_keys(z), @_vcc_intset_union(sll_keys(*((z->next))), @_vcc_intset_singleton(*((z->key)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_list_len_next(z), unchecked+(sll_list_len_next(*((z->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(rsrtl(z), &&(&&(rsrtl(*((z->next))), unchecked!(@_vcc_oset_in(z, rsrtl_reach(*((z->next)))))), >=(*((z->key)), sll_max_key(*((z->next))))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(rsrtl_reach(z), @_vcc_oset_union(rsrtl_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll(z), &&(sll(*((z->next))), unchecked!(@_vcc_oset_in(z, sll_reach(*((z->next)))))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_reach(z), @_vcc_oset_union(sll_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_max_key(z), @\int_max(*((z->key)), sll_max_key(*((z->next)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_min_key(z), @\int_min(*((z->key)), sll_min_key(*((z->next)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(srtl(z), &&(&&(srtl(*((z->next))), unchecked!(@_vcc_oset_in(z, srtl_reach(*((z->next)))))), <=(*((z->key)), sll_min_key(*((z->next))))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(srtl_reach(z), @_vcc_oset_union(srtl_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_keys(last_z), @_vcc_intset_union(sll_keys(*((last_z->next))), @_vcc_intset_singleton(*((last_z->key)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#last_z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_list_len_next(last_z), unchecked+(sll_list_len_next(*((last_z->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#last_z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(rsrtl(last_z), &&(&&(rsrtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, rsrtl_reach(*((last_z->next)))))), >=(*((last_z->key)), sll_max_key(*((last_z->next))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(rsrtl_reach(last_z), @_vcc_oset_union(rsrtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll(last_z), &&(sll(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, sll_reach(*((last_z->next)))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_reach(last_z), @_vcc_oset_union(sll_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_max_key(last_z), @\int_max(*((last_z->key)), sll_max_key(*((last_z->next)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_min_key(last_z), @\int_min(*((last_z->key)), sll_min_key(*((last_z->next)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(srtl(last_z), &&(&&(srtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, srtl_reach(*((last_z->next)))))), <=(*((last_z->key)), sll_min_key(*((last_z->next))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(srtl_reach(last_z), @_vcc_oset_union(srtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_keys(y), @_vcc_intset_union(sll_keys(*((y->next))), @_vcc_intset_singleton(*((y->key)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_list_len_next(y), unchecked+(sll_list_len_next(*((y->next))), 1))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(rsrtl(y), &&(&&(rsrtl(*((y->next))), unchecked!(@_vcc_oset_in(y, rsrtl_reach(*((y->next)))))), >=(*((y->key)), sll_max_key(*((y->next))))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(rsrtl_reach(y), @_vcc_oset_union(rsrtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll(y), &&(sll(*((y->next))), unchecked!(@_vcc_oset_in(y, sll_reach(*((y->next)))))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_reach(y), @_vcc_oset_union(sll_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_max_key(y), @\int_max(*((y->key)), sll_max_key(*((y->next)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_min_key(y), @\int_min(*((y->key)), sll_min_key(*((y->next)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(srtl(y), &&(&&(srtl(*((y->next))), unchecked!(@_vcc_oset_in(y, srtl_reach(*((y->next)))))), <=(*((y->key)), sll_min_key(*((y->next))))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(srtl_reach(y), @_vcc_oset_union(srtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_keys(x), @_vcc_intset_union(sll_keys(*((x->next))), @_vcc_intset_singleton(*((x->key)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_list_len_next(x), unchecked+(sll_list_len_next(*((x->next))), 1))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(rsrtl(x), &&(&&(rsrtl(*((x->next))), unchecked!(@_vcc_oset_in(x, rsrtl_reach(*((x->next)))))), >=(*((x->key)), sll_max_key(*((x->next))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(rsrtl_reach(x), @_vcc_oset_union(rsrtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll(x), &&(sll(*((x->next))), unchecked!(@_vcc_oset_in(x, sll_reach(*((x->next)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_reach(x), @_vcc_oset_union(sll_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_max_key(x), @\int_max(*((x->key)), sll_max_key(*((x->next)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_min_key(x), @\int_min(*((x->key)), sll_min_key(*((x->next)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(srtl(x), &&(&&(srtl(*((x->next))), unchecked!(@_vcc_oset_in(x, srtl_reach(*((x->next)))))), <=(*((x->key)), sll_min_key(*((x->next))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(srtl_reach(x), @_vcc_oset_union(srtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_keys(tmp), @_vcc_intset_union(sll_keys(*((tmp->next))), @_vcc_intset_singleton(*((tmp->key)))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_list_len_next(tmp), unchecked+(sll_list_len_next(*((tmp->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(rsrtl(tmp), &&(&&(rsrtl(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, rsrtl_reach(*((tmp->next)))))), >=(*((tmp->key)), sll_max_key(*((tmp->next))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(rsrtl_reach(tmp), @_vcc_oset_union(rsrtl_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll(tmp), &&(sll(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, sll_reach(*((tmp->next)))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_reach(tmp), @_vcc_oset_union(sll_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(sll_max_key(tmp), @\int_max(*((tmp->key)), sll_max_key(*((tmp->next)))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#tmp, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(sll_min_key(tmp), @\int_min(*((tmp->key)), sll_min_key(*((tmp->next)))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#tmp, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(srtl(tmp), &&(&&(srtl(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, srtl_reach(*((tmp->next)))))), <=(*((tmp->key)), sll_min_key(*((tmp->next))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(srtl_reach(tmp), @_vcc_oset_union(srtl_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_keys(last_z), @_vcc_intset_union(sll_keys(*((last_z->next))), @_vcc_intset_singleton(*((last_z->key)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#last_z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_list_len_next(last_z), unchecked+(sll_list_len_next(*((last_z->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#last_z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(rsrtl(last_z), &&(&&(rsrtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, rsrtl_reach(*((last_z->next)))))), >=(*((last_z->key)), sll_max_key(*((last_z->next))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(rsrtl_reach(last_z), @_vcc_oset_union(rsrtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll(last_z), &&(sll(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, sll_reach(*((last_z->next)))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_reach(last_z), @_vcc_oset_union(sll_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_max_key(last_z), @\int_max(*((last_z->key)), sll_max_key(*((last_z->next)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_min_key(last_z), @\int_min(*((last_z->key)), sll_min_key(*((last_z->next)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(srtl(last_z), &&(&&(srtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, srtl_reach(*((last_z->next)))))), <=(*((last_z->key)), sll_min_key(*((last_z->next))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(srtl_reach(last_z), @_vcc_oset_union(srtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg(y, curr_y), &&(sll_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, sll_lseg_reach(*((y->next)), curr_y)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_reach(y, curr_y), @_vcc_oset_union(sll_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_keys(y, curr_y), @_vcc_intset_union(sll_lseg_keys(*((y->next)), curr_y), @_vcc_intset_singleton(*((y->key)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_len_next(y, curr_y), unchecked+(sll_lseg_len_next(*((y->next)), curr_y), 1))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_max_key(y, curr_y), @\int_max(*((y->key)), sll_lseg_max_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_min_key(y, curr_y), @\int_min(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(srtl_lseg(y, curr_y), &&(&&(srtl_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, srtl_lseg_reach(*((y->next)), curr_y)))), <=(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(srtl_lseg_reach(y, curr_y), @_vcc_oset_union(srtl_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), ==(sll_lseg(z, last_z), &&(sll_lseg(*((z->next)), last_z), unchecked!(@_vcc_oset_in(z, sll_lseg_reach(*((z->next)), last_z)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), ==(sll_lseg_reach(z, last_z), @_vcc_oset_union(sll_lseg_reach(*((z->next)), last_z), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), ==(sll_lseg_keys(z, last_z), @_vcc_intset_union(sll_lseg_keys(*((z->next)), last_z), @_vcc_intset_singleton(*((z->key)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), ==(sll_lseg_len_next(z, last_z), unchecked+(sll_lseg_len_next(*((z->next)), last_z), 1))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), @_vcc_ptr_neq_pure(*((z->next)), last_z)), ==(sll_lseg_max_key(z, last_z), @\int_max(*((z->key)), sll_lseg_max_key(*((z->next)), last_z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), @_vcc_ptr_neq_pure(*((z->next)), last_z)), ==(sll_lseg_min_key(z, last_z), @\int_min(*((z->key)), sll_lseg_min_key(*((z->next)), last_z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), @_vcc_ptr_neq_pure(*((z->next)), last_z)), ==(srtl_lseg(z, last_z), &&(&&(srtl_lseg(*((z->next)), last_z), unchecked!(@_vcc_oset_in(z, srtl_lseg_reach(*((z->next)), last_z)))), <=(*((z->key)), sll_lseg_min_key(*((z->next)), last_z))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), ==(srtl_lseg_reach(z, last_z), @_vcc_oset_union(srtl_lseg_reach(*((z->next)), last_z), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg(x, curr_x), &&(sll_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, sll_lseg_reach(*((x->next)), curr_x)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_reach(x, curr_x), @_vcc_oset_union(sll_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_keys(x, curr_x), @_vcc_intset_union(sll_lseg_keys(*((x->next)), curr_x), @_vcc_intset_singleton(*((x->key)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_len_next(x, curr_x), unchecked+(sll_lseg_len_next(*((x->next)), curr_x), 1))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_max_key(x, curr_x), @\int_max(*((x->key)), sll_lseg_max_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_min_key(x, curr_x), @\int_min(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(srtl_lseg(x, curr_x), &&(&&(srtl_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, srtl_lseg_reach(*((x->next)), curr_x)))), <=(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(srtl_lseg_reach(x, curr_x), @_vcc_oset_union(srtl_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg(x, curr_x), &&(sll_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, sll_lseg_reach(*((x->next)), curr_x)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_reach(x, curr_x), @_vcc_oset_union(sll_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_keys(x, curr_x), @_vcc_intset_union(sll_lseg_keys(*((x->next)), curr_x), @_vcc_intset_singleton(*((x->key)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_len_next(x, curr_x), unchecked+(sll_lseg_len_next(*((x->next)), curr_x), 1))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_max_key(x, curr_x), @\int_max(*((x->key)), sll_lseg_max_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_min_key(x, curr_x), @\int_min(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(srtl_lseg(x, curr_x), &&(&&(srtl_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, srtl_lseg_reach(*((x->next)), curr_x)))), <=(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(srtl_lseg_reach(x, curr_x), @_vcc_oset_union(srtl_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg(y, curr_y), &&(sll_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, sll_lseg_reach(*((y->next)), curr_y)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_reach(y, curr_y), @_vcc_oset_union(sll_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_keys(y, curr_y), @_vcc_intset_union(sll_lseg_keys(*((y->next)), curr_y), @_vcc_intset_singleton(*((y->key)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_len_next(y, curr_y), unchecked+(sll_lseg_len_next(*((y->next)), curr_y), 1))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_max_key(y, curr_y), @\int_max(*((y->key)), sll_lseg_max_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_min_key(y, curr_y), @\int_min(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(srtl_lseg(y, curr_y), &&(&&(srtl_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, srtl_lseg_reach(*((y->next)), curr_y)))), <=(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(srtl_lseg_reach(y, curr_y), @_vcc_oset_union(srtl_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), &&(@_vcc_mutable(@state, curr_x), @writes_check(curr_x))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> $mutable($s, $phys_ptr_cast(L#curr_x, ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), &&(@_vcc_mutable(@state, curr_y), @writes_check(curr_y))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> $mutable($s, $phys_ptr_cast(L#curr_y, ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(@_vcc_ptr_neq_null(last_z), &&(@_vcc_mutable(@state, last_z), @writes_check(last_z))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> $mutable($s, $phys_ptr_cast(L#last_z, ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(L#last_z, ^s_node));
        }
        else
        {
          anon6:
            // assert @_vcc_possibly_unreachable; 
            assert {:PossiblyUnreachable true} true;
            // goto #break_3; 
            goto #break_3;
        }

      #continue_3:
        assume true;
// INV:LOOPTAIL
    }

  anon11:
    assume $full_stop_ext(#tok$3^35.3, $s);

  #break_3:
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_keys(curr_x), @_vcc_intset_union(sll_keys(*((curr_x->next))), @_vcc_intset_singleton(*((curr_x->key)))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_list_len_next(curr_x), unchecked+(sll_list_len_next(*((curr_x->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(rsrtl(curr_x), &&(&&(rsrtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, rsrtl_reach(*((curr_x->next)))))), >=(*((curr_x->key)), sll_max_key(*((curr_x->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(rsrtl_reach(curr_x), @_vcc_oset_union(rsrtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll(curr_x), &&(sll(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, sll_reach(*((curr_x->next)))))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_reach(curr_x), @_vcc_oset_union(sll_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_max_key(curr_x), @\int_max(*((curr_x->key)), sll_max_key(*((curr_x->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_min_key(curr_x), @\int_min(*((curr_x->key)), sll_min_key(*((curr_x->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(srtl(curr_x), &&(&&(srtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, srtl_reach(*((curr_x->next)))))), <=(*((curr_x->key)), sll_min_key(*((curr_x->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(srtl_reach(curr_x), @_vcc_oset_union(srtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_keys(curr_y), @_vcc_intset_union(sll_keys(*((curr_y->next))), @_vcc_intset_singleton(*((curr_y->key)))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_list_len_next(curr_y), unchecked+(sll_list_len_next(*((curr_y->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(rsrtl(curr_y), &&(&&(rsrtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, rsrtl_reach(*((curr_y->next)))))), >=(*((curr_y->key)), sll_max_key(*((curr_y->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(rsrtl_reach(curr_y), @_vcc_oset_union(rsrtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll(curr_y), &&(sll(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, sll_reach(*((curr_y->next)))))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_reach(curr_y), @_vcc_oset_union(sll_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_max_key(curr_y), @\int_max(*((curr_y->key)), sll_max_key(*((curr_y->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_min_key(curr_y), @\int_min(*((curr_y->key)), sll_min_key(*((curr_y->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(srtl(curr_y), &&(&&(srtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, srtl_reach(*((curr_y->next)))))), <=(*((curr_y->key)), sll_min_key(*((curr_y->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(srtl_reach(curr_y), @_vcc_oset_union(srtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_keys(z), @_vcc_intset_union(sll_keys(*((z->next))), @_vcc_intset_singleton(*((z->key)))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_list_len_next(z), unchecked+(sll_list_len_next(*((z->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(rsrtl(z), &&(&&(rsrtl(*((z->next))), unchecked!(@_vcc_oset_in(z, rsrtl_reach(*((z->next)))))), >=(*((z->key)), sll_max_key(*((z->next))))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(rsrtl_reach(z), @_vcc_oset_union(rsrtl_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(sll(z), &&(sll(*((z->next))), unchecked!(@_vcc_oset_in(z, sll_reach(*((z->next)))))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_reach(z), @_vcc_oset_union(sll_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_max_key(z), @\int_max(*((z->key)), sll_max_key(*((z->next)))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_min_key(z), @\int_min(*((z->key)), sll_min_key(*((z->next)))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(srtl(z), &&(&&(srtl(*((z->next))), unchecked!(@_vcc_oset_in(z, srtl_reach(*((z->next)))))), <=(*((z->key)), sll_min_key(*((z->next))))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(srtl_reach(z), @_vcc_oset_union(srtl_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_keys(last_z), @_vcc_intset_union(sll_keys(*((last_z->next))), @_vcc_intset_singleton(*((last_z->key)))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#last_z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_list_len_next(last_z), unchecked+(sll_list_len_next(*((last_z->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#last_z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(rsrtl(last_z), &&(&&(rsrtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, rsrtl_reach(*((last_z->next)))))), >=(*((last_z->key)), sll_max_key(*((last_z->next))))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(rsrtl_reach(last_z), @_vcc_oset_union(rsrtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll(last_z), &&(sll(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, sll_reach(*((last_z->next)))))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_reach(last_z), @_vcc_oset_union(sll_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_max_key(last_z), @\int_max(*((last_z->key)), sll_max_key(*((last_z->next)))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_min_key(last_z), @\int_min(*((last_z->key)), sll_min_key(*((last_z->next)))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(srtl(last_z), &&(&&(srtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, srtl_reach(*((last_z->next)))))), <=(*((last_z->key)), sll_min_key(*((last_z->next))))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(srtl_reach(last_z), @_vcc_oset_union(srtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_keys(y), @_vcc_intset_union(sll_keys(*((y->next))), @_vcc_intset_singleton(*((y->key)))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_list_len_next(y), unchecked+(sll_list_len_next(*((y->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(rsrtl(y), &&(&&(rsrtl(*((y->next))), unchecked!(@_vcc_oset_in(y, rsrtl_reach(*((y->next)))))), >=(*((y->key)), sll_max_key(*((y->next))))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(rsrtl_reach(y), @_vcc_oset_union(rsrtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll(y), &&(sll(*((y->next))), unchecked!(@_vcc_oset_in(y, sll_reach(*((y->next)))))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_reach(y), @_vcc_oset_union(sll_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_max_key(y), @\int_max(*((y->key)), sll_max_key(*((y->next)))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_min_key(y), @\int_min(*((y->key)), sll_min_key(*((y->next)))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(srtl(y), &&(&&(srtl(*((y->next))), unchecked!(@_vcc_oset_in(y, srtl_reach(*((y->next)))))), <=(*((y->key)), sll_min_key(*((y->next))))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(srtl_reach(y), @_vcc_oset_union(srtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_keys(x), @_vcc_intset_union(sll_keys(*((x->next))), @_vcc_intset_singleton(*((x->key)))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_list_len_next(x), unchecked+(sll_list_len_next(*((x->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(rsrtl(x), &&(&&(rsrtl(*((x->next))), unchecked!(@_vcc_oset_in(x, rsrtl_reach(*((x->next)))))), >=(*((x->key)), sll_max_key(*((x->next))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(rsrtl_reach(x), @_vcc_oset_union(rsrtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll(x), &&(sll(*((x->next))), unchecked!(@_vcc_oset_in(x, sll_reach(*((x->next)))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_reach(x), @_vcc_oset_union(sll_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_max_key(x), @\int_max(*((x->key)), sll_max_key(*((x->next)))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_min_key(x), @\int_min(*((x->key)), sll_min_key(*((x->next)))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(srtl(x), &&(&&(srtl(*((x->next))), unchecked!(@_vcc_oset_in(x, srtl_reach(*((x->next)))))), <=(*((x->key)), sll_min_key(*((x->next))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(srtl_reach(x), @_vcc_oset_union(srtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
    // return z; 
    $result := $phys_ptr_cast(L#z, ^s_node);
    assume true;
    assert $position_marker();
    goto #exit;

  anon12:
    // skip

  #exit:
}



axiom (forall Q#__vcc_state$2^687.9#tc2#1682: $state, Q#x$2^687.9#dt1#1624: $ptr :: {:weight 10} { F#srtl(Q#__vcc_state$2^687.9#tc2#1682, $phys_ptr_cast(Q#x$2^687.9#dt1#1624, ^s_node)) } { F#sll(Q#__vcc_state$2^687.9#tc2#1682, $phys_ptr_cast(Q#x$2^687.9#dt1#1624, ^s_node)) } $good_state(Q#__vcc_state$2^687.9#tc2#1682) && true ==> F#srtl(Q#__vcc_state$2^687.9#tc2#1682, $phys_ptr_cast(Q#x$2^687.9#dt1#1624, ^s_node)) ==> F#sll(Q#__vcc_state$2^687.9#tc2#1682, $phys_ptr_cast(Q#x$2^687.9#dt1#1624, ^s_node)));

axiom (forall Q#__vcc_state$2^688.9#tc2#1683: $state, Q#x$2^688.9#dt1#1625: $ptr :: {:weight 10} { F#rsrtl(Q#__vcc_state$2^688.9#tc2#1683, $phys_ptr_cast(Q#x$2^688.9#dt1#1625, ^s_node)) } { F#sll(Q#__vcc_state$2^688.9#tc2#1683, $phys_ptr_cast(Q#x$2^688.9#dt1#1625, ^s_node)) } $good_state(Q#__vcc_state$2^688.9#tc2#1683) && true ==> F#rsrtl(Q#__vcc_state$2^688.9#tc2#1683, $phys_ptr_cast(Q#x$2^688.9#dt1#1625, ^s_node)) ==> F#sll(Q#__vcc_state$2^688.9#tc2#1683, $phys_ptr_cast(Q#x$2^688.9#dt1#1625, ^s_node)));

axiom (forall Q#__vcc_state$2^689.9#tc2#1684: $state, Q#x$2^689.9#dt1#1626: $ptr :: {:weight 10} { F#sll_reach(Q#__vcc_state$2^689.9#tc2#1684, $phys_ptr_cast(Q#x$2^689.9#dt1#1626, ^s_node)) } { F#srtl_reach(Q#__vcc_state$2^689.9#tc2#1684, $phys_ptr_cast(Q#x$2^689.9#dt1#1626, ^s_node)) } $good_state(Q#__vcc_state$2^689.9#tc2#1684) && true ==> F#sll_reach(Q#__vcc_state$2^689.9#tc2#1684, $phys_ptr_cast(Q#x$2^689.9#dt1#1626, ^s_node)) == F#srtl_reach(Q#__vcc_state$2^689.9#tc2#1684, $phys_ptr_cast(Q#x$2^689.9#dt1#1626, ^s_node)));

axiom (forall Q#__vcc_state$2^690.9#tc2#1685: $state, Q#x$2^690.9#dt1#1627: $ptr :: {:weight 10} { F#srtl_reach(Q#__vcc_state$2^690.9#tc2#1685, $phys_ptr_cast(Q#x$2^690.9#dt1#1627, ^s_node)) } { F#rsrtl_reach(Q#__vcc_state$2^690.9#tc2#1685, $phys_ptr_cast(Q#x$2^690.9#dt1#1627, ^s_node)) } $good_state(Q#__vcc_state$2^690.9#tc2#1685) && true ==> F#srtl_reach(Q#__vcc_state$2^690.9#tc2#1685, $phys_ptr_cast(Q#x$2^690.9#dt1#1627, ^s_node)) == F#rsrtl_reach(Q#__vcc_state$2^690.9#tc2#1685, $phys_ptr_cast(Q#x$2^690.9#dt1#1627, ^s_node)));

axiom (forall Q#__vcc_state$2^691.9#tc2#1686: $state, Q#x$2^691.9#dt1#1628: $ptr, Q#y$2^691.9#dt1#1629: $ptr :: {:weight 10} { F#sll_lseg_reach(Q#__vcc_state$2^691.9#tc2#1686, $phys_ptr_cast(Q#x$2^691.9#dt1#1628, ^s_node), $phys_ptr_cast(Q#y$2^691.9#dt1#1629, ^s_node)) } { F#srtl_lseg_reach(Q#__vcc_state$2^691.9#tc2#1686, $phys_ptr_cast(Q#x$2^691.9#dt1#1628, ^s_node), $phys_ptr_cast(Q#y$2^691.9#dt1#1629, ^s_node)) } $good_state(Q#__vcc_state$2^691.9#tc2#1686) && true ==> F#sll_lseg_reach(Q#__vcc_state$2^691.9#tc2#1686, $phys_ptr_cast(Q#x$2^691.9#dt1#1628, ^s_node), $phys_ptr_cast(Q#y$2^691.9#dt1#1629, ^s_node)) == F#srtl_lseg_reach(Q#__vcc_state$2^691.9#tc2#1686, $phys_ptr_cast(Q#x$2^691.9#dt1#1628, ^s_node), $phys_ptr_cast(Q#y$2^691.9#dt1#1629, ^s_node)));

const unique l#public: $label;

axiom $type_code_is(2, ^$#state_t);

const unique #tok$3^79.5: $token;

const unique #tok$3^77.5: $token;

const unique #tok$3^75.5: $token;

const unique #tok$3^70.14: $token;

const unique #tok$3^35.3: $token;

const unique #tok$3^31.3: $token;

const unique #tok$3^29.3: $token;

const unique #tok$3^23.14: $token;

const unique #tok$3^17.56: $token;

const unique #tok$3^17.41: $token;

const unique #tok$4^0.0: $token;

const unique #file^?3Cno?20file?3E: $token;

axiom $file_name_is(4, #file^?3Cno?20file?3E);

const unique #tok$3^3.3: $token;

const unique #file^Z?3A?5CInvariantSynthesis?5CVCDryad?5Cvcc?5CHost?5Cbin?5CTests?5Cgrass?5Csls_pairwise_sum.c: $token;

axiom $file_name_is(3, #file^Z?3A?5CInvariantSynthesis?5CVCDryad?5Cvcc?5CHost?5Cbin?5CTests?5Cgrass?5Csls_pairwise_sum.c);

const unique #file^z?3A?5Cinvariantsynthesis?5Cvcdryad?5Cvcc?5Chost?5Cbin?5Ctests?5Cgrass?5Cdryad_sls.h: $token;

axiom $file_name_is(2, #file^z?3A?5Cinvariantsynthesis?5Cvcdryad?5Cvcc?5Chost?5Cbin?5Ctests?5Cgrass?5Cdryad_sls.h);

const unique #file^Z?3A?5CInvariantSynthesis?5CVCDryad?2Dbin?5CHeaders?5Cvccp.h: $token;

axiom $file_name_is(1, #file^Z?3A?5CInvariantSynthesis?5CVCDryad?2Dbin?5CHeaders?5Cvccp.h);

const unique #distTp1: $ctype;

axiom #distTp1 == $ptr_to(^s_node);

