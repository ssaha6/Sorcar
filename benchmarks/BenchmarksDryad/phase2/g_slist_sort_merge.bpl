
const {:existential true} b0000 : bool;
const {:existential true} b0001 : bool;
const {:existential true} b0002 : bool;
const {:existential true} b0003 : bool;
const {:existential true} b0004 : bool;
const {:existential true} b0005 : bool;
const {:existential true} b0006 : bool;
const {:existential true} b0007 : bool;
const {:existential true} b0008 : bool;
const {:existential true} b0009 : bool;
const {:existential true} b0010 : bool;
const {:existential true} b0011 : bool;
const {:existential true} b0012 : bool;
const {:existential true} b0013 : bool;
const {:existential true} b0014 : bool;
const {:existential true} b0015 : bool;
const {:existential true} b0016 : bool;
const {:existential true} b0017 : bool;
const {:existential true} b0018 : bool;
const {:existential true} b0019 : bool;
const {:existential true} b0020 : bool;
const {:existential true} b0021 : bool;
const {:existential true} b0022 : bool;
const {:existential true} b0023 : bool;
const {:existential true} b0024 : bool;
const {:existential true} b0025 : bool;
const {:existential true} b0026 : bool;
const {:existential true} b0027 : bool;
const {:existential true} b0028 : bool;
const {:existential true} b0029 : bool;
const {:existential true} b0030 : bool;
const {:existential true} b0031 : bool;
const {:existential true} b0032 : bool;
const {:existential true} b0033 : bool;
const {:existential true} b0034 : bool;
const {:existential true} b0035 : bool;
const {:existential true} b0036 : bool;
const {:existential true} b0037 : bool;
const {:existential true} b0038 : bool;
const {:existential true} b0039 : bool;
const {:existential true} b0040 : bool;
const {:existential true} b0041 : bool;
const {:existential true} b0042 : bool;
const {:existential true} b0043 : bool;
const {:existential true} b0044 : bool;
const {:existential true} b0045 : bool;
const {:existential true} b0046 : bool;
const {:existential true} b0047 : bool;
const {:existential true} b0048 : bool;
const {:existential true} b0049 : bool;
const {:existential true} b0050 : bool;
const {:existential true} b0051 : bool;
const {:existential true} b0052 : bool;
const {:existential true} b0053 : bool;
const {:existential true} b0054 : bool;
const {:existential true} b0055 : bool;
const {:existential true} b0056 : bool;
const {:existential true} b0057 : bool;
const {:existential true} b0058 : bool;
const {:existential true} b0059 : bool;
const {:existential true} b0060 : bool;
const {:existential true} b0061 : bool;
const {:existential true} b0062 : bool;
const {:existential true} b0063 : bool;
const {:existential true} b0064 : bool;
const {:existential true} b0065 : bool;
const {:existential true} b0066 : bool;
const {:existential true} b0067 : bool;
const {:existential true} b0068 : bool;
const {:existential true} b0069 : bool;
const {:existential true} b0070 : bool;
const {:existential true} b0071 : bool;
const {:existential true} b0072 : bool;
const {:existential true} b0073 : bool;
const {:existential true} b0074 : bool;
const {:existential true} b0075 : bool;
const {:existential true} b0076 : bool;
const {:existential true} b0077 : bool;
const {:existential true} b0078 : bool;
const {:existential true} b0079 : bool;
const {:existential true} b0080 : bool;
const {:existential true} b0081 : bool;
const {:existential true} b0082 : bool;
const {:existential true} b0083 : bool;
const {:existential true} b0084 : bool;
const {:existential true} b0085 : bool;
const {:existential true} b0086 : bool;
const {:existential true} b0087 : bool;
const {:existential true} b0088 : bool;
const {:existential true} b0089 : bool;
const {:existential true} b0090 : bool;
const {:existential true} b0091 : bool;
const {:existential true} b0092 : bool;
const {:existential true} b0093 : bool;
const {:existential true} b0094 : bool;
const {:existential true} b0095 : bool;
const {:existential true} b0096 : bool;
const {:existential true} b0097 : bool;
const {:existential true} b0098 : bool;
const {:existential true} b0099 : bool;
const {:existential true} b0100 : bool;
const {:existential true} b0101 : bool;
const {:existential true} b0102 : bool;
const {:existential true} b0103 : bool;
const {:existential true} b0104 : bool;
const {:existential true} b0105 : bool;
const {:existential true} b0106 : bool;
const {:existential true} b0107 : bool;
const {:existential true} b0108 : bool;
const {:existential true} b0109 : bool;
const {:existential true} b0110 : bool;
const {:existential true} b0111 : bool;
const {:existential true} b0112 : bool;
const {:existential true} b0113 : bool;
const {:existential true} b0114 : bool;
const {:existential true} b0115 : bool;
const {:existential true} b0116 : bool;
const {:existential true} b0117 : bool;
const {:existential true} b0118 : bool;
const {:existential true} b0119 : bool;
const {:existential true} b0120 : bool;
const {:existential true} b0121 : bool;
const {:existential true} b0122 : bool;
const {:existential true} b0123 : bool;
const {:existential true} b0124 : bool;
const {:existential true} b0125 : bool;
const {:existential true} b0126 : bool;
const {:existential true} b0127 : bool;
const {:existential true} b0128 : bool;
const {:existential true} b0129 : bool;
const {:existential true} b0130 : bool;
const {:existential true} b0131 : bool;
const {:existential true} b0132 : bool;
const {:existential true} b0133 : bool;
const {:existential true} b0134 : bool;
const {:existential true} b0135 : bool;
const {:existential true} b0136 : bool;
const {:existential true} b0137 : bool;
const {:existential true} b0138 : bool;
const {:existential true} b0139 : bool;
const {:existential true} b0140 : bool;
const {:existential true} b0141 : bool;
const {:existential true} b0142 : bool;
const {:existential true} b0143 : bool;
const {:existential true} b0144 : bool;
const {:existential true} b0145 : bool;
const {:existential true} b0146 : bool;
const {:existential true} b0147 : bool;
const {:existential true} b0148 : bool;
const {:existential true} b0149 : bool;
const {:existential true} b0150 : bool;
const {:existential true} b0151 : bool;
const {:existential true} b0152 : bool;
const {:existential true} b0153 : bool;
const {:existential true} b0154 : bool;
const {:existential true} b0155 : bool;
const {:existential true} b0156 : bool;
const {:existential true} b0157 : bool;
const {:existential true} b0158 : bool;
const {:existential true} b0159 : bool;
const {:existential true} b0160 : bool;
const {:existential true} b0161 : bool;
const {:existential true} b0162 : bool;
const {:existential true} b0163 : bool;
const {:existential true} b0164 : bool;
const {:existential true} b0165 : bool;
const {:existential true} b0166 : bool;
const {:existential true} b0167 : bool;
const {:existential true} b0168 : bool;
const {:existential true} b0169 : bool;
const {:existential true} b0170 : bool;
const {:existential true} b0171 : bool;
const {:existential true} b0172 : bool;
const {:existential true} b0173 : bool;
const {:existential true} b0174 : bool;
const {:existential true} b0175 : bool;
const {:existential true} b0176 : bool;
const {:existential true} b0177 : bool;
const {:existential true} b0178 : bool;
const {:existential true} b0179 : bool;
const {:existential true} b0180 : bool;
const {:existential true} b0181 : bool;
const {:existential true} b0182 : bool;
const {:existential true} b0183 : bool;
const {:existential true} b0184 : bool;
const {:existential true} b0185 : bool;
const {:existential true} b0186 : bool;
const {:existential true} b0187 : bool;
const {:existential true} b0188 : bool;
const {:existential true} b0189 : bool;
const {:existential true} b0190 : bool;
const {:existential true} b0191 : bool;
const {:existential true} b0192 : bool;
const {:existential true} b0193 : bool;
const {:existential true} b0194 : bool;
const {:existential true} b0195 : bool;
const {:existential true} b0196 : bool;
const {:existential true} b0197 : bool;
const {:existential true} b0198 : bool;
const {:existential true} b0199 : bool;
const {:existential true} b0200 : bool;
const {:existential true} b0201 : bool;
const {:existential true} b0202 : bool;
const {:existential true} b0203 : bool;
const {:existential true} b0204 : bool;
const {:existential true} b0205 : bool;
const {:existential true} b0206 : bool;
const {:existential true} b0207 : bool;
const {:existential true} b0208 : bool;
const {:existential true} b0209 : bool;
const {:existential true} b0210 : bool;
const {:existential true} b0211 : bool;
const {:existential true} b0212 : bool;
const {:existential true} b0213 : bool;
const {:existential true} b0214 : bool;
const {:existential true} b0215 : bool;
const {:existential true} b0216 : bool;
const {:existential true} b0217 : bool;
const {:existential true} b0218 : bool;
const {:existential true} b0219 : bool;
const {:existential true} b0220 : bool;
const {:existential true} b0221 : bool;
const {:existential true} b0222 : bool;
const {:existential true} b0223 : bool;
const {:existential true} b0224 : bool;
const {:existential true} b0225 : bool;
const {:existential true} b0226 : bool;
const {:existential true} b0227 : bool;
const {:existential true} b0228 : bool;
const {:existential true} b0229 : bool;
const {:existential true} b0230 : bool;
const {:existential true} b0231 : bool;
const {:existential true} b0232 : bool;
const {:existential true} b0233 : bool;
const {:existential true} b0234 : bool;
const {:existential true} b0235 : bool;
const {:existential true} b0236 : bool;
const {:existential true} b0237 : bool;
const {:existential true} b0238 : bool;
const {:existential true} b0239 : bool;
const {:existential true} b0240 : bool;
const {:existential true} b0241 : bool;
const {:existential true} b0242 : bool;
const {:existential true} b0243 : bool;
const {:existential true} b0244 : bool;
const {:existential true} b0245 : bool;
const {:existential true} b0246 : bool;
const {:existential true} b0247 : bool;
const {:existential true} b0248 : bool;
const {:existential true} b0249 : bool;
const {:existential true} b0250 : bool;
const {:existential true} b0251 : bool;
const {:existential true} b0252 : bool;
const {:existential true} b0253 : bool;
const {:existential true} b0254 : bool;
const {:existential true} b0255 : bool;
const {:existential true} b0256 : bool;
const {:existential true} b0257 : bool;
const {:existential true} b0258 : bool;
const {:existential true} b0259 : bool;
const {:existential true} b0260 : bool;
const {:existential true} b0261 : bool;
const {:existential true} b0262 : bool;
const {:existential true} b0263 : bool;
const {:existential true} b0264 : bool;
const {:existential true} b0265 : bool;
const {:existential true} b0266 : bool;
const {:existential true} b0267 : bool;
const {:existential true} b0268 : bool;
const {:existential true} b0269 : bool;
const {:existential true} b0270 : bool;
const {:existential true} b0271 : bool;
const {:existential true} b0272 : bool;
const {:existential true} b0273 : bool;
const {:existential true} b0274 : bool;
const {:existential true} b0275 : bool;
const {:existential true} b0276 : bool;
const {:existential true} b0277 : bool;
const {:existential true} b0278 : bool;
const {:existential true} b0279 : bool;
const {:existential true} b0280 : bool;
const {:existential true} b0281 : bool;
const {:existential true} b0282 : bool;
const {:existential true} b0283 : bool;
const {:existential true} b0284 : bool;
const {:existential true} b0285 : bool;
const {:existential true} b0286 : bool;
const {:existential true} b0287 : bool;
const {:existential true} b0288 : bool;
const {:existential true} b0289 : bool;
const {:existential true} b0290 : bool;
const {:existential true} b0291 : bool;
const {:existential true} b0292 : bool;
const {:existential true} b0293 : bool;
const {:existential true} b0294 : bool;
const {:existential true} b0295 : bool;
const {:existential true} b0296 : bool;
const {:existential true} b0297 : bool;
const {:existential true} b0298 : bool;
const {:existential true} b0299 : bool;
const {:existential true} b0300 : bool;
const {:existential true} b0301 : bool;
const {:existential true} b0302 : bool;
const {:existential true} b0303 : bool;
const {:existential true} b0304 : bool;
const {:existential true} b0305 : bool;
const {:existential true} b0306 : bool;
const {:existential true} b0307 : bool;
const {:existential true} b0308 : bool;
const {:existential true} b0309 : bool;
const {:existential true} b0310 : bool;
const {:existential true} b0311 : bool;
const {:existential true} b0312 : bool;
const {:existential true} b0313 : bool;
const {:existential true} b0314 : bool;
const {:existential true} b0315 : bool;
const {:existential true} b0316 : bool;
const {:existential true} b0317 : bool;
const {:existential true} b0318 : bool;
const {:existential true} b0319 : bool;
const {:existential true} b0320 : bool;
const {:existential true} b0321 : bool;
const {:existential true} b0322 : bool;
const {:existential true} b0323 : bool;
const {:existential true} b0324 : bool;
const {:existential true} b0325 : bool;
const {:existential true} b0326 : bool;
const {:existential true} b0327 : bool;
const {:existential true} b0328 : bool;
const {:existential true} b0329 : bool;
const {:existential true} b0330 : bool;
const {:existential true} b0331 : bool;
const {:existential true} b0332 : bool;
const {:existential true} b0333 : bool;
const {:existential true} b0334 : bool;
const {:existential true} b0335 : bool;
const {:existential true} b0336 : bool;
const {:existential true} b0337 : bool;
const {:existential true} b0338 : bool;
const {:existential true} b0339 : bool;
const {:existential true} b0340 : bool;
const {:existential true} b0341 : bool;
const {:existential true} b0342 : bool;
const {:existential true} b0343 : bool;
const {:existential true} b0344 : bool;
const {:existential true} b0345 : bool;
const {:existential true} b0346 : bool;
const {:existential true} b0347 : bool;
const {:existential true} b0348 : bool;
const {:existential true} b0349 : bool;
const {:existential true} b0350 : bool;
const {:existential true} b0351 : bool;
const {:existential true} b0352 : bool;
const {:existential true} b0353 : bool;
const {:existential true} b0354 : bool;
const {:existential true} b0355 : bool;
const {:existential true} b0356 : bool;
const {:existential true} b0357 : bool;
const {:existential true} b0358 : bool;
const {:existential true} b0359 : bool;
const {:existential true} b0360 : bool;
const {:existential true} b0361 : bool;
const {:existential true} b0362 : bool;
const {:existential true} b0363 : bool;
const {:existential true} b0364 : bool;
const {:existential true} b0365 : bool;
const {:existential true} b0366 : bool;
const {:existential true} b0367 : bool;
const {:existential true} b0368 : bool;
const {:existential true} b0369 : bool;
const {:existential true} b0370 : bool;
const {:existential true} b0371 : bool;
const {:existential true} b0372 : bool;
const {:existential true} b0373 : bool;
const {:existential true} b0374 : bool;
const {:existential true} b0375 : bool;
const {:existential true} b0376 : bool;
const {:existential true} b0377 : bool;
const {:existential true} b0378 : bool;
const {:existential true} b0379 : bool;
const {:existential true} b0380 : bool;
const {:existential true} b0381 : bool;
const {:existential true} b0382 : bool;
const {:existential true} b0383 : bool;
const {:existential true} b0384 : bool;
const {:existential true} b0385 : bool;
const {:existential true} b0386 : bool;
const {:existential true} b0387 : bool;
const {:existential true} b0388 : bool;
const {:existential true} b0389 : bool;
const {:existential true} b0390 : bool;
const {:existential true} b0391 : bool;
const {:existential true} b0392 : bool;
const {:existential true} b0393 : bool;
const {:existential true} b0394 : bool;
const {:existential true} b0395 : bool;
const {:existential true} b0396 : bool;
const {:existential true} b0397 : bool;
const {:existential true} b0398 : bool;
const {:existential true} b0399 : bool;
const {:existential true} b0400 : bool;
const {:existential true} b0401 : bool;
const {:existential true} b0402 : bool;
const {:existential true} b0403 : bool;
const {:existential true} b0404 : bool;
const {:existential true} b0405 : bool;
const {:existential true} b0406 : bool;
const {:existential true} b0407 : bool;
const {:existential true} b0408 : bool;
const {:existential true} b0409 : bool;
const {:existential true} b0410 : bool;
const {:existential true} b0411 : bool;
const {:existential true} b0412 : bool;
const {:existential true} b0413 : bool;
const {:existential true} b0414 : bool;
const {:existential true} b0415 : bool;
const {:existential true} b0416 : bool;
const {:existential true} b0417 : bool;
const {:existential true} b0418 : bool;
const {:existential true} b0419 : bool;
const {:existential true} b0420 : bool;
const {:existential true} b0421 : bool;
const {:existential true} b0422 : bool;
const {:existential true} b0423 : bool;
const {:existential true} b0424 : bool;
const {:existential true} b0425 : bool;
const {:existential true} b0426 : bool;
const {:existential true} b0427 : bool;
const {:existential true} b0428 : bool;
const {:existential true} b0429 : bool;
const {:existential true} b0430 : bool;
const {:existential true} b0431 : bool;
const {:existential true} b0432 : bool;
const {:existential true} b0433 : bool;
const {:existential true} b0434 : bool;
const {:existential true} b0435 : bool;
const {:existential true} b0436 : bool;
const {:existential true} b0437 : bool;
const {:existential true} b0438 : bool;
const {:existential true} b0439 : bool;
const {:existential true} b0440 : bool;
const {:existential true} b0441 : bool;
const {:existential true} b0442 : bool;
const {:existential true} b0443 : bool;
const {:existential true} b0444 : bool;
const {:existential true} b0445 : bool;
const {:existential true} b0446 : bool;
const {:existential true} b0447 : bool;
const {:existential true} b0448 : bool;
const {:existential true} b0449 : bool;
const {:existential true} b0450 : bool;
const {:existential true} b0451 : bool;
const {:existential true} b0452 : bool;
const {:existential true} b0453 : bool;
const {:existential true} b0454 : bool;
const {:existential true} b0455 : bool;
const {:existential true} b0456 : bool;
const {:existential true} b0457 : bool;
const {:existential true} b0458 : bool;
const {:existential true} b0459 : bool;
const {:existential true} b0460 : bool;
const {:existential true} b0461 : bool;
const {:existential true} b0462 : bool;
const {:existential true} b0463 : bool;
const {:existential true} b0464 : bool;
const {:existential true} b0465 : bool;
const {:existential true} b0466 : bool;
const {:existential true} b0467 : bool;
const {:existential true} b0468 : bool;
const {:existential true} b0469 : bool;
const {:existential true} b0470 : bool;
const {:existential true} b0471 : bool;
const {:existential true} b0472 : bool;
const {:existential true} b0473 : bool;
const {:existential true} b0474 : bool;
const {:existential true} b0475 : bool;
const {:existential true} b0476 : bool;
const {:existential true} b0477 : bool;
const {:existential true} b0478 : bool;
const {:existential true} b0479 : bool;
const {:existential true} b0480 : bool;
const {:existential true} b0481 : bool;
const {:existential true} b0482 : bool;
const {:existential true} b0483 : bool;
const {:existential true} b0484 : bool;
const {:existential true} b0485 : bool;
const {:existential true} b0486 : bool;
const {:existential true} b0487 : bool;
const {:existential true} b0488 : bool;
const {:existential true} b0489 : bool;
const {:existential true} b0490 : bool;
const {:existential true} b0491 : bool;
const {:existential true} b0492 : bool;
const {:existential true} b0493 : bool;
const {:existential true} b0494 : bool;
const {:existential true} b0495 : bool;
const {:existential true} b0496 : bool;
const {:existential true} b0497 : bool;
const {:existential true} b0498 : bool;
const {:existential true} b0499 : bool;
const {:existential true} b0500 : bool;
const {:existential true} b0501 : bool;
const {:existential true} b0502 : bool;
const {:existential true} b0503 : bool;
const {:existential true} b0504 : bool;
const {:existential true} b0505 : bool;
const {:existential true} b0506 : bool;
const {:existential true} b0507 : bool;
const {:existential true} b0508 : bool;
const {:existential true} b0509 : bool;
const {:existential true} b0510 : bool;
const {:existential true} b0511 : bool;
const {:existential true} b0512 : bool;
const {:existential true} b0513 : bool;
const {:existential true} b0514 : bool;
const {:existential true} b0515 : bool;
const {:existential true} b0516 : bool;
const {:existential true} b0517 : bool;
const {:existential true} b0518 : bool;
const {:existential true} b0519 : bool;
const {:existential true} b0520 : bool;
const {:existential true} b0521 : bool;
const {:existential true} b0522 : bool;
const {:existential true} b0523 : bool;
const {:existential true} b0524 : bool;
const {:existential true} b0525 : bool;
const {:existential true} b0526 : bool;
const {:existential true} b0527 : bool;
const {:existential true} b0528 : bool;
const {:existential true} b0529 : bool;
const {:existential true} b0530 : bool;
const {:existential true} b0531 : bool;
const {:existential true} b0532 : bool;
const {:existential true} b0533 : bool;
const {:existential true} b0534 : bool;
const {:existential true} b0535 : bool;
const {:existential true} b0536 : bool;
const {:existential true} b0537 : bool;
const {:existential true} b0538 : bool;
const {:existential true} b0539 : bool;
const {:existential true} b0540 : bool;
const {:existential true} b0541 : bool;
const {:existential true} b0542 : bool;
const {:existential true} b0543 : bool;
const {:existential true} b0544 : bool;
const {:existential true} b0545 : bool;
const {:existential true} b0546 : bool;
const {:existential true} b0547 : bool;
const {:existential true} b0548 : bool;
const {:existential true} b0549 : bool;
const {:existential true} b0550 : bool;
const {:existential true} b0551 : bool;
const {:existential true} b0552 : bool;
const {:existential true} b0553 : bool;
const {:existential true} b0554 : bool;
const {:existential true} b0555 : bool;
const {:existential true} b0556 : bool;
const {:existential true} b0557 : bool;
const {:existential true} b0558 : bool;
const {:existential true} b0559 : bool;
const {:existential true} b0560 : bool;
const {:existential true} b0561 : bool;
const {:existential true} b0562 : bool;
const {:existential true} b0563 : bool;
const {:existential true} b0564 : bool;
const {:existential true} b0565 : bool;
const {:existential true} b0566 : bool;
const {:existential true} b0567 : bool;
const {:existential true} b0568 : bool;
const {:existential true} b0569 : bool;
const {:existential true} b0570 : bool;
const {:existential true} b0571 : bool;
const {:existential true} b0572 : bool;
const {:existential true} b0573 : bool;
const {:existential true} b0574 : bool;
const {:existential true} b0575 : bool;
const {:existential true} b0576 : bool;
const {:existential true} b0577 : bool;
const {:existential true} b0578 : bool;
const {:existential true} b0579 : bool;
const {:existential true} b0580 : bool;
const {:existential true} b0581 : bool;
const {:existential true} b0582 : bool;
const {:existential true} b0583 : bool;
const {:existential true} b0584 : bool;
const {:existential true} b0585 : bool;
const {:existential true} b0586 : bool;
const {:existential true} b0587 : bool;
const {:existential true} b0588 : bool;
const {:existential true} b0589 : bool;
const {:existential true} b0590 : bool;
const {:existential true} b0591 : bool;
const {:existential true} b0592 : bool;
const {:existential true} b0593 : bool;
const {:existential true} b0594 : bool;
const {:existential true} b0595 : bool;
const {:existential true} b0596 : bool;
const {:existential true} b0597 : bool;
const {:existential true} b0598 : bool;
const {:existential true} b0599 : bool;
const {:existential true} b0600 : bool;
const {:existential true} b0601 : bool;
const {:existential true} b0602 : bool;
const {:existential true} b0603 : bool;
const {:existential true} b0604 : bool;
const {:existential true} b0605 : bool;
const {:existential true} b0606 : bool;
const {:existential true} b0607 : bool;
const {:existential true} b0608 : bool;
const {:existential true} b0609 : bool;
const {:existential true} b0610 : bool;
const {:existential true} b0611 : bool;
const {:existential true} b0612 : bool;
const {:existential true} b0613 : bool;
const {:existential true} b0614 : bool;
const {:existential true} b0615 : bool;
const {:existential true} b0616 : bool;
const {:existential true} b0617 : bool;
const {:existential true} b0618 : bool;
const {:existential true} b0619 : bool;
const {:existential true} b0620 : bool;
const {:existential true} b0621 : bool;
const {:existential true} b0622 : bool;
const {:existential true} b0623 : bool;
const {:existential true} b0624 : bool;
const {:existential true} b0625 : bool;
const {:existential true} b0626 : bool;
const {:existential true} b0627 : bool;
const {:existential true} b0628 : bool;
const {:existential true} b0629 : bool;
const {:existential true} b0630 : bool;
const {:existential true} b0631 : bool;
const {:existential true} b0632 : bool;
const {:existential true} b0633 : bool;
const {:existential true} b0634 : bool;
const {:existential true} b0635 : bool;
const {:existential true} b0636 : bool;
const {:existential true} b0637 : bool;
const {:existential true} b0638 : bool;
const {:existential true} b0639 : bool;
const {:existential true} b0640 : bool;
const {:existential true} b0641 : bool;
const {:existential true} b0642 : bool;
const {:existential true} b0643 : bool;
const {:existential true} b0644 : bool;
const {:existential true} b0645 : bool;
const {:existential true} b0646 : bool;
const {:existential true} b0647 : bool;
const {:existential true} b0648 : bool;
const {:existential true} b0649 : bool;
const {:existential true} b0650 : bool;
const {:existential true} b0651 : bool;
const {:existential true} b0652 : bool;
const {:existential true} b0653 : bool;
const {:existential true} b0654 : bool;
const {:existential true} b0655 : bool;
const {:existential true} b0656 : bool;
const {:existential true} b0657 : bool;
const {:existential true} b0658 : bool;
const {:existential true} b0659 : bool;
const {:existential true} b0660 : bool;
const {:existential true} b0661 : bool;
const {:existential true} b0662 : bool;
const {:existential true} b0663 : bool;
const {:existential true} b0664 : bool;
const {:existential true} b0665 : bool;
const {:existential true} b0666 : bool;
const {:existential true} b0667 : bool;
const {:existential true} b0668 : bool;
const {:existential true} b0669 : bool;
const {:existential true} b0670 : bool;
const {:existential true} b0671 : bool;
const {:existential true} b0672 : bool;
const {:existential true} b0673 : bool;
const {:existential true} b0674 : bool;
const {:existential true} b0675 : bool;
const {:existential true} b0676 : bool;
const {:existential true} b0677 : bool;
const {:existential true} b0678 : bool;
const {:existential true} b0679 : bool;
const {:existential true} b0680 : bool;
const {:existential true} b0681 : bool;
const {:existential true} b0682 : bool;
const {:existential true} b0683 : bool;
const {:existential true} b0684 : bool;
const {:existential true} b0685 : bool;
const {:existential true} b0686 : bool;
const {:existential true} b0687 : bool;
const {:existential true} b0688 : bool;
const {:existential true} b0689 : bool;
const {:existential true} b0690 : bool;
const {:existential true} b0691 : bool;
const {:existential true} b0692 : bool;
const {:existential true} b0693 : bool;
const {:existential true} b0694 : bool;
const {:existential true} b0695 : bool;
const {:existential true} b0696 : bool;
const {:existential true} b0697 : bool;
const {:existential true} b0698 : bool;
const {:existential true} b0699 : bool;
const {:existential true} b0700 : bool;
const {:existential true} b0701 : bool;
const {:existential true} b0702 : bool;
const {:existential true} b0703 : bool;
const {:existential true} b0704 : bool;
const {:existential true} b0705 : bool;
const {:existential true} b0706 : bool;
const {:existential true} b0707 : bool;
const {:existential true} b0708 : bool;
const {:existential true} b0709 : bool;
const {:existential true} b0710 : bool;
const {:existential true} b0711 : bool;
const {:existential true} b0712 : bool;
const {:existential true} b0713 : bool;
const {:existential true} b0714 : bool;
const {:existential true} b0715 : bool;
const {:existential true} b0716 : bool;
const {:existential true} b0717 : bool;
const {:existential true} b0718 : bool;
const {:existential true} b0719 : bool;
const {:existential true} b0720 : bool;
const {:existential true} b0721 : bool;
const {:existential true} b0722 : bool;
const {:existential true} b0723 : bool;
const {:existential true} b0724 : bool;
const {:existential true} b0725 : bool;
const {:existential true} b0726 : bool;
const {:existential true} b0727 : bool;
const {:existential true} b0728 : bool;
const {:existential true} b0729 : bool;
const {:existential true} b0730 : bool;
const {:existential true} b0731 : bool;
const {:existential true} b0732 : bool;
const {:existential true} b0733 : bool;
const {:existential true} b0734 : bool;
const {:existential true} b0735 : bool;
const {:existential true} b0736 : bool;
const {:existential true} b0737 : bool;
const {:existential true} b0738 : bool;
const {:existential true} b0739 : bool;
const {:existential true} b0740 : bool;
const {:existential true} b0741 : bool;
const {:existential true} b0742 : bool;
const {:existential true} b0743 : bool;
const {:existential true} b0744 : bool;
const {:existential true} b0745 : bool;
const {:existential true} b0746 : bool;
const {:existential true} b0747 : bool;
const {:existential true} b0748 : bool;
const {:existential true} b0749 : bool;
const {:existential true} b0750 : bool;
const {:existential true} b0751 : bool;
const {:existential true} b0752 : bool;
const {:existential true} b0753 : bool;
const {:existential true} b0754 : bool;
const {:existential true} b0755 : bool;
const {:existential true} b0756 : bool;
const {:existential true} b0757 : bool;
const {:existential true} b0758 : bool;
const {:existential true} b0759 : bool;
const {:existential true} b0760 : bool;
const {:existential true} b0761 : bool;
const {:existential true} b0762 : bool;
const {:existential true} b0763 : bool;
const {:existential true} b0764 : bool;
const {:existential true} b0765 : bool;
const {:existential true} b0766 : bool;
const {:existential true} b0767 : bool;
const {:existential true} b0768 : bool;
const {:existential true} b0769 : bool;
const {:existential true} b0770 : bool;
const {:existential true} b0771 : bool;
const {:existential true} b0772 : bool;
const {:existential true} b0773 : bool;
const {:existential true} b0774 : bool;
const {:existential true} b0775 : bool;
const {:existential true} b0776 : bool;
const {:existential true} b0777 : bool;
const {:existential true} b0778 : bool;
const {:existential true} b0779 : bool;
const {:existential true} b0780 : bool;
const {:existential true} b0781 : bool;
const {:existential true} b0782 : bool;
const {:existential true} b0783 : bool;
const {:existential true} b0784 : bool;
const {:existential true} b0785 : bool;
const {:existential true} b0786 : bool;
const {:existential true} b0787 : bool;
const {:existential true} b0788 : bool;
const {:existential true} b0789 : bool;
const {:existential true} b0790 : bool;
const {:existential true} b0791 : bool;
const {:existential true} b0792 : bool;
const {:existential true} b0793 : bool;
const {:existential true} b0794 : bool;
const {:existential true} b0795 : bool;
const {:existential true} b0796 : bool;
const {:existential true} b0797 : bool;
const {:existential true} b0798 : bool;
const {:existential true} b0799 : bool;
const {:existential true} b0800 : bool;
const {:existential true} b0801 : bool;
const {:existential true} b0802 : bool;
const {:existential true} b0803 : bool;
const {:existential true} b0804 : bool;
const {:existential true} b0805 : bool;
const {:existential true} b0806 : bool;
const {:existential true} b0807 : bool;
const {:existential true} b0808 : bool;
const {:existential true} b0809 : bool;
const {:existential true} b0810 : bool;
const {:existential true} b0811 : bool;
const {:existential true} b0812 : bool;
const {:existential true} b0813 : bool;
const {:existential true} b0814 : bool;
const {:existential true} b0815 : bool;
const {:existential true} b0816 : bool;
const {:existential true} b0817 : bool;
const {:existential true} b0818 : bool;
const {:existential true} b0819 : bool;
const {:existential true} b0820 : bool;
const {:existential true} b0821 : bool;
const {:existential true} b0822 : bool;
const {:existential true} b0823 : bool;
const {:existential true} b0824 : bool;
const {:existential true} b0825 : bool;
const {:existential true} b0826 : bool;
const {:existential true} b0827 : bool;
const {:existential true} b0828 : bool;
const {:existential true} b0829 : bool;
const {:existential true} b0830 : bool;
const {:existential true} b0831 : bool;
const {:existential true} b0832 : bool;
const {:existential true} b0833 : bool;
const {:existential true} b0834 : bool;
const {:existential true} b0835 : bool;
const {:existential true} b0836 : bool;
const {:existential true} b0837 : bool;
const {:existential true} b0838 : bool;
const {:existential true} b0839 : bool;
const {:existential true} b0840 : bool;
const {:existential true} b0841 : bool;
const {:existential true} b0842 : bool;
const {:existential true} b0843 : bool;
const {:existential true} b0844 : bool;
const {:existential true} b0845 : bool;
const {:existential true} b0846 : bool;
const {:existential true} b0847 : bool;
const {:existential true} b0848 : bool;
const {:existential true} b0849 : bool;
const {:existential true} b0850 : bool;
const {:existential true} b0851 : bool;
const {:existential true} b0852 : bool;
const {:existential true} b0853 : bool;
const {:existential true} b0854 : bool;
const {:existential true} b0855 : bool;
const {:existential true} b0856 : bool;
const {:existential true} b0857 : bool;
const {:existential true} b0858 : bool;
const {:existential true} b0859 : bool;
const {:existential true} b0860 : bool;
const {:existential true} b0861 : bool;
const {:existential true} b0862 : bool;
const {:existential true} b0863 : bool;
const {:existential true} b0864 : bool;
const {:existential true} b0865 : bool;
const {:existential true} b0866 : bool;
const {:existential true} b0867 : bool;
const {:existential true} b0868 : bool;
const {:existential true} b0869 : bool;
const {:existential true} b0870 : bool;
const {:existential true} b0871 : bool;
const {:existential true} b0872 : bool;
const {:existential true} b0873 : bool;
const {:existential true} b0874 : bool;
const {:existential true} b0875 : bool;
const {:existential true} b0876 : bool;
const {:existential true} b0877 : bool;
const {:existential true} b0878 : bool;
const {:existential true} b0879 : bool;
const {:existential true} b0880 : bool;
const {:existential true} b0881 : bool;
const {:existential true} b0882 : bool;
const {:existential true} b0883 : bool;
const {:existential true} b0884 : bool;
const {:existential true} b0885 : bool;
const {:existential true} b0886 : bool;
const {:existential true} b0887 : bool;
const {:existential true} b0888 : bool;
const {:existential true} b0889 : bool;
const {:existential true} b0890 : bool;
const {:existential true} b0891 : bool;
const {:existential true} b0892 : bool;
const {:existential true} b0893 : bool;
const {:existential true} b0894 : bool;
const {:existential true} b0895 : bool;
const {:existential true} b0896 : bool;
const {:existential true} b0897 : bool;
const {:existential true} b0898 : bool;
const {:existential true} b0899 : bool;
const {:existential true} b0900 : bool;
const {:existential true} b0901 : bool;
const {:existential true} b0902 : bool;
const {:existential true} b0903 : bool;
const {:existential true} b0904 : bool;
const {:existential true} b0905 : bool;
const {:existential true} b0906 : bool;
const {:existential true} b0907 : bool;
const {:existential true} b0908 : bool;
const {:existential true} b0909 : bool;
const {:existential true} b0910 : bool;
const {:existential true} b0911 : bool;
const {:existential true} b0912 : bool;
const {:existential true} b0913 : bool;
const {:existential true} b0914 : bool;
const {:existential true} b0915 : bool;
const {:existential true} b0916 : bool;
const {:existential true} b0917 : bool;
const {:existential true} b0918 : bool;
const {:existential true} b0919 : bool;
const {:existential true} b0920 : bool;
const {:existential true} b0921 : bool;
const {:existential true} b0922 : bool;
const {:existential true} b0923 : bool;
const {:existential true} b0924 : bool;
const {:existential true} b0925 : bool;
const {:existential true} b0926 : bool;
const {:existential true} b0927 : bool;
const {:existential true} b0928 : bool;
const {:existential true} b0929 : bool;
const {:existential true} b0930 : bool;
const {:existential true} b0931 : bool;
const {:existential true} b0932 : bool;
const {:existential true} b0933 : bool;
const {:existential true} b0934 : bool;
const {:existential true} b0935 : bool;
const {:existential true} b0936 : bool;
const {:existential true} b0937 : bool;
const {:existential true} b0938 : bool;
const {:existential true} b0939 : bool;
const {:existential true} b0940 : bool;
const {:existential true} b0941 : bool;
const {:existential true} b0942 : bool;
const {:existential true} b0943 : bool;
const {:existential true} b0944 : bool;
const {:existential true} b0945 : bool;
const {:existential true} b0946 : bool;
const {:existential true} b0947 : bool;
const {:existential true} b0948 : bool;
const {:existential true} b0949 : bool;
const {:existential true} b0950 : bool;
const {:existential true} b0951 : bool;
const {:existential true} b0952 : bool;
const {:existential true} b0953 : bool;
const {:existential true} b0954 : bool;
const {:existential true} b0955 : bool;
const {:existential true} b0956 : bool;
const {:existential true} b0957 : bool;
const {:existential true} b0958 : bool;
const {:existential true} b0959 : bool;
const {:existential true} b0960 : bool;
const {:existential true} b0961 : bool;
const {:existential true} b0962 : bool;
const {:existential true} b0963 : bool;
const {:existential true} b0964 : bool;
const {:existential true} b0965 : bool;
const {:existential true} b0966 : bool;
const {:existential true} b0967 : bool;
const {:existential true} b0968 : bool;
const {:existential true} b0969 : bool;
const {:existential true} b0970 : bool;
const {:existential true} b0971 : bool;
const {:existential true} b0972 : bool;
const {:existential true} b0973 : bool;
const {:existential true} b0974 : bool;
const {:existential true} b0975 : bool;
const {:existential true} b0976 : bool;
const {:existential true} b0977 : bool;
const {:existential true} b0978 : bool;
const {:existential true} b0979 : bool;
const {:existential true} b0980 : bool;
const {:existential true} b0981 : bool;
const {:existential true} b0982 : bool;
const {:existential true} b0983 : bool;
const {:existential true} b0984 : bool;
const {:existential true} b0985 : bool;
const {:existential true} b0986 : bool;
const {:existential true} b0987 : bool;
const {:existential true} b0988 : bool;
const {:existential true} b0989 : bool;
const {:existential true} b0990 : bool;
const {:existential true} b0991 : bool;
const {:existential true} b0992 : bool;
const {:existential true} b0993 : bool;
const {:existential true} b0994 : bool;
const {:existential true} b0995 : bool;
const {:existential true} b0996 : bool;
const {:existential true} b0997 : bool;
const {:existential true} b0998 : bool;
const {:existential true} b0999 : bool;
const {:existential true} b1000 : bool;
const {:existential true} b1001 : bool;
const {:existential true} b1002 : bool;
const {:existential true} b1003 : bool;
const {:existential true} b1004 : bool;
const {:existential true} b1005 : bool;
const {:existential true} b1006 : bool;
const {:existential true} b1007 : bool;
const {:existential true} b1008 : bool;
const {:existential true} b1009 : bool;
const {:existential true} b1010 : bool;
const {:existential true} b1011 : bool;
const {:existential true} b1012 : bool;
const {:existential true} b1013 : bool;
const {:existential true} b1014 : bool;
const {:existential true} b1015 : bool;
const {:existential true} b1016 : bool;
const {:existential true} b1017 : bool;
const {:existential true} b1018 : bool;
const {:existential true} b1019 : bool;
const {:existential true} b1020 : bool;
const {:existential true} b1021 : bool;
const {:existential true} b1022 : bool;
const {:existential true} b1023 : bool;
const {:existential true} b1024 : bool;
const {:existential true} b1025 : bool;
const {:existential true} b1026 : bool;
const {:existential true} b1027 : bool;
const {:existential true} b1028 : bool;
const {:existential true} b1029 : bool;
const {:existential true} b1030 : bool;
const {:existential true} b1031 : bool;
const {:existential true} b1032 : bool;
const {:existential true} b1033 : bool;
const {:existential true} b1034 : bool;
const {:existential true} b1035 : bool;
const {:existential true} b1036 : bool;
const {:existential true} b1037 : bool;
const {:existential true} b1038 : bool;
const {:existential true} b1039 : bool;
const {:existential true} b1040 : bool;
const {:existential true} b1041 : bool;
const {:existential true} b1042 : bool;
const {:existential true} b1043 : bool;
const {:existential true} b1044 : bool;
const {:existential true} b1045 : bool;
const {:existential true} b1046 : bool;
const {:existential true} b1047 : bool;
const {:existential true} b1048 : bool;
const {:existential true} b1049 : bool;
const {:existential true} b1050 : bool;
const {:existential true} b1051 : bool;
const {:existential true} b1052 : bool;
const {:existential true} b1053 : bool;
const {:existential true} b1054 : bool;
const {:existential true} b1055 : bool;
const {:existential true} b1056 : bool;
const {:existential true} b1057 : bool;
const {:existential true} b1058 : bool;
const {:existential true} b1059 : bool;
const {:existential true} b1060 : bool;
const {:existential true} b1061 : bool;
const {:existential true} b1062 : bool;
const {:existential true} b1063 : bool;
const {:existential true} b1064 : bool;
const {:existential true} b1065 : bool;
const {:existential true} b1066 : bool;
const {:existential true} b1067 : bool;
const {:existential true} b1068 : bool;
const {:existential true} b1069 : bool;
const {:existential true} b1070 : bool;
const {:existential true} b1071 : bool;
const {:existential true} b1072 : bool;
const {:existential true} b1073 : bool;
const {:existential true} b1074 : bool;
const {:existential true} b1075 : bool;
const {:existential true} b1076 : bool;
const {:existential true} b1077 : bool;
const {:existential true} b1078 : bool;
const {:existential true} b1079 : bool;
const {:existential true} b1080 : bool;
const {:existential true} b1081 : bool;
const {:existential true} b1082 : bool;
const {:existential true} b1083 : bool;
const {:existential true} b1084 : bool;
const {:existential true} b1085 : bool;
const {:existential true} b1086 : bool;
const {:existential true} b1087 : bool;
const {:existential true} b1088 : bool;
const {:existential true} b1089 : bool;
const {:existential true} b1090 : bool;
const {:existential true} b1091 : bool;
const {:existential true} b1092 : bool;
const {:existential true} b1093 : bool;
const {:existential true} b1094 : bool;
const {:existential true} b1095 : bool;
const {:existential true} b1096 : bool;
const {:existential true} b1097 : bool;
const {:existential true} b1098 : bool;
const {:existential true} b1099 : bool;
const {:existential true} b1100 : bool;
const {:existential true} b1101 : bool;
const {:existential true} b1102 : bool;
const {:existential true} b1103 : bool;
const {:existential true} b1104 : bool;
const {:existential true} b1105 : bool;
const {:existential true} b1106 : bool;
const {:existential true} b1107 : bool;
const {:existential true} b1108 : bool;
const {:existential true} b1109 : bool;
const {:existential true} b1110 : bool;
const {:existential true} b1111 : bool;
const {:existential true} b1112 : bool;
const {:existential true} b1113 : bool;
const {:existential true} b1114 : bool;
const {:existential true} b1115 : bool;
const {:existential true} b1116 : bool;
const {:existential true} b1117 : bool;
const {:existential true} b1118 : bool;
const {:existential true} b1119 : bool;
const {:existential true} b1120 : bool;
const {:existential true} b1121 : bool;
const {:existential true} b1122 : bool;
const {:existential true} b1123 : bool;
const {:existential true} b1124 : bool;
const {:existential true} b1125 : bool;
const {:existential true} b1126 : bool;
const {:existential true} b1127 : bool;
const {:existential true} b1128 : bool;
const {:existential true} b1129 : bool;
const {:existential true} b1130 : bool;
const {:existential true} b1131 : bool;
const {:existential true} b1132 : bool;
const {:existential true} b1133 : bool;
const {:existential true} b1134 : bool;
const {:existential true} b1135 : bool;
const {:existential true} b1136 : bool;
const {:existential true} b1137 : bool;
const {:existential true} b1138 : bool;
const {:existential true} b1139 : bool;
const {:existential true} b1140 : bool;
const {:existential true} b1141 : bool;
const {:existential true} b1142 : bool;
const {:existential true} b1143 : bool;
const {:existential true} b1144 : bool;
const {:existential true} b1145 : bool;
const {:existential true} b1146 : bool;
const {:existential true} b1147 : bool;
const {:existential true} b1148 : bool;
const {:existential true} b1149 : bool;
const {:existential true} b1150 : bool;
const {:existential true} b1151 : bool;
const {:existential true} b1152 : bool;
const {:existential true} b1153 : bool;
const {:existential true} b1154 : bool;
const {:existential true} b1155 : bool;
const {:existential true} b1156 : bool;
const {:existential true} b1157 : bool;
const {:existential true} b1158 : bool;
const {:existential true} b1159 : bool;
const {:existential true} b1160 : bool;
const {:existential true} b1161 : bool;
const {:existential true} b1162 : bool;
const {:existential true} b1163 : bool;
const {:existential true} b1164 : bool;
const {:existential true} b1165 : bool;
const {:existential true} b1166 : bool;
const {:existential true} b1167 : bool;
const {:existential true} b1168 : bool;
const {:existential true} b1169 : bool;
const {:existential true} b1170 : bool;
const {:existential true} b1171 : bool;
const {:existential true} b1172 : bool;
const {:existential true} b1173 : bool;
const {:existential true} b1174 : bool;
const {:existential true} b1175 : bool;
const {:existential true} b1176 : bool;
const {:existential true} b1177 : bool;
const {:existential true} b1178 : bool;
const {:existential true} b1179 : bool;
const {:existential true} b1180 : bool;
const {:existential true} b1181 : bool;
const {:existential true} b1182 : bool;
const {:existential true} b1183 : bool;
const {:existential true} b1184 : bool;
const {:existential true} b1185 : bool;
const {:existential true} b1186 : bool;
const {:existential true} b1187 : bool;
const {:existential true} b1188 : bool;
const {:existential true} b1189 : bool;
const {:existential true} b1190 : bool;
const {:existential true} b1191 : bool;
const {:existential true} b1192 : bool;
const {:existential true} b1193 : bool;
const {:existential true} b1194 : bool;
const {:existential true} b1195 : bool;
const {:existential true} b1196 : bool;
const {:existential true} b1197 : bool;
const {:existential true} b1198 : bool;
const {:existential true} b1199 : bool;
const {:existential true} b1200 : bool;
const {:existential true} b1201 : bool;
const {:existential true} b1202 : bool;
const {:existential true} b1203 : bool;
const {:existential true} b1204 : bool;
const {:existential true} b1205 : bool;
const {:existential true} b1206 : bool;
const {:existential true} b1207 : bool;
const {:existential true} b1208 : bool;
const {:existential true} b1209 : bool;
const {:existential true} b1210 : bool;
const {:existential true} b1211 : bool;
const {:existential true} b1212 : bool;
const {:existential true} b1213 : bool;
const {:existential true} b1214 : bool;
const {:existential true} b1215 : bool;
const {:existential true} b1216 : bool;
const {:existential true} b1217 : bool;
const {:existential true} b1218 : bool;
const {:existential true} b1219 : bool;
const {:existential true} b1220 : bool;
const {:existential true} b1221 : bool;
const {:existential true} b1222 : bool;
const {:existential true} b1223 : bool;
const {:existential true} b1224 : bool;
const {:existential true} b1225 : bool;
const {:existential true} b1226 : bool;
const {:existential true} b1227 : bool;
const {:existential true} b1228 : bool;
const {:existential true} b1229 : bool;
const {:existential true} b1230 : bool;
const {:existential true} b1231 : bool;
const {:existential true} b1232 : bool;
const {:existential true} b1233 : bool;
const {:existential true} b1234 : bool;
const {:existential true} b1235 : bool;
const {:existential true} b1236 : bool;
const {:existential true} b1237 : bool;
const {:existential true} b1238 : bool;
const {:existential true} b1239 : bool;
const {:existential true} b1240 : bool;
const {:existential true} b1241 : bool;
const {:existential true} b1242 : bool;
const {:existential true} b1243 : bool;
const {:existential true} b1244 : bool;
const {:existential true} b1245 : bool;
const {:existential true} b1246 : bool;
const {:existential true} b1247 : bool;
const {:existential true} b1248 : bool;
const {:existential true} b1249 : bool;
const {:existential true} b1250 : bool;
const {:existential true} b1251 : bool;
const {:existential true} b1252 : bool;
const {:existential true} b1253 : bool;
const {:existential true} b1254 : bool;
const {:existential true} b1255 : bool;
const {:existential true} b1256 : bool;
const {:existential true} b1257 : bool;
const {:existential true} b1258 : bool;
const {:existential true} b1259 : bool;
const {:existential true} b1260 : bool;
const {:existential true} b1261 : bool;
const {:existential true} b1262 : bool;
const {:existential true} b1263 : bool;
const {:existential true} b1264 : bool;
const {:existential true} b1265 : bool;
const {:existential true} b1266 : bool;
const {:existential true} b1267 : bool;
const {:existential true} b1268 : bool;
const {:existential true} b1269 : bool;
const {:existential true} b1270 : bool;
const {:existential true} b1271 : bool;
const {:existential true} b1272 : bool;
const {:existential true} b1273 : bool;
const {:existential true} b1274 : bool;
const {:existential true} b1275 : bool;
const {:existential true} b1276 : bool;
const {:existential true} b1277 : bool;
const {:existential true} b1278 : bool;
const {:existential true} b1279 : bool;
const {:existential true} b1280 : bool;
const {:existential true} b1281 : bool;
const {:existential true} b1282 : bool;
const {:existential true} b1283 : bool;
const {:existential true} b1284 : bool;
const {:existential true} b1285 : bool;
const {:existential true} b1286 : bool;
const {:existential true} b1287 : bool;
const {:existential true} b1288 : bool;
const {:existential true} b1289 : bool;
const {:existential true} b1290 : bool;
const {:existential true} b1291 : bool;
const {:existential true} b1292 : bool;
const {:existential true} b1293 : bool;
const {:existential true} b1294 : bool;
const {:existential true} b1295 : bool;
const {:existential true} b1296 : bool;
const {:existential true} b1297 : bool;
const {:existential true} b1298 : bool;
const {:existential true} b1299 : bool;
const {:existential true} b1300 : bool;
const {:existential true} b1301 : bool;
const {:existential true} b1302 : bool;
const {:existential true} b1303 : bool;
const {:existential true} b1304 : bool;
const {:existential true} b1305 : bool;
const {:existential true} b1306 : bool;
const {:existential true} b1307 : bool;
const {:existential true} b1308 : bool;
const {:existential true} b1309 : bool;
const {:existential true} b1310 : bool;
const {:existential true} b1311 : bool;
const {:existential true} b1312 : bool;
const {:existential true} b1313 : bool;
const {:existential true} b1314 : bool;
const {:existential true} b1315 : bool;
const {:existential true} b1316 : bool;
const {:existential true} b1317 : bool;
const {:existential true} b1318 : bool;
const {:existential true} b1319 : bool;
const {:existential true} b1320 : bool;
const {:existential true} b1321 : bool;
const {:existential true} b1322 : bool;
const {:existential true} b1323 : bool;
const {:existential true} b1324 : bool;
const {:existential true} b1325 : bool;
const {:existential true} b1326 : bool;
const {:existential true} b1327 : bool;
const {:existential true} b1328 : bool;
const {:existential true} b1329 : bool;
const {:existential true} b1330 : bool;
const {:existential true} b1331 : bool;
const {:existential true} b1332 : bool;
const {:existential true} b1333 : bool;
const {:existential true} b1334 : bool;
const {:existential true} b1335 : bool;
const {:existential true} b1336 : bool;
const {:existential true} b1337 : bool;
const {:existential true} b1338 : bool;
const {:existential true} b1339 : bool;
const {:existential true} b1340 : bool;
const {:existential true} b1341 : bool;
const {:existential true} b1342 : bool;
const {:existential true} b1343 : bool;
const {:existential true} b1344 : bool;
const {:existential true} b1345 : bool;
const {:existential true} b1346 : bool;
const {:existential true} b1347 : bool;
const {:existential true} b1348 : bool;
const {:existential true} b1349 : bool;
const {:existential true} b1350 : bool;
const {:existential true} b1351 : bool;
const {:existential true} b1352 : bool;
const {:existential true} b1353 : bool;
const {:existential true} b1354 : bool;
const {:existential true} b1355 : bool;
const {:existential true} b1356 : bool;
const {:existential true} b1357 : bool;
const {:existential true} b1358 : bool;
const {:existential true} b1359 : bool;
const {:existential true} b1360 : bool;
const {:existential true} b1361 : bool;
const {:existential true} b1362 : bool;
const {:existential true} b1363 : bool;
const {:existential true} b1364 : bool;
const {:existential true} b1365 : bool;
const {:existential true} b1366 : bool;
const {:existential true} b1367 : bool;
const {:existential true} b1368 : bool;
const {:existential true} b1369 : bool;
const {:existential true} b1370 : bool;
const {:existential true} b1371 : bool;
const {:existential true} b1372 : bool;
const {:existential true} b1373 : bool;
const {:existential true} b1374 : bool;
const {:existential true} b1375 : bool;
const {:existential true} b1376 : bool;
const {:existential true} b1377 : bool;
const {:existential true} b1378 : bool;
const {:existential true} b1379 : bool;
const {:existential true} b1380 : bool;
const {:existential true} b1381 : bool;
const {:existential true} b1382 : bool;
const {:existential true} b1383 : bool;
const {:existential true} b1384 : bool;
const {:existential true} b1385 : bool;
const {:existential true} b1386 : bool;
const {:existential true} b1387 : bool;
const {:existential true} b1388 : bool;
const {:existential true} b1389 : bool;
const {:existential true} b1390 : bool;
const {:existential true} b1391 : bool;
const {:existential true} b1392 : bool;
const {:existential true} b1393 : bool;
const {:existential true} b1394 : bool;
const {:existential true} b1395 : bool;
const {:existential true} b1396 : bool;
const {:existential true} b1397 : bool;
const {:existential true} b1398 : bool;
const {:existential true} b1399 : bool;
const {:existential true} b1400 : bool;
const {:existential true} b1401 : bool;
const {:existential true} b1402 : bool;
const {:existential true} b1403 : bool;
const {:existential true} b1404 : bool;
const {:existential true} b1405 : bool;
const {:existential true} b1406 : bool;
const {:existential true} b1407 : bool;
const {:existential true} b1408 : bool;
const {:existential true} b1409 : bool;
const {:existential true} b1410 : bool;
const {:existential true} b1411 : bool;
const {:existential true} b1412 : bool;
const {:existential true} b1413 : bool;
const {:existential true} b1414 : bool;
const {:existential true} b1415 : bool;
const {:existential true} b1416 : bool;
const {:existential true} b1417 : bool;
const {:existential true} b1418 : bool;
const {:existential true} b1419 : bool;
const {:existential true} b1420 : bool;
const {:existential true} b1421 : bool;
const {:existential true} b1422 : bool;
const {:existential true} b1423 : bool;
const {:existential true} b1424 : bool;
const {:existential true} b1425 : bool;
const {:existential true} b1426 : bool;
const {:existential true} b1427 : bool;
const {:existential true} b1428 : bool;
const {:existential true} b1429 : bool;
const {:existential true} b1430 : bool;
const {:existential true} b1431 : bool;
const {:existential true} b1432 : bool;
const {:existential true} b1433 : bool;
const {:existential true} b1434 : bool;
const {:existential true} b1435 : bool;
const {:existential true} b1436 : bool;
const {:existential true} b1437 : bool;
const {:existential true} b1438 : bool;
const {:existential true} b1439 : bool;
const {:existential true} b1440 : bool;
const {:existential true} b1441 : bool;
const {:existential true} b1442 : bool;
const {:existential true} b1443 : bool;
const {:existential true} b1444 : bool;
const {:existential true} b1445 : bool;
const {:existential true} b1446 : bool;
const {:existential true} b1447 : bool;
const {:existential true} b1448 : bool;
const {:existential true} b1449 : bool;
const {:existential true} b1450 : bool;
const {:existential true} b1451 : bool;
const {:existential true} b1452 : bool;
const {:existential true} b1453 : bool;
const {:existential true} b1454 : bool;
const {:existential true} b1455 : bool;
const {:existential true} b1456 : bool;
const {:existential true} b1457 : bool;
const {:existential true} b1458 : bool;
const {:existential true} b1459 : bool;
const {:existential true} b1460 : bool;
const {:existential true} b1461 : bool;
const {:existential true} b1462 : bool;
const {:existential true} b1463 : bool;
const {:existential true} b1464 : bool;
const {:existential true} b1465 : bool;
const {:existential true} b1466 : bool;
const {:existential true} b1467 : bool;
const {:existential true} b1468 : bool;
const {:existential true} b1469 : bool;
const {:existential true} b1470 : bool;
const {:existential true} b1471 : bool;
const {:existential true} b1472 : bool;
const {:existential true} b1473 : bool;
const {:existential true} b1474 : bool;
const {:existential true} b1475 : bool;
const {:existential true} b1476 : bool;
const {:existential true} b1477 : bool;
const {:existential true} b1478 : bool;
const {:existential true} b1479 : bool;
const {:existential true} b1480 : bool;
const {:existential true} b1481 : bool;
const {:existential true} b1482 : bool;
const {:existential true} b1483 : bool;
const {:existential true} b1484 : bool;
const {:existential true} b1485 : bool;
const {:existential true} b1486 : bool;
const {:existential true} b1487 : bool;
const {:existential true} b1488 : bool;
const {:existential true} b1489 : bool;
const {:existential true} b1490 : bool;
const {:existential true} b1491 : bool;
const {:existential true} b1492 : bool;
const {:existential true} b1493 : bool;
const {:existential true} b1494 : bool;
const {:existential true} b1495 : bool;
const {:existential true} b1496 : bool;
const {:existential true} b1497 : bool;
const {:existential true} b1498 : bool;
const {:existential true} b1499 : bool;
const {:existential true} b1500 : bool;
const {:existential true} b1501 : bool;
const {:existential true} b1502 : bool;
const {:existential true} b1503 : bool;
const {:existential true} b1504 : bool;
const {:existential true} b1505 : bool;
const {:existential true} b1506 : bool;
const {:existential true} b1507 : bool;
const {:existential true} b1508 : bool;
const {:existential true} b1509 : bool;
const {:existential true} b1510 : bool;
const {:existential true} b1511 : bool;
const {:existential true} b1512 : bool;
const {:existential true} b1513 : bool;
const {:existential true} b1514 : bool;
const {:existential true} b1515 : bool;
const {:existential true} b1516 : bool;
const {:existential true} b1517 : bool;
const {:existential true} b1518 : bool;
const {:existential true} b1519 : bool;
const {:existential true} b1520 : bool;
const {:existential true} b1521 : bool;
const {:existential true} b1522 : bool;
const {:existential true} b1523 : bool;
const {:existential true} b1524 : bool;
const {:existential true} b1525 : bool;
const {:existential true} b1526 : bool;
const {:existential true} b1527 : bool;
const {:existential true} b1528 : bool;
const {:existential true} b1529 : bool;
const {:existential true} b1530 : bool;
const {:existential true} b1531 : bool;
const {:existential true} b1532 : bool;
const {:existential true} b1533 : bool;
const {:existential true} b1534 : bool;
const {:existential true} b1535 : bool;
const {:existential true} b1536 : bool;
const {:existential true} b1537 : bool;
const {:existential true} b1538 : bool;
const {:existential true} b1539 : bool;
const {:existential true} b1540 : bool;
const {:existential true} b1541 : bool;
const {:existential true} b1542 : bool;
const {:existential true} b1543 : bool;
const {:existential true} b1544 : bool;
const {:existential true} b1545 : bool;
const {:existential true} b1546 : bool;
const {:existential true} b1547 : bool;
const {:existential true} b1548 : bool;
const {:existential true} b1549 : bool;
const {:existential true} b1550 : bool;
const {:existential true} b1551 : bool;
const {:existential true} b1552 : bool;
const {:existential true} b1553 : bool;
const {:existential true} b1554 : bool;
const {:existential true} b1555 : bool;
const {:existential true} b1556 : bool;
const {:existential true} b1557 : bool;
const {:existential true} b1558 : bool;
const {:existential true} b1559 : bool;
const {:existential true} b1560 : bool;
const {:existential true} b1561 : bool;
const {:existential true} b1562 : bool;
const {:existential true} b1563 : bool;
const {:existential true} b1564 : bool;
const {:existential true} b1565 : bool;
const {:existential true} b1566 : bool;
const {:existential true} b1567 : bool;
const {:existential true} b1568 : bool;
const {:existential true} b1569 : bool;
const {:existential true} b1570 : bool;
const {:existential true} b1571 : bool;
const {:existential true} b1572 : bool;
const {:existential true} b1573 : bool;
const {:existential true} b1574 : bool;
const {:existential true} b1575 : bool;
const {:existential true} b1576 : bool;
const {:existential true} b1577 : bool;
const {:existential true} b1578 : bool;
const {:existential true} b1579 : bool;
const {:existential true} b1580 : bool;
const {:existential true} b1581 : bool;
const {:existential true} b1582 : bool;
const {:existential true} b1583 : bool;
const {:existential true} b1584 : bool;
const {:existential true} b1585 : bool;
const {:existential true} b1586 : bool;
const {:existential true} b1587 : bool;
const {:existential true} b1588 : bool;
const {:existential true} b1589 : bool;
const {:existential true} b1590 : bool;
const {:existential true} b1591 : bool;
const {:existential true} b1592 : bool;
const {:existential true} b1593 : bool;
const {:existential true} b1594 : bool;
const {:existential true} b1595 : bool;
const {:existential true} b1596 : bool;
const {:existential true} b1597 : bool;
const {:existential true} b1598 : bool;
const {:existential true} b1599 : bool;
const {:existential true} b1600 : bool;
const {:existential true} b1601 : bool;
const {:existential true} b1602 : bool;
const {:existential true} b1603 : bool;
const {:existential true} b1604 : bool;
const {:existential true} b1605 : bool;
const {:existential true} b1606 : bool;
const {:existential true} b1607 : bool;
const {:existential true} b1608 : bool;
const {:existential true} b1609 : bool;
const {:existential true} b1610 : bool;
const {:existential true} b1611 : bool;
const {:existential true} b1612 : bool;
const {:existential true} b1613 : bool;
const {:existential true} b1614 : bool;
const {:existential true} b1615 : bool;
const {:existential true} b1616 : bool;
const {:existential true} b1617 : bool;
const {:existential true} b1618 : bool;
const {:existential true} b1619 : bool;
const {:existential true} b1620 : bool;
const {:existential true} b1621 : bool;
const {:existential true} b1622 : bool;
const {:existential true} b1623 : bool;
const {:existential true} b1624 : bool;
const {:existential true} b1625 : bool;
const {:existential true} b1626 : bool;
const {:existential true} b1627 : bool;
const {:existential true} b1628 : bool;
const {:existential true} b1629 : bool;
const {:existential true} b1630 : bool;
const {:existential true} b1631 : bool;
const {:existential true} b1632 : bool;
const {:existential true} b1633 : bool;
const {:existential true} b1634 : bool;
const {:existential true} b1635 : bool;
const {:existential true} b1636 : bool;
const {:existential true} b1637 : bool;
const {:existential true} b1638 : bool;
const {:existential true} b1639 : bool;
const {:existential true} b1640 : bool;
const {:existential true} b1641 : bool;
const {:existential true} b1642 : bool;
const {:existential true} b1643 : bool;
const {:existential true} b1644 : bool;
const {:existential true} b1645 : bool;
const {:existential true} b1646 : bool;
const {:existential true} b1647 : bool;
const {:existential true} b1648 : bool;
const {:existential true} b1649 : bool;
const {:existential true} b1650 : bool;
const {:existential true} b1651 : bool;
const {:existential true} b1652 : bool;
const {:existential true} b1653 : bool;
const {:existential true} b1654 : bool;
const {:existential true} b1655 : bool;
const {:existential true} b1656 : bool;
const {:existential true} b1657 : bool;
const {:existential true} b1658 : bool;
const {:existential true} b1659 : bool;
const {:existential true} b1660 : bool;
const {:existential true} b1661 : bool;
const {:existential true} b1662 : bool;
const {:existential true} b1663 : bool;
const {:existential true} b1664 : bool;
const {:existential true} b1665 : bool;
const {:existential true} b1666 : bool;
const {:existential true} b1667 : bool;
const {:existential true} b1668 : bool;
const {:existential true} b1669 : bool;
const {:existential true} b1670 : bool;
const {:existential true} b1671 : bool;
const {:existential true} b1672 : bool;
const {:existential true} b1673 : bool;
const {:existential true} b1674 : bool;
const {:existential true} b1675 : bool;
const {:existential true} b1676 : bool;
const {:existential true} b1677 : bool;
const {:existential true} b1678 : bool;
const {:existential true} b1679 : bool;
const {:existential true} b1680 : bool;
const {:existential true} b1681 : bool;
const {:existential true} b1682 : bool;
const {:existential true} b1683 : bool;
const {:existential true} b1684 : bool;
const {:existential true} b1685 : bool;
const {:existential true} b1686 : bool;
const {:existential true} b1687 : bool;
const {:existential true} b1688 : bool;
const {:existential true} b1689 : bool;
const {:existential true} b1690 : bool;
const {:existential true} b1691 : bool;
const {:existential true} b1692 : bool;
const {:existential true} b1693 : bool;
const {:existential true} b1694 : bool;
const {:existential true} b1695 : bool;
const {:existential true} b1696 : bool;
const {:existential true} b1697 : bool;
const {:existential true} b1698 : bool;
const {:existential true} b1699 : bool;
const {:existential true} b1700 : bool;
const {:existential true} b1701 : bool;
const {:existential true} b1702 : bool;
const {:existential true} b1703 : bool;
const {:existential true} b1704 : bool;
const {:existential true} b1705 : bool;
const {:existential true} b1706 : bool;
const {:existential true} b1707 : bool;
const {:existential true} b1708 : bool;
const {:existential true} b1709 : bool;
const {:existential true} b1710 : bool;
const {:existential true} b1711 : bool;
const {:existential true} b1712 : bool;
const {:existential true} b1713 : bool;
const {:existential true} b1714 : bool;
const {:existential true} b1715 : bool;
const {:existential true} b1716 : bool;
const {:existential true} b1717 : bool;
const {:existential true} b1718 : bool;
const {:existential true} b1719 : bool;
const {:existential true} b1720 : bool;
const {:existential true} b1721 : bool;
const {:existential true} b1722 : bool;
const {:existential true} b1723 : bool;
const {:existential true} b1724 : bool;
const {:existential true} b1725 : bool;
const {:existential true} b1726 : bool;
const {:existential true} b1727 : bool;
const {:existential true} b1728 : bool;
const {:existential true} b1729 : bool;
const {:existential true} b1730 : bool;
const {:existential true} b1731 : bool;
const {:existential true} b1732 : bool;
const {:existential true} b1733 : bool;
const {:existential true} b1734 : bool;
const {:existential true} b1735 : bool;
const {:existential true} b1736 : bool;
const {:existential true} b1737 : bool;
const {:existential true} b1738 : bool;
const {:existential true} b1739 : bool;
const {:existential true} b1740 : bool;
const {:existential true} b1741 : bool;
const {:existential true} b1742 : bool;
const {:existential true} b1743 : bool;
const {:existential true} b1744 : bool;
const {:existential true} b1745 : bool;
const {:existential true} b1746 : bool;
const {:existential true} b1747 : bool;
const {:existential true} b1748 : bool;
const {:existential true} b1749 : bool;
const {:existential true} b1750 : bool;
const {:existential true} b1751 : bool;
const {:existential true} b1752 : bool;
const {:existential true} b1753 : bool;
const {:existential true} b1754 : bool;
const {:existential true} b1755 : bool;
const {:existential true} b1756 : bool;
const {:existential true} b1757 : bool;
const {:existential true} b1758 : bool;
const {:existential true} b1759 : bool;
const {:existential true} b1760 : bool;
const {:existential true} b1761 : bool;
const {:existential true} b1762 : bool;
const {:existential true} b1763 : bool;
const {:existential true} b1764 : bool;
const {:existential true} b1765 : bool;
const {:existential true} b1766 : bool;
const {:existential true} b1767 : bool;
const {:existential true} b1768 : bool;
const {:existential true} b1769 : bool;
const {:existential true} b1770 : bool;
const {:existential true} b1771 : bool;
const {:existential true} b1772 : bool;
const {:existential true} b1773 : bool;
const {:existential true} b1774 : bool;
const {:existential true} b1775 : bool;
const {:existential true} b1776 : bool;
const {:existential true} b1777 : bool;
const {:existential true} b1778 : bool;
const {:existential true} b1779 : bool;
const {:existential true} b1780 : bool;
const {:existential true} b1781 : bool;
const {:existential true} b1782 : bool;
const {:existential true} b1783 : bool;
const {:existential true} b1784 : bool;
const {:existential true} b1785 : bool;
const {:existential true} b1786 : bool;
const {:existential true} b1787 : bool;
const {:existential true} b1788 : bool;
const {:existential true} b1789 : bool;
const {:existential true} b1790 : bool;
const {:existential true} b1791 : bool;
const {:existential true} b1792 : bool;
const {:existential true} b1793 : bool;
const {:existential true} b1794 : bool;
const {:existential true} b1795 : bool;
const {:existential true} b1796 : bool;
const {:existential true} b1797 : bool;
const {:existential true} b1798 : bool;
const {:existential true} b1799 : bool;
const {:existential true} b1800 : bool;
const {:existential true} b1801 : bool;
const {:existential true} b1802 : bool;
const {:existential true} b1803 : bool;
const {:existential true} b1804 : bool;
const {:existential true} b1805 : bool;
const {:existential true} b1806 : bool;
const {:existential true} b1807 : bool;
const {:existential true} b1808 : bool;
const {:existential true} b1809 : bool;
const {:existential true} b1810 : bool;
const {:existential true} b1811 : bool;
const {:existential true} b1812 : bool;
const {:existential true} b1813 : bool;
const {:existential true} b1814 : bool;
const {:existential true} b1815 : bool;
const {:existential true} b1816 : bool;
const {:existential true} b1817 : bool;
const {:existential true} b1818 : bool;
const {:existential true} b1819 : bool;
const {:existential true} b1820 : bool;
const {:existential true} b1821 : bool;
const {:existential true} b1822 : bool;
const {:existential true} b1823 : bool;
const {:existential true} b1824 : bool;
const {:existential true} b1825 : bool;
const {:existential true} b1826 : bool;
const {:existential true} b1827 : bool;
const {:existential true} b1828 : bool;
const {:existential true} b1829 : bool;
const {:existential true} b1830 : bool;
const {:existential true} b1831 : bool;
const {:existential true} b1832 : bool;
const {:existential true} b1833 : bool;
const {:existential true} b1834 : bool;
const {:existential true} b1835 : bool;
const {:existential true} b1836 : bool;
const {:existential true} b1837 : bool;
const {:existential true} b1838 : bool;
const {:existential true} b1839 : bool;
const {:existential true} b1840 : bool;
const {:existential true} b1841 : bool;
const {:existential true} b1842 : bool;
const {:existential true} b1843 : bool;
const {:existential true} b1844 : bool;
const {:existential true} b1845 : bool;
const {:existential true} b1846 : bool;
const {:existential true} b1847 : bool;
const {:existential true} b1848 : bool;
const {:existential true} b1849 : bool;
const {:existential true} b1850 : bool;
const {:existential true} b1851 : bool;
const {:existential true} b1852 : bool;
const {:existential true} b1853 : bool;
const {:existential true} b1854 : bool;
const {:existential true} b1855 : bool;
const {:existential true} b1856 : bool;
const {:existential true} b1857 : bool;
const {:existential true} b1858 : bool;
const {:existential true} b1859 : bool;
const {:existential true} b1860 : bool;
const {:existential true} b1861 : bool;
const {:existential true} b1862 : bool;
const {:existential true} b1863 : bool;
const {:existential true} b1864 : bool;
const {:existential true} b1865 : bool;
const {:existential true} b1866 : bool;
const {:existential true} b1867 : bool;
const {:existential true} b1868 : bool;
const {:existential true} b1869 : bool;
const {:existential true} b1870 : bool;
const {:existential true} b1871 : bool;
const {:existential true} b1872 : bool;
const {:existential true} b1873 : bool;
const {:existential true} b1874 : bool;
const {:existential true} b1875 : bool;
const {:existential true} b1876 : bool;
const {:existential true} b1877 : bool;
const {:existential true} b1878 : bool;
const {:existential true} b1879 : bool;
const {:existential true} b1880 : bool;
const {:existential true} b1881 : bool;
const {:existential true} b1882 : bool;
const {:existential true} b1883 : bool;
const {:existential true} b1884 : bool;
const {:existential true} b1885 : bool;
const {:existential true} b1886 : bool;
const {:existential true} b1887 : bool;
const {:existential true} b1888 : bool;
const {:existential true} b1889 : bool;
const {:existential true} b1890 : bool;
const {:existential true} b1891 : bool;
const {:existential true} b1892 : bool;
const {:existential true} b1893 : bool;
const {:existential true} b1894 : bool;
const {:existential true} b1895 : bool;
const {:existential true} b1896 : bool;
const {:existential true} b1897 : bool;
const {:existential true} b1898 : bool;
const {:existential true} b1899 : bool;
const {:existential true} b1900 : bool;
const {:existential true} b1901 : bool;
const {:existential true} b1902 : bool;
const {:existential true} b1903 : bool;
const {:existential true} b1904 : bool;
const {:existential true} b1905 : bool;
const {:existential true} b1906 : bool;
const {:existential true} b1907 : bool;
const {:existential true} b1908 : bool;
const {:existential true} b1909 : bool;
const {:existential true} b1910 : bool;
const {:existential true} b1911 : bool;
const {:existential true} b1912 : bool;
const {:existential true} b1913 : bool;
const {:existential true} b1914 : bool;
const {:existential true} b1915 : bool;
const {:existential true} b1916 : bool;
const {:existential true} b1917 : bool;
const {:existential true} b1918 : bool;
const {:existential true} b1919 : bool;
const {:existential true} b1920 : bool;
const {:existential true} b1921 : bool;
const {:existential true} b1922 : bool;
const {:existential true} b1923 : bool;
const {:existential true} b1924 : bool;
const {:existential true} b1925 : bool;
const {:existential true} b1926 : bool;
const {:existential true} b1927 : bool;
const {:existential true} b1928 : bool;
const {:existential true} b1929 : bool;
const {:existential true} b1930 : bool;
const {:existential true} b1931 : bool;
const {:existential true} b1932 : bool;
const {:existential true} b1933 : bool;
const {:existential true} b1934 : bool;
const {:existential true} b1935 : bool;
const {:existential true} b1936 : bool;
const {:existential true} b1937 : bool;
const {:existential true} b1938 : bool;
const {:existential true} b1939 : bool;
const {:existential true} b1940 : bool;
const {:existential true} b1941 : bool;
const {:existential true} b1942 : bool;
const {:existential true} b1943 : bool;
const {:existential true} b1944 : bool;
const {:existential true} b1945 : bool;
const {:existential true} b1946 : bool;
const {:existential true} b1947 : bool;
const {:existential true} b1948 : bool;
const {:existential true} b1949 : bool;
const {:existential true} b1950 : bool;
const {:existential true} b1951 : bool;
const {:existential true} b1952 : bool;
const {:existential true} b1953 : bool;
const {:existential true} b1954 : bool;
const {:existential true} b1955 : bool;
const {:existential true} b1956 : bool;
const {:existential true} b1957 : bool;
const {:existential true} b1958 : bool;
const {:existential true} b1959 : bool;
const {:existential true} b1960 : bool;
const {:existential true} b1961 : bool;
const {:existential true} b1962 : bool;
const {:existential true} b1963 : bool;
const {:existential true} b1964 : bool;
const {:existential true} b1965 : bool;
const {:existential true} b1966 : bool;
const {:existential true} b1967 : bool;
const {:existential true} b1968 : bool;
const {:existential true} b1969 : bool;
const {:existential true} b1970 : bool;
const {:existential true} b1971 : bool;
const {:existential true} b1972 : bool;
const {:existential true} b1973 : bool;
const {:existential true} b1974 : bool;
const {:existential true} b1975 : bool;
const {:existential true} b1976 : bool;
const {:existential true} b1977 : bool;
const {:existential true} b1978 : bool;
const {:existential true} b1979 : bool;
const {:existential true} b1980 : bool;
const {:existential true} b1981 : bool;
const {:existential true} b1982 : bool;
const {:existential true} b1983 : bool;
const {:existential true} b1984 : bool;
const {:existential true} b1985 : bool;
const {:existential true} b1986 : bool;
const {:existential true} b1987 : bool;
const {:existential true} b1988 : bool;
const {:existential true} b1989 : bool;
const {:existential true} b1990 : bool;
const {:existential true} b1991 : bool;
const {:existential true} b1992 : bool;
const {:existential true} b1993 : bool;
const {:existential true} b1994 : bool;
const {:existential true} b1995 : bool;
const {:existential true} b1996 : bool;
const {:existential true} b1997 : bool;
const {:existential true} b1998 : bool;
const {:existential true} b1999 : bool;
const {:existential true} b2000 : bool;
const {:existential true} b2001 : bool;
const {:existential true} b2002 : bool;
const {:existential true} b2003 : bool;
const {:existential true} b2004 : bool;
const {:existential true} b2005 : bool;
const {:existential true} b2006 : bool;
const {:existential true} b2007 : bool;
const {:existential true} b2008 : bool;
const {:existential true} b2009 : bool;
const {:existential true} b2010 : bool;
const {:existential true} b2011 : bool;
const {:existential true} b2012 : bool;
const {:existential true} b2013 : bool;
const {:existential true} b2014 : bool;
const {:existential true} b2015 : bool;
const {:existential true} b2016 : bool;
const {:existential true} b2017 : bool;
const {:existential true} b2018 : bool;
const {:existential true} b2019 : bool;
const {:existential true} b2020 : bool;
const {:existential true} b2021 : bool;
const {:existential true} b2022 : bool;
const {:existential true} b2023 : bool;
const {:existential true} b2024 : bool;
const {:existential true} b2025 : bool;
const {:existential true} b2026 : bool;
const {:existential true} b2027 : bool;
const {:existential true} b2028 : bool;
const {:existential true} b2029 : bool;
const {:existential true} b2030 : bool;
const {:existential true} b2031 : bool;
const {:existential true} b2032 : bool;
const {:existential true} b2033 : bool;
const {:existential true} b2034 : bool;
const {:existential true} b2035 : bool;
const {:existential true} b2036 : bool;
const {:existential true} b2037 : bool;
const {:existential true} b2038 : bool;
const {:existential true} b2039 : bool;
const {:existential true} b2040 : bool;
const {:existential true} b2041 : bool;
const {:existential true} b2042 : bool;
const {:existential true} b2043 : bool;
const {:existential true} b2044 : bool;
const {:existential true} b2045 : bool;
const {:existential true} b2046 : bool;
const {:existential true} b2047 : bool;
const {:existential true} b2048 : bool;
const {:existential true} b2049 : bool;
const {:existential true} b2050 : bool;
const {:existential true} b2051 : bool;
const {:existential true} b2052 : bool;
const {:existential true} b2053 : bool;
const {:existential true} b2054 : bool;
const {:existential true} b2055 : bool;
const {:existential true} b2056 : bool;
const {:existential true} b2057 : bool;
const {:existential true} b2058 : bool;
const {:existential true} b2059 : bool;
const {:existential true} b2060 : bool;
const {:existential true} b2061 : bool;
const {:existential true} b2062 : bool;
const {:existential true} b2063 : bool;
const {:existential true} b2064 : bool;
const {:existential true} b2065 : bool;
const {:existential true} b2066 : bool;
const {:existential true} b2067 : bool;
const {:existential true} b2068 : bool;
const {:existential true} b2069 : bool;
const {:existential true} b2070 : bool;
const {:existential true} b2071 : bool;
const {:existential true} b2072 : bool;
const {:existential true} b2073 : bool;
const {:existential true} b2074 : bool;
const {:existential true} b2075 : bool;
const {:existential true} b2076 : bool;
const {:existential true} b2077 : bool;
const {:existential true} b2078 : bool;
const {:existential true} b2079 : bool;
const {:existential true} b2080 : bool;
const {:existential true} b2081 : bool;
const {:existential true} b2082 : bool;
const {:existential true} b2083 : bool;
const {:existential true} b2084 : bool;
const {:existential true} b2085 : bool;
const {:existential true} b2086 : bool;
const {:existential true} b2087 : bool;
const {:existential true} b2088 : bool;
const {:existential true} b2089 : bool;
const {:existential true} b2090 : bool;
const {:existential true} b2091 : bool;
const {:existential true} b2092 : bool;
const {:existential true} b2093 : bool;
const {:existential true} b2094 : bool;
const {:existential true} b2095 : bool;
const {:existential true} b2096 : bool;
const {:existential true} b2097 : bool;
const {:existential true} b2098 : bool;
const {:existential true} b2099 : bool;
const {:existential true} b2100 : bool;
const {:existential true} b2101 : bool;
const {:existential true} b2102 : bool;
const {:existential true} b2103 : bool;
const {:existential true} b2104 : bool;
const {:existential true} b2105 : bool;
const {:existential true} b2106 : bool;
const {:existential true} b2107 : bool;
const {:existential true} b2108 : bool;
const {:existential true} b2109 : bool;
const {:existential true} b2110 : bool;
const {:existential true} b2111 : bool;
const {:existential true} b2112 : bool;
const {:existential true} b2113 : bool;
const {:existential true} b2114 : bool;
const {:existential true} b2115 : bool;
const {:existential true} b2116 : bool;
const {:existential true} b2117 : bool;
const {:existential true} b2118 : bool;
const {:existential true} b2119 : bool;
const {:existential true} b2120 : bool;
const {:existential true} b2121 : bool;
const {:existential true} b2122 : bool;
const {:existential true} b2123 : bool;
const {:existential true} b2124 : bool;
const {:existential true} b2125 : bool;
const {:existential true} b2126 : bool;
const {:existential true} b2127 : bool;
const {:existential true} b2128 : bool;
const {:existential true} b2129 : bool;
const {:existential true} b2130 : bool;
const {:existential true} b2131 : bool;
const {:existential true} b2132 : bool;
const {:existential true} b2133 : bool;
const {:existential true} b2134 : bool;
const {:existential true} b2135 : bool;
const {:existential true} b2136 : bool;
const {:existential true} b2137 : bool;
const {:existential true} b2138 : bool;
const {:existential true} b2139 : bool;
const {:existential true} b2140 : bool;
const {:existential true} b2141 : bool;
const {:existential true} b2142 : bool;
const {:existential true} b2143 : bool;
const {:existential true} b2144 : bool;
const {:existential true} b2145 : bool;
const {:existential true} b2146 : bool;
const {:existential true} b2147 : bool;
const {:existential true} b2148 : bool;
const {:existential true} b2149 : bool;
const {:existential true} b2150 : bool;
const {:existential true} b2151 : bool;
const {:existential true} b2152 : bool;
const {:existential true} b2153 : bool;
const {:existential true} b2154 : bool;
const {:existential true} b2155 : bool;
const {:existential true} b2156 : bool;
const {:existential true} b2157 : bool;
const {:existential true} b2158 : bool;
const {:existential true} b2159 : bool;
const {:existential true} b2160 : bool;
const {:existential true} b2161 : bool;
const {:existential true} b2162 : bool;
const {:existential true} b2163 : bool;
const {:existential true} b2164 : bool;
const {:existential true} b2165 : bool;
const {:existential true} b2166 : bool;
const {:existential true} b2167 : bool;
const {:existential true} b2168 : bool;
const {:existential true} b2169 : bool;
const {:existential true} b2170 : bool;
const {:existential true} b2171 : bool;
const {:existential true} b2172 : bool;
const {:existential true} b2173 : bool;
const {:existential true} b2174 : bool;
const {:existential true} b2175 : bool;
const {:existential true} b2176 : bool;
const {:existential true} b2177 : bool;
const {:existential true} b2178 : bool;
const {:existential true} b2179 : bool;
const {:existential true} b2180 : bool;
const {:existential true} b2181 : bool;
const {:existential true} b2182 : bool;
const {:existential true} b2183 : bool;
const {:existential true} b2184 : bool;
const {:existential true} b2185 : bool;
const {:existential true} b2186 : bool;
const {:existential true} b2187 : bool;
const {:existential true} b2188 : bool;
const {:existential true} b2189 : bool;
const {:existential true} b2190 : bool;
const {:existential true} b2191 : bool;
const {:existential true} b2192 : bool;
const {:existential true} b2193 : bool;
const {:existential true} b2194 : bool;
const {:existential true} b2195 : bool;
const {:existential true} b2196 : bool;
const {:existential true} b2197 : bool;
const {:existential true} b2198 : bool;
const {:existential true} b2199 : bool;
const {:existential true} b2200 : bool;
const {:existential true} b2201 : bool;
const {:existential true} b2202 : bool;
const {:existential true} b2203 : bool;
const {:existential true} b2204 : bool;
const {:existential true} b2205 : bool;
const {:existential true} b2206 : bool;
const {:existential true} b2207 : bool;
const {:existential true} b2208 : bool;
const {:existential true} b2209 : bool;
const {:existential true} b2210 : bool;
const {:existential true} b2211 : bool;
const {:existential true} b2212 : bool;
const {:existential true} b2213 : bool;
const {:existential true} b2214 : bool;
const {:existential true} b2215 : bool;
const {:existential true} b2216 : bool;
const {:existential true} b2217 : bool;
const {:existential true} b2218 : bool;
const {:existential true} b2219 : bool;
const {:existential true} b2220 : bool;
const {:existential true} b2221 : bool;
const {:existential true} b2222 : bool;
const {:existential true} b2223 : bool;
const {:existential true} b2224 : bool;
const {:existential true} b2225 : bool;
const {:existential true} b2226 : bool;
const {:existential true} b2227 : bool;
const {:existential true} b2228 : bool;
const {:existential true} b2229 : bool;
const {:existential true} b2230 : bool;
const {:existential true} b2231 : bool;
const {:existential true} b2232 : bool;
const {:existential true} b2233 : bool;
const {:existential true} b2234 : bool;
const {:existential true} b2235 : bool;
const {:existential true} b2236 : bool;
const {:existential true} b2237 : bool;
const {:existential true} b2238 : bool;
const {:existential true} b2239 : bool;
const {:existential true} b2240 : bool;
const {:existential true} b2241 : bool;
const {:existential true} b2242 : bool;
const {:existential true} b2243 : bool;
const {:existential true} b2244 : bool;
const {:existential true} b2245 : bool;
const {:existential true} b2246 : bool;
const {:existential true} b2247 : bool;
const {:existential true} b2248 : bool;
const {:existential true} b2249 : bool;
const {:existential true} b2250 : bool;
const {:existential true} b2251 : bool;
const {:existential true} b2252 : bool;
const {:existential true} b2253 : bool;
const {:existential true} b2254 : bool;
const {:existential true} b2255 : bool;
const {:existential true} b2256 : bool;
const {:existential true} b2257 : bool;
const {:existential true} b2258 : bool;
const {:existential true} b2259 : bool;
const {:existential true} b2260 : bool;
const {:existential true} b2261 : bool;
const {:existential true} b2262 : bool;
const {:existential true} b2263 : bool;
const {:existential true} b2264 : bool;
const {:existential true} b2265 : bool;
const {:existential true} b2266 : bool;
const {:existential true} b2267 : bool;
const {:existential true} b2268 : bool;
const {:existential true} b2269 : bool;
const {:existential true} b2270 : bool;
const {:existential true} b2271 : bool;
const {:existential true} b2272 : bool;
const {:existential true} b2273 : bool;
const {:existential true} b2274 : bool;
const {:existential true} b2275 : bool;
const {:existential true} b2276 : bool;
const {:existential true} b2277 : bool;
const {:existential true} b2278 : bool;
const {:existential true} b2279 : bool;
const {:existential true} b2280 : bool;
const {:existential true} b2281 : bool;
const {:existential true} b2282 : bool;
const {:existential true} b2283 : bool;
const {:existential true} b2284 : bool;
const {:existential true} b2285 : bool;
const {:existential true} b2286 : bool;
const {:existential true} b2287 : bool;
const {:existential true} b2288 : bool;
const {:existential true} b2289 : bool;
const {:existential true} b2290 : bool;
const {:existential true} b2291 : bool;
const {:existential true} b2292 : bool;
const {:existential true} b2293 : bool;
const {:existential true} b2294 : bool;
const {:existential true} b2295 : bool;
const {:existential true} b2296 : bool;
const {:existential true} b2297 : bool;
const {:existential true} b2298 : bool;
const {:existential true} b2299 : bool;
const {:existential true} b2300 : bool;
const {:existential true} b2301 : bool;
const {:existential true} b2302 : bool;
const {:existential true} b2303 : bool;
const {:existential true} b2304 : bool;
const {:existential true} b2305 : bool;
const {:existential true} b2306 : bool;
const {:existential true} b2307 : bool;
const {:existential true} b2308 : bool;
const {:existential true} b2309 : bool;
const {:existential true} b2310 : bool;
const {:existential true} b2311 : bool;
const {:existential true} b2312 : bool;
const {:existential true} b2313 : bool;
const {:existential true} b2314 : bool;
const {:existential true} b2315 : bool;
const {:existential true} b2316 : bool;
const {:existential true} b2317 : bool;
const {:existential true} b2318 : bool;
const {:existential true} b2319 : bool;
const {:existential true} b2320 : bool;
const {:existential true} b2321 : bool;
const {:existential true} b2322 : bool;
const {:existential true} b2323 : bool;
const {:existential true} b2324 : bool;
const {:existential true} b2325 : bool;
const {:existential true} b2326 : bool;
const {:existential true} b2327 : bool;
const {:existential true} b2328 : bool;
const {:existential true} b2329 : bool;
const {:existential true} b2330 : bool;
const {:existential true} b2331 : bool;
const {:existential true} b2332 : bool;
const {:existential true} b2333 : bool;
const {:existential true} b2334 : bool;
const {:existential true} b2335 : bool;
const {:existential true} b2336 : bool;
const {:existential true} b2337 : bool;
const {:existential true} b2338 : bool;
const {:existential true} b2339 : bool;
const {:existential true} b2340 : bool;
const {:existential true} b2341 : bool;
const {:existential true} b2342 : bool;
const {:existential true} b2343 : bool;
const {:existential true} b2344 : bool;
const {:existential true} b2345 : bool;
const {:existential true} b2346 : bool;
const {:existential true} b2347 : bool;
const {:existential true} b2348 : bool;
const {:existential true} b2349 : bool;
const {:existential true} b2350 : bool;
const {:existential true} b2351 : bool;
const {:existential true} b2352 : bool;
const {:existential true} b2353 : bool;
const {:existential true} b2354 : bool;
const {:existential true} b2355 : bool;
const {:existential true} b2356 : bool;
const {:existential true} b2357 : bool;
const {:existential true} b2358 : bool;
const {:existential true} b2359 : bool;
const {:existential true} b2360 : bool;
const {:existential true} b2361 : bool;
const {:existential true} b2362 : bool;
const {:existential true} b2363 : bool;
const {:existential true} b2364 : bool;
const {:existential true} b2365 : bool;
const {:existential true} b2366 : bool;
const {:existential true} b2367 : bool;
const {:existential true} b2368 : bool;
const {:existential true} b2369 : bool;
const {:existential true} b2370 : bool;
const {:existential true} b2371 : bool;
const {:existential true} b2372 : bool;
const {:existential true} b2373 : bool;
const {:existential true} b2374 : bool;
const {:existential true} b2375 : bool;
const {:existential true} b2376 : bool;
const {:existential true} b2377 : bool;
const {:existential true} b2378 : bool;
const {:existential true} b2379 : bool;
const {:existential true} b2380 : bool;
const {:existential true} b2381 : bool;
const {:existential true} b2382 : bool;
const {:existential true} b2383 : bool;
const {:existential true} b2384 : bool;
const {:existential true} b2385 : bool;
const {:existential true} b2386 : bool;
const {:existential true} b2387 : bool;
const {:existential true} b2388 : bool;
const {:existential true} b2389 : bool;
const {:existential true} b2390 : bool;
const {:existential true} b2391 : bool;
const {:existential true} b2392 : bool;
const {:existential true} b2393 : bool;
const {:existential true} b2394 : bool;
const {:existential true} b2395 : bool;
const {:existential true} b2396 : bool;
const {:existential true} b2397 : bool;
const {:existential true} b2398 : bool;
const {:existential true} b2399 : bool;
const {:existential true} b2400 : bool;
const {:existential true} b2401 : bool;
const {:existential true} b2402 : bool;
const {:existential true} b2403 : bool;
const {:existential true} b2404 : bool;
const {:existential true} b2405 : bool;
const {:existential true} b2406 : bool;
const {:existential true} b2407 : bool;
const {:existential true} b2408 : bool;
const {:existential true} b2409 : bool;
const {:existential true} b2410 : bool;
const {:existential true} b2411 : bool;
const {:existential true} b2412 : bool;
const {:existential true} b2413 : bool;
const {:existential true} b2414 : bool;
const {:existential true} b2415 : bool;
const {:existential true} b2416 : bool;
const {:existential true} b2417 : bool;
const {:existential true} b2418 : bool;
const {:existential true} b2419 : bool;
const {:existential true} b2420 : bool;
const {:existential true} b2421 : bool;
const {:existential true} b2422 : bool;
const {:existential true} b2423 : bool;
const {:existential true} b2424 : bool;
const {:existential true} b2425 : bool;
const {:existential true} b2426 : bool;
const {:existential true} b2427 : bool;
const {:existential true} b2428 : bool;
const {:existential true} b2429 : bool;
const {:existential true} b2430 : bool;
const {:existential true} b2431 : bool;
const {:existential true} b2432 : bool;
const {:existential true} b2433 : bool;
const {:existential true} b2434 : bool;
const {:existential true} b2435 : bool;
const {:existential true} b2436 : bool;
const {:existential true} b2437 : bool;
const {:existential true} b2438 : bool;
const {:existential true} b2439 : bool;
const {:existential true} b2440 : bool;
const {:existential true} b2441 : bool;
const {:existential true} b2442 : bool;
const {:existential true} b2443 : bool;
const {:existential true} b2444 : bool;
const {:existential true} b2445 : bool;
const {:existential true} b2446 : bool;
const {:existential true} b2447 : bool;
const {:existential true} b2448 : bool;
const {:existential true} b2449 : bool;
const {:existential true} b2450 : bool;
const {:existential true} b2451 : bool;
const {:existential true} b2452 : bool;
const {:existential true} b2453 : bool;
const {:existential true} b2454 : bool;
const {:existential true} b2455 : bool;
const {:existential true} b2456 : bool;
const {:existential true} b2457 : bool;
const {:existential true} b2458 : bool;
const {:existential true} b2459 : bool;
const {:existential true} b2460 : bool;
const {:existential true} b2461 : bool;
const {:existential true} b2462 : bool;
const {:existential true} b2463 : bool;
const {:existential true} b2464 : bool;
const {:existential true} b2465 : bool;
const {:existential true} b2466 : bool;
const {:existential true} b2467 : bool;
const {:existential true} b2468 : bool;
const {:existential true} b2469 : bool;
const {:existential true} b2470 : bool;
const {:existential true} b2471 : bool;
const {:existential true} b2472 : bool;
const {:existential true} b2473 : bool;
const {:existential true} b2474 : bool;
const {:existential true} b2475 : bool;
const {:existential true} b2476 : bool;
const {:existential true} b2477 : bool;
const {:existential true} b2478 : bool;
const {:existential true} b2479 : bool;
const {:existential true} b2480 : bool;
const {:existential true} b2481 : bool;
const {:existential true} b2482 : bool;
const {:existential true} b2483 : bool;
const {:existential true} b2484 : bool;
const {:existential true} b2485 : bool;
const {:existential true} b2486 : bool;
const {:existential true} b2487 : bool;
const {:existential true} b2488 : bool;
const {:existential true} b2489 : bool;
const {:existential true} b2490 : bool;
const {:existential true} b2491 : bool;
const {:existential true} b2492 : bool;
const {:existential true} b2493 : bool;
const {:existential true} b2494 : bool;
const {:existential true} b2495 : bool;
const {:existential true} b2496 : bool;
const {:existential true} b2497 : bool;
const {:existential true} b2498 : bool;
const {:existential true} b2499 : bool;
const {:existential true} b2500 : bool;
const {:existential true} b2501 : bool;
const {:existential true} b2502 : bool;
const {:existential true} b2503 : bool;
const {:existential true} b2504 : bool;
const {:existential true} b2505 : bool;
const {:existential true} b2506 : bool;
const {:existential true} b2507 : bool;
const {:existential true} b2508 : bool;
const {:existential true} b2509 : bool;
const {:existential true} b2510 : bool;
const {:existential true} b2511 : bool;
const {:existential true} b2512 : bool;
const {:existential true} b2513 : bool;
const {:existential true} b2514 : bool;
const {:existential true} b2515 : bool;
const {:existential true} b2516 : bool;
const {:existential true} b2517 : bool;
const {:existential true} b2518 : bool;
const {:existential true} b2519 : bool;
const {:existential true} b2520 : bool;
const {:existential true} b2521 : bool;
const {:existential true} b2522 : bool;
const {:existential true} b2523 : bool;
const {:existential true} b2524 : bool;
const {:existential true} b2525 : bool;
const {:existential true} b2526 : bool;
const {:existential true} b2527 : bool;
const {:existential true} b2528 : bool;
const {:existential true} b2529 : bool;
const {:existential true} b2530 : bool;
const {:existential true} b2531 : bool;
const {:existential true} b2532 : bool;
const {:existential true} b2533 : bool;
const {:existential true} b2534 : bool;
const {:existential true} b2535 : bool;
const {:existential true} b2536 : bool;
const {:existential true} b2537 : bool;
const {:existential true} b2538 : bool;
const {:existential true} b2539 : bool;
const {:existential true} b2540 : bool;
const {:existential true} b2541 : bool;
const {:existential true} b2542 : bool;
const {:existential true} b2543 : bool;
const {:existential true} b2544 : bool;
const {:existential true} b2545 : bool;
const {:existential true} b2546 : bool;
const {:existential true} b2547 : bool;
const {:existential true} b2548 : bool;
const {:existential true} b2549 : bool;
const {:existential true} b2550 : bool;
const {:existential true} b2551 : bool;
const {:existential true} b2552 : bool;
const {:existential true} b2553 : bool;
const {:existential true} b2554 : bool;
const {:existential true} b2555 : bool;
const {:existential true} b2556 : bool;
const {:existential true} b2557 : bool;
const {:existential true} b2558 : bool;
const {:existential true} b2559 : bool;
const {:existential true} b2560 : bool;
const {:existential true} b2561 : bool;
const {:existential true} b2562 : bool;
const {:existential true} b2563 : bool;
const {:existential true} b2564 : bool;
const {:existential true} b2565 : bool;
const {:existential true} b2566 : bool;
const {:existential true} b2567 : bool;
const {:existential true} b2568 : bool;
const {:existential true} b2569 : bool;
const {:existential true} b2570 : bool;
const {:existential true} b2571 : bool;
const {:existential true} b2572 : bool;
const {:existential true} b2573 : bool;
const {:existential true} b2574 : bool;
const {:existential true} b2575 : bool;
const {:existential true} b2576 : bool;
const {:existential true} b2577 : bool;
const {:existential true} b2578 : bool;
const {:existential true} b2579 : bool;
const {:existential true} b2580 : bool;
const {:existential true} b2581 : bool;
const {:existential true} b2582 : bool;
const {:existential true} b2583 : bool;
const {:existential true} b2584 : bool;
const {:existential true} b2585 : bool;
const {:existential true} b2586 : bool;
const {:existential true} b2587 : bool;
const {:existential true} b2588 : bool;
const {:existential true} b2589 : bool;
const {:existential true} b2590 : bool;
const {:existential true} b2591 : bool;
const {:existential true} b2592 : bool;
const {:existential true} b2593 : bool;
const {:existential true} b2594 : bool;
const {:existential true} b2595 : bool;
const {:existential true} b2596 : bool;
const {:existential true} b2597 : bool;
const {:existential true} b2598 : bool;
const {:existential true} b2599 : bool;
const {:existential true} b2600 : bool;
const {:existential true} b2601 : bool;
const {:existential true} b2602 : bool;
const {:existential true} b2603 : bool;
const {:existential true} b2604 : bool;
const {:existential true} b2605 : bool;
const {:existential true} b2606 : bool;
const {:existential true} b2607 : bool;
const {:existential true} b2608 : bool;
const {:existential true} b2609 : bool;
const {:existential true} b2610 : bool;
const {:existential true} b2611 : bool;
const {:existential true} b2612 : bool;
const {:existential true} b2613 : bool;
const {:existential true} b2614 : bool;
const {:existential true} b2615 : bool;
const {:existential true} b2616 : bool;
const {:existential true} b2617 : bool;
const {:existential true} b2618 : bool;
const {:existential true} b2619 : bool;
const {:existential true} b2620 : bool;
const {:existential true} b2621 : bool;
const {:existential true} b2622 : bool;
const {:existential true} b2623 : bool;
const {:existential true} b2624 : bool;
const {:existential true} b2625 : bool;
const {:existential true} b2626 : bool;
const {:existential true} b2627 : bool;
const {:existential true} b2628 : bool;
const {:existential true} b2629 : bool;
const {:existential true} b2630 : bool;
const {:existential true} b2631 : bool;
const {:existential true} b2632 : bool;
const {:existential true} b2633 : bool;
const {:existential true} b2634 : bool;
const {:existential true} b2635 : bool;
const {:existential true} b2636 : bool;
const {:existential true} b2637 : bool;
const {:existential true} b2638 : bool;
const {:existential true} b2639 : bool;
const {:existential true} b2640 : bool;
const {:existential true} b2641 : bool;
const {:existential true} b2642 : bool;
const {:existential true} b2643 : bool;
const {:existential true} b2644 : bool;
const {:existential true} b2645 : bool;
const {:existential true} b2646 : bool;
const {:existential true} b2647 : bool;
const {:existential true} b2648 : bool;
const {:existential true} b2649 : bool;
const {:existential true} b2650 : bool;
const {:existential true} b2651 : bool;
const {:existential true} b2652 : bool;
const {:existential true} b2653 : bool;
const {:existential true} b2654 : bool;
const {:existential true} b2655 : bool;
const {:existential true} b2656 : bool;
const {:existential true} b2657 : bool;
const {:existential true} b2658 : bool;
const {:existential true} b2659 : bool;
const {:existential true} b2660 : bool;
const {:existential true} b2661 : bool;
const {:existential true} b2662 : bool;
const {:existential true} b2663 : bool;
const {:existential true} b2664 : bool;
const {:existential true} b2665 : bool;
const {:existential true} b2666 : bool;
const {:existential true} b2667 : bool;
const {:existential true} b2668 : bool;
const {:existential true} b2669 : bool;
const {:existential true} b2670 : bool;
const {:existential true} b2671 : bool;
const {:existential true} b2672 : bool;
const {:existential true} b2673 : bool;
const {:existential true} b2674 : bool;
const {:existential true} b2675 : bool;
const {:existential true} b2676 : bool;
const {:existential true} b2677 : bool;
const {:existential true} b2678 : bool;
const {:existential true} b2679 : bool;
const {:existential true} b2680 : bool;
const {:existential true} b2681 : bool;
const {:existential true} b2682 : bool;
const {:existential true} b2683 : bool;
const {:existential true} b2684 : bool;
const {:existential true} b2685 : bool;
const {:existential true} b2686 : bool;
const {:existential true} b2687 : bool;
const {:existential true} b2688 : bool;
const {:existential true} b2689 : bool;
const {:existential true} b2690 : bool;
const {:existential true} b2691 : bool;
const {:existential true} b2692 : bool;
const {:existential true} b2693 : bool;
const {:existential true} b2694 : bool;
const {:existential true} b2695 : bool;
const {:existential true} b2696 : bool;
const {:existential true} b2697 : bool;
const {:existential true} b2698 : bool;
const {:existential true} b2699 : bool;
const {:existential true} b2700 : bool;
const {:existential true} b2701 : bool;
const {:existential true} b2702 : bool;
const {:existential true} b2703 : bool;
const {:existential true} b2704 : bool;
const {:existential true} b2705 : bool;
const {:existential true} b2706 : bool;
const {:existential true} b2707 : bool;
const {:existential true} b2708 : bool;
const {:existential true} b2709 : bool;
const {:existential true} b2710 : bool;
const {:existential true} b2711 : bool;
const {:existential true} b2712 : bool;
const {:existential true} b2713 : bool;
const {:existential true} b2714 : bool;
const {:existential true} b2715 : bool;
const {:existential true} b2716 : bool;
const {:existential true} b2717 : bool;
const {:existential true} b2718 : bool;
const {:existential true} b2719 : bool;
const {:existential true} b2720 : bool;
const {:existential true} b2721 : bool;
const {:existential true} b2722 : bool;
const {:existential true} b2723 : bool;
const {:existential true} b2724 : bool;
const {:existential true} b2725 : bool;
const {:existential true} b2726 : bool;
const {:existential true} b2727 : bool;
const {:existential true} b2728 : bool;
const {:existential true} b2729 : bool;
const {:existential true} b2730 : bool;
const {:existential true} b2731 : bool;
const {:existential true} b2732 : bool;
const {:existential true} b2733 : bool;
const {:existential true} b2734 : bool;
const {:existential true} b2735 : bool;
const {:existential true} b2736 : bool;
const {:existential true} b2737 : bool;
const {:existential true} b2738 : bool;
const {:existential true} b2739 : bool;
const {:existential true} b2740 : bool;
const {:existential true} b2741 : bool;
const {:existential true} b2742 : bool;
const {:existential true} b2743 : bool;
const {:existential true} b2744 : bool;
const {:existential true} b2745 : bool;
const {:existential true} b2746 : bool;
const {:existential true} b2747 : bool;
const {:existential true} b2748 : bool;
const {:existential true} b2749 : bool;
const {:existential true} b2750 : bool;
const {:existential true} b2751 : bool;
const {:existential true} b2752 : bool;
const {:existential true} b2753 : bool;
const {:existential true} b2754 : bool;
const {:existential true} b2755 : bool;
const {:existential true} b2756 : bool;
const {:existential true} b2757 : bool;
const {:existential true} b2758 : bool;
const {:existential true} b2759 : bool;
const {:existential true} b2760 : bool;
const {:existential true} b2761 : bool;
const {:existential true} b2762 : bool;
const {:existential true} b2763 : bool;
const {:existential true} b2764 : bool;
const {:existential true} b2765 : bool;
const {:existential true} b2766 : bool;
const {:existential true} b2767 : bool;
const {:existential true} b2768 : bool;
const {:existential true} b2769 : bool;
const {:existential true} b2770 : bool;
const {:existential true} b2771 : bool;
const {:existential true} b2772 : bool;
const {:existential true} b2773 : bool;
const {:existential true} b2774 : bool;
const {:existential true} b2775 : bool;
const {:existential true} b2776 : bool;
const {:existential true} b2777 : bool;
const {:existential true} b2778 : bool;
const {:existential true} b2779 : bool;
const {:existential true} b2780 : bool;
const {:existential true} b2781 : bool;
const {:existential true} b2782 : bool;
const {:existential true} b2783 : bool;
const {:existential true} b2784 : bool;
const {:existential true} b2785 : bool;
const {:existential true} b2786 : bool;
const {:existential true} b2787 : bool;
const {:existential true} b2788 : bool;
const {:existential true} b2789 : bool;
const {:existential true} b2790 : bool;
const {:existential true} b2791 : bool;
const {:existential true} b2792 : bool;
const {:existential true} b2793 : bool;
const {:existential true} b2794 : bool;
const {:existential true} b2795 : bool;
const {:existential true} b2796 : bool;
const {:existential true} b2797 : bool;
const {:existential true} b2798 : bool;
const {:existential true} b2799 : bool;
const {:existential true} b2800 : bool;
const {:existential true} b2801 : bool;
const {:existential true} b2802 : bool;
const {:existential true} b2803 : bool;
const {:existential true} b2804 : bool;
const {:existential true} b2805 : bool;
const {:existential true} b2806 : bool;
const {:existential true} b2807 : bool;
const {:existential true} b2808 : bool;
const {:existential true} b2809 : bool;
const {:existential true} b2810 : bool;
const {:existential true} b2811 : bool;
const {:existential true} b2812 : bool;
const {:existential true} b2813 : bool;
const {:existential true} b2814 : bool;
const {:existential true} b2815 : bool;
const {:existential true} b2816 : bool;
const {:existential true} b2817 : bool;
const {:existential true} b2818 : bool;
const {:existential true} b2819 : bool;
const {:existential true} b2820 : bool;
const {:existential true} b2821 : bool;
const {:existential true} b2822 : bool;
const {:existential true} b2823 : bool;
const {:existential true} b2824 : bool;
const {:existential true} b2825 : bool;
const {:existential true} b2826 : bool;
const {:existential true} b2827 : bool;
const {:existential true} b2828 : bool;
const {:existential true} b2829 : bool;
const {:existential true} b2830 : bool;
const {:existential true} b2831 : bool;
const {:existential true} b2832 : bool;
const {:existential true} b2833 : bool;
const {:existential true} b2834 : bool;
const {:existential true} b2835 : bool;
const {:existential true} b2836 : bool;
const {:existential true} b2837 : bool;
const {:existential true} b2838 : bool;
const {:existential true} b2839 : bool;
const {:existential true} b2840 : bool;
const {:existential true} b2841 : bool;
const {:existential true} b2842 : bool;
const {:existential true} b2843 : bool;
const {:existential true} b2844 : bool;
const {:existential true} b2845 : bool;
const {:existential true} b2846 : bool;
const {:existential true} b2847 : bool;
const {:existential true} b2848 : bool;
const {:existential true} b2849 : bool;
const {:existential true} b2850 : bool;
const {:existential true} b2851 : bool;
const {:existential true} b2852 : bool;
const {:existential true} b2853 : bool;
const {:existential true} b2854 : bool;
const {:existential true} b2855 : bool;
const {:existential true} b2856 : bool;
const {:existential true} b2857 : bool;
const {:existential true} b2858 : bool;
const {:existential true} b2859 : bool;
const {:existential true} b2860 : bool;
const {:existential true} b2861 : bool;
const {:existential true} b2862 : bool;
const {:existential true} b2863 : bool;
const {:existential true} b2864 : bool;
const {:existential true} b2865 : bool;
const {:existential true} b2866 : bool;
const {:existential true} b2867 : bool;
const {:existential true} b2868 : bool;
const {:existential true} b2869 : bool;
const {:existential true} b2870 : bool;
const {:existential true} b2871 : bool;
const {:existential true} b2872 : bool;
const {:existential true} b2873 : bool;
const {:existential true} b2874 : bool;
const {:existential true} b2875 : bool;
const {:existential true} b2876 : bool;
const {:existential true} b2877 : bool;
const {:existential true} b2878 : bool;
const {:existential true} b2879 : bool;
const {:existential true} b2880 : bool;
const {:existential true} b2881 : bool;
const {:existential true} b2882 : bool;
const {:existential true} b2883 : bool;
const {:existential true} b2884 : bool;
const {:existential true} b2885 : bool;
const {:existential true} b2886 : bool;
const {:existential true} b2887 : bool;
const {:existential true} b2888 : bool;
const {:existential true} b2889 : bool;
const {:existential true} b2890 : bool;
const {:existential true} b2891 : bool;
const {:existential true} b2892 : bool;
const {:existential true} b2893 : bool;
const {:existential true} b2894 : bool;
const {:existential true} b2895 : bool;
const {:existential true} b2896 : bool;
const {:existential true} b2897 : bool;
const {:existential true} b2898 : bool;
const {:existential true} b2899 : bool;
const {:existential true} b2900 : bool;
const {:existential true} b2901 : bool;
const {:existential true} b2902 : bool;
const {:existential true} b2903 : bool;
const {:existential true} b2904 : bool;
const {:existential true} b2905 : bool;
const {:existential true} b2906 : bool;
const {:existential true} b2907 : bool;
const {:existential true} b2908 : bool;
const {:existential true} b2909 : bool;
const {:existential true} b2910 : bool;
const {:existential true} b2911 : bool;
const {:existential true} b2912 : bool;
const {:existential true} b2913 : bool;
const {:existential true} b2914 : bool;
const {:existential true} b2915 : bool;
const {:existential true} b2916 : bool;
const {:existential true} b2917 : bool;
const {:existential true} b2918 : bool;
const {:existential true} b2919 : bool;
const {:existential true} b2920 : bool;
const {:existential true} b2921 : bool;
const {:existential true} b2922 : bool;
const {:existential true} b2923 : bool;
const {:existential true} b2924 : bool;
const {:existential true} b2925 : bool;
const {:existential true} b2926 : bool;
const {:existential true} b2927 : bool;
const {:existential true} b2928 : bool;
const {:existential true} b2929 : bool;
const {:existential true} b2930 : bool;
const {:existential true} b2931 : bool;
const {:existential true} b2932 : bool;
const {:existential true} b2933 : bool;
const {:existential true} b2934 : bool;
const {:existential true} b2935 : bool;
const {:existential true} b2936 : bool;
const {:existential true} b2937 : bool;
const {:existential true} b2938 : bool;
const {:existential true} b2939 : bool;
const {:existential true} b2940 : bool;
const {:existential true} b2941 : bool;
const {:existential true} b2942 : bool;
const {:existential true} b2943 : bool;
const {:existential true} b2944 : bool;
const {:existential true} b2945 : bool;
const {:existential true} b2946 : bool;
const {:existential true} b2947 : bool;
const {:existential true} b2948 : bool;
const {:existential true} b2949 : bool;
const {:existential true} b2950 : bool;
const {:existential true} b2951 : bool;
const {:existential true} b2952 : bool;
const {:existential true} b2953 : bool;
const {:existential true} b2954 : bool;
const {:existential true} b2955 : bool;
const {:existential true} b2956 : bool;
const {:existential true} b2957 : bool;
const {:existential true} b2958 : bool;
const {:existential true} b2959 : bool;
const {:existential true} b2960 : bool;
const {:existential true} b2961 : bool;
const {:existential true} b2962 : bool;
const {:existential true} b2963 : bool;
const {:existential true} b2964 : bool;
const {:existential true} b2965 : bool;
const {:existential true} b2966 : bool;
const {:existential true} b2967 : bool;
const {:existential true} b2968 : bool;
const {:existential true} b2969 : bool;
const {:existential true} b2970 : bool;
const {:existential true} b2971 : bool;
const {:existential true} b2972 : bool;
const {:existential true} b2973 : bool;
const {:existential true} b2974 : bool;
const {:existential true} b2975 : bool;
const {:existential true} b2976 : bool;
const {:existential true} b2977 : bool;
const {:existential true} b2978 : bool;
const {:existential true} b2979 : bool;
const {:existential true} b2980 : bool;
const {:existential true} b2981 : bool;
const {:existential true} b2982 : bool;
const {:existential true} b2983 : bool;
const {:existential true} b2984 : bool;
const {:existential true} b2985 : bool;
const {:existential true} b2986 : bool;
const {:existential true} b2987 : bool;
const {:existential true} b2988 : bool;
const {:existential true} b2989 : bool;
const {:existential true} b2990 : bool;
const {:existential true} b2991 : bool;
const {:existential true} b2992 : bool;
const {:existential true} b2993 : bool;
const {:existential true} b2994 : bool;
const {:existential true} b2995 : bool;
const {:existential true} b2996 : bool;
const {:existential true} b2997 : bool;
const {:existential true} b2998 : bool;
const {:existential true} b2999 : bool;
const {:existential true} b3000 : bool;
const {:existential true} b3001 : bool;
const {:existential true} b3002 : bool;
const {:existential true} b3003 : bool;
const {:existential true} b3004 : bool;
const {:existential true} b3005 : bool;
const {:existential true} b3006 : bool;
const {:existential true} b3007 : bool;
const {:existential true} b3008 : bool;
const {:existential true} b3009 : bool;
const {:existential true} b3010 : bool;
const {:existential true} b3011 : bool;
const {:existential true} b3012 : bool;
const {:existential true} b3013 : bool;
const {:existential true} b3014 : bool;
const {:existential true} b3015 : bool;
const {:existential true} b3016 : bool;
const {:existential true} b3017 : bool;
const {:existential true} b3018 : bool;
const {:existential true} b3019 : bool;
const {:existential true} b3020 : bool;
const {:existential true} b3021 : bool;
const {:existential true} b3022 : bool;
const {:existential true} b3023 : bool;
const {:existential true} b3024 : bool;
const {:existential true} b3025 : bool;
const {:existential true} b3026 : bool;
const {:existential true} b3027 : bool;
const {:existential true} b3028 : bool;
const {:existential true} b3029 : bool;
const {:existential true} b3030 : bool;
const {:existential true} b3031 : bool;
const {:existential true} b3032 : bool;
const {:existential true} b3033 : bool;
const {:existential true} b3034 : bool;
const {:existential true} b3035 : bool;
const {:existential true} b3036 : bool;
const {:existential true} b3037 : bool;
const {:existential true} b3038 : bool;
const {:existential true} b3039 : bool;
const {:existential true} b3040 : bool;
const {:existential true} b3041 : bool;
const {:existential true} b3042 : bool;
const {:existential true} b3043 : bool;
const {:existential true} b3044 : bool;
const {:existential true} b3045 : bool;
const {:existential true} b3046 : bool;
const {:existential true} b3047 : bool;
const {:existential true} b3048 : bool;
const {:existential true} b3049 : bool;
const {:existential true} b3050 : bool;
const {:existential true} b3051 : bool;
const {:existential true} b3052 : bool;
const {:existential true} b3053 : bool;
const {:existential true} b3054 : bool;
const {:existential true} b3055 : bool;
const {:existential true} b3056 : bool;
const {:existential true} b3057 : bool;
const {:existential true} b3058 : bool;
const {:existential true} b3059 : bool;
const {:existential true} b3060 : bool;
const {:existential true} b3061 : bool;
const {:existential true} b3062 : bool;
const {:existential true} b3063 : bool;
const {:existential true} b3064 : bool;
const {:existential true} b3065 : bool;
const {:existential true} b3066 : bool;
const {:existential true} b3067 : bool;
const {:existential true} b3068 : bool;
const {:existential true} b3069 : bool;
const {:existential true} b3070 : bool;
const {:existential true} b3071 : bool;
const {:existential true} b3072 : bool;
const {:existential true} b3073 : bool;
const {:existential true} b3074 : bool;
const {:existential true} b3075 : bool;
const {:existential true} b3076 : bool;
const {:existential true} b3077 : bool;
const {:existential true} b3078 : bool;
const {:existential true} b3079 : bool;
const {:existential true} b3080 : bool;
const {:existential true} b3081 : bool;
const {:existential true} b3082 : bool;
const {:existential true} b3083 : bool;
const {:existential true} b3084 : bool;
const {:existential true} b3085 : bool;
const {:existential true} b3086 : bool;
const {:existential true} b3087 : bool;
const {:existential true} b3088 : bool;
const {:existential true} b3089 : bool;
const {:existential true} b3090 : bool;
const {:existential true} b3091 : bool;
const {:existential true} b3092 : bool;
const {:existential true} b3093 : bool;
const {:existential true} b3094 : bool;
const {:existential true} b3095 : bool;
const {:existential true} b3096 : bool;
const {:existential true} b3097 : bool;
const {:existential true} b3098 : bool;
const {:existential true} b3099 : bool;
const {:existential true} b3100 : bool;
const {:existential true} b3101 : bool;
const {:existential true} b3102 : bool;
const {:existential true} b3103 : bool;
const {:existential true} b3104 : bool;
const {:existential true} b3105 : bool;
const {:existential true} b3106 : bool;
const {:existential true} b3107 : bool;
const {:existential true} b3108 : bool;
const {:existential true} b3109 : bool;
const {:existential true} b3110 : bool;
const {:existential true} b3111 : bool;
const {:existential true} b3112 : bool;
const {:existential true} b3113 : bool;
const {:existential true} b3114 : bool;
const {:existential true} b3115 : bool;
const {:existential true} b3116 : bool;
const {:existential true} b3117 : bool;
const {:existential true} b3118 : bool;
const {:existential true} b3119 : bool;
const {:existential true} b3120 : bool;
const {:existential true} b3121 : bool;
const {:existential true} b3122 : bool;
const {:existential true} b3123 : bool;
const {:existential true} b3124 : bool;
const {:existential true} b3125 : bool;
const {:existential true} b3126 : bool;
const {:existential true} b3127 : bool;
const {:existential true} b3128 : bool;
const {:existential true} b3129 : bool;
const {:existential true} b3130 : bool;
const {:existential true} b3131 : bool;
const {:existential true} b3132 : bool;
const {:existential true} b3133 : bool;
const {:existential true} b3134 : bool;
const {:existential true} b3135 : bool;
const {:existential true} b3136 : bool;
const {:existential true} b3137 : bool;
const {:existential true} b3138 : bool;
const {:existential true} b3139 : bool;
const {:existential true} b3140 : bool;
const {:existential true} b3141 : bool;
const {:existential true} b3142 : bool;
const {:existential true} b3143 : bool;
const {:existential true} b3144 : bool;
const {:existential true} b3145 : bool;
const {:existential true} b3146 : bool;
const {:existential true} b3147 : bool;
const {:existential true} b3148 : bool;
const {:existential true} b3149 : bool;
const {:existential true} b3150 : bool;
const {:existential true} b3151 : bool;
const {:existential true} b3152 : bool;
const {:existential true} b3153 : bool;
const {:existential true} b3154 : bool;
const {:existential true} b3155 : bool;
const {:existential true} b3156 : bool;
const {:existential true} b3157 : bool;
const {:existential true} b3158 : bool;
const {:existential true} b3159 : bool;
const {:existential true} b3160 : bool;
const {:existential true} b3161 : bool;
const {:existential true} b3162 : bool;
const {:existential true} b3163 : bool;
const {:existential true} b3164 : bool;
const {:existential true} b3165 : bool;
const {:existential true} b3166 : bool;
const {:existential true} b3167 : bool;
const {:existential true} b3168 : bool;
const {:existential true} b3169 : bool;
const {:existential true} b3170 : bool;
const {:existential true} b3171 : bool;
const {:existential true} b3172 : bool;
const {:existential true} b3173 : bool;
const {:existential true} b3174 : bool;
const {:existential true} b3175 : bool;
const {:existential true} b3176 : bool;
const {:existential true} b3177 : bool;
const {:existential true} b3178 : bool;
const {:existential true} b3179 : bool;
const {:existential true} b3180 : bool;
const {:existential true} b3181 : bool;
const {:existential true} b3182 : bool;
const {:existential true} b3183 : bool;
const {:existential true} b3184 : bool;
const {:existential true} b3185 : bool;
const {:existential true} b3186 : bool;
const {:existential true} b3187 : bool;
const {:existential true} b3188 : bool;
const {:existential true} b3189 : bool;
const {:existential true} b3190 : bool;
const {:existential true} b3191 : bool;
const {:existential true} b3192 : bool;
const {:existential true} b3193 : bool;
const {:existential true} b3194 : bool;
const {:existential true} b3195 : bool;
const {:existential true} b3196 : bool;
const {:existential true} b3197 : bool;
const {:existential true} b3198 : bool;
const {:existential true} b3199 : bool;
const {:existential true} b3200 : bool;
const {:existential true} b3201 : bool;
const {:existential true} b3202 : bool;
const {:existential true} b3203 : bool;
const {:existential true} b3204 : bool;
const {:existential true} b3205 : bool;
const {:existential true} b3206 : bool;
const {:existential true} b3207 : bool;
const {:existential true} b3208 : bool;
const {:existential true} b3209 : bool;
const {:existential true} b3210 : bool;
const {:existential true} b3211 : bool;
const {:existential true} b3212 : bool;
const {:existential true} b3213 : bool;
const {:existential true} b3214 : bool;
const {:existential true} b3215 : bool;
const {:existential true} b3216 : bool;
const {:existential true} b3217 : bool;
const {:existential true} b3218 : bool;
const {:existential true} b3219 : bool;
const {:existential true} b3220 : bool;
const {:existential true} b3221 : bool;
const {:existential true} b3222 : bool;
const {:existential true} b3223 : bool;
const {:existential true} b3224 : bool;
const {:existential true} b3225 : bool;
const {:existential true} b3226 : bool;
const {:existential true} b3227 : bool;
const {:existential true} b3228 : bool;
const {:existential true} b3229 : bool;
const {:existential true} b3230 : bool;
const {:existential true} b3231 : bool;
const {:existential true} b3232 : bool;
const {:existential true} b3233 : bool;
const {:existential true} b3234 : bool;
const {:existential true} b3235 : bool;
const {:existential true} b3236 : bool;
const {:existential true} b3237 : bool;
const {:existential true} b3238 : bool;
const {:existential true} b3239 : bool;
const {:existential true} b3240 : bool;
const {:existential true} b3241 : bool;
const {:existential true} b3242 : bool;
const {:existential true} b3243 : bool;
const {:existential true} b3244 : bool;
const {:existential true} b3245 : bool;
const {:existential true} b3246 : bool;
const {:existential true} b3247 : bool;
const {:existential true} b3248 : bool;
const {:existential true} b3249 : bool;
const {:existential true} b3250 : bool;
const {:existential true} b3251 : bool;
const {:existential true} b3252 : bool;
const {:existential true} b3253 : bool;
const {:existential true} b3254 : bool;
const {:existential true} b3255 : bool;
const {:existential true} b3256 : bool;
const {:existential true} b3257 : bool;
const {:existential true} b3258 : bool;
const {:existential true} b3259 : bool;
const {:existential true} b3260 : bool;
const {:existential true} b3261 : bool;
const {:existential true} b3262 : bool;
const {:existential true} b3263 : bool;
const {:existential true} b3264 : bool;
const {:existential true} b3265 : bool;
const {:existential true} b3266 : bool;
const {:existential true} b3267 : bool;
const {:existential true} b3268 : bool;
const {:existential true} b3269 : bool;
const {:existential true} b3270 : bool;
const {:existential true} b3271 : bool;
const {:existential true} b3272 : bool;
const {:existential true} b3273 : bool;
const {:existential true} b3274 : bool;
const {:existential true} b3275 : bool;
const {:existential true} b3276 : bool;
const {:existential true} b3277 : bool;
const {:existential true} b3278 : bool;
const {:existential true} b3279 : bool;
const {:existential true} b3280 : bool;
const {:existential true} b3281 : bool;
const {:existential true} b3282 : bool;
const {:existential true} b3283 : bool;
const {:existential true} b3284 : bool;
const {:existential true} b3285 : bool;
const {:existential true} b3286 : bool;
const {:existential true} b3287 : bool;
const {:existential true} b3288 : bool;
const {:existential true} b3289 : bool;
const {:existential true} b3290 : bool;
const {:existential true} b3291 : bool;
const {:existential true} b3292 : bool;
const {:existential true} b3293 : bool;
const {:existential true} b3294 : bool;
const {:existential true} b3295 : bool;
const {:existential true} b3296 : bool;
const {:existential true} b3297 : bool;
const {:existential true} b3298 : bool;
const {:existential true} b3299 : bool;
const {:existential true} b3300 : bool;
const {:existential true} b3301 : bool;
const {:existential true} b3302 : bool;
const {:existential true} b3303 : bool;
const {:existential true} b3304 : bool;
const {:existential true} b3305 : bool;
const {:existential true} b3306 : bool;
const {:existential true} b3307 : bool;
const {:existential true} b3308 : bool;
const {:existential true} b3309 : bool;
const {:existential true} b3310 : bool;
const {:existential true} b3311 : bool;
const {:existential true} b3312 : bool;
const {:existential true} b3313 : bool;
const {:existential true} b3314 : bool;
const {:existential true} b3315 : bool;
const {:existential true} b3316 : bool;
const {:existential true} b3317 : bool;
const {:existential true} b3318 : bool;
const {:existential true} b3319 : bool;
const {:existential true} b3320 : bool;
const {:existential true} b3321 : bool;
const {:existential true} b3322 : bool;
const {:existential true} b3323 : bool;
const {:existential true} b3324 : bool;
const {:existential true} b3325 : bool;
const {:existential true} b3326 : bool;
const {:existential true} b3327 : bool;
const {:existential true} b3328 : bool;
const {:existential true} b3329 : bool;
const {:existential true} b3330 : bool;
const {:existential true} b3331 : bool;
const {:existential true} b3332 : bool;
const {:existential true} b3333 : bool;
const {:existential true} b3334 : bool;
const {:existential true} b3335 : bool;
const {:existential true} b3336 : bool;
const {:existential true} b3337 : bool;
const {:existential true} b3338 : bool;
const {:existential true} b3339 : bool;
const {:existential true} b3340 : bool;
const {:existential true} b3341 : bool;
const {:existential true} b3342 : bool;
const {:existential true} b3343 : bool;
const {:existential true} b3344 : bool;
const {:existential true} b3345 : bool;
const {:existential true} b3346 : bool;
const {:existential true} b3347 : bool;
const {:existential true} b3348 : bool;
const {:existential true} b3349 : bool;
const {:existential true} b3350 : bool;
const {:existential true} b3351 : bool;
const {:existential true} b3352 : bool;
const {:existential true} b3353 : bool;
const {:existential true} b3354 : bool;
const {:existential true} b3355 : bool;
const {:existential true} b3356 : bool;
const {:existential true} b3357 : bool;
const {:existential true} b3358 : bool;
const {:existential true} b3359 : bool;
const {:existential true} b3360 : bool;
const {:existential true} b3361 : bool;
const {:existential true} b3362 : bool;
const {:existential true} b3363 : bool;
const {:existential true} b3364 : bool;
const {:existential true} b3365 : bool;
const {:existential true} b3366 : bool;
const {:existential true} b3367 : bool;
const {:existential true} b3368 : bool;
const {:existential true} b3369 : bool;
const {:existential true} b3370 : bool;
const {:existential true} b3371 : bool;
const {:existential true} b3372 : bool;
const {:existential true} b3373 : bool;
const {:existential true} b3374 : bool;
const {:existential true} b3375 : bool;
const {:existential true} b3376 : bool;
const {:existential true} b3377 : bool;
const {:existential true} b3378 : bool;
const {:existential true} b3379 : bool;
const {:existential true} b3380 : bool;
const {:existential true} b3381 : bool;
const {:existential true} b3382 : bool;
const {:existential true} b3383 : bool;
const {:existential true} b3384 : bool;
const {:existential true} b3385 : bool;
const {:existential true} b3386 : bool;
const {:existential true} b3387 : bool;
const {:existential true} b3388 : bool;
const {:existential true} b3389 : bool;
const {:existential true} b3390 : bool;
const {:existential true} b3391 : bool;
const {:existential true} b3392 : bool;
const {:existential true} b3393 : bool;
const {:existential true} b3394 : bool;
const {:existential true} b3395 : bool;
const {:existential true} b3396 : bool;
const {:existential true} b3397 : bool;
const {:existential true} b3398 : bool;
const {:existential true} b3399 : bool;
const {:existential true} b3400 : bool;
const {:existential true} b3401 : bool;
const {:existential true} b3402 : bool;
const {:existential true} b3403 : bool;
const {:existential true} b3404 : bool;
const {:existential true} b3405 : bool;
const {:existential true} b3406 : bool;
const {:existential true} b3407 : bool;
const {:existential true} b3408 : bool;
const {:existential true} b3409 : bool;
const {:existential true} b3410 : bool;
const {:existential true} b3411 : bool;
const {:existential true} b3412 : bool;
const {:existential true} b3413 : bool;
const {:existential true} b3414 : bool;
const {:existential true} b3415 : bool;
const {:existential true} b3416 : bool;
const {:existential true} b3417 : bool;
const {:existential true} b3418 : bool;
const {:existential true} b3419 : bool;
const {:existential true} b3420 : bool;
const {:existential true} b3421 : bool;
const {:existential true} b3422 : bool;
const {:existential true} b3423 : bool;
const {:existential true} b3424 : bool;
const {:existential true} b3425 : bool;
const {:existential true} b3426 : bool;
const {:existential true} b3427 : bool;
const {:existential true} b3428 : bool;
const {:existential true} b3429 : bool;
const {:existential true} b3430 : bool;
const {:existential true} b3431 : bool;
const {:existential true} b3432 : bool;
const {:existential true} b3433 : bool;
const {:existential true} b3434 : bool;
const {:existential true} b3435 : bool;
const {:existential true} b3436 : bool;
const {:existential true} b3437 : bool;
const {:existential true} b3438 : bool;
const {:existential true} b3439 : bool;
const {:existential true} b3440 : bool;
const {:existential true} b3441 : bool;
const {:existential true} b3442 : bool;
const {:existential true} b3443 : bool;
const {:existential true} b3444 : bool;
const {:existential true} b3445 : bool;
const {:existential true} b3446 : bool;
const {:existential true} b3447 : bool;
const {:existential true} b3448 : bool;
const {:existential true} b3449 : bool;
const {:existential true} b3450 : bool;
const {:existential true} b3451 : bool;
const {:existential true} b3452 : bool;
const {:existential true} b3453 : bool;
const {:existential true} b3454 : bool;
const {:existential true} b3455 : bool;
const {:existential true} b3456 : bool;
const {:existential true} b3457 : bool;
const {:existential true} b3458 : bool;
const {:existential true} b3459 : bool;
const {:existential true} b3460 : bool;
const {:existential true} b3461 : bool;
const {:existential true} b3462 : bool;
const {:existential true} b3463 : bool;
const {:existential true} b3464 : bool;
const {:existential true} b3465 : bool;
const {:existential true} b3466 : bool;
const {:existential true} b3467 : bool;
const {:existential true} b3468 : bool;
const {:existential true} b3469 : bool;
const {:existential true} b3470 : bool;
const {:existential true} b3471 : bool;
const {:existential true} b3472 : bool;
const {:existential true} b3473 : bool;
const {:existential true} b3474 : bool;
const {:existential true} b3475 : bool;
const {:existential true} b3476 : bool;
const {:existential true} b3477 : bool;
const {:existential true} b3478 : bool;
const {:existential true} b3479 : bool;
const {:existential true} b3480 : bool;
const {:existential true} b3481 : bool;
const {:existential true} b3482 : bool;
const {:existential true} b3483 : bool;
const {:existential true} b3484 : bool;
const {:existential true} b3485 : bool;
const {:existential true} b3486 : bool;
const {:existential true} b3487 : bool;
const {:existential true} b3488 : bool;
const {:existential true} b3489 : bool;
const {:existential true} b3490 : bool;
const {:existential true} b3491 : bool;
const {:existential true} b3492 : bool;
const {:existential true} b3493 : bool;
const {:existential true} b3494 : bool;
const {:existential true} b3495 : bool;
const {:existential true} b3496 : bool;
const {:existential true} b3497 : bool;
const {:existential true} b3498 : bool;
const {:existential true} b3499 : bool;
const {:existential true} b3500 : bool;
const {:existential true} b3501 : bool;
const {:existential true} b3502 : bool;
const {:existential true} b3503 : bool;
const {:existential true} b3504 : bool;
const {:existential true} b3505 : bool;
const {:existential true} b3506 : bool;
const {:existential true} b3507 : bool;
const {:existential true} b3508 : bool;
const {:existential true} b3509 : bool;
const {:existential true} b3510 : bool;
const {:existential true} b3511 : bool;
const {:existential true} b3512 : bool;
const {:existential true} b3513 : bool;
const {:existential true} b3514 : bool;
const {:existential true} b3515 : bool;
const {:existential true} b3516 : bool;
const {:existential true} b3517 : bool;
const {:existential true} b3518 : bool;
const {:existential true} b3519 : bool;
const {:existential true} b3520 : bool;
const {:existential true} b3521 : bool;
const {:existential true} b3522 : bool;
const {:existential true} b3523 : bool;
const {:existential true} b3524 : bool;
const {:existential true} b3525 : bool;
const {:existential true} b3526 : bool;
const {:existential true} b3527 : bool;
const {:existential true} b3528 : bool;
const {:existential true} b3529 : bool;
const {:existential true} b3530 : bool;
const {:existential true} b3531 : bool;
const {:existential true} b3532 : bool;
const {:existential true} b3533 : bool;
const {:existential true} b3534 : bool;
const {:existential true} b3535 : bool;
const {:existential true} b3536 : bool;
const {:existential true} b3537 : bool;
const {:existential true} b3538 : bool;
const {:existential true} b3539 : bool;
const {:existential true} b3540 : bool;
const {:existential true} b3541 : bool;
const {:existential true} b3542 : bool;
const {:existential true} b3543 : bool;
const {:existential true} b3544 : bool;
const {:existential true} b3545 : bool;
const {:existential true} b3546 : bool;
const {:existential true} b3547 : bool;
const {:existential true} b3548 : bool;
const {:existential true} b3549 : bool;
const {:existential true} b3550 : bool;
const {:existential true} b3551 : bool;
const {:existential true} b3552 : bool;
const {:existential true} b3553 : bool;
const {:existential true} b3554 : bool;
const {:existential true} b3555 : bool;
const {:existential true} b3556 : bool;
const {:existential true} b3557 : bool;
const {:existential true} b3558 : bool;
const {:existential true} b3559 : bool;
const {:existential true} b3560 : bool;
const {:existential true} b3561 : bool;
const {:existential true} b3562 : bool;
const {:existential true} b3563 : bool;
const {:existential true} b3564 : bool;
const {:existential true} b3565 : bool;
const {:existential true} b3566 : bool;
const {:existential true} b3567 : bool;
const {:existential true} b3568 : bool;
const {:existential true} b3569 : bool;
const {:existential true} b3570 : bool;
const {:existential true} b3571 : bool;
const {:existential true} b3572 : bool;
const {:existential true} b3573 : bool;
const {:existential true} b3574 : bool;
const {:existential true} b3575 : bool;
const {:existential true} b3576 : bool;
const {:existential true} b3577 : bool;
const {:existential true} b3578 : bool;
const {:existential true} b3579 : bool;
const {:existential true} b3580 : bool;
const {:existential true} b3581 : bool;
const {:existential true} b3582 : bool;
const {:existential true} b3583 : bool;
const {:existential true} b3584 : bool;
const {:existential true} b3585 : bool;
const {:existential true} b3586 : bool;
const {:existential true} b3587 : bool;
const {:existential true} b3588 : bool;
const {:existential true} b3589 : bool;
const {:existential true} b3590 : bool;
const {:existential true} b3591 : bool;
const {:existential true} b3592 : bool;
const {:existential true} b3593 : bool;
const {:existential true} b3594 : bool;
const {:existential true} b3595 : bool;
const {:existential true} b3596 : bool;
const {:existential true} b3597 : bool;
const {:existential true} b3598 : bool;
const {:existential true} b3599 : bool;
const {:existential true} b3600 : bool;
const {:existential true} b3601 : bool;
const {:existential true} b3602 : bool;
const {:existential true} b3603 : bool;
const {:existential true} b3604 : bool;

axiom $arch_ptr_size == 8;

axiom $arch_spec_ptr_start == $max.u8;

const unique ^$##thread_id: $ctype;

axiom $def_math_type(^$##thread_id);

type $##thread_id;

const unique ^$##club: $ctype;

axiom $def_math_type(^$##club);

type $##club;

const unique ^s_node: $ctype;

axiom $is_span_sequential(^s_node);

axiom $def_struct_type(^s_node, 16, false, false);

axiom (forall #s1: $state, #s2: $state, #p: $ptr :: { $inv2(#s1, #s2, #p, ^s_node) } $inv2(#s1, #s2, #p, ^s_node) == $set_eq($owns(#s2, #p), $set_empty()));

axiom (forall #s1: $state, #s2: $state, #p: $ptr :: { $inv2_without_lemmas(#s1, #s2, #p, ^s_node) } $inv2_without_lemmas(#s1, #s2, #p, ^s_node) == $set_eq($owns(#s2, #p), $set_empty()));

axiom (forall p: $ptr, q: $ptr, s: $state :: { $in(q, $composite_extent(s, p, ^s_node)) } $in(q, $composite_extent(s, p, ^s_node)) == (q == p));

const unique s_node.key: $field;

axiom $def_phys_field(^s_node, s_node.key, ^^i4, false, 0);

const unique s_node.next: $field;

axiom $def_phys_field(^s_node, s_node.next, $ptr_to(^s_node), false, 8);

function F#glob_reach() : $oset;

const unique cf#glob_reach: $pure_function;

axiom $function_arg_type(cf#glob_reach, 0, ^$#oset);

procedure glob_reach() returns ($result: $oset);
  free ensures $result == F#glob_reach();
  free ensures $call_transition(old($s), $s);



const unique ^$#_purecall_handler#1: $ctype;

axiom $def_fnptr_type(^$#_purecall_handler#1);

type $#_purecall_handler#1;

const unique ^$#_invalid_parameter_handler#2: $ctype;

axiom $def_fnptr_type(^$#_invalid_parameter_handler#2);

type $#_invalid_parameter_handler#2;

const unique ^$#g_slist_sort_merge.c..36263#3: $ctype;

axiom $def_fnptr_type(^$#g_slist_sort_merge.c..36263#3);

type $#g_slist_sort_merge.c..36263#3;

const unique ^$#_PtFuncCompare#4: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#4);

type $#_PtFuncCompare#4;

const unique ^$#_PtFuncCompare#5: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#5);

type $#_PtFuncCompare#5;

const unique ^$#_PtFuncCompare#6: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#6);

type $#_PtFuncCompare#6;

const unique ^$#_PtFuncCompare#7: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#7);

type $#_PtFuncCompare#7;

const unique ^$#_onexit_t#8: $ctype;

axiom $def_fnptr_type(^$#_onexit_t#8);

type $#_onexit_t#8;

function F##int_max(SP#x: int, SP#y: int) : int;

const unique cf##int_max: $pure_function;

axiom (forall SP#x: int, SP#y: int :: { F##int_max(SP#x, SP#y) } $in_range_i4(F##int_max(SP#x, SP#y)));

axiom $function_arg_type(cf##int_max, 0, ^^i4);

axiom $function_arg_type(cf##int_max, 1, ^^i4);

axiom $function_arg_type(cf##int_max, 2, ^^i4);

procedure #int_max(SP#x: int, SP#y: int) returns ($result: int);
  free ensures $in_range_i4($result);
  free ensures $result == F##int_max(SP#x, SP#y);
  free ensures $call_transition(old($s), $s);



function F##int_min(SP#x: int, SP#y: int) : int;

const unique cf##int_min: $pure_function;

axiom (forall SP#x: int, SP#y: int :: { F##int_min(SP#x, SP#y) } $in_range_i4(F##int_min(SP#x, SP#y)));

axiom $function_arg_type(cf##int_min, 0, ^^i4);

axiom $function_arg_type(cf##int_min, 1, ^^i4);

axiom $function_arg_type(cf##int_min, 2, ^^i4);

procedure #int_min(SP#x: int, SP#y: int) returns ($result: int);
  free ensures $in_range_i4($result);
  free ensures $result == F##int_min(SP#x, SP#y);
  free ensures $call_transition(old($s), $s);



function F#sll(#s: $state, SP#hd: $ptr) : bool;

const unique cf#sll: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll(#s, SP#hd) } 1 < $decreases_level ==> $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#sll(#s, SP#hd));

axiom $function_arg_type(cf#sll, 0, ^^bool);

axiom $function_arg_type(cf#sll, 1, $ptr_to(^s_node));

procedure sll(SP#hd: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result;
  free ensures $result == F#sll($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#srtl(#s: $state, SP#hd: $ptr) : bool;

const unique cf#srtl: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#srtl(#s, SP#hd) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#srtl(#s, SP#hd)) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> F#srtl(#s, SP#hd)));

axiom $function_arg_type(cf#srtl, 0, ^^bool);

axiom $function_arg_type(cf#srtl, 1, $ptr_to(^s_node));

procedure srtl(SP#hd: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result;
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> $result;
  free ensures $result == F#srtl($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#rsrtl(#s: $state, SP#hd: $ptr) : bool;

const unique cf#rsrtl: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#rsrtl(#s, SP#hd) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#rsrtl(#s, SP#hd)) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> F#rsrtl(#s, SP#hd)));

axiom $function_arg_type(cf#rsrtl, 0, ^^bool);

axiom $function_arg_type(cf#rsrtl, 1, $ptr_to(^s_node));

procedure rsrtl(SP#hd: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result;
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> $result;
  free ensures $result == F#rsrtl($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_reach(#s: $state, SP#hd: $ptr) : $oset;

const unique cf#sll_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll_reach(#s, SP#hd) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#sll_reach(#s, SP#hd))) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#sll_reach(#s, SP#hd) == $oset_empty()));

axiom $function_arg_type(cf#sll_reach, 0, ^$#oset);

axiom $function_arg_type(cf#sll_reach, 1, $ptr_to(^s_node));

procedure sll_reach(SP#hd: $ptr) returns ($result: $oset);
  ensures ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result)) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result == $oset_empty());
  free ensures $result == F#sll_reach($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#srtl_reach(#s: $state, SP#hd: $ptr) : $oset;

const unique cf#srtl_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#srtl_reach(#s, SP#hd) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#srtl_reach(#s, SP#hd))) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#srtl_reach(#s, SP#hd) == $oset_empty()));

axiom $function_arg_type(cf#srtl_reach, 0, ^$#oset);

axiom $function_arg_type(cf#srtl_reach, 1, $ptr_to(^s_node));

procedure srtl_reach(SP#hd: $ptr) returns ($result: $oset);
  ensures ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result)) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result == $oset_empty());
  free ensures $result == F#srtl_reach($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#rsrtl_reach(#s: $state, SP#hd: $ptr) : $oset;

const unique cf#rsrtl_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#rsrtl_reach(#s, SP#hd) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#rsrtl_reach(#s, SP#hd))) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#rsrtl_reach(#s, SP#hd) == $oset_empty()));

axiom $function_arg_type(cf#rsrtl_reach, 0, ^$#oset);

axiom $function_arg_type(cf#rsrtl_reach, 1, $ptr_to(^s_node));

procedure rsrtl_reach(SP#hd: $ptr) returns ($result: $oset);
  ensures ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result)) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result == $oset_empty());
  free ensures $result == F#rsrtl_reach($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_keys(#s: $state, SP#hd: $ptr) : $intset;

const unique cf#sll_keys: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll_keys(#s, SP#hd) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $intset_in($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node)), F#sll_keys(#s, SP#hd))) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#sll_keys(#s, SP#hd) == $intset_empty()));

axiom $function_arg_type(cf#sll_keys, 0, ^$#intset);

axiom $function_arg_type(cf#sll_keys, 1, $ptr_to(^s_node));

procedure sll_keys(SP#hd: $ptr) returns ($result: $intset);
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $intset_in($rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node)), $result);
  ensures $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result == $intset_empty();
  free ensures $result == F#sll_keys($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_min_key(#s: $state, SP#hd: $ptr) : int;

const unique cf#sll_min_key: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll_min_key(#s, SP#hd) } 1 < $decreases_level ==> $in_range_i4(F#sll_min_key(#s, SP#hd)) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> F#sll_min_key(#s, SP#hd) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node))));

axiom $function_arg_type(cf#sll_min_key, 0, ^^i4);

axiom $function_arg_type(cf#sll_min_key, 1, $ptr_to(^s_node));

procedure sll_min_key(SP#hd: $ptr) returns ($result: int);
  free ensures $in_range_i4($result);
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> $result == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node));
  free ensures $result == F#sll_min_key($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_max_key(#s: $state, SP#hd: $ptr) : int;

const unique cf#sll_max_key: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll_max_key(#s, SP#hd) } 1 < $decreases_level ==> $in_range_i4(F#sll_max_key(#s, SP#hd)) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> F#sll_max_key(#s, SP#hd) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node))));

axiom $function_arg_type(cf#sll_max_key, 0, ^^i4);

axiom $function_arg_type(cf#sll_max_key, 1, $ptr_to(^s_node));

procedure sll_max_key(SP#hd: $ptr) returns ($result: int);
  free ensures $in_range_i4($result);
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> $result == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node));
  free ensures $result == F#sll_max_key($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_list_len_next(#s: $state, SP#x: $ptr) : int;

const unique cf#sll_list_len_next: $pure_function;

axiom (forall #s: $state, SP#x: $ptr :: { F#sll_list_len_next(#s, SP#x) } 1 < $decreases_level ==> $in_range_nat(F#sll_list_len_next(#s, SP#x)) && ($non_null($phys_ptr_cast(SP#x, ^s_node)) ==> F#sll_list_len_next(#s, SP#x) > 0) && ($is_null($phys_ptr_cast(SP#x, ^s_node)) ==> F#sll_list_len_next(#s, SP#x) == 0));

axiom $function_arg_type(cf#sll_list_len_next, 0, ^^nat);

axiom $function_arg_type(cf#sll_list_len_next, 1, $ptr_to(^s_node));

procedure sll_list_len_next(SP#x: $ptr) returns ($result: int);
  free ensures $in_range_nat($result);
  ensures $non_null($phys_ptr_cast(SP#x, ^s_node)) ==> $result > 0;
  ensures $is_null($phys_ptr_cast(SP#x, ^s_node)) ==> $result == 0;
  free ensures $result == F#sll_list_len_next($s, SP#x);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : bool;

const unique cf#sll_lseg: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg(#s, SP#hd, SP#tl) == F#sll(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg(#s, SP#hd, SP#tl)) && (F#sll_lseg(#s, SP#hd, SP#tl) ==> $oset_disjoint(F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)))) && (F#sll_lseg(#s, SP#hd, SP#tl) && F#sll(#s, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll(#s, $phys_ptr_cast(SP#hd, ^s_node)) && F#sll_reach(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $oset_union(F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_reach(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_keys(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $intset_union(F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_keys(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_list_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_list_len_next(#s, $phys_ptr_cast(SP#tl, ^s_node)))) && (F#sll_lseg(#s, SP#hd, SP#tl) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#hd, ^s_node) && !$oset_in($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node), F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node))) ==> F#sll_lseg(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $intset_singleton($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)))) && F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), 1)));

axiom $function_arg_type(cf#sll_lseg, 0, ^^bool);

axiom $function_arg_type(cf#sll_lseg, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg, 2, $ptr_to(^s_node));

procedure sll_lseg(SP#hd: $ptr, SP#tl: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result;
  ensures $result ==> $oset_disjoint(F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)));
  ensures $result && F#sll($s, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SP#hd, ^s_node)) && F#sll_reach($s, $phys_ptr_cast(SP#hd, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_reach($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_keys($s, $phys_ptr_cast(SP#hd, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_keys($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_list_len_next($s, $phys_ptr_cast(SP#hd, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_list_len_next($s, $phys_ptr_cast(SP#tl, ^s_node)));
  ensures $result && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#hd, ^s_node) && !$oset_in($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node), F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node))) ==> F#sll_lseg($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)))) && F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), 1);
  free ensures $result == F#sll_lseg($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#srtl_lseg(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : bool;

const unique cf#srtl_lseg: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#srtl_lseg(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl_lseg(#s, SP#hd, SP#tl) == F#srtl(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#srtl_lseg(#s, SP#hd, SP#tl)) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#srtl_lseg(#s, SP#hd, SP#tl)) && (F#srtl_lseg(#s, SP#hd, SP#tl) ==> $oset_disjoint(F#srtl_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)))) && (F#srtl_lseg(#s, SP#hd, SP#tl) && F#srtl(#s, $phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) <= F#sll_min_key(#s, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl(#s, $phys_ptr_cast(SP#hd, ^s_node)) && F#srtl_reach(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $oset_union(F#srtl_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#srtl_reach(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_keys(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $intset_union(F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_keys(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_list_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_list_len_next(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node)) == F#sll_lseg_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node)) == F#sll_max_key(#s, $phys_ptr_cast(SP#tl, ^s_node))) && (F#srtl_lseg(#s, SP#hd, SP#tl) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && !$oset_in($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node), F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) <= $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl_lseg(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#srtl_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $intset_singleton($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)))) && F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), 1) && F#sll_lseg_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == F#sll_lseg_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node))) && (F#srtl_lseg(#s, SP#hd, SP#tl) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> F#srtl_lseg(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#srtl_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_singleton($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == 1 && F#sll_lseg_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node))));

axiom $function_arg_type(cf#srtl_lseg, 0, ^^bool);

axiom $function_arg_type(cf#srtl_lseg, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#srtl_lseg, 2, $ptr_to(^s_node));

procedure srtl_lseg(SP#hd: $ptr, SP#tl: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#srtl($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result;
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result;
  ensures $result ==> $oset_disjoint(F#srtl_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)));
  ensures $result && F#srtl($s, $phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) <= F#sll_min_key($s, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SP#hd, ^s_node)) && F#srtl_reach($s, $phys_ptr_cast(SP#hd, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#srtl_reach($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_keys($s, $phys_ptr_cast(SP#hd, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_keys($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_list_len_next($s, $phys_ptr_cast(SP#hd, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_list_len_next($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_min_key($s, $phys_ptr_cast(SP#hd, ^s_node)) == F#sll_lseg_min_key($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_max_key($s, $phys_ptr_cast(SP#hd, ^s_node)) == F#sll_max_key($s, $phys_ptr_cast(SP#tl, ^s_node));
  ensures $result && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && !$oset_in($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node), F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_max_key($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) <= $rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl_lseg($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#srtl_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)))) && F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), 1) && F#sll_lseg_min_key($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == F#sll_lseg_min_key($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node));
  ensures $result && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#srtl_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == 1 && F#sll_lseg_min_key($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node));
  free ensures $result == F#srtl_lseg($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_reach(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : $oset;

const unique cf#sll_lseg_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_reach(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_reach(#s, SP#hd, SP#tl) == F#sll_reach(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_reach(#s, SP#hd, SP#tl) == $oset_empty()) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#sll_lseg_reach(#s, SP#hd, SP#tl))));

axiom $function_arg_type(cf#sll_lseg_reach, 0, ^$#oset);

axiom $function_arg_type(cf#sll_lseg_reach, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_reach, 2, $ptr_to(^s_node));

procedure sll_lseg_reach(SP#hd: $ptr, SP#tl: $ptr) returns ($result: $oset);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_reach($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $oset_empty();
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result);
  free ensures $result == F#sll_lseg_reach($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#srtl_lseg_reach(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : $oset;

const unique cf#srtl_lseg_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#srtl_lseg_reach(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl_lseg_reach(#s, SP#hd, SP#tl) == F#srtl_reach(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#srtl_lseg_reach(#s, SP#hd, SP#tl) == $oset_empty()) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#srtl_lseg_reach(#s, SP#hd, SP#tl))));

axiom $function_arg_type(cf#srtl_lseg_reach, 0, ^$#oset);

axiom $function_arg_type(cf#srtl_lseg_reach, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#srtl_lseg_reach, 2, $ptr_to(^s_node));

procedure srtl_lseg_reach(SP#hd: $ptr, SP#tl: $ptr) returns ($result: $oset);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#srtl_reach($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $oset_empty();
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result);
  free ensures $result == F#srtl_lseg_reach($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_keys(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : $intset;

const unique cf#sll_lseg_keys: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_keys(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_keys(#s, SP#hd, SP#tl) == F#sll_keys(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_keys(#s, SP#hd, SP#tl) == $intset_empty()) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $intset_in($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node)), F#sll_lseg_keys(#s, SP#hd, SP#tl))));

axiom $function_arg_type(cf#sll_lseg_keys, 0, ^$#intset);

axiom $function_arg_type(cf#sll_lseg_keys, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_keys, 2, $ptr_to(^s_node));

procedure sll_lseg_keys(SP#hd: $ptr, SP#tl: $ptr) returns ($result: $intset);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_keys($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $intset_empty();
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $intset_in($rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node)), $result);
  free ensures $result == F#sll_lseg_keys($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_min_key(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : int;

const unique cf#sll_lseg_min_key: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_min_key(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> $in_range_i4(F#sll_lseg_min_key(#s, SP#hd, SP#tl)) && ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_min_key(#s, SP#hd, SP#tl) == F#sll_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_min_key(#s, SP#hd, SP#tl) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node))));

axiom $function_arg_type(cf#sll_lseg_min_key, 0, ^^i4);

axiom $function_arg_type(cf#sll_lseg_min_key, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_min_key, 2, $ptr_to(^s_node));

procedure sll_lseg_min_key(SP#hd: $ptr, SP#tl: $ptr) returns ($result: int);
  free ensures $in_range_i4($result);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_min_key($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node));
  free ensures $result == F#sll_lseg_min_key($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_max_key(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : int;

const unique cf#sll_lseg_max_key: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_max_key(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> $in_range_i4(F#sll_lseg_max_key(#s, SP#hd, SP#tl)) && ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_max_key(#s, SP#hd, SP#tl) == F#sll_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_max_key(#s, SP#hd, SP#tl) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node))));

axiom $function_arg_type(cf#sll_lseg_max_key, 0, ^^i4);

axiom $function_arg_type(cf#sll_lseg_max_key, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_max_key, 2, $ptr_to(^s_node));

procedure sll_lseg_max_key(SP#hd: $ptr, SP#tl: $ptr) returns ($result: int);
  free ensures $in_range_i4($result);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_max_key($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node));
  free ensures $result == F#sll_lseg_max_key($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_len_next(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : int;

const unique cf#sll_lseg_len_next: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_len_next(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> $in_range_nat(F#sll_lseg_len_next(#s, SP#hd, SP#tl)) && ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_len_next(#s, SP#hd, SP#tl) == F#sll_list_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_len_next(#s, SP#hd, SP#tl) == 0) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_len_next(#s, SP#hd, SP#tl) > 0));

axiom $function_arg_type(cf#sll_lseg_len_next, 0, ^^nat);

axiom $function_arg_type(cf#sll_lseg_len_next, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_len_next, 2, $ptr_to(^s_node));

procedure sll_lseg_len_next(SP#hd: $ptr, SP#tl: $ptr) returns ($result: int);
  free ensures $in_range_nat($result);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_list_len_next($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == 0;
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $result > 0;
  free ensures $result == F#sll_lseg_len_next($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



procedure g_slist_sort_merge(P#l1: $ptr, P#l2: $ptr) returns ($result: $ptr);
  requires F#srtl($s, $phys_ptr_cast(P#l1, ^s_node));
  requires F#srtl($s, $phys_ptr_cast(P#l2, ^s_node));
  requires $oset_disjoint(F#srtl_reach($s, $phys_ptr_cast(P#l1, ^s_node)), F#srtl_reach($s, $phys_ptr_cast(P#l2, ^s_node)));
  modifies $s, $cev_pc;
  ensures F#srtl($s, $phys_ptr_cast($result, ^s_node));
  free ensures $writes_nothing(old($s), $s);
  free ensures $call_transition(old($s), $s);



implementation g_slist_sort_merge(P#l1: $ptr, P#l2: $ptr) returns ($result: $ptr)
{
  var stmtexpr1#21: $state;
  var _dryad_S7#7: $state;
  var stmtexpr0#20: $state;
  var _dryad_S6#6: $state;
  var stmtexpr1#19: $state;
  var _dryad_S7#5: $state;
  var stmtexpr0#18: $state;
  var _dryad_S6#4: $state;
  var stmtexpr2#17: $state;
  var _dryad_S7#3: $state;
  var stmtexpr1#16: $state;
  var _dryad_S6#2: $state;
  var stmtexpr0#15: $ptr;
  var SL#l3: $ptr;
  var stmtexpr2#14: $ptr;
  var SL#l24: $ptr;
  var stmtexpr1#13: $state;
  var _dryad_S7#1: $state;
  var stmtexpr0#12: $state;
  var _dryad_S6#0: $state;
  var stmtexpr2#11: $ptr;
  var SL#l14: $ptr;
  var stmtexpr1#10: $state;
  var SL#_dryad_S7: $state;
  var stmtexpr0#9: $state;
  var SL#_dryad_S6: $state;
  var ite#1: bool;
  var loopState#0: $state;
  var stmtexpr9#31: $ptr;
  var SL#list2: $ptr;
  var stmtexpr8#30: $state;
  var SL#_dryad_S5: $state;
  var stmtexpr7#29: $state;
  var SL#_dryad_S4: $state;
  var stmtexpr6#28: $state;
  var SL#_dryad_S3: $state;
  var stmtexpr5#27: $state;
  var SL#_dryad_S2: $state;
  var stmtexpr4#26: $state;
  var SL#_dryad_S1: $state;
  var stmtexpr3#25: $oset;
  var stmtexpr2#24: $state;
  var SL#_dryad_S0: $state;
  var res_sll_reach#8: $oset;
  var res_sll_reach#7: $oset;
  var res_sll_keys#6: $intset;
  var res_sll_keys#5: $intset;
  var SL#k1: $intset;
  var SL#k2: $intset;
  var SL#init_sll_keys: $intset;
  var SL#INIT_REACH: $oset;
  var L#list: $ptr;
  var L#l: $ptr;
  var L#list_next: $ptr;
  var stmtexpr1#23: $oset;
  var stmtexpr0#22: $oset;
  var res_srtl_reach#4: $oset;
  var res_srtl_reach#3: $oset;
  var SL#_dryad_G1: $oset;
  var SL#_dryad_G0: $oset;
  var local.l1: $ptr;
  var local.l2: $ptr;
  var #wrTime$3^3.3: int;
  var #stackframe: int;

// INV:PTR: P#l1, P#l2, L#list, L#l, L#list_next, local.l1, local.l2
// INV:INT:
// INV:LST: srtl

  anon9:
    assume $function_entry($s);
    assume $full_stop_ext(#tok$3^3.3, $s);
    assume $can_use_all_frame_axioms($s);
    assume #wrTime$3^3.3 == $current_timestamp($s);
    assume $def_writes($s, #wrTime$3^3.3, (lambda #p: $ptr :: false));
    // assume true
    // assume true
    // assume @decreases_level_is(2147483647); 
    assume 2147483647 == $decreases_level;
    // struct s_node* local.l2; 
    // local.l2 := l2; 
    local.l2 := $phys_ptr_cast(P#l2, ^s_node);
    // struct s_node* local.l1; 
    // local.l1 := l1; 
    local.l1 := $phys_ptr_cast(P#l1, ^s_node);
    // assume ==(-2147483648, unchecked-(unchecked-(0, 2147483647), 1)); 
    assume -2147483648 == $unchk_sub(^^i4, $unchk_sub(^^i4, 0, 2147483647), 1);
    // assume true
    //  --- Dryad annotated function --- 
    // _math \oset _dryad_G0; 
    // _math \oset _dryad_G1; 
    // _math \oset res_srtl_reach#3; 
    // res_srtl_reach#3 := srtl_reach(local.l1); 
    call res_srtl_reach#3 := srtl_reach($phys_ptr_cast(local.l1, ^s_node));
    assume $full_stop_ext(#tok$4^0.0, $s);
    // _math \oset res_srtl_reach#4; 
    // res_srtl_reach#4 := srtl_reach(local.l2); 
    call res_srtl_reach#4 := srtl_reach($phys_ptr_cast(local.l2, ^s_node));
    assume $full_stop_ext(#tok$4^0.0, $s);
    // _dryad_G0 := @_vcc_oset_union(res_srtl_reach#3, res_srtl_reach#4); 
    SL#_dryad_G0 := $oset_union(res_srtl_reach#3, res_srtl_reach#4);
    // _math \oset stmtexpr0#22; 
    // stmtexpr0#22 := _dryad_G0; 
    stmtexpr0#22 := SL#_dryad_G0;
    // _dryad_G1 := _dryad_G0; 
    SL#_dryad_G1 := SL#_dryad_G0;
    // _math \oset stmtexpr1#23; 
    // stmtexpr1#23 := _dryad_G1; 
    stmtexpr1#23 := SL#_dryad_G1;
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // struct s_node* list_next; 
    // struct s_node* l; 
    // struct s_node* list; 
    // _math \oset INIT_REACH; 
    // _math \intset init_sll_keys; 
    // _math \intset k2; 
    // _math \intset k1; 
    // k1 := sll_keys(local.l1); 
    call SL#k1 := sll_keys($phys_ptr_cast(local.l1, ^s_node));
    assume $full_stop_ext(#tok$3^10.23, $s);
    // k2 := sll_keys(local.l2); 
    call SL#k2 := sll_keys($phys_ptr_cast(local.l2, ^s_node));
    assume $full_stop_ext(#tok$3^11.23, $s);
    // _math \intset res_sll_keys#5; 
    // res_sll_keys#5 := sll_keys(local.l1); 
    call res_sll_keys#5 := sll_keys($phys_ptr_cast(local.l1, ^s_node));
    assume $full_stop_ext(#tok$3^12.48, $s);
    // _math \intset res_sll_keys#6; 
    // res_sll_keys#6 := sll_keys(local.l2); 
    call res_sll_keys#6 := sll_keys($phys_ptr_cast(local.l2, ^s_node));
    assume $full_stop_ext(#tok$3^12.62, $s);
    // init_sll_keys := @_vcc_intset_union(res_sll_keys#5, res_sll_keys#6); 
    SL#init_sll_keys := $intset_union(res_sll_keys#5, res_sll_keys#6);
    // _math \oset res_sll_reach#7; 
    // res_sll_reach#7 := sll_reach(local.l1); 
    call res_sll_reach#7 := sll_reach($phys_ptr_cast(local.l1, ^s_node));
    assume $full_stop_ext(#tok$3^13.41, $s);
    // _math \oset res_sll_reach#8; 
    // res_sll_reach#8 := sll_reach(local.l2); 
    call res_sll_reach#8 := sll_reach($phys_ptr_cast(local.l2, ^s_node));
    assume $full_stop_ext(#tok$3^13.56, $s);
    // INIT_REACH := @_vcc_oset_union(res_sll_reach#7, res_sll_reach#8); 
    SL#INIT_REACH := $oset_union(res_sll_reach#7, res_sll_reach#8);
    // var struct s_node* list
    // var struct s_node* l
    // assume &&(==>(@_vcc_ptr_neq_null(local.l1), &&(@_vcc_mutable(@state, local.l1), @writes_check(local.l1))), ==>(@_vcc_ptr_neq_null(local.l2), &&(@_vcc_mutable(@state, local.l2), @writes_check(local.l2)))); 
    assume ($non_null($phys_ptr_cast(local.l1, ^s_node)) ==> $mutable($s, $phys_ptr_cast(local.l1, ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(local.l1, ^s_node))) && ($non_null($phys_ptr_cast(local.l2, ^s_node)) ==> $mutable($s, $phys_ptr_cast(local.l2, ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(local.l2, ^s_node)));
    // _math \state _dryad_S0; 
    // _dryad_S0 := @_vcc_current_state(@state); 
    SL#_dryad_S0 := $current_state($s);
    // _math \state stmtexpr2#24; 
    // stmtexpr2#24 := _dryad_S0; 
    stmtexpr2#24 := SL#_dryad_S0;
    // list := _vcc_alloc(@_vcc_typeof((struct s_node*)@null)); 
    call L#list := $alloc(^s_node);
    assume $full_stop_ext(#tok$3^18.9, $s);
    // assume !(@_vcc_oset_in(list, @_vcc_oset_union(_dryad_G0, _dryad_G1))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), $oset_union(SL#_dryad_G0, SL#_dryad_G1));
    // _dryad_G1 := @_vcc_oset_union(_dryad_G0, @_vcc_oset_singleton(list)); 
    SL#_dryad_G1 := $oset_union(SL#_dryad_G0, $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // _math \oset stmtexpr3#25; 
    // stmtexpr3#25 := _dryad_G1; 
    stmtexpr3#25 := SL#_dryad_G1;
    // assume ==(glob_reach(), _dryad_G1); 
    assume F#glob_reach() == SL#_dryad_G1;
    // _math \state _dryad_S1; 
    // _dryad_S1 := @_vcc_current_state(@state); 
    SL#_dryad_S1 := $current_state($s);
    // _math \state stmtexpr4#26; 
    // stmtexpr4#26 := _dryad_S1; 
    stmtexpr4#26 := SL#_dryad_S1;
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(l)))), ==(old(_dryad_S0, sll_keys(l)), old(_dryad_S1, sll_keys(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(l)))), ==(old(_dryad_S0, sll_list_len_next(l)), old(_dryad_S1, sll_list_len_next(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, rsrtl_reach(l)))), ==(old(_dryad_S0, rsrtl(l)), old(_dryad_S1, rsrtl(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node))) ==> F#rsrtl(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node)) == F#rsrtl(SL#_dryad_S1, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, rsrtl_reach(l)))), ==(old(_dryad_S0, rsrtl_reach(l)), old(_dryad_S1, rsrtl_reach(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node)) == F#rsrtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(l)))), ==(old(_dryad_S0, sll(l)), old(_dryad_S1, sll(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(l)))), ==(old(_dryad_S0, sll_reach(l)), old(_dryad_S1, sll_reach(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(l)))), ==(old(_dryad_S0, sll_max_key(l)), old(_dryad_S1, sll_max_key(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_max_key(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node)) == F#sll_max_key(SL#_dryad_S1, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(l)))), ==(old(_dryad_S0, sll_min_key(l)), old(_dryad_S1, sll_min_key(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_min_key(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node)) == F#sll_min_key(SL#_dryad_S1, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, srtl_reach(l)))), ==(old(_dryad_S0, srtl(l)), old(_dryad_S1, srtl(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node)) == F#srtl(SL#_dryad_S1, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, srtl_reach(l)))), ==(old(_dryad_S0, srtl_reach(l)), old(_dryad_S1, srtl_reach(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node)) == F#srtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(list_next)))), ==(old(_dryad_S0, sll_keys(list_next)), old(_dryad_S1, sll_keys(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(list_next)))), ==(old(_dryad_S0, sll_list_len_next(list_next)), old(_dryad_S1, sll_list_len_next(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, rsrtl_reach(list_next)))), ==(old(_dryad_S0, rsrtl(list_next)), old(_dryad_S1, rsrtl(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl(SL#_dryad_S1, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, rsrtl_reach(list_next)))), ==(old(_dryad_S0, rsrtl_reach(list_next)), old(_dryad_S1, rsrtl_reach(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(list_next)))), ==(old(_dryad_S0, sll(list_next)), old(_dryad_S1, sll(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(list_next)))), ==(old(_dryad_S0, sll_reach(list_next)), old(_dryad_S1, sll_reach(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(list_next)))), ==(old(_dryad_S0, sll_max_key(list_next)), old(_dryad_S1, sll_max_key(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_max_key(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_max_key(SL#_dryad_S1, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(list_next)))), ==(old(_dryad_S0, sll_min_key(list_next)), old(_dryad_S1, sll_min_key(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_min_key(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_min_key(SL#_dryad_S1, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, srtl_reach(list_next)))), ==(old(_dryad_S0, srtl(list_next)), old(_dryad_S1, srtl(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl(SL#_dryad_S1, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, srtl_reach(list_next)))), ==(old(_dryad_S0, srtl_reach(list_next)), old(_dryad_S1, srtl_reach(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(local.l2)))), ==(old(_dryad_S0, sll_keys(local.l2)), old(_dryad_S1, sll_keys(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(local.l2)))), ==(old(_dryad_S0, sll_list_len_next(local.l2)), old(_dryad_S1, sll_list_len_next(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, rsrtl_reach(local.l2)))), ==(old(_dryad_S0, rsrtl(local.l2)), old(_dryad_S1, rsrtl(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl(SL#_dryad_S1, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, rsrtl_reach(local.l2)))), ==(old(_dryad_S0, rsrtl_reach(local.l2)), old(_dryad_S1, rsrtl_reach(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl_reach(SL#_dryad_S1, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(local.l2)))), ==(old(_dryad_S0, sll(local.l2)), old(_dryad_S1, sll(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(local.l2)))), ==(old(_dryad_S0, sll_reach(local.l2)), old(_dryad_S1, sll_reach(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(local.l2)))), ==(old(_dryad_S0, sll_max_key(local.l2)), old(_dryad_S1, sll_max_key(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_max_key(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_max_key(SL#_dryad_S1, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(local.l2)))), ==(old(_dryad_S0, sll_min_key(local.l2)), old(_dryad_S1, sll_min_key(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_min_key(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_min_key(SL#_dryad_S1, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, srtl_reach(local.l2)))), ==(old(_dryad_S0, srtl(local.l2)), old(_dryad_S1, srtl(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl(SL#_dryad_S1, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, srtl_reach(local.l2)))), ==(old(_dryad_S0, srtl_reach(local.l2)), old(_dryad_S1, srtl_reach(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl_reach(SL#_dryad_S1, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(local.l1)))), ==(old(_dryad_S0, sll_keys(local.l1)), old(_dryad_S1, sll_keys(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(local.l1)))), ==(old(_dryad_S0, sll_list_len_next(local.l1)), old(_dryad_S1, sll_list_len_next(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, rsrtl_reach(local.l1)))), ==(old(_dryad_S0, rsrtl(local.l1)), old(_dryad_S1, rsrtl(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl(SL#_dryad_S1, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, rsrtl_reach(local.l1)))), ==(old(_dryad_S0, rsrtl_reach(local.l1)), old(_dryad_S1, rsrtl_reach(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl_reach(SL#_dryad_S1, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(local.l1)))), ==(old(_dryad_S0, sll(local.l1)), old(_dryad_S1, sll(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(local.l1)))), ==(old(_dryad_S0, sll_reach(local.l1)), old(_dryad_S1, sll_reach(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(local.l1)))), ==(old(_dryad_S0, sll_max_key(local.l1)), old(_dryad_S1, sll_max_key(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_max_key(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_max_key(SL#_dryad_S1, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(local.l1)))), ==(old(_dryad_S0, sll_min_key(local.l1)), old(_dryad_S1, sll_min_key(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_min_key(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_min_key(SL#_dryad_S1, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, srtl_reach(local.l1)))), ==(old(_dryad_S0, srtl(local.l1)), old(_dryad_S1, srtl(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl(SL#_dryad_S1, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, srtl_reach(local.l1)))), ==(old(_dryad_S0, srtl_reach(local.l1)), old(_dryad_S1, srtl_reach(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl_reach(SL#_dryad_S1, $phys_ptr_cast(local.l1, ^s_node));
    // assume @_vcc_ptr_neq_null(list); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node));
    // _math \state _dryad_S2; 
    // _dryad_S2 := @_vcc_current_state(@state); 
    SL#_dryad_S2 := $current_state($s);
    // _math \state stmtexpr5#27; 
    // stmtexpr5#27 := _dryad_S2; 
    stmtexpr5#27 := SL#_dryad_S2;
    // assert @prim_writes_check((list->key)); 
    assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#list, ^s_node), s_node.key));
    // *(list->key) := -2147483648; 
    call $write_int(s_node.key, $phys_ptr_cast(L#list, ^s_node), -2147483648);
    assume $full_stop_ext(#tok$3^26.2, $s);
    // _math \state _dryad_S3; 
    // _dryad_S3 := @_vcc_current_state(@state); 
    SL#_dryad_S3 := $current_state($s);
    // _math \state stmtexpr6#28; 
    // stmtexpr6#28 := _dryad_S3; 
    stmtexpr6#28 := SL#_dryad_S3;
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(*((list->next)))))), ==(old(_dryad_S2, sll_keys(*((list->next)))), old(_dryad_S3, sll_keys(*((list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) == F#sll_keys(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(*((list->next)))))), ==(old(_dryad_S2, sll_list_len_next(*((list->next)))), old(_dryad_S3, sll_list_len_next(*((list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, rsrtl_reach(*((list->next)))))), ==(old(_dryad_S2, rsrtl(*((list->next)))), old(_dryad_S3, rsrtl(*((list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) == F#rsrtl(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, rsrtl_reach(*((list->next)))))), ==(old(_dryad_S2, rsrtl_reach(*((list->next)))), old(_dryad_S3, rsrtl_reach(*((list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(*((list->next)))))), ==(old(_dryad_S2, sll(*((list->next)))), old(_dryad_S3, sll(*((list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) ==> F#sll(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) == F#sll(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(*((list->next)))))), ==(old(_dryad_S2, sll_reach(*((list->next)))), old(_dryad_S3, sll_reach(*((list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) == F#sll_reach(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(*((list->next)))))), ==(old(_dryad_S2, sll_max_key(*((list->next)))), old(_dryad_S3, sll_max_key(*((list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) == F#sll_max_key(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(*((list->next)))))), ==(old(_dryad_S2, sll_min_key(*((list->next)))), old(_dryad_S3, sll_min_key(*((list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) == F#sll_min_key(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, srtl_reach(*((list->next)))))), ==(old(_dryad_S2, srtl(*((list->next)))), old(_dryad_S3, srtl(*((list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) ==> F#srtl(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) == F#srtl(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, srtl_reach(*((list->next)))))), ==(old(_dryad_S2, srtl_reach(*((list->next)))), old(_dryad_S3, srtl_reach(*((list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) == F#srtl_reach(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node));
    // assume ==(old(_dryad_S2, sll_list_len_next(list)), old(_dryad_S3, sll_list_len_next(list))); 
    assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#list, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#list, ^s_node));
    // assume ==(old(_dryad_S2, rsrtl_reach(list)), old(_dryad_S3, rsrtl_reach(list))); 
    assume F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#list, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#list, ^s_node));
    // assume ==(old(_dryad_S2, sll(list)), old(_dryad_S3, sll(list))); 
    assume F#sll(SL#_dryad_S2, $phys_ptr_cast(L#list, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#list, ^s_node));
    // assume ==(old(_dryad_S2, sll_reach(list)), old(_dryad_S3, sll_reach(list))); 
    assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#list, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#list, ^s_node));
    // assume ==(old(_dryad_S2, srtl_reach(list)), old(_dryad_S3, srtl_reach(list))); 
    assume F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#list, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#list, ^s_node));
    // assume ==(old(_dryad_S2, sll_list_len_next(l)), old(_dryad_S3, sll_list_len_next(l))); 
    assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==(old(_dryad_S2, rsrtl_reach(l)), old(_dryad_S3, rsrtl_reach(l))); 
    assume F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==(old(_dryad_S2, sll(l)), old(_dryad_S3, sll(l))); 
    assume F#sll(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==(old(_dryad_S2, sll_reach(l)), old(_dryad_S3, sll_reach(l))); 
    assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==(old(_dryad_S2, srtl_reach(l)), old(_dryad_S3, srtl_reach(l))); 
    assume F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==(old(_dryad_S2, sll_list_len_next(list_next)), old(_dryad_S3, sll_list_len_next(list_next))); 
    assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==(old(_dryad_S2, rsrtl_reach(list_next)), old(_dryad_S3, rsrtl_reach(list_next))); 
    assume F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==(old(_dryad_S2, sll(list_next)), old(_dryad_S3, sll(list_next))); 
    assume F#sll(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==(old(_dryad_S2, sll_reach(list_next)), old(_dryad_S3, sll_reach(list_next))); 
    assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==(old(_dryad_S2, srtl_reach(list_next)), old(_dryad_S3, srtl_reach(list_next))); 
    assume F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==(old(_dryad_S2, sll_list_len_next(local.l2)), old(_dryad_S3, sll_list_len_next(local.l2))); 
    assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==(old(_dryad_S2, rsrtl_reach(local.l2)), old(_dryad_S3, rsrtl_reach(local.l2))); 
    assume F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==(old(_dryad_S2, sll(local.l2)), old(_dryad_S3, sll(local.l2))); 
    assume F#sll(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==(old(_dryad_S2, sll_reach(local.l2)), old(_dryad_S3, sll_reach(local.l2))); 
    assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==(old(_dryad_S2, srtl_reach(local.l2)), old(_dryad_S3, srtl_reach(local.l2))); 
    assume F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==(old(_dryad_S2, sll_list_len_next(local.l1)), old(_dryad_S3, sll_list_len_next(local.l1))); 
    assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==(old(_dryad_S2, rsrtl_reach(local.l1)), old(_dryad_S3, rsrtl_reach(local.l1))); 
    assume F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==(old(_dryad_S2, sll(local.l1)), old(_dryad_S3, sll(local.l1))); 
    assume F#sll(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==(old(_dryad_S2, sll_reach(local.l1)), old(_dryad_S3, sll_reach(local.l1))); 
    assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==(old(_dryad_S2, srtl_reach(local.l1)), old(_dryad_S3, srtl_reach(local.l1))); 
    assume F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(l)))), ==(old(_dryad_S2, sll_keys(l)), old(_dryad_S3, sll_keys(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(l)))), ==(old(_dryad_S2, sll_list_len_next(l)), old(_dryad_S3, sll_list_len_next(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, rsrtl_reach(l)))), ==(old(_dryad_S2, rsrtl(l)), old(_dryad_S3, rsrtl(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#rsrtl(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, rsrtl_reach(l)))), ==(old(_dryad_S2, rsrtl_reach(l)), old(_dryad_S3, rsrtl_reach(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(l)))), ==(old(_dryad_S2, sll(l)), old(_dryad_S3, sll(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(l)))), ==(old(_dryad_S2, sll_reach(l)), old(_dryad_S3, sll_reach(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(l)))), ==(old(_dryad_S2, sll_max_key(l)), old(_dryad_S3, sll_max_key(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#sll_max_key(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(l)))), ==(old(_dryad_S2, sll_min_key(l)), old(_dryad_S3, sll_min_key(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#sll_min_key(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, srtl_reach(l)))), ==(old(_dryad_S2, srtl(l)), old(_dryad_S3, srtl(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#srtl(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, srtl_reach(l)))), ==(old(_dryad_S2, srtl_reach(l)), old(_dryad_S3, srtl_reach(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(list_next)))), ==(old(_dryad_S2, sll_keys(list_next)), old(_dryad_S3, sll_keys(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(list_next)))), ==(old(_dryad_S2, sll_list_len_next(list_next)), old(_dryad_S3, sll_list_len_next(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, rsrtl_reach(list_next)))), ==(old(_dryad_S2, rsrtl(list_next)), old(_dryad_S3, rsrtl(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, rsrtl_reach(list_next)))), ==(old(_dryad_S2, rsrtl_reach(list_next)), old(_dryad_S3, rsrtl_reach(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(list_next)))), ==(old(_dryad_S2, sll(list_next)), old(_dryad_S3, sll(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(list_next)))), ==(old(_dryad_S2, sll_reach(list_next)), old(_dryad_S3, sll_reach(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(list_next)))), ==(old(_dryad_S2, sll_max_key(list_next)), old(_dryad_S3, sll_max_key(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_max_key(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(list_next)))), ==(old(_dryad_S2, sll_min_key(list_next)), old(_dryad_S3, sll_min_key(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_min_key(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, srtl_reach(list_next)))), ==(old(_dryad_S2, srtl(list_next)), old(_dryad_S3, srtl(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, srtl_reach(list_next)))), ==(old(_dryad_S2, srtl_reach(list_next)), old(_dryad_S3, srtl_reach(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(local.l2)))), ==(old(_dryad_S2, sll_keys(local.l2)), old(_dryad_S3, sll_keys(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(local.l2)))), ==(old(_dryad_S2, sll_list_len_next(local.l2)), old(_dryad_S3, sll_list_len_next(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, rsrtl_reach(local.l2)))), ==(old(_dryad_S2, rsrtl(local.l2)), old(_dryad_S3, rsrtl(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, rsrtl_reach(local.l2)))), ==(old(_dryad_S2, rsrtl_reach(local.l2)), old(_dryad_S3, rsrtl_reach(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(local.l2)))), ==(old(_dryad_S2, sll(local.l2)), old(_dryad_S3, sll(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(local.l2)))), ==(old(_dryad_S2, sll_reach(local.l2)), old(_dryad_S3, sll_reach(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(local.l2)))), ==(old(_dryad_S2, sll_max_key(local.l2)), old(_dryad_S3, sll_max_key(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_max_key(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(local.l2)))), ==(old(_dryad_S2, sll_min_key(local.l2)), old(_dryad_S3, sll_min_key(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_min_key(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, srtl_reach(local.l2)))), ==(old(_dryad_S2, srtl(local.l2)), old(_dryad_S3, srtl(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, srtl_reach(local.l2)))), ==(old(_dryad_S2, srtl_reach(local.l2)), old(_dryad_S3, srtl_reach(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(local.l1)))), ==(old(_dryad_S2, sll_keys(local.l1)), old(_dryad_S3, sll_keys(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(local.l1)))), ==(old(_dryad_S2, sll_list_len_next(local.l1)), old(_dryad_S3, sll_list_len_next(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, rsrtl_reach(local.l1)))), ==(old(_dryad_S2, rsrtl(local.l1)), old(_dryad_S3, rsrtl(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, rsrtl_reach(local.l1)))), ==(old(_dryad_S2, rsrtl_reach(local.l1)), old(_dryad_S3, rsrtl_reach(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(local.l1)))), ==(old(_dryad_S2, sll(local.l1)), old(_dryad_S3, sll(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(local.l1)))), ==(old(_dryad_S2, sll_reach(local.l1)), old(_dryad_S3, sll_reach(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(local.l1)))), ==(old(_dryad_S2, sll_max_key(local.l1)), old(_dryad_S3, sll_max_key(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_max_key(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(local.l1)))), ==(old(_dryad_S2, sll_min_key(local.l1)), old(_dryad_S3, sll_min_key(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_min_key(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, srtl_reach(local.l1)))), ==(old(_dryad_S2, srtl(local.l1)), old(_dryad_S3, srtl(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, srtl_reach(local.l1)))), ==(old(_dryad_S2, srtl_reach(local.l1)), old(_dryad_S3, srtl_reach(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(list, l)), ==(*((l->key)), old(_dryad_S2, *((l->key))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(L#l, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(list, l)), @_vcc_ptr_eq_pure(*((l->next)), old(_dryad_S2, *((l->next))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(L#l, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(list, list_next)), ==(*((list_next->key)), old(_dryad_S2, *((list_next->key))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(list, list_next)), @_vcc_ptr_eq_pure(*((list_next->next)), old(_dryad_S2, *((list_next->next))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(list, local.l2)), ==(*((local.l2->key)), old(_dryad_S2, *((local.l2->key))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(list, local.l2)), @_vcc_ptr_eq_pure(*((local.l2->next)), old(_dryad_S2, *((local.l2->next))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(list, local.l1)), ==(*((local.l1->key)), old(_dryad_S2, *((local.l1->key))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(list, local.l1)), @_vcc_ptr_eq_pure(*((local.l1->next)), old(_dryad_S2, *((local.l1->next))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node);
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // _math \state _dryad_S4; 
    // _dryad_S4 := @_vcc_current_state(@state); 
    SL#_dryad_S4 := $current_state($s);
    // _math \state stmtexpr7#29; 
    // stmtexpr7#29 := _dryad_S4; 
    stmtexpr7#29 := SL#_dryad_S4;
    // assert @prim_writes_check((list->next)); 
    assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#list, ^s_node), s_node.next));
    // *(list->next) := (struct s_node*)@null; 
    call $write_int(s_node.next, $phys_ptr_cast(L#list, ^s_node), $ptr_to_int($phys_ptr_cast($null, ^s_node)));
    assume $full_stop_ext(#tok$3^27.2, $s);
    // _math \state _dryad_S5; 
    // _dryad_S5 := @_vcc_current_state(@state); 
    SL#_dryad_S5 := $current_state($s);
    // _math \state stmtexpr8#30; 
    // stmtexpr8#30 := _dryad_S5; 
    stmtexpr8#30 := SL#_dryad_S5;
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(l)))), ==(old(_dryad_S4, sll_keys(l)), old(_dryad_S5, sll_keys(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(l)))), ==(old(_dryad_S4, sll_list_len_next(l)), old(_dryad_S5, sll_list_len_next(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, rsrtl_reach(l)))), ==(old(_dryad_S4, rsrtl(l)), old(_dryad_S5, rsrtl(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node))) ==> F#rsrtl(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node)) == F#rsrtl(SL#_dryad_S5, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, rsrtl_reach(l)))), ==(old(_dryad_S4, rsrtl_reach(l)), old(_dryad_S5, rsrtl_reach(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node)) == F#rsrtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(l)))), ==(old(_dryad_S4, sll(l)), old(_dryad_S5, sll(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(l)))), ==(old(_dryad_S4, sll_reach(l)), old(_dryad_S5, sll_reach(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(l)))), ==(old(_dryad_S4, sll_max_key(l)), old(_dryad_S5, sll_max_key(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_max_key(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node)) == F#sll_max_key(SL#_dryad_S5, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(l)))), ==(old(_dryad_S4, sll_min_key(l)), old(_dryad_S5, sll_min_key(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_min_key(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node)) == F#sll_min_key(SL#_dryad_S5, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, srtl_reach(l)))), ==(old(_dryad_S4, srtl(l)), old(_dryad_S5, srtl(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node)) == F#srtl(SL#_dryad_S5, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, srtl_reach(l)))), ==(old(_dryad_S4, srtl_reach(l)), old(_dryad_S5, srtl_reach(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node)) == F#srtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(list_next)))), ==(old(_dryad_S4, sll_keys(list_next)), old(_dryad_S5, sll_keys(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(list_next)))), ==(old(_dryad_S4, sll_list_len_next(list_next)), old(_dryad_S5, sll_list_len_next(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, rsrtl_reach(list_next)))), ==(old(_dryad_S4, rsrtl(list_next)), old(_dryad_S5, rsrtl(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl(SL#_dryad_S5, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, rsrtl_reach(list_next)))), ==(old(_dryad_S4, rsrtl_reach(list_next)), old(_dryad_S5, rsrtl_reach(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(list_next)))), ==(old(_dryad_S4, sll(list_next)), old(_dryad_S5, sll(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(list_next)))), ==(old(_dryad_S4, sll_reach(list_next)), old(_dryad_S5, sll_reach(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(list_next)))), ==(old(_dryad_S4, sll_max_key(list_next)), old(_dryad_S5, sll_max_key(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_max_key(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_max_key(SL#_dryad_S5, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(list_next)))), ==(old(_dryad_S4, sll_min_key(list_next)), old(_dryad_S5, sll_min_key(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_min_key(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_min_key(SL#_dryad_S5, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, srtl_reach(list_next)))), ==(old(_dryad_S4, srtl(list_next)), old(_dryad_S5, srtl(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl(SL#_dryad_S5, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, srtl_reach(list_next)))), ==(old(_dryad_S4, srtl_reach(list_next)), old(_dryad_S5, srtl_reach(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(local.l2)))), ==(old(_dryad_S4, sll_keys(local.l2)), old(_dryad_S5, sll_keys(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(local.l2)))), ==(old(_dryad_S4, sll_list_len_next(local.l2)), old(_dryad_S5, sll_list_len_next(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, rsrtl_reach(local.l2)))), ==(old(_dryad_S4, rsrtl(local.l2)), old(_dryad_S5, rsrtl(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl(SL#_dryad_S5, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, rsrtl_reach(local.l2)))), ==(old(_dryad_S4, rsrtl_reach(local.l2)), old(_dryad_S5, rsrtl_reach(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl_reach(SL#_dryad_S5, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(local.l2)))), ==(old(_dryad_S4, sll(local.l2)), old(_dryad_S5, sll(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(local.l2)))), ==(old(_dryad_S4, sll_reach(local.l2)), old(_dryad_S5, sll_reach(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(local.l2)))), ==(old(_dryad_S4, sll_max_key(local.l2)), old(_dryad_S5, sll_max_key(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_max_key(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_max_key(SL#_dryad_S5, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(local.l2)))), ==(old(_dryad_S4, sll_min_key(local.l2)), old(_dryad_S5, sll_min_key(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_min_key(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_min_key(SL#_dryad_S5, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, srtl_reach(local.l2)))), ==(old(_dryad_S4, srtl(local.l2)), old(_dryad_S5, srtl(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl(SL#_dryad_S5, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, srtl_reach(local.l2)))), ==(old(_dryad_S4, srtl_reach(local.l2)), old(_dryad_S5, srtl_reach(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl_reach(SL#_dryad_S5, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(local.l1)))), ==(old(_dryad_S4, sll_keys(local.l1)), old(_dryad_S5, sll_keys(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(local.l1)))), ==(old(_dryad_S4, sll_list_len_next(local.l1)), old(_dryad_S5, sll_list_len_next(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, rsrtl_reach(local.l1)))), ==(old(_dryad_S4, rsrtl(local.l1)), old(_dryad_S5, rsrtl(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl(SL#_dryad_S5, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, rsrtl_reach(local.l1)))), ==(old(_dryad_S4, rsrtl_reach(local.l1)), old(_dryad_S5, rsrtl_reach(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl_reach(SL#_dryad_S5, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(local.l1)))), ==(old(_dryad_S4, sll(local.l1)), old(_dryad_S5, sll(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(local.l1)))), ==(old(_dryad_S4, sll_reach(local.l1)), old(_dryad_S5, sll_reach(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(local.l1)))), ==(old(_dryad_S4, sll_max_key(local.l1)), old(_dryad_S5, sll_max_key(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_max_key(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_max_key(SL#_dryad_S5, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(local.l1)))), ==(old(_dryad_S4, sll_min_key(local.l1)), old(_dryad_S5, sll_min_key(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_min_key(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_min_key(SL#_dryad_S5, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, srtl_reach(local.l1)))), ==(old(_dryad_S4, srtl(local.l1)), old(_dryad_S5, srtl(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl(SL#_dryad_S5, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, srtl_reach(local.l1)))), ==(old(_dryad_S4, srtl_reach(local.l1)), old(_dryad_S5, srtl_reach(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl_reach(SL#_dryad_S5, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(list, l)), ==(*((l->key)), old(_dryad_S4, *((l->key))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(L#l, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(list, l)), @_vcc_ptr_eq_pure(*((l->next)), old(_dryad_S4, *((l->next))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(L#l, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(list, list_next)), ==(*((list_next->key)), old(_dryad_S4, *((list_next->key))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(list, list_next)), @_vcc_ptr_eq_pure(*((list_next->next)), old(_dryad_S4, *((list_next->next))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(list, local.l2)), ==(*((local.l2->key)), old(_dryad_S4, *((local.l2->key))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(list, local.l2)), @_vcc_ptr_eq_pure(*((local.l2->next)), old(_dryad_S4, *((local.l2->next))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(list, local.l1)), ==(*((local.l1->key)), old(_dryad_S4, *((local.l1->key))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(list, local.l1)), @_vcc_ptr_eq_pure(*((local.l1->next)), old(_dryad_S4, *((local.l1->next))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node);
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // l := list; 
    L#l := $phys_ptr_cast(L#list, ^s_node);
    // assert sll_lseg(list, list); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#list, ^s_node));
    // assume sll_lseg(list, list); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#list, ^s_node));
    // assert srtl_lseg(list, list); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#list, ^s_node));
    // assume srtl_lseg(list, list); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#list, ^s_node));
    // assert sll_lseg(l, l); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#l, ^s_node), $phys_ptr_cast(L#l, ^s_node));
    // assume sll_lseg(l, l); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#l, ^s_node), $phys_ptr_cast(L#l, ^s_node));
    // assert srtl_lseg(l, l); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#l, ^s_node), $phys_ptr_cast(L#l, ^s_node));
    // assume srtl_lseg(l, l); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#l, ^s_node), $phys_ptr_cast(L#l, ^s_node));
    // assert sll_lseg(list_next, list_next); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#list_next, ^s_node), $phys_ptr_cast(L#list_next, ^s_node));
    // assume sll_lseg(list_next, list_next); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#list_next, ^s_node), $phys_ptr_cast(L#list_next, ^s_node));
    // assert srtl_lseg(list_next, list_next); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#list_next, ^s_node), $phys_ptr_cast(L#list_next, ^s_node));
    // assume srtl_lseg(list_next, list_next); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#list_next, ^s_node), $phys_ptr_cast(L#list_next, ^s_node));
    // assert sll_lseg(local.l2, local.l2); 
    assert F#sll_lseg($s, $phys_ptr_cast(local.l2, ^s_node), $phys_ptr_cast(local.l2, ^s_node));
    // assume sll_lseg(local.l2, local.l2); 
    assume F#sll_lseg($s, $phys_ptr_cast(local.l2, ^s_node), $phys_ptr_cast(local.l2, ^s_node));
    // assert srtl_lseg(local.l2, local.l2); 
    assert F#srtl_lseg($s, $phys_ptr_cast(local.l2, ^s_node), $phys_ptr_cast(local.l2, ^s_node));
    // assume srtl_lseg(local.l2, local.l2); 
    assume F#srtl_lseg($s, $phys_ptr_cast(local.l2, ^s_node), $phys_ptr_cast(local.l2, ^s_node));
    // assert sll_lseg(local.l1, local.l1); 
    assert F#sll_lseg($s, $phys_ptr_cast(local.l1, ^s_node), $phys_ptr_cast(local.l1, ^s_node));
    // assume sll_lseg(local.l1, local.l1); 
    assume F#sll_lseg($s, $phys_ptr_cast(local.l1, ^s_node), $phys_ptr_cast(local.l1, ^s_node));
    // assert srtl_lseg(local.l1, local.l1); 
    assert F#srtl_lseg($s, $phys_ptr_cast(local.l1, ^s_node), $phys_ptr_cast(local.l1, ^s_node));
    // assume srtl_lseg(local.l1, local.l1); 
    assume F#srtl_lseg($s, $phys_ptr_cast(local.l1, ^s_node), $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), <=(-2147483648, sll_min_key(local.l1))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> -2147483648 <= F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), <=(-2147483648, sll_min_key(local.l2))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> -2147483648 <= F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(@_vcc_ptr_neq_null(l), &&(@_vcc_mutable(@state, l), @writes_check(l))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> $mutable($s, $phys_ptr_cast(L#l, ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(L#l, ^s_node));
    // struct s_node* list2; 
    // list2 := list; 
    SL#list2 := $phys_ptr_cast(L#list, ^s_node);
    // struct s_node* stmtexpr9#31; 
    // stmtexpr9#31 := list2; 
    stmtexpr9#31 := $phys_ptr_cast(SL#list2, ^s_node);
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assert @reads_check_normal((list->next)); 
    assert $thread_local($s, $phys_ptr_cast(L#list, ^s_node));
    // list_next := *((list->next)); 
    L#list_next := $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node);
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    loopState#0 := $s;
    assume true;
// INV:LOOPHEAD
    while (true)
 invariant b0000 ==> (F#srtl($s,$phys_ptr_cast(P#l1,^s_node)));
invariant b0001 ==> (F#srtl($s,$phys_ptr_cast(P#l2,^s_node)));
invariant b0002 ==> (F#srtl($s,$phys_ptr_cast(L#list,^s_node)));
invariant b0003 ==> (F#srtl($s,$phys_ptr_cast(L#l,^s_node)));
invariant b0004 ==> (F#srtl($s,$phys_ptr_cast(L#list_next,^s_node)));
invariant b0005 ==> (F#srtl($s,$phys_ptr_cast(local.l1,^s_node)));
invariant b0006 ==> (F#srtl($s,$phys_ptr_cast(local.l2,^s_node)));
invariant b0007 ==> (F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)));
invariant b0008 ==> (F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)));
invariant b0009 ==> (F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)));
invariant b0010 ==> (F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)));
invariant b0011 ==> (F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)));
invariant b0012 ==> (F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)));
invariant b0013 ==> (F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)));
invariant b0014 ==> (F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)));
invariant b0015 ==> (F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)));
invariant b0016 ==> (F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)));
invariant b0017 ==> (F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)));
invariant b0018 ==> (F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)));
invariant b0019 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)));
invariant b0020 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)));
invariant b0021 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)));
invariant b0022 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)));
invariant b0023 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)));
invariant b0024 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)));
invariant b0025 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)));
invariant b0026 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)));
invariant b0027 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)));
invariant b0028 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)));
invariant b0029 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)));
invariant b0030 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)));
invariant b0031 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)));
invariant b0032 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)));
invariant b0033 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)));
invariant b0034 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)));
invariant b0035 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)));
invariant b0036 ==> (F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)));
invariant b0037 ==> (F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)));
invariant b0038 ==> (F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)));
invariant b0039 ==> (F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)));
invariant b0040 ==> (F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)));
invariant b0041 ==> (F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)));
invariant b0042 ==> (F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)));
invariant b0043 ==> (F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)));
invariant b0044 ==> (F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)));
invariant b0045 ==> (F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)));
invariant b0046 ==> (F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)));
invariant b0047 ==> (F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)));
invariant b0048 ==> (F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)));
invariant b0049 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0050 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0051 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0052 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0053 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0054 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0055 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0056 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0057 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0058 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0059 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0060 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0061 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0062 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0063 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0064 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0065 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0066 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0067 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0068 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0069 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0070 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0071 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0072 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0073 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0074 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0075 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0076 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0077 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0078 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0079 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0080 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0081 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0082 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0083 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0084 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0085 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0086 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0087 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0088 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0089 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0090 ==> ($oset_disjoint(F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0091 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0092 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0093 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0094 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0095 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0096 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0097 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0098 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0099 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0100 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0101 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0102 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0103 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0104 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0105 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0106 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0107 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0108 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0109 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0110 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0111 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0112 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0113 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0114 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0115 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0116 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0117 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0118 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0119 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0120 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0121 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0122 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0123 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0124 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0125 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0126 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0127 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0128 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0129 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0130 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0131 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0132 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0133 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0134 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0135 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0136 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0137 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0138 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0139 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0140 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0141 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0142 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0143 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0144 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0145 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0146 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0147 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0148 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0149 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0150 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0151 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0152 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0153 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0154 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0155 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0156 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0157 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0158 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0159 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0160 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0161 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0162 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0163 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0164 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0165 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0166 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0167 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0168 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0169 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0170 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0171 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0172 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0173 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0174 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0175 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0176 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0177 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0178 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0179 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0180 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0181 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0182 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0183 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0184 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0185 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0186 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0187 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0188 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0189 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0190 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0191 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0192 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0193 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0194 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0195 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0196 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0197 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0198 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0199 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0200 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0201 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0202 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0203 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0204 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0205 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0206 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0207 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0208 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0209 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0210 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0211 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0212 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0213 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0214 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0215 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0216 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0217 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0218 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0219 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0220 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0221 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0222 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0223 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0224 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0225 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0226 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0227 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0228 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0229 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0230 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0231 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0232 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0233 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0234 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0235 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0236 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0237 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0238 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0239 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0240 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0241 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0242 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0243 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0244 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0245 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0246 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0247 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0248 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0249 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0250 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0251 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0252 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0253 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0254 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0255 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0256 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0257 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0258 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0259 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0260 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0261 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0262 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0263 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0264 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0265 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0266 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0267 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0268 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0269 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0270 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0271 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0272 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0273 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0274 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0275 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0276 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0277 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0278 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0279 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0280 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0281 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0282 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0283 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0284 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0285 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0286 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0287 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0288 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0289 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0290 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0291 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0292 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0293 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0294 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0295 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0296 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0297 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0298 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0299 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0300 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0301 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0302 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0303 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0304 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0305 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0306 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0307 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0308 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0309 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0310 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0311 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0312 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0313 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0314 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0315 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0316 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0317 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0318 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0319 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0320 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0321 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0322 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0323 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0324 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0325 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0326 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0327 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0328 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0329 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0330 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0331 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0332 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0333 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0334 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0335 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0336 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0337 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0338 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0339 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0340 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0341 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0342 ==> ($oset_disjoint(F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0343 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0344 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0345 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0346 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0347 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0348 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0349 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0350 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0351 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0352 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0353 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0354 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0355 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0356 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0357 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0358 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0359 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0360 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0361 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0362 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0363 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0364 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0365 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0366 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0367 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0368 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0369 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0370 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0371 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0372 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0373 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0374 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0375 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0376 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0377 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0378 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b0379 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b0380 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b0381 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list,^s_node))));
invariant b0382 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#l,^s_node))));
invariant b0383 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b0384 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_reach($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b0385 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0386 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0387 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0388 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0389 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0390 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0391 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0392 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0393 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0394 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0395 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0396 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0397 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0398 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0399 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0400 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0401 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0402 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0403 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0404 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0405 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0406 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0407 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0408 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0409 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0410 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0411 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0412 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0413 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0414 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0415 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0416 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0417 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0418 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0419 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0420 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0421 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0422 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0423 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0424 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0425 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0426 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0427 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0428 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0429 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0430 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0431 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0432 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0433 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0434 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0435 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0436 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0437 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0438 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0439 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0440 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0441 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0442 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0443 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0444 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(P#l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0445 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0446 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0447 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0448 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0449 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0450 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0451 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0452 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0453 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0454 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0455 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0456 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0457 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0458 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0459 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0460 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0461 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0462 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0463 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0464 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0465 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0466 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0467 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0468 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0469 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0470 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0471 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0472 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0473 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0474 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0475 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0476 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0477 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0478 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0479 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0480 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0481 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0482 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0483 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0484 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0485 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0486 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0487 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0488 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0489 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0490 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0491 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0492 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0493 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0494 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0495 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0496 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0497 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0498 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0499 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0500 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0501 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0502 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0503 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0504 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#l,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0505 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0506 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0507 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0508 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0509 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0510 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0511 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0512 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0513 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0514 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0515 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0516 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0517 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0518 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0519 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0520 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0521 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0522 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0523 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0524 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0525 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0526 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0527 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0528 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0529 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0530 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0531 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0532 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0533 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0534 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(L#list_next,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0535 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0536 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0537 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0538 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0539 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0540 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0541 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0542 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0543 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0544 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0545 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0546 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0547 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0548 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0549 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0550 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0551 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0552 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0553 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0554 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0555 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0556 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0557 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0558 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0559 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b0560 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0561 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0562 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0563 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0564 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l1,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0565 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0566 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0567 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0568 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0569 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0570 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0571 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0572 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0573 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0574 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0575 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0576 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0577 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0578 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0579 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0580 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0581 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0582 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0583 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0584 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0585 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0586 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0587 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0588 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0589 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b0590 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b0591 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b0592 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b0593 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b0594 ==> ($oset_disjoint($oset_singleton($phys_ptr_cast(local.l2,^s_node)),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b0595 ==> ($non_null($phys_ptr_cast(P#l1,^s_node)));
invariant b0596 ==> ($non_null($phys_ptr_cast(P#l2,^s_node)));
invariant b0597 ==> ($non_null($phys_ptr_cast(L#list,^s_node)));
invariant b0598 ==> ($non_null($phys_ptr_cast(L#l,^s_node)));
invariant b0599 ==> ($non_null($phys_ptr_cast(L#list_next,^s_node)));
invariant b0600 ==> ($non_null($phys_ptr_cast(local.l1,^s_node)));
invariant b0601 ==> ($non_null($phys_ptr_cast(local.l2,^s_node)));
invariant b0602 ==> ($is_null($phys_ptr_cast(P#l1,^s_node)));
invariant b0603 ==> ($is_null($phys_ptr_cast(P#l2,^s_node)));
invariant b0604 ==> ($is_null($phys_ptr_cast(L#list,^s_node)));
invariant b0605 ==> ($is_null($phys_ptr_cast(L#l,^s_node)));
invariant b0606 ==> ($is_null($phys_ptr_cast(L#list_next,^s_node)));
invariant b0607 ==> ($is_null($phys_ptr_cast(local.l1,^s_node)));
invariant b0608 ==> ($is_null($phys_ptr_cast(local.l2,^s_node)));
invariant b0609 ==> (($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(P#l2,^s_node)));
invariant b0610 ==> (($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list,^s_node)));
invariant b0611 ==> (($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#l,^s_node)));
invariant b0612 ==> (($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node)));
invariant b0613 ==> (($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l1,^s_node)));
invariant b0614 ==> (($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l2,^s_node)));
invariant b0615 ==> (($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(P#l1,^s_node)));
invariant b0616 ==> (($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list,^s_node)));
invariant b0617 ==> (($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#l,^s_node)));
invariant b0618 ==> (($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node)));
invariant b0619 ==> (($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l1,^s_node)));
invariant b0620 ==> (($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l2,^s_node)));
invariant b0621 ==> (($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l1,^s_node)));
invariant b0622 ==> (($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l2,^s_node)));
invariant b0623 ==> (($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#l,^s_node)));
invariant b0624 ==> (($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#list_next,^s_node)));
invariant b0625 ==> (($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l1,^s_node)));
invariant b0626 ==> (($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l2,^s_node)));
invariant b0627 ==> (($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l1,^s_node)));
invariant b0628 ==> (($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l2,^s_node)));
invariant b0629 ==> (($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list,^s_node)));
invariant b0630 ==> (($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list_next,^s_node)));
invariant b0631 ==> (($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l1,^s_node)));
invariant b0632 ==> (($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l2,^s_node)));
invariant b0633 ==> (($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l1,^s_node)));
invariant b0634 ==> (($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l2,^s_node)));
invariant b0635 ==> (($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#list,^s_node)));
invariant b0636 ==> (($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#l,^s_node)));
invariant b0637 ==> (($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l1,^s_node)));
invariant b0638 ==> (($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l2,^s_node)));
invariant b0639 ==> (($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l1,^s_node)));
invariant b0640 ==> (($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l2,^s_node)));
invariant b0641 ==> (($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list,^s_node)));
invariant b0642 ==> (($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#l,^s_node)));
invariant b0643 ==> (($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node)));
invariant b0644 ==> (($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(local.l2,^s_node)));
invariant b0645 ==> (($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l1,^s_node)));
invariant b0646 ==> (($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l2,^s_node)));
invariant b0647 ==> (($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list,^s_node)));
invariant b0648 ==> (($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#l,^s_node)));
invariant b0649 ==> (($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node)));
invariant b0650 ==> (($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(local.l1,^s_node)));
invariant b0651 ==> (($non_null($phys_ptr_cast(P#l1,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l1,^s_node),^s_node))));
invariant b0652 ==> (($non_null($phys_ptr_cast(P#l2,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l2,^s_node),^s_node))));
invariant b0653 ==> (($non_null($phys_ptr_cast(L#list,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list,^s_node),^s_node))));
invariant b0654 ==> (($non_null($phys_ptr_cast(L#l,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#l,^s_node),^s_node))));
invariant b0655 ==> (($non_null($phys_ptr_cast(L#list_next,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list_next,^s_node),^s_node))));
invariant b0656 ==> (($non_null($phys_ptr_cast(local.l1,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l1,^s_node),^s_node))));
invariant b0657 ==> (($non_null($phys_ptr_cast(local.l2,^s_node)) ==> $non_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l2,^s_node),^s_node))));
invariant b0658 ==> (($non_null($phys_ptr_cast(P#l1,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l1,^s_node),^s_node))));
invariant b0659 ==> (($non_null($phys_ptr_cast(P#l2,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l2,^s_node),^s_node))));
invariant b0660 ==> (($non_null($phys_ptr_cast(L#list,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list,^s_node),^s_node))));
invariant b0661 ==> (($non_null($phys_ptr_cast(L#l,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#l,^s_node),^s_node))));
invariant b0662 ==> (($non_null($phys_ptr_cast(L#list_next,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list_next,^s_node),^s_node))));
invariant b0663 ==> (($non_null($phys_ptr_cast(local.l1,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l1,^s_node),^s_node))));
invariant b0664 ==> (($non_null($phys_ptr_cast(local.l2,^s_node)) ==> $is_null($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l2,^s_node),^s_node))));
invariant b0665 ==> (($non_null($phys_ptr_cast(P#l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l1,^s_node),^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b0666 ==> (($non_null($phys_ptr_cast(P#l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l1,^s_node),^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b0667 ==> (($non_null($phys_ptr_cast(P#l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l1,^s_node),^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b0668 ==> (($non_null($phys_ptr_cast(P#l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l1,^s_node),^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b0669 ==> (($non_null($phys_ptr_cast(P#l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l1,^s_node),^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b0670 ==> (($non_null($phys_ptr_cast(P#l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l1,^s_node),^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b0671 ==> (($non_null($phys_ptr_cast(P#l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l2,^s_node),^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b0672 ==> (($non_null($phys_ptr_cast(P#l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l2,^s_node),^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b0673 ==> (($non_null($phys_ptr_cast(P#l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l2,^s_node),^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b0674 ==> (($non_null($phys_ptr_cast(P#l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l2,^s_node),^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b0675 ==> (($non_null($phys_ptr_cast(P#l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l2,^s_node),^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b0676 ==> (($non_null($phys_ptr_cast(P#l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(P#l2,^s_node),^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b0677 ==> (($non_null($phys_ptr_cast(L#list,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list,^s_node),^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b0678 ==> (($non_null($phys_ptr_cast(L#list,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list,^s_node),^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b0679 ==> (($non_null($phys_ptr_cast(L#list,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list,^s_node),^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b0680 ==> (($non_null($phys_ptr_cast(L#list,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list,^s_node),^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b0681 ==> (($non_null($phys_ptr_cast(L#list,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list,^s_node),^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b0682 ==> (($non_null($phys_ptr_cast(L#list,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list,^s_node),^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b0683 ==> (($non_null($phys_ptr_cast(L#l,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#l,^s_node),^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b0684 ==> (($non_null($phys_ptr_cast(L#l,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#l,^s_node),^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b0685 ==> (($non_null($phys_ptr_cast(L#l,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#l,^s_node),^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b0686 ==> (($non_null($phys_ptr_cast(L#l,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#l,^s_node),^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b0687 ==> (($non_null($phys_ptr_cast(L#l,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#l,^s_node),^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b0688 ==> (($non_null($phys_ptr_cast(L#l,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#l,^s_node),^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b0689 ==> (($non_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list_next,^s_node),^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b0690 ==> (($non_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list_next,^s_node),^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b0691 ==> (($non_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list_next,^s_node),^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b0692 ==> (($non_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list_next,^s_node),^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b0693 ==> (($non_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list_next,^s_node),^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b0694 ==> (($non_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(L#list_next,^s_node),^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b0695 ==> (($non_null($phys_ptr_cast(local.l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l1,^s_node),^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b0696 ==> (($non_null($phys_ptr_cast(local.l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l1,^s_node),^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b0697 ==> (($non_null($phys_ptr_cast(local.l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l1,^s_node),^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b0698 ==> (($non_null($phys_ptr_cast(local.l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l1,^s_node),^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b0699 ==> (($non_null($phys_ptr_cast(local.l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l1,^s_node),^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b0700 ==> (($non_null($phys_ptr_cast(local.l1,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l1,^s_node),^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b0701 ==> (($non_null($phys_ptr_cast(local.l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l2,^s_node),^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b0702 ==> (($non_null($phys_ptr_cast(local.l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l2,^s_node),^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b0703 ==> (($non_null($phys_ptr_cast(local.l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l2,^s_node),^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b0704 ==> (($non_null($phys_ptr_cast(local.l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l2,^s_node),^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b0705 ==> (($non_null($phys_ptr_cast(local.l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l2,^s_node),^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b0706 ==> (($non_null($phys_ptr_cast(local.l2,^s_node)) ==> ($rd_phys_ptr($s,s_node.next,$phys_ptr_cast(local.l2,^s_node),^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b0707 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0708 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0709 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0710 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0711 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0712 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0713 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0714 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0715 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0716 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0717 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0718 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0719 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0720 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0721 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0722 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0723 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0724 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0725 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0726 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0727 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0728 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0729 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0730 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0731 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0732 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0733 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0734 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0735 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0736 ==> ((!($oset_in($phys_ptr_cast(P#l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0737 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0738 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0739 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0740 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0741 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0742 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0743 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0744 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0745 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0746 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0747 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0748 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0749 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0750 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0751 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0752 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0753 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0754 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0755 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0756 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0757 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0758 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0759 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0760 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0761 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0762 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0763 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0764 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0765 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0766 ==> ((!($oset_in($phys_ptr_cast(P#l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0767 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0768 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0769 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0770 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0771 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0772 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0773 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0774 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0775 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0776 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0777 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0778 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0779 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0780 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0781 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0782 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0783 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0784 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0785 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0786 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0787 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0788 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0789 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0790 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0791 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0792 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0793 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0794 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0795 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0796 ==> ((!($oset_in($phys_ptr_cast(L#list,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0797 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0798 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0799 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0800 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0801 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0802 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0803 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0804 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0805 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0806 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0807 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0808 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0809 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0810 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0811 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0812 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0813 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0814 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0815 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0816 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0817 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0818 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0819 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0820 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0821 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0822 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0823 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0824 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0825 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0826 ==> ((!($oset_in($phys_ptr_cast(L#l,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0827 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0828 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0829 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0830 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0831 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0832 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0833 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0834 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0835 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0836 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0837 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0838 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0839 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0840 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0841 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0842 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0843 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0844 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0845 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0846 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0847 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0848 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0849 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0850 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0851 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0852 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0853 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0854 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0855 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0856 ==> ((!($oset_in($phys_ptr_cast(L#list_next,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0857 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0858 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0859 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0860 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0861 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0862 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0863 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0864 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0865 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0866 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0867 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0868 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0869 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0870 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0871 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0872 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0873 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0874 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0875 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0876 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0877 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0878 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0879 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0880 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0881 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))))));
invariant b0882 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0883 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0884 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0885 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0886 ==> ((!($oset_in($phys_ptr_cast(local.l1,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0887 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0888 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0889 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0890 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0891 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0892 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0893 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0894 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0895 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0896 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0897 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0898 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0899 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0900 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0901 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0902 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0903 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0904 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0905 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0906 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0907 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0908 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0909 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0910 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0911 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))))));
invariant b0912 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))))));
invariant b0913 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))))));
invariant b0914 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))))));
invariant b0915 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))))));
invariant b0916 ==> ((!($oset_in($phys_ptr_cast(local.l2,^s_node),F#srtl_lseg_reach($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))))));
invariant b0917 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b0918 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b0919 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b0920 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b0921 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b0922 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b0923 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b0924 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b0925 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b0926 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b0927 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b0928 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b0929 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b0930 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b0931 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b0932 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b0933 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b0934 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b0935 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b0936 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b0937 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b0938 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b0939 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b0940 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b0941 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b0942 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b0943 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b0944 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b0945 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b0946 ==> (($is_null($phys_ptr_cast(P#l1,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b0947 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b0948 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b0949 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b0950 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b0951 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b0952 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b0953 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b0954 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b0955 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b0956 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b0957 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b0958 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b0959 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b0960 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b0961 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b0962 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b0963 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b0964 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b0965 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b0966 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b0967 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b0968 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b0969 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b0970 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b0971 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b0972 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b0973 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b0974 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b0975 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b0976 ==> (($is_null($phys_ptr_cast(P#l2,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b0977 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b0978 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b0979 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b0980 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b0981 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b0982 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b0983 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b0984 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b0985 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b0986 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b0987 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b0988 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b0989 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b0990 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b0991 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b0992 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b0993 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b0994 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b0995 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b0996 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b0997 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b0998 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b0999 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b1000 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b1001 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b1002 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b1003 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b1004 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b1005 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b1006 ==> (($is_null($phys_ptr_cast(L#list,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b1007 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b1008 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b1009 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b1010 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b1011 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b1012 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b1013 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b1014 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b1015 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b1016 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b1017 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b1018 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b1019 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b1020 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b1021 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b1022 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b1023 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b1024 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b1025 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b1026 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b1027 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b1028 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b1029 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b1030 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b1031 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b1032 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b1033 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b1034 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b1035 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b1036 ==> (($is_null($phys_ptr_cast(L#l,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b1037 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b1038 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b1039 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b1040 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b1041 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b1042 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b1043 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b1044 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b1045 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b1046 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b1047 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b1048 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b1049 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b1050 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b1051 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b1052 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b1053 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b1054 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b1055 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b1056 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b1057 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b1058 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b1059 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b1060 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b1061 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b1062 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b1063 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b1064 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b1065 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b1066 ==> (($is_null($phys_ptr_cast(L#list_next,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b1067 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b1068 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b1069 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b1070 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b1071 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b1072 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b1073 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b1074 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b1075 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b1076 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b1077 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b1078 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b1079 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b1080 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b1081 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b1082 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b1083 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b1084 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b1085 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b1086 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b1087 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b1088 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b1089 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b1090 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b1091 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l2,^s_node))));
invariant b1092 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b1093 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b1094 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b1095 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b1096 ==> (($is_null($phys_ptr_cast(local.l1,^s_node)) ==> ($phys_ptr_cast(local.l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b1097 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b1098 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b1099 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b1100 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b1101 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(P#l1,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b1102 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b1103 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b1104 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b1105 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b1106 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(P#l2,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b1107 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b1108 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b1109 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b1110 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b1111 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#list,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b1112 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b1113 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b1114 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b1115 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b1116 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#l,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b1117 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b1118 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b1119 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b1120 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b1121 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(L#list_next,^s_node) == $phys_ptr_cast(local.l1,^s_node))));
invariant b1122 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l1,^s_node))));
invariant b1123 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(P#l2,^s_node))));
invariant b1124 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list,^s_node))));
invariant b1125 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#l,^s_node))));
invariant b1126 ==> (($is_null($phys_ptr_cast(local.l2,^s_node)) ==> ($phys_ptr_cast(local.l1,^s_node) == $phys_ptr_cast(L#list_next,^s_node))));
invariant b1127 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b1128 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#list,^s_node))));
invariant b1129 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#l,^s_node))));
invariant b1130 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b1131 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b1132 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b1133 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b1134 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#list,^s_node))));
invariant b1135 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#l,^s_node))));
invariant b1136 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b1137 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b1138 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b1139 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b1140 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b1141 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#l,^s_node))));
invariant b1142 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b1143 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b1144 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b1145 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b1146 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b1147 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#list,^s_node))));
invariant b1148 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b1149 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b1150 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b1151 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b1152 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b1153 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#list,^s_node))));
invariant b1154 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#l,^s_node))));
invariant b1155 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b1156 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b1157 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b1158 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b1159 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#list,^s_node))));
invariant b1160 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#l,^s_node))));
invariant b1161 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b1162 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node))));
invariant b1163 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node))));
invariant b1164 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node))));
invariant b1165 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#list,^s_node))));
invariant b1166 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#l,^s_node))));
invariant b1167 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node))));
invariant b1168 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node))));
invariant b1169 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1170 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1171 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1172 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1173 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1174 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1175 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1176 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1177 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1178 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1179 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1180 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1181 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1182 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1183 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1184 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1185 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1186 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1187 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1188 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1189 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1190 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1191 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1192 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1193 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1194 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1195 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1196 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1197 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1198 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1199 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1200 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1201 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1202 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1203 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1204 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1205 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1206 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1207 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1208 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1209 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1210 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1211 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1212 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1213 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1214 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1215 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1216 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1217 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1218 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1219 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1220 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1221 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1222 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1223 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1224 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1225 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1226 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1227 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1228 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1229 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1230 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1231 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1232 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1233 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1234 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1235 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1236 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1237 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1238 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1239 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1240 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1241 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1242 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1243 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1244 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1245 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1246 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1247 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1248 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1249 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1250 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1251 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1252 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1253 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1254 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1255 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1256 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1257 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1258 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1259 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1260 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1261 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1262 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1263 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1264 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1265 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1266 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1267 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1268 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1269 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1270 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1271 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1272 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1273 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1274 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1275 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1276 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1277 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1278 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1279 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1280 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1281 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1282 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1283 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1284 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1285 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1286 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1287 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1288 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1289 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1290 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1291 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1292 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1293 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1294 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1295 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1296 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1297 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1298 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1299 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1300 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1301 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1302 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1303 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1304 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1305 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1306 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1307 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1308 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1309 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1310 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1311 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1312 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1313 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1314 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1315 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1316 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1317 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1318 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1319 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1320 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1321 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1322 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1323 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1324 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1325 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1326 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1327 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1328 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1329 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1330 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1331 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1332 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1333 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1334 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1335 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1336 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1337 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1338 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1339 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1340 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1341 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1342 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1343 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1344 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1345 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1346 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1347 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1348 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1349 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1350 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1351 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1352 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1353 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1354 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1355 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1356 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1357 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1358 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1359 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1360 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1361 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1362 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1363 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1364 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1365 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1366 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1367 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1368 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1369 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1370 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1371 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1372 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1373 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1374 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1375 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1376 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1377 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1378 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1379 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1380 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1381 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1382 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1383 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1384 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1385 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1386 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1387 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1388 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1389 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1390 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1391 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1392 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1393 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1394 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1395 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1396 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1397 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1398 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1399 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1400 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1401 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1402 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1403 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1404 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1405 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1406 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1407 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1408 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1409 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1410 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1411 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1412 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1413 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1414 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1415 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1416 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1417 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1418 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1419 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1420 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1421 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1422 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1423 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1424 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1425 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1426 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1427 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1428 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1429 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1430 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1431 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1432 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1433 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1434 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1435 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1436 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1437 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1438 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1439 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1440 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1441 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1442 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1443 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1444 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1445 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1446 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1447 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1448 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1449 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1450 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1451 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1452 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1453 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1454 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1455 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1456 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1457 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1458 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1459 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1460 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1461 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1462 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1463 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1464 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1465 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1466 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1467 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1468 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1469 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1470 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1471 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1472 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1473 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1474 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1475 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1476 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1477 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1478 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1479 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1480 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1481 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1482 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1483 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1484 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1485 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1486 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1487 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1488 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1489 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1490 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1491 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1492 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1493 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1494 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1495 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1496 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1497 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1498 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1499 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1500 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1501 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1502 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1503 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1504 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1505 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1506 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1507 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1508 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1509 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1510 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1511 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1512 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1513 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1514 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1515 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1516 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1517 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1518 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1519 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1520 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1521 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1522 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1523 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1524 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1525 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1526 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1527 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1528 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1529 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1530 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1531 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1532 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1533 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1534 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1535 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1536 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1537 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1538 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1539 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1540 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1541 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1542 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1543 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1544 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1545 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1546 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1547 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1548 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1549 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1550 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1551 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1552 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1553 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1554 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1555 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1556 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1557 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1558 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1559 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1560 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1561 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1562 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1563 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1564 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1565 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1566 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1567 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1568 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1569 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1570 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1571 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1572 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1573 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1574 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1575 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1576 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1577 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1578 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1579 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1580 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1581 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1582 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1583 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1584 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1585 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1586 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1587 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1588 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1589 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1590 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1591 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1592 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1593 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1594 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1595 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1596 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1597 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1598 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1599 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1600 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1601 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1602 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1603 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1604 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1605 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1606 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1607 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1608 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1609 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1610 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1611 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1612 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1613 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1614 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1615 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1616 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1617 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1618 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1619 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1620 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1621 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1622 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1623 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1624 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1625 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1626 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1627 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1628 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1629 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1630 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1631 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1632 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1633 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1634 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1635 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1636 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1637 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1638 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1639 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1640 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1641 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1642 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1643 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1644 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1645 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1646 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1647 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1648 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1649 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1650 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1651 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1652 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1653 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1654 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1655 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1656 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1657 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1658 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1659 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1660 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1661 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1662 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1663 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1664 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1665 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1666 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1667 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1668 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1669 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1670 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1671 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1672 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1673 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1674 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1675 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1676 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1677 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1678 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1679 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1680 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1681 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1682 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1683 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1684 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1685 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1686 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1687 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1688 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1689 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1690 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1691 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1692 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1693 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1694 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1695 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1696 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1697 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1698 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1699 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1700 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1701 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1702 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1703 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1704 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1705 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1706 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1707 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1708 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1709 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1710 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1711 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1712 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1713 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1714 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1715 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1716 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1717 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1718 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1719 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1720 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1721 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1722 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1723 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1724 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1725 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1726 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1727 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1728 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1729 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1730 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1731 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1732 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1733 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1734 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1735 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1736 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1737 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1738 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1739 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1740 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1741 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1742 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1743 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1744 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1745 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1746 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1747 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1748 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1749 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1750 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1751 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1752 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1753 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1754 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1755 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1756 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1757 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1758 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1759 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1760 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1761 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1762 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1763 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1764 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1765 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1766 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1767 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1768 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1769 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1770 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1771 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1772 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1773 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1774 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1775 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1776 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1777 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1778 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1779 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1780 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1781 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1782 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1783 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1784 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1785 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1786 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1787 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1788 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1789 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1790 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1791 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1792 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1793 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1794 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1795 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1796 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1797 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1798 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1799 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1800 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1801 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1802 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1803 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1804 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1805 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1806 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1807 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1808 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1809 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1810 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1811 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1812 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1813 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1814 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1815 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1816 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1817 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1818 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1819 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1820 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1821 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1822 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1823 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1824 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1825 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1826 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1827 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1828 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1829 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1830 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1831 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1832 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1833 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1834 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1835 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1836 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1837 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1838 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1839 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1840 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1841 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1842 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1843 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1844 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1845 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1846 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1847 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1848 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1849 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1850 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1851 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1852 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1853 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1854 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1855 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1856 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1857 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1858 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1859 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1860 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1861 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1862 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1863 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1864 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1865 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1866 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1867 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1868 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1869 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1870 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1871 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1872 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1873 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1874 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1875 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1876 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1877 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1878 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1879 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1880 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1881 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1882 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1883 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1884 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1885 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1886 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1887 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1888 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1889 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1890 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1891 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1892 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1893 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1894 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1895 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1896 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1897 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1898 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1899 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1900 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1901 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1902 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1903 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1904 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1905 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1906 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1907 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1908 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1909 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1910 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1911 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1912 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1913 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1914 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1915 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1916 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1917 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1918 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1919 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1920 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1921 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1922 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1923 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1924 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1925 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1926 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1927 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1928 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1929 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1930 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1931 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1932 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1933 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1934 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1935 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1936 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1937 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1938 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1939 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1940 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1941 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1942 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1943 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1944 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1945 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1946 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1947 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1948 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1949 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1950 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1951 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1952 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1953 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1954 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1955 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1956 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1957 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1958 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1959 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1960 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1961 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1962 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1963 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1964 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1965 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1966 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1967 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1968 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1969 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1970 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1971 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1972 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1973 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1974 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b1975 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b1976 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1977 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1978 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1979 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1980 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1981 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1982 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1983 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1984 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1985 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1986 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1987 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1988 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1989 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1990 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1991 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1992 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1993 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1994 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b1995 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b1996 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b1997 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b1998 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b1999 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b2000 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b2001 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b2002 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b2003 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b2004 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b2005 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b2006 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b2007 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b2008 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b2009 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b2010 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b2011 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b2012 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b2013 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b2014 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b2015 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b2016 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b2017 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b2018 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b2019 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b2020 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b2021 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b2022 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b2023 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b2024 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b2025 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b2026 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b2027 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b2028 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b2029 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b2030 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b2031 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b2032 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b2033 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b2034 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b2035 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b2036 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b2037 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b2038 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b2039 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b2040 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b2041 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b2042 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b2043 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b2044 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b2045 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b2046 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b2047 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b2048 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b2049 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b2050 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b2051 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b2052 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b2053 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b2054 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b2055 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b2056 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b2057 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b2058 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b2059 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b2060 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b2061 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b2062 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b2063 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b2064 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b2065 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b2066 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b2067 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b2068 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b2069 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b2070 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b2071 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b2072 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b2073 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b2074 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node))));
invariant b2075 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b2076 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b2077 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b2078 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b2079 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b2080 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b2081 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b2082 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b2083 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b2084 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b2085 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b2086 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b2087 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b2088 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b2089 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b2090 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b2091 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b2092 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b2093 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b2094 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b2095 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b2096 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b2097 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b2098 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b2099 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b2100 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b2101 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b2102 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b2103 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b2104 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b2105 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b2106 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b2107 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b2108 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b2109 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b2110 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b2111 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b2112 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b2113 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b2114 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b2115 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b2116 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b2117 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b2118 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b2119 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b2120 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b2121 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b2122 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b2123 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b2124 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b2125 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b2126 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b2127 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b2128 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b2129 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b2130 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b2131 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b2132 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b2133 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b2134 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b2135 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b2136 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b2137 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b2138 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b2139 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b2140 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b2141 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b2142 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b2143 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b2144 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b2145 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b2146 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b2147 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b2148 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b2149 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b2150 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b2151 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b2152 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b2153 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b2154 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b2155 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b2156 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b2157 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b2158 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b2159 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b2160 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b2161 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b2162 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b2163 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b2164 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b2165 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b2166 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b2167 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b2168 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b2169 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b2170 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b2171 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b2172 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b2173 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b2174 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b2175 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b2176 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b2177 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b2178 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b2179 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b2180 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b2181 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b2182 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b2183 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b2184 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b2185 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b2186 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b2187 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b2188 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b2189 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b2190 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b2191 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b2192 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b2193 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b2194 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node))));
invariant b2195 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b2196 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b2197 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b2198 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b2199 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b2200 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b2201 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b2202 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b2203 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b2204 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b2205 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b2206 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b2207 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b2208 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b2209 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b2210 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b2211 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b2212 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b2213 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b2214 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node))));
invariant b2215 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node))));
invariant b2216 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node))));
invariant b2217 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node))));
invariant b2218 ==> ((F#sll_lseg_keys($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) == F#sll_lseg_keys($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node))));
invariant b2219 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2220 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2221 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2222 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2223 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2224 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2225 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2226 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2227 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2228 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2229 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2230 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2231 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2232 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2233 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2234 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2235 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2236 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2237 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2238 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2239 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2240 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2241 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2242 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2243 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2244 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2245 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2246 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2247 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2248 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2249 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2250 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2251 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2252 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2253 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2254 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2255 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2256 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2257 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2258 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2259 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2260 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2261 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2262 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2263 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2264 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2265 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2266 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2267 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2268 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2269 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2270 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2271 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2272 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2273 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2274 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2275 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2276 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2277 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2278 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2279 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2280 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2281 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2282 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2283 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2284 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2285 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2286 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2287 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2288 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2289 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2290 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2291 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2292 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2293 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2294 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2295 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2296 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2297 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2298 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2299 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2300 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2301 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2302 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2303 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2304 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2305 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2306 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2307 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2308 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2309 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2310 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2311 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2312 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2313 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2314 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2315 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2316 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2317 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2318 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2319 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2320 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2321 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2322 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2323 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2324 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2325 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2326 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2327 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2328 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2329 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2330 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2331 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2332 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2333 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2334 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2335 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2336 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2337 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2338 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2339 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2340 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2341 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2342 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2343 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2344 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2345 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2346 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2347 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2348 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2349 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2350 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2351 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2352 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2353 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2354 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2355 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2356 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2357 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2358 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2359 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2360 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2361 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2362 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2363 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2364 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2365 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2366 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2367 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2368 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2369 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2370 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2371 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2372 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2373 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2374 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2375 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2376 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2377 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2378 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2379 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2380 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2381 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2382 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2383 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2384 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2385 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2386 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2387 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2388 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2389 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2390 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2391 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2392 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2393 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2394 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2395 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2396 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2397 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2398 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2399 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2400 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2401 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2402 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2403 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2404 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2405 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2406 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2407 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2408 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2409 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2410 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2411 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2412 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2413 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2414 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2415 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2416 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2417 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2418 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2419 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2420 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2421 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2422 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2423 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2424 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2425 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2426 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2427 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2428 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2429 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2430 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2431 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2432 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2433 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2434 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2435 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2436 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2437 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2438 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2439 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2440 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2441 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2442 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2443 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2444 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2445 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2446 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2447 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2448 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2449 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2450 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2451 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2452 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2453 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2454 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2455 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2456 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2457 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2458 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2459 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2460 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2461 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2462 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2463 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2464 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2465 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2466 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2467 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2468 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2469 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2470 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2471 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2472 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2473 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2474 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2475 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2476 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2477 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2478 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2479 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2480 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2481 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2482 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2483 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2484 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2485 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2486 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2487 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2488 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2489 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2490 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2491 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2492 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2493 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2494 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2495 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2496 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2497 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2498 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2499 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2500 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2501 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2502 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2503 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2504 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2505 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2506 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2507 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2508 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2509 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2510 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2511 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2512 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2513 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2514 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2515 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2516 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2517 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2518 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2519 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2520 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2521 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2522 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2523 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2524 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2525 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2526 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2527 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2528 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2529 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2530 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2531 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2532 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2533 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2534 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2535 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2536 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2537 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2538 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2539 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2540 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2541 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2542 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2543 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2544 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2545 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2546 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2547 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2548 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2549 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2550 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2551 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2552 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2553 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2554 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2555 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2556 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2557 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2558 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2559 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2560 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2561 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2562 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2563 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2564 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2565 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2566 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2567 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2568 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2569 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2570 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2571 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2572 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2573 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2574 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2575 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2576 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2577 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2578 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2579 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2580 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2581 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2582 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2583 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2584 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2585 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2586 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2587 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2588 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2589 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2590 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2591 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2592 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2593 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2594 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2595 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2596 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2597 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2598 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2599 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2600 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2601 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2602 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2603 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2604 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2605 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2606 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2607 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2608 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2609 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2610 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2611 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2612 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2613 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2614 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2615 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2616 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2617 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2618 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2619 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2620 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2621 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2622 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2623 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2624 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2625 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2626 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2627 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2628 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2629 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2630 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2631 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2632 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2633 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2634 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2635 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2636 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2637 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2638 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2639 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2640 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2641 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2642 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2643 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2644 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2645 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2646 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2647 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2648 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2649 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2650 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2651 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2652 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2653 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2654 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2655 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2656 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2657 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2658 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2659 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2660 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2661 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2662 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2663 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2664 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2665 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2666 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2667 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2668 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2669 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2670 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2671 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2672 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2673 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2674 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2675 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2676 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2677 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2678 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2679 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2680 ==> ((F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2681 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2682 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2683 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2684 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2685 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2686 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2687 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2688 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2689 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2690 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2691 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2692 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2693 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2694 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2695 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2696 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2697 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2698 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2699 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2700 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2701 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2702 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2703 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2704 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2705 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2706 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2707 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2708 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2709 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2710 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2711 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2712 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2713 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2714 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2715 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2716 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2717 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2718 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2719 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2720 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2721 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2722 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2723 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2724 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2725 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2726 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2727 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2728 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2729 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2730 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2731 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2732 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2733 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2734 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2735 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2736 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2737 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2738 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2739 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2740 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2741 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2742 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2743 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2744 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2745 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2746 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2747 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2748 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2749 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2750 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2751 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2752 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2753 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2754 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2755 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2756 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2757 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2758 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2759 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2760 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2761 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2762 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2763 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2764 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2765 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2766 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2767 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2768 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2769 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2770 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2771 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2772 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2773 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2774 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2775 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2776 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2777 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2778 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2779 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2780 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2781 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2782 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(P#l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2783 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2784 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2785 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2786 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2787 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2788 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2789 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2790 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2791 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2792 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2793 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2794 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2795 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2796 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2797 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2798 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2799 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2800 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2801 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2802 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2803 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2804 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2805 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2806 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2807 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2808 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2809 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2810 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2811 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2812 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2813 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2814 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2815 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2816 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2817 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2818 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2819 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2820 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2821 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2822 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2823 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2824 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2825 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2826 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2827 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2828 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2829 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2830 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2831 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2832 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2833 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2834 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2835 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2836 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2837 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2838 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2839 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2840 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2841 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2842 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#l,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2843 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2844 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2845 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2846 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2847 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2848 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2849 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2850 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2851 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2852 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2853 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2854 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2855 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2856 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2857 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2858 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2859 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2860 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2861 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2862 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2863 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2864 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2865 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2866 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2867 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2868 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2869 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2870 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2871 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2872 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(L#list_next,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2873 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2874 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2875 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2876 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2877 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2878 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2879 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2880 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2881 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2882 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2883 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2884 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2885 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2886 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2887 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2888 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2889 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2890 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2891 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2892 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2893 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2894 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2895 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2896 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2897 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2898 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2899 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2900 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2901 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2902 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l1,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2903 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2904 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2905 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2906 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2907 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2908 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2909 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2910 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2911 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2912 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2913 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2914 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2915 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2916 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2917 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b2918 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2919 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2920 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2921 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2922 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b2923 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2924 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2925 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2926 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2927 ==> ((F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2928 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l1,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2929 ==> ((F#sll_keys($s,$phys_ptr_cast(P#l2,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2930 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2931 ==> ((F#sll_keys($s,$phys_ptr_cast(L#l,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2932 ==> ((F#sll_keys($s,$phys_ptr_cast(L#list_next,^s_node)) == $intset_union(F#sll_keys(loopState#0,$phys_ptr_cast(local.l2,^s_node)),F#sll_keys($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2933 ==> ((($non_null($phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2934 ==> ((($non_null($phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b2935 ==> ((($non_null($phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b2936 ==> ((($non_null($phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2937 ==> ((($non_null($phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2938 ==> ((($non_null($phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2939 ==> ((($non_null($phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2940 ==> ((($non_null($phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b2941 ==> ((($non_null($phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b2942 ==> ((($non_null($phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2943 ==> ((($non_null($phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2944 ==> ((($non_null($phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2945 ==> ((($non_null($phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2946 ==> ((($non_null($phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2947 ==> ((($non_null($phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b2948 ==> ((($non_null($phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2949 ==> ((($non_null($phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2950 ==> ((($non_null($phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2951 ==> ((($non_null($phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2952 ==> ((($non_null($phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2953 ==> ((($non_null($phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b2954 ==> ((($non_null($phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2955 ==> ((($non_null($phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2956 ==> ((($non_null($phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2957 ==> ((($non_null($phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2958 ==> ((($non_null($phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2959 ==> ((($non_null($phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b2960 ==> ((($non_null($phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b2961 ==> ((($non_null($phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2962 ==> ((($non_null($phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2963 ==> ((($non_null($phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2964 ==> ((($non_null($phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2965 ==> ((($non_null($phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b2966 ==> ((($non_null($phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b2967 ==> ((($non_null($phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2968 ==> ((($non_null($phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2969 ==> ((($non_null($phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2970 ==> ((($non_null($phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2971 ==> ((($non_null($phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b2972 ==> ((($non_null($phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b2973 ==> ((($non_null($phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2974 ==> ((($non_null($phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2975 ==> ((($non_null($phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2976 ==> ((($non_null($phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b2977 ==> ((($non_null($phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b2978 ==> ((($non_null($phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2979 ==> ((($non_null($phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2980 ==> ((($non_null($phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2981 ==> ((($non_null($phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2982 ==> ((($non_null($phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b2983 ==> ((($non_null($phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b2984 ==> ((($non_null($phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2985 ==> ((($non_null($phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2986 ==> ((($non_null($phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2987 ==> ((($non_null($phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2988 ==> ((($non_null($phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2989 ==> ((($non_null($phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b2990 ==> ((($non_null($phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2991 ==> ((($non_null($phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2992 ==> ((($non_null($phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2993 ==> ((($non_null($phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b2994 ==> ((($non_null($phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b2995 ==> ((($non_null($phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b2996 ==> ((($non_null($phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b2997 ==> ((($non_null($phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b2998 ==> ((($non_null($phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b2999 ==> ((($non_null($phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3000 ==> ((($non_null($phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3001 ==> ((($non_null($phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b3002 ==> ((($non_null($phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b3003 ==> ((($non_null($phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b3004 ==> ((($non_null($phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b3005 ==> ((($non_null($phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3006 ==> ((($non_null($phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3007 ==> ((($non_null($phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b3008 ==> ((($non_null($phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b3009 ==> ((($non_null($phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3010 ==> ((($non_null($phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b3011 ==> ((($non_null($phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3012 ==> ((($non_null($phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3013 ==> ((($non_null($phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b3014 ==> ((($non_null($phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b3015 ==> ((($non_null($phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3016 ==> ((($non_null($phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) == $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b3017 ==> (((F#srtl($s,$phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(P#l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3018 ==> (((F#srtl($s,$phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(P#l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b3019 ==> (((F#srtl($s,$phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(P#l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b3020 ==> (((F#srtl($s,$phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(P#l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3021 ==> (((F#srtl($s,$phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(P#l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b3022 ==> (((F#srtl($s,$phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(P#l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b3023 ==> (((F#srtl($s,$phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(P#l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3024 ==> (((F#srtl($s,$phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(P#l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b3025 ==> (((F#srtl($s,$phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(P#l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b3026 ==> (((F#srtl($s,$phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(P#l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3027 ==> (((F#srtl($s,$phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(P#l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b3028 ==> (((F#srtl($s,$phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(P#l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b3029 ==> (((F#srtl($s,$phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(L#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3030 ==> (((F#srtl($s,$phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(L#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3031 ==> (((F#srtl($s,$phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(L#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b3032 ==> (((F#srtl($s,$phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(L#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3033 ==> (((F#srtl($s,$phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(L#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b3034 ==> (((F#srtl($s,$phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(L#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b3035 ==> (((F#srtl($s,$phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(L#l,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3036 ==> (((F#srtl($s,$phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(L#l,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3037 ==> (((F#srtl($s,$phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(L#l,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b3038 ==> (((F#srtl($s,$phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(L#l,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3039 ==> (((F#srtl($s,$phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(L#l,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b3040 ==> (((F#srtl($s,$phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(L#l,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b3041 ==> (((F#srtl($s,$phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(L#list_next,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3042 ==> (((F#srtl($s,$phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(L#list_next,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3043 ==> (((F#srtl($s,$phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(L#list_next,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b3044 ==> (((F#srtl($s,$phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(L#list_next,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b3045 ==> (((F#srtl($s,$phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(L#list_next,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b3046 ==> (((F#srtl($s,$phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(L#list_next,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b3047 ==> (((F#srtl($s,$phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(local.l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3048 ==> (((F#srtl($s,$phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(local.l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3049 ==> (((F#srtl($s,$phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(local.l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b3050 ==> (((F#srtl($s,$phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(local.l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b3051 ==> (((F#srtl($s,$phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(local.l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3052 ==> (((F#srtl($s,$phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(local.l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b3053 ==> (((F#srtl($s,$phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(local.l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3054 ==> (((F#srtl($s,$phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(local.l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3055 ==> (((F#srtl($s,$phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(local.l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b3056 ==> (((F#srtl($s,$phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(local.l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b3057 ==> (((F#srtl($s,$phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(local.l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3058 ==> (((F#srtl($s,$phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> (F#sll_max_key($s,$phys_ptr_cast(local.l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b3059 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3060 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b3061 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b3062 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3063 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b3064 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b3065 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3066 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b3067 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b3068 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3069 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b3070 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b3071 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3072 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3073 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b3074 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3075 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b3076 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b3077 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3078 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3079 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b3080 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3081 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b3082 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b3083 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3084 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3085 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b3086 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b3087 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b3088 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b3089 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3090 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3091 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b3092 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b3093 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3094 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b3095 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3096 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3097 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b3098 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b3099 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3100 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b3101 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b3102 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b3103 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3104 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b3105 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b3106 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3107 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b3108 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3109 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b3110 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b3111 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3112 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b3113 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3114 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b3115 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b3116 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3117 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b3118 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b3119 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b3120 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b3121 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3122 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b3123 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b3124 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3125 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b3126 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3127 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b3128 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b3129 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3130 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b3131 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b3132 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b3133 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3134 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b3135 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b3136 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3137 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b3138 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3139 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b3140 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b3141 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3142 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b3143 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3144 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b3145 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b3146 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3147 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b3148 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b3149 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b3150 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b3151 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3152 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b3153 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b3154 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3155 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b3156 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3157 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b3158 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b3159 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3160 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b3161 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3162 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b3163 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3164 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b3165 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b3166 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3167 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b3168 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3169 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b3170 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b3171 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3172 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3173 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3174 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b3175 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b3176 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3177 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3178 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b3179 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b3180 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b3181 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3182 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3183 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b3184 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3185 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b3186 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3187 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3188 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b3189 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3190 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b3191 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3192 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b3193 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3194 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b3195 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b3196 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3197 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b3198 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3199 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b3200 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b3201 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3202 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3203 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3204 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b3205 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b3206 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3207 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3208 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b3209 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b3210 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b3211 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3212 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3213 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b3214 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3215 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b3216 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3217 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3218 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b3219 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3220 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b3221 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3222 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b3223 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b3224 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b3225 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b3226 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3227 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b3228 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b3229 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b3230 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b3231 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3232 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3233 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b3234 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b3235 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b3236 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3237 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3238 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b3239 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b3240 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b3241 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3242 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3243 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b3244 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b3245 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b3246 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3247 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3248 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b3249 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b3250 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b3251 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3252 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b3253 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b3254 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3255 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b3256 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3257 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b3258 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b3259 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3260 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b3261 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3262 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3263 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b3264 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3265 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b3266 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3267 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3268 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b3269 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3270 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b3271 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3272 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3273 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b3274 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b3275 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)))));
invariant b3276 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3277 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3278 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b3279 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b3280 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3281 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3282 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b3283 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b3284 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3285 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b3286 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3287 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b3288 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b3289 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3290 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b3291 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3292 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3293 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b3294 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3295 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b3296 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3297 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3298 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b3299 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3300 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b3301 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3302 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3303 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b3304 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b3305 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)))));
invariant b3306 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3307 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3308 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)))));
invariant b3309 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)))));
invariant b3310 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> (F#sll_lseg_max_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) <= $rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3311 ==> (((F#srtl($s,$phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3312 ==> (((F#srtl($s,$phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3313 ==> (((F#srtl($s,$phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3314 ==> (((F#srtl($s,$phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3315 ==> (((F#srtl($s,$phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3316 ==> (((F#srtl($s,$phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(P#l1,^s_node)))));
invariant b3317 ==> (((F#srtl($s,$phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3318 ==> (((F#srtl($s,$phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3319 ==> (((F#srtl($s,$phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3320 ==> (((F#srtl($s,$phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3321 ==> (((F#srtl($s,$phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3322 ==> (((F#srtl($s,$phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(P#l2,^s_node)))));
invariant b3323 ==> (((F#srtl($s,$phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b3324 ==> (((F#srtl($s,$phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b3325 ==> (((F#srtl($s,$phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b3326 ==> (((F#srtl($s,$phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b3327 ==> (((F#srtl($s,$phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b3328 ==> (((F#srtl($s,$phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(L#list,^s_node)))));
invariant b3329 ==> (((F#srtl($s,$phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b3330 ==> (((F#srtl($s,$phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b3331 ==> (((F#srtl($s,$phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b3332 ==> (((F#srtl($s,$phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b3333 ==> (((F#srtl($s,$phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b3334 ==> (((F#srtl($s,$phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(L#l,^s_node)))));
invariant b3335 ==> (((F#srtl($s,$phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3336 ==> (((F#srtl($s,$phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3337 ==> (((F#srtl($s,$phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3338 ==> (((F#srtl($s,$phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3339 ==> (((F#srtl($s,$phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3340 ==> (((F#srtl($s,$phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3341 ==> (((F#srtl($s,$phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b3342 ==> (((F#srtl($s,$phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b3343 ==> (((F#srtl($s,$phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b3344 ==> (((F#srtl($s,$phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b3345 ==> (((F#srtl($s,$phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b3346 ==> (((F#srtl($s,$phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(local.l1,^s_node)))));
invariant b3347 ==> (((F#srtl($s,$phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b3348 ==> (((F#srtl($s,$phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b3349 ==> (((F#srtl($s,$phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b3350 ==> (((F#srtl($s,$phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b3351 ==> (((F#srtl($s,$phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b3352 ==> (((F#srtl($s,$phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) <= F#sll_min_key($s,$phys_ptr_cast(local.l2,^s_node)))));
invariant b3353 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant b3354 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant b3355 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant b3356 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3357 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant b3358 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant b3359 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant b3360 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant b3361 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant b3362 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3363 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant b3364 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant b3365 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant b3366 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant b3367 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant b3368 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3369 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant b3370 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant b3371 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant b3372 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant b3373 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant b3374 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3375 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant b3376 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant b3377 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant b3378 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant b3379 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant b3380 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant b3381 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant b3382 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant b3383 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant b3384 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant b3385 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant b3386 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant b3387 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3388 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant b3389 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant b3390 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant b3391 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant b3392 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant b3393 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3394 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant b3395 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant b3396 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant b3397 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant b3398 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant b3399 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant b3400 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant b3401 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant b3402 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant b3403 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant b3404 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant b3405 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant b3406 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant b3407 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant b3408 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant b3409 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant b3410 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3411 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3412 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3413 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3414 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3415 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant b3416 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant b3417 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant b3418 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant b3419 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant b3420 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant b3421 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant b3422 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant b3423 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant b3424 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(P#l1,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l1,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant b3425 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant b3426 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant b3427 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant b3428 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant b3429 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant b3430 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant b3431 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant b3432 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant b3433 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant b3434 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant b3435 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant b3436 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant b3437 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant b3438 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant b3439 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant b3440 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3441 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3442 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3443 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3444 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3445 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant b3446 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant b3447 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant b3448 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant b3449 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant b3450 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant b3451 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant b3452 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant b3453 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant b3454 ==> (((F#srtl_lseg($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(P#l2,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(P#l2,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant b3455 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant b3456 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant b3457 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant b3458 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant b3459 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant b3460 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant b3461 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant b3462 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant b3463 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant b3464 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant b3465 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant b3466 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant b3467 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant b3468 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant b3469 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant b3470 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3471 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3472 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3473 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3474 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3475 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant b3476 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant b3477 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant b3478 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant b3479 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant b3480 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant b3481 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant b3482 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant b3483 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant b3484 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(L#list,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant b3485 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant b3486 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant b3487 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant b3488 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant b3489 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant b3490 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant b3491 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant b3492 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant b3493 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant b3494 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant b3495 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant b3496 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant b3497 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant b3498 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant b3499 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant b3500 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3501 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3502 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3503 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3504 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3505 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant b3506 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant b3507 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant b3508 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant b3509 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant b3510 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant b3511 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant b3512 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant b3513 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant b3514 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(L#l,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#l,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant b3515 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant b3516 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant b3517 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant b3518 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant b3519 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant b3520 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant b3521 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant b3522 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant b3523 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant b3524 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant b3525 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant b3526 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant b3527 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant b3528 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant b3529 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant b3530 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant b3531 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant b3532 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant b3533 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant b3534 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant b3535 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant b3536 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant b3537 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant b3538 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant b3539 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant b3540 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant b3541 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant b3542 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant b3543 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant b3544 ==> (((F#srtl_lseg($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(L#list_next,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(L#list_next,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant b3545 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant b3546 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant b3547 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant b3548 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant b3549 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant b3550 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant b3551 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant b3552 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant b3553 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant b3554 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant b3555 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant b3556 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant b3557 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant b3558 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant b3559 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant b3560 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant b3561 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant b3562 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant b3563 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant b3564 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant b3565 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3566 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3567 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3568 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3569 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(local.l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3570 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant b3571 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant b3572 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant b3573 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant b3574 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)) && ($phys_ptr_cast(local.l1,^s_node) != $phys_ptr_cast(local.l2,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l1,^s_node),$phys_ptr_cast(local.l2,^s_node)))));
invariant b3575 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant b3576 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant b3577 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant b3578 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant b3579 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(P#l1,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l1,^s_node)))));
invariant b3580 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant b3581 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant b3582 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant b3583 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant b3584 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(P#l2,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(P#l2,^s_node)))));
invariant b3585 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant b3586 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant b3587 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant b3588 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant b3589 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(L#list,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list,^s_node)))));
invariant b3590 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant b3591 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant b3592 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant b3593 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant b3594 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(L#l,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#l,^s_node)))));
invariant b3595 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3596 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3597 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3598 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3599 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(L#list_next,^s_node)) && $non_null($phys_ptr_cast(local.l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(local.l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(L#list_next,^s_node)))));
invariant b3600 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(P#l1,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l1,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant b3601 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(P#l2,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(P#l2,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant b3602 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(L#list,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant b3603 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(L#l,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#l,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)))));
invariant b3604 ==> (((F#srtl_lseg($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)) && ($phys_ptr_cast(local.l2,^s_node) != $phys_ptr_cast(local.l1,^s_node)) && $non_null($phys_ptr_cast(L#list_next,^s_node))) ==> ($rd_inv($s,s_node.key,$phys_ptr_cast(L#list_next,^s_node)) <= F#sll_lseg_min_key($s,$phys_ptr_cast(local.l2,^s_node),$phys_ptr_cast(local.l1,^s_node)))));

      invariant $non_null($phys_ptr_cast(L#l, ^s_node)) ==> $mutable($s, $phys_ptr_cast(L#l, ^s_node));
      invariant $non_null($phys_ptr_cast(L#l, ^s_node)) ==> $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(L#l, ^s_node));
      invariant $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> $mutable($s, $phys_ptr_cast(local.l1, ^s_node));
      invariant $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(local.l1, ^s_node));
      invariant $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> $mutable($s, $phys_ptr_cast(local.l2, ^s_node));
      invariant $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(local.l2, ^s_node));
    {
      anon6:
        assume $writes_nothing(old($s), $s);
        assume $timestamp_post(loopState#0, $s);
        assume $full_stop_ext(#tok$3^33.2, $s);
        // assume @_vcc_meta_eq(old(@prestate, @state), @state); 
        assume $meta_eq(loopState#0, $s);
        // _Bool ite#1; 
        // ite#1 := &&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(local.l2)); 
        ite#1 := $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($phys_ptr_cast(local.l2, ^s_node));
        assume true;
        // if (ite#1) ...
        if (ite#1)
        {
          anon3:
            // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_keys(list2), @_vcc_intset_union(sll_keys(*((list2->next))), @_vcc_intset_singleton(*((list2->key)))))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#list2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_list_len_next(list2), unchecked+(sll_list_len_next(*((list2->next))), 1))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#list2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(rsrtl(list2), &&(&&(rsrtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, rsrtl_reach(*((list2->next)))))), >=(*((list2->key)), sll_max_key(*((list2->next))))))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list2), ==(rsrtl_reach(list2), @_vcc_oset_union(rsrtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll(list2), &&(sll(*((list2->next))), unchecked!(@_vcc_oset_in(list2, sll_reach(*((list2->next)))))))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_reach(list2), @_vcc_oset_union(sll_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_max_key(list2), @\int_max(*((list2->key)), sll_max_key(*((list2->next)))))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_min_key(list2), @\int_min(*((list2->key)), sll_min_key(*((list2->next)))))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(srtl(list2), &&(&&(srtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, srtl_reach(*((list2->next)))))), <=(*((list2->key)), sll_min_key(*((list2->next))))))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list2), ==(srtl_reach(list2), @_vcc_oset_union(srtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg(list, l), &&(sll_lseg(*((list->next)), l), unchecked!(@_vcc_oset_in(list, sll_lseg_reach(*((list->next)), l)))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_reach(list, l), @_vcc_oset_union(sll_lseg_reach(*((list->next)), l), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_keys(list, l), @_vcc_intset_union(sll_lseg_keys(*((list->next)), l), @_vcc_intset_singleton(*((list->key)))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_len_next(list, l), unchecked+(sll_lseg_len_next(*((list->next)), l), 1))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(sll_lseg_max_key(list, l), @\int_max(*((list->key)), sll_lseg_max_key(*((list->next)), l)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(sll_lseg_min_key(list, l), @\int_min(*((list->key)), sll_lseg_min_key(*((list->next)), l)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(srtl_lseg(list, l), &&(&&(srtl_lseg(*((list->next)), l), unchecked!(@_vcc_oset_in(list, srtl_lseg_reach(*((list->next)), l)))), <=(*((list->key)), sll_lseg_min_key(*((list->next)), l))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(srtl_lseg_reach(list, l), @_vcc_oset_union(srtl_lseg_reach(*((list->next)), l), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), &&(==(@_vcc_mutable(@state, l), @_vcc_mutable(@state, *((l->next)))), ==(@writes_check(l), @writes_check(*((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> $mutable($s, $phys_ptr_cast(L#l, ^s_node)) == $mutable($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(L#l, ^s_node)) == $top_writable($s, #wrTime$3^3.3, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node));
            // assert @reads_check_normal((local.l1->key)); 
            assert $thread_local($s, $phys_ptr_cast(local.l1, ^s_node));
            // assert @reads_check_normal((local.l2->key)); 
            assert $thread_local($s, $phys_ptr_cast(local.l2, ^s_node));
            assume true;
            // if (<=(*((local.l1->key)), *((local.l2->key)))) ...
            if ($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)))
            {
              anon1:
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_keys(list2), @_vcc_intset_union(sll_keys(*((list2->next))), @_vcc_intset_singleton(*((list2->key)))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#list2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_list_len_next(list2), unchecked+(sll_list_len_next(*((list2->next))), 1))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#list2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(rsrtl(list2), &&(&&(rsrtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, rsrtl_reach(*((list2->next)))))), >=(*((list2->key)), sll_max_key(*((list2->next))))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(rsrtl_reach(list2), @_vcc_oset_union(rsrtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll(list2), &&(sll(*((list2->next))), unchecked!(@_vcc_oset_in(list2, sll_reach(*((list2->next)))))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_reach(list2), @_vcc_oset_union(sll_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_max_key(list2), @\int_max(*((list2->key)), sll_max_key(*((list2->next)))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_min_key(list2), @\int_min(*((list2->key)), sll_min_key(*((list2->next)))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(srtl(list2), &&(&&(srtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, srtl_reach(*((list2->next)))))), <=(*((list2->key)), sll_min_key(*((list2->next))))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(srtl_reach(list2), @_vcc_oset_union(srtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg(list, l), &&(sll_lseg(*((list->next)), l), unchecked!(@_vcc_oset_in(list, sll_lseg_reach(*((list->next)), l)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node))));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_reach(list, l), @_vcc_oset_union(sll_lseg_reach(*((list->next)), l), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_keys(list, l), @_vcc_intset_union(sll_lseg_keys(*((list->next)), l), @_vcc_intset_singleton(*((list->key)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_len_next(list, l), unchecked+(sll_lseg_len_next(*((list->next)), l), 1))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), 1);
                // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(sll_lseg_max_key(list, l), @\int_max(*((list->key)), sll_lseg_max_key(*((list->next)), l)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(sll_lseg_min_key(list, l), @\int_min(*((list->key)), sll_lseg_min_key(*((list->next)), l)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(srtl_lseg(list, l), &&(&&(srtl_lseg(*((list->next)), l), unchecked!(@_vcc_oset_in(list, srtl_lseg_reach(*((list->next)), l)))), <=(*((list->key)), sll_lseg_min_key(*((list->next)), l))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(srtl_lseg_reach(list, l), @_vcc_oset_union(srtl_lseg_reach(*((list->next)), l), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // _math \state _dryad_S6; 
                // _dryad_S6 := @_vcc_current_state(@state); 
                SL#_dryad_S6 := $current_state($s);
                // _math \state stmtexpr0#9; 
                // stmtexpr0#9 := _dryad_S6; 
                stmtexpr0#9 := SL#_dryad_S6;
                // assert @prim_writes_check((l->next)); 
                assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#l, ^s_node), s_node.next));
                // *(l->next) := local.l1; 
                call $write_int(s_node.next, $phys_ptr_cast(L#l, ^s_node), $ptr_to_int($phys_ptr_cast(local.l1, ^s_node)));
                assume $full_stop_ext(#tok$3^70.4, $s);
                // _math \state _dryad_S7; 
                // _dryad_S7 := @_vcc_current_state(@state); 
                SL#_dryad_S7 := $current_state($s);
                // _math \state stmtexpr1#10; 
                // stmtexpr1#10 := _dryad_S7; 
                stmtexpr1#10 := SL#_dryad_S7;
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list2)))), ==(old(_dryad_S6, sll_keys(list2)), old(_dryad_S7, sll_keys(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list2)))), ==(old(_dryad_S6, sll_list_len_next(list2)), old(_dryad_S7, sll_list_len_next(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, rsrtl_reach(list2)))), ==(old(_dryad_S6, rsrtl(list2)), old(_dryad_S7, rsrtl(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, rsrtl_reach(list2)))), ==(old(_dryad_S6, rsrtl_reach(list2)), old(_dryad_S7, rsrtl_reach(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list2)))), ==(old(_dryad_S6, sll(list2)), old(_dryad_S7, sll(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list2)))), ==(old(_dryad_S6, sll_reach(list2)), old(_dryad_S7, sll_reach(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list2)))), ==(old(_dryad_S6, sll_max_key(list2)), old(_dryad_S7, sll_max_key(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list2)))), ==(old(_dryad_S6, sll_min_key(list2)), old(_dryad_S7, sll_min_key(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, srtl_reach(list2)))), ==(old(_dryad_S6, srtl(list2)), old(_dryad_S7, srtl(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, srtl_reach(list2)))), ==(old(_dryad_S6, srtl_reach(list2)), old(_dryad_S7, srtl_reach(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list)))), ==(old(_dryad_S6, sll_keys(list)), old(_dryad_S7, sll_keys(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list)))), ==(old(_dryad_S6, sll_list_len_next(list)), old(_dryad_S7, sll_list_len_next(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, rsrtl_reach(list)))), ==(old(_dryad_S6, rsrtl(list)), old(_dryad_S7, rsrtl(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, rsrtl_reach(list)))), ==(old(_dryad_S6, rsrtl_reach(list)), old(_dryad_S7, rsrtl_reach(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list)))), ==(old(_dryad_S6, sll(list)), old(_dryad_S7, sll(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list)))), ==(old(_dryad_S6, sll_reach(list)), old(_dryad_S7, sll_reach(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list)))), ==(old(_dryad_S6, sll_max_key(list)), old(_dryad_S7, sll_max_key(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list)))), ==(old(_dryad_S6, sll_min_key(list)), old(_dryad_S7, sll_min_key(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, srtl_reach(list)))), ==(old(_dryad_S6, srtl(list)), old(_dryad_S7, srtl(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, srtl_reach(list)))), ==(old(_dryad_S6, srtl_reach(list)), old(_dryad_S7, srtl_reach(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list_next)))), ==(old(_dryad_S6, sll_keys(list_next)), old(_dryad_S7, sll_keys(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list_next)))), ==(old(_dryad_S6, sll_list_len_next(list_next)), old(_dryad_S7, sll_list_len_next(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, rsrtl_reach(list_next)))), ==(old(_dryad_S6, rsrtl(list_next)), old(_dryad_S7, rsrtl(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, rsrtl_reach(list_next)))), ==(old(_dryad_S6, rsrtl_reach(list_next)), old(_dryad_S7, rsrtl_reach(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list_next)))), ==(old(_dryad_S6, sll(list_next)), old(_dryad_S7, sll(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list_next)))), ==(old(_dryad_S6, sll_reach(list_next)), old(_dryad_S7, sll_reach(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list_next)))), ==(old(_dryad_S6, sll_max_key(list_next)), old(_dryad_S7, sll_max_key(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list_next)))), ==(old(_dryad_S6, sll_min_key(list_next)), old(_dryad_S7, sll_min_key(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, srtl_reach(list_next)))), ==(old(_dryad_S6, srtl(list_next)), old(_dryad_S7, srtl(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, srtl_reach(list_next)))), ==(old(_dryad_S6, srtl_reach(list_next)), old(_dryad_S7, srtl_reach(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(local.l2)))), ==(old(_dryad_S6, sll_keys(local.l2)), old(_dryad_S7, sll_keys(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(local.l2)))), ==(old(_dryad_S6, sll_list_len_next(local.l2)), old(_dryad_S7, sll_list_len_next(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, rsrtl_reach(local.l2)))), ==(old(_dryad_S6, rsrtl(local.l2)), old(_dryad_S7, rsrtl(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, rsrtl_reach(local.l2)))), ==(old(_dryad_S6, rsrtl_reach(local.l2)), old(_dryad_S7, rsrtl_reach(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(local.l2)))), ==(old(_dryad_S6, sll(local.l2)), old(_dryad_S7, sll(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(local.l2)))), ==(old(_dryad_S6, sll_reach(local.l2)), old(_dryad_S7, sll_reach(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(local.l2)))), ==(old(_dryad_S6, sll_max_key(local.l2)), old(_dryad_S7, sll_max_key(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(local.l2)))), ==(old(_dryad_S6, sll_min_key(local.l2)), old(_dryad_S7, sll_min_key(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, srtl_reach(local.l2)))), ==(old(_dryad_S6, srtl(local.l2)), old(_dryad_S7, srtl(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, srtl_reach(local.l2)))), ==(old(_dryad_S6, srtl_reach(local.l2)), old(_dryad_S7, srtl_reach(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(local.l1)))), ==(old(_dryad_S6, sll_keys(local.l1)), old(_dryad_S7, sll_keys(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(local.l1)))), ==(old(_dryad_S6, sll_list_len_next(local.l1)), old(_dryad_S7, sll_list_len_next(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, rsrtl_reach(local.l1)))), ==(old(_dryad_S6, rsrtl(local.l1)), old(_dryad_S7, rsrtl(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, rsrtl_reach(local.l1)))), ==(old(_dryad_S6, rsrtl_reach(local.l1)), old(_dryad_S7, rsrtl_reach(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(local.l1)))), ==(old(_dryad_S6, sll(local.l1)), old(_dryad_S7, sll(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(local.l1)))), ==(old(_dryad_S6, sll_reach(local.l1)), old(_dryad_S7, sll_reach(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(local.l1)))), ==(old(_dryad_S6, sll_max_key(local.l1)), old(_dryad_S7, sll_max_key(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(local.l1)))), ==(old(_dryad_S6, sll_min_key(local.l1)), old(_dryad_S7, sll_min_key(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, srtl_reach(local.l1)))), ==(old(_dryad_S6, srtl(local.l1)), old(_dryad_S7, srtl(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, srtl_reach(local.l1)))), ==(old(_dryad_S6, srtl_reach(local.l1)), old(_dryad_S7, srtl_reach(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_lseg_reach(list, l)))), ==(old(_dryad_S6, sll_lseg(list, l)), old(_dryad_S7, sll_lseg(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_lseg_reach(list, l)))), ==(old(_dryad_S6, sll_lseg_reach(list, l)), old(_dryad_S7, sll_lseg_reach(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_lseg_reach(list, l)))), ==(old(_dryad_S6, sll_lseg_keys(list, l)), old(_dryad_S7, sll_lseg_keys(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_lseg_reach(list, l)))), ==(old(_dryad_S6, sll_lseg_len_next(list, l)), old(_dryad_S7, sll_lseg_len_next(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_lseg_reach(list, l)))), ==(old(_dryad_S6, sll_lseg_max_key(list, l)), old(_dryad_S7, sll_lseg_max_key(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_lseg_reach(list, l)))), ==(old(_dryad_S6, sll_lseg_min_key(list, l)), old(_dryad_S7, sll_lseg_min_key(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, srtl_lseg_reach(list, l)))), ==(old(_dryad_S6, srtl_lseg(list, l)), old(_dryad_S7, srtl_lseg(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#srtl_lseg(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, srtl_lseg_reach(list, l)))), ==(old(_dryad_S6, srtl_lseg_reach(list, l)), old(_dryad_S7, srtl_lseg_reach(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(l, list2)), ==(*((list2->key)), old(_dryad_S6, *((list2->key))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(SL#list2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) == $rd_inv(SL#_dryad_S6, s_node.key, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(l, list2)), @_vcc_ptr_eq_pure(*((list2->next)), old(_dryad_S6, *((list2->next))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(SL#list2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S6, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(l, list)), ==(*((list->key)), old(_dryad_S6, *((list->key))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) == $rd_inv(SL#_dryad_S6, s_node.key, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(l, list)), @_vcc_ptr_eq_pure(*((list->next)), old(_dryad_S6, *((list->next))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S6, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(l, list_next)), ==(*((list_next->key)), old(_dryad_S6, *((list_next->key))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) == $rd_inv(SL#_dryad_S6, s_node.key, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(l, list_next)), @_vcc_ptr_eq_pure(*((list_next->next)), old(_dryad_S6, *((list_next->next))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S6, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l2)), ==(*((local.l2->key)), old(_dryad_S6, *((local.l2->key))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) == $rd_inv(SL#_dryad_S6, s_node.key, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l2)), @_vcc_ptr_eq_pure(*((local.l2->next)), old(_dryad_S6, *((local.l2->next))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S6, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l1)), ==(*((local.l1->key)), old(_dryad_S6, *((local.l1->key))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) == $rd_inv(SL#_dryad_S6, s_node.key, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l1)), @_vcc_ptr_eq_pure(*((local.l1->next)), old(_dryad_S6, *((local.l1->next))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S6, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node);
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_keys(list2), @_vcc_intset_union(sll_keys(*((list2->next))), @_vcc_intset_singleton(*((list2->key)))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#list2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_list_len_next(list2), unchecked+(sll_list_len_next(*((list2->next))), 1))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#list2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(rsrtl(list2), &&(&&(rsrtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, rsrtl_reach(*((list2->next)))))), >=(*((list2->key)), sll_max_key(*((list2->next))))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(rsrtl_reach(list2), @_vcc_oset_union(rsrtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll(list2), &&(sll(*((list2->next))), unchecked!(@_vcc_oset_in(list2, sll_reach(*((list2->next)))))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_reach(list2), @_vcc_oset_union(sll_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_max_key(list2), @\int_max(*((list2->key)), sll_max_key(*((list2->next)))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_min_key(list2), @\int_min(*((list2->key)), sll_min_key(*((list2->next)))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(srtl(list2), &&(&&(srtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, srtl_reach(*((list2->next)))))), <=(*((list2->key)), sll_min_key(*((list2->next))))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(srtl_reach(list2), @_vcc_oset_union(srtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), &&(==(@_vcc_mutable(@state, local.l1), @_vcc_mutable(@state, *((local.l1->next)))), ==(@writes_check(local.l1), @writes_check(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> $mutable($s, $phys_ptr_cast(local.l1, ^s_node)) == $mutable($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(local.l1, ^s_node)) == $top_writable($s, #wrTime$3^3.3, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node));
                // struct s_node* l14; 
                // l14 := local.l1; 
                SL#l14 := $phys_ptr_cast(local.l1, ^s_node);
                // struct s_node* stmtexpr2#11; 
                // stmtexpr2#11 := l14; 
                stmtexpr2#11 := $phys_ptr_cast(SL#l14, ^s_node);
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_pure(local.l1, *((local.l1->next)))), ==(sll_lseg(local.l1, *((local.l1->next))), &&(sll_lseg(*((local.l1->next)), *((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_lseg_reach(*((local.l1->next)), *((local.l1->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $phys_ptr_cast(local.l1, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(local.l1, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_pure(local.l1, *((local.l1->next)))), ==(sll_lseg_reach(local.l1, *((local.l1->next))), @_vcc_oset_union(sll_lseg_reach(*((local.l1->next)), *((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $phys_ptr_cast(local.l1, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(local.l1, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_pure(local.l1, *((local.l1->next)))), ==(sll_lseg_keys(local.l1, *((local.l1->next))), @_vcc_intset_union(sll_lseg_keys(*((local.l1->next)), *((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $phys_ptr_cast(local.l1, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(local.l1, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_pure(local.l1, *((local.l1->next)))), ==(sll_lseg_len_next(local.l1, *((local.l1->next))), unchecked+(sll_lseg_len_next(*((local.l1->next)), *((local.l1->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $phys_ptr_cast(local.l1, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(local.l1, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
                // assume ==>(&&(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_pure(local.l1, *((local.l1->next)))), @_vcc_ptr_neq_pure(*((local.l1->next)), *((local.l1->next)))), ==(sll_lseg_max_key(local.l1, *((local.l1->next))), @\int_max(*((local.l1->key)), sll_lseg_max_key(*((local.l1->next)), *((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $phys_ptr_cast(local.l1, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(local.l1, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_pure(local.l1, *((local.l1->next)))), @_vcc_ptr_neq_pure(*((local.l1->next)), *((local.l1->next)))), ==(sll_lseg_min_key(local.l1, *((local.l1->next))), @\int_min(*((local.l1->key)), sll_lseg_min_key(*((local.l1->next)), *((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $phys_ptr_cast(local.l1, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(local.l1, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_pure(local.l1, *((local.l1->next)))), @_vcc_ptr_neq_pure(*((local.l1->next)), *((local.l1->next)))), ==(srtl_lseg(local.l1, *((local.l1->next))), &&(&&(srtl_lseg(*((local.l1->next)), *((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_lseg_reach(*((local.l1->next)), *((local.l1->next)))))), <=(*((local.l1->key)), sll_lseg_min_key(*((local.l1->next)), *((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $phys_ptr_cast(local.l1, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(local.l1, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_pure(local.l1, *((local.l1->next)))), ==(srtl_lseg_reach(local.l1, *((local.l1->next))), @_vcc_oset_union(srtl_lseg_reach(*((local.l1->next)), *((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $phys_ptr_cast(local.l1, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(local.l1, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assert @reads_check_normal((local.l1->next)); 
                assert $thread_local($s, $phys_ptr_cast(local.l1, ^s_node));
                // local.l1 := *((local.l1->next)); 
                local.l1 := $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node);
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
            }
            else
            {
              anon2:
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_keys(list2), @_vcc_intset_union(sll_keys(*((list2->next))), @_vcc_intset_singleton(*((list2->key)))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#list2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_list_len_next(list2), unchecked+(sll_list_len_next(*((list2->next))), 1))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#list2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(rsrtl(list2), &&(&&(rsrtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, rsrtl_reach(*((list2->next)))))), >=(*((list2->key)), sll_max_key(*((list2->next))))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(rsrtl_reach(list2), @_vcc_oset_union(rsrtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll(list2), &&(sll(*((list2->next))), unchecked!(@_vcc_oset_in(list2, sll_reach(*((list2->next)))))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_reach(list2), @_vcc_oset_union(sll_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_max_key(list2), @\int_max(*((list2->key)), sll_max_key(*((list2->next)))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_min_key(list2), @\int_min(*((list2->key)), sll_min_key(*((list2->next)))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(srtl(list2), &&(&&(srtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, srtl_reach(*((list2->next)))))), <=(*((list2->key)), sll_min_key(*((list2->next))))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(srtl_reach(list2), @_vcc_oset_union(srtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg(list, l), &&(sll_lseg(*((list->next)), l), unchecked!(@_vcc_oset_in(list, sll_lseg_reach(*((list->next)), l)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node))));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_reach(list, l), @_vcc_oset_union(sll_lseg_reach(*((list->next)), l), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_keys(list, l), @_vcc_intset_union(sll_lseg_keys(*((list->next)), l), @_vcc_intset_singleton(*((list->key)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_len_next(list, l), unchecked+(sll_lseg_len_next(*((list->next)), l), 1))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), 1);
                // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(sll_lseg_max_key(list, l), @\int_max(*((list->key)), sll_lseg_max_key(*((list->next)), l)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(sll_lseg_min_key(list, l), @\int_min(*((list->key)), sll_lseg_min_key(*((list->next)), l)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(srtl_lseg(list, l), &&(&&(srtl_lseg(*((list->next)), l), unchecked!(@_vcc_oset_in(list, srtl_lseg_reach(*((list->next)), l)))), <=(*((list->key)), sll_lseg_min_key(*((list->next)), l))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(srtl_lseg_reach(list, l), @_vcc_oset_union(srtl_lseg_reach(*((list->next)), l), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // _math \state _dryad_S6#0; 
                // _dryad_S6#0 := @_vcc_current_state(@state); 
                _dryad_S6#0 := $current_state($s);
                // _math \state stmtexpr0#12; 
                // stmtexpr0#12 := _dryad_S6#0; 
                stmtexpr0#12 := _dryad_S6#0;
                // assert @prim_writes_check((l->next)); 
                assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#l, ^s_node), s_node.next));
                // *(l->next) := local.l2; 
                call $write_int(s_node.next, $phys_ptr_cast(L#l, ^s_node), $ptr_to_int($phys_ptr_cast(local.l2, ^s_node)));
                assume $full_stop_ext(#tok$3^74.4, $s);
                // _math \state _dryad_S7#1; 
                // _dryad_S7#1 := @_vcc_current_state(@state); 
                _dryad_S7#1 := $current_state($s);
                // _math \state stmtexpr1#13; 
                // stmtexpr1#13 := _dryad_S7#1; 
                stmtexpr1#13 := _dryad_S7#1;
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list2)))), ==(old(_dryad_S6#0, sll_keys(list2)), old(_dryad_S7#1, sll_keys(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_keys(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_keys(_dryad_S7#1, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list2)))), ==(old(_dryad_S6#0, sll_list_len_next(list2)), old(_dryad_S7#1, sll_list_len_next(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_list_len_next(_dryad_S7#1, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, rsrtl_reach(list2)))), ==(old(_dryad_S6#0, rsrtl(list2)), old(_dryad_S7#1, rsrtl(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#rsrtl(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node)) == F#rsrtl(_dryad_S7#1, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, rsrtl_reach(list2)))), ==(old(_dryad_S6#0, rsrtl_reach(list2)), old(_dryad_S7#1, rsrtl_reach(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node)) == F#rsrtl_reach(_dryad_S7#1, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list2)))), ==(old(_dryad_S6#0, sll(list2)), old(_dryad_S7#1, sll(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll(_dryad_S7#1, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list2)))), ==(old(_dryad_S6#0, sll_reach(list2)), old(_dryad_S7#1, sll_reach(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_reach(_dryad_S7#1, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list2)))), ==(old(_dryad_S6#0, sll_max_key(list2)), old(_dryad_S7#1, sll_max_key(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_max_key(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_max_key(_dryad_S7#1, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list2)))), ==(old(_dryad_S6#0, sll_min_key(list2)), old(_dryad_S7#1, sll_min_key(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_min_key(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_min_key(_dryad_S7#1, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, srtl_reach(list2)))), ==(old(_dryad_S6#0, srtl(list2)), old(_dryad_S7#1, srtl(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#srtl(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node)) == F#srtl(_dryad_S7#1, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, srtl_reach(list2)))), ==(old(_dryad_S6#0, srtl_reach(list2)), old(_dryad_S7#1, srtl_reach(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node)) == F#srtl_reach(_dryad_S7#1, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list)))), ==(old(_dryad_S6#0, sll_keys(list)), old(_dryad_S7#1, sll_keys(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_keys(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node)) == F#sll_keys(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list)))), ==(old(_dryad_S6#0, sll_list_len_next(list)), old(_dryad_S7#1, sll_list_len_next(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node)) == F#sll_list_len_next(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, rsrtl_reach(list)))), ==(old(_dryad_S6#0, rsrtl(list)), old(_dryad_S7#1, rsrtl(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node))) ==> F#rsrtl(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node)) == F#rsrtl(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, rsrtl_reach(list)))), ==(old(_dryad_S6#0, rsrtl_reach(list)), old(_dryad_S7#1, rsrtl_reach(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node)) == F#rsrtl_reach(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list)))), ==(old(_dryad_S6#0, sll(list)), old(_dryad_S7#1, sll(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node)) == F#sll(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list)))), ==(old(_dryad_S6#0, sll_reach(list)), old(_dryad_S7#1, sll_reach(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node)) == F#sll_reach(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list)))), ==(old(_dryad_S6#0, sll_max_key(list)), old(_dryad_S7#1, sll_max_key(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_max_key(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node)) == F#sll_max_key(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list)))), ==(old(_dryad_S6#0, sll_min_key(list)), old(_dryad_S7#1, sll_min_key(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_min_key(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node)) == F#sll_min_key(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, srtl_reach(list)))), ==(old(_dryad_S6#0, srtl(list)), old(_dryad_S7#1, srtl(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node))) ==> F#srtl(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node)) == F#srtl(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, srtl_reach(list)))), ==(old(_dryad_S6#0, srtl_reach(list)), old(_dryad_S7#1, srtl_reach(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node))) ==> F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node)) == F#srtl_reach(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list_next)))), ==(old(_dryad_S6#0, sll_keys(list_next)), old(_dryad_S7#1, sll_keys(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_keys(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_keys(_dryad_S7#1, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list_next)))), ==(old(_dryad_S6#0, sll_list_len_next(list_next)), old(_dryad_S7#1, sll_list_len_next(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_list_len_next(_dryad_S7#1, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, rsrtl_reach(list_next)))), ==(old(_dryad_S6#0, rsrtl(list_next)), old(_dryad_S7#1, rsrtl(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl(_dryad_S7#1, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, rsrtl_reach(list_next)))), ==(old(_dryad_S6#0, rsrtl_reach(list_next)), old(_dryad_S7#1, rsrtl_reach(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl_reach(_dryad_S7#1, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list_next)))), ==(old(_dryad_S6#0, sll(list_next)), old(_dryad_S7#1, sll(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll(_dryad_S7#1, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list_next)))), ==(old(_dryad_S6#0, sll_reach(list_next)), old(_dryad_S7#1, sll_reach(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_reach(_dryad_S7#1, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list_next)))), ==(old(_dryad_S6#0, sll_max_key(list_next)), old(_dryad_S7#1, sll_max_key(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_max_key(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_max_key(_dryad_S7#1, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list_next)))), ==(old(_dryad_S6#0, sll_min_key(list_next)), old(_dryad_S7#1, sll_min_key(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_min_key(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_min_key(_dryad_S7#1, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, srtl_reach(list_next)))), ==(old(_dryad_S6#0, srtl(list_next)), old(_dryad_S7#1, srtl(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl(_dryad_S7#1, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, srtl_reach(list_next)))), ==(old(_dryad_S6#0, srtl_reach(list_next)), old(_dryad_S7#1, srtl_reach(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl_reach(_dryad_S7#1, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(local.l2)))), ==(old(_dryad_S6#0, sll_keys(local.l2)), old(_dryad_S7#1, sll_keys(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_keys(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_keys(_dryad_S7#1, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(local.l2)))), ==(old(_dryad_S6#0, sll_list_len_next(local.l2)), old(_dryad_S7#1, sll_list_len_next(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_list_len_next(_dryad_S7#1, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, rsrtl_reach(local.l2)))), ==(old(_dryad_S6#0, rsrtl(local.l2)), old(_dryad_S7#1, rsrtl(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl(_dryad_S7#1, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, rsrtl_reach(local.l2)))), ==(old(_dryad_S6#0, rsrtl_reach(local.l2)), old(_dryad_S7#1, rsrtl_reach(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl_reach(_dryad_S7#1, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(local.l2)))), ==(old(_dryad_S6#0, sll(local.l2)), old(_dryad_S7#1, sll(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node)) == F#sll(_dryad_S7#1, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(local.l2)))), ==(old(_dryad_S6#0, sll_reach(local.l2)), old(_dryad_S7#1, sll_reach(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_reach(_dryad_S7#1, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(local.l2)))), ==(old(_dryad_S6#0, sll_max_key(local.l2)), old(_dryad_S7#1, sll_max_key(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_max_key(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_max_key(_dryad_S7#1, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(local.l2)))), ==(old(_dryad_S6#0, sll_min_key(local.l2)), old(_dryad_S7#1, sll_min_key(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_min_key(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_min_key(_dryad_S7#1, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, srtl_reach(local.l2)))), ==(old(_dryad_S6#0, srtl(local.l2)), old(_dryad_S7#1, srtl(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl(_dryad_S7#1, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, srtl_reach(local.l2)))), ==(old(_dryad_S6#0, srtl_reach(local.l2)), old(_dryad_S7#1, srtl_reach(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl_reach(_dryad_S7#1, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(local.l1)))), ==(old(_dryad_S6#0, sll_keys(local.l1)), old(_dryad_S7#1, sll_keys(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_keys(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_keys(_dryad_S7#1, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(local.l1)))), ==(old(_dryad_S6#0, sll_list_len_next(local.l1)), old(_dryad_S7#1, sll_list_len_next(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_list_len_next(_dryad_S7#1, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, rsrtl_reach(local.l1)))), ==(old(_dryad_S6#0, rsrtl(local.l1)), old(_dryad_S7#1, rsrtl(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl(_dryad_S7#1, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, rsrtl_reach(local.l1)))), ==(old(_dryad_S6#0, rsrtl_reach(local.l1)), old(_dryad_S7#1, rsrtl_reach(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl_reach(_dryad_S7#1, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(local.l1)))), ==(old(_dryad_S6#0, sll(local.l1)), old(_dryad_S7#1, sll(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node)) == F#sll(_dryad_S7#1, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(local.l1)))), ==(old(_dryad_S6#0, sll_reach(local.l1)), old(_dryad_S7#1, sll_reach(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_reach(_dryad_S7#1, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(local.l1)))), ==(old(_dryad_S6#0, sll_max_key(local.l1)), old(_dryad_S7#1, sll_max_key(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_max_key(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_max_key(_dryad_S7#1, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(local.l1)))), ==(old(_dryad_S6#0, sll_min_key(local.l1)), old(_dryad_S7#1, sll_min_key(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_min_key(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_min_key(_dryad_S7#1, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, srtl_reach(local.l1)))), ==(old(_dryad_S6#0, srtl(local.l1)), old(_dryad_S7#1, srtl(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl(_dryad_S7#1, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, srtl_reach(local.l1)))), ==(old(_dryad_S6#0, srtl_reach(local.l1)), old(_dryad_S7#1, srtl_reach(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl_reach(_dryad_S7#1, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#0, sll_lseg(list, l)), old(_dryad_S7#1, sll_lseg(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#0, sll_lseg_reach(list, l)), old(_dryad_S7#1, sll_lseg_reach(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_reach(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#0, sll_lseg_keys(list, l)), old(_dryad_S7#1, sll_lseg_keys(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_keys(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_keys(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#0, sll_lseg_len_next(list, l)), old(_dryad_S7#1, sll_lseg_len_next(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_len_next(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#0, sll_lseg_max_key(list, l)), old(_dryad_S7#1, sll_lseg_max_key(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_max_key(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_max_key(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#0, sll_lseg_min_key(list, l)), old(_dryad_S7#1, sll_lseg_min_key(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_min_key(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_min_key(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, srtl_lseg_reach(list, l)))), ==(old(_dryad_S6#0, srtl_lseg(list, l)), old(_dryad_S7#1, srtl_lseg(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_lseg(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#srtl_lseg(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, srtl_lseg_reach(list, l)))), ==(old(_dryad_S6#0, srtl_lseg_reach(list, l)), old(_dryad_S7#1, srtl_lseg_reach(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_lseg_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#srtl_lseg_reach(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(l, list2)), ==(*((list2->key)), old(_dryad_S6#0, *((list2->key))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(SL#list2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) == $rd_inv(_dryad_S6#0, s_node.key, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(l, list2)), @_vcc_ptr_eq_pure(*((list2->next)), old(_dryad_S6#0, *((list2->next))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(SL#list2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#0, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(l, list)), ==(*((list->key)), old(_dryad_S6#0, *((list->key))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) == $rd_inv(_dryad_S6#0, s_node.key, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(l, list)), @_vcc_ptr_eq_pure(*((list->next)), old(_dryad_S6#0, *((list->next))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#0, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(l, list_next)), ==(*((list_next->key)), old(_dryad_S6#0, *((list_next->key))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) == $rd_inv(_dryad_S6#0, s_node.key, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(l, list_next)), @_vcc_ptr_eq_pure(*((list_next->next)), old(_dryad_S6#0, *((list_next->next))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#0, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l2)), ==(*((local.l2->key)), old(_dryad_S6#0, *((local.l2->key))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) == $rd_inv(_dryad_S6#0, s_node.key, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l2)), @_vcc_ptr_eq_pure(*((local.l2->next)), old(_dryad_S6#0, *((local.l2->next))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#0, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l1)), ==(*((local.l1->key)), old(_dryad_S6#0, *((local.l1->key))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) == $rd_inv(_dryad_S6#0, s_node.key, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l1)), @_vcc_ptr_eq_pure(*((local.l1->next)), old(_dryad_S6#0, *((local.l1->next))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#0, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node);
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_keys(list2), @_vcc_intset_union(sll_keys(*((list2->next))), @_vcc_intset_singleton(*((list2->key)))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#list2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_list_len_next(list2), unchecked+(sll_list_len_next(*((list2->next))), 1))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#list2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(rsrtl(list2), &&(&&(rsrtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, rsrtl_reach(*((list2->next)))))), >=(*((list2->key)), sll_max_key(*((list2->next))))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(rsrtl_reach(list2), @_vcc_oset_union(rsrtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll(list2), &&(sll(*((list2->next))), unchecked!(@_vcc_oset_in(list2, sll_reach(*((list2->next)))))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_reach(list2), @_vcc_oset_union(sll_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_max_key(list2), @\int_max(*((list2->key)), sll_max_key(*((list2->next)))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_min_key(list2), @\int_min(*((list2->key)), sll_min_key(*((list2->next)))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(srtl(list2), &&(&&(srtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, srtl_reach(*((list2->next)))))), <=(*((list2->key)), sll_min_key(*((list2->next))))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(srtl_reach(list2), @_vcc_oset_union(srtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), &&(==(@_vcc_mutable(@state, local.l2), @_vcc_mutable(@state, *((local.l2->next)))), ==(@writes_check(local.l2), @writes_check(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> $mutable($s, $phys_ptr_cast(local.l2, ^s_node)) == $mutable($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(local.l2, ^s_node)) == $top_writable($s, #wrTime$3^3.3, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node));
                // struct s_node* l24; 
                // l24 := local.l2; 
                SL#l24 := $phys_ptr_cast(local.l2, ^s_node);
                // struct s_node* stmtexpr2#14; 
                // stmtexpr2#14 := l24; 
                stmtexpr2#14 := $phys_ptr_cast(SL#l24, ^s_node);
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_pure(local.l2, *((local.l2->next)))), ==(sll_lseg(local.l2, *((local.l2->next))), &&(sll_lseg(*((local.l2->next)), *((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_lseg_reach(*((local.l2->next)), *((local.l2->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $phys_ptr_cast(local.l2, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(local.l2, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_pure(local.l2, *((local.l2->next)))), ==(sll_lseg_reach(local.l2, *((local.l2->next))), @_vcc_oset_union(sll_lseg_reach(*((local.l2->next)), *((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $phys_ptr_cast(local.l2, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(local.l2, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_pure(local.l2, *((local.l2->next)))), ==(sll_lseg_keys(local.l2, *((local.l2->next))), @_vcc_intset_union(sll_lseg_keys(*((local.l2->next)), *((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $phys_ptr_cast(local.l2, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(local.l2, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_pure(local.l2, *((local.l2->next)))), ==(sll_lseg_len_next(local.l2, *((local.l2->next))), unchecked+(sll_lseg_len_next(*((local.l2->next)), *((local.l2->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $phys_ptr_cast(local.l2, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(local.l2, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_pure(local.l2, *((local.l2->next)))), @_vcc_ptr_neq_pure(*((local.l2->next)), *((local.l2->next)))), ==(sll_lseg_max_key(local.l2, *((local.l2->next))), @\int_max(*((local.l2->key)), sll_lseg_max_key(*((local.l2->next)), *((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $phys_ptr_cast(local.l2, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(local.l2, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_pure(local.l2, *((local.l2->next)))), @_vcc_ptr_neq_pure(*((local.l2->next)), *((local.l2->next)))), ==(sll_lseg_min_key(local.l2, *((local.l2->next))), @\int_min(*((local.l2->key)), sll_lseg_min_key(*((local.l2->next)), *((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $phys_ptr_cast(local.l2, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(local.l2, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_pure(local.l2, *((local.l2->next)))), @_vcc_ptr_neq_pure(*((local.l2->next)), *((local.l2->next)))), ==(srtl_lseg(local.l2, *((local.l2->next))), &&(&&(srtl_lseg(*((local.l2->next)), *((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_lseg_reach(*((local.l2->next)), *((local.l2->next)))))), <=(*((local.l2->key)), sll_lseg_min_key(*((local.l2->next)), *((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $phys_ptr_cast(local.l2, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(local.l2, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_pure(local.l2, *((local.l2->next)))), ==(srtl_lseg_reach(local.l2, *((local.l2->next))), @_vcc_oset_union(srtl_lseg_reach(*((local.l2->next)), *((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $phys_ptr_cast(local.l2, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(local.l2, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assert @reads_check_normal((local.l2->next)); 
                assert $thread_local($s, $phys_ptr_cast(local.l2, ^s_node));
                // local.l2 := *((local.l2->next)); 
                local.l2 := $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node);
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
            }

          anon4:
            // struct s_node* l3; 
            // l3 := l; 
            SL#l3 := $phys_ptr_cast(L#l, ^s_node);
            // struct s_node* stmtexpr0#15; 
            // stmtexpr0#15 := l3; 
            stmtexpr0#15 := $phys_ptr_cast(SL#l3, ^s_node);
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_pure(l, *((l->next)))), ==(sll_lseg(l, *((l->next))), &&(sll_lseg(*((l->next)), *((l->next))), unchecked!(@_vcc_oset_in(l, sll_lseg_reach(*((l->next)), *((l->next)))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $phys_ptr_cast(L#l, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#l, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_pure(l, *((l->next)))), ==(sll_lseg_reach(l, *((l->next))), @_vcc_oset_union(sll_lseg_reach(*((l->next)), *((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $phys_ptr_cast(L#l, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#l, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_pure(l, *((l->next)))), ==(sll_lseg_keys(l, *((l->next))), @_vcc_intset_union(sll_lseg_keys(*((l->next)), *((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $phys_ptr_cast(L#l, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#l, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_pure(l, *((l->next)))), ==(sll_lseg_len_next(l, *((l->next))), unchecked+(sll_lseg_len_next(*((l->next)), *((l->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $phys_ptr_cast(L#l, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#l, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_pure(l, *((l->next)))), @_vcc_ptr_neq_pure(*((l->next)), *((l->next)))), ==(sll_lseg_max_key(l, *((l->next))), @\int_max(*((l->key)), sll_lseg_max_key(*((l->next)), *((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $phys_ptr_cast(L#l, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#l, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_pure(l, *((l->next)))), @_vcc_ptr_neq_pure(*((l->next)), *((l->next)))), ==(sll_lseg_min_key(l, *((l->next))), @\int_min(*((l->key)), sll_lseg_min_key(*((l->next)), *((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $phys_ptr_cast(L#l, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(L#l, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_pure(l, *((l->next)))), @_vcc_ptr_neq_pure(*((l->next)), *((l->next)))), ==(srtl_lseg(l, *((l->next))), &&(&&(srtl_lseg(*((l->next)), *((l->next))), unchecked!(@_vcc_oset_in(l, srtl_lseg_reach(*((l->next)), *((l->next)))))), <=(*((l->key)), sll_lseg_min_key(*((l->next)), *((l->next))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $phys_ptr_cast(L#l, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(L#l, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_pure(l, *((l->next)))), ==(srtl_lseg_reach(l, *((l->next))), @_vcc_oset_union(srtl_lseg_reach(*((l->next)), *((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $phys_ptr_cast(L#l, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(L#l, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assert @reads_check_normal((l->next)); 
            assert $thread_local($s, $phys_ptr_cast(L#l, ^s_node));
            // l := *((l->next)); 
            L#l := $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node);
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg(list, l), &&(sll_lseg(*((list->next)), l), unchecked!(@_vcc_oset_in(list, sll_lseg_reach(*((list->next)), l)))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_reach(list, l), @_vcc_oset_union(sll_lseg_reach(*((list->next)), l), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_keys(list, l), @_vcc_intset_union(sll_lseg_keys(*((list->next)), l), @_vcc_intset_singleton(*((list->key)))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_len_next(list, l), unchecked+(sll_lseg_len_next(*((list->next)), l), 1))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(sll_lseg_max_key(list, l), @\int_max(*((list->key)), sll_lseg_max_key(*((list->next)), l)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(sll_lseg_min_key(list, l), @\int_min(*((list->key)), sll_lseg_min_key(*((list->next)), l)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(srtl_lseg(list, l), &&(&&(srtl_lseg(*((list->next)), l), unchecked!(@_vcc_oset_in(list, srtl_lseg_reach(*((list->next)), l)))), <=(*((list->key)), sll_lseg_min_key(*((list->next)), l))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(srtl_lseg_reach(list, l), @_vcc_oset_union(srtl_lseg_reach(*((list->next)), l), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
            // _math \state _dryad_S6#2; 
            // _dryad_S6#2 := @_vcc_current_state(@state); 
            _dryad_S6#2 := $current_state($s);
            // _math \state stmtexpr1#16; 
            // stmtexpr1#16 := _dryad_S6#2; 
            stmtexpr1#16 := _dryad_S6#2;
            // assert @prim_writes_check((l->next)); 
            assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#l, ^s_node), s_node.next));
            // *(l->next) := (struct s_node*)@null; 
            call $write_int(s_node.next, $phys_ptr_cast(L#l, ^s_node), $ptr_to_int($phys_ptr_cast($null, ^s_node)));
            assume $full_stop_ext(#tok$3^80.3, $s);
            // _math \state _dryad_S7#3; 
            // _dryad_S7#3 := @_vcc_current_state(@state); 
            _dryad_S7#3 := $current_state($s);
            // _math \state stmtexpr2#17; 
            // stmtexpr2#17 := _dryad_S7#3; 
            stmtexpr2#17 := _dryad_S7#3;
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(l3)))), ==(old(_dryad_S6#2, sll_keys(l3)), old(_dryad_S7#3, sll_keys(l3)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node))) ==> F#sll_keys(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node)) == F#sll_keys(_dryad_S7#3, $phys_ptr_cast(SL#l3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(l3)))), ==(old(_dryad_S6#2, sll_list_len_next(l3)), old(_dryad_S7#3, sll_list_len_next(l3)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node)) == F#sll_list_len_next(_dryad_S7#3, $phys_ptr_cast(SL#l3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, rsrtl_reach(l3)))), ==(old(_dryad_S6#2, rsrtl(l3)), old(_dryad_S7#3, rsrtl(l3)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node))) ==> F#rsrtl(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node)) == F#rsrtl(_dryad_S7#3, $phys_ptr_cast(SL#l3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, rsrtl_reach(l3)))), ==(old(_dryad_S6#2, rsrtl_reach(l3)), old(_dryad_S7#3, rsrtl_reach(l3)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node)) == F#rsrtl_reach(_dryad_S7#3, $phys_ptr_cast(SL#l3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(l3)))), ==(old(_dryad_S6#2, sll(l3)), old(_dryad_S7#3, sll(l3)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node))) ==> F#sll(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node)) == F#sll(_dryad_S7#3, $phys_ptr_cast(SL#l3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(l3)))), ==(old(_dryad_S6#2, sll_reach(l3)), old(_dryad_S7#3, sll_reach(l3)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node))) ==> F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node)) == F#sll_reach(_dryad_S7#3, $phys_ptr_cast(SL#l3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(l3)))), ==(old(_dryad_S6#2, sll_max_key(l3)), old(_dryad_S7#3, sll_max_key(l3)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node))) ==> F#sll_max_key(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node)) == F#sll_max_key(_dryad_S7#3, $phys_ptr_cast(SL#l3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(l3)))), ==(old(_dryad_S6#2, sll_min_key(l3)), old(_dryad_S7#3, sll_min_key(l3)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node))) ==> F#sll_min_key(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node)) == F#sll_min_key(_dryad_S7#3, $phys_ptr_cast(SL#l3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_reach(l3)))), ==(old(_dryad_S6#2, srtl(l3)), old(_dryad_S7#3, srtl(l3)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node))) ==> F#srtl(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node)) == F#srtl(_dryad_S7#3, $phys_ptr_cast(SL#l3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_reach(l3)))), ==(old(_dryad_S6#2, srtl_reach(l3)), old(_dryad_S7#3, srtl_reach(l3)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node))) ==> F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node)) == F#srtl_reach(_dryad_S7#3, $phys_ptr_cast(SL#l3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list2)))), ==(old(_dryad_S6#2, sll_keys(list2)), old(_dryad_S7#3, sll_keys(list2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_keys(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_keys(_dryad_S7#3, $phys_ptr_cast(SL#list2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list2)))), ==(old(_dryad_S6#2, sll_list_len_next(list2)), old(_dryad_S7#3, sll_list_len_next(list2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_list_len_next(_dryad_S7#3, $phys_ptr_cast(SL#list2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, rsrtl_reach(list2)))), ==(old(_dryad_S6#2, rsrtl(list2)), old(_dryad_S7#3, rsrtl(list2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#rsrtl(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node)) == F#rsrtl(_dryad_S7#3, $phys_ptr_cast(SL#list2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, rsrtl_reach(list2)))), ==(old(_dryad_S6#2, rsrtl_reach(list2)), old(_dryad_S7#3, rsrtl_reach(list2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node)) == F#rsrtl_reach(_dryad_S7#3, $phys_ptr_cast(SL#list2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list2)))), ==(old(_dryad_S6#2, sll(list2)), old(_dryad_S7#3, sll(list2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll(_dryad_S7#3, $phys_ptr_cast(SL#list2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list2)))), ==(old(_dryad_S6#2, sll_reach(list2)), old(_dryad_S7#3, sll_reach(list2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_reach(_dryad_S7#3, $phys_ptr_cast(SL#list2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list2)))), ==(old(_dryad_S6#2, sll_max_key(list2)), old(_dryad_S7#3, sll_max_key(list2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_max_key(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_max_key(_dryad_S7#3, $phys_ptr_cast(SL#list2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list2)))), ==(old(_dryad_S6#2, sll_min_key(list2)), old(_dryad_S7#3, sll_min_key(list2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_min_key(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_min_key(_dryad_S7#3, $phys_ptr_cast(SL#list2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_reach(list2)))), ==(old(_dryad_S6#2, srtl(list2)), old(_dryad_S7#3, srtl(list2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#srtl(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node)) == F#srtl(_dryad_S7#3, $phys_ptr_cast(SL#list2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_reach(list2)))), ==(old(_dryad_S6#2, srtl_reach(list2)), old(_dryad_S7#3, srtl_reach(list2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node)) == F#srtl_reach(_dryad_S7#3, $phys_ptr_cast(SL#list2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list)))), ==(old(_dryad_S6#2, sll_keys(list)), old(_dryad_S7#3, sll_keys(list)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_keys(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node)) == F#sll_keys(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list)))), ==(old(_dryad_S6#2, sll_list_len_next(list)), old(_dryad_S7#3, sll_list_len_next(list)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node)) == F#sll_list_len_next(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, rsrtl_reach(list)))), ==(old(_dryad_S6#2, rsrtl(list)), old(_dryad_S7#3, rsrtl(list)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node))) ==> F#rsrtl(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node)) == F#rsrtl(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, rsrtl_reach(list)))), ==(old(_dryad_S6#2, rsrtl_reach(list)), old(_dryad_S7#3, rsrtl_reach(list)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node)) == F#rsrtl_reach(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list)))), ==(old(_dryad_S6#2, sll(list)), old(_dryad_S7#3, sll(list)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node)) == F#sll(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list)))), ==(old(_dryad_S6#2, sll_reach(list)), old(_dryad_S7#3, sll_reach(list)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node)) == F#sll_reach(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list)))), ==(old(_dryad_S6#2, sll_max_key(list)), old(_dryad_S7#3, sll_max_key(list)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_max_key(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node)) == F#sll_max_key(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list)))), ==(old(_dryad_S6#2, sll_min_key(list)), old(_dryad_S7#3, sll_min_key(list)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_min_key(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node)) == F#sll_min_key(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_reach(list)))), ==(old(_dryad_S6#2, srtl(list)), old(_dryad_S7#3, srtl(list)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node))) ==> F#srtl(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node)) == F#srtl(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_reach(list)))), ==(old(_dryad_S6#2, srtl_reach(list)), old(_dryad_S7#3, srtl_reach(list)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node))) ==> F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node)) == F#srtl_reach(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list_next)))), ==(old(_dryad_S6#2, sll_keys(list_next)), old(_dryad_S7#3, sll_keys(list_next)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_keys(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_keys(_dryad_S7#3, $phys_ptr_cast(L#list_next, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list_next)))), ==(old(_dryad_S6#2, sll_list_len_next(list_next)), old(_dryad_S7#3, sll_list_len_next(list_next)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_list_len_next(_dryad_S7#3, $phys_ptr_cast(L#list_next, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, rsrtl_reach(list_next)))), ==(old(_dryad_S6#2, rsrtl(list_next)), old(_dryad_S7#3, rsrtl(list_next)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl(_dryad_S7#3, $phys_ptr_cast(L#list_next, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, rsrtl_reach(list_next)))), ==(old(_dryad_S6#2, rsrtl_reach(list_next)), old(_dryad_S7#3, rsrtl_reach(list_next)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl_reach(_dryad_S7#3, $phys_ptr_cast(L#list_next, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list_next)))), ==(old(_dryad_S6#2, sll(list_next)), old(_dryad_S7#3, sll(list_next)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll(_dryad_S7#3, $phys_ptr_cast(L#list_next, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list_next)))), ==(old(_dryad_S6#2, sll_reach(list_next)), old(_dryad_S7#3, sll_reach(list_next)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_reach(_dryad_S7#3, $phys_ptr_cast(L#list_next, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list_next)))), ==(old(_dryad_S6#2, sll_max_key(list_next)), old(_dryad_S7#3, sll_max_key(list_next)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_max_key(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_max_key(_dryad_S7#3, $phys_ptr_cast(L#list_next, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list_next)))), ==(old(_dryad_S6#2, sll_min_key(list_next)), old(_dryad_S7#3, sll_min_key(list_next)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_min_key(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_min_key(_dryad_S7#3, $phys_ptr_cast(L#list_next, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_reach(list_next)))), ==(old(_dryad_S6#2, srtl(list_next)), old(_dryad_S7#3, srtl(list_next)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl(_dryad_S7#3, $phys_ptr_cast(L#list_next, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_reach(list_next)))), ==(old(_dryad_S6#2, srtl_reach(list_next)), old(_dryad_S7#3, srtl_reach(list_next)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl_reach(_dryad_S7#3, $phys_ptr_cast(L#list_next, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(local.l2)))), ==(old(_dryad_S6#2, sll_keys(local.l2)), old(_dryad_S7#3, sll_keys(local.l2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_keys(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_keys(_dryad_S7#3, $phys_ptr_cast(local.l2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(local.l2)))), ==(old(_dryad_S6#2, sll_list_len_next(local.l2)), old(_dryad_S7#3, sll_list_len_next(local.l2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_list_len_next(_dryad_S7#3, $phys_ptr_cast(local.l2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, rsrtl_reach(local.l2)))), ==(old(_dryad_S6#2, rsrtl(local.l2)), old(_dryad_S7#3, rsrtl(local.l2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl(_dryad_S7#3, $phys_ptr_cast(local.l2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, rsrtl_reach(local.l2)))), ==(old(_dryad_S6#2, rsrtl_reach(local.l2)), old(_dryad_S7#3, rsrtl_reach(local.l2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl_reach(_dryad_S7#3, $phys_ptr_cast(local.l2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(local.l2)))), ==(old(_dryad_S6#2, sll(local.l2)), old(_dryad_S7#3, sll(local.l2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll(_dryad_S7#3, $phys_ptr_cast(local.l2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(local.l2)))), ==(old(_dryad_S6#2, sll_reach(local.l2)), old(_dryad_S7#3, sll_reach(local.l2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_reach(_dryad_S7#3, $phys_ptr_cast(local.l2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(local.l2)))), ==(old(_dryad_S6#2, sll_max_key(local.l2)), old(_dryad_S7#3, sll_max_key(local.l2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_max_key(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_max_key(_dryad_S7#3, $phys_ptr_cast(local.l2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(local.l2)))), ==(old(_dryad_S6#2, sll_min_key(local.l2)), old(_dryad_S7#3, sll_min_key(local.l2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_min_key(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_min_key(_dryad_S7#3, $phys_ptr_cast(local.l2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_reach(local.l2)))), ==(old(_dryad_S6#2, srtl(local.l2)), old(_dryad_S7#3, srtl(local.l2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl(_dryad_S7#3, $phys_ptr_cast(local.l2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_reach(local.l2)))), ==(old(_dryad_S6#2, srtl_reach(local.l2)), old(_dryad_S7#3, srtl_reach(local.l2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl_reach(_dryad_S7#3, $phys_ptr_cast(local.l2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(local.l1)))), ==(old(_dryad_S6#2, sll_keys(local.l1)), old(_dryad_S7#3, sll_keys(local.l1)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_keys(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_keys(_dryad_S7#3, $phys_ptr_cast(local.l1, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(local.l1)))), ==(old(_dryad_S6#2, sll_list_len_next(local.l1)), old(_dryad_S7#3, sll_list_len_next(local.l1)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_list_len_next(_dryad_S7#3, $phys_ptr_cast(local.l1, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, rsrtl_reach(local.l1)))), ==(old(_dryad_S6#2, rsrtl(local.l1)), old(_dryad_S7#3, rsrtl(local.l1)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl(_dryad_S7#3, $phys_ptr_cast(local.l1, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, rsrtl_reach(local.l1)))), ==(old(_dryad_S6#2, rsrtl_reach(local.l1)), old(_dryad_S7#3, rsrtl_reach(local.l1)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl_reach(_dryad_S7#3, $phys_ptr_cast(local.l1, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(local.l1)))), ==(old(_dryad_S6#2, sll(local.l1)), old(_dryad_S7#3, sll(local.l1)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll(_dryad_S7#3, $phys_ptr_cast(local.l1, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(local.l1)))), ==(old(_dryad_S6#2, sll_reach(local.l1)), old(_dryad_S7#3, sll_reach(local.l1)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_reach(_dryad_S7#3, $phys_ptr_cast(local.l1, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(local.l1)))), ==(old(_dryad_S6#2, sll_max_key(local.l1)), old(_dryad_S7#3, sll_max_key(local.l1)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_max_key(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_max_key(_dryad_S7#3, $phys_ptr_cast(local.l1, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(local.l1)))), ==(old(_dryad_S6#2, sll_min_key(local.l1)), old(_dryad_S7#3, sll_min_key(local.l1)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_min_key(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_min_key(_dryad_S7#3, $phys_ptr_cast(local.l1, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_reach(local.l1)))), ==(old(_dryad_S6#2, srtl(local.l1)), old(_dryad_S7#3, srtl(local.l1)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl(_dryad_S7#3, $phys_ptr_cast(local.l1, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_reach(local.l1)))), ==(old(_dryad_S6#2, srtl_reach(local.l1)), old(_dryad_S7#3, srtl_reach(local.l1)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl_reach(_dryad_S7#3, $phys_ptr_cast(local.l1, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#2, sll_lseg(list, l)), old(_dryad_S7#3, sll_lseg(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#2, sll_lseg_reach(list, l)), old(_dryad_S7#3, sll_lseg_reach(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_reach(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#2, sll_lseg_keys(list, l)), old(_dryad_S7#3, sll_lseg_keys(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_keys(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_keys(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#2, sll_lseg_len_next(list, l)), old(_dryad_S7#3, sll_lseg_len_next(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_len_next(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#2, sll_lseg_max_key(list, l)), old(_dryad_S7#3, sll_lseg_max_key(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_max_key(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_max_key(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#2, sll_lseg_min_key(list, l)), old(_dryad_S7#3, sll_lseg_min_key(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_min_key(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_min_key(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_lseg_reach(list, l)))), ==(old(_dryad_S6#2, srtl_lseg(list, l)), old(_dryad_S7#3, srtl_lseg(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_lseg(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#srtl_lseg(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_lseg_reach(list, l)))), ==(old(_dryad_S6#2, srtl_lseg_reach(list, l)), old(_dryad_S7#3, srtl_lseg_reach(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#srtl_lseg_reach(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#2, sll_lseg(list, l)), old(_dryad_S7#3, sll_lseg(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#2, sll_lseg_reach(list, l)), old(_dryad_S7#3, sll_lseg_reach(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_reach(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#2, sll_lseg_keys(list, l)), old(_dryad_S7#3, sll_lseg_keys(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_keys(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_keys(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#2, sll_lseg_len_next(list, l)), old(_dryad_S7#3, sll_lseg_len_next(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_len_next(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#2, sll_lseg_max_key(list, l)), old(_dryad_S7#3, sll_lseg_max_key(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_max_key(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_max_key(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#2, sll_lseg_min_key(list, l)), old(_dryad_S7#3, sll_lseg_min_key(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_min_key(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_min_key(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_lseg_reach(list, l)))), ==(old(_dryad_S6#2, srtl_lseg(list, l)), old(_dryad_S7#3, srtl_lseg(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_lseg(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#srtl_lseg(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_lseg_reach(list, l)))), ==(old(_dryad_S6#2, srtl_lseg_reach(list, l)), old(_dryad_S7#3, srtl_lseg_reach(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#srtl_lseg_reach(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(l, l3)), ==(*((l3->key)), old(_dryad_S6#2, *((l3->key))))); 
            assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(SL#l3, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l3, ^s_node)) == $rd_inv(_dryad_S6#2, s_node.key, $phys_ptr_cast(SL#l3, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(l, l3)), @_vcc_ptr_eq_pure(*((l3->next)), old(_dryad_S6#2, *((l3->next))))); 
            assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(SL#l3, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#2, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(l, list2)), ==(*((list2->key)), old(_dryad_S6#2, *((list2->key))))); 
            assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(SL#list2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) == $rd_inv(_dryad_S6#2, s_node.key, $phys_ptr_cast(SL#list2, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(l, list2)), @_vcc_ptr_eq_pure(*((list2->next)), old(_dryad_S6#2, *((list2->next))))); 
            assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(SL#list2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#2, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(l, list)), ==(*((list->key)), old(_dryad_S6#2, *((list->key))))); 
            assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) == $rd_inv(_dryad_S6#2, s_node.key, $phys_ptr_cast(L#list, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(l, list)), @_vcc_ptr_eq_pure(*((list->next)), old(_dryad_S6#2, *((list->next))))); 
            assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(l, list_next)), ==(*((list_next->key)), old(_dryad_S6#2, *((list_next->key))))); 
            assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) == $rd_inv(_dryad_S6#2, s_node.key, $phys_ptr_cast(L#list_next, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(l, list_next)), @_vcc_ptr_eq_pure(*((list_next->next)), old(_dryad_S6#2, *((list_next->next))))); 
            assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#2, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l2)), ==(*((local.l2->key)), old(_dryad_S6#2, *((local.l2->key))))); 
            assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) == $rd_inv(_dryad_S6#2, s_node.key, $phys_ptr_cast(local.l2, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l2)), @_vcc_ptr_eq_pure(*((local.l2->next)), old(_dryad_S6#2, *((local.l2->next))))); 
            assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#2, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l1)), ==(*((local.l1->key)), old(_dryad_S6#2, *((local.l1->key))))); 
            assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) == $rd_inv(_dryad_S6#2, s_node.key, $phys_ptr_cast(local.l1, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l1)), @_vcc_ptr_eq_pure(*((local.l1->next)), old(_dryad_S6#2, *((local.l1->next))))); 
            assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#2, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node);
            // assume ==>(@_vcc_ptr_neq_null(l3), ==(sll_keys(l3), @_vcc_intset_union(sll_keys(*((l3->next))), @_vcc_intset_singleton(*((l3->key)))))); 
            assume $non_null($phys_ptr_cast(SL#l3, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#l3, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l3, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l3), ==(sll_list_len_next(l3), unchecked+(sll_list_len_next(*((l3->next))), 1))); 
            assume $non_null($phys_ptr_cast(SL#l3, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#l3, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(l3), @_vcc_ptr_neq_null(*((l3->next)))), ==(rsrtl(l3), &&(&&(rsrtl(*((l3->next))), unchecked!(@_vcc_oset_in(l3, rsrtl_reach(*((l3->next)))))), >=(*((l3->key)), sll_max_key(*((l3->next))))))); 
            assume $non_null($phys_ptr_cast(SL#l3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#l3, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l3, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l3, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l3), ==(rsrtl_reach(l3), @_vcc_oset_union(rsrtl_reach(*((l3->next))), @_vcc_oset_singleton(l3)))); 
            assume $non_null($phys_ptr_cast(SL#l3, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#l3, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l3, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l3), ==(sll(l3), &&(sll(*((l3->next))), unchecked!(@_vcc_oset_in(l3, sll_reach(*((l3->next)))))))); 
            assume $non_null($phys_ptr_cast(SL#l3, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#l3, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l3, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l3), ==(sll_reach(l3), @_vcc_oset_union(sll_reach(*((l3->next))), @_vcc_oset_singleton(l3)))); 
            assume $non_null($phys_ptr_cast(SL#l3, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#l3, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l3, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l3), @_vcc_ptr_neq_null(*((l3->next)))), ==(sll_max_key(l3), @\int_max(*((l3->key)), sll_max_key(*((l3->next)))))); 
            assume $non_null($phys_ptr_cast(SL#l3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#l3, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l3, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l3), @_vcc_ptr_neq_null(*((l3->next)))), ==(sll_min_key(l3), @\int_min(*((l3->key)), sll_min_key(*((l3->next)))))); 
            assume $non_null($phys_ptr_cast(SL#l3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#l3, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l3, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l3), @_vcc_ptr_neq_null(*((l3->next)))), ==(srtl(l3), &&(&&(srtl(*((l3->next))), unchecked!(@_vcc_oset_in(l3, srtl_reach(*((l3->next)))))), <=(*((l3->key)), sll_min_key(*((l3->next))))))); 
            assume $non_null($phys_ptr_cast(SL#l3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#l3, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l3, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l3, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l3), ==(srtl_reach(l3), @_vcc_oset_union(srtl_reach(*((l3->next))), @_vcc_oset_singleton(l3)))); 
            assume $non_null($phys_ptr_cast(SL#l3, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#l3, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l3, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_keys(list2), @_vcc_intset_union(sll_keys(*((list2->next))), @_vcc_intset_singleton(*((list2->key)))))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#list2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_list_len_next(list2), unchecked+(sll_list_len_next(*((list2->next))), 1))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#list2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(rsrtl(list2), &&(&&(rsrtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, rsrtl_reach(*((list2->next)))))), >=(*((list2->key)), sll_max_key(*((list2->next))))))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list2), ==(rsrtl_reach(list2), @_vcc_oset_union(rsrtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll(list2), &&(sll(*((list2->next))), unchecked!(@_vcc_oset_in(list2, sll_reach(*((list2->next)))))))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_reach(list2), @_vcc_oset_union(sll_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_max_key(list2), @\int_max(*((list2->key)), sll_max_key(*((list2->next)))))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_min_key(list2), @\int_min(*((list2->key)), sll_min_key(*((list2->next)))))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(srtl(list2), &&(&&(srtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, srtl_reach(*((list2->next)))))), <=(*((list2->key)), sll_min_key(*((list2->next))))))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list2), ==(srtl_reach(list2), @_vcc_oset_union(srtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
        }
        else
        {
          anon5:
            // assert @_vcc_possibly_unreachable; 
            assert {:PossiblyUnreachable true} true;
            // goto #break_2; 
            goto #break_2;
        }

      #continue_2:
        assume true;
// INV:LOOPTAIL
    }

  anon10:
    assume $full_stop_ext(#tok$3^33.2, $s);

  #break_2:
    // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_keys(list2), @_vcc_intset_union(sll_keys(*((list2->next))), @_vcc_intset_singleton(*((list2->key)))))); 
    assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#list2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_list_len_next(list2), unchecked+(sll_list_len_next(*((list2->next))), 1))); 
    assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#list2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(rsrtl(list2), &&(&&(rsrtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, rsrtl_reach(*((list2->next)))))), >=(*((list2->key)), sll_max_key(*((list2->next))))))); 
    assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list2), ==(rsrtl_reach(list2), @_vcc_oset_union(rsrtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
    assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll(list2), &&(sll(*((list2->next))), unchecked!(@_vcc_oset_in(list2, sll_reach(*((list2->next)))))))); 
    assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_reach(list2), @_vcc_oset_union(sll_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
    assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_max_key(list2), @\int_max(*((list2->key)), sll_max_key(*((list2->next)))))); 
    assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_min_key(list2), @\int_min(*((list2->key)), sll_min_key(*((list2->next)))))); 
    assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(srtl(list2), &&(&&(srtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, srtl_reach(*((list2->next)))))), <=(*((list2->key)), sll_min_key(*((list2->next))))))); 
    assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list2), ==(srtl_reach(list2), @_vcc_oset_union(srtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
    assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    assume true;
    // if (@_vcc_ptr_neq_null(local.l1)) ...
    if ($non_null($phys_ptr_cast(local.l1, ^s_node)))
    {
      anon7:
        // _math \state _dryad_S6#4; 
        // _dryad_S6#4 := @_vcc_current_state(@state); 
        _dryad_S6#4 := $current_state($s);
        // _math \state stmtexpr0#18; 
        // stmtexpr0#18 := _dryad_S6#4; 
        stmtexpr0#18 := _dryad_S6#4;
        // assert @prim_writes_check((l->next)); 
        assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#l, ^s_node), s_node.next));
        // *(l->next) := local.l1; 
        call $write_int(s_node.next, $phys_ptr_cast(L#l, ^s_node), $ptr_to_int($phys_ptr_cast(local.l1, ^s_node)));
        assume $full_stop_ext(#tok$3^83.3, $s);
        // _math \state _dryad_S7#5; 
        // _dryad_S7#5 := @_vcc_current_state(@state); 
        _dryad_S7#5 := $current_state($s);
        // _math \state stmtexpr1#19; 
        // stmtexpr1#19 := _dryad_S7#5; 
        stmtexpr1#19 := _dryad_S7#5;
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list2)))), ==(old(_dryad_S6#4, sll_keys(list2)), old(_dryad_S7#5, sll_keys(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_keys(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_keys(_dryad_S7#5, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list2)))), ==(old(_dryad_S6#4, sll_list_len_next(list2)), old(_dryad_S7#5, sll_list_len_next(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_list_len_next(_dryad_S7#5, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, rsrtl_reach(list2)))), ==(old(_dryad_S6#4, rsrtl(list2)), old(_dryad_S7#5, rsrtl(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#rsrtl(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node)) == F#rsrtl(_dryad_S7#5, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, rsrtl_reach(list2)))), ==(old(_dryad_S6#4, rsrtl_reach(list2)), old(_dryad_S7#5, rsrtl_reach(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node)) == F#rsrtl_reach(_dryad_S7#5, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list2)))), ==(old(_dryad_S6#4, sll(list2)), old(_dryad_S7#5, sll(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll(_dryad_S7#5, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list2)))), ==(old(_dryad_S6#4, sll_reach(list2)), old(_dryad_S7#5, sll_reach(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_reach(_dryad_S7#5, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list2)))), ==(old(_dryad_S6#4, sll_max_key(list2)), old(_dryad_S7#5, sll_max_key(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_max_key(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_max_key(_dryad_S7#5, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list2)))), ==(old(_dryad_S6#4, sll_min_key(list2)), old(_dryad_S7#5, sll_min_key(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_min_key(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_min_key(_dryad_S7#5, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, srtl_reach(list2)))), ==(old(_dryad_S6#4, srtl(list2)), old(_dryad_S7#5, srtl(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#srtl(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node)) == F#srtl(_dryad_S7#5, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, srtl_reach(list2)))), ==(old(_dryad_S6#4, srtl_reach(list2)), old(_dryad_S7#5, srtl_reach(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node)) == F#srtl_reach(_dryad_S7#5, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list)))), ==(old(_dryad_S6#4, sll_keys(list)), old(_dryad_S7#5, sll_keys(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_keys(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node)) == F#sll_keys(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list)))), ==(old(_dryad_S6#4, sll_list_len_next(list)), old(_dryad_S7#5, sll_list_len_next(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node)) == F#sll_list_len_next(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, rsrtl_reach(list)))), ==(old(_dryad_S6#4, rsrtl(list)), old(_dryad_S7#5, rsrtl(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node))) ==> F#rsrtl(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node)) == F#rsrtl(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, rsrtl_reach(list)))), ==(old(_dryad_S6#4, rsrtl_reach(list)), old(_dryad_S7#5, rsrtl_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node)) == F#rsrtl_reach(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list)))), ==(old(_dryad_S6#4, sll(list)), old(_dryad_S7#5, sll(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node)) == F#sll(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list)))), ==(old(_dryad_S6#4, sll_reach(list)), old(_dryad_S7#5, sll_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node)) == F#sll_reach(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list)))), ==(old(_dryad_S6#4, sll_max_key(list)), old(_dryad_S7#5, sll_max_key(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_max_key(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node)) == F#sll_max_key(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list)))), ==(old(_dryad_S6#4, sll_min_key(list)), old(_dryad_S7#5, sll_min_key(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_min_key(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node)) == F#sll_min_key(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, srtl_reach(list)))), ==(old(_dryad_S6#4, srtl(list)), old(_dryad_S7#5, srtl(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node))) ==> F#srtl(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node)) == F#srtl(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, srtl_reach(list)))), ==(old(_dryad_S6#4, srtl_reach(list)), old(_dryad_S7#5, srtl_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node))) ==> F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node)) == F#srtl_reach(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list_next)))), ==(old(_dryad_S6#4, sll_keys(list_next)), old(_dryad_S7#5, sll_keys(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_keys(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_keys(_dryad_S7#5, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list_next)))), ==(old(_dryad_S6#4, sll_list_len_next(list_next)), old(_dryad_S7#5, sll_list_len_next(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_list_len_next(_dryad_S7#5, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, rsrtl_reach(list_next)))), ==(old(_dryad_S6#4, rsrtl(list_next)), old(_dryad_S7#5, rsrtl(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl(_dryad_S7#5, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, rsrtl_reach(list_next)))), ==(old(_dryad_S6#4, rsrtl_reach(list_next)), old(_dryad_S7#5, rsrtl_reach(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl_reach(_dryad_S7#5, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list_next)))), ==(old(_dryad_S6#4, sll(list_next)), old(_dryad_S7#5, sll(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll(_dryad_S7#5, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list_next)))), ==(old(_dryad_S6#4, sll_reach(list_next)), old(_dryad_S7#5, sll_reach(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_reach(_dryad_S7#5, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list_next)))), ==(old(_dryad_S6#4, sll_max_key(list_next)), old(_dryad_S7#5, sll_max_key(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_max_key(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_max_key(_dryad_S7#5, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list_next)))), ==(old(_dryad_S6#4, sll_min_key(list_next)), old(_dryad_S7#5, sll_min_key(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_min_key(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_min_key(_dryad_S7#5, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, srtl_reach(list_next)))), ==(old(_dryad_S6#4, srtl(list_next)), old(_dryad_S7#5, srtl(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl(_dryad_S7#5, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, srtl_reach(list_next)))), ==(old(_dryad_S6#4, srtl_reach(list_next)), old(_dryad_S7#5, srtl_reach(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl_reach(_dryad_S7#5, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(local.l2)))), ==(old(_dryad_S6#4, sll_keys(local.l2)), old(_dryad_S7#5, sll_keys(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_keys(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_keys(_dryad_S7#5, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(local.l2)))), ==(old(_dryad_S6#4, sll_list_len_next(local.l2)), old(_dryad_S7#5, sll_list_len_next(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_list_len_next(_dryad_S7#5, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, rsrtl_reach(local.l2)))), ==(old(_dryad_S6#4, rsrtl(local.l2)), old(_dryad_S7#5, rsrtl(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl(_dryad_S7#5, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, rsrtl_reach(local.l2)))), ==(old(_dryad_S6#4, rsrtl_reach(local.l2)), old(_dryad_S7#5, rsrtl_reach(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl_reach(_dryad_S7#5, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(local.l2)))), ==(old(_dryad_S6#4, sll(local.l2)), old(_dryad_S7#5, sll(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node)) == F#sll(_dryad_S7#5, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(local.l2)))), ==(old(_dryad_S6#4, sll_reach(local.l2)), old(_dryad_S7#5, sll_reach(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_reach(_dryad_S7#5, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(local.l2)))), ==(old(_dryad_S6#4, sll_max_key(local.l2)), old(_dryad_S7#5, sll_max_key(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_max_key(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_max_key(_dryad_S7#5, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(local.l2)))), ==(old(_dryad_S6#4, sll_min_key(local.l2)), old(_dryad_S7#5, sll_min_key(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_min_key(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_min_key(_dryad_S7#5, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, srtl_reach(local.l2)))), ==(old(_dryad_S6#4, srtl(local.l2)), old(_dryad_S7#5, srtl(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl(_dryad_S7#5, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, srtl_reach(local.l2)))), ==(old(_dryad_S6#4, srtl_reach(local.l2)), old(_dryad_S7#5, srtl_reach(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl_reach(_dryad_S7#5, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(local.l1)))), ==(old(_dryad_S6#4, sll_keys(local.l1)), old(_dryad_S7#5, sll_keys(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_keys(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_keys(_dryad_S7#5, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(local.l1)))), ==(old(_dryad_S6#4, sll_list_len_next(local.l1)), old(_dryad_S7#5, sll_list_len_next(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_list_len_next(_dryad_S7#5, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, rsrtl_reach(local.l1)))), ==(old(_dryad_S6#4, rsrtl(local.l1)), old(_dryad_S7#5, rsrtl(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl(_dryad_S7#5, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, rsrtl_reach(local.l1)))), ==(old(_dryad_S6#4, rsrtl_reach(local.l1)), old(_dryad_S7#5, rsrtl_reach(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl_reach(_dryad_S7#5, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(local.l1)))), ==(old(_dryad_S6#4, sll(local.l1)), old(_dryad_S7#5, sll(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node)) == F#sll(_dryad_S7#5, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(local.l1)))), ==(old(_dryad_S6#4, sll_reach(local.l1)), old(_dryad_S7#5, sll_reach(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_reach(_dryad_S7#5, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(local.l1)))), ==(old(_dryad_S6#4, sll_max_key(local.l1)), old(_dryad_S7#5, sll_max_key(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_max_key(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_max_key(_dryad_S7#5, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(local.l1)))), ==(old(_dryad_S6#4, sll_min_key(local.l1)), old(_dryad_S7#5, sll_min_key(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_min_key(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_min_key(_dryad_S7#5, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, srtl_reach(local.l1)))), ==(old(_dryad_S6#4, srtl(local.l1)), old(_dryad_S7#5, srtl(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl(_dryad_S7#5, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, srtl_reach(local.l1)))), ==(old(_dryad_S6#4, srtl_reach(local.l1)), old(_dryad_S7#5, srtl_reach(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl_reach(_dryad_S7#5, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#4, sll_lseg(list, l)), old(_dryad_S7#5, sll_lseg(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#4, sll_lseg_reach(list, l)), old(_dryad_S7#5, sll_lseg_reach(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_reach(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#4, sll_lseg_keys(list, l)), old(_dryad_S7#5, sll_lseg_keys(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_keys(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_keys(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#4, sll_lseg_len_next(list, l)), old(_dryad_S7#5, sll_lseg_len_next(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_len_next(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#4, sll_lseg_max_key(list, l)), old(_dryad_S7#5, sll_lseg_max_key(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_max_key(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_max_key(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#4, sll_lseg_min_key(list, l)), old(_dryad_S7#5, sll_lseg_min_key(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_min_key(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_min_key(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, srtl_lseg_reach(list, l)))), ==(old(_dryad_S6#4, srtl_lseg(list, l)), old(_dryad_S7#5, srtl_lseg(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_lseg(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#srtl_lseg(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, srtl_lseg_reach(list, l)))), ==(old(_dryad_S6#4, srtl_lseg_reach(list, l)), old(_dryad_S7#5, srtl_lseg_reach(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_lseg_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#srtl_lseg_reach(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(l, list2)), ==(*((list2->key)), old(_dryad_S6#4, *((list2->key))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(SL#list2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) == $rd_inv(_dryad_S6#4, s_node.key, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(l, list2)), @_vcc_ptr_eq_pure(*((list2->next)), old(_dryad_S6#4, *((list2->next))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(SL#list2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#4, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(l, list)), ==(*((list->key)), old(_dryad_S6#4, *((list->key))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) == $rd_inv(_dryad_S6#4, s_node.key, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(l, list)), @_vcc_ptr_eq_pure(*((list->next)), old(_dryad_S6#4, *((list->next))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#4, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(l, list_next)), ==(*((list_next->key)), old(_dryad_S6#4, *((list_next->key))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) == $rd_inv(_dryad_S6#4, s_node.key, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(l, list_next)), @_vcc_ptr_eq_pure(*((list_next->next)), old(_dryad_S6#4, *((list_next->next))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#4, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l2)), ==(*((local.l2->key)), old(_dryad_S6#4, *((local.l2->key))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) == $rd_inv(_dryad_S6#4, s_node.key, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l2)), @_vcc_ptr_eq_pure(*((local.l2->next)), old(_dryad_S6#4, *((local.l2->next))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#4, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l1)), ==(*((local.l1->key)), old(_dryad_S6#4, *((local.l1->key))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) == $rd_inv(_dryad_S6#4, s_node.key, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l1)), @_vcc_ptr_eq_pure(*((local.l1->next)), old(_dryad_S6#4, *((local.l1->next))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#4, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node);
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_keys(list2), @_vcc_intset_union(sll_keys(*((list2->next))), @_vcc_intset_singleton(*((list2->key)))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#list2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_list_len_next(list2), unchecked+(sll_list_len_next(*((list2->next))), 1))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#list2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(rsrtl(list2), &&(&&(rsrtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, rsrtl_reach(*((list2->next)))))), >=(*((list2->key)), sll_max_key(*((list2->next))))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(rsrtl_reach(list2), @_vcc_oset_union(rsrtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll(list2), &&(sll(*((list2->next))), unchecked!(@_vcc_oset_in(list2, sll_reach(*((list2->next)))))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_reach(list2), @_vcc_oset_union(sll_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_max_key(list2), @\int_max(*((list2->key)), sll_max_key(*((list2->next)))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_min_key(list2), @\int_min(*((list2->key)), sll_min_key(*((list2->next)))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(srtl(list2), &&(&&(srtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, srtl_reach(*((list2->next)))))), <=(*((list2->key)), sll_min_key(*((list2->next))))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(srtl_reach(list2), @_vcc_oset_union(srtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    }
    else
    {
      anon8:
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_keys(list2), @_vcc_intset_union(sll_keys(*((list2->next))), @_vcc_intset_singleton(*((list2->key)))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#list2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_list_len_next(list2), unchecked+(sll_list_len_next(*((list2->next))), 1))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#list2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(rsrtl(list2), &&(&&(rsrtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, rsrtl_reach(*((list2->next)))))), >=(*((list2->key)), sll_max_key(*((list2->next))))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(rsrtl_reach(list2), @_vcc_oset_union(rsrtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll(list2), &&(sll(*((list2->next))), unchecked!(@_vcc_oset_in(list2, sll_reach(*((list2->next)))))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_reach(list2), @_vcc_oset_union(sll_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_max_key(list2), @\int_max(*((list2->key)), sll_max_key(*((list2->next)))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_min_key(list2), @\int_min(*((list2->key)), sll_min_key(*((list2->next)))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(srtl(list2), &&(&&(srtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, srtl_reach(*((list2->next)))))), <=(*((list2->key)), sll_min_key(*((list2->next))))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(srtl_reach(list2), @_vcc_oset_union(srtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg(list, l), &&(sll_lseg(*((list->next)), l), unchecked!(@_vcc_oset_in(list, sll_lseg_reach(*((list->next)), l)))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_reach(list, l), @_vcc_oset_union(sll_lseg_reach(*((list->next)), l), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_keys(list, l), @_vcc_intset_union(sll_lseg_keys(*((list->next)), l), @_vcc_intset_singleton(*((list->key)))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_len_next(list, l), unchecked+(sll_lseg_len_next(*((list->next)), l), 1))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), 1);
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(sll_lseg_max_key(list, l), @\int_max(*((list->key)), sll_lseg_max_key(*((list->next)), l)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(sll_lseg_min_key(list, l), @\int_min(*((list->key)), sll_lseg_min_key(*((list->next)), l)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(srtl_lseg(list, l), &&(&&(srtl_lseg(*((list->next)), l), unchecked!(@_vcc_oset_in(list, srtl_lseg_reach(*((list->next)), l)))), <=(*((list->key)), sll_lseg_min_key(*((list->next)), l))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(srtl_lseg_reach(list, l), @_vcc_oset_union(srtl_lseg_reach(*((list->next)), l), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
        // _math \state _dryad_S6#6; 
        // _dryad_S6#6 := @_vcc_current_state(@state); 
        _dryad_S6#6 := $current_state($s);
        // _math \state stmtexpr0#20; 
        // stmtexpr0#20 := _dryad_S6#6; 
        stmtexpr0#20 := _dryad_S6#6;
        // assert @prim_writes_check((l->next)); 
        assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#l, ^s_node), s_node.next));
        // *(l->next) := local.l2; 
        call $write_int(s_node.next, $phys_ptr_cast(L#l, ^s_node), $ptr_to_int($phys_ptr_cast(local.l2, ^s_node)));
        assume $full_stop_ext(#tok$3^85.3, $s);
        // _math \state _dryad_S7#7; 
        // _dryad_S7#7 := @_vcc_current_state(@state); 
        _dryad_S7#7 := $current_state($s);
        // _math \state stmtexpr1#21; 
        // stmtexpr1#21 := _dryad_S7#7; 
        stmtexpr1#21 := _dryad_S7#7;
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list2)))), ==(old(_dryad_S6#6, sll_keys(list2)), old(_dryad_S7#7, sll_keys(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_keys(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_keys(_dryad_S7#7, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list2)))), ==(old(_dryad_S6#6, sll_list_len_next(list2)), old(_dryad_S7#7, sll_list_len_next(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_list_len_next(_dryad_S7#7, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, rsrtl_reach(list2)))), ==(old(_dryad_S6#6, rsrtl(list2)), old(_dryad_S7#7, rsrtl(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#rsrtl(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node)) == F#rsrtl(_dryad_S7#7, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, rsrtl_reach(list2)))), ==(old(_dryad_S6#6, rsrtl_reach(list2)), old(_dryad_S7#7, rsrtl_reach(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node)) == F#rsrtl_reach(_dryad_S7#7, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list2)))), ==(old(_dryad_S6#6, sll(list2)), old(_dryad_S7#7, sll(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll(_dryad_S7#7, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list2)))), ==(old(_dryad_S6#6, sll_reach(list2)), old(_dryad_S7#7, sll_reach(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_reach(_dryad_S7#7, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list2)))), ==(old(_dryad_S6#6, sll_max_key(list2)), old(_dryad_S7#7, sll_max_key(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_max_key(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_max_key(_dryad_S7#7, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list2)))), ==(old(_dryad_S6#6, sll_min_key(list2)), old(_dryad_S7#7, sll_min_key(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_min_key(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_min_key(_dryad_S7#7, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, srtl_reach(list2)))), ==(old(_dryad_S6#6, srtl(list2)), old(_dryad_S7#7, srtl(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#srtl(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node)) == F#srtl(_dryad_S7#7, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, srtl_reach(list2)))), ==(old(_dryad_S6#6, srtl_reach(list2)), old(_dryad_S7#7, srtl_reach(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node)) == F#srtl_reach(_dryad_S7#7, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list)))), ==(old(_dryad_S6#6, sll_keys(list)), old(_dryad_S7#7, sll_keys(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_keys(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node)) == F#sll_keys(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list)))), ==(old(_dryad_S6#6, sll_list_len_next(list)), old(_dryad_S7#7, sll_list_len_next(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node)) == F#sll_list_len_next(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, rsrtl_reach(list)))), ==(old(_dryad_S6#6, rsrtl(list)), old(_dryad_S7#7, rsrtl(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node))) ==> F#rsrtl(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node)) == F#rsrtl(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, rsrtl_reach(list)))), ==(old(_dryad_S6#6, rsrtl_reach(list)), old(_dryad_S7#7, rsrtl_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node)) == F#rsrtl_reach(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list)))), ==(old(_dryad_S6#6, sll(list)), old(_dryad_S7#7, sll(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node)) == F#sll(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list)))), ==(old(_dryad_S6#6, sll_reach(list)), old(_dryad_S7#7, sll_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node)) == F#sll_reach(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list)))), ==(old(_dryad_S6#6, sll_max_key(list)), old(_dryad_S7#7, sll_max_key(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_max_key(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node)) == F#sll_max_key(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list)))), ==(old(_dryad_S6#6, sll_min_key(list)), old(_dryad_S7#7, sll_min_key(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_min_key(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node)) == F#sll_min_key(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, srtl_reach(list)))), ==(old(_dryad_S6#6, srtl(list)), old(_dryad_S7#7, srtl(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node))) ==> F#srtl(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node)) == F#srtl(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, srtl_reach(list)))), ==(old(_dryad_S6#6, srtl_reach(list)), old(_dryad_S7#7, srtl_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node))) ==> F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node)) == F#srtl_reach(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list_next)))), ==(old(_dryad_S6#6, sll_keys(list_next)), old(_dryad_S7#7, sll_keys(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_keys(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_keys(_dryad_S7#7, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list_next)))), ==(old(_dryad_S6#6, sll_list_len_next(list_next)), old(_dryad_S7#7, sll_list_len_next(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_list_len_next(_dryad_S7#7, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, rsrtl_reach(list_next)))), ==(old(_dryad_S6#6, rsrtl(list_next)), old(_dryad_S7#7, rsrtl(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl(_dryad_S7#7, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, rsrtl_reach(list_next)))), ==(old(_dryad_S6#6, rsrtl_reach(list_next)), old(_dryad_S7#7, rsrtl_reach(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl_reach(_dryad_S7#7, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list_next)))), ==(old(_dryad_S6#6, sll(list_next)), old(_dryad_S7#7, sll(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll(_dryad_S7#7, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list_next)))), ==(old(_dryad_S6#6, sll_reach(list_next)), old(_dryad_S7#7, sll_reach(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_reach(_dryad_S7#7, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list_next)))), ==(old(_dryad_S6#6, sll_max_key(list_next)), old(_dryad_S7#7, sll_max_key(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_max_key(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_max_key(_dryad_S7#7, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list_next)))), ==(old(_dryad_S6#6, sll_min_key(list_next)), old(_dryad_S7#7, sll_min_key(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_min_key(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_min_key(_dryad_S7#7, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, srtl_reach(list_next)))), ==(old(_dryad_S6#6, srtl(list_next)), old(_dryad_S7#7, srtl(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl(_dryad_S7#7, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, srtl_reach(list_next)))), ==(old(_dryad_S6#6, srtl_reach(list_next)), old(_dryad_S7#7, srtl_reach(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl_reach(_dryad_S7#7, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(local.l2)))), ==(old(_dryad_S6#6, sll_keys(local.l2)), old(_dryad_S7#7, sll_keys(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_keys(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_keys(_dryad_S7#7, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(local.l2)))), ==(old(_dryad_S6#6, sll_list_len_next(local.l2)), old(_dryad_S7#7, sll_list_len_next(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_list_len_next(_dryad_S7#7, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, rsrtl_reach(local.l2)))), ==(old(_dryad_S6#6, rsrtl(local.l2)), old(_dryad_S7#7, rsrtl(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl(_dryad_S7#7, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, rsrtl_reach(local.l2)))), ==(old(_dryad_S6#6, rsrtl_reach(local.l2)), old(_dryad_S7#7, rsrtl_reach(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl_reach(_dryad_S7#7, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(local.l2)))), ==(old(_dryad_S6#6, sll(local.l2)), old(_dryad_S7#7, sll(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node)) == F#sll(_dryad_S7#7, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(local.l2)))), ==(old(_dryad_S6#6, sll_reach(local.l2)), old(_dryad_S7#7, sll_reach(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_reach(_dryad_S7#7, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(local.l2)))), ==(old(_dryad_S6#6, sll_max_key(local.l2)), old(_dryad_S7#7, sll_max_key(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_max_key(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_max_key(_dryad_S7#7, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(local.l2)))), ==(old(_dryad_S6#6, sll_min_key(local.l2)), old(_dryad_S7#7, sll_min_key(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_min_key(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_min_key(_dryad_S7#7, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, srtl_reach(local.l2)))), ==(old(_dryad_S6#6, srtl(local.l2)), old(_dryad_S7#7, srtl(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl(_dryad_S7#7, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, srtl_reach(local.l2)))), ==(old(_dryad_S6#6, srtl_reach(local.l2)), old(_dryad_S7#7, srtl_reach(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl_reach(_dryad_S7#7, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(local.l1)))), ==(old(_dryad_S6#6, sll_keys(local.l1)), old(_dryad_S7#7, sll_keys(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_keys(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_keys(_dryad_S7#7, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(local.l1)))), ==(old(_dryad_S6#6, sll_list_len_next(local.l1)), old(_dryad_S7#7, sll_list_len_next(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_list_len_next(_dryad_S7#7, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, rsrtl_reach(local.l1)))), ==(old(_dryad_S6#6, rsrtl(local.l1)), old(_dryad_S7#7, rsrtl(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl(_dryad_S7#7, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, rsrtl_reach(local.l1)))), ==(old(_dryad_S6#6, rsrtl_reach(local.l1)), old(_dryad_S7#7, rsrtl_reach(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl_reach(_dryad_S7#7, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(local.l1)))), ==(old(_dryad_S6#6, sll(local.l1)), old(_dryad_S7#7, sll(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node)) == F#sll(_dryad_S7#7, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(local.l1)))), ==(old(_dryad_S6#6, sll_reach(local.l1)), old(_dryad_S7#7, sll_reach(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_reach(_dryad_S7#7, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(local.l1)))), ==(old(_dryad_S6#6, sll_max_key(local.l1)), old(_dryad_S7#7, sll_max_key(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_max_key(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_max_key(_dryad_S7#7, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(local.l1)))), ==(old(_dryad_S6#6, sll_min_key(local.l1)), old(_dryad_S7#7, sll_min_key(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_min_key(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_min_key(_dryad_S7#7, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, srtl_reach(local.l1)))), ==(old(_dryad_S6#6, srtl(local.l1)), old(_dryad_S7#7, srtl(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl(_dryad_S7#7, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, srtl_reach(local.l1)))), ==(old(_dryad_S6#6, srtl_reach(local.l1)), old(_dryad_S7#7, srtl_reach(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl_reach(_dryad_S7#7, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#6, sll_lseg(list, l)), old(_dryad_S7#7, sll_lseg(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#6, sll_lseg_reach(list, l)), old(_dryad_S7#7, sll_lseg_reach(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_reach(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#6, sll_lseg_keys(list, l)), old(_dryad_S7#7, sll_lseg_keys(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_keys(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_keys(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#6, sll_lseg_len_next(list, l)), old(_dryad_S7#7, sll_lseg_len_next(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_len_next(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#6, sll_lseg_max_key(list, l)), old(_dryad_S7#7, sll_lseg_max_key(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_max_key(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_max_key(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#6, sll_lseg_min_key(list, l)), old(_dryad_S7#7, sll_lseg_min_key(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_min_key(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_min_key(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, srtl_lseg_reach(list, l)))), ==(old(_dryad_S6#6, srtl_lseg(list, l)), old(_dryad_S7#7, srtl_lseg(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_lseg(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#srtl_lseg(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, srtl_lseg_reach(list, l)))), ==(old(_dryad_S6#6, srtl_lseg_reach(list, l)), old(_dryad_S7#7, srtl_lseg_reach(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_lseg_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#srtl_lseg_reach(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(l, list2)), ==(*((list2->key)), old(_dryad_S6#6, *((list2->key))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(SL#list2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) == $rd_inv(_dryad_S6#6, s_node.key, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(l, list2)), @_vcc_ptr_eq_pure(*((list2->next)), old(_dryad_S6#6, *((list2->next))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(SL#list2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#6, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(l, list)), ==(*((list->key)), old(_dryad_S6#6, *((list->key))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) == $rd_inv(_dryad_S6#6, s_node.key, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(l, list)), @_vcc_ptr_eq_pure(*((list->next)), old(_dryad_S6#6, *((list->next))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#6, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(l, list_next)), ==(*((list_next->key)), old(_dryad_S6#6, *((list_next->key))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) == $rd_inv(_dryad_S6#6, s_node.key, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(l, list_next)), @_vcc_ptr_eq_pure(*((list_next->next)), old(_dryad_S6#6, *((list_next->next))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#6, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l2)), ==(*((local.l2->key)), old(_dryad_S6#6, *((local.l2->key))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) == $rd_inv(_dryad_S6#6, s_node.key, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l2)), @_vcc_ptr_eq_pure(*((local.l2->next)), old(_dryad_S6#6, *((local.l2->next))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#6, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l1)), ==(*((local.l1->key)), old(_dryad_S6#6, *((local.l1->key))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) == $rd_inv(_dryad_S6#6, s_node.key, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l1)), @_vcc_ptr_eq_pure(*((local.l1->next)), old(_dryad_S6#6, *((local.l1->next))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#6, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node);
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_keys(list2), @_vcc_intset_union(sll_keys(*((list2->next))), @_vcc_intset_singleton(*((list2->key)))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#list2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_list_len_next(list2), unchecked+(sll_list_len_next(*((list2->next))), 1))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#list2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(rsrtl(list2), &&(&&(rsrtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, rsrtl_reach(*((list2->next)))))), >=(*((list2->key)), sll_max_key(*((list2->next))))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(rsrtl_reach(list2), @_vcc_oset_union(rsrtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll(list2), &&(sll(*((list2->next))), unchecked!(@_vcc_oset_in(list2, sll_reach(*((list2->next)))))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_reach(list2), @_vcc_oset_union(sll_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_max_key(list2), @\int_max(*((list2->key)), sll_max_key(*((list2->next)))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_min_key(list2), @\int_min(*((list2->key)), sll_min_key(*((list2->next)))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(srtl(list2), &&(&&(srtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, srtl_reach(*((list2->next)))))), <=(*((list2->key)), sll_min_key(*((list2->next))))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(srtl_reach(list2), @_vcc_oset_union(srtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    }

  anon11:
    // return list_next; 
    $result := $phys_ptr_cast(L#list_next, ^s_node);
    assume true;
    assert $position_marker();
    goto #exit;

  anon12:
    // skip

  #exit:
}



axiom (forall Q#__vcc_state$2^687.9#tc2#1700: $state, Q#x$2^687.9#dt1#1624: $ptr :: {:weight 10} { F#srtl(Q#__vcc_state$2^687.9#tc2#1700, $phys_ptr_cast(Q#x$2^687.9#dt1#1624, ^s_node)) } { F#sll(Q#__vcc_state$2^687.9#tc2#1700, $phys_ptr_cast(Q#x$2^687.9#dt1#1624, ^s_node)) } $good_state(Q#__vcc_state$2^687.9#tc2#1700) && true ==> F#srtl(Q#__vcc_state$2^687.9#tc2#1700, $phys_ptr_cast(Q#x$2^687.9#dt1#1624, ^s_node)) ==> F#sll(Q#__vcc_state$2^687.9#tc2#1700, $phys_ptr_cast(Q#x$2^687.9#dt1#1624, ^s_node)));

axiom (forall Q#__vcc_state$2^688.9#tc2#1701: $state, Q#x$2^688.9#dt1#1625: $ptr :: {:weight 10} { F#rsrtl(Q#__vcc_state$2^688.9#tc2#1701, $phys_ptr_cast(Q#x$2^688.9#dt1#1625, ^s_node)) } { F#sll(Q#__vcc_state$2^688.9#tc2#1701, $phys_ptr_cast(Q#x$2^688.9#dt1#1625, ^s_node)) } $good_state(Q#__vcc_state$2^688.9#tc2#1701) && true ==> F#rsrtl(Q#__vcc_state$2^688.9#tc2#1701, $phys_ptr_cast(Q#x$2^688.9#dt1#1625, ^s_node)) ==> F#sll(Q#__vcc_state$2^688.9#tc2#1701, $phys_ptr_cast(Q#x$2^688.9#dt1#1625, ^s_node)));

axiom (forall Q#__vcc_state$2^689.9#tc2#1702: $state, Q#x$2^689.9#dt1#1626: $ptr :: {:weight 10} { F#sll_reach(Q#__vcc_state$2^689.9#tc2#1702, $phys_ptr_cast(Q#x$2^689.9#dt1#1626, ^s_node)) } { F#srtl_reach(Q#__vcc_state$2^689.9#tc2#1702, $phys_ptr_cast(Q#x$2^689.9#dt1#1626, ^s_node)) } $good_state(Q#__vcc_state$2^689.9#tc2#1702) && true ==> F#sll_reach(Q#__vcc_state$2^689.9#tc2#1702, $phys_ptr_cast(Q#x$2^689.9#dt1#1626, ^s_node)) == F#srtl_reach(Q#__vcc_state$2^689.9#tc2#1702, $phys_ptr_cast(Q#x$2^689.9#dt1#1626, ^s_node)));

axiom (forall Q#__vcc_state$2^690.9#tc2#1703: $state, Q#x$2^690.9#dt1#1627: $ptr :: {:weight 10} { F#srtl_reach(Q#__vcc_state$2^690.9#tc2#1703, $phys_ptr_cast(Q#x$2^690.9#dt1#1627, ^s_node)) } { F#rsrtl_reach(Q#__vcc_state$2^690.9#tc2#1703, $phys_ptr_cast(Q#x$2^690.9#dt1#1627, ^s_node)) } $good_state(Q#__vcc_state$2^690.9#tc2#1703) && true ==> F#srtl_reach(Q#__vcc_state$2^690.9#tc2#1703, $phys_ptr_cast(Q#x$2^690.9#dt1#1627, ^s_node)) == F#rsrtl_reach(Q#__vcc_state$2^690.9#tc2#1703, $phys_ptr_cast(Q#x$2^690.9#dt1#1627, ^s_node)));

axiom (forall Q#__vcc_state$2^691.9#tc2#1704: $state, Q#x$2^691.9#dt1#1628: $ptr, Q#y$2^691.9#dt1#1629: $ptr :: {:weight 10} { F#sll_lseg_reach(Q#__vcc_state$2^691.9#tc2#1704, $phys_ptr_cast(Q#x$2^691.9#dt1#1628, ^s_node), $phys_ptr_cast(Q#y$2^691.9#dt1#1629, ^s_node)) } { F#srtl_lseg_reach(Q#__vcc_state$2^691.9#tc2#1704, $phys_ptr_cast(Q#x$2^691.9#dt1#1628, ^s_node), $phys_ptr_cast(Q#y$2^691.9#dt1#1629, ^s_node)) } $good_state(Q#__vcc_state$2^691.9#tc2#1704) && true ==> F#sll_lseg_reach(Q#__vcc_state$2^691.9#tc2#1704, $phys_ptr_cast(Q#x$2^691.9#dt1#1628, ^s_node), $phys_ptr_cast(Q#y$2^691.9#dt1#1629, ^s_node)) == F#srtl_lseg_reach(Q#__vcc_state$2^691.9#tc2#1704, $phys_ptr_cast(Q#x$2^691.9#dt1#1628, ^s_node), $phys_ptr_cast(Q#y$2^691.9#dt1#1629, ^s_node)));

const unique l#public: $label;

axiom $type_code_is(2, ^$#state_t);

const unique #tok$3^85.3: $token;

const unique #tok$3^83.3: $token;

const unique #tok$3^80.3: $token;

const unique #tok$3^74.4: $token;

const unique #tok$3^70.4: $token;

const unique #tok$3^33.2: $token;

const unique #tok$3^27.2: $token;

const unique #tok$3^26.2: $token;

const unique #tok$3^18.9: $token;

const unique #tok$3^13.56: $token;

const unique #tok$3^13.41: $token;

const unique #tok$3^12.62: $token;

const unique #tok$3^12.48: $token;

const unique #tok$3^11.23: $token;

const unique #tok$3^10.23: $token;

const unique #tok$4^0.0: $token;

const unique #file^?3Cno?20file?3E: $token;

axiom $file_name_is(4, #file^?3Cno?20file?3E);

const unique #tok$3^3.3: $token;

const unique #file^Z?3A?5CInvariantSynthesis?5CVCDryad?5Cvcc?5CHost?5Cbin?5CTests?5Cgslist?5Cg_slist_sort_merge.c: $token;

axiom $file_name_is(3, #file^Z?3A?5CInvariantSynthesis?5CVCDryad?5Cvcc?5CHost?5Cbin?5CTests?5Cgslist?5Cg_slist_sort_merge.c);

const unique #file^z?3A?5Cinvariantsynthesis?5Cvcdryad?5Cvcc?5Chost?5Cbin?5Ctests?5Cgslist?5Cdryad_gslist.h: $token;

axiom $file_name_is(2, #file^z?3A?5Cinvariantsynthesis?5Cvcdryad?5Cvcc?5Chost?5Cbin?5Ctests?5Cgslist?5Cdryad_gslist.h);

const unique #file^Z?3A?5CInvariantSynthesis?5CVCDryad?2Dbin?5CHeaders?5Cvccp.h: $token;

axiom $file_name_is(1, #file^Z?3A?5CInvariantSynthesis?5CVCDryad?2Dbin?5CHeaders?5Cvccp.h);

const unique #distTp1: $ctype;

axiom #distTp1 == $ptr_to(^s_node);

