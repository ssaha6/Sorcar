type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "values"} {:global} $$values : [bv32]bv32;
axiom {:array_info "$$values"} {:global} {:elem_width 32} {:source_name "values"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$values : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$values : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$values : bool;

var {:source_name "shared"} {:group_shared} $$shared : [bv32]bv32;
axiom {:array_info "$$shared"} {:group_shared} {:elem_width 32} {:source_name "shared"} {:source_elem_width 32} {:source_dimensions "32"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$shared : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$shared : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$shared : bool;

const _WATCHED_OFFSET : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function {:bvbuiltin "bvand"} BV32_AND(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvsgt"} BV32_SGT(bv32, bv32) : bool;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvugt"} BV32_UGT(bv32, bv32) : bool;
function {:bvbuiltin "bvule"} BV32_ULE(bv32, bv32) : bool;
function {:bvbuiltin "bvxor"} BV32_XOR(bv32, bv32) : bv32;
procedure {:source_name "BitonicKernel"} {:kernel} $_Z13BitonicKernelPi()
{
  var $k.0:bv32;
  var $j.0:bv32;
  var v3:bv32;
  var v1:bool;
  var v2:bool;
  var v4:bool;
  var v0:bv32;
  var v5:bool;
  var v8:bool;
  var v14:bool;
  var v11:bv32;
  var v17:bv32;
  var v9:bv32;
  var v6:bv32;
  var v7:bv32;
  var v15:bv32;
  var v10:bv32;
  var v12:bv32;
  var v13:bv32;
  var v16:bv32;
  var v18:bv32;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  assert {:sourceloc} {:sourceloc_num 1} true;
  v0 := $$values[local_id_x];
  assert {:sourceloc} {:sourceloc_num 2} true;
  $$shared[local_id_x] := v0;
  call {:sourceloc_num 3} $bugle_barrier(1bv1, 1bv1);
  $k.0 := 2bv32;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  v1 := BV32_ULE($k.0, 32bv32);
  goto $truebb, $falsebb;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  $j.0 := BV32_UDIV($k.0, 2bv32);
  goto $for.cond.2;
$for.cond.2:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  v2 := BV32_UGT($j.0, 0bv32);
  goto $truebb0, $falsebb0;
$for.body.4:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  v3 := BV32_XOR(local_id_x, $j.0);
  v4 := BV32_UGT(v3, local_id_x);
  goto $truebb1, $falsebb1;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  v5 := BV32_AND(local_id_x, $k.0) == 0bv32;
  goto $truebb2, $falsebb2;
$if.then.7:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  assert {:sourceloc} {:sourceloc_num 10} true;
  v6 := $$shared[local_id_x];
  assert {:sourceloc} {:sourceloc_num 11} true;
  v7 := $$shared[v3];
  v8 := BV32_SGT(v6, v7);
  goto $truebb3, $falsebb3;
$if.then.11:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  assert {:sourceloc} {:sourceloc_num 13} true;
  v9 := $$shared[local_id_x];
  assert {:sourceloc} {:sourceloc_num 14} true;
  v10 := $$shared[v3];
  assert {:sourceloc} {:sourceloc_num 15} true;
  $$shared[local_id_x] := v10;
  assert {:sourceloc} {:sourceloc_num 16} true;
  v11 := $$shared[local_id_x];
  assert {:sourceloc} {:sourceloc_num 17} true;
  $$shared[v3] := v11;
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  goto $if.end.29;
$if.else:
  assert {:block_sourceloc} {:sourceloc_num 19} true;
  assert {:sourceloc} {:sourceloc_num 20} true;
  v12 := $$shared[local_id_x];
  assert {:sourceloc} {:sourceloc_num 21} true;
  v13 := $$shared[v3];
  v14 := BV32_SLT(v12, v13);
  goto $truebb4, $falsebb4;
$if.then.20:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  assert {:sourceloc} {:sourceloc_num 23} true;
  v15 := $$shared[local_id_x];
  assert {:sourceloc} {:sourceloc_num 24} true;
  v16 := $$shared[v3];
  assert {:sourceloc} {:sourceloc_num 25} true;
  $$shared[local_id_x] := v16;
  assert {:sourceloc} {:sourceloc_num 26} true;
  v17 := $$shared[local_id_x];
  assert {:sourceloc} {:sourceloc_num 27} true;
  $$shared[v3] := v17;
  goto $if.end.28;
$if.end.28:
  assert {:block_sourceloc} true;
  goto $if.end.29;
$if.end.29:
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  goto $if.end.30;
$if.end.30:
  assert {:block_sourceloc} {:sourceloc_num 29} true;
  call {:sourceloc_num 30} $bugle_barrier(1bv1, 1bv1);
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  $j.0 := BV32_UDIV($j.0, 2bv32);
  goto $for.cond.2;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  goto $for.inc.32;
$for.inc.32:
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  $k.0 := BV32_MUL($k.0, 2bv32);
  goto $for.cond;
$for.end.33:
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  assert {:sourceloc} {:sourceloc_num 35} true;
  v18 := $$shared[local_id_x];
  assert {:sourceloc} {:sourceloc_num 36} true;
  $$values[local_id_x] := v18;
  return;
$truebb:
  assume {:partition} v1;
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  goto $for.body;
$falsebb:
  assume {:partition} !v1;
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  goto $for.end.33;
$truebb0:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  goto $for.body.4;
$falsebb0:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 40} true;
  goto $for.end;
$truebb1:
  assume {:partition} v4;
  assert {:block_sourceloc} {:sourceloc_num 41} true;
  goto $if.then;
$falsebb1:
  assume {:partition} !v4;
  assert {:block_sourceloc} {:sourceloc_num 42} true;
  goto $if.end.30;
$truebb2:
  assume {:partition} v5;
  assert {:block_sourceloc} {:sourceloc_num 43} true;
  goto $if.then.7;
$falsebb2:
  assume {:partition} !v5;
  assert {:block_sourceloc} {:sourceloc_num 44} true;
  goto $if.else;
$truebb3:
  assume {:partition} v8;
  assert {:block_sourceloc} {:sourceloc_num 45} true;
  goto $if.then.11;
$falsebb3:
  assume {:partition} !v8;
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  goto $if.end;
$truebb4:
  assume {:partition} v14;
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  goto $if.then.20;
$falsebb4:
  assume {:partition} !v14;
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  goto $if.end.28;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 32bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
