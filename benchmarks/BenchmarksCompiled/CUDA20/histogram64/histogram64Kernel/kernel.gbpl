type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
procedure _ATOMIC_OP8(x : [bv32]bv8, y : bv32) returns (z : bv8, A : [bv32]bv8);
var {:source_name "d_Result"} {:global} $$d_Result : [bv32]bv32;
axiom {:array_info "$$d_Result"} {:global} {:elem_width 32} {:source_name "d_Result"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_Result : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_Result : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_Result : bool;

var {:source_name "d_Data"} {:global} $$d_Data : [bv32]bv32;
axiom {:array_info "$$d_Data"} {:global} {:elem_width 32} {:source_name "d_Data"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_Data : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_Data : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_Data : bool;

var {:source_name "s_Hist"} {:group_shared} $$_ZZ17histogram64KernelPjS_iE6s_Hist : [bv32]bv8;
axiom {:array_info "$$_ZZ17histogram64KernelPjS_iE6s_Hist"} {:group_shared} {:elem_width 8} {:source_name "s_Hist"} {:source_elem_width 8} {:source_dimensions "8192"} true;
var {:race_checking} {:group_shared} {:elem_width 8} {:source_elem_width 8} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ17histogram64KernelPjS_iE6s_Hist : bool;
var {:race_checking} {:group_shared} {:elem_width 8} {:source_elem_width 8} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ17histogram64KernelPjS_iE6s_Hist : bool;
var {:race_checking} {:group_shared} {:elem_width 8} {:source_elem_width 8} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ17histogram64KernelPjS_iE6s_Hist : bool;

const _WATCHED_OFFSET : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvadd"} BV8_ADD(bv8, bv8) : bv8;
function {:bvbuiltin "bvand"} BV32_AND(bv32, bv32) : bv32;
function {:bvbuiltin "bvlshr"} BV32_LSHR(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvor"} BV32_OR(bv32, bv32) : bv32;
function {:bvbuiltin "bvshl"} BV32_SHL(bv32, bv32) : bv32;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "bvult"} BV32_ULT(bv32, bv32) : bool;
function {:bvbuiltin "zero_extend 24"} BV8_ZEXT32(bv8) : bv32;
procedure {:source_name "histogram64Kernel"} {:kernel} $_Z17histogram64KernelPjS_i($dataN:bv32)
{
  var $i.0:bv32;
  var $data4.0:bv32;
  var $pos.0:bv32;
  var $sum.0:bv32;
  var $j.0:bv32;
  var $accumPos.0:bv32;
  var $accumPos.1:bv32;
  var v1:bool;
  var v0:bv32;
  var v2:bv32;
  var v8:bv8;
  var v6:bv8;
  var v10:bv8;
  var v4:bv32;
  var v12:bv8;
  var v15:bv8;
  var v5:bv32;
  var v3:bool;
  var v7:bv32;
  var v14:bool;
  var v17:bool;
  var v16:bv32;
  var v13:bool;
  var v9:bv32;
  var v11:bv32;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  v0 := BV32_OR(BV32_OR(BV32_LSHR(BV32_AND(local_id_x, 4294967232bv32), 0bv32), BV32_SHL(BV32_AND(local_id_x, 15bv32), 2bv32)), BV32_LSHR(BV32_AND(local_id_x, 48bv32), 4bv32));
  $i.0 := 0bv32;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  v1 := BV32_SLT($i.0, 16bv32);
  goto $truebb, $falsebb;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  assert {:sourceloc} {:sourceloc_num 3} true;
  $$_ZZ17histogram64KernelPjS_iE6s_Hist[BV32_ADD(local_id_x, BV32_MUL($i.0, 128bv32))] := 0bv8;
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  $i.0 := BV32_ADD($i.0, 1bv32);
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  call {:sourceloc_num 6} $bugle_barrier(1bv1, 1bv1);
  havoc v2;
  $data4.0, $pos.0 := v2, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  goto $for.cond.7;
$for.cond.7:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 8} (if (1bv1 == 1bv1 ==> (_READ_HAS_OCCURRED_$$_ZZ17histogram64KernelPjS_iE6s_Hist ==> BV32_AND(127bv32, BV32_SUB(_WATCHED_OFFSET, BV32_MUL(BV32_AND(BV32_LSHR($data4.0, 26bv32), 63bv32), 128bv32))) == v0)) then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 9} (if (1bv1 == 1bv1 ==> (_WRITE_HAS_OCCURRED_$$_ZZ17histogram64KernelPjS_iE6s_Hist ==> BV32_AND(127bv32, BV32_SUB(_WATCHED_OFFSET, BV32_MUL(BV32_AND(BV32_LSHR($data4.0, 26bv32), 63bv32), 128bv32))) == v0)) then 1bv1 else 0bv1) != 0bv1;
  v3 := BV32_SLT($pos.0, $dataN);
  goto $truebb0, $falsebb0;
$for.body.27:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  assert {:sourceloc} {:sourceloc_num 11} true;
  v4 := $$d_Data[$pos.0];
  v5 := BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v4, 2bv32), 63bv32), 128bv32));
  assert {:sourceloc} {:sourceloc_num 12} true;
  v6 := $$_ZZ17histogram64KernelPjS_iE6s_Hist[v5];
  assert {:sourceloc} {:sourceloc_num 13} true;
  $$_ZZ17histogram64KernelPjS_iE6s_Hist[v5] := BV8_ADD(v6, 1bv8);
  v7 := BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v4, 10bv32), 63bv32), 128bv32));
  assert {:sourceloc} {:sourceloc_num 14} true;
  v8 := $$_ZZ17histogram64KernelPjS_iE6s_Hist[v7];
  assert {:sourceloc} {:sourceloc_num 15} true;
  $$_ZZ17histogram64KernelPjS_iE6s_Hist[v7] := BV8_ADD(v8, 1bv8);
  v9 := BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v4, 18bv32), 63bv32), 128bv32));
  assert {:sourceloc} {:sourceloc_num 16} true;
  v10 := $$_ZZ17histogram64KernelPjS_iE6s_Hist[v9];
  assert {:sourceloc} {:sourceloc_num 17} true;
  $$_ZZ17histogram64KernelPjS_iE6s_Hist[v9] := BV8_ADD(v10, 1bv8);
  v11 := BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v4, 26bv32), 63bv32), 128bv32));
  assert {:sourceloc} {:sourceloc_num 18} true;
  v12 := $$_ZZ17histogram64KernelPjS_iE6s_Hist[v11];
  assert {:sourceloc} {:sourceloc_num 19} true;
  $$_ZZ17histogram64KernelPjS_iE6s_Hist[v11] := BV8_ADD(v12, 1bv8);
  goto $for.inc.37;
$for.inc.37:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  $data4.0, $pos.0 := v4, BV32_ADD($pos.0, BV32_MUL(group_size_x, num_groups_x));
  goto $for.cond.7;
$for.end.40:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  call {:sourceloc_num 22} $bugle_barrier(1bv1, 1bv1);
  v13 := BV32_ULT(local_id_x, 64bv32);
  goto $truebb1, $falsebb1;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  $sum.0, $j.0, $accumPos.0 := 0bv32, 0bv32, BV32_MUL(BV32_AND(local_id_x, 15bv32), 4bv32);
  goto $for.cond.45;
$for.cond.45:
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  v14 := BV32_SLT($j.0, 128bv32);
  goto $truebb2, $falsebb2;
$for.body.47:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  assert {:sourceloc} {:sourceloc_num 26} true;
  v15 := $$_ZZ17histogram64KernelPjS_iE6s_Hist[BV32_ADD(BV32_MUL(local_id_x, 128bv32), $accumPos.0)];
  v16 := BV32_ADD($accumPos.0, 1bv32);
  v17 := v16 == 128bv32;
  goto $truebb3, $falsebb3;
$if.then.53:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  $accumPos.1 := 0bv32;
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  goto $for.inc.54;
$for.inc.54:
  assert {:block_sourceloc} {:sourceloc_num 29} true;
  $sum.0, $j.0, $accumPos.0 := BV32_ADD($sum.0, BV8_ZEXT32(v15)), BV32_ADD($j.0, 1bv32), $accumPos.1;
  goto $for.cond.45;
$for.end.56:
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  assert {:sourceloc} {:sourceloc_num 31} true;
  $$d_Result[BV32_ADD(BV32_MUL(group_id_x, 64bv32), local_id_x)] := $sum.0;
  goto $if.end.60;
$if.end.60:
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  return;
$truebb:
  assume {:partition} v1;
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  goto $for.body;
$falsebb:
  assume {:partition} !v1;
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  goto $for.end;
$truebb0:
  assume {:partition} v3;
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  goto $for.body.27;
$falsebb0:
  assume {:partition} !v3;
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  goto $for.end.40;
$truebb1:
  assume {:partition} v13;
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  goto $if.then;
$falsebb1:
  assume {:partition} !v13;
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  goto $if.end.60;
$truebb2:
  assume {:partition} v14;
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  goto $for.body.47;
$falsebb2:
  assume {:partition} !v14;
  assert {:block_sourceloc} {:sourceloc_num 40} true;
  goto $for.end.56;
$truebb3:
  assume {:partition} v17;
  assert {:block_sourceloc} {:sourceloc_num 41} true;
  goto $if.then.53;
$falsebb3:
  assume {:partition} !v17;
  assert {:block_sourceloc} {:sourceloc_num 42} true;
  $accumPos.1 := v16;
  goto $if.end;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 128bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 64bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
