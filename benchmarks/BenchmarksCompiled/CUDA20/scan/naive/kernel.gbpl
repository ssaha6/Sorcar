type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "g_odata"} {:global} $$g_odata : [bv32]bv32;
axiom {:array_info "$$g_odata"} {:global} {:elem_width 32} {:source_name "g_odata"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$g_odata : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$g_odata : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$g_odata : bool;

var {:source_name "g_idata"} {:global} $$g_idata : [bv32]bv32;
axiom {:array_info "$$g_idata"} {:global} {:elem_width 32} {:source_name "g_idata"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$g_idata : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$g_idata : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$g_idata : bool;

var {:source_name "temp"} {:group_shared} $$_ZZ6kernelPfS_iE4temp : [bv32]bv32;
axiom {:array_info "$$_ZZ6kernelPfS_iE4temp"} {:group_shared} {:elem_width 32} {:source_name "temp"} {:source_elem_width 32} {:source_dimensions "64"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ6kernelPfS_iE4temp : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ6kernelPfS_iE4temp : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ6kernelPfS_iE4temp : bool;

const _WATCHED_OFFSET : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FADD32(bv32, bv32) : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvsge"} BV32_SGE(bv32, bv32) : bool;
function {:bvbuiltin "bvsgt"} BV32_SGT(bv32, bv32) : bool;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
procedure {:source_name "kernel"} {:kernel} $_Z6kernelPfS_i($n:bv32)
requires {:sourceloc_num 0} (if $n == group_size_x then 1bv1 else 0bv1) != 0bv1;
{
  var $cond:bv32;
  var $pout.0:bv32;
  var $offset.0:bv32;
  var v0:bool;
  var v1:bv32;
  var v5:bv32;
  var v9:bv32;
  var v7:bv32;
  var v2:bool;
  var v3:bv32;
  var v4:bv32;
  var v6:bool;
  var v8:bv32;
  var v10:bv32;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  v0 := BV32_SGT(local_id_x, 0bv32);
  goto $truebb, $falsebb;
$cond.true:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  assert {:sourceloc} {:sourceloc_num 3} true;
  v1 := $$g_idata[BV32_SUB(local_id_x, 1bv32)];
  $cond := v1;
  goto $cond.end;
$cond.false:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  $cond := 0bv32;
  goto $cond.end;
$cond.end:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  assert {:sourceloc} {:sourceloc_num 6} true;
  $$_ZZ6kernelPfS_iE4temp[BV32_ADD(BV32_MUL(0bv32, $n), local_id_x)] := $cond;
  $pout.0, $offset.0 := 0bv32, 1bv32;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  v2 := BV32_SLT($offset.0, $n);
  goto $truebb0, $falsebb0;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  v3 := BV32_SUB(1bv32, $pout.0);
  v4 := BV32_SUB(1bv32, v3);
  call {:sourceloc_num 9} $bugle_barrier(1bv1, 1bv1);
  assert {:sourceloc} {:sourceloc_num 10} true;
  v5 := $$_ZZ6kernelPfS_iE4temp[BV32_ADD(BV32_MUL(v4, $n), local_id_x)];
  assert {:sourceloc} {:sourceloc_num 11} true;
  $$_ZZ6kernelPfS_iE4temp[BV32_ADD(BV32_MUL(v3, $n), local_id_x)] := v5;
  v6 := BV32_SGE(local_id_x, $offset.0);
  goto $truebb1, $falsebb1;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  assert {:sourceloc} {:sourceloc_num 13} true;
  v7 := $$_ZZ6kernelPfS_iE4temp[BV32_SUB(BV32_ADD(BV32_MUL(v4, $n), local_id_x), $offset.0)];
  v8 := BV32_ADD(BV32_MUL(v3, $n), local_id_x);
  assert {:sourceloc} {:sourceloc_num 14} true;
  v9 := $$_ZZ6kernelPfS_iE4temp[v8];
  assert {:sourceloc} {:sourceloc_num 15} true;
  $$_ZZ6kernelPfS_iE4temp[v8] := FADD32(v9, v7);
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  $pout.0, $offset.0 := v3, BV32_MUL($offset.0, 2bv32);
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  call {:sourceloc_num 19} $bugle_barrier(1bv1, 1bv1);
  assert {:sourceloc} {:sourceloc_num 20} true;
  v10 := $$_ZZ6kernelPfS_iE4temp[BV32_ADD(BV32_MUL($pout.0, $n), local_id_x)];
  assert {:sourceloc} {:sourceloc_num 21} true;
  $$g_odata[local_id_x] := v10;
  return;
$truebb:
  assume {:partition} v0;
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  goto $cond.true;
$falsebb:
  assume {:partition} !v0;
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  goto $cond.false;
$truebb0:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  goto $for.body;
$falsebb0:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  goto $for.end;
$truebb1:
  assume {:partition} v6;
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  goto $if.then;
$falsebb1:
  assume {:partition} !v6;
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  goto $if.end;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 32bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
