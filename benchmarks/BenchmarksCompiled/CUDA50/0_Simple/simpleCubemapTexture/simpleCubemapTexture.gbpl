type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
procedure _ATOMIC_OP8(x : [bv32]bv8, y : bv32) returns (z : bv8, A : [bv32]bv8);
var {:source_name "g_odata"} {:global} $$g_odata : [bv32]bv32;
axiom {:array_info "$$g_odata"} {:global} {:elem_width 32} {:source_name "g_odata"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$g_odata : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$g_odata : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$g_odata : bool;
const $arrayId$$g_odata : arrayId;
axiom $arrayId$$g_odata == 1bv3;

var {:source_name "agg.tmp"} $$agg.tmp : [bv32]bv8;
axiom {:array_info "$$agg.tmp"} {:elem_width 8} {:source_name "agg.tmp"} {:source_elem_width 96} {:source_dimensions "1"} true;
const $arrayId$$agg.tmp : arrayId;
axiom $arrayId$$agg.tmp == 2bv3;

var {:source_name "tex"} {:global} $$tex : [bv32]bv8;
axiom {:array_info "$$tex"} {:global} {:elem_width 8} {:source_name "tex"} {:source_elem_width 96} {:source_dimensions "1"} true;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 96} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$tex : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 96} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$tex : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 96} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$tex : bool;
const $arrayId$$tex : arrayId;
axiom $arrayId$$tex == 3bv3;

type ptr = bv32;
type arrayId = bv3;

function {:inline true} MKPTR(base: arrayId, offset: bv32) : ptr {
  base ++ offset[29:0]
}

function {:inline true} base#MKPTR(p: ptr) : arrayId {
  p[32:29]
}

function {:inline true} offset#MKPTR(p : ptr) : bv32 {
  0bv3++p[29:0]
}

const $arrayId$$null$ : arrayId;
axiom $arrayId$$null$ == 0bv3;

const _WATCHED_OFFSET : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_id_y} group_id_y : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:local_id_y} local_id_y : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FADD32(bv32, bv32) : bv32;
function FDIV32(bv32, bv32) : bv32;
function FMUL32(bv32, bv32) : bv32;
function FSUB32(bv32, bv32) : bv32;
function SI32_TO_FP32(bv32) : bv32;
function UI32_TO_FP32(bv32) : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvult"} BV32_ULT(bv32, bv32) : bool;
procedure {:source_name "transformKernel"} {:kernel} $_Z15transformKernelPfi($width:bv32)
requires {:sourceloc_num 0} (if $width == 64bv32 then 1bv1 else 0bv1) != 0bv1;
{
  var $cx.0:bv32;
  var $cy.0:bv32;
  var $cz.0:bv32;
  var $face.0:bv32;
  var $cx.6:bv32;
  var $cy.6:bv32;
  var $cz.6:bv32;
  var $cx.5:bv32;
  var $cy.5:bv32;
  var $cz.5:bv32;
  var $cx.4:bv32;
  var $cy.4:bv32;
  var $cz.4:bv32;
  var $cx.3:bv32;
  var $cy.3:bv32;
  var $cz.3:bv32;
  var $cx.2:bv32;
  var $cy.2:bv32;
  var $cz.2:bv32;
  var $cx.1:bv32;
  var $cy.1:bv32;
  var $cz.1:bv32;
  var v3:bv32;
  var v7:bool;
  var v0:bv32;
  var v2:bv32;
  var v1:bv32;
  var v8:bool;
  var v9:bool;
  var v6:bv32;
  var v5:bv32;
  var v4:bv32;
  var v11:bool;
  var v12:bool;
  var v10:bool;
  var v13:bool;
  var v25:bv8;
  var v26:bv32;
  var v15:bv8;
  var v14:bv8;
  var v17:bv8;
  var v16:bv8;
  var v19:bv8;
  var v24:bv8;
  var v18:bv8;
  var v21:bv8;
  var v20:bv8;
  var v23:bv8;
  var v22:bv8;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  v1 := BV32_ADD(BV32_MUL(group_id_y, group_size_y), local_id_y);
  v2 := FSUB32(FMUL32(FDIV32(FADD32(UI32_TO_FP32(v0), 1056964608bv32), SI32_TO_FP32($width)), 1073741824bv32), 1065353216bv32);
  v3 := FSUB32(FMUL32(FDIV32(FADD32(UI32_TO_FP32(v1), 1056964608bv32), SI32_TO_FP32($width)), 1073741824bv32), 1065353216bv32);
  havoc v4;
  havoc v5;
  havoc v6;
  $cx.0, $cy.0, $cz.0, $face.0 := v4, v5, v6, 0bv32;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v7 := BV32_ULT($face.0, 6bv32);
  goto $truebb, $falsebb;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  v8 := $face.0 == 0bv32;
  goto $truebb0, $falsebb0;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  $cx.6, $cy.6, $cz.6 := 1065353216bv32, FSUB32(2147483648bv32, v3), FSUB32(2147483648bv32, v2);
  goto $if.end.39;
$if.else:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  v9 := $face.0 == 1bv32;
  goto $truebb1, $falsebb1;
$if.then.17:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  $cx.5, $cy.5, $cz.5 := 3212836864bv32, FSUB32(2147483648bv32, v3), v2;
  goto $if.end.38;
$if.else.19:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  v10 := $face.0 == 2bv32;
  goto $truebb2, $falsebb2;
$if.then.21:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  $cx.4, $cy.4, $cz.4 := v2, 1065353216bv32, v3;
  goto $if.end.37;
$if.else.22:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  v11 := $face.0 == 3bv32;
  goto $truebb3, $falsebb3;
$if.then.24:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  $cx.3, $cy.3, $cz.3 := v2, 3212836864bv32, FSUB32(2147483648bv32, v3);
  goto $if.end.36;
$if.else.26:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  v12 := $face.0 == 4bv32;
  goto $truebb4, $falsebb4;
$if.then.28:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  $cx.2, $cy.2, $cz.2 := v2, FSUB32(2147483648bv32, v3), 1065353216bv32;
  goto $if.end.35;
$if.else.30:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  v13 := $face.0 == 5bv32;
  goto $truebb5, $falsebb5;
$if.then.32:
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  $cx.1, $cy.1, $cz.1 := FSUB32(2147483648bv32, v2), FSUB32(2147483648bv32, v3), 3212836864bv32;
  goto $if.end;
$if.end:
  assert {:block_sourceloc} true;
  $cx.2, $cy.2, $cz.2 := $cx.1, $cy.1, $cz.1;
  goto $if.end.35;
$if.end.35:
  assert {:block_sourceloc} true;
  $cx.3, $cy.3, $cz.3 := $cx.2, $cy.2, $cz.2;
  goto $if.end.36;
$if.end.36:
  assert {:block_sourceloc} true;
  $cx.4, $cy.4, $cz.4 := $cx.3, $cy.3, $cz.3;
  goto $if.end.37;
$if.end.37:
  assert {:block_sourceloc} true;
  $cx.5, $cy.5, $cz.5 := $cx.4, $cy.4, $cz.4;
  goto $if.end.38;
$if.end.38:
  assert {:block_sourceloc} true;
  $cx.6, $cy.6, $cz.6 := $cx.5, $cy.5, $cz.5;
  goto $if.end.39;
$if.end.39:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  assert {:sourceloc} {:sourceloc_num 16} true;
  v14 := $$tex[0bv32];
  assert {:sourceloc} {:sourceloc_num 17} true;
  $$agg.tmp[0bv32] := v14;
  assert {:sourceloc} {:sourceloc_num 18} true;
  v15 := $$tex[1bv32];
  assert {:sourceloc} {:sourceloc_num 19} true;
  $$agg.tmp[1bv32] := v15;
  assert {:sourceloc} {:sourceloc_num 20} true;
  v16 := $$tex[2bv32];
  assert {:sourceloc} {:sourceloc_num 21} true;
  $$agg.tmp[2bv32] := v16;
  assert {:sourceloc} {:sourceloc_num 22} true;
  v17 := $$tex[3bv32];
  assert {:sourceloc} {:sourceloc_num 23} true;
  $$agg.tmp[3bv32] := v17;
  assert {:sourceloc} {:sourceloc_num 24} true;
  v18 := $$tex[4bv32];
  assert {:sourceloc} {:sourceloc_num 25} true;
  $$agg.tmp[4bv32] := v18;
  assert {:sourceloc} {:sourceloc_num 26} true;
  v19 := $$tex[5bv32];
  assert {:sourceloc} {:sourceloc_num 27} true;
  $$agg.tmp[5bv32] := v19;
  assert {:sourceloc} {:sourceloc_num 28} true;
  v20 := $$tex[6bv32];
  assert {:sourceloc} {:sourceloc_num 29} true;
  $$agg.tmp[6bv32] := v20;
  assert {:sourceloc} {:sourceloc_num 30} true;
  v21 := $$tex[7bv32];
  assert {:sourceloc} {:sourceloc_num 31} true;
  $$agg.tmp[7bv32] := v21;
  assert {:sourceloc} {:sourceloc_num 32} true;
  v22 := $$tex[8bv32];
  assert {:sourceloc} {:sourceloc_num 33} true;
  $$agg.tmp[8bv32] := v22;
  assert {:sourceloc} {:sourceloc_num 34} true;
  v23 := $$tex[9bv32];
  assert {:sourceloc} {:sourceloc_num 35} true;
  $$agg.tmp[9bv32] := v23;
  assert {:sourceloc} {:sourceloc_num 36} true;
  v24 := $$tex[10bv32];
  assert {:sourceloc} {:sourceloc_num 37} true;
  $$agg.tmp[10bv32] := v24;
  assert {:sourceloc} {:sourceloc_num 38} true;
  v25 := $$tex[11bv32];
  assert {:sourceloc} {:sourceloc_num 39} true;
  $$agg.tmp[11bv32] := v25;
  call {:sourceloc_num 40}   v26 := $_Z10texCubemapIfET_7textureIS0_Li12EL19cudaTextureReadMode0EEfff(MKPTR($arrayId$$agg.tmp, 0bv32), $cx.6, $cy.6, $cz.6);
  assert {:sourceloc} {:sourceloc_num 41} true;
  $$g_odata[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL($face.0, $width), $width), BV32_MUL(v1, $width)), v0)] := FSUB32(2147483648bv32, v26);
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 42} true;
  $cx.0, $cy.0, $cz.0, $face.0 := $cx.6, $cy.6, $cz.6, BV32_ADD($face.0, 1bv32);
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 43} true;
  return;
$truebb:
  assume {:partition} v7;
  assert {:block_sourceloc} {:sourceloc_num 44} true;
  goto $for.body;
$falsebb:
  assume {:partition} !v7;
  assert {:block_sourceloc} {:sourceloc_num 45} true;
  goto $for.end;
$truebb0:
  assume {:partition} v8;
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  goto $if.then;
$falsebb0:
  assume {:partition} !v8;
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  goto $if.else;
$truebb1:
  assume {:partition} v9;
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  goto $if.then.17;
$falsebb1:
  assume {:partition} !v9;
  assert {:block_sourceloc} {:sourceloc_num 49} true;
  goto $if.else.19;
$truebb2:
  assume {:partition} v10;
  assert {:block_sourceloc} {:sourceloc_num 50} true;
  goto $if.then.21;
$falsebb2:
  assume {:partition} !v10;
  assert {:block_sourceloc} {:sourceloc_num 51} true;
  goto $if.else.22;
$truebb3:
  assume {:partition} v11;
  assert {:block_sourceloc} {:sourceloc_num 52} true;
  goto $if.then.24;
$falsebb3:
  assume {:partition} !v11;
  assert {:block_sourceloc} {:sourceloc_num 53} true;
  goto $if.else.26;
$truebb4:
  assume {:partition} v12;
  assert {:block_sourceloc} {:sourceloc_num 54} true;
  goto $if.then.28;
$falsebb4:
  assume {:partition} !v12;
  assert {:block_sourceloc} {:sourceloc_num 55} true;
  goto $if.else.30;
$truebb5:
  assume {:partition} v13;
  assert {:block_sourceloc} {:sourceloc_num 56} true;
  goto $if.then.32;
$falsebb5:
  assume {:partition} !v13;
  assert {:block_sourceloc} {:sourceloc_num 57} true;
  $cx.1, $cy.1, $cz.1 := $cx.0, $cy.0, $cz.0;
  goto $if.end;
}
procedure {:source_name "_Z10texCubemapIfET_7textureIS0_Li12EL19cudaTextureReadMode0EEfff"} $_Z10texCubemapIfET_7textureIS0_Li12EL19cudaTextureReadMode0EEfff($0:ptr, $1:bv32, $2:bv32, $3:bv32) returns ($ret:bv32);
axiom (if group_size_x == 8bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_y == 8bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 8bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 8bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
