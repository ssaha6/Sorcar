type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "results"} {:global} $$results : [bv32]bv32;
axiom {:array_info "$$results"} {:global} {:elem_width 32} {:source_name "results"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$results : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$results : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$results : bool;

var {:source_name "rngStates"} {:global} $$rngStates : [bv32]bv32;
axiom {:array_info "$$rngStates"} {:global} {:elem_width 32} {:source_name "rngStates"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$rngStates : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$rngStates : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$rngStates : bool;

var {:source_name "localState"} $$localState : [bv32]bv32;
axiom {:array_info "$$localState"} {:elem_width 32} {:source_name "localState"} {:source_elem_width 32} {:source_dimensions "1"} true;

var {:source_name "sdata"} {:group_shared} $$sdata : [bv32]bv32;
axiom {:array_info "$$sdata"} {:group_shared} {:elem_width 32} {:source_name "sdata"} {:source_elem_width 32} {:source_dimensions "0"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$sdata : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$sdata : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$sdata : bool;

const _WATCHED_OFFSET : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FADD32(bv32, bv32) : bv32;
function FLT32(bv32, bv32) : bool;
function FMUL32(bv32, bv32) : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvlshr"} BV32_LSHR(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvugt"} BV32_UGT(bv32, bv32) : bool;
function {:bvbuiltin "bvult"} BV32_ULT(bv32, bv32) : bool;
procedure {:source_name "computeValue<float>"} {:kernel} $_Z12computeValueIfEvPjP17curandStateXORWOWj($numSims:bv32)
{
  var $pointsInside.0:bv32;
  var $i.0:bv32;
  var $pointsInside.1:bv32;
  var $s.i.0:bv32;
  var v11:bool;
  var v7:bv32;
  var v4:bv32;
  var v6:bv32;
  var v5:bv32;
  var v9:bv32;
  var v10:bv32;
  var v8:bv32;
  var v3:bv32;
  var v1:bv32;
  var v0:bv32;
  var v2:bool;
  var v12:bool;
  var v13:bool;
  var v17:bool;
  var v14:bv32;
  var v15:bv32;
  var v16:bv32;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  assert {:sourceloc} {:sourceloc_num 1} true;
  v1 := $$rngStates[v0];
  assert {:sourceloc} {:sourceloc_num 2} true;
  $$localState[0bv32] := v1;
  $pointsInside.0, $i.0 := 0bv32, v0;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  v2 := BV32_ULT($i.0, $numSims);
  goto $truebb, $falsebb;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  call {:sourceloc_num 5}   v3 := $_Z19__bugle_random_uintv();
  assert {:sourceloc} {:sourceloc_num 6} true;
  v4 := $$localState[0bv32];
  assert {:sourceloc} {:sourceloc_num 7} true;
  $$localState[0bv32] := BV32_ADD(v4, v3);
  call {:sourceloc_num 8}   v5 := $_Z19__bugle_random_uintv();
  call {:sourceloc_num 9}   v6 := $_Z20__bugle_random_floatv();
  call {:sourceloc_num 10}   v7 := $_Z19__bugle_random_uintv();
  assert {:sourceloc} {:sourceloc_num 11} true;
  v8 := $$localState[0bv32];
  assert {:sourceloc} {:sourceloc_num 12} true;
  $$localState[0bv32] := BV32_ADD(v8, v7);
  call {:sourceloc_num 13}   v9 := $_Z19__bugle_random_uintv();
  call {:sourceloc_num 14}   v10 := $_Z20__bugle_random_floatv();
  v11 := FLT32(FADD32(FMUL32(v6, v6), FMUL32(v10, v10)), 1065353216bv32);
  goto $truebb0, $falsebb0;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  $pointsInside.1 := BV32_ADD($pointsInside.0, 1bv32);
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  $pointsInside.0, $i.0 := $pointsInside.1, BV32_ADD($i.0, BV32_MUL(num_groups_x, group_size_x));
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  assert {:sourceloc} {:sourceloc_num 19} true;
  $$sdata[local_id_x] := $pointsInside.0;
  call {:sourceloc_num 20} $bugle_barrier(1bv1, 1bv1);
  $s.i.0 := BV32_UDIV(group_size_x, 2bv32);
  goto $for.cond.i;
$for.cond.i:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  v12 := BV32_UGT($s.i.0, 0bv32);
  goto $truebb1, $falsebb1;
$for.body.i:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  v13 := BV32_ULT(local_id_x, $s.i.0);
  goto $truebb2, $falsebb2;
$if.then.i:
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  assert {:sourceloc} {:sourceloc_num 24} true;
  v14 := $$sdata[BV32_ADD(local_id_x, $s.i.0)];
  assert {:sourceloc} {:sourceloc_num 25} true;
  v15 := $$sdata[local_id_x];
  assert {:sourceloc} {:sourceloc_num 26} true;
  $$sdata[local_id_x] := BV32_ADD(v15, v14);
  goto $if.end.i;
$if.end.i:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  call {:sourceloc_num 28} $bugle_barrier(1bv1, 1bv1);
  $s.i.0 := BV32_LSHR($s.i.0, 1bv32);
  goto $for.cond.i;
$_ZL10reduce_sumj.exit:
  assert {:block_sourceloc} {:sourceloc_num 29} true;
  assert {:sourceloc} {:sourceloc_num 30} true;
  v16 := $$sdata[0bv32];
  v17 := local_id_x == 0bv32;
  goto $truebb3, $falsebb3;
$if.then.8:
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  assert {:sourceloc} {:sourceloc_num 32} true;
  $$results[group_id_x] := v16;
  goto $if.end.10;
$if.end.10:
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  return;
$truebb:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  goto $for.body;
$falsebb:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  goto $for.end;
$truebb0:
  assume {:partition} v11;
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  goto $if.then;
$falsebb0:
  assume {:partition} !v11;
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  $pointsInside.1 := $pointsInside.0;
  goto $if.end;
$truebb1:
  assume {:partition} v12;
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  goto $for.body.i;
$falsebb1:
  assume {:partition} !v12;
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  goto $_ZL10reduce_sumj.exit;
$truebb2:
  assume {:partition} v13;
  assert {:block_sourceloc} {:sourceloc_num 40} true;
  goto $if.then.i;
$falsebb2:
  assume {:partition} !v13;
  assert {:block_sourceloc} {:sourceloc_num 41} true;
  goto $if.end.i;
$truebb3:
  assume {:partition} v17;
  assert {:block_sourceloc} {:sourceloc_num 42} true;
  goto $if.then.8;
$falsebb3:
  assume {:partition} !v17;
  assert {:block_sourceloc} {:sourceloc_num 43} true;
  goto $if.end.10;
}
procedure {:source_name "_Z20__bugle_random_floatv"} $_Z20__bugle_random_floatv() returns ($ret:bv32);
procedure {:source_name "_Z19__bugle_random_uintv"} $_Z19__bugle_random_uintv() returns ($ret:bv32);
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 128bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 195bv32 then 1bv1 else 0bv1) != 0bv1;
