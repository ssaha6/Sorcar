type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
procedure _ATOMIC_OP8(x : [bv32]bv8, y : bv32) returns (z : bv8, A : [bv32]bv8);
var {:source_name "v"} {:global} $$v : [bv32]bv32;
axiom {:array_info "$$v"} {:global} {:elem_width 32} {:source_name "v"} {:source_elem_width 64} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 64} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$v : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 64} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$v : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 64} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$v : bool;
const $arrayId$$v : arrayId;
axiom $arrayId$$v == 1bv4;

var {:source_name "vx"} {:global} $$vx : [bv32]bv32;
axiom {:array_info "$$vx"} {:global} {:elem_width 32} {:source_name "vx"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$vx : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$vx : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$vx : bool;
const $arrayId$$vx : arrayId;
axiom $arrayId$$vx == 2bv4;

var {:source_name "vy"} {:global} $$vy : [bv32]bv32;
axiom {:array_info "$$vy"} {:global} {:elem_width 32} {:source_name "vy"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$vy : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$vy : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$vy : bool;
const $arrayId$$vy : arrayId;
axiom $arrayId$$vy == 3bv4;

var {:source_name "vterm"} $$vterm : [bv32]bv32;
axiom {:array_info "$$vterm"} {:elem_width 32} {:source_name "vterm"} {:source_elem_width 64} {:source_dimensions "1"} true;
const $arrayId$$vterm : arrayId;
axiom $arrayId$$vterm == 4bv4;

var {:source_name "ploc"} $$ploc : [bv32]bv32;
axiom {:array_info "$$ploc"} {:elem_width 32} {:source_name "ploc"} {:source_elem_width 64} {:source_dimensions "1"} true;
const $arrayId$$ploc : arrayId;
axiom $arrayId$$ploc == 5bv4;

var {:source_name "ref.tmp"} $$ref.tmp : [bv32]bv32;
axiom {:array_info "$$ref.tmp"} {:elem_width 32} {:source_name "ref.tmp"} {:source_elem_width 64} {:source_dimensions "1"} true;
const $arrayId$$ref.tmp : arrayId;
axiom $arrayId$$ref.tmp == 6bv4;

var {:source_name "agg.tmp"} $$agg.tmp : [bv32]bv8;
axiom {:array_info "$$agg.tmp"} {:elem_width 8} {:source_name "agg.tmp"} {:source_elem_width 128} {:source_dimensions "1"} true;
const $arrayId$$agg.tmp : arrayId;
axiom $arrayId$$agg.tmp == 7bv4;

var {:source_name "ref.tmp39"} $$ref.tmp39 : [bv32]bv32;
axiom {:array_info "$$ref.tmp39"} {:elem_width 32} {:source_name "ref.tmp39"} {:source_elem_width 64} {:source_dimensions "1"} true;
const $arrayId$$ref.tmp39 : arrayId;
axiom $arrayId$$ref.tmp39 == 8bv4;

var {:source_name "agg.tmp40"} $$agg.tmp40 : [bv32]bv8;
axiom {:array_info "$$agg.tmp40"} {:elem_width 8} {:source_name "agg.tmp40"} {:source_elem_width 128} {:source_dimensions "1"} true;
const $arrayId$$agg.tmp40 : arrayId;
axiom $arrayId$$agg.tmp40 == 9bv4;

var {:source_name "texref"} {:global} $$texref : [bv32]bv8;
axiom {:array_info "$$texref"} {:global} {:elem_width 8} {:source_name "texref"} {:source_elem_width 128} {:source_dimensions "1"} true;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$texref : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$texref : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$texref : bool;
const $arrayId$$texref : arrayId;
axiom $arrayId$$texref == 10bv4;

type ptr = bv32;
type arrayId = bv4;

function {:inline true} MKPTR(base: arrayId, offset: bv32) : ptr {
  base ++ offset[28:0]
}

function {:inline true} base#MKPTR(p: ptr) : arrayId {
  p[32:28]
}

function {:inline true} offset#MKPTR(p : ptr) : bv32 {
  0bv4++p[28:0]
}

const $arrayId$$null$ : arrayId;
axiom $arrayId$$null$ == 0bv4;

const _WATCHED_OFFSET : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_id_y} group_id_y : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:local_id_y} local_id_y : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FADD32(bv32, bv32) : bv32;
function FMUL32(bv32, bv32) : bv32;
function FSUB32(bv32, bv32) : bv32;
function SI32_TO_FP32(bv32) : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvurem"} BV32_UREM(bv32, bv32) : bv32;
procedure {:source_name "advectVelocity_k"} {:kernel} $_Z16advectVelocity_kP6float2PfS1_iiifi($dx:bv32, $pdx:bv32, $dy:bv32, $dt:bv32, $lb:bv32)
requires {:sourceloc_num 0} (if $dx == 512bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 1} (if $dy == 512bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 2} (if $lb == 16bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 3} (if $pdx == 514bv32 then 1bv1 else 0bv1) != 0bv1;
{
  var $p.0:bv32;
  var v10:bv8;
  var v8:bv8;
  var v9:bv8;
  var v7:bv8;
  var v6:bv8;
  var v2:bool;
  var v3:bv32;
  var v4:bool;
  var v0:bv32;
  var v1:bool;
  var v5:bv32;
  var v26:bv32;
  var v25:bv32;
  var v18:bv8;
  var v21:bv8;
  var v19:bv8;
  var v23:bv32;
  var v20:bv8;
  var v22:bv64;
  var v24:bv32;
  var v36:bv8;
  var v32:bv8;
  var v34:bv8;
  var v27:bv8;
  var v28:bv8;
  var v30:bv8;
  var v33:bv8;
  var v29:bv8;
  var v35:bv8;
  var v31:bv8;
  var v17:bv8;
  var v14:bv8;
  var v16:bv8;
  var v13:bv8;
  var v12:bv8;
  var v11:bv8;
  var v15:bv8;
  var v42:bv8;
  var v37:bv8;
  var v45:bv64;
  var v44:bv32;
  var v43:bv32;
  var v38:bv8;
  var v39:bv8;
  var v40:bv8;
  var v41:bv8;
  var v48:bv32;
  var v47:bv32;
  var v49:bv32;
  var v46:bv32;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  v1 := BV32_SLT(v0, $dx);
  goto $truebb, $falsebb;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  $p.0 := 0bv32;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 7} (if (_WRITE_HAS_OCCURRED_$$vx ==> BV32_UREM(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), $pdx) == v0) then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 8} (if (_WRITE_HAS_OCCURRED_$$vy ==> BV32_UREM(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), $pdx) == v0) then 1bv1 else 0bv1) != 0bv1;
  v2 := BV32_SLT($p.0, $lb);
  goto $truebb0, $falsebb0;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  v3 := BV32_ADD(BV32_ADD(BV32_MUL(group_id_y, BV32_MUL($lb, group_size_y)), BV32_MUL(local_id_y, $lb)), $p.0);
  v4 := BV32_SLT(v3, $dy);
  goto $truebb1, $falsebb1;
$if.then.21:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  v5 := BV32_ADD(BV32_MUL(v3, $pdx), v0);
  assert {:sourceloc} {:sourceloc_num 11} true;
  v6 := $$texref[0bv32];
  assert {:sourceloc} {:sourceloc_num 12} true;
  $$agg.tmp[0bv32] := v6;
  assert {:sourceloc} {:sourceloc_num 13} true;
  v7 := $$texref[1bv32];
  assert {:sourceloc} {:sourceloc_num 14} true;
  $$agg.tmp[1bv32] := v7;
  assert {:sourceloc} {:sourceloc_num 15} true;
  v8 := $$texref[2bv32];
  assert {:sourceloc} {:sourceloc_num 16} true;
  $$agg.tmp[2bv32] := v8;
  assert {:sourceloc} {:sourceloc_num 17} true;
  v9 := $$texref[3bv32];
  assert {:sourceloc} {:sourceloc_num 18} true;
  $$agg.tmp[3bv32] := v9;
  assert {:sourceloc} {:sourceloc_num 19} true;
  v10 := $$texref[4bv32];
  assert {:sourceloc} {:sourceloc_num 20} true;
  $$agg.tmp[4bv32] := v10;
  assert {:sourceloc} {:sourceloc_num 21} true;
  v11 := $$texref[5bv32];
  assert {:sourceloc} {:sourceloc_num 22} true;
  $$agg.tmp[5bv32] := v11;
  assert {:sourceloc} {:sourceloc_num 23} true;
  v12 := $$texref[6bv32];
  assert {:sourceloc} {:sourceloc_num 24} true;
  $$agg.tmp[6bv32] := v12;
  assert {:sourceloc} {:sourceloc_num 25} true;
  v13 := $$texref[7bv32];
  assert {:sourceloc} {:sourceloc_num 26} true;
  $$agg.tmp[7bv32] := v13;
  assert {:sourceloc} {:sourceloc_num 27} true;
  v14 := $$texref[8bv32];
  assert {:sourceloc} {:sourceloc_num 28} true;
  $$agg.tmp[8bv32] := v14;
  assert {:sourceloc} {:sourceloc_num 29} true;
  v15 := $$texref[9bv32];
  assert {:sourceloc} {:sourceloc_num 30} true;
  $$agg.tmp[9bv32] := v15;
  assert {:sourceloc} {:sourceloc_num 31} true;
  v16 := $$texref[10bv32];
  assert {:sourceloc} {:sourceloc_num 32} true;
  $$agg.tmp[10bv32] := v16;
  assert {:sourceloc} {:sourceloc_num 33} true;
  v17 := $$texref[11bv32];
  assert {:sourceloc} {:sourceloc_num 34} true;
  $$agg.tmp[11bv32] := v17;
  assert {:sourceloc} {:sourceloc_num 35} true;
  v18 := $$texref[12bv32];
  assert {:sourceloc} {:sourceloc_num 36} true;
  $$agg.tmp[12bv32] := v18;
  assert {:sourceloc} {:sourceloc_num 37} true;
  v19 := $$texref[13bv32];
  assert {:sourceloc} {:sourceloc_num 38} true;
  $$agg.tmp[13bv32] := v19;
  assert {:sourceloc} {:sourceloc_num 39} true;
  v20 := $$texref[14bv32];
  assert {:sourceloc} {:sourceloc_num 40} true;
  $$agg.tmp[14bv32] := v20;
  assert {:sourceloc} {:sourceloc_num 41} true;
  v21 := $$texref[15bv32];
  assert {:sourceloc} {:sourceloc_num 42} true;
  $$agg.tmp[15bv32] := v21;
  call {:sourceloc_num 43}   v22 := $_Z5tex2DI6float2ET_7textureIS1_Li2EL19cudaTextureReadMode0EEff(MKPTR($arrayId$$agg.tmp, 0bv32), SI32_TO_FP32(v0), SI32_TO_FP32(v3));
  assert {:sourceloc} {:sourceloc_num 44} true;
  $$ref.tmp[0bv32] := v22[32:0];
  assert {:sourceloc} {:sourceloc_num 45} true;
  $$ref.tmp[1bv32] := v22[64:32];
  assert {:sourceloc} {:sourceloc_num 46} true;
  v23 := $$ref.tmp[0bv32];
  assert {:sourceloc} {:sourceloc_num 47} true;
  $$vterm[0bv32] := v23;
  assert {:sourceloc} {:sourceloc_num 48} true;
  v24 := $$ref.tmp[1bv32];
  assert {:sourceloc} {:sourceloc_num 49} true;
  $$vterm[1bv32] := v24;
  assert {:sourceloc} {:sourceloc_num 50} true;
  v25 := $$vterm[0bv32];
  assert {:sourceloc} {:sourceloc_num 51} true;
  $$ploc[0bv32] := FSUB32(FADD32(SI32_TO_FP32(v0), 1056964608bv32), FMUL32(FMUL32($dt, v25), SI32_TO_FP32($dx)));
  assert {:sourceloc} {:sourceloc_num 52} true;
  v26 := $$vterm[1bv32];
  assert {:sourceloc} {:sourceloc_num 53} true;
  $$ploc[1bv32] := FSUB32(FADD32(SI32_TO_FP32(v3), 1056964608bv32), FMUL32(FMUL32($dt, v26), SI32_TO_FP32($dy)));
  assert {:sourceloc} {:sourceloc_num 54} true;
  v27 := $$texref[0bv32];
  assert {:sourceloc} {:sourceloc_num 55} true;
  $$agg.tmp40[0bv32] := v27;
  assert {:sourceloc} {:sourceloc_num 56} true;
  v28 := $$texref[1bv32];
  assert {:sourceloc} {:sourceloc_num 57} true;
  $$agg.tmp40[1bv32] := v28;
  assert {:sourceloc} {:sourceloc_num 58} true;
  v29 := $$texref[2bv32];
  assert {:sourceloc} {:sourceloc_num 59} true;
  $$agg.tmp40[2bv32] := v29;
  assert {:sourceloc} {:sourceloc_num 60} true;
  v30 := $$texref[3bv32];
  assert {:sourceloc} {:sourceloc_num 61} true;
  $$agg.tmp40[3bv32] := v30;
  assert {:sourceloc} {:sourceloc_num 62} true;
  v31 := $$texref[4bv32];
  assert {:sourceloc} {:sourceloc_num 63} true;
  $$agg.tmp40[4bv32] := v31;
  assert {:sourceloc} {:sourceloc_num 64} true;
  v32 := $$texref[5bv32];
  assert {:sourceloc} {:sourceloc_num 65} true;
  $$agg.tmp40[5bv32] := v32;
  assert {:sourceloc} {:sourceloc_num 66} true;
  v33 := $$texref[6bv32];
  assert {:sourceloc} {:sourceloc_num 67} true;
  $$agg.tmp40[6bv32] := v33;
  assert {:sourceloc} {:sourceloc_num 68} true;
  v34 := $$texref[7bv32];
  assert {:sourceloc} {:sourceloc_num 69} true;
  $$agg.tmp40[7bv32] := v34;
  assert {:sourceloc} {:sourceloc_num 70} true;
  v35 := $$texref[8bv32];
  assert {:sourceloc} {:sourceloc_num 71} true;
  $$agg.tmp40[8bv32] := v35;
  assert {:sourceloc} {:sourceloc_num 72} true;
  v36 := $$texref[9bv32];
  assert {:sourceloc} {:sourceloc_num 73} true;
  $$agg.tmp40[9bv32] := v36;
  assert {:sourceloc} {:sourceloc_num 74} true;
  v37 := $$texref[10bv32];
  assert {:sourceloc} {:sourceloc_num 75} true;
  $$agg.tmp40[10bv32] := v37;
  assert {:sourceloc} {:sourceloc_num 76} true;
  v38 := $$texref[11bv32];
  assert {:sourceloc} {:sourceloc_num 77} true;
  $$agg.tmp40[11bv32] := v38;
  assert {:sourceloc} {:sourceloc_num 78} true;
  v39 := $$texref[12bv32];
  assert {:sourceloc} {:sourceloc_num 79} true;
  $$agg.tmp40[12bv32] := v39;
  assert {:sourceloc} {:sourceloc_num 80} true;
  v40 := $$texref[13bv32];
  assert {:sourceloc} {:sourceloc_num 81} true;
  $$agg.tmp40[13bv32] := v40;
  assert {:sourceloc} {:sourceloc_num 82} true;
  v41 := $$texref[14bv32];
  assert {:sourceloc} {:sourceloc_num 83} true;
  $$agg.tmp40[14bv32] := v41;
  assert {:sourceloc} {:sourceloc_num 84} true;
  v42 := $$texref[15bv32];
  assert {:sourceloc} {:sourceloc_num 85} true;
  $$agg.tmp40[15bv32] := v42;
  assert {:sourceloc} {:sourceloc_num 86} true;
  v43 := $$ploc[0bv32];
  assert {:sourceloc} {:sourceloc_num 87} true;
  v44 := $$ploc[1bv32];
  call {:sourceloc_num 88}   v45 := $_Z5tex2DI6float2ET_7textureIS1_Li2EL19cudaTextureReadMode0EEff(MKPTR($arrayId$$agg.tmp40, 0bv32), v43, v44);
  assert {:sourceloc} {:sourceloc_num 89} true;
  $$ref.tmp39[0bv32] := v45[32:0];
  assert {:sourceloc} {:sourceloc_num 90} true;
  $$ref.tmp39[1bv32] := v45[64:32];
  assert {:sourceloc} {:sourceloc_num 91} true;
  v46 := $$ref.tmp39[0bv32];
  assert {:sourceloc} {:sourceloc_num 92} true;
  $$vterm[0bv32] := v46;
  assert {:sourceloc} {:sourceloc_num 93} true;
  v47 := $$ref.tmp39[1bv32];
  assert {:sourceloc} {:sourceloc_num 94} true;
  $$vterm[1bv32] := v47;
  assert {:sourceloc} {:sourceloc_num 95} true;
  v48 := $$vterm[0bv32];
  assert {:sourceloc} {:sourceloc_num 96} true;
  v49 := $$vterm[1bv32];
  assert {:sourceloc} {:sourceloc_num 97} true;
  $$vx[v5] := v48;
  assert {:sourceloc} {:sourceloc_num 98} true;
  $$vy[v5] := v49;
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 99} true;
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 100} true;
  $p.0 := BV32_ADD($p.0, 1bv32);
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 101} true;
  goto $if.end.47;
$if.end.47:
  assert {:block_sourceloc} {:sourceloc_num 102} true;
  return;
$truebb:
  assume {:partition} v1;
  assert {:block_sourceloc} {:sourceloc_num 103} true;
  goto $if.then;
$falsebb:
  assume {:partition} !v1;
  assert {:block_sourceloc} {:sourceloc_num 104} true;
  goto $if.end.47;
$truebb0:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 105} true;
  goto $for.body;
$falsebb0:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 106} true;
  goto $for.end;
$truebb1:
  assume {:partition} v4;
  assert {:block_sourceloc} {:sourceloc_num 107} true;
  goto $if.then.21;
$falsebb1:
  assume {:partition} !v4;
  assert {:block_sourceloc} {:sourceloc_num 108} true;
  goto $if.end;
}
procedure {:source_name "_Z5tex2DI6float2ET_7textureIS1_Li2EL19cudaTextureReadMode0EEff"} $_Z5tex2DI6float2ET_7textureIS1_Li2EL19cudaTextureReadMode0EEff($0:ptr, $1:bv32, $2:bv32) returns ($ret:bv64);
axiom (if group_size_x == 64bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_y == 4bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 8bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 8bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
