type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
procedure _ATOMIC_OP8(x : [bv32]bv8, y : bv32) returns (z : bv8, A : [bv32]bv8);
var {:source_name "part"} {:global} $$part : [bv32]bv32;
axiom {:array_info "$$part"} {:global} {:elem_width 32} {:source_name "part"} {:source_elem_width 64} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 64} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$part : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 64} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$part : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 64} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$part : bool;

var {:source_name "v"} {:global} $$v : [bv32]bv8;
axiom {:array_info "$$v"} {:global} {:elem_width 8} {:source_name "v"} {:source_elem_width 64} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 64} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$v : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 64} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$v : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 64} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$v : bool;

var {:source_name "pterm"} $$pterm : [bv32]bv32;
axiom {:array_info "$$pterm"} {:elem_width 32} {:source_name "pterm"} {:source_elem_width 64} {:source_dimensions "1"} true;

var {:source_name "vterm"} $$vterm : [bv32]bv8;
axiom {:array_info "$$vterm"} {:elem_width 8} {:source_name "vterm"} {:source_elem_width 64} {:source_dimensions "1"} true;

const _WATCHED_OFFSET : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_id_y} group_id_y : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:local_id_y} local_id_y : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FADD32(bv32, bv32) : bv32;
function FMUL32(bv32, bv32) : bv32;
function FP32_TO_SI32(bv32) : bv32;
function FSUB32(bv32, bv32) : bv32;
function SI32_TO_FP32(bv32) : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
procedure {:source_name "advectParticles_k"} {:kernel} $_Z17advectParticles_kP6float2S0_iifij($dx:bv32, $dy:bv32, $dt:bv32, $lb:bv32, $pitch:bv32)
requires {:sourceloc_num 0} (if $dx == 512bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 1} (if $dy == 512bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 2} (if $lb == 16bv32 then 1bv1 else 0bv1) != 0bv1;
{
  var $p.0:bv32;
  var v14:bv8;
  var v1:bool;
  var v0:bv32;
  var v8:bv32;
  var v6:bv32;
  var v9:bv32;
  var v12:bv8;
  var v7:bv32;
  var v10:bv8;
  var v13:bv8;
  var v11:bv8;
  var v2:bool;
  var v5:bv32;
  var v3:bv32;
  var v4:bool;
  var v37:bv32;
  var v34:bv32;
  var v39:bv32;
  var v33:bv32;
  var v36:bv32;
  var v32:bv32;
  var v38:bv32;
  var v35:bv32;
  var v15:bv8;
  var v17:bv8;
  var v18:bv8;
  var v22:bv32;
  var v16:bv8;
  var v20:bv8;
  var v19:bv8;
  var v24:bv32;
  var v21:bv8;
  var v23:bv32;
  var v27:bv32;
  var v31:bv8;
  var v30:bv8;
  var v26:bv32;
  var v28:bv8;
  var v29:bv8;
  var v25:bv32;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  v1 := BV32_SLT(v0, $dx);
  goto $truebb, $falsebb;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  $p.0 := 0bv32;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  v2 := BV32_SLT($p.0, $lb);
  goto $truebb0, $falsebb0;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  v3 := BV32_ADD(BV32_ADD(BV32_MUL(group_id_y, BV32_MUL($lb, group_size_y)), BV32_MUL(local_id_y, $lb)), $p.0);
  v4 := BV32_SLT(v3, $dy);
  goto $truebb1, $falsebb1;
$if.then.11:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  v5 := BV32_ADD(BV32_MUL(v3, $dx), v0);
  assert {:sourceloc} {:sourceloc_num 8} true;
  v6 := $$part[BV32_MUL(v5, 2bv32)];
  assert {:sourceloc} {:sourceloc_num 9} true;
  $$pterm[0bv32] := v6;
  assert {:sourceloc} {:sourceloc_num 10} true;
  v7 := $$part[BV32_ADD(BV32_MUL(v5, 2bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 11} true;
  $$pterm[1bv32] := v7;
  assert {:sourceloc} {:sourceloc_num 12} true;
  v8 := $$pterm[0bv32];
  assert {:sourceloc} {:sourceloc_num 13} true;
  v9 := $$pterm[1bv32];
  assert {:sourceloc} {:sourceloc_num 14} true;
  v10 := $$v[BV32_ADD(BV32_MUL(FP32_TO_SI32(FMUL32(v9, SI32_TO_FP32($dy))), $pitch), BV32_MUL(FP32_TO_SI32(FMUL32(v8, SI32_TO_FP32($dx))), 8bv32))];
  assert {:sourceloc} {:sourceloc_num 15} true;
  $$vterm[0bv32] := v10;
  assert {:sourceloc} {:sourceloc_num 16} true;
  v11 := $$v[BV32_ADD(BV32_ADD(BV32_MUL(FP32_TO_SI32(FMUL32(v9, SI32_TO_FP32($dy))), $pitch), BV32_MUL(FP32_TO_SI32(FMUL32(v8, SI32_TO_FP32($dx))), 8bv32)), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 17} true;
  $$vterm[1bv32] := v11;
  assert {:sourceloc} {:sourceloc_num 18} true;
  v12 := $$v[BV32_ADD(BV32_ADD(BV32_MUL(FP32_TO_SI32(FMUL32(v9, SI32_TO_FP32($dy))), $pitch), BV32_MUL(FP32_TO_SI32(FMUL32(v8, SI32_TO_FP32($dx))), 8bv32)), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 19} true;
  $$vterm[2bv32] := v12;
  assert {:sourceloc} {:sourceloc_num 20} true;
  v13 := $$v[BV32_ADD(BV32_ADD(BV32_MUL(FP32_TO_SI32(FMUL32(v9, SI32_TO_FP32($dy))), $pitch), BV32_MUL(FP32_TO_SI32(FMUL32(v8, SI32_TO_FP32($dx))), 8bv32)), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 21} true;
  $$vterm[3bv32] := v13;
  assert {:sourceloc} {:sourceloc_num 22} true;
  v14 := $$v[BV32_ADD(BV32_ADD(BV32_MUL(FP32_TO_SI32(FMUL32(v9, SI32_TO_FP32($dy))), $pitch), BV32_MUL(FP32_TO_SI32(FMUL32(v8, SI32_TO_FP32($dx))), 8bv32)), 4bv32)];
  assert {:sourceloc} {:sourceloc_num 23} true;
  $$vterm[4bv32] := v14;
  assert {:sourceloc} {:sourceloc_num 24} true;
  v15 := $$v[BV32_ADD(BV32_ADD(BV32_MUL(FP32_TO_SI32(FMUL32(v9, SI32_TO_FP32($dy))), $pitch), BV32_MUL(FP32_TO_SI32(FMUL32(v8, SI32_TO_FP32($dx))), 8bv32)), 5bv32)];
  assert {:sourceloc} {:sourceloc_num 25} true;
  $$vterm[5bv32] := v15;
  assert {:sourceloc} {:sourceloc_num 26} true;
  v16 := $$v[BV32_ADD(BV32_ADD(BV32_MUL(FP32_TO_SI32(FMUL32(v9, SI32_TO_FP32($dy))), $pitch), BV32_MUL(FP32_TO_SI32(FMUL32(v8, SI32_TO_FP32($dx))), 8bv32)), 6bv32)];
  assert {:sourceloc} {:sourceloc_num 27} true;
  $$vterm[6bv32] := v16;
  assert {:sourceloc} {:sourceloc_num 28} true;
  v17 := $$v[BV32_ADD(BV32_ADD(BV32_MUL(FP32_TO_SI32(FMUL32(v9, SI32_TO_FP32($dy))), $pitch), BV32_MUL(FP32_TO_SI32(FMUL32(v8, SI32_TO_FP32($dx))), 8bv32)), 7bv32)];
  assert {:sourceloc} {:sourceloc_num 29} true;
  $$vterm[7bv32] := v17;
  assert {:sourceloc} {:sourceloc_num 30} true;
  v18 := $$vterm[0bv32];
  assert {:sourceloc} {:sourceloc_num 31} true;
  v19 := $$vterm[1bv32];
  assert {:sourceloc} {:sourceloc_num 32} true;
  v20 := $$vterm[2bv32];
  assert {:sourceloc} {:sourceloc_num 33} true;
  v21 := $$vterm[3bv32];
  assert {:sourceloc} {:sourceloc_num 34} true;
  v22 := $$pterm[0bv32];
  assert {:sourceloc} {:sourceloc_num 35} true;
  $$pterm[0bv32] := FADD32(v22, FMUL32($dt, v21 ++ v20 ++ v19 ++ v18));
  assert {:sourceloc} {:sourceloc_num 36} true;
  v23 := $$pterm[0bv32];
  assert {:sourceloc} {:sourceloc_num 37} true;
  v24 := $$pterm[0bv32];
  assert {:sourceloc} {:sourceloc_num 38} true;
  $$pterm[0bv32] := FSUB32(v23, SI32_TO_FP32(FP32_TO_SI32(v24)));
  assert {:sourceloc} {:sourceloc_num 39} true;
  v25 := $$pterm[0bv32];
  assert {:sourceloc} {:sourceloc_num 40} true;
  $$pterm[0bv32] := FADD32(v25, 1065353216bv32);
  assert {:sourceloc} {:sourceloc_num 41} true;
  v26 := $$pterm[0bv32];
  assert {:sourceloc} {:sourceloc_num 42} true;
  v27 := $$pterm[0bv32];
  assert {:sourceloc} {:sourceloc_num 43} true;
  $$pterm[0bv32] := FSUB32(v26, SI32_TO_FP32(FP32_TO_SI32(v27)));
  assert {:sourceloc} {:sourceloc_num 44} true;
  v28 := $$vterm[4bv32];
  assert {:sourceloc} {:sourceloc_num 45} true;
  v29 := $$vterm[5bv32];
  assert {:sourceloc} {:sourceloc_num 46} true;
  v30 := $$vterm[6bv32];
  assert {:sourceloc} {:sourceloc_num 47} true;
  v31 := $$vterm[7bv32];
  assert {:sourceloc} {:sourceloc_num 48} true;
  v32 := $$pterm[1bv32];
  assert {:sourceloc} {:sourceloc_num 49} true;
  $$pterm[1bv32] := FADD32(v32, FMUL32($dt, v31 ++ v30 ++ v29 ++ v28));
  assert {:sourceloc} {:sourceloc_num 50} true;
  v33 := $$pterm[1bv32];
  assert {:sourceloc} {:sourceloc_num 51} true;
  v34 := $$pterm[1bv32];
  assert {:sourceloc} {:sourceloc_num 52} true;
  $$pterm[1bv32] := FSUB32(v33, SI32_TO_FP32(FP32_TO_SI32(v34)));
  assert {:sourceloc} {:sourceloc_num 53} true;
  v35 := $$pterm[1bv32];
  assert {:sourceloc} {:sourceloc_num 54} true;
  $$pterm[1bv32] := FADD32(v35, 1065353216bv32);
  assert {:sourceloc} {:sourceloc_num 55} true;
  v36 := $$pterm[1bv32];
  assert {:sourceloc} {:sourceloc_num 56} true;
  v37 := $$pterm[1bv32];
  assert {:sourceloc} {:sourceloc_num 57} true;
  $$pterm[1bv32] := FSUB32(v36, SI32_TO_FP32(FP32_TO_SI32(v37)));
  assert {:sourceloc} {:sourceloc_num 58} true;
  v38 := $$pterm[0bv32];
  assert {:sourceloc} {:sourceloc_num 59} true;
  $$part[BV32_MUL(v5, 2bv32)] := v38;
  assert {:sourceloc} {:sourceloc_num 60} true;
  v39 := $$pterm[1bv32];
  assert {:sourceloc} {:sourceloc_num 61} true;
  $$part[BV32_ADD(BV32_MUL(v5, 2bv32), 1bv32)] := v39;
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 62} true;
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 63} true;
  $p.0 := BV32_ADD($p.0, 1bv32);
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 64} true;
  goto $if.end.57;
$if.end.57:
  assert {:block_sourceloc} {:sourceloc_num 65} true;
  return;
$truebb:
  assume {:partition} v1;
  assert {:block_sourceloc} {:sourceloc_num 66} true;
  goto $if.then;
$falsebb:
  assume {:partition} !v1;
  assert {:block_sourceloc} {:sourceloc_num 67} true;
  goto $if.end.57;
$truebb0:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 68} true;
  goto $for.body;
$falsebb0:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 69} true;
  goto $for.end;
$truebb1:
  assume {:partition} v4;
  assert {:block_sourceloc} {:sourceloc_num 70} true;
  goto $if.then.11;
$falsebb1:
  assume {:partition} !v4;
  assert {:block_sourceloc} {:sourceloc_num 71} true;
  goto $if.end;
}
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 64bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_y == 4bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 8bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 8bv32 then 1bv1 else 0bv1) != 0bv1;
