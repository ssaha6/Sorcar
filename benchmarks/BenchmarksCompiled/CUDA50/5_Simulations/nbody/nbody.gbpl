type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "newPos"} {:global} $$newPos : [bv32]bv32;
axiom {:array_info "$$newPos"} {:global} {:elem_width 32} {:source_name "newPos"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$newPos : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$newPos : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$newPos : bool;

var {:source_name "oldPos"} {:global} $$oldPos : [bv32]bv32;
axiom {:array_info "$$oldPos"} {:global} {:elem_width 32} {:source_name "oldPos"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$oldPos : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$oldPos : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$oldPos : bool;

var {:source_name "vel"} {:global} $$vel : [bv32]bv32;
axiom {:array_info "$$vel"} {:global} {:elem_width 32} {:source_name "vel"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$vel : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$vel : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$vel : bool;

var {:source_name "retval.i.i.i"} $$retval.i.i.i : [bv32]bv32;
axiom {:array_info "$$retval.i.i.i"} {:elem_width 32} {:source_name "retval.i.i.i"} {:source_elem_width 96} {:source_dimensions "1"} true;

var {:source_name "r.i.i.i"} $$r.i.i.i : [bv32]bv32;
axiom {:array_info "$$r.i.i.i"} {:elem_width 32} {:source_name "r.i.i.i"} {:source_elem_width 96} {:source_dimensions "1"} true;

var {:source_name "agg.tmp49.i.i"} $$agg.tmp49.i.i : [bv32]bv32;
axiom {:array_info "$$agg.tmp49.i.i"} {:elem_width 32} {:source_name "agg.tmp49.i.i"} {:source_elem_width 128} {:source_dimensions "1"} true;

var {:source_name "agg.tmp38.i.i"} $$agg.tmp38.i.i : [bv32]bv32;
axiom {:array_info "$$agg.tmp38.i.i"} {:elem_width 32} {:source_name "agg.tmp38.i.i"} {:source_elem_width 128} {:source_dimensions "1"} true;

var {:source_name "agg.tmp7.i.i"} $$agg.tmp7.i.i : [bv32]bv32;
axiom {:array_info "$$agg.tmp7.i.i"} {:elem_width 32} {:source_name "agg.tmp7.i.i"} {:source_elem_width 96} {:source_dimensions "1"} true;

var {:source_name "retval.i.i"} $$retval.i.i : [bv32]bv32;
axiom {:array_info "$$retval.i.i"} {:elem_width 32} {:source_name "retval.i.i"} {:source_elem_width 96} {:source_dimensions "1"} true;

var {:source_name "ref.tmp.i.i"} $$ref.tmp.i.i : [bv32]bv32;
axiom {:array_info "$$ref.tmp.i.i"} {:elem_width 32} {:source_name "ref.tmp.i.i"} {:source_elem_width 96} {:source_dimensions "1"} true;

var {:source_name "agg.tmp.i.i"} $$agg.tmp.i.i : [bv32]bv32;
axiom {:array_info "$$agg.tmp.i.i"} {:elem_width 32} {:source_name "agg.tmp.i.i"} {:source_elem_width 96} {:source_dimensions "1"} true;

var {:source_name "agg.tmp3.i.i"} $$agg.tmp3.i.i : [bv32]bv32;
axiom {:array_info "$$agg.tmp3.i.i"} {:elem_width 32} {:source_name "agg.tmp3.i.i"} {:source_elem_width 128} {:source_dimensions "1"} true;

var {:source_name "agg.tmp4.i.i"} $$agg.tmp4.i.i : [bv32]bv32;
axiom {:array_info "$$agg.tmp4.i.i"} {:elem_width 32} {:source_name "agg.tmp4.i.i"} {:source_elem_width 128} {:source_dimensions "1"} true;

var {:source_name "agg.tmp1518.i"} $$agg.tmp1518.i : [bv32]bv32;
axiom {:array_info "$$agg.tmp1518.i"} {:elem_width 32} {:source_name "agg.tmp1518.i"} {:source_elem_width 96} {:source_dimensions "1"} true;

var {:source_name "agg.tmp17.i"} $$agg.tmp17.i : [bv32]bv32;
axiom {:array_info "$$agg.tmp17.i"} {:elem_width 32} {:source_name "agg.tmp17.i"} {:source_elem_width 128} {:source_dimensions "1"} true;

var {:source_name "retval.i"} $$retval.i : [bv32]bv32;
axiom {:array_info "$$retval.i"} {:elem_width 32} {:source_name "retval.i"} {:source_elem_width 96} {:source_dimensions "1"} true;

var {:source_name "ref.tmp.i"} $$ref.tmp.i : [bv32]bv32;
axiom {:array_info "$$ref.tmp.i"} {:elem_width 32} {:source_name "ref.tmp.i"} {:source_elem_width 96} {:source_dimensions "1"} true;

var {:source_name "agg.tmp.i"} $$agg.tmp.i : [bv32]bv32;
axiom {:array_info "$$agg.tmp.i"} {:elem_width 32} {:source_name "agg.tmp.i"} {:source_elem_width 128} {:source_dimensions "1"} true;

var {:source_name "agg.tmp15.i"} $$agg.tmp15.i : [bv32]bv32;
axiom {:array_info "$$agg.tmp15.i"} {:elem_width 32} {:source_name "agg.tmp15.i"} {:source_elem_width 96} {:source_dimensions "1"} true;

var {:source_name "agg.tmp36"} $$agg.tmp36 : [bv32]bv32;
axiom {:array_info "$$agg.tmp36"} {:elem_width 32} {:source_name "agg.tmp36"} {:source_elem_width 128} {:source_dimensions "1"} true;

var {:source_name "position"} $$position : [bv32]bv32;
axiom {:array_info "$$position"} {:elem_width 32} {:source_name "position"} {:source_elem_width 128} {:source_dimensions "1"} true;

var {:source_name "accel"} $$accel : [bv32]bv32;
axiom {:array_info "$$accel"} {:elem_width 32} {:source_name "accel"} {:source_elem_width 96} {:source_dimensions "1"} true;

var {:source_name "agg.tmp"} $$agg.tmp : [bv32]bv32;
axiom {:array_info "$$agg.tmp"} {:elem_width 32} {:source_name "agg.tmp"} {:source_elem_width 128} {:source_dimensions "1"} true;

var {:source_name "velocity"} $$velocity : [bv32]bv32;
axiom {:array_info "$$velocity"} {:elem_width 32} {:source_name "velocity"} {:source_elem_width 128} {:source_dimensions "1"} true;

var {:source_name "__smem"} {:group_shared} $$__smem : [bv32]bv32;
axiom {:array_info "$$__smem"} {:group_shared} {:elem_width 32} {:source_name "__smem"} {:source_elem_width 32} {:source_dimensions "0"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$__smem : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$__smem : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$__smem : bool;

var {:source_name "softeningSquared"} {:constant} $$softeningSquared : [bv32]bv32;
axiom {:array_info "$$softeningSquared"} {:constant} {:elem_width 32} {:source_name "softeningSquared"} {:source_elem_width 32} {:source_dimensions "1"} true;

const _WATCHED_OFFSET : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_id_y} group_id_y : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:local_id_y} local_id_y : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FADD32(bv32, bv32) : bv32;
function FMUL32(bv32, bv32) : bv32;
function FSUB32(bv32, bv32) : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvadd"} BV64_ADD(bv64, bv64) : bv64;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvsdiv"} BV32_SDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "bvuge"} BV32_UGE(bv32, bv32) : bool;
function {:bvbuiltin "bvult"} BV32_ULT(bv32, bv32) : bool;
function {:bvbuiltin "zero_extend 32"} BV32_ZEXT64(bv32) : bv64;
procedure {:source_name "integrateBodies<float, false>"} {:kernel} $_Z15integrateBodiesIfLb0EEvPN4vec4IT_E4TypeES4_S4_jjffi($deviceOffset:bv32, $deviceNumBodies:bv32, $deltaTime:bv32, $damping:bv32, $totalNumBodies:bv32)
requires {:sourceloc_num 0} (if $deviceNumBodies == 13824bv32 then 1bv1 else 0bv1) != 0bv1;
{
  var $tile.i.0:bv32;
  var $cond.i:bv32;
  var $j.i.i.0:bv64;
  var $counter.i.i.0:bv32;
  var v8:bv32;
  var v3:bv32;
  var v28:bv32;
  var v2:bv32;
  var v4:bv32;
  var v5:bv32;
  var v6:bv32;
  var v7:bv32;
  var v14:bool;
  var v1:bool;
  var v0:bv32;
  var v9:bv32;
  var v10:bv32;
  var v11:bv32;
  var v12:bv32;
  var v13:bv32;
  var v81:bv32;
  var v20:bv32;
  var v21:bv32;
  var v16:bv32;
  var v18:bv32;
  var v17:bv32;
  var v19:bv32;
  var v23:bv32;
  var v27:bv32;
  var v25:bv32;
  var v22:bv32;
  var v24:bv32;
  var v26:bv32;
  var v34:bool;
  var v15:bool;
  var v63:bv32;
  var v70:bv32;
  var v65:bv32;
  var v66:bv32;
  var v67:bv32;
  var v68:bv32;
  var v64:bv32;
  var v69:bv32;
  var v61:bv32;
  var v62:bv32;
  var v77:bv32;
  var v78:bv32;
  var v79:bv32;
  var v80:bv32;
  var v71:bv32;
  var v74:bv32;
  var v75:bv32;
  var v76:bv32;
  var v73:bv32;
  var v30:bv32;
  var v32:bv32;
  var v37:bv32;
  var v33:bv32;
  var v31:bv32;
  var v29:bv32;
  var v35:bv32;
  var v36:bv32;
  var v43:bv32;
  var v46:bv32;
  var v41:bv32;
  var v45:bv32;
  var v47:bv32;
  var v38:bv32;
  var v42:bv32;
  var v44:bv32;
  var v39:bv32;
  var v40:bv32;
  var v55:bv32;
  var v53:bv32;
  var v50:bv32;
  var v48:bv32;
  var v49:bv32;
  var v56:bv32;
  var v58:bv32;
  var v57:bv32;
  var v51:bv32;
  var v54:bv32;
  var v52:bv32;
  var v60:bv32;
  var v59:bv32;
  var v72:bv32;
  var v104:bv32;
  var v111:bv32;
  var v107:bv32;
  var v103:bv32;
  var v105:bv32;
  var v109:bv32;
  var v106:bv32;
  var v102:bv32;
  var v110:bv32;
  var v108:bv32;
  var v114:bv32;
  var v112:bv32;
  var v113:bv32;
  var v116:bv32;
  var v118:bv32;
  var v115:bv32;
  var v117:bv32;
  var v119:bv32;
  var v122:bv32;
  var v123:bv32;
  var v120:bv32;
  var v126:bv32;
  var v125:bv32;
  var v124:bv32;
  var v121:bv32;
  var v88:bv32;
  var v86:bv32;
  var v87:bv32;
  var v82:bv32;
  var v84:bv32;
  var v85:bv32;
  var v89:bv32;
  var v90:bv32;
  var v83:bv32;
  var v91:bv32;
  var v94:bv32;
  var v95:bv32;
  var v96:bv32;
  var v97:bv32;
  var v93:bv32;
  var v98:bv32;
  var v92:bv32;
  var v99:bv32;
  var v101:bv32;
  var v100:bv32;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  v1 := BV32_UGE(v0, $deviceNumBodies);
  goto $truebb, $falsebb;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  goto $return;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  assert {:sourceloc} {:sourceloc_num 4} true;
  v2 := $$oldPos[BV32_MUL(BV32_ADD($deviceOffset, v0), 4bv32)];
  assert {:sourceloc} {:sourceloc_num 5} true;
  $$position[0bv32] := v2;
  assert {:sourceloc} {:sourceloc_num 6} true;
  v3 := $$oldPos[BV32_ADD(BV32_MUL(BV32_ADD($deviceOffset, v0), 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 7} true;
  $$position[1bv32] := v3;
  assert {:sourceloc} {:sourceloc_num 8} true;
  v4 := $$oldPos[BV32_ADD(BV32_MUL(BV32_ADD($deviceOffset, v0), 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 9} true;
  $$position[2bv32] := v4;
  assert {:sourceloc} {:sourceloc_num 10} true;
  v5 := $$oldPos[BV32_ADD(BV32_MUL(BV32_ADD($deviceOffset, v0), 4bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 11} true;
  $$position[3bv32] := v5;
  assert {:sourceloc} {:sourceloc_num 12} true;
  v6 := $$position[0bv32];
  assert {:sourceloc} {:sourceloc_num 13} true;
  $$agg.tmp[0bv32] := v6;
  assert {:sourceloc} {:sourceloc_num 14} true;
  v7 := $$position[1bv32];
  assert {:sourceloc} {:sourceloc_num 15} true;
  $$agg.tmp[1bv32] := v7;
  assert {:sourceloc} {:sourceloc_num 16} true;
  v8 := $$position[2bv32];
  assert {:sourceloc} {:sourceloc_num 17} true;
  $$agg.tmp[2bv32] := v8;
  assert {:sourceloc} {:sourceloc_num 18} true;
  v9 := $$position[3bv32];
  assert {:sourceloc} {:sourceloc_num 19} true;
  $$agg.tmp[3bv32] := v9;
  assert {:sourceloc} {:sourceloc_num 20} true;
  v10 := $$agg.tmp[0bv32];
  assert {:sourceloc} {:sourceloc_num 21} true;
  $$agg.tmp36[0bv32] := v10;
  assert {:sourceloc} {:sourceloc_num 22} true;
  v11 := $$agg.tmp[1bv32];
  assert {:sourceloc} {:sourceloc_num 23} true;
  $$agg.tmp36[1bv32] := v11;
  assert {:sourceloc} {:sourceloc_num 24} true;
  v12 := $$agg.tmp[2bv32];
  assert {:sourceloc} {:sourceloc_num 25} true;
  $$agg.tmp36[2bv32] := v12;
  assert {:sourceloc} {:sourceloc_num 26} true;
  v13 := $$agg.tmp[3bv32];
  assert {:sourceloc} {:sourceloc_num 27} true;
  $$agg.tmp36[3bv32] := v13;
  assert {:sourceloc} {:sourceloc_num 28} true;
  $$retval.i[0bv32] := 0bv32;
  assert {:sourceloc} {:sourceloc_num 29} true;
  $$retval.i[1bv32] := 0bv32;
  assert {:sourceloc} {:sourceloc_num 30} true;
  $$retval.i[2bv32] := 0bv32;
  $tile.i.0 := group_id_y;
  goto $for.cond.i;
$for.cond.i:
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  v14 := BV32_ULT($tile.i.0, BV32_ADD(BV32_SDIV($totalNumBodies, BV32_MUL(group_size_x, group_size_y)), group_id_y));
  goto $truebb0, $falsebb0;
$for.body.i:
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  v15 := BV32_ULT(BV32_ADD(group_id_x, $tile.i.0), num_groups_x);
  goto $truebb1, $falsebb1;
$cond.true.i:
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  $cond.i := BV32_ADD(group_id_x, $tile.i.0);
  goto $cond.end.i;
$cond.false.i:
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  $cond.i := BV32_SUB(BV32_ADD(group_id_x, $tile.i.0), num_groups_x);
  goto $cond.end.i;
$cond.end.i:
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  assert {:sourceloc} {:sourceloc_num 36} true;
  v16 := $$oldPos[BV32_MUL(BV32_ADD(BV32_MUL($cond.i, group_size_x), local_id_x), 4bv32)];
  assert {:sourceloc} {:sourceloc_num 37} true;
  $$__smem[BV32_MUL(BV32_ADD(local_id_x, BV32_MUL(group_size_x, local_id_y)), 4bv32)] := v16;
  assert {:sourceloc} {:sourceloc_num 38} true;
  v17 := $$oldPos[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL($cond.i, group_size_x), local_id_x), 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 39} true;
  $$__smem[BV32_ADD(BV32_MUL(BV32_ADD(local_id_x, BV32_MUL(group_size_x, local_id_y)), 4bv32), 1bv32)] := v17;
  assert {:sourceloc} {:sourceloc_num 40} true;
  v18 := $$oldPos[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL($cond.i, group_size_x), local_id_x), 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 41} true;
  $$__smem[BV32_ADD(BV32_MUL(BV32_ADD(local_id_x, BV32_MUL(group_size_x, local_id_y)), 4bv32), 2bv32)] := v18;
  assert {:sourceloc} {:sourceloc_num 42} true;
  v19 := $$oldPos[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL($cond.i, group_size_x), local_id_x), 4bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 43} true;
  $$__smem[BV32_ADD(BV32_MUL(BV32_ADD(local_id_x, BV32_MUL(group_size_x, local_id_y)), 4bv32), 3bv32)] := v19;
  call {:sourceloc_num 44} $bugle_barrier(1bv1, 1bv1);
  assert {:sourceloc} {:sourceloc_num 45} true;
  v20 := $$agg.tmp36[0bv32];
  assert {:sourceloc} {:sourceloc_num 46} true;
  $$agg.tmp.i[0bv32] := v20;
  assert {:sourceloc} {:sourceloc_num 47} true;
  v21 := $$agg.tmp36[1bv32];
  assert {:sourceloc} {:sourceloc_num 48} true;
  $$agg.tmp.i[1bv32] := v21;
  assert {:sourceloc} {:sourceloc_num 49} true;
  v22 := $$agg.tmp36[2bv32];
  assert {:sourceloc} {:sourceloc_num 50} true;
  $$agg.tmp.i[2bv32] := v22;
  assert {:sourceloc} {:sourceloc_num 51} true;
  v23 := $$agg.tmp36[3bv32];
  assert {:sourceloc} {:sourceloc_num 52} true;
  $$agg.tmp.i[3bv32] := v23;
  assert {:sourceloc} {:sourceloc_num 53} true;
  v24 := $$retval.i[0bv32];
  assert {:sourceloc} {:sourceloc_num 54} true;
  $$agg.tmp15.i[0bv32] := v24;
  assert {:sourceloc} {:sourceloc_num 55} true;
  v25 := $$retval.i[1bv32];
  assert {:sourceloc} {:sourceloc_num 56} true;
  $$agg.tmp15.i[1bv32] := v25;
  assert {:sourceloc} {:sourceloc_num 57} true;
  v26 := $$retval.i[2bv32];
  assert {:sourceloc} {:sourceloc_num 58} true;
  $$agg.tmp15.i[2bv32] := v26;
  assert {:sourceloc} {:sourceloc_num 59} true;
  v27 := $$agg.tmp15.i[0bv32];
  assert {:sourceloc} {:sourceloc_num 60} true;
  $$agg.tmp1518.i[0bv32] := v27;
  assert {:sourceloc} {:sourceloc_num 61} true;
  v28 := $$agg.tmp15.i[1bv32];
  assert {:sourceloc} {:sourceloc_num 62} true;
  $$agg.tmp1518.i[1bv32] := v28;
  assert {:sourceloc} {:sourceloc_num 63} true;
  v29 := $$agg.tmp15.i[2bv32];
  assert {:sourceloc} {:sourceloc_num 64} true;
  $$agg.tmp1518.i[2bv32] := v29;
  assert {:sourceloc} {:sourceloc_num 65} true;
  v30 := $$agg.tmp.i[0bv32];
  assert {:sourceloc} {:sourceloc_num 66} true;
  $$agg.tmp17.i[0bv32] := v30;
  assert {:sourceloc} {:sourceloc_num 67} true;
  v31 := $$agg.tmp.i[1bv32];
  assert {:sourceloc} {:sourceloc_num 68} true;
  $$agg.tmp17.i[1bv32] := v31;
  assert {:sourceloc} {:sourceloc_num 69} true;
  v32 := $$agg.tmp.i[2bv32];
  assert {:sourceloc} {:sourceloc_num 70} true;
  $$agg.tmp17.i[2bv32] := v32;
  assert {:sourceloc} {:sourceloc_num 71} true;
  v33 := $$agg.tmp.i[3bv32];
  assert {:sourceloc} {:sourceloc_num 72} true;
  $$agg.tmp17.i[3bv32] := v33;
  $j.i.i.0, $counter.i.i.0 := 0bv64, 0bv32;
  goto $for.cond.i.i;
$for.cond.i.i:
  assert {:block_sourceloc} {:sourceloc_num 73} true;
  v34 := BV32_ULT($counter.i.i.0, group_size_x);
  goto $truebb2, $falsebb2;
$for.body.i.i:
  assert {:block_sourceloc} {:sourceloc_num 74} true;
  assert {:sourceloc} {:sourceloc_num 75} true;
  v35 := $$agg.tmp1518.i[0bv32];
  assert {:sourceloc} {:sourceloc_num 76} true;
  $$agg.tmp.i.i[0bv32] := v35;
  assert {:sourceloc} {:sourceloc_num 77} true;
  v36 := $$agg.tmp1518.i[1bv32];
  assert {:sourceloc} {:sourceloc_num 78} true;
  $$agg.tmp.i.i[1bv32] := v36;
  assert {:sourceloc} {:sourceloc_num 79} true;
  v37 := $$agg.tmp1518.i[2bv32];
  assert {:sourceloc} {:sourceloc_num 80} true;
  $$agg.tmp.i.i[2bv32] := v37;
  assert {:sourceloc} {:sourceloc_num 81} true;
  v38 := $$agg.tmp17.i[0bv32];
  assert {:sourceloc} {:sourceloc_num 82} true;
  $$agg.tmp3.i.i[0bv32] := v38;
  assert {:sourceloc} {:sourceloc_num 83} true;
  v39 := $$agg.tmp17.i[1bv32];
  assert {:sourceloc} {:sourceloc_num 84} true;
  $$agg.tmp3.i.i[1bv32] := v39;
  assert {:sourceloc} {:sourceloc_num 85} true;
  v40 := $$agg.tmp17.i[2bv32];
  assert {:sourceloc} {:sourceloc_num 86} true;
  $$agg.tmp3.i.i[2bv32] := v40;
  assert {:sourceloc} {:sourceloc_num 87} true;
  v41 := $$agg.tmp17.i[3bv32];
  assert {:sourceloc} {:sourceloc_num 88} true;
  $$agg.tmp3.i.i[3bv32] := v41;
  assert {:sourceloc} {:sourceloc_num 89} true;
  v42 := $$__smem[BV32_MUL(BV64_ADD($j.i.i.0, BV32_ZEXT64(BV32_MUL(group_size_x, local_id_y)))[32:0], 4bv32)];
  assert {:sourceloc} {:sourceloc_num 90} true;
  $$agg.tmp4.i.i[0bv32] := v42;
  assert {:sourceloc} {:sourceloc_num 91} true;
  v43 := $$__smem[BV32_ADD(BV32_MUL(BV64_ADD($j.i.i.0, BV32_ZEXT64(BV32_MUL(group_size_x, local_id_y)))[32:0], 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 92} true;
  $$agg.tmp4.i.i[1bv32] := v43;
  assert {:sourceloc} {:sourceloc_num 93} true;
  v44 := $$__smem[BV32_ADD(BV32_MUL(BV64_ADD($j.i.i.0, BV32_ZEXT64(BV32_MUL(group_size_x, local_id_y)))[32:0], 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 94} true;
  $$agg.tmp4.i.i[2bv32] := v44;
  assert {:sourceloc} {:sourceloc_num 95} true;
  v45 := $$__smem[BV32_ADD(BV32_MUL(BV64_ADD($j.i.i.0, BV32_ZEXT64(BV32_MUL(group_size_x, local_id_y)))[32:0], 4bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 96} true;
  $$agg.tmp4.i.i[3bv32] := v45;
  assert {:sourceloc} {:sourceloc_num 97} true;
  v46 := $$agg.tmp4.i.i[0bv32];
  assert {:sourceloc} {:sourceloc_num 98} true;
  $$agg.tmp49.i.i[0bv32] := v46;
  assert {:sourceloc} {:sourceloc_num 99} true;
  v47 := $$agg.tmp4.i.i[1bv32];
  assert {:sourceloc} {:sourceloc_num 100} true;
  $$agg.tmp49.i.i[1bv32] := v47;
  assert {:sourceloc} {:sourceloc_num 101} true;
  v48 := $$agg.tmp4.i.i[2bv32];
  assert {:sourceloc} {:sourceloc_num 102} true;
  $$agg.tmp49.i.i[2bv32] := v48;
  assert {:sourceloc} {:sourceloc_num 103} true;
  v49 := $$agg.tmp4.i.i[3bv32];
  assert {:sourceloc} {:sourceloc_num 104} true;
  $$agg.tmp49.i.i[3bv32] := v49;
  assert {:sourceloc} {:sourceloc_num 105} true;
  v50 := $$agg.tmp3.i.i[0bv32];
  assert {:sourceloc} {:sourceloc_num 106} true;
  $$agg.tmp38.i.i[0bv32] := v50;
  assert {:sourceloc} {:sourceloc_num 107} true;
  v51 := $$agg.tmp3.i.i[1bv32];
  assert {:sourceloc} {:sourceloc_num 108} true;
  $$agg.tmp38.i.i[1bv32] := v51;
  assert {:sourceloc} {:sourceloc_num 109} true;
  v52 := $$agg.tmp3.i.i[2bv32];
  assert {:sourceloc} {:sourceloc_num 110} true;
  $$agg.tmp38.i.i[2bv32] := v52;
  assert {:sourceloc} {:sourceloc_num 111} true;
  v53 := $$agg.tmp3.i.i[3bv32];
  assert {:sourceloc} {:sourceloc_num 112} true;
  $$agg.tmp38.i.i[3bv32] := v53;
  assert {:sourceloc} {:sourceloc_num 113} true;
  v54 := $$agg.tmp.i.i[0bv32];
  assert {:sourceloc} {:sourceloc_num 114} true;
  $$agg.tmp7.i.i[0bv32] := v54;
  assert {:sourceloc} {:sourceloc_num 115} true;
  v55 := $$agg.tmp.i.i[1bv32];
  assert {:sourceloc} {:sourceloc_num 116} true;
  $$agg.tmp7.i.i[1bv32] := v55;
  assert {:sourceloc} {:sourceloc_num 117} true;
  v56 := $$agg.tmp.i.i[2bv32];
  assert {:sourceloc} {:sourceloc_num 118} true;
  $$agg.tmp7.i.i[2bv32] := v56;
  assert {:sourceloc} {:sourceloc_num 119} true;
  v57 := $$agg.tmp49.i.i[0bv32];
  assert {:sourceloc} {:sourceloc_num 120} true;
  v58 := $$agg.tmp38.i.i[0bv32];
  assert {:sourceloc} {:sourceloc_num 121} true;
  $$r.i.i.i[0bv32] := FSUB32(v57, v58);
  assert {:sourceloc} {:sourceloc_num 122} true;
  v59 := $$agg.tmp49.i.i[1bv32];
  assert {:sourceloc} {:sourceloc_num 123} true;
  v60 := $$agg.tmp38.i.i[1bv32];
  assert {:sourceloc} {:sourceloc_num 124} true;
  $$r.i.i.i[1bv32] := FSUB32(v59, v60);
  assert {:sourceloc} {:sourceloc_num 125} true;
  v61 := $$agg.tmp49.i.i[2bv32];
  assert {:sourceloc} {:sourceloc_num 126} true;
  v62 := $$agg.tmp38.i.i[2bv32];
  assert {:sourceloc} {:sourceloc_num 127} true;
  $$r.i.i.i[2bv32] := FSUB32(v61, v62);
  assert {:sourceloc} {:sourceloc_num 128} true;
  v63 := $$r.i.i.i[0bv32];
  assert {:sourceloc} {:sourceloc_num 129} true;
  v64 := $$r.i.i.i[0bv32];
  assert {:sourceloc} {:sourceloc_num 130} true;
  v65 := $$r.i.i.i[1bv32];
  assert {:sourceloc} {:sourceloc_num 131} true;
  v66 := $$r.i.i.i[1bv32];
  assert {:sourceloc} {:sourceloc_num 132} true;
  v67 := $$r.i.i.i[2bv32];
  assert {:sourceloc} {:sourceloc_num 133} true;
  v68 := $$r.i.i.i[2bv32];
  assert {:sourceloc} {:sourceloc_num 134} true;
  v69 := $$softeningSquared[0bv32];
  call {:sourceloc_num 135}   v70 := $rsqrtf(FADD32(FADD32(FADD32(FMUL32(v63, v64), FMUL32(v65, v66)), FMUL32(v67, v68)), v69));
  assert {:sourceloc} {:sourceloc_num 136} true;
  v71 := $$agg.tmp49.i.i[3bv32];
  v72 := FMUL32(v71, FMUL32(FMUL32(v70, v70), v70));
  assert {:sourceloc} {:sourceloc_num 137} true;
  v73 := $$r.i.i.i[0bv32];
  assert {:sourceloc} {:sourceloc_num 138} true;
  v74 := $$agg.tmp7.i.i[0bv32];
  assert {:sourceloc} {:sourceloc_num 139} true;
  $$agg.tmp7.i.i[0bv32] := FADD32(v74, FMUL32(v73, v72));
  assert {:sourceloc} {:sourceloc_num 140} true;
  v75 := $$r.i.i.i[1bv32];
  assert {:sourceloc} {:sourceloc_num 141} true;
  v76 := $$agg.tmp7.i.i[1bv32];
  assert {:sourceloc} {:sourceloc_num 142} true;
  $$agg.tmp7.i.i[1bv32] := FADD32(v76, FMUL32(v75, v72));
  assert {:sourceloc} {:sourceloc_num 143} true;
  v77 := $$r.i.i.i[2bv32];
  assert {:sourceloc} {:sourceloc_num 144} true;
  v78 := $$agg.tmp7.i.i[2bv32];
  assert {:sourceloc} {:sourceloc_num 145} true;
  $$agg.tmp7.i.i[2bv32] := FADD32(v78, FMUL32(v77, v72));
  assert {:sourceloc} {:sourceloc_num 146} true;
  v79 := $$agg.tmp7.i.i[0bv32];
  assert {:sourceloc} {:sourceloc_num 147} true;
  $$retval.i.i.i[0bv32] := v79;
  assert {:sourceloc} {:sourceloc_num 148} true;
  v80 := $$agg.tmp7.i.i[1bv32];
  assert {:sourceloc} {:sourceloc_num 149} true;
  $$retval.i.i.i[1bv32] := v80;
  assert {:sourceloc} {:sourceloc_num 150} true;
  v81 := $$agg.tmp7.i.i[2bv32];
  assert {:sourceloc} {:sourceloc_num 151} true;
  $$retval.i.i.i[2bv32] := v81;
  assert {:sourceloc} {:sourceloc_num 152} true;
  v82 := $$retval.i.i.i[0bv32];
  assert {:sourceloc} {:sourceloc_num 153} true;
  v83 := $$retval.i.i.i[1bv32];
  assert {:sourceloc} {:sourceloc_num 154} true;
  v84 := $$retval.i.i.i[2bv32];
  assert {:sourceloc} {:sourceloc_num 155} true;
  $$ref.tmp.i.i[0bv32] := v82;
  assert {:sourceloc} {:sourceloc_num 156} true;
  $$ref.tmp.i.i[1bv32] := v83;
  assert {:sourceloc} {:sourceloc_num 157} true;
  $$ref.tmp.i.i[2bv32] := v84;
  assert {:sourceloc} {:sourceloc_num 158} true;
  v85 := $$ref.tmp.i.i[0bv32];
  assert {:sourceloc} {:sourceloc_num 159} true;
  $$agg.tmp1518.i[0bv32] := v85;
  assert {:sourceloc} {:sourceloc_num 160} true;
  v86 := $$ref.tmp.i.i[1bv32];
  assert {:sourceloc} {:sourceloc_num 161} true;
  $$agg.tmp1518.i[1bv32] := v86;
  assert {:sourceloc} {:sourceloc_num 162} true;
  v87 := $$ref.tmp.i.i[2bv32];
  assert {:sourceloc} {:sourceloc_num 163} true;
  $$agg.tmp1518.i[2bv32] := v87;
  $j.i.i.0, $counter.i.i.0 := BV64_ADD($j.i.i.0, 1bv64), BV32_ADD($counter.i.i.0, 1bv32);
  goto $for.cond.i.i;
$_ZL11gravitationIfEN4vec3IT_E4TypeEN4vec4IS1_E4TypeES3_.exit.i:
  assert {:block_sourceloc} {:sourceloc_num 164} true;
  assert {:sourceloc} {:sourceloc_num 165} true;
  v88 := $$agg.tmp1518.i[0bv32];
  assert {:sourceloc} {:sourceloc_num 166} true;
  $$retval.i.i[0bv32] := v88;
  assert {:sourceloc} {:sourceloc_num 167} true;
  v89 := $$agg.tmp1518.i[1bv32];
  assert {:sourceloc} {:sourceloc_num 168} true;
  $$retval.i.i[1bv32] := v89;
  assert {:sourceloc} {:sourceloc_num 169} true;
  v90 := $$agg.tmp1518.i[2bv32];
  assert {:sourceloc} {:sourceloc_num 170} true;
  $$retval.i.i[2bv32] := v90;
  assert {:sourceloc} {:sourceloc_num 171} true;
  v91 := $$retval.i.i[0bv32];
  assert {:sourceloc} {:sourceloc_num 172} true;
  v92 := $$retval.i.i[1bv32];
  assert {:sourceloc} {:sourceloc_num 173} true;
  v93 := $$retval.i.i[2bv32];
  assert {:sourceloc} {:sourceloc_num 174} true;
  $$ref.tmp.i[0bv32] := v91;
  assert {:sourceloc} {:sourceloc_num 175} true;
  $$ref.tmp.i[1bv32] := v92;
  assert {:sourceloc} {:sourceloc_num 176} true;
  $$ref.tmp.i[2bv32] := v93;
  assert {:sourceloc} {:sourceloc_num 177} true;
  v94 := $$ref.tmp.i[0bv32];
  assert {:sourceloc} {:sourceloc_num 178} true;
  $$retval.i[0bv32] := v94;
  assert {:sourceloc} {:sourceloc_num 179} true;
  v95 := $$ref.tmp.i[1bv32];
  assert {:sourceloc} {:sourceloc_num 180} true;
  $$retval.i[1bv32] := v95;
  assert {:sourceloc} {:sourceloc_num 181} true;
  v96 := $$ref.tmp.i[2bv32];
  assert {:sourceloc} {:sourceloc_num 182} true;
  $$retval.i[2bv32] := v96;
  call {:sourceloc_num 183} $bugle_barrier(1bv1, 1bv1);
  $tile.i.0 := BV32_ADD($tile.i.0, 1bv32);
  goto $for.cond.i;
$_ZL16computeBodyAccelIfLb0EEN4vec3IT_E4TypeEN4vec4IS1_E4TypeEPS6_i.exit:
  assert {:block_sourceloc} {:sourceloc_num 184} true;
  assert {:sourceloc} {:sourceloc_num 185} true;
  v97 := $$retval.i[0bv32];
  assert {:sourceloc} {:sourceloc_num 186} true;
  v98 := $$retval.i[1bv32];
  assert {:sourceloc} {:sourceloc_num 187} true;
  v99 := $$retval.i[2bv32];
  assert {:sourceloc} {:sourceloc_num 188} true;
  $$accel[0bv32] := v97;
  assert {:sourceloc} {:sourceloc_num 189} true;
  $$accel[1bv32] := v98;
  assert {:sourceloc} {:sourceloc_num 190} true;
  $$accel[2bv32] := v99;
  assert {:sourceloc} {:sourceloc_num 191} true;
  v100 := $$vel[BV32_MUL(BV32_ADD($deviceOffset, v0), 4bv32)];
  assert {:sourceloc} {:sourceloc_num 192} true;
  $$velocity[0bv32] := v100;
  assert {:sourceloc} {:sourceloc_num 193} true;
  v101 := $$vel[BV32_ADD(BV32_MUL(BV32_ADD($deviceOffset, v0), 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 194} true;
  $$velocity[1bv32] := v101;
  assert {:sourceloc} {:sourceloc_num 195} true;
  v102 := $$vel[BV32_ADD(BV32_MUL(BV32_ADD($deviceOffset, v0), 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 196} true;
  $$velocity[2bv32] := v102;
  assert {:sourceloc} {:sourceloc_num 197} true;
  v103 := $$vel[BV32_ADD(BV32_MUL(BV32_ADD($deviceOffset, v0), 4bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 198} true;
  $$velocity[3bv32] := v103;
  assert {:sourceloc} {:sourceloc_num 199} true;
  v104 := $$accel[0bv32];
  assert {:sourceloc} {:sourceloc_num 200} true;
  v105 := $$velocity[0bv32];
  assert {:sourceloc} {:sourceloc_num 201} true;
  $$velocity[0bv32] := FADD32(v105, FMUL32(v104, $deltaTime));
  assert {:sourceloc} {:sourceloc_num 202} true;
  v106 := $$accel[1bv32];
  assert {:sourceloc} {:sourceloc_num 203} true;
  v107 := $$velocity[1bv32];
  assert {:sourceloc} {:sourceloc_num 204} true;
  $$velocity[1bv32] := FADD32(v107, FMUL32(v106, $deltaTime));
  assert {:sourceloc} {:sourceloc_num 205} true;
  v108 := $$accel[2bv32];
  assert {:sourceloc} {:sourceloc_num 206} true;
  v109 := $$velocity[2bv32];
  assert {:sourceloc} {:sourceloc_num 207} true;
  $$velocity[2bv32] := FADD32(v109, FMUL32(v108, $deltaTime));
  assert {:sourceloc} {:sourceloc_num 208} true;
  v110 := $$velocity[0bv32];
  assert {:sourceloc} {:sourceloc_num 209} true;
  $$velocity[0bv32] := FMUL32(v110, $damping);
  assert {:sourceloc} {:sourceloc_num 210} true;
  v111 := $$velocity[1bv32];
  assert {:sourceloc} {:sourceloc_num 211} true;
  $$velocity[1bv32] := FMUL32(v111, $damping);
  assert {:sourceloc} {:sourceloc_num 212} true;
  v112 := $$velocity[2bv32];
  assert {:sourceloc} {:sourceloc_num 213} true;
  $$velocity[2bv32] := FMUL32(v112, $damping);
  assert {:sourceloc} {:sourceloc_num 214} true;
  v113 := $$velocity[0bv32];
  assert {:sourceloc} {:sourceloc_num 215} true;
  v114 := $$position[0bv32];
  assert {:sourceloc} {:sourceloc_num 216} true;
  $$position[0bv32] := FADD32(v114, FMUL32(v113, $deltaTime));
  assert {:sourceloc} {:sourceloc_num 217} true;
  v115 := $$velocity[1bv32];
  assert {:sourceloc} {:sourceloc_num 218} true;
  v116 := $$position[1bv32];
  assert {:sourceloc} {:sourceloc_num 219} true;
  $$position[1bv32] := FADD32(v116, FMUL32(v115, $deltaTime));
  assert {:sourceloc} {:sourceloc_num 220} true;
  v117 := $$velocity[2bv32];
  assert {:sourceloc} {:sourceloc_num 221} true;
  v118 := $$position[2bv32];
  assert {:sourceloc} {:sourceloc_num 222} true;
  $$position[2bv32] := FADD32(v118, FMUL32(v117, $deltaTime));
  assert {:sourceloc} {:sourceloc_num 223} true;
  v119 := $$position[0bv32];
  assert {:sourceloc} {:sourceloc_num 224} true;
  $$newPos[BV32_MUL(BV32_ADD($deviceOffset, v0), 4bv32)] := v119;
  assert {:sourceloc} {:sourceloc_num 225} true;
  v120 := $$position[1bv32];
  assert {:sourceloc} {:sourceloc_num 226} true;
  $$newPos[BV32_ADD(BV32_MUL(BV32_ADD($deviceOffset, v0), 4bv32), 1bv32)] := v120;
  assert {:sourceloc} {:sourceloc_num 227} true;
  v121 := $$position[2bv32];
  assert {:sourceloc} {:sourceloc_num 228} true;
  $$newPos[BV32_ADD(BV32_MUL(BV32_ADD($deviceOffset, v0), 4bv32), 2bv32)] := v121;
  assert {:sourceloc} {:sourceloc_num 229} true;
  v122 := $$position[3bv32];
  assert {:sourceloc} {:sourceloc_num 230} true;
  $$newPos[BV32_ADD(BV32_MUL(BV32_ADD($deviceOffset, v0), 4bv32), 3bv32)] := v122;
  assert {:sourceloc} {:sourceloc_num 231} true;
  v123 := $$velocity[0bv32];
  assert {:sourceloc} {:sourceloc_num 232} true;
  $$vel[BV32_MUL(BV32_ADD($deviceOffset, v0), 4bv32)] := v123;
  assert {:sourceloc} {:sourceloc_num 233} true;
  v124 := $$velocity[1bv32];
  assert {:sourceloc} {:sourceloc_num 234} true;
  $$vel[BV32_ADD(BV32_MUL(BV32_ADD($deviceOffset, v0), 4bv32), 1bv32)] := v124;
  assert {:sourceloc} {:sourceloc_num 235} true;
  v125 := $$velocity[2bv32];
  assert {:sourceloc} {:sourceloc_num 236} true;
  $$vel[BV32_ADD(BV32_MUL(BV32_ADD($deviceOffset, v0), 4bv32), 2bv32)] := v125;
  assert {:sourceloc} {:sourceloc_num 237} true;
  v126 := $$velocity[3bv32];
  assert {:sourceloc} {:sourceloc_num 238} true;
  $$vel[BV32_ADD(BV32_MUL(BV32_ADD($deviceOffset, v0), 4bv32), 3bv32)] := v126;
  goto $return;
$return:
  assert {:block_sourceloc} {:sourceloc_num 239} true;
  return;
$truebb:
  assume {:partition} v1;
  assert {:block_sourceloc} {:sourceloc_num 240} true;
  goto $if.then;
$falsebb:
  assume {:partition} !v1;
  assert {:block_sourceloc} {:sourceloc_num 241} true;
  goto $if.end;
$truebb0:
  assume {:partition} v14;
  assert {:block_sourceloc} {:sourceloc_num 242} true;
  goto $for.body.i;
$falsebb0:
  assume {:partition} !v14;
  assert {:block_sourceloc} {:sourceloc_num 243} true;
  goto $_ZL16computeBodyAccelIfLb0EEN4vec3IT_E4TypeEN4vec4IS1_E4TypeEPS6_i.exit;
$truebb1:
  assume {:partition} v15;
  assert {:block_sourceloc} {:sourceloc_num 244} true;
  goto $cond.true.i;
$falsebb1:
  assume {:partition} !v15;
  assert {:block_sourceloc} {:sourceloc_num 245} true;
  goto $cond.false.i;
$truebb2:
  assume {:partition} v34;
  assert {:block_sourceloc} {:sourceloc_num 246} true;
  goto $for.body.i.i;
$falsebb2:
  assume {:partition} !v34;
  assert {:block_sourceloc} {:sourceloc_num 247} true;
  goto $_ZL11gravitationIfEN4vec3IT_E4TypeEN4vec4IS1_E4TypeES3_.exit.i;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
procedure {:source_name "rsqrtf"} $rsqrtf($0:bv32) returns ($ret:bv32);
axiom (if group_size_x == 256bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 56bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
