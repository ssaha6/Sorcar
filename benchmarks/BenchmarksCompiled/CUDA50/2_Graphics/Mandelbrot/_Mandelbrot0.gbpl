type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP8(x : [bv32]bv8, y : bv32) returns (z : bv8, A : [bv32]bv8);
procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "dst"} {:global} $$dst : [bv32]bv8;
axiom {:array_info "$$dst"} {:global} {:elem_width 8} {:source_name "dst"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$dst : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$dst : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$dst : bool;

var {:source_name "colors.val"} $$colors.val : [bv32]bv8;
axiom {:array_info "$$colors.val"} {:elem_width 8} {:source_name "colors.val"} {:source_elem_width 32} {:source_dimensions "1"} true;

var {:source_name "color"} $$color : [bv32]bv8;
axiom {:array_info "$$color"} {:elem_width 8} {:source_name "color"} {:source_elem_width 32} {:source_dimensions "1"} true;

var {:source_name "blockCounter"} {:global} $$blockCounter : [bv32]bv32;
axiom {:array_info "$$blockCounter"} {:global} {:elem_width 32} {:source_name "blockCounter"} {:source_elem_width 32} {:source_dimensions "1"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$blockCounter : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$blockCounter : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$blockCounter : bool;

var {:source_name "blockIndex"} {:group_shared} $$_ZZ11Mandelbrot0IfEvP6uchar4iiiT_S2_S2_S2_S2_S0_iiiibE10blockIndex : [bv32]bv32;
axiom {:array_info "$$_ZZ11Mandelbrot0IfEvP6uchar4iiiT_S2_S2_S2_S2_S0_iiiibE10blockIndex"} {:group_shared} {:elem_width 32} {:source_name "blockIndex"} {:source_elem_width 32} {:source_dimensions "1"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ11Mandelbrot0IfEvP6uchar4iiiT_S2_S2_S2_S2_S0_iiiibE10blockIndex : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ11Mandelbrot0IfEvP6uchar4iiiT_S2_S2_S2_S2_S0_iiiibE10blockIndex : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ11Mandelbrot0IfEvP6uchar4iiiT_S2_S2_S2_S2_S0_iiiibE10blockIndex : bool;

var {:source_name "blockX"} {:group_shared} $$_ZZ11Mandelbrot0IfEvP6uchar4iiiT_S2_S2_S2_S2_S0_iiiibE6blockX : [bv32]bv32;
axiom {:array_info "$$_ZZ11Mandelbrot0IfEvP6uchar4iiiT_S2_S2_S2_S2_S0_iiiibE6blockX"} {:group_shared} {:elem_width 32} {:source_name "blockX"} {:source_elem_width 32} {:source_dimensions "1"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ11Mandelbrot0IfEvP6uchar4iiiT_S2_S2_S2_S2_S0_iiiibE6blockX : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ11Mandelbrot0IfEvP6uchar4iiiT_S2_S2_S2_S2_S0_iiiibE6blockX : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ11Mandelbrot0IfEvP6uchar4iiiT_S2_S2_S2_S2_S0_iiiibE6blockX : bool;

var {:source_name "blockY"} {:group_shared} $$_ZZ11Mandelbrot0IfEvP6uchar4iiiT_S2_S2_S2_S2_S0_iiiibE6blockY : [bv32]bv32;
axiom {:array_info "$$_ZZ11Mandelbrot0IfEvP6uchar4iiiT_S2_S2_S2_S2_S0_iiiibE6blockY"} {:group_shared} {:elem_width 32} {:source_name "blockY"} {:source_elem_width 32} {:source_dimensions "1"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ11Mandelbrot0IfEvP6uchar4iiiT_S2_S2_S2_S2_S0_iiiibE6blockY : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ11Mandelbrot0IfEvP6uchar4iiiT_S2_S2_S2_S2_S0_iiiibE6blockY : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ11Mandelbrot0IfEvP6uchar4iiiT_S2_S2_S2_S2_S0_iiiibE6blockY : bool;

const _WATCHED_OFFSET : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:local_id_y} local_id_y : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FADD32(bv32, bv32) : bv32;
function FLT32(bv32, bv32) : bool;
function FMUL32(bv32, bv32) : bv32;
function FSUB32(bv32, bv32) : bv32;
function SI32_TO_FP32(bv32) : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvsdiv"} BV32_SDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvsgt"} BV32_SGT(bv32, bv32) : bool;
function {:bvbuiltin "bvsle"} BV32_SLE(bv32, bv32) : bool;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvuge"} BV32_UGE(bv32, bv32) : bool;
function {:bvbuiltin "bvurem"} BV32_UREM(bv32, bv32) : bv32;
function {:bvbuiltin "zero_extend 24"} BV8_ZEXT32(bv8) : bv32;
procedure {:source_name "Mandelbrot0<float>"} {:kernel} $_Z11Mandelbrot0IfEvP6uchar4iiiT_S2_S2_S2_S2_S0_iiiib($imageW:bv32, $imageH:bv32, $crunch:bv32, $xOff:bv32, $yOff:bv32, $xJP:bv32, $yJP:bv32, $scale:bv32, $colors:bv32, $frame:bv32, $animationFrame:bv32, $gridWidth:bv32, $numBlocks:bv32, $isJ:bv1)
requires {:sourceloc_num 0} (if $imageW == 800bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 1} (if $imageH == 600bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 2} (if $gridWidth == 25bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 3} (if $numBlocks == 475bv32 then 1bv1 else 0bv1) != 0bv1;
{
  var $y.i.0:bv32;
  var $x.i.0:bv32;
  var $xx.i.0:bv32;
  var $yy.i.0:bv32;
  var $xC.i.0:bv32;
  var $yC.i.0:bv32;
  var $y.i.1:bv32;
  var $x.i.1:bv32;
  var $xx.i.1:bv32;
  var $yy.i.1:bv32;
  var $i.i.0:bv32;
  var $retval.i.0:bv32;
  var $cond:bv32;
  var v3:bv32;
  var v135:bv8;
  var v4:bv32;
  var v2:bv32;
  var v0:bool;
  var v1:bool;
  var v121:bv8;
  var v120:bv8;
  var v119:bv8;
  var v126:bv8;
  var v131:bv8;
  var v125:bv8;
  var v132:bv8;
  var v134:bv8;
  var v133:bv8;
  var v124:bv8;
  var v130:bv8;
  var v127:bv8;
  var v9:bv32;
  var v5:bv32;
  var v7:bv32;
  var v16:bool;
  var v25:bv32;
  var v26:bool;
  var v17:bv32;
  var v20:bv32;
  var v18:bv32;
  var v21:bool;
  var v22:bv32;
  var v24:bv32;
  var v23:bv32;
  var v19:bv32;
  var v14:bv32;
  var v8:bv32;
  var v6:bool;
  var v10:bv32;
  var v13:bv32;
  var v11:bool;
  var v12:bool;
  var v15:bool;
  var v48:bv32;
  var v54:bv32;
  var v47:bv32;
  var v56:bool;
  var v50:bv32;
  var v49:bv32;
  var v52:bv32;
  var v53:bv32;
  var v51:bool;
  var v55:bv32;
  var v33:bv32;
  var v27:bv32;
  var v29:bv32;
  var v34:bv32;
  var v32:bv32;
  var v35:bv32;
  var v28:bv32;
  var v30:bv32;
  var v36:bool;
  var v31:bool;
  var v39:bv32;
  var v40:bv32;
  var v38:bv32;
  var v41:bool;
  var v37:bv32;
  var v42:bv32;
  var v43:bv32;
  var v45:bv32;
  var v44:bv32;
  var v46:bool;
  var v59:bv32;
  var v57:bv32;
  var v60:bv32;
  var v62:bv32;
  var v63:bv32;
  var v64:bv32;
  var v66:bool;
  var v58:bv32;
  var v65:bv32;
  var v61:bool;
  var v71:bool;
  var v70:bv32;
  var v73:bv32;
  var v76:bool;
  var v72:bv32;
  var v74:bv32;
  var v67:bv32;
  var v75:bv32;
  var v69:bv32;
  var v68:bv32;
  var v77:bv32;
  var v79:bv32;
  var v78:bv32;
  var v86:bool;
  var v80:bv32;
  var v82:bv32;
  var v83:bv32;
  var v84:bv32;
  var v81:bool;
  var v85:bv32;
  var v88:bv32;
  var v87:bv32;
  var v98:bv32;
  var v90:bv32;
  var v93:bv32;
  var v94:bv32;
  var v92:bv32;
  var v96:bool;
  var v89:bv32;
  var v91:bool;
  var v97:bv32;
  var v95:bv32;
  var v101:bool;
  var v102:bv32;
  var v106:bool;
  var v107:bv32;
  var v108:bv32;
  var v100:bv32;
  var v104:bv32;
  var v105:bv32;
  var v103:bv32;
  var v99:bv32;
  var v112:bool;
  var v113:bool;
  var v114:bv32;
  var v116:bool;
  var v109:bv32;
  var v110:bv32;
  var v115:bv32;
  var v111:bv32;
  var v123:bool;
  var v122:bv32;
  var v118:bv32;
  var v117:bool;
  var v129:bv32;
  var v128:bv32;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  $$colors.val[0bv32] := $colors[8:0];
  $$colors.val[1bv32] := $colors[16:8];
  $$colors.val[2bv32] := $colors[24:16];
  $$colors.val[3bv32] := $colors[32:24];
  goto $while.body;
$while.body:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  call {:sourceloc_num 6} $bugle_barrier(1bv1, 1bv1);
  v0 := local_id_x == 0bv32;
  goto $truebb, $falsebb;
$land.lhs.true:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  v1 := local_id_y == 0bv32;
  goto $truebb0, $falsebb0;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  assert {:sourceloc} {:sourceloc_num 9} true;
  call {:atomic} {:atomic_function "__atomicAdd_unsigned_int"} {:arg1 1bv32} {:parts 1} {:part 1} v2, $$blockCounter := _ATOMIC_OP32($$blockCounter, 0bv32);
  assert {:sourceloc} {:sourceloc_num 10} true;
  $$_ZZ11Mandelbrot0IfEvP6uchar4iiiT_S2_S2_S2_S2_S0_iiiibE10blockIndex[0bv32] := v2;
  assert {:sourceloc} {:sourceloc_num 11} true;
  v3 := $$_ZZ11Mandelbrot0IfEvP6uchar4iiiT_S2_S2_S2_S2_S0_iiiibE10blockIndex[0bv32];
  assert {:sourceloc} {:sourceloc_num 12} true;
  $$_ZZ11Mandelbrot0IfEvP6uchar4iiiT_S2_S2_S2_S2_S0_iiiibE6blockX[0bv32] := BV32_UREM(v3, $gridWidth);
  assert {:sourceloc} {:sourceloc_num 13} true;
  v4 := $$_ZZ11Mandelbrot0IfEvP6uchar4iiiT_S2_S2_S2_S2_S0_iiiibE10blockIndex[0bv32];
  assert {:sourceloc} {:sourceloc_num 14} true;
  $$_ZZ11Mandelbrot0IfEvP6uchar4iiiT_S2_S2_S2_S2_S0_iiiibE6blockY[0bv32] := BV32_UDIV(v4, $gridWidth);
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  call {:sourceloc_num 16} $bugle_barrier(1bv1, 1bv1);
  assert {:sourceloc} {:sourceloc_num 17} true;
  v5 := $$_ZZ11Mandelbrot0IfEvP6uchar4iiiT_S2_S2_S2_S2_S0_iiiibE10blockIndex[0bv32];
  v6 := BV32_UGE(v5, $numBlocks);
  goto $truebb1, $falsebb1;
$if.then.7:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  goto $while.end;
$if.end.8:
  assert {:block_sourceloc} {:sourceloc_num 19} true;
  assert {:sourceloc} {:sourceloc_num 20} true;
  v7 := $$_ZZ11Mandelbrot0IfEvP6uchar4iiiT_S2_S2_S2_S2_S0_iiiibE6blockX[0bv32];
  v8 := BV32_ADD(BV32_MUL(group_size_x, v7), local_id_x);
  assert {:sourceloc} {:sourceloc_num 21} true;
  v9 := $$_ZZ11Mandelbrot0IfEvP6uchar4iiiT_S2_S2_S2_S2_S0_iiiibE6blockY[0bv32];
  v10 := BV32_ADD(BV32_MUL(group_size_y, v9), local_id_y);
  v11 := BV32_SLT(v8, $imageW);
  goto $truebb2, $falsebb2;
$land.lhs.true.12:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  v12 := BV32_SLT(v10, $imageH);
  goto $truebb3, $falsebb3;
$if.then.14:
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  v13 := FADD32(FMUL32(SI32_TO_FP32(v8), $scale), $xOff);
  v14 := FADD32(FMUL32(SI32_TO_FP32(v10), $scale), $yOff);
  v15 := $isJ == 1bv1;
  goto $truebb4, $falsebb4;
$if.then.i:
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  $y.i.0, $x.i.0, $xx.i.0, $yy.i.0, $xC.i.0, $yC.i.0 := v14, v13, FMUL32(v13, v13), FMUL32(v14, v14), $xJP, $yJP;
  goto $if.end.i;
$if.else.i:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  $y.i.0, $x.i.0, $xx.i.0, $yy.i.0, $xC.i.0, $yC.i.0 := 0bv32, 0bv32, 0bv32, 0bv32, v13, v14;
  goto $if.end.i;
$if.end.i:
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  $y.i.1, $x.i.1, $xx.i.1, $yy.i.1, $i.i.0 := $y.i.0, $x.i.0, $xx.i.0, $yy.i.0, $crunch;
  goto $do.body.i;
$do.body.i:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  v16 := FLT32(1082130432bv32, FADD32($xx.i.1, $yy.i.1));
  goto $truebb5, $falsebb5;
$if.then.2.i:
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  $retval.i.0 := BV32_SUB($i.i.0, 1bv32);
  goto $_ZL14CalcMandelbrotIfEiT_S0_S0_S0_ib.exit;
$if.end.3.i:
  assert {:block_sourceloc} {:sourceloc_num 29} true;
  v17 := FADD32(FMUL32(FMUL32($x.i.1, $y.i.1), 1073741824bv32), $yC.i.0);
  v18 := FADD32(FSUB32($xx.i.1, $yy.i.1), $xC.i.0);
  v19 := FMUL32(v17, v17);
  v20 := FMUL32(v18, v18);
  v21 := FLT32(1082130432bv32, FADD32(v20, v19));
  goto $truebb6, $falsebb6;
$if.then.13.i:
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  $retval.i.0 := BV32_SUB($i.i.0, 2bv32);
  goto $_ZL14CalcMandelbrotIfEiT_S0_S0_S0_ib.exit;
$if.end.15.i:
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  v22 := FADD32(FMUL32(FMUL32(v18, v17), 1073741824bv32), $yC.i.0);
  v23 := FADD32(FSUB32(v20, v19), $xC.i.0);
  v24 := FMUL32(v22, v22);
  v25 := FMUL32(v23, v23);
  v26 := FLT32(1082130432bv32, FADD32(v25, v24));
  goto $truebb7, $falsebb7;
$if.then.25.i:
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  $retval.i.0 := BV32_SUB($i.i.0, 3bv32);
  goto $_ZL14CalcMandelbrotIfEiT_S0_S0_S0_ib.exit;
$if.end.27.i:
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  v27 := FADD32(FMUL32(FMUL32(v23, v22), 1073741824bv32), $yC.i.0);
  v28 := FADD32(FSUB32(v25, v24), $xC.i.0);
  v29 := FMUL32(v27, v27);
  v30 := FMUL32(v28, v28);
  v31 := FLT32(1082130432bv32, FADD32(v30, v29));
  goto $truebb8, $falsebb8;
$if.then.37.i:
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  $retval.i.0 := BV32_SUB($i.i.0, 4bv32);
  goto $_ZL14CalcMandelbrotIfEiT_S0_S0_S0_ib.exit;
$if.end.39.i:
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  v32 := FADD32(FMUL32(FMUL32(v28, v27), 1073741824bv32), $yC.i.0);
  v33 := FADD32(FSUB32(v30, v29), $xC.i.0);
  v34 := FMUL32(v32, v32);
  v35 := FMUL32(v33, v33);
  v36 := FLT32(1082130432bv32, FADD32(v35, v34));
  goto $truebb9, $falsebb9;
$if.then.49.i:
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  $retval.i.0 := BV32_SUB($i.i.0, 5bv32);
  goto $_ZL14CalcMandelbrotIfEiT_S0_S0_S0_ib.exit;
$if.end.51.i:
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  v37 := FADD32(FMUL32(FMUL32(v33, v32), 1073741824bv32), $yC.i.0);
  v38 := FADD32(FSUB32(v35, v34), $xC.i.0);
  v39 := FMUL32(v37, v37);
  v40 := FMUL32(v38, v38);
  v41 := FLT32(1082130432bv32, FADD32(v40, v39));
  goto $truebb10, $falsebb10;
$if.then.61.i:
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  $retval.i.0 := BV32_SUB($i.i.0, 6bv32);
  goto $_ZL14CalcMandelbrotIfEiT_S0_S0_S0_ib.exit;
$if.end.63.i:
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  v42 := FADD32(FMUL32(FMUL32(v38, v37), 1073741824bv32), $yC.i.0);
  v43 := FADD32(FSUB32(v40, v39), $xC.i.0);
  v44 := FMUL32(v42, v42);
  v45 := FMUL32(v43, v43);
  v46 := FLT32(1082130432bv32, FADD32(v45, v44));
  goto $truebb11, $falsebb11;
$if.then.73.i:
  assert {:block_sourceloc} {:sourceloc_num 40} true;
  $retval.i.0 := BV32_SUB($i.i.0, 7bv32);
  goto $_ZL14CalcMandelbrotIfEiT_S0_S0_S0_ib.exit;
$if.end.75.i:
  assert {:block_sourceloc} {:sourceloc_num 41} true;
  v47 := FADD32(FMUL32(FMUL32(v43, v42), 1073741824bv32), $yC.i.0);
  v48 := FADD32(FSUB32(v45, v44), $xC.i.0);
  v49 := FMUL32(v47, v47);
  v50 := FMUL32(v48, v48);
  v51 := FLT32(1082130432bv32, FADD32(v50, v49));
  goto $truebb12, $falsebb12;
$if.then.85.i:
  assert {:block_sourceloc} {:sourceloc_num 42} true;
  $retval.i.0 := BV32_SUB($i.i.0, 8bv32);
  goto $_ZL14CalcMandelbrotIfEiT_S0_S0_S0_ib.exit;
$if.end.87.i:
  assert {:block_sourceloc} {:sourceloc_num 43} true;
  v52 := FADD32(FMUL32(FMUL32(v48, v47), 1073741824bv32), $yC.i.0);
  v53 := FADD32(FSUB32(v50, v49), $xC.i.0);
  v54 := FMUL32(v52, v52);
  v55 := FMUL32(v53, v53);
  v56 := FLT32(1082130432bv32, FADD32(v55, v54));
  goto $truebb13, $falsebb13;
$if.then.97.i:
  assert {:block_sourceloc} {:sourceloc_num 44} true;
  $retval.i.0 := BV32_SUB($i.i.0, 9bv32);
  goto $_ZL14CalcMandelbrotIfEiT_S0_S0_S0_ib.exit;
$if.end.99.i:
  assert {:block_sourceloc} {:sourceloc_num 45} true;
  v57 := FADD32(FMUL32(FMUL32(v53, v52), 1073741824bv32), $yC.i.0);
  v58 := FADD32(FSUB32(v55, v54), $xC.i.0);
  v59 := FMUL32(v57, v57);
  v60 := FMUL32(v58, v58);
  v61 := FLT32(1082130432bv32, FADD32(v60, v59));
  goto $truebb14, $falsebb14;
$if.then.109.i:
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  $retval.i.0 := BV32_SUB($i.i.0, 10bv32);
  goto $_ZL14CalcMandelbrotIfEiT_S0_S0_S0_ib.exit;
$if.end.111.i:
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  v62 := FADD32(FMUL32(FMUL32(v58, v57), 1073741824bv32), $yC.i.0);
  v63 := FADD32(FSUB32(v60, v59), $xC.i.0);
  v64 := FMUL32(v62, v62);
  v65 := FMUL32(v63, v63);
  v66 := FLT32(1082130432bv32, FADD32(v65, v64));
  goto $truebb15, $falsebb15;
$if.then.121.i:
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  $retval.i.0 := BV32_SUB($i.i.0, 11bv32);
  goto $_ZL14CalcMandelbrotIfEiT_S0_S0_S0_ib.exit;
$if.end.123.i:
  assert {:block_sourceloc} {:sourceloc_num 49} true;
  v67 := FADD32(FMUL32(FMUL32(v63, v62), 1073741824bv32), $yC.i.0);
  v68 := FADD32(FSUB32(v65, v64), $xC.i.0);
  v69 := FMUL32(v67, v67);
  v70 := FMUL32(v68, v68);
  v71 := FLT32(1082130432bv32, FADD32(v70, v69));
  goto $truebb16, $falsebb16;
$if.then.133.i:
  assert {:block_sourceloc} {:sourceloc_num 50} true;
  $retval.i.0 := BV32_SUB($i.i.0, 12bv32);
  goto $_ZL14CalcMandelbrotIfEiT_S0_S0_S0_ib.exit;
$if.end.135.i:
  assert {:block_sourceloc} {:sourceloc_num 51} true;
  v72 := FADD32(FMUL32(FMUL32(v68, v67), 1073741824bv32), $yC.i.0);
  v73 := FADD32(FSUB32(v70, v69), $xC.i.0);
  v74 := FMUL32(v72, v72);
  v75 := FMUL32(v73, v73);
  v76 := FLT32(1082130432bv32, FADD32(v75, v74));
  goto $truebb17, $falsebb17;
$if.then.145.i:
  assert {:block_sourceloc} {:sourceloc_num 52} true;
  $retval.i.0 := BV32_SUB($i.i.0, 13bv32);
  goto $_ZL14CalcMandelbrotIfEiT_S0_S0_S0_ib.exit;
$if.end.147.i:
  assert {:block_sourceloc} {:sourceloc_num 53} true;
  v77 := FADD32(FMUL32(FMUL32(v73, v72), 1073741824bv32), $yC.i.0);
  v78 := FADD32(FSUB32(v75, v74), $xC.i.0);
  v79 := FMUL32(v77, v77);
  v80 := FMUL32(v78, v78);
  v81 := FLT32(1082130432bv32, FADD32(v80, v79));
  goto $truebb18, $falsebb18;
$if.then.157.i:
  assert {:block_sourceloc} {:sourceloc_num 54} true;
  $retval.i.0 := BV32_SUB($i.i.0, 14bv32);
  goto $_ZL14CalcMandelbrotIfEiT_S0_S0_S0_ib.exit;
$if.end.159.i:
  assert {:block_sourceloc} {:sourceloc_num 55} true;
  v82 := FADD32(FMUL32(FMUL32(v78, v77), 1073741824bv32), $yC.i.0);
  v83 := FADD32(FSUB32(v80, v79), $xC.i.0);
  v84 := FMUL32(v82, v82);
  v85 := FMUL32(v83, v83);
  v86 := FLT32(1082130432bv32, FADD32(v85, v84));
  goto $truebb19, $falsebb19;
$if.then.169.i:
  assert {:block_sourceloc} {:sourceloc_num 56} true;
  $retval.i.0 := BV32_SUB($i.i.0, 15bv32);
  goto $_ZL14CalcMandelbrotIfEiT_S0_S0_S0_ib.exit;
$if.end.171.i:
  assert {:block_sourceloc} {:sourceloc_num 57} true;
  v87 := FADD32(FMUL32(FMUL32(v83, v82), 1073741824bv32), $yC.i.0);
  v88 := FADD32(FSUB32(v85, v84), $xC.i.0);
  v89 := FMUL32(v87, v87);
  v90 := FMUL32(v88, v88);
  v91 := FLT32(1082130432bv32, FADD32(v90, v89));
  goto $truebb20, $falsebb20;
$if.then.181.i:
  assert {:block_sourceloc} {:sourceloc_num 58} true;
  $retval.i.0 := BV32_SUB($i.i.0, 16bv32);
  goto $_ZL14CalcMandelbrotIfEiT_S0_S0_S0_ib.exit;
$if.end.183.i:
  assert {:block_sourceloc} {:sourceloc_num 59} true;
  v92 := FADD32(FMUL32(FMUL32(v88, v87), 1073741824bv32), $yC.i.0);
  v93 := FADD32(FSUB32(v90, v89), $xC.i.0);
  v94 := FMUL32(v92, v92);
  v95 := FMUL32(v93, v93);
  v96 := FLT32(1082130432bv32, FADD32(v95, v94));
  goto $truebb21, $falsebb21;
$if.then.193.i:
  assert {:block_sourceloc} {:sourceloc_num 60} true;
  $retval.i.0 := BV32_SUB($i.i.0, 17bv32);
  goto $_ZL14CalcMandelbrotIfEiT_S0_S0_S0_ib.exit;
$if.end.195.i:
  assert {:block_sourceloc} {:sourceloc_num 61} true;
  v97 := FADD32(FMUL32(FMUL32(v93, v92), 1073741824bv32), $yC.i.0);
  v98 := FADD32(FSUB32(v95, v94), $xC.i.0);
  v99 := FMUL32(v97, v97);
  v100 := FMUL32(v98, v98);
  v101 := FLT32(1082130432bv32, FADD32(v100, v99));
  goto $truebb22, $falsebb22;
$if.then.205.i:
  assert {:block_sourceloc} {:sourceloc_num 62} true;
  $retval.i.0 := BV32_SUB($i.i.0, 18bv32);
  goto $_ZL14CalcMandelbrotIfEiT_S0_S0_S0_ib.exit;
$if.end.207.i:
  assert {:block_sourceloc} {:sourceloc_num 63} true;
  v102 := FADD32(FMUL32(FMUL32(v98, v97), 1073741824bv32), $yC.i.0);
  v103 := FADD32(FSUB32(v100, v99), $xC.i.0);
  v104 := FMUL32(v102, v102);
  v105 := FMUL32(v103, v103);
  v106 := FLT32(1082130432bv32, FADD32(v105, v104));
  goto $truebb23, $falsebb23;
$if.then.217.i:
  assert {:block_sourceloc} {:sourceloc_num 64} true;
  $retval.i.0 := BV32_SUB($i.i.0, 19bv32);
  goto $_ZL14CalcMandelbrotIfEiT_S0_S0_S0_ib.exit;
$if.end.219.i:
  assert {:block_sourceloc} {:sourceloc_num 65} true;
  v107 := FADD32(FMUL32(FMUL32(v103, v102), 1073741824bv32), $yC.i.0);
  v108 := FADD32(FSUB32(v105, v104), $xC.i.0);
  v109 := FMUL32(v107, v107);
  v110 := FMUL32(v108, v108);
  v111 := BV32_SUB($i.i.0, 20bv32);
  v112 := BV32_SLE(v111, 0bv32);
  goto $truebb24, $falsebb24;
$lor.lhs.false.i:
  assert {:block_sourceloc} {:sourceloc_num 66} true;
  v113 := FLT32(1082130432bv32, FADD32(v110, v109));
  goto $truebb25, $falsebb25;
$if.then.231.i:
  assert {:block_sourceloc} {:sourceloc_num 67} true;
  $retval.i.0 := v111;
  goto $_ZL14CalcMandelbrotIfEiT_S0_S0_S0_ib.exit;
$if.end.232.i:
  assert {:block_sourceloc} {:sourceloc_num 68} true;
  v114 := FADD32(FMUL32(FMUL32(v108, v107), 1073741824bv32), $yC.i.0);
  v115 := FADD32(FSUB32(v110, v109), $xC.i.0);
  $y.i.1, $x.i.1, $xx.i.1, $yy.i.1, $i.i.0 := v114, v115, FMUL32(v115, v115), FMUL32(v114, v114), v111;
  goto $do.body.i;
$_ZL14CalcMandelbrotIfEiT_S0_S0_S0_ib.exit:
  assert {:block_sourceloc} {:sourceloc_num 69} true;
  v116 := BV32_SGT($retval.i.0, 0bv32);
  goto $truebb26, $falsebb26;
$cond.true:
  assert {:block_sourceloc} {:sourceloc_num 70} true;
  $cond := BV32_SUB($crunch, $retval.i.0);
  goto $cond.end;
$cond.false:
  assert {:block_sourceloc} {:sourceloc_num 71} true;
  $cond := 0bv32;
  goto $cond.end;
$cond.end:
  assert {:block_sourceloc} {:sourceloc_num 72} true;
  v117 := $cond != 0bv32;
  goto $truebb27, $falsebb27;
$if.then.23:
  assert {:block_sourceloc} {:sourceloc_num 73} true;
  v118 := BV32_ADD($cond, $animationFrame);
  assert {:sourceloc} {:sourceloc_num 74} true;
  v119 := $$colors.val[0bv32];
  assert {:sourceloc} {:sourceloc_num 75} true;
  $$color[0bv32] := BV32_MUL(v118, BV8_ZEXT32(v119))[8:0];
  assert {:sourceloc} {:sourceloc_num 76} true;
  v120 := $$colors.val[1bv32];
  assert {:sourceloc} {:sourceloc_num 77} true;
  $$color[1bv32] := BV32_MUL(v118, BV8_ZEXT32(v120))[8:0];
  assert {:sourceloc} {:sourceloc_num 78} true;
  v121 := $$colors.val[2bv32];
  assert {:sourceloc} {:sourceloc_num 79} true;
  $$color[2bv32] := BV32_MUL(v118, BV8_ZEXT32(v121))[8:0];
  goto $if.end.40;
$if.else:
  assert {:block_sourceloc} {:sourceloc_num 80} true;
  assert {:sourceloc} {:sourceloc_num 81} true;
  $$color[0bv32] := 0bv8;
  assert {:sourceloc} {:sourceloc_num 82} true;
  $$color[1bv32] := 0bv8;
  assert {:sourceloc} {:sourceloc_num 83} true;
  $$color[2bv32] := 0bv8;
  goto $if.end.40;
$if.end.40:
  assert {:block_sourceloc} {:sourceloc_num 84} true;
  v122 := BV32_ADD(BV32_MUL($imageW, v10), v8);
  v123 := $frame == 0bv32;
  goto $truebb28, $falsebb28;
$if.then.44:
  assert {:block_sourceloc} {:sourceloc_num 85} true;
  assert {:sourceloc} {:sourceloc_num 86} true;
  $$color[3bv32] := 0bv8;
  assert {:sourceloc} {:sourceloc_num 87} true;
  v124 := $$color[0bv32];
  assert {:sourceloc} {:sourceloc_num 88} true;
  $$dst[BV32_MUL(v122, 4bv32)] := v124;
  assert {:sourceloc} {:sourceloc_num 89} true;
  v125 := $$color[1bv32];
  assert {:sourceloc} {:sourceloc_num 90} true;
  $$dst[BV32_ADD(BV32_MUL(v122, 4bv32), 1bv32)] := v125;
  assert {:sourceloc} {:sourceloc_num 91} true;
  v126 := $$color[2bv32];
  assert {:sourceloc} {:sourceloc_num 92} true;
  $$dst[BV32_ADD(BV32_MUL(v122, 4bv32), 2bv32)] := v126;
  assert {:sourceloc} {:sourceloc_num 93} true;
  v127 := $$color[3bv32];
  assert {:sourceloc} {:sourceloc_num 94} true;
  $$dst[BV32_ADD(BV32_MUL(v122, 4bv32), 3bv32)] := v127;
  goto $if.end.84;
$if.else.45:
  assert {:block_sourceloc} {:sourceloc_num 95} true;
  v128 := BV32_ADD($frame, 1bv32);
  v129 := BV32_SDIV(v128, 2bv32);
  assert {:sourceloc} {:sourceloc_num 96} true;
  v130 := $$dst[BV32_MUL(v122, 4bv32)];
  assert {:sourceloc} {:sourceloc_num 97} true;
  v131 := $$color[0bv32];
  assert {:sourceloc} {:sourceloc_num 98} true;
  $$dst[BV32_MUL(v122, 4bv32)] := BV32_SDIV(BV32_ADD(BV32_ADD(BV32_MUL(BV8_ZEXT32(v130), $frame), BV8_ZEXT32(v131)), v129), v128)[8:0];
  assert {:sourceloc} {:sourceloc_num 99} true;
  v132 := $$dst[BV32_ADD(BV32_MUL(v122, 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 100} true;
  v133 := $$color[1bv32];
  assert {:sourceloc} {:sourceloc_num 101} true;
  $$dst[BV32_ADD(BV32_MUL(v122, 4bv32), 1bv32)] := BV32_SDIV(BV32_ADD(BV32_ADD(BV32_MUL(BV8_ZEXT32(v132), $frame), BV8_ZEXT32(v133)), v129), v128)[8:0];
  assert {:sourceloc} {:sourceloc_num 102} true;
  v134 := $$dst[BV32_ADD(BV32_MUL(v122, 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 103} true;
  v135 := $$color[2bv32];
  assert {:sourceloc} {:sourceloc_num 104} true;
  $$dst[BV32_ADD(BV32_MUL(v122, 4bv32), 2bv32)] := BV32_SDIV(BV32_ADD(BV32_ADD(BV32_MUL(BV8_ZEXT32(v134), $frame), BV8_ZEXT32(v135)), v129), v128)[8:0];
  goto $if.end.84;
$if.end.84:
  assert {:block_sourceloc} {:sourceloc_num 105} true;
  goto $if.end.85;
$if.end.85:
  assert {:block_sourceloc} {:sourceloc_num 106} true;
  goto $while.body;
$while.end:
  assert {:block_sourceloc} {:sourceloc_num 107} true;
  return;
$truebb:
  assume {:partition} v0;
  assert {:block_sourceloc} {:sourceloc_num 108} true;
  goto $land.lhs.true;
$falsebb:
  assume {:partition} !v0;
  assert {:block_sourceloc} {:sourceloc_num 109} true;
  goto $if.end;
$truebb0:
  assume {:partition} v1;
  assert {:block_sourceloc} {:sourceloc_num 110} true;
  goto $if.then;
$falsebb0:
  assume {:partition} !v1;
  assert {:block_sourceloc} {:sourceloc_num 111} true;
  goto $if.end;
$truebb1:
  assume {:partition} v6;
  assert {:block_sourceloc} {:sourceloc_num 112} true;
  goto $if.then.7;
$falsebb1:
  assume {:partition} !v6;
  assert {:block_sourceloc} {:sourceloc_num 113} true;
  goto $if.end.8;
$truebb2:
  assume {:partition} v11;
  assert {:block_sourceloc} {:sourceloc_num 114} true;
  goto $land.lhs.true.12;
$falsebb2:
  assume {:partition} !v11;
  assert {:block_sourceloc} {:sourceloc_num 115} true;
  goto $if.end.85;
$truebb3:
  assume {:partition} v12;
  assert {:block_sourceloc} {:sourceloc_num 116} true;
  goto $if.then.14;
$falsebb3:
  assume {:partition} !v12;
  assert {:block_sourceloc} {:sourceloc_num 117} true;
  goto $if.end.85;
$truebb4:
  assume {:partition} v15;
  assert {:block_sourceloc} {:sourceloc_num 118} true;
  goto $if.then.i;
$falsebb4:
  assume {:partition} !v15;
  assert {:block_sourceloc} {:sourceloc_num 119} true;
  goto $if.else.i;
$truebb5:
  assume {:partition} v16;
  assert {:block_sourceloc} {:sourceloc_num 120} true;
  goto $if.then.2.i;
$falsebb5:
  assume {:partition} !v16;
  assert {:block_sourceloc} {:sourceloc_num 121} true;
  goto $if.end.3.i;
$truebb6:
  assume {:partition} v21;
  assert {:block_sourceloc} {:sourceloc_num 122} true;
  goto $if.then.13.i;
$falsebb6:
  assume {:partition} !v21;
  assert {:block_sourceloc} {:sourceloc_num 123} true;
  goto $if.end.15.i;
$truebb7:
  assume {:partition} v26;
  assert {:block_sourceloc} {:sourceloc_num 124} true;
  goto $if.then.25.i;
$falsebb7:
  assume {:partition} !v26;
  assert {:block_sourceloc} {:sourceloc_num 125} true;
  goto $if.end.27.i;
$truebb8:
  assume {:partition} v31;
  assert {:block_sourceloc} {:sourceloc_num 126} true;
  goto $if.then.37.i;
$falsebb8:
  assume {:partition} !v31;
  assert {:block_sourceloc} {:sourceloc_num 127} true;
  goto $if.end.39.i;
$truebb9:
  assume {:partition} v36;
  assert {:block_sourceloc} {:sourceloc_num 128} true;
  goto $if.then.49.i;
$falsebb9:
  assume {:partition} !v36;
  assert {:block_sourceloc} {:sourceloc_num 129} true;
  goto $if.end.51.i;
$truebb10:
  assume {:partition} v41;
  assert {:block_sourceloc} {:sourceloc_num 130} true;
  goto $if.then.61.i;
$falsebb10:
  assume {:partition} !v41;
  assert {:block_sourceloc} {:sourceloc_num 131} true;
  goto $if.end.63.i;
$truebb11:
  assume {:partition} v46;
  assert {:block_sourceloc} {:sourceloc_num 132} true;
  goto $if.then.73.i;
$falsebb11:
  assume {:partition} !v46;
  assert {:block_sourceloc} {:sourceloc_num 133} true;
  goto $if.end.75.i;
$truebb12:
  assume {:partition} v51;
  assert {:block_sourceloc} {:sourceloc_num 134} true;
  goto $if.then.85.i;
$falsebb12:
  assume {:partition} !v51;
  assert {:block_sourceloc} {:sourceloc_num 135} true;
  goto $if.end.87.i;
$truebb13:
  assume {:partition} v56;
  assert {:block_sourceloc} {:sourceloc_num 136} true;
  goto $if.then.97.i;
$falsebb13:
  assume {:partition} !v56;
  assert {:block_sourceloc} {:sourceloc_num 137} true;
  goto $if.end.99.i;
$truebb14:
  assume {:partition} v61;
  assert {:block_sourceloc} {:sourceloc_num 138} true;
  goto $if.then.109.i;
$falsebb14:
  assume {:partition} !v61;
  assert {:block_sourceloc} {:sourceloc_num 139} true;
  goto $if.end.111.i;
$truebb15:
  assume {:partition} v66;
  assert {:block_sourceloc} {:sourceloc_num 140} true;
  goto $if.then.121.i;
$falsebb15:
  assume {:partition} !v66;
  assert {:block_sourceloc} {:sourceloc_num 141} true;
  goto $if.end.123.i;
$truebb16:
  assume {:partition} v71;
  assert {:block_sourceloc} {:sourceloc_num 142} true;
  goto $if.then.133.i;
$falsebb16:
  assume {:partition} !v71;
  assert {:block_sourceloc} {:sourceloc_num 143} true;
  goto $if.end.135.i;
$truebb17:
  assume {:partition} v76;
  assert {:block_sourceloc} {:sourceloc_num 144} true;
  goto $if.then.145.i;
$falsebb17:
  assume {:partition} !v76;
  assert {:block_sourceloc} {:sourceloc_num 145} true;
  goto $if.end.147.i;
$truebb18:
  assume {:partition} v81;
  assert {:block_sourceloc} {:sourceloc_num 146} true;
  goto $if.then.157.i;
$falsebb18:
  assume {:partition} !v81;
  assert {:block_sourceloc} {:sourceloc_num 147} true;
  goto $if.end.159.i;
$truebb19:
  assume {:partition} v86;
  assert {:block_sourceloc} {:sourceloc_num 148} true;
  goto $if.then.169.i;
$falsebb19:
  assume {:partition} !v86;
  assert {:block_sourceloc} {:sourceloc_num 149} true;
  goto $if.end.171.i;
$truebb20:
  assume {:partition} v91;
  assert {:block_sourceloc} {:sourceloc_num 150} true;
  goto $if.then.181.i;
$falsebb20:
  assume {:partition} !v91;
  assert {:block_sourceloc} {:sourceloc_num 151} true;
  goto $if.end.183.i;
$truebb21:
  assume {:partition} v96;
  assert {:block_sourceloc} {:sourceloc_num 152} true;
  goto $if.then.193.i;
$falsebb21:
  assume {:partition} !v96;
  assert {:block_sourceloc} {:sourceloc_num 153} true;
  goto $if.end.195.i;
$truebb22:
  assume {:partition} v101;
  assert {:block_sourceloc} {:sourceloc_num 154} true;
  goto $if.then.205.i;
$falsebb22:
  assume {:partition} !v101;
  assert {:block_sourceloc} {:sourceloc_num 155} true;
  goto $if.end.207.i;
$truebb23:
  assume {:partition} v106;
  assert {:block_sourceloc} {:sourceloc_num 156} true;
  goto $if.then.217.i;
$falsebb23:
  assume {:partition} !v106;
  assert {:block_sourceloc} {:sourceloc_num 157} true;
  goto $if.end.219.i;
$truebb24:
  assume {:partition} v112;
  assert {:block_sourceloc} {:sourceloc_num 158} true;
  goto $if.then.231.i;
$falsebb24:
  assume {:partition} !v112;
  assert {:block_sourceloc} {:sourceloc_num 159} true;
  goto $lor.lhs.false.i;
$truebb25:
  assume {:partition} v113;
  assert {:block_sourceloc} {:sourceloc_num 160} true;
  goto $if.then.231.i;
$falsebb25:
  assume {:partition} !v113;
  assert {:block_sourceloc} {:sourceloc_num 161} true;
  goto $if.end.232.i;
$truebb26:
  assume {:partition} v116;
  assert {:block_sourceloc} {:sourceloc_num 162} true;
  goto $cond.true;
$falsebb26:
  assume {:partition} !v116;
  assert {:block_sourceloc} {:sourceloc_num 163} true;
  goto $cond.false;
$truebb27:
  assume {:partition} v117;
  assert {:block_sourceloc} {:sourceloc_num 164} true;
  goto $if.then.23;
$falsebb27:
  assume {:partition} !v117;
  assert {:block_sourceloc} {:sourceloc_num 165} true;
  goto $if.else;
$truebb28:
  assume {:partition} v123;
  assert {:block_sourceloc} {:sourceloc_num 166} true;
  goto $if.then.44;
$falsebb28:
  assume {:partition} !v123;
  assert {:block_sourceloc} {:sourceloc_num 167} true;
  goto $if.else.45;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 32bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_y == 32bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 14bv32 then 1bv1 else 0bv1) != 0bv1;
