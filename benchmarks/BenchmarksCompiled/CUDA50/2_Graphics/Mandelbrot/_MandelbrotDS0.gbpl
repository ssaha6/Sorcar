type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP8(x : [bv32]bv8, y : bv32) returns (z : bv8, A : [bv32]bv8);
procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "dst"} {:global} $$dst : [bv32]bv8;
axiom {:array_info "$$dst"} {:global} {:elem_width 8} {:source_name "dst"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$dst : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$dst : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$dst : bool;

var {:source_name "colors.val"} $$colors.val : [bv32]bv8;
axiom {:array_info "$$colors.val"} {:elem_width 8} {:source_name "colors.val"} {:source_elem_width 32} {:source_dimensions "1"} true;

var {:source_name "color"} $$color : [bv32]bv8;
axiom {:array_info "$$color"} {:elem_width 8} {:source_name "color"} {:source_elem_width 32} {:source_dimensions "1"} true;

var {:source_name "blockCounter"} {:global} $$blockCounter : [bv32]bv32;
axiom {:array_info "$$blockCounter"} {:global} {:elem_width 32} {:source_name "blockCounter"} {:source_elem_width 32} {:source_dimensions "1"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$blockCounter : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$blockCounter : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$blockCounter : bool;

var {:source_name "blockIndex"} {:group_shared} $$_ZZ13MandelbrotDS0P6uchar4iiifffffffS_iiiibE10blockIndex : [bv32]bv32;
axiom {:array_info "$$_ZZ13MandelbrotDS0P6uchar4iiifffffffS_iiiibE10blockIndex"} {:group_shared} {:elem_width 32} {:source_name "blockIndex"} {:source_elem_width 32} {:source_dimensions "1"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ13MandelbrotDS0P6uchar4iiifffffffS_iiiibE10blockIndex : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ13MandelbrotDS0P6uchar4iiifffffffS_iiiibE10blockIndex : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ13MandelbrotDS0P6uchar4iiifffffffS_iiiibE10blockIndex : bool;

var {:source_name "blockX"} {:group_shared} $$_ZZ13MandelbrotDS0P6uchar4iiifffffffS_iiiibE6blockX : [bv32]bv32;
axiom {:array_info "$$_ZZ13MandelbrotDS0P6uchar4iiifffffffS_iiiibE6blockX"} {:group_shared} {:elem_width 32} {:source_name "blockX"} {:source_elem_width 32} {:source_dimensions "1"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ13MandelbrotDS0P6uchar4iiifffffffS_iiiibE6blockX : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ13MandelbrotDS0P6uchar4iiifffffffS_iiiibE6blockX : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ13MandelbrotDS0P6uchar4iiifffffffS_iiiibE6blockX : bool;

var {:source_name "blockY"} {:group_shared} $$_ZZ13MandelbrotDS0P6uchar4iiifffffffS_iiiibE6blockY : [bv32]bv32;
axiom {:array_info "$$_ZZ13MandelbrotDS0P6uchar4iiifffffffS_iiiibE6blockY"} {:group_shared} {:elem_width 32} {:source_name "blockY"} {:source_elem_width 32} {:source_dimensions "1"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ13MandelbrotDS0P6uchar4iiifffffffS_iiiibE6blockY : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ13MandelbrotDS0P6uchar4iiifffffffS_iiiibE6blockY : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ13MandelbrotDS0P6uchar4iiifffffffS_iiiibE6blockY : bool;

const _WATCHED_OFFSET : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:local_id_y} local_id_y : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FADD32(bv32, bv32) : bv32;
function FLT32(bv32, bv32) : bool;
function FMUL32(bv32, bv32) : bv32;
function FSUB32(bv32, bv32) : bv32;
function SI32_TO_FP32(bv32) : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvsdiv"} BV32_SDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvsgt"} BV32_SGT(bv32, bv32) : bool;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvuge"} BV32_UGE(bv32, bv32) : bool;
function {:bvbuiltin "bvurem"} BV32_UREM(bv32, bv32) : bv32;
function {:bvbuiltin "zero_extend 24"} BV8_ZEXT32(bv8) : bv32;
procedure {:source_name "MandelbrotDS0"} {:kernel} $_Z13MandelbrotDS0P6uchar4iiifffffffS_iiiib($imageW:bv32, $imageH:bv32, $crunch:bv32, $xOff0:bv32, $xOff1:bv32, $yOff0:bv32, $yOff1:bv32, $xJP:bv32, $yJP:bv32, $scale:bv32, $colors:bv32, $frame:bv32, $animationFrame:bv32, $gridWidth:bv32, $numBlocks:bv32, $isJ:bv1)
requires {:sourceloc_num 0} (if $imageW == 800bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 1} (if $imageH == 600bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 2} (if $gridWidth == 25bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 3} (if $numBlocks == 475bv32 then 1bv1 else 0bv1) != 0bv1;
{
  var $y1.i.0:bv32;
  var $y0.i.0:bv32;
  var $x1.i.0:bv32;
  var $x0.i.0:bv32;
  var $yy1.i.0:bv32;
  var $yy0.i.0:bv32;
  var $xx1.i.0:bv32;
  var $xx0.i.0:bv32;
  var $xC0.i.0:bv32;
  var $xC1.i.0:bv32;
  var $yC0.i.0:bv32;
  var $yC1.i.0:bv32;
  var $y1.i.1:bv32;
  var $y0.i.1:bv32;
  var $x1.i.1:bv32;
  var $x0.i.1:bv32;
  var $sum1.i.0:bv32;
  var $sum0.i.0:bv32;
  var $yy1.i.1:bv32;
  var $yy0.i.1:bv32;
  var $xx1.i.1:bv32;
  var $xx0.i.1:bv32;
  var $i.i.0:bv32;
  var $0:bv1;
  var $cond:bv32;
  var v1:bool;
  var v6:bool;
  var v0:bool;
  var v16:bv32;
  var v10:bv32;
  var v8:bv32;
  var v17:bv32;
  var v11:bool;
  var v15:bv32;
  var v14:bv32;
  var v12:bool;
  var v13:bv32;
  var v32:bv32;
  var v29:bv32;
  var v18:bv32;
  var v23:bv32;
  var v22:bv32;
  var v27:bv32;
  var v20:bv32;
  var v28:bv32;
  var v25:bool;
  var v31:bv32;
  var v26:bv32;
  var v30:bv32;
  var v21:bv32;
  var v19:bv32;
  var v24:bv32;
  var v5:bv32;
  var v4:bv32;
  var v3:bv32;
  var v2:bv32;
  var v134:bv8;
  var v128:bv8;
  var v136:bv8;
  var v133:bv8;
  var v126:bv8;
  var v132:bv8;
  var v129:bv8;
  var v135:bv8;
  var v127:bv8;
  var v137:bv8;
  var v9:bv32;
  var v7:bv32;
  var v122:bv8;
  var v121:bv8;
  var v123:bv8;
  var v48:bv32;
  var v49:bv32;
  var v50:bv32;
  var v52:bv32;
  var v51:bv32;
  var v53:bv32;
  var v44:bv32;
  var v41:bv32;
  var v38:bv32;
  var v37:bv32;
  var v34:bv32;
  var v40:bv32;
  var v35:bv32;
  var v39:bv32;
  var v33:bv32;
  var v43:bv32;
  var v36:bv32;
  var v42:bv32;
  var v45:bv32;
  var v46:bv32;
  var v47:bv32;
  var v54:bv32;
  var v56:bool;
  var v60:bv32;
  var v61:bv32;
  var v59:bv32;
  var v58:bv32;
  var v62:bv32;
  var v57:bv32;
  var v55:bool;
  var v65:bv32;
  var v66:bv32;
  var v64:bv32;
  var v72:bv32;
  var v63:bv32;
  var v67:bv32;
  var v69:bv32;
  var v70:bv32;
  var v68:bv32;
  var v71:bv32;
  var v82:bv32;
  var v74:bv32;
  var v73:bv32;
  var v76:bv32;
  var v75:bv32;
  var v79:bv32;
  var v83:bv32;
  var v84:bv32;
  var v77:bv32;
  var v81:bv32;
  var v78:bv32;
  var v80:bv32;
  var v85:bv32;
  var v86:bv32;
  var v87:bv32;
  var v89:bv32;
  var v92:bv32;
  var v95:bv32;
  var v97:bv32;
  var v93:bv32;
  var v88:bv32;
  var v91:bv32;
  var v98:bv32;
  var v100:bv32;
  var v96:bv32;
  var v90:bv32;
  var v94:bv32;
  var v99:bv32;
  var v107:bv32;
  var v102:bv32;
  var v103:bv32;
  var v101:bv32;
  var v106:bv32;
  var v112:bv32;
  var v109:bv32;
  var v104:bv32;
  var v111:bv32;
  var v108:bv32;
  var v110:bv32;
  var v113:bv32;
  var v105:bv32;
  var v115:bv32;
  var v120:bv32;
  var v114:bv32;
  var v116:bv32;
  var v119:bool;
  var v117:bv32;
  var v118:bool;
  var v124:bv32;
  var v125:bool;
  var v130:bv32;
  var v131:bv32;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  $$colors.val[0bv32] := $colors[8:0];
  $$colors.val[1bv32] := $colors[16:8];
  $$colors.val[2bv32] := $colors[24:16];
  $$colors.val[3bv32] := $colors[32:24];
  goto $while.body;
$while.body:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  call {:sourceloc_num 6} $bugle_barrier(1bv1, 1bv1);
  v0 := local_id_x == 0bv32;
  goto $truebb, $falsebb;
$land.lhs.true:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  v1 := local_id_y == 0bv32;
  goto $truebb0, $falsebb0;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  assert {:sourceloc} {:sourceloc_num 9} true;
  call {:atomic} {:atomic_function "__atomicAdd_unsigned_int"} {:arg1 1bv32} {:parts 1} {:part 1} v2, $$blockCounter := _ATOMIC_OP32($$blockCounter, 0bv32);
  assert {:sourceloc} {:sourceloc_num 10} true;
  $$_ZZ13MandelbrotDS0P6uchar4iiifffffffS_iiiibE10blockIndex[0bv32] := v2;
  assert {:sourceloc} {:sourceloc_num 11} true;
  v3 := $$_ZZ13MandelbrotDS0P6uchar4iiifffffffS_iiiibE10blockIndex[0bv32];
  assert {:sourceloc} {:sourceloc_num 12} true;
  $$_ZZ13MandelbrotDS0P6uchar4iiifffffffS_iiiibE6blockX[0bv32] := BV32_UREM(v3, $gridWidth);
  assert {:sourceloc} {:sourceloc_num 13} true;
  v4 := $$_ZZ13MandelbrotDS0P6uchar4iiifffffffS_iiiibE10blockIndex[0bv32];
  assert {:sourceloc} {:sourceloc_num 14} true;
  $$_ZZ13MandelbrotDS0P6uchar4iiifffffffS_iiiibE6blockY[0bv32] := BV32_UDIV(v4, $gridWidth);
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  call {:sourceloc_num 16} $bugle_barrier(1bv1, 1bv1);
  assert {:sourceloc} {:sourceloc_num 17} true;
  v5 := $$_ZZ13MandelbrotDS0P6uchar4iiifffffffS_iiiibE10blockIndex[0bv32];
  v6 := BV32_UGE(v5, $numBlocks);
  goto $truebb1, $falsebb1;
$if.then.7:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  goto $while.end;
$if.end.8:
  assert {:block_sourceloc} {:sourceloc_num 19} true;
  assert {:sourceloc} {:sourceloc_num 20} true;
  v7 := $$_ZZ13MandelbrotDS0P6uchar4iiifffffffS_iiiibE6blockX[0bv32];
  v8 := BV32_ADD(BV32_MUL(group_size_x, v7), local_id_x);
  assert {:sourceloc} {:sourceloc_num 21} true;
  v9 := $$_ZZ13MandelbrotDS0P6uchar4iiifffffffS_iiiibE6blockY[0bv32];
  v10 := BV32_ADD(BV32_MUL(group_size_y, v9), local_id_y);
  v11 := BV32_SLT(v8, $imageW);
  goto $truebb2, $falsebb2;
$land.lhs.true.12:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  v12 := BV32_SLT(v10, $imageH);
  goto $truebb3, $falsebb3;
$if.then.14:
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  v13 := FMUL32(SI32_TO_FP32(v8), $scale);
  v14 := FMUL32(SI32_TO_FP32(v10), $scale);
  v15 := FADD32(v13, $xOff0);
  v16 := FSUB32(v15, v13);
  v17 := FADD32(FADD32(FADD32(FSUB32($xOff0, v16), FSUB32(v13, FSUB32(v15, v16))), 0bv32), $xOff1);
  v18 := FADD32(v15, v17);
  v19 := FSUB32(v17, FSUB32(v18, v15));
  v20 := FADD32(v14, $yOff0);
  v21 := FSUB32(v20, v14);
  v22 := FADD32(FADD32(FADD32(FSUB32($yOff0, v21), FSUB32(v14, FSUB32(v20, v21))), 0bv32), $yOff1);
  v23 := FADD32(v20, v22);
  v24 := FSUB32(v22, FSUB32(v23, v20));
  v25 := $isJ == 1bv1;
  goto $truebb4, $falsebb4;
$if.then.i:
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  v26 := FMUL32(v23, 1174406144bv32);
  v27 := FMUL32(v23, 1174406144bv32);
  v28 := FSUB32(v26, FSUB32(v26, v23));
  v29 := FSUB32(v27, FSUB32(v27, v23));
  v30 := FSUB32(v23, v28);
  v31 := FSUB32(v23, v29);
  v32 := FMUL32(v23, v23);
  v33 := FADD32(FMUL32(v23, v24), FMUL32(v24, v23));
  v34 := FADD32(v32, v33);
  v35 := FSUB32(v34, v32);
  v36 := FADD32(FADD32(FADD32(FSUB32(v33, v35), FSUB32(v32, FSUB32(v34, v35))), FADD32(FADD32(FADD32(FSUB32(FMUL32(v28, v29), v32), FMUL32(v28, v31)), FMUL32(v30, v29)), FMUL32(v30, v31))), FMUL32(v24, v24));
  v37 := FADD32(v34, v36);
  v38 := FMUL32(v18, 1174406144bv32);
  v39 := FMUL32(v18, 1174406144bv32);
  v40 := FSUB32(v38, FSUB32(v38, v18));
  v41 := FSUB32(v39, FSUB32(v39, v18));
  v42 := FSUB32(v18, v40);
  v43 := FSUB32(v18, v41);
  v44 := FMUL32(v18, v18);
  v45 := FADD32(FMUL32(v18, v19), FMUL32(v19, v18));
  v46 := FADD32(v44, v45);
  v47 := FSUB32(v46, v44);
  v48 := FADD32(FADD32(FADD32(FSUB32(v45, v47), FSUB32(v44, FSUB32(v46, v47))), FADD32(FADD32(FADD32(FSUB32(FMUL32(v40, v41), v44), FMUL32(v40, v43)), FMUL32(v42, v41)), FMUL32(v42, v43))), FMUL32(v19, v19));
  v49 := FADD32(v46, v48);
  $y1.i.0, $y0.i.0, $x1.i.0, $x0.i.0, $yy1.i.0, $yy0.i.0, $xx1.i.0, $xx0.i.0, $xC0.i.0, $xC1.i.0, $yC0.i.0, $yC1.i.0 := v24, v23, v19, v18, FSUB32(v36, FSUB32(v37, v34)), v37, FSUB32(v48, FSUB32(v49, v46)), v49, $xJP, 0bv32, $yJP, 0bv32;
  goto $if.end.i;
$if.else.i:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  $y1.i.0, $y0.i.0, $x1.i.0, $x0.i.0, $yy1.i.0, $yy0.i.0, $xx1.i.0, $xx0.i.0, $xC0.i.0, $xC1.i.0, $yC0.i.0, $yC1.i.0 := 0bv32, 0bv32, 0bv32, 0bv32, 0bv32, 0bv32, 0bv32, 0bv32, v18, v19, v23, v24;
  goto $if.end.i;
$if.end.i:
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  v50 := FADD32($xx0.i.0, $yy0.i.0);
  v51 := FSUB32(v50, $xx0.i.0);
  v52 := FADD32(FADD32(FADD32(FSUB32($yy0.i.0, v51), FSUB32($xx0.i.0, FSUB32(v50, v51))), $xx1.i.0), $yy1.i.0);
  v53 := FADD32(v50, v52);
  $y1.i.1, $y0.i.1, $x1.i.1, $x0.i.1, $sum1.i.0, $sum0.i.0, $yy1.i.1, $yy0.i.1, $xx1.i.1, $xx0.i.1, $i.i.0 := $y1.i.0, $y0.i.0, $x1.i.0, $x0.i.0, FSUB32(v52, FSUB32(v53, v50)), v53, $yy1.i.0, $yy0.i.0, $xx1.i.0, $xx0.i.0, $crunch;
  goto $while.cond.i;
$while.cond.i:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  v54 := BV32_ADD($i.i.0, 4294967295bv32);
  v55 := v54 != 0bv32;
  goto $truebb5, $falsebb5;
$land.rhs.i:
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  $0 := (if FLT32(FADD32($sum0.i.0, $sum1.i.0), 1082130432bv32) then 1bv1 else 0bv1);
  goto $land.end.i;
$land.end.i:
  assert {:block_sourceloc} {:sourceloc_num 29} true;
  v56 := $0 == 1bv1;
  goto $truebb6, $falsebb6;
$while.body.i:
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  v57 := FMUL32($x0.i.1, 1174406144bv32);
  v58 := FMUL32($y0.i.1, 1174406144bv32);
  v59 := FSUB32(v57, FSUB32(v57, $x0.i.1));
  v60 := FSUB32(v58, FSUB32(v58, $y0.i.1));
  v61 := FSUB32($x0.i.1, v59);
  v62 := FSUB32($y0.i.1, v60);
  v63 := FMUL32($x0.i.1, $y0.i.1);
  v64 := FADD32(FMUL32($x0.i.1, $y1.i.1), FMUL32($x1.i.1, $y0.i.1));
  v65 := FADD32(v63, v64);
  v66 := FSUB32(v65, v63);
  v67 := FADD32(FADD32(FADD32(FSUB32(v64, v66), FSUB32(v63, FSUB32(v65, v66))), FADD32(FADD32(FADD32(FSUB32(FMUL32(v59, v60), v63), FMUL32(v59, v62)), FMUL32(v61, v60)), FMUL32(v61, v62))), FMUL32($x1.i.1, $y1.i.1));
  v68 := FADD32(v65, v67);
  v69 := FSUB32(v67, FSUB32(v68, v65));
  v70 := FADD32(v68, v68);
  v71 := FSUB32(v70, v68);
  v72 := FADD32(FADD32(FADD32(FSUB32(v68, v71), FSUB32(v68, FSUB32(v70, v71))), v69), v69);
  v73 := FADD32(v70, v72);
  v74 := FADD32(v73, $yC0.i.0);
  v75 := FSUB32(v74, v73);
  v76 := FADD32(FADD32(FADD32(FSUB32($yC0.i.0, v75), FSUB32(v73, FSUB32(v74, v75))), FSUB32(v72, FSUB32(v73, v70))), $yC1.i.0);
  v77 := FADD32(v74, v76);
  v78 := FSUB32(v76, FSUB32(v77, v74));
  v79 := FSUB32($xx0.i.1, $yy0.i.1);
  v80 := FSUB32(v79, $xx0.i.1);
  v81 := FSUB32(FADD32(FADD32(FSUB32(FSUB32(2147483648bv32, $yy0.i.1), v80), FSUB32($xx0.i.1, FSUB32(v79, v80))), $xx1.i.1), $yy1.i.1);
  v82 := FADD32(v79, v81);
  v83 := FADD32(v82, $xC0.i.0);
  v84 := FSUB32(v83, v82);
  v85 := FADD32(FADD32(FADD32(FSUB32($xC0.i.0, v84), FSUB32(v82, FSUB32(v83, v84))), FSUB32(v81, FSUB32(v82, v79))), $xC1.i.0);
  v86 := FADD32(v83, v85);
  v87 := FSUB32(v85, FSUB32(v86, v83));
  v88 := FMUL32(v77, 1174406144bv32);
  v89 := FMUL32(v77, 1174406144bv32);
  v90 := FSUB32(v88, FSUB32(v88, v77));
  v91 := FSUB32(v89, FSUB32(v89, v77));
  v92 := FSUB32(v77, v90);
  v93 := FSUB32(v77, v91);
  v94 := FMUL32(v77, v77);
  v95 := FADD32(FMUL32(v77, v78), FMUL32(v78, v77));
  v96 := FADD32(v94, v95);
  v97 := FSUB32(v96, v94);
  v98 := FADD32(FADD32(FADD32(FSUB32(v95, v97), FSUB32(v94, FSUB32(v96, v97))), FADD32(FADD32(FADD32(FSUB32(FMUL32(v90, v91), v94), FMUL32(v90, v93)), FMUL32(v92, v91)), FMUL32(v92, v93))), FMUL32(v78, v78));
  v99 := FADD32(v96, v98);
  v100 := FSUB32(v98, FSUB32(v99, v96));
  v101 := FMUL32(v86, 1174406144bv32);
  v102 := FMUL32(v86, 1174406144bv32);
  v103 := FSUB32(v101, FSUB32(v101, v86));
  v104 := FSUB32(v102, FSUB32(v102, v86));
  v105 := FSUB32(v86, v103);
  v106 := FSUB32(v86, v104);
  v107 := FMUL32(v86, v86);
  v108 := FADD32(FMUL32(v86, v87), FMUL32(v87, v86));
  v109 := FADD32(v107, v108);
  v110 := FSUB32(v109, v107);
  v111 := FADD32(FADD32(FADD32(FSUB32(v108, v110), FSUB32(v107, FSUB32(v109, v110))), FADD32(FADD32(FADD32(FSUB32(FMUL32(v103, v104), v107), FMUL32(v103, v106)), FMUL32(v105, v104)), FMUL32(v105, v106))), FMUL32(v87, v87));
  v112 := FADD32(v109, v111);
  v113 := FSUB32(v111, FSUB32(v112, v109));
  v114 := FADD32(v112, v99);
  v115 := FSUB32(v114, v112);
  v116 := FADD32(FADD32(FADD32(FSUB32(v99, v115), FSUB32(v112, FSUB32(v114, v115))), v113), v100);
  v117 := FADD32(v114, v116);
  $y1.i.1, $y0.i.1, $x1.i.1, $x0.i.1, $sum1.i.0, $sum0.i.0, $yy1.i.1, $yy0.i.1, $xx1.i.1, $xx0.i.1, $i.i.0 := v78, v77, v87, v86, FSUB32(v116, FSUB32(v117, v114)), v117, v100, v99, v113, v112, v54;
  goto $while.cond.i;
$_ZL16CalcMandelbrotDSffffffib.exit:
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  v118 := BV32_SGT(v54, 0bv32);
  goto $truebb7, $falsebb7;
$cond.true:
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  $cond := BV32_SUB($crunch, v54);
  goto $cond.end;
$cond.false:
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  $cond := 0bv32;
  goto $cond.end;
$cond.end:
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  v119 := $cond != 0bv32;
  goto $truebb8, $falsebb8;
$if.then.21:
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  v120 := BV32_ADD($cond, $animationFrame);
  assert {:sourceloc} {:sourceloc_num 36} true;
  v121 := $$colors.val[0bv32];
  assert {:sourceloc} {:sourceloc_num 37} true;
  $$color[0bv32] := BV32_MUL(v120, BV8_ZEXT32(v121))[8:0];
  assert {:sourceloc} {:sourceloc_num 38} true;
  v122 := $$colors.val[1bv32];
  assert {:sourceloc} {:sourceloc_num 39} true;
  $$color[1bv32] := BV32_MUL(v120, BV8_ZEXT32(v122))[8:0];
  assert {:sourceloc} {:sourceloc_num 40} true;
  v123 := $$colors.val[2bv32];
  assert {:sourceloc} {:sourceloc_num 41} true;
  $$color[2bv32] := BV32_MUL(v120, BV8_ZEXT32(v123))[8:0];
  goto $if.end.38;
$if.else:
  assert {:block_sourceloc} {:sourceloc_num 42} true;
  assert {:sourceloc} {:sourceloc_num 43} true;
  $$color[0bv32] := 0bv8;
  assert {:sourceloc} {:sourceloc_num 44} true;
  $$color[1bv32] := 0bv8;
  assert {:sourceloc} {:sourceloc_num 45} true;
  $$color[2bv32] := 0bv8;
  goto $if.end.38;
$if.end.38:
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  v124 := BV32_ADD(BV32_MUL($imageW, v10), v8);
  v125 := $frame == 0bv32;
  goto $truebb9, $falsebb9;
$if.then.42:
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  assert {:sourceloc} {:sourceloc_num 48} true;
  $$color[3bv32] := 0bv8;
  assert {:sourceloc} {:sourceloc_num 49} true;
  v126 := $$color[0bv32];
  assert {:sourceloc} {:sourceloc_num 50} true;
  $$dst[BV32_MUL(v124, 4bv32)] := v126;
  assert {:sourceloc} {:sourceloc_num 51} true;
  v127 := $$color[1bv32];
  assert {:sourceloc} {:sourceloc_num 52} true;
  $$dst[BV32_ADD(BV32_MUL(v124, 4bv32), 1bv32)] := v127;
  assert {:sourceloc} {:sourceloc_num 53} true;
  v128 := $$color[2bv32];
  assert {:sourceloc} {:sourceloc_num 54} true;
  $$dst[BV32_ADD(BV32_MUL(v124, 4bv32), 2bv32)] := v128;
  assert {:sourceloc} {:sourceloc_num 55} true;
  v129 := $$color[3bv32];
  assert {:sourceloc} {:sourceloc_num 56} true;
  $$dst[BV32_ADD(BV32_MUL(v124, 4bv32), 3bv32)] := v129;
  goto $if.end.82;
$if.else.43:
  assert {:block_sourceloc} {:sourceloc_num 57} true;
  v130 := BV32_ADD($frame, 1bv32);
  v131 := BV32_SDIV(v130, 2bv32);
  assert {:sourceloc} {:sourceloc_num 58} true;
  v132 := $$dst[BV32_MUL(v124, 4bv32)];
  assert {:sourceloc} {:sourceloc_num 59} true;
  v133 := $$color[0bv32];
  assert {:sourceloc} {:sourceloc_num 60} true;
  $$dst[BV32_MUL(v124, 4bv32)] := BV32_SDIV(BV32_ADD(BV32_ADD(BV32_MUL(BV8_ZEXT32(v132), $frame), BV8_ZEXT32(v133)), v131), v130)[8:0];
  assert {:sourceloc} {:sourceloc_num 61} true;
  v134 := $$dst[BV32_ADD(BV32_MUL(v124, 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 62} true;
  v135 := $$color[1bv32];
  assert {:sourceloc} {:sourceloc_num 63} true;
  $$dst[BV32_ADD(BV32_MUL(v124, 4bv32), 1bv32)] := BV32_SDIV(BV32_ADD(BV32_ADD(BV32_MUL(BV8_ZEXT32(v134), $frame), BV8_ZEXT32(v135)), v131), v130)[8:0];
  assert {:sourceloc} {:sourceloc_num 64} true;
  v136 := $$dst[BV32_ADD(BV32_MUL(v124, 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 65} true;
  v137 := $$color[2bv32];
  assert {:sourceloc} {:sourceloc_num 66} true;
  $$dst[BV32_ADD(BV32_MUL(v124, 4bv32), 2bv32)] := BV32_SDIV(BV32_ADD(BV32_ADD(BV32_MUL(BV8_ZEXT32(v136), $frame), BV8_ZEXT32(v137)), v131), v130)[8:0];
  goto $if.end.82;
$if.end.82:
  assert {:block_sourceloc} {:sourceloc_num 67} true;
  goto $if.end.83;
$if.end.83:
  assert {:block_sourceloc} {:sourceloc_num 68} true;
  goto $while.body;
$while.end:
  assert {:block_sourceloc} {:sourceloc_num 69} true;
  return;
$truebb:
  assume {:partition} v0;
  assert {:block_sourceloc} {:sourceloc_num 70} true;
  goto $land.lhs.true;
$falsebb:
  assume {:partition} !v0;
  assert {:block_sourceloc} {:sourceloc_num 71} true;
  goto $if.end;
$truebb0:
  assume {:partition} v1;
  assert {:block_sourceloc} {:sourceloc_num 72} true;
  goto $if.then;
$falsebb0:
  assume {:partition} !v1;
  assert {:block_sourceloc} {:sourceloc_num 73} true;
  goto $if.end;
$truebb1:
  assume {:partition} v6;
  assert {:block_sourceloc} {:sourceloc_num 74} true;
  goto $if.then.7;
$falsebb1:
  assume {:partition} !v6;
  assert {:block_sourceloc} {:sourceloc_num 75} true;
  goto $if.end.8;
$truebb2:
  assume {:partition} v11;
  assert {:block_sourceloc} {:sourceloc_num 76} true;
  goto $land.lhs.true.12;
$falsebb2:
  assume {:partition} !v11;
  assert {:block_sourceloc} {:sourceloc_num 77} true;
  goto $if.end.83;
$truebb3:
  assume {:partition} v12;
  assert {:block_sourceloc} {:sourceloc_num 78} true;
  goto $if.then.14;
$falsebb3:
  assume {:partition} !v12;
  assert {:block_sourceloc} {:sourceloc_num 79} true;
  goto $if.end.83;
$truebb4:
  assume {:partition} v25;
  assert {:block_sourceloc} {:sourceloc_num 80} true;
  goto $if.then.i;
$falsebb4:
  assume {:partition} !v25;
  assert {:block_sourceloc} {:sourceloc_num 81} true;
  goto $if.else.i;
$truebb5:
  assume {:partition} v55;
  assert {:block_sourceloc} {:sourceloc_num 82} true;
  goto $land.rhs.i;
$falsebb5:
  assume {:partition} !v55;
  assert {:block_sourceloc} {:sourceloc_num 83} true;
  $0 := 0bv1;
  goto $land.end.i;
$truebb6:
  assume {:partition} v56;
  assert {:block_sourceloc} {:sourceloc_num 84} true;
  goto $while.body.i;
$falsebb6:
  assume {:partition} !v56;
  assert {:block_sourceloc} {:sourceloc_num 85} true;
  goto $_ZL16CalcMandelbrotDSffffffib.exit;
$truebb7:
  assume {:partition} v118;
  assert {:block_sourceloc} {:sourceloc_num 86} true;
  goto $cond.true;
$falsebb7:
  assume {:partition} !v118;
  assert {:block_sourceloc} {:sourceloc_num 87} true;
  goto $cond.false;
$truebb8:
  assume {:partition} v119;
  assert {:block_sourceloc} {:sourceloc_num 88} true;
  goto $if.then.21;
$falsebb8:
  assume {:partition} !v119;
  assert {:block_sourceloc} {:sourceloc_num 89} true;
  goto $if.else;
$truebb9:
  assume {:partition} v125;
  assert {:block_sourceloc} {:sourceloc_num 90} true;
  goto $if.then.42;
$falsebb9:
  assume {:partition} !v125;
  assert {:block_sourceloc} {:sourceloc_num 91} true;
  goto $if.else.43;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 32bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_y == 32bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 14bv32 then 1bv1 else 0bv1) != 0bv1;
