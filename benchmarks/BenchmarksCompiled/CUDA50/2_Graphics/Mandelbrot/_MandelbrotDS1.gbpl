type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP8(x : [bv32]bv8, y : bv32) returns (z : bv8, A : [bv32]bv8);
procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "dst"} {:global} $$dst : [bv32]bv8;
axiom {:array_info "$$dst"} {:global} {:elem_width 8} {:source_name "dst"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$dst : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$dst : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$dst : bool;

var {:source_name "colors.val"} $$colors.val : [bv32]bv8;
axiom {:array_info "$$colors.val"} {:elem_width 8} {:source_name "colors.val"} {:source_elem_width 32} {:source_dimensions "1"} true;

var {:source_name "pixelColor"} $$pixelColor : [bv32]bv8;
axiom {:array_info "$$pixelColor"} {:elem_width 8} {:source_name "pixelColor"} {:source_elem_width 32} {:source_dimensions "1"} true;

var {:source_name "color"} $$color : [bv32]bv8;
axiom {:array_info "$$color"} {:elem_width 8} {:source_name "color"} {:source_elem_width 32} {:source_dimensions "1"} true;

var {:source_name "blockCounter"} {:global} $$blockCounter : [bv32]bv32;
axiom {:array_info "$$blockCounter"} {:global} {:elem_width 32} {:source_name "blockCounter"} {:source_elem_width 32} {:source_dimensions "1"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$blockCounter : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$blockCounter : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$blockCounter : bool;

var {:source_name "blockIndex"} {:group_shared} $$_ZZ13MandelbrotDS1P6uchar4iiifffffffS_iiiibE10blockIndex : [bv32]bv32;
axiom {:array_info "$$_ZZ13MandelbrotDS1P6uchar4iiifffffffS_iiiibE10blockIndex"} {:group_shared} {:elem_width 32} {:source_name "blockIndex"} {:source_elem_width 32} {:source_dimensions "1"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ13MandelbrotDS1P6uchar4iiifffffffS_iiiibE10blockIndex : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ13MandelbrotDS1P6uchar4iiifffffffS_iiiibE10blockIndex : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ13MandelbrotDS1P6uchar4iiifffffffS_iiiibE10blockIndex : bool;

var {:source_name "blockX"} {:group_shared} $$_ZZ13MandelbrotDS1P6uchar4iiifffffffS_iiiibE6blockX : [bv32]bv32;
axiom {:array_info "$$_ZZ13MandelbrotDS1P6uchar4iiifffffffS_iiiibE6blockX"} {:group_shared} {:elem_width 32} {:source_name "blockX"} {:source_elem_width 32} {:source_dimensions "1"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ13MandelbrotDS1P6uchar4iiifffffffS_iiiibE6blockX : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ13MandelbrotDS1P6uchar4iiifffffffS_iiiibE6blockX : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ13MandelbrotDS1P6uchar4iiifffffffS_iiiibE6blockX : bool;

var {:source_name "blockY"} {:group_shared} $$_ZZ13MandelbrotDS1P6uchar4iiifffffffS_iiiibE6blockY : [bv32]bv32;
axiom {:array_info "$$_ZZ13MandelbrotDS1P6uchar4iiifffffffS_iiiibE6blockY"} {:group_shared} {:elem_width 32} {:source_name "blockY"} {:source_elem_width 32} {:source_dimensions "1"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ13MandelbrotDS1P6uchar4iiifffffffS_iiiibE6blockY : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ13MandelbrotDS1P6uchar4iiifffffffS_iiiibE6blockY : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ13MandelbrotDS1P6uchar4iiifffffffS_iiiibE6blockY : bool;

const _WATCHED_OFFSET : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:local_id_y} local_id_y : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FADD32(bv32, bv32) : bv32;
function FLT32(bv32, bv32) : bool;
function FMUL32(bv32, bv32) : bv32;
function FSUB32(bv32, bv32) : bv32;
function SI32_TO_FP32(bv32) : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvsdiv"} BV32_SDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvsgt"} BV32_SGT(bv32, bv32) : bool;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvuge"} BV32_UGE(bv32, bv32) : bool;
function {:bvbuiltin "bvurem"} BV32_UREM(bv32, bv32) : bv32;
function {:bvbuiltin "zero_extend 24"} BV8_ZEXT32(bv8) : bv32;
function {:bvbuiltin "zero_extend 31"} BV1_ZEXT32(bv1) : bv32;
procedure {:source_name "MandelbrotDS1"} {:kernel} $_Z13MandelbrotDS1P6uchar4iiifffffffS_iiiib($imageW:bv32, $imageH:bv32, $crunch:bv32, $xOff0:bv32, $xOff1:bv32, $yOff0:bv32, $yOff1:bv32, $xJP:bv32, $yJP:bv32, $scale:bv32, $colors:bv32, $frame:bv32, $animationFrame:bv32, $gridWidth:bv32, $numBlocks:bv32, $isJ:bv1)
requires {:sourceloc_num 0} (if $imageW == 800bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 1} (if $imageH == 600bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 2} (if $gridWidth == 25bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 3} (if $numBlocks == 475bv32 then 1bv1 else 0bv1) != 0bv1;
{
  var $count.0:bv32;
  var $cond.i:bv32;
  var $0:bv1;
  var $cond21.i:bv32;
  var $cond28.i:bv32;
  var $count.1:bv32;
  var $cond.i.249:bv32;
  var $1:bv1;
  var $cond21.i.257:bv32;
  var $cond28.i.265:bv32;
  var $count.2:bv32;
  var $cond.i.204:bv32;
  var $2:bv1;
  var $cond21.i.212:bv32;
  var $cond28.i.220:bv32;
  var $count.3:bv32;
  var $cond.i.159:bv32;
  var $3:bv1;
  var $cond21.i.167:bv32;
  var $cond28.i.175:bv32;
  var $y1.i.0:bv32;
  var $y0.i.0:bv32;
  var $x1.i.110.0:bv32;
  var $x0.i.0:bv32;
  var $yy1.i.0:bv32;
  var $yy0.i.0:bv32;
  var $xx1.i.0:bv32;
  var $xx0.i.0:bv32;
  var $xC0.i.0:bv32;
  var $xC1.i.0:bv32;
  var $yC0.i.0:bv32;
  var $yC1.i.0:bv32;
  var $y1.i.1:bv32;
  var $y0.i.1:bv32;
  var $x1.i.110.1:bv32;
  var $x0.i.1:bv32;
  var $sum1.i.0:bv32;
  var $sum0.i.0:bv32;
  var $yy1.i.1:bv32;
  var $yy0.i.1:bv32;
  var $xx1.i.1:bv32;
  var $xx0.i.1:bv32;
  var $i.i.0:bv32;
  var $4:bv1;
  var $cond:bv32;
  var v0:bool;
  var v1:bool;
  var v8:bv32;
  var v6:bool;
  var v10:bv32;
  var v11:bool;
  var v12:bool;
  var v13:bv32;
  var v24:bv32;
  var v21:bv32;
  var v18:bool;
  var v27:bv32;
  var v28:bool;
  var v2:bv32;
  var v4:bv32;
  var v14:bv8;
  var v7:bv32;
  var v5:bv32;
  var v9:bv32;
  var v3:bv32;
  var v16:bv8;
  var v17:bv8;
  var v15:bv8;
  var v19:bv8;
  var v23:bv8;
  var v20:bv8;
  var v25:bv8;
  var v26:bv8;
  var v22:bv8;
  var v40:bv8;
  var v35:bv8;
  var v34:bv8;
  var v37:bv8;
  var v41:bv8;
  var v38:bv8;
  var v49:bv8;
  var v52:bv8;
  var v53:bv8;
  var v55:bv8;
  var v50:bv8;
  var v56:bv8;
  var v64:bv8;
  var v65:bv8;
  var v68:bv8;
  var v71:bv8;
  var v67:bv8;
  var v70:bv8;
  var v30:bool;
  var v31:bool;
  var v32:bool;
  var v33:bool;
  var v36:bv32;
  var v39:bv32;
  var v44:bool;
  var v42:bv32;
  var v46:bool;
  var v43:bool;
  var v45:bool;
  var v29:bool;
  var v77:bool;
  var v76:bool;
  var v75:bool;
  var v74:bool;
  var v78:bool;
  var v79:bv32;
  var v81:bv32;
  var v82:bv32;
  var v80:bv32;
  var v48:bool;
  var v47:bool;
  var v58:bool;
  var v59:bool;
  var v54:bv32;
  var v57:bv32;
  var v51:bv32;
  var v60:bool;
  var v62:bool;
  var v61:bool;
  var v66:bv32;
  var v63:bool;
  var v69:bv32;
  var v73:bool;
  var v72:bv32;
  var v118:bv32;
  var v117:bv32;
  var v119:bv32;
  var v116:bv32;
  var v126:bv32;
  var v127:bv32;
  var v120:bv32;
  var v121:bool;
  var v122:bool;
  var v123:bv32;
  var v124:bv32;
  var v125:bv32;
  var v129:bv32;
  var v131:bv32;
  var v134:bv32;
  var v132:bv32;
  var v135:bv32;
  var v136:bv32;
  var v137:bv32;
  var v133:bv32;
  var v128:bv32;
  var v130:bv32;
  var v83:bv32;
  var v86:bv32;
  var v91:bool;
  var v88:bv32;
  var v84:bv32;
  var v93:bv32;
  var v94:bv32;
  var v95:bv32;
  var v97:bv32;
  var v85:bv32;
  var v90:bv32;
  var v92:bv32;
  var v89:bv32;
  var v96:bv32;
  var v98:bv32;
  var v87:bv32;
  var v108:bv32;
  var v104:bv32;
  var v109:bv32;
  var v110:bv32;
  var v103:bv32;
  var v100:bv32;
  var v101:bv32;
  var v99:bv32;
  var v102:bv32;
  var v105:bv32;
  var v106:bv32;
  var v107:bv32;
  var v111:bv32;
  var v115:bv32;
  var v114:bv32;
  var v112:bv32;
  var v113:bv32;
  var v188:bv8;
  var v187:bv8;
  var v189:bv8;
  var v196:bv8;
  var v197:bv8;
  var v194:bv8;
  var v192:bv8;
  var v193:bv8;
  var v195:bv8;
  var v145:bv32;
  var v150:bv32;
  var v147:bv32;
  var v144:bv32;
  var v139:bv32;
  var v149:bv32;
  var v146:bv32;
  var v138:bv32;
  var v142:bv32;
  var v143:bv32;
  var v148:bv32;
  var v141:bv32;
  var v140:bv32;
  var v154:bv32;
  var v155:bv32;
  var v152:bv32;
  var v156:bv32;
  var v153:bv32;
  var v151:bv32;
  var v159:bv32;
  var v157:bv32;
  var v158:bv32;
  var v162:bv32;
  var v163:bv32;
  var v160:bv32;
  var v161:bv32;
  var v174:bv32;
  var v165:bv32;
  var v166:bv32;
  var v168:bv32;
  var v173:bv32;
  var v167:bv32;
  var v169:bv32;
  var v172:bv32;
  var v171:bv32;
  var v164:bv32;
  var v170:bv32;
  var v175:bv32;
  var v176:bv32;
  var v183:bv32;
  var v181:bv32;
  var v180:bv32;
  var v178:bv32;
  var v184:bool;
  var v182:bv32;
  var v177:bv32;
  var v179:bv32;
  var v185:bool;
  var v186:bv32;
  var v191:bv32;
  var v190:bv32;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  $$colors.val[0bv32] := $colors[8:0];
  $$colors.val[1bv32] := $colors[16:8];
  $$colors.val[2bv32] := $colors[24:16];
  $$colors.val[3bv32] := $colors[32:24];
  goto $while.body;
$while.body:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  call {:sourceloc_num 6} $bugle_barrier(1bv1, 1bv1);
  v0 := local_id_x == 0bv32;
  goto $truebb, $falsebb;
$land.lhs.true:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  v1 := local_id_y == 0bv32;
  goto $truebb0, $falsebb0;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  assert {:sourceloc} {:sourceloc_num 9} true;
  call {:atomic} {:atomic_function "__atomicAdd_unsigned_int"} {:arg1 1bv32} {:parts 1} {:part 1} v2, $$blockCounter := _ATOMIC_OP32($$blockCounter, 0bv32);
  assert {:sourceloc} {:sourceloc_num 10} true;
  $$_ZZ13MandelbrotDS1P6uchar4iiifffffffS_iiiibE10blockIndex[0bv32] := v2;
  assert {:sourceloc} {:sourceloc_num 11} true;
  v3 := $$_ZZ13MandelbrotDS1P6uchar4iiifffffffS_iiiibE10blockIndex[0bv32];
  assert {:sourceloc} {:sourceloc_num 12} true;
  $$_ZZ13MandelbrotDS1P6uchar4iiifffffffS_iiiibE6blockX[0bv32] := BV32_UREM(v3, $gridWidth);
  assert {:sourceloc} {:sourceloc_num 13} true;
  v4 := $$_ZZ13MandelbrotDS1P6uchar4iiifffffffS_iiiibE10blockIndex[0bv32];
  assert {:sourceloc} {:sourceloc_num 14} true;
  $$_ZZ13MandelbrotDS1P6uchar4iiifffffffS_iiiibE6blockY[0bv32] := BV32_UDIV(v4, $gridWidth);
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  call {:sourceloc_num 16} $bugle_barrier(1bv1, 1bv1);
  assert {:sourceloc} {:sourceloc_num 17} true;
  v5 := $$_ZZ13MandelbrotDS1P6uchar4iiifffffffS_iiiibE10blockIndex[0bv32];
  v6 := BV32_UGE(v5, $numBlocks);
  goto $truebb1, $falsebb1;
$if.then.7:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  goto $while.end;
$if.end.8:
  assert {:block_sourceloc} {:sourceloc_num 19} true;
  assert {:sourceloc} {:sourceloc_num 20} true;
  v7 := $$_ZZ13MandelbrotDS1P6uchar4iiifffffffS_iiiibE6blockX[0bv32];
  v8 := BV32_ADD(BV32_MUL(group_size_x, v7), local_id_x);
  assert {:sourceloc} {:sourceloc_num 21} true;
  v9 := $$_ZZ13MandelbrotDS1P6uchar4iiifffffffS_iiiibE6blockY[0bv32];
  v10 := BV32_ADD(BV32_MUL(group_size_y, v9), local_id_y);
  v11 := BV32_SLT(v8, $imageW);
  goto $truebb2, $falsebb2;
$land.lhs.true.12:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  v12 := BV32_SLT(v10, $imageH);
  goto $truebb3, $falsebb3;
$if.then.14:
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  v13 := BV32_ADD(BV32_MUL($imageW, v10), v8);
  assert {:sourceloc} {:sourceloc_num 24} true;
  v14 := $$dst[BV32_MUL(v13, 4bv32)];
  assert {:sourceloc} {:sourceloc_num 25} true;
  $$pixelColor[0bv32] := v14;
  assert {:sourceloc} {:sourceloc_num 26} true;
  v15 := $$dst[BV32_ADD(BV32_MUL(v13, 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 27} true;
  $$pixelColor[1bv32] := v15;
  assert {:sourceloc} {:sourceloc_num 28} true;
  v16 := $$dst[BV32_ADD(BV32_MUL(v13, 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 29} true;
  $$pixelColor[2bv32] := v16;
  assert {:sourceloc} {:sourceloc_num 30} true;
  v17 := $$dst[BV32_ADD(BV32_MUL(v13, 4bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 31} true;
  $$pixelColor[3bv32] := v17;
  v18 := BV32_SGT(v8, 0bv32);
  goto $truebb4, $falsebb4;
$if.then.18:
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  assert {:sourceloc} {:sourceloc_num 33} true;
  v19 := $$dst[BV32_MUL(BV32_SUB(v13, 1bv32), 4bv32)];
  assert {:sourceloc} {:sourceloc_num 34} true;
  v20 := $$pixelColor[0bv32];
  v21 := BV32_SUB(BV8_ZEXT32(v19), BV8_ZEXT32(v20));
  assert {:sourceloc} {:sourceloc_num 35} true;
  v22 := $$dst[BV32_ADD(BV32_MUL(BV32_SUB(v13, 1bv32), 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 36} true;
  v23 := $$pixelColor[1bv32];
  v24 := BV32_SUB(BV8_ZEXT32(v22), BV8_ZEXT32(v23));
  assert {:sourceloc} {:sourceloc_num 37} true;
  v25 := $$dst[BV32_ADD(BV32_MUL(BV32_SUB(v13, 1bv32), 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 38} true;
  v26 := $$pixelColor[2bv32];
  v27 := BV32_SUB(BV8_ZEXT32(v25), BV8_ZEXT32(v26));
  v28 := BV32_SLT(v21, 0bv32);
  goto $truebb5, $falsebb5;
$cond.true.i:
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  $cond.i := BV32_SUB(0bv32, v21);
  goto $cond.end.i;
$cond.false.i:
  assert {:block_sourceloc} {:sourceloc_num 40} true;
  $cond.i := v21;
  goto $cond.end.i;
$cond.end.i:
  assert {:block_sourceloc} {:sourceloc_num 41} true;
  v29 := BV32_SGT($cond.i, 10bv32);
  goto $truebb6, $falsebb6;
$lor.lhs.false.i:
  assert {:block_sourceloc} {:sourceloc_num 42} true;
  v30 := BV32_SLT(v24, 0bv32);
  goto $truebb7, $falsebb7;
$cond.true.17.i:
  assert {:block_sourceloc} {:sourceloc_num 43} true;
  $cond21.i := BV32_SUB(0bv32, v24);
  goto $cond.end.20.i;
$cond.false.19.i:
  assert {:block_sourceloc} {:sourceloc_num 44} true;
  $cond21.i := v24;
  goto $cond.end.20.i;
$cond.end.20.i:
  assert {:block_sourceloc} {:sourceloc_num 45} true;
  v31 := BV32_SGT($cond21.i, 10bv32);
  goto $truebb8, $falsebb8;
$lor.rhs.i:
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  v32 := BV32_SLT(v27, 0bv32);
  goto $truebb9, $falsebb9;
$cond.true.24.i:
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  $cond28.i := BV32_SUB(0bv32, v27);
  goto $cond.end.27.i;
$cond.false.26.i:
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  $cond28.i := v27;
  goto $cond.end.27.i;
$cond.end.27.i:
  assert {:block_sourceloc} {:sourceloc_num 49} true;
  $0 := (if BV32_SGT($cond28.i, 10bv32) then 1bv1 else 0bv1);
  goto $_ZL11CheckColorsRK6uchar4S1_.exit;
$_ZL11CheckColorsRK6uchar4S1_.exit:
  assert {:block_sourceloc} {:sourceloc_num 50} true;
  $count.0 := BV1_ZEXT32($0);
  goto $if.end.22;
$if.end.22:
  assert {:block_sourceloc} {:sourceloc_num 51} true;
  v33 := BV32_SLT(BV32_ADD(v8, 1bv32), $imageW);
  goto $truebb10, $falsebb10;
$if.then.25:
  assert {:block_sourceloc} {:sourceloc_num 52} true;
  assert {:sourceloc} {:sourceloc_num 53} true;
  v34 := $$dst[BV32_MUL(BV32_ADD(v13, 1bv32), 4bv32)];
  assert {:sourceloc} {:sourceloc_num 54} true;
  v35 := $$pixelColor[0bv32];
  v36 := BV32_SUB(BV8_ZEXT32(v34), BV8_ZEXT32(v35));
  assert {:sourceloc} {:sourceloc_num 55} true;
  v37 := $$dst[BV32_ADD(BV32_MUL(BV32_ADD(v13, 1bv32), 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 56} true;
  v38 := $$pixelColor[1bv32];
  v39 := BV32_SUB(BV8_ZEXT32(v37), BV8_ZEXT32(v38));
  assert {:sourceloc} {:sourceloc_num 57} true;
  v40 := $$dst[BV32_ADD(BV32_MUL(BV32_ADD(v13, 1bv32), 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 58} true;
  v41 := $$pixelColor[2bv32];
  v42 := BV32_SUB(BV8_ZEXT32(v40), BV8_ZEXT32(v41));
  v43 := BV32_SLT(v36, 0bv32);
  goto $truebb11, $falsebb11;
$cond.true.i.247:
  assert {:block_sourceloc} {:sourceloc_num 59} true;
  $cond.i.249 := BV32_SUB(0bv32, v36);
  goto $cond.end.i.251;
$cond.false.i.248:
  assert {:block_sourceloc} {:sourceloc_num 60} true;
  $cond.i.249 := v36;
  goto $cond.end.i.251;
$cond.end.i.251:
  assert {:block_sourceloc} {:sourceloc_num 61} true;
  v44 := BV32_SGT($cond.i.249, 10bv32);
  goto $truebb12, $falsebb12;
$lor.lhs.false.i.253:
  assert {:block_sourceloc} {:sourceloc_num 62} true;
  v45 := BV32_SLT(v39, 0bv32);
  goto $truebb13, $falsebb13;
$cond.true.17.i.255:
  assert {:block_sourceloc} {:sourceloc_num 63} true;
  $cond21.i.257 := BV32_SUB(0bv32, v39);
  goto $cond.end.20.i.259;
$cond.false.19.i.256:
  assert {:block_sourceloc} {:sourceloc_num 64} true;
  $cond21.i.257 := v39;
  goto $cond.end.20.i.259;
$cond.end.20.i.259:
  assert {:block_sourceloc} {:sourceloc_num 65} true;
  v46 := BV32_SGT($cond21.i.257, 10bv32);
  goto $truebb14, $falsebb14;
$lor.rhs.i.261:
  assert {:block_sourceloc} {:sourceloc_num 66} true;
  v47 := BV32_SLT(v42, 0bv32);
  goto $truebb15, $falsebb15;
$cond.true.24.i.263:
  assert {:block_sourceloc} {:sourceloc_num 67} true;
  $cond28.i.265 := BV32_SUB(0bv32, v42);
  goto $cond.end.27.i.267;
$cond.false.26.i.264:
  assert {:block_sourceloc} {:sourceloc_num 68} true;
  $cond28.i.265 := v42;
  goto $cond.end.27.i.267;
$cond.end.27.i.267:
  assert {:block_sourceloc} {:sourceloc_num 69} true;
  $1 := (if BV32_SGT($cond28.i.265, 10bv32) then 1bv1 else 0bv1);
  goto $_ZL11CheckColorsRK6uchar4S1_.exit269;
$_ZL11CheckColorsRK6uchar4S1_.exit269:
  assert {:block_sourceloc} {:sourceloc_num 70} true;
  $count.1 := BV32_ADD($count.0, BV1_ZEXT32($1));
  goto $if.end.30;
$if.end.30:
  assert {:block_sourceloc} {:sourceloc_num 71} true;
  v48 := BV32_SGT(v10, 0bv32);
  goto $truebb16, $falsebb16;
$if.then.32:
  assert {:block_sourceloc} {:sourceloc_num 72} true;
  assert {:sourceloc} {:sourceloc_num 73} true;
  v49 := $$dst[BV32_MUL(BV32_SUB(v13, $imageW), 4bv32)];
  assert {:sourceloc} {:sourceloc_num 74} true;
  v50 := $$pixelColor[0bv32];
  v51 := BV32_SUB(BV8_ZEXT32(v49), BV8_ZEXT32(v50));
  assert {:sourceloc} {:sourceloc_num 75} true;
  v52 := $$dst[BV32_ADD(BV32_MUL(BV32_SUB(v13, $imageW), 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 76} true;
  v53 := $$pixelColor[1bv32];
  v54 := BV32_SUB(BV8_ZEXT32(v52), BV8_ZEXT32(v53));
  assert {:sourceloc} {:sourceloc_num 77} true;
  v55 := $$dst[BV32_ADD(BV32_MUL(BV32_SUB(v13, $imageW), 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 78} true;
  v56 := $$pixelColor[2bv32];
  v57 := BV32_SUB(BV8_ZEXT32(v55), BV8_ZEXT32(v56));
  v58 := BV32_SLT(v51, 0bv32);
  goto $truebb17, $falsebb17;
$cond.true.i.202:
  assert {:block_sourceloc} {:sourceloc_num 79} true;
  $cond.i.204 := BV32_SUB(0bv32, v51);
  goto $cond.end.i.206;
$cond.false.i.203:
  assert {:block_sourceloc} {:sourceloc_num 80} true;
  $cond.i.204 := v51;
  goto $cond.end.i.206;
$cond.end.i.206:
  assert {:block_sourceloc} {:sourceloc_num 81} true;
  v59 := BV32_SGT($cond.i.204, 10bv32);
  goto $truebb18, $falsebb18;
$lor.lhs.false.i.208:
  assert {:block_sourceloc} {:sourceloc_num 82} true;
  v60 := BV32_SLT(v54, 0bv32);
  goto $truebb19, $falsebb19;
$cond.true.17.i.210:
  assert {:block_sourceloc} {:sourceloc_num 83} true;
  $cond21.i.212 := BV32_SUB(0bv32, v54);
  goto $cond.end.20.i.214;
$cond.false.19.i.211:
  assert {:block_sourceloc} {:sourceloc_num 84} true;
  $cond21.i.212 := v54;
  goto $cond.end.20.i.214;
$cond.end.20.i.214:
  assert {:block_sourceloc} {:sourceloc_num 85} true;
  v61 := BV32_SGT($cond21.i.212, 10bv32);
  goto $truebb20, $falsebb20;
$lor.rhs.i.216:
  assert {:block_sourceloc} {:sourceloc_num 86} true;
  v62 := BV32_SLT(v57, 0bv32);
  goto $truebb21, $falsebb21;
$cond.true.24.i.218:
  assert {:block_sourceloc} {:sourceloc_num 87} true;
  $cond28.i.220 := BV32_SUB(0bv32, v57);
  goto $cond.end.27.i.222;
$cond.false.26.i.219:
  assert {:block_sourceloc} {:sourceloc_num 88} true;
  $cond28.i.220 := v57;
  goto $cond.end.27.i.222;
$cond.end.27.i.222:
  assert {:block_sourceloc} {:sourceloc_num 89} true;
  $2 := (if BV32_SGT($cond28.i.220, 10bv32) then 1bv1 else 0bv1);
  goto $_ZL11CheckColorsRK6uchar4S1_.exit224;
$_ZL11CheckColorsRK6uchar4S1_.exit224:
  assert {:block_sourceloc} {:sourceloc_num 90} true;
  $count.2 := BV32_ADD($count.1, BV1_ZEXT32($2));
  goto $if.end.37;
$if.end.37:
  assert {:block_sourceloc} {:sourceloc_num 91} true;
  v63 := BV32_SLT(BV32_ADD(v10, 1bv32), $imageH);
  goto $truebb22, $falsebb22;
$if.then.40:
  assert {:block_sourceloc} {:sourceloc_num 92} true;
  assert {:sourceloc} {:sourceloc_num 93} true;
  v64 := $$dst[BV32_MUL(BV32_ADD(v13, $imageW), 4bv32)];
  assert {:sourceloc} {:sourceloc_num 94} true;
  v65 := $$pixelColor[0bv32];
  v66 := BV32_SUB(BV8_ZEXT32(v64), BV8_ZEXT32(v65));
  assert {:sourceloc} {:sourceloc_num 95} true;
  v67 := $$dst[BV32_ADD(BV32_MUL(BV32_ADD(v13, $imageW), 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 96} true;
  v68 := $$pixelColor[1bv32];
  v69 := BV32_SUB(BV8_ZEXT32(v67), BV8_ZEXT32(v68));
  assert {:sourceloc} {:sourceloc_num 97} true;
  v70 := $$dst[BV32_ADD(BV32_MUL(BV32_ADD(v13, $imageW), 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 98} true;
  v71 := $$pixelColor[2bv32];
  v72 := BV32_SUB(BV8_ZEXT32(v70), BV8_ZEXT32(v71));
  v73 := BV32_SLT(v66, 0bv32);
  goto $truebb23, $falsebb23;
$cond.true.i.157:
  assert {:block_sourceloc} {:sourceloc_num 99} true;
  $cond.i.159 := BV32_SUB(0bv32, v66);
  goto $cond.end.i.161;
$cond.false.i.158:
  assert {:block_sourceloc} {:sourceloc_num 100} true;
  $cond.i.159 := v66;
  goto $cond.end.i.161;
$cond.end.i.161:
  assert {:block_sourceloc} {:sourceloc_num 101} true;
  v74 := BV32_SGT($cond.i.159, 10bv32);
  goto $truebb24, $falsebb24;
$lor.lhs.false.i.163:
  assert {:block_sourceloc} {:sourceloc_num 102} true;
  v75 := BV32_SLT(v69, 0bv32);
  goto $truebb25, $falsebb25;
$cond.true.17.i.165:
  assert {:block_sourceloc} {:sourceloc_num 103} true;
  $cond21.i.167 := BV32_SUB(0bv32, v69);
  goto $cond.end.20.i.169;
$cond.false.19.i.166:
  assert {:block_sourceloc} {:sourceloc_num 104} true;
  $cond21.i.167 := v69;
  goto $cond.end.20.i.169;
$cond.end.20.i.169:
  assert {:block_sourceloc} {:sourceloc_num 105} true;
  v76 := BV32_SGT($cond21.i.167, 10bv32);
  goto $truebb26, $falsebb26;
$lor.rhs.i.171:
  assert {:block_sourceloc} {:sourceloc_num 106} true;
  v77 := BV32_SLT(v72, 0bv32);
  goto $truebb27, $falsebb27;
$cond.true.24.i.173:
  assert {:block_sourceloc} {:sourceloc_num 107} true;
  $cond28.i.175 := BV32_SUB(0bv32, v72);
  goto $cond.end.27.i.177;
$cond.false.26.i.174:
  assert {:block_sourceloc} {:sourceloc_num 108} true;
  $cond28.i.175 := v72;
  goto $cond.end.27.i.177;
$cond.end.27.i.177:
  assert {:block_sourceloc} {:sourceloc_num 109} true;
  $3 := (if BV32_SGT($cond28.i.175, 10bv32) then 1bv1 else 0bv1);
  goto $_ZL11CheckColorsRK6uchar4S1_.exit179;
$_ZL11CheckColorsRK6uchar4S1_.exit179:
  assert {:block_sourceloc} {:sourceloc_num 110} true;
  $count.3 := BV32_ADD($count.2, BV1_ZEXT32($3));
  goto $if.end.45;
$if.end.45:
  assert {:block_sourceloc} {:sourceloc_num 111} true;
  v78 := $count.3 != 0bv32;
  goto $truebb28, $falsebb28;
$if.then.46:
  assert {:block_sourceloc} {:sourceloc_num 112} true;
  v79 := FMUL32(SI32_TO_FP32(v8), $scale);
  v80 := FMUL32(SI32_TO_FP32(v10), $scale);
  v81 := FADD32(v79, $xOff0);
  v82 := FSUB32(v81, v79);
  v83 := FADD32(FADD32(FADD32(FSUB32($xOff0, v82), FSUB32(v79, FSUB32(v81, v82))), 0bv32), $xOff1);
  v84 := FADD32(v81, v83);
  v85 := FSUB32(v83, FSUB32(v84, v81));
  v86 := FADD32(v80, $yOff0);
  v87 := FSUB32(v86, v80);
  v88 := FADD32(FADD32(FADD32(FSUB32($yOff0, v87), FSUB32(v80, FSUB32(v86, v87))), 0bv32), $yOff1);
  v89 := FADD32(v86, v88);
  v90 := FSUB32(v88, FSUB32(v89, v86));
  v91 := $isJ == 1bv1;
  goto $truebb29, $falsebb29;
$if.then.i:
  assert {:block_sourceloc} {:sourceloc_num 113} true;
  v92 := FMUL32(v89, 1174406144bv32);
  v93 := FMUL32(v89, 1174406144bv32);
  v94 := FSUB32(v92, FSUB32(v92, v89));
  v95 := FSUB32(v93, FSUB32(v93, v89));
  v96 := FSUB32(v89, v94);
  v97 := FSUB32(v89, v95);
  v98 := FMUL32(v89, v89);
  v99 := FADD32(FMUL32(v89, v90), FMUL32(v90, v89));
  v100 := FADD32(v98, v99);
  v101 := FSUB32(v100, v98);
  v102 := FADD32(FADD32(FADD32(FSUB32(v99, v101), FSUB32(v98, FSUB32(v100, v101))), FADD32(FADD32(FADD32(FSUB32(FMUL32(v94, v95), v98), FMUL32(v94, v97)), FMUL32(v96, v95)), FMUL32(v96, v97))), FMUL32(v90, v90));
  v103 := FADD32(v100, v102);
  v104 := FMUL32(v84, 1174406144bv32);
  v105 := FMUL32(v84, 1174406144bv32);
  v106 := FSUB32(v104, FSUB32(v104, v84));
  v107 := FSUB32(v105, FSUB32(v105, v84));
  v108 := FSUB32(v84, v106);
  v109 := FSUB32(v84, v107);
  v110 := FMUL32(v84, v84);
  v111 := FADD32(FMUL32(v84, v85), FMUL32(v85, v84));
  v112 := FADD32(v110, v111);
  v113 := FSUB32(v112, v110);
  v114 := FADD32(FADD32(FADD32(FSUB32(v111, v113), FSUB32(v110, FSUB32(v112, v113))), FADD32(FADD32(FADD32(FSUB32(FMUL32(v106, v107), v110), FMUL32(v106, v109)), FMUL32(v108, v107)), FMUL32(v108, v109))), FMUL32(v85, v85));
  v115 := FADD32(v112, v114);
  $y1.i.0, $y0.i.0, $x1.i.110.0, $x0.i.0, $yy1.i.0, $yy0.i.0, $xx1.i.0, $xx0.i.0, $xC0.i.0, $xC1.i.0, $yC0.i.0, $yC1.i.0 := v90, v89, v85, v84, FSUB32(v102, FSUB32(v103, v100)), v103, FSUB32(v114, FSUB32(v115, v112)), v115, $xJP, 0bv32, $yJP, 0bv32;
  goto $if.end.i;
$if.else.i:
  assert {:block_sourceloc} {:sourceloc_num 114} true;
  $y1.i.0, $y0.i.0, $x1.i.110.0, $x0.i.0, $yy1.i.0, $yy0.i.0, $xx1.i.0, $xx0.i.0, $xC0.i.0, $xC1.i.0, $yC0.i.0, $yC1.i.0 := 0bv32, 0bv32, 0bv32, 0bv32, 0bv32, 0bv32, 0bv32, 0bv32, v84, v85, v89, v90;
  goto $if.end.i;
$if.end.i:
  assert {:block_sourceloc} {:sourceloc_num 115} true;
  v116 := FADD32($xx0.i.0, $yy0.i.0);
  v117 := FSUB32(v116, $xx0.i.0);
  v118 := FADD32(FADD32(FADD32(FSUB32($yy0.i.0, v117), FSUB32($xx0.i.0, FSUB32(v116, v117))), $xx1.i.0), $yy1.i.0);
  v119 := FADD32(v116, v118);
  $y1.i.1, $y0.i.1, $x1.i.110.1, $x0.i.1, $sum1.i.0, $sum0.i.0, $yy1.i.1, $yy0.i.1, $xx1.i.1, $xx0.i.1, $i.i.0 := $y1.i.0, $y0.i.0, $x1.i.110.0, $x0.i.0, FSUB32(v118, FSUB32(v119, v116)), v119, $yy1.i.0, $yy0.i.0, $xx1.i.0, $xx0.i.0, $crunch;
  goto $while.cond.i;
$while.cond.i:
  assert {:block_sourceloc} {:sourceloc_num 116} true;
  v120 := BV32_ADD($i.i.0, 4294967295bv32);
  v121 := v120 != 0bv32;
  goto $truebb30, $falsebb30;
$land.rhs.i:
  assert {:block_sourceloc} {:sourceloc_num 117} true;
  $4 := (if FLT32(FADD32($sum0.i.0, $sum1.i.0), 1082130432bv32) then 1bv1 else 0bv1);
  goto $land.end.i;
$land.end.i:
  assert {:block_sourceloc} {:sourceloc_num 118} true;
  v122 := $4 == 1bv1;
  goto $truebb31, $falsebb31;
$while.body.i:
  assert {:block_sourceloc} {:sourceloc_num 119} true;
  v123 := FMUL32($x0.i.1, 1174406144bv32);
  v124 := FMUL32($y0.i.1, 1174406144bv32);
  v125 := FSUB32(v123, FSUB32(v123, $x0.i.1));
  v126 := FSUB32(v124, FSUB32(v124, $y0.i.1));
  v127 := FSUB32($x0.i.1, v125);
  v128 := FSUB32($y0.i.1, v126);
  v129 := FMUL32($x0.i.1, $y0.i.1);
  v130 := FADD32(FMUL32($x0.i.1, $y1.i.1), FMUL32($x1.i.110.1, $y0.i.1));
  v131 := FADD32(v129, v130);
  v132 := FSUB32(v131, v129);
  v133 := FADD32(FADD32(FADD32(FSUB32(v130, v132), FSUB32(v129, FSUB32(v131, v132))), FADD32(FADD32(FADD32(FSUB32(FMUL32(v125, v126), v129), FMUL32(v125, v128)), FMUL32(v127, v126)), FMUL32(v127, v128))), FMUL32($x1.i.110.1, $y1.i.1));
  v134 := FADD32(v131, v133);
  v135 := FSUB32(v133, FSUB32(v134, v131));
  v136 := FADD32(v134, v134);
  v137 := FSUB32(v136, v134);
  v138 := FADD32(FADD32(FADD32(FSUB32(v134, v137), FSUB32(v134, FSUB32(v136, v137))), v135), v135);
  v139 := FADD32(v136, v138);
  v140 := FADD32(v139, $yC0.i.0);
  v141 := FSUB32(v140, v139);
  v142 := FADD32(FADD32(FADD32(FSUB32($yC0.i.0, v141), FSUB32(v139, FSUB32(v140, v141))), FSUB32(v138, FSUB32(v139, v136))), $yC1.i.0);
  v143 := FADD32(v140, v142);
  v144 := FSUB32(v142, FSUB32(v143, v140));
  v145 := FSUB32($xx0.i.1, $yy0.i.1);
  v146 := FSUB32(v145, $xx0.i.1);
  v147 := FSUB32(FADD32(FADD32(FSUB32(FSUB32(2147483648bv32, $yy0.i.1), v146), FSUB32($xx0.i.1, FSUB32(v145, v146))), $xx1.i.1), $yy1.i.1);
  v148 := FADD32(v145, v147);
  v149 := FADD32(v148, $xC0.i.0);
  v150 := FSUB32(v149, v148);
  v151 := FADD32(FADD32(FADD32(FSUB32($xC0.i.0, v150), FSUB32(v148, FSUB32(v149, v150))), FSUB32(v147, FSUB32(v148, v145))), $xC1.i.0);
  v152 := FADD32(v149, v151);
  v153 := FSUB32(v151, FSUB32(v152, v149));
  v154 := FMUL32(v143, 1174406144bv32);
  v155 := FMUL32(v143, 1174406144bv32);
  v156 := FSUB32(v154, FSUB32(v154, v143));
  v157 := FSUB32(v155, FSUB32(v155, v143));
  v158 := FSUB32(v143, v156);
  v159 := FSUB32(v143, v157);
  v160 := FMUL32(v143, v143);
  v161 := FADD32(FMUL32(v143, v144), FMUL32(v144, v143));
  v162 := FADD32(v160, v161);
  v163 := FSUB32(v162, v160);
  v164 := FADD32(FADD32(FADD32(FSUB32(v161, v163), FSUB32(v160, FSUB32(v162, v163))), FADD32(FADD32(FADD32(FSUB32(FMUL32(v156, v157), v160), FMUL32(v156, v159)), FMUL32(v158, v157)), FMUL32(v158, v159))), FMUL32(v144, v144));
  v165 := FADD32(v162, v164);
  v166 := FSUB32(v164, FSUB32(v165, v162));
  v167 := FMUL32(v152, 1174406144bv32);
  v168 := FMUL32(v152, 1174406144bv32);
  v169 := FSUB32(v167, FSUB32(v167, v152));
  v170 := FSUB32(v168, FSUB32(v168, v152));
  v171 := FSUB32(v152, v169);
  v172 := FSUB32(v152, v170);
  v173 := FMUL32(v152, v152);
  v174 := FADD32(FMUL32(v152, v153), FMUL32(v153, v152));
  v175 := FADD32(v173, v174);
  v176 := FSUB32(v175, v173);
  v177 := FADD32(FADD32(FADD32(FSUB32(v174, v176), FSUB32(v173, FSUB32(v175, v176))), FADD32(FADD32(FADD32(FSUB32(FMUL32(v169, v170), v173), FMUL32(v169, v172)), FMUL32(v171, v170)), FMUL32(v171, v172))), FMUL32(v153, v153));
  v178 := FADD32(v175, v177);
  v179 := FSUB32(v177, FSUB32(v178, v175));
  v180 := FADD32(v178, v165);
  v181 := FSUB32(v180, v178);
  v182 := FADD32(FADD32(FADD32(FSUB32(v165, v181), FSUB32(v178, FSUB32(v180, v181))), v179), v166);
  v183 := FADD32(v180, v182);
  $y1.i.1, $y0.i.1, $x1.i.110.1, $x0.i.1, $sum1.i.0, $sum0.i.0, $yy1.i.1, $yy0.i.1, $xx1.i.1, $xx0.i.1, $i.i.0 := v144, v143, v153, v152, FSUB32(v182, FSUB32(v183, v180)), v183, v166, v165, v179, v178, v120;
  goto $while.cond.i;
$_ZL16CalcMandelbrotDSffffffib.exit:
  assert {:block_sourceloc} {:sourceloc_num 120} true;
  v184 := BV32_SGT(v120, 0bv32);
  goto $truebb32, $falsebb32;
$cond.true:
  assert {:block_sourceloc} {:sourceloc_num 121} true;
  $cond := BV32_SUB($crunch, v120);
  goto $cond.end;
$cond.false:
  assert {:block_sourceloc} {:sourceloc_num 122} true;
  $cond := 0bv32;
  goto $cond.end;
$cond.end:
  assert {:block_sourceloc} {:sourceloc_num 123} true;
  v185 := $cond != 0bv32;
  goto $truebb33, $falsebb33;
$if.then.55:
  assert {:block_sourceloc} {:sourceloc_num 124} true;
  v186 := BV32_ADD($cond, $animationFrame);
  assert {:sourceloc} {:sourceloc_num 125} true;
  v187 := $$colors.val[0bv32];
  assert {:sourceloc} {:sourceloc_num 126} true;
  $$color[0bv32] := BV32_MUL(v186, BV8_ZEXT32(v187))[8:0];
  assert {:sourceloc} {:sourceloc_num 127} true;
  v188 := $$colors.val[1bv32];
  assert {:sourceloc} {:sourceloc_num 128} true;
  $$color[1bv32] := BV32_MUL(v186, BV8_ZEXT32(v188))[8:0];
  assert {:sourceloc} {:sourceloc_num 129} true;
  v189 := $$colors.val[2bv32];
  assert {:sourceloc} {:sourceloc_num 130} true;
  $$color[2bv32] := BV32_MUL(v186, BV8_ZEXT32(v189))[8:0];
  goto $if.end.72;
$if.else:
  assert {:block_sourceloc} {:sourceloc_num 131} true;
  assert {:sourceloc} {:sourceloc_num 132} true;
  $$color[0bv32] := 0bv8;
  assert {:sourceloc} {:sourceloc_num 133} true;
  $$color[1bv32] := 0bv8;
  assert {:sourceloc} {:sourceloc_num 134} true;
  $$color[2bv32] := 0bv8;
  goto $if.end.72;
$if.end.72:
  assert {:block_sourceloc} {:sourceloc_num 135} true;
  v190 := BV32_ADD($frame, 1bv32);
  v191 := BV32_SDIV(v190, 2bv32);
  assert {:sourceloc} {:sourceloc_num 136} true;
  v192 := $$pixelColor[0bv32];
  assert {:sourceloc} {:sourceloc_num 137} true;
  v193 := $$color[0bv32];
  assert {:sourceloc} {:sourceloc_num 138} true;
  $$dst[BV32_MUL(v13, 4bv32)] := BV32_SDIV(BV32_ADD(BV32_ADD(BV32_MUL(BV8_ZEXT32(v192), $frame), BV8_ZEXT32(v193)), v191), v190)[8:0];
  assert {:sourceloc} {:sourceloc_num 139} true;
  v194 := $$pixelColor[1bv32];
  assert {:sourceloc} {:sourceloc_num 140} true;
  v195 := $$color[1bv32];
  assert {:sourceloc} {:sourceloc_num 141} true;
  $$dst[BV32_ADD(BV32_MUL(v13, 4bv32), 1bv32)] := BV32_SDIV(BV32_ADD(BV32_ADD(BV32_MUL(BV8_ZEXT32(v194), $frame), BV8_ZEXT32(v195)), v191), v190)[8:0];
  assert {:sourceloc} {:sourceloc_num 142} true;
  v196 := $$pixelColor[2bv32];
  assert {:sourceloc} {:sourceloc_num 143} true;
  v197 := $$color[2bv32];
  assert {:sourceloc} {:sourceloc_num 144} true;
  $$dst[BV32_ADD(BV32_MUL(v13, 4bv32), 2bv32)] := BV32_SDIV(BV32_ADD(BV32_ADD(BV32_MUL(BV8_ZEXT32(v196), $frame), BV8_ZEXT32(v197)), v191), v190)[8:0];
  goto $if.end.108;
$if.end.108:
  assert {:block_sourceloc} {:sourceloc_num 145} true;
  goto $if.end.109;
$if.end.109:
  assert {:block_sourceloc} {:sourceloc_num 146} true;
  goto $while.body;
$while.end:
  assert {:block_sourceloc} {:sourceloc_num 147} true;
  return;
$truebb:
  assume {:partition} v0;
  assert {:block_sourceloc} {:sourceloc_num 148} true;
  goto $land.lhs.true;
$falsebb:
  assume {:partition} !v0;
  assert {:block_sourceloc} {:sourceloc_num 149} true;
  goto $if.end;
$truebb0:
  assume {:partition} v1;
  assert {:block_sourceloc} {:sourceloc_num 150} true;
  goto $if.then;
$falsebb0:
  assume {:partition} !v1;
  assert {:block_sourceloc} {:sourceloc_num 151} true;
  goto $if.end;
$truebb1:
  assume {:partition} v6;
  assert {:block_sourceloc} {:sourceloc_num 152} true;
  goto $if.then.7;
$falsebb1:
  assume {:partition} !v6;
  assert {:block_sourceloc} {:sourceloc_num 153} true;
  goto $if.end.8;
$truebb2:
  assume {:partition} v11;
  assert {:block_sourceloc} {:sourceloc_num 154} true;
  goto $land.lhs.true.12;
$falsebb2:
  assume {:partition} !v11;
  assert {:block_sourceloc} {:sourceloc_num 155} true;
  goto $if.end.109;
$truebb3:
  assume {:partition} v12;
  assert {:block_sourceloc} {:sourceloc_num 156} true;
  goto $if.then.14;
$falsebb3:
  assume {:partition} !v12;
  assert {:block_sourceloc} {:sourceloc_num 157} true;
  goto $if.end.109;
$truebb4:
  assume {:partition} v18;
  assert {:block_sourceloc} {:sourceloc_num 158} true;
  goto $if.then.18;
$falsebb4:
  assume {:partition} !v18;
  assert {:block_sourceloc} {:sourceloc_num 159} true;
  $count.0 := 0bv32;
  goto $if.end.22;
$truebb5:
  assume {:partition} v28;
  assert {:block_sourceloc} {:sourceloc_num 160} true;
  goto $cond.true.i;
$falsebb5:
  assume {:partition} !v28;
  assert {:block_sourceloc} {:sourceloc_num 161} true;
  goto $cond.false.i;
$truebb6:
  assume {:partition} v29;
  assert {:block_sourceloc} {:sourceloc_num 162} true;
  $0 := 1bv1;
  goto $_ZL11CheckColorsRK6uchar4S1_.exit;
$falsebb6:
  assume {:partition} !v29;
  assert {:block_sourceloc} {:sourceloc_num 163} true;
  goto $lor.lhs.false.i;
$truebb7:
  assume {:partition} v30;
  assert {:block_sourceloc} {:sourceloc_num 164} true;
  goto $cond.true.17.i;
$falsebb7:
  assume {:partition} !v30;
  assert {:block_sourceloc} {:sourceloc_num 165} true;
  goto $cond.false.19.i;
$truebb8:
  assume {:partition} v31;
  assert {:block_sourceloc} {:sourceloc_num 166} true;
  $0 := 1bv1;
  goto $_ZL11CheckColorsRK6uchar4S1_.exit;
$falsebb8:
  assume {:partition} !v31;
  assert {:block_sourceloc} {:sourceloc_num 167} true;
  goto $lor.rhs.i;
$truebb9:
  assume {:partition} v32;
  assert {:block_sourceloc} {:sourceloc_num 168} true;
  goto $cond.true.24.i;
$falsebb9:
  assume {:partition} !v32;
  assert {:block_sourceloc} {:sourceloc_num 169} true;
  goto $cond.false.26.i;
$truebb10:
  assume {:partition} v33;
  assert {:block_sourceloc} {:sourceloc_num 170} true;
  goto $if.then.25;
$falsebb10:
  assume {:partition} !v33;
  assert {:block_sourceloc} {:sourceloc_num 171} true;
  $count.1 := $count.0;
  goto $if.end.30;
$truebb11:
  assume {:partition} v43;
  assert {:block_sourceloc} {:sourceloc_num 172} true;
  goto $cond.true.i.247;
$falsebb11:
  assume {:partition} !v43;
  assert {:block_sourceloc} {:sourceloc_num 173} true;
  goto $cond.false.i.248;
$truebb12:
  assume {:partition} v44;
  assert {:block_sourceloc} {:sourceloc_num 174} true;
  $1 := 1bv1;
  goto $_ZL11CheckColorsRK6uchar4S1_.exit269;
$falsebb12:
  assume {:partition} !v44;
  assert {:block_sourceloc} {:sourceloc_num 175} true;
  goto $lor.lhs.false.i.253;
$truebb13:
  assume {:partition} v45;
  assert {:block_sourceloc} {:sourceloc_num 176} true;
  goto $cond.true.17.i.255;
$falsebb13:
  assume {:partition} !v45;
  assert {:block_sourceloc} {:sourceloc_num 177} true;
  goto $cond.false.19.i.256;
$truebb14:
  assume {:partition} v46;
  assert {:block_sourceloc} {:sourceloc_num 178} true;
  $1 := 1bv1;
  goto $_ZL11CheckColorsRK6uchar4S1_.exit269;
$falsebb14:
  assume {:partition} !v46;
  assert {:block_sourceloc} {:sourceloc_num 179} true;
  goto $lor.rhs.i.261;
$truebb15:
  assume {:partition} v47;
  assert {:block_sourceloc} {:sourceloc_num 180} true;
  goto $cond.true.24.i.263;
$falsebb15:
  assume {:partition} !v47;
  assert {:block_sourceloc} {:sourceloc_num 181} true;
  goto $cond.false.26.i.264;
$truebb16:
  assume {:partition} v48;
  assert {:block_sourceloc} {:sourceloc_num 182} true;
  goto $if.then.32;
$falsebb16:
  assume {:partition} !v48;
  assert {:block_sourceloc} {:sourceloc_num 183} true;
  $count.2 := $count.1;
  goto $if.end.37;
$truebb17:
  assume {:partition} v58;
  assert {:block_sourceloc} {:sourceloc_num 184} true;
  goto $cond.true.i.202;
$falsebb17:
  assume {:partition} !v58;
  assert {:block_sourceloc} {:sourceloc_num 185} true;
  goto $cond.false.i.203;
$truebb18:
  assume {:partition} v59;
  assert {:block_sourceloc} {:sourceloc_num 186} true;
  $2 := 1bv1;
  goto $_ZL11CheckColorsRK6uchar4S1_.exit224;
$falsebb18:
  assume {:partition} !v59;
  assert {:block_sourceloc} {:sourceloc_num 187} true;
  goto $lor.lhs.false.i.208;
$truebb19:
  assume {:partition} v60;
  assert {:block_sourceloc} {:sourceloc_num 188} true;
  goto $cond.true.17.i.210;
$falsebb19:
  assume {:partition} !v60;
  assert {:block_sourceloc} {:sourceloc_num 189} true;
  goto $cond.false.19.i.211;
$truebb20:
  assume {:partition} v61;
  assert {:block_sourceloc} {:sourceloc_num 190} true;
  $2 := 1bv1;
  goto $_ZL11CheckColorsRK6uchar4S1_.exit224;
$falsebb20:
  assume {:partition} !v61;
  assert {:block_sourceloc} {:sourceloc_num 191} true;
  goto $lor.rhs.i.216;
$truebb21:
  assume {:partition} v62;
  assert {:block_sourceloc} {:sourceloc_num 192} true;
  goto $cond.true.24.i.218;
$falsebb21:
  assume {:partition} !v62;
  assert {:block_sourceloc} {:sourceloc_num 193} true;
  goto $cond.false.26.i.219;
$truebb22:
  assume {:partition} v63;
  assert {:block_sourceloc} {:sourceloc_num 194} true;
  goto $if.then.40;
$falsebb22:
  assume {:partition} !v63;
  assert {:block_sourceloc} {:sourceloc_num 195} true;
  $count.3 := $count.2;
  goto $if.end.45;
$truebb23:
  assume {:partition} v73;
  assert {:block_sourceloc} {:sourceloc_num 196} true;
  goto $cond.true.i.157;
$falsebb23:
  assume {:partition} !v73;
  assert {:block_sourceloc} {:sourceloc_num 197} true;
  goto $cond.false.i.158;
$truebb24:
  assume {:partition} v74;
  assert {:block_sourceloc} {:sourceloc_num 198} true;
  $3 := 1bv1;
  goto $_ZL11CheckColorsRK6uchar4S1_.exit179;
$falsebb24:
  assume {:partition} !v74;
  assert {:block_sourceloc} {:sourceloc_num 199} true;
  goto $lor.lhs.false.i.163;
$truebb25:
  assume {:partition} v75;
  assert {:block_sourceloc} {:sourceloc_num 200} true;
  goto $cond.true.17.i.165;
$falsebb25:
  assume {:partition} !v75;
  assert {:block_sourceloc} {:sourceloc_num 201} true;
  goto $cond.false.19.i.166;
$truebb26:
  assume {:partition} v76;
  assert {:block_sourceloc} {:sourceloc_num 202} true;
  $3 := 1bv1;
  goto $_ZL11CheckColorsRK6uchar4S1_.exit179;
$falsebb26:
  assume {:partition} !v76;
  assert {:block_sourceloc} {:sourceloc_num 203} true;
  goto $lor.rhs.i.171;
$truebb27:
  assume {:partition} v77;
  assert {:block_sourceloc} {:sourceloc_num 204} true;
  goto $cond.true.24.i.173;
$falsebb27:
  assume {:partition} !v77;
  assert {:block_sourceloc} {:sourceloc_num 205} true;
  goto $cond.false.26.i.174;
$truebb28:
  assume {:partition} v78;
  assert {:block_sourceloc} {:sourceloc_num 206} true;
  goto $if.then.46;
$falsebb28:
  assume {:partition} !v78;
  assert {:block_sourceloc} {:sourceloc_num 207} true;
  goto $if.end.108;
$truebb29:
  assume {:partition} v91;
  assert {:block_sourceloc} {:sourceloc_num 208} true;
  goto $if.then.i;
$falsebb29:
  assume {:partition} !v91;
  assert {:block_sourceloc} {:sourceloc_num 209} true;
  goto $if.else.i;
$truebb30:
  assume {:partition} v121;
  assert {:block_sourceloc} {:sourceloc_num 210} true;
  goto $land.rhs.i;
$falsebb30:
  assume {:partition} !v121;
  assert {:block_sourceloc} {:sourceloc_num 211} true;
  $4 := 0bv1;
  goto $land.end.i;
$truebb31:
  assume {:partition} v122;
  assert {:block_sourceloc} {:sourceloc_num 212} true;
  goto $while.body.i;
$falsebb31:
  assume {:partition} !v122;
  assert {:block_sourceloc} {:sourceloc_num 213} true;
  goto $_ZL16CalcMandelbrotDSffffffib.exit;
$truebb32:
  assume {:partition} v184;
  assert {:block_sourceloc} {:sourceloc_num 214} true;
  goto $cond.true;
$falsebb32:
  assume {:partition} !v184;
  assert {:block_sourceloc} {:sourceloc_num 215} true;
  goto $cond.false;
$truebb33:
  assume {:partition} v185;
  assert {:block_sourceloc} {:sourceloc_num 216} true;
  goto $if.then.55;
$falsebb33:
  assume {:partition} !v185;
  assert {:block_sourceloc} {:sourceloc_num 217} true;
  goto $if.else;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 32bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_y == 32bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 14bv32 then 1bv1 else 0bv1) != 0bv1;
