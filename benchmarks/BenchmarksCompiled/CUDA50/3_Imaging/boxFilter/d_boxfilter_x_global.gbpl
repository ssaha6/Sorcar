type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "id"} {:global} $$id : [bv32]bv32;
axiom {:array_info "$$id"} {:global} {:elem_width 32} {:source_name "id"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$id : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$id : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$id : bool;

var {:source_name "od"} {:global} $$od : [bv32]bv32;
axiom {:array_info "$$od"} {:global} {:elem_width 32} {:source_name "od"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$od : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$od : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$od : bool;

const _WATCHED_OFFSET : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FADD32(bv32, bv32) : bv32;
function FDIV32(bv32, bv32) : bv32;
function FMUL32(bv32, bv32) : bv32;
function FSUB32(bv32, bv32) : bv32;
function SI32_TO_FP32(bv32) : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvshl"} BV32_SHL(bv32, bv32) : bv32;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
procedure {:source_name "d_boxfilter_x_global"} {:kernel} $_Z20d_boxfilter_x_globalPfS_iii($w:bv32, $h:bv32, $r:bv32)
requires {:sourceloc_num 0} (if $w == 1024bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 1} (if $h == 1024bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 2} (if $r == 14bv32 then 1bv1 else 0bv1) != 0bv1;
{
  var $t.i.0:bv32;
  var $x.i.0:bv32;
  var $t.i.1:bv32;
  var $x7.i.0:bv32;
  var $t.i.2:bv32;
  var $x21.i.0:bv32;
  var $t.i.3:bv32;
  var $x39.i.0:bv32;
  var v17:bv32;
  var v2:bv32;
  var v0:bv32;
  var v1:bv32;
  var v3:bv32;
  var v5:bool;
  var v9:bv32;
  var v6:bv32;
  var v8:bv32;
  var v4:bv32;
  var v12:bv32;
  var v16:bv32;
  var v13:bv32;
  var v11:bool;
  var v10:bv32;
  var v7:bool;
  var v14:bv32;
  var v15:bool;
  var v18:bv32;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  v1 := BV32_MUL(v0, $w);
  v2 := BV32_MUL(v0, $w);
  v3 := FDIV32(1065353216bv32, SI32_TO_FP32(BV32_ADD(BV32_SHL($r, 1bv32), 1bv32)));
  assert {:sourceloc} {:sourceloc_num 4} true;
  v4 := $$id[v1];
  $t.i.0, $x.i.0 := FMUL32(v4, SI32_TO_FP32($r)), 0bv32;
  goto $for.cond.i;
$for.cond.i:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  v5 := BV32_SLT($x.i.0, BV32_ADD($r, 1bv32));
  goto $truebb, $falsebb;
$for.body.i:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  assert {:sourceloc} {:sourceloc_num 7} true;
  v6 := $$id[BV32_ADD(v1, $x.i.0)];
  $t.i.0, $x.i.0 := FADD32($t.i.0, v6), BV32_ADD($x.i.0, 1bv32);
  goto $for.cond.i;
$for.end.i:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  assert {:sourceloc} {:sourceloc_num 9} true;
  $$od[v2] := FMUL32($t.i.0, v3);
  $t.i.1, $x7.i.0 := $t.i.0, 1bv32;
  goto $for.cond.8.i;
$for.cond.8.i:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  v7 := BV32_SLT($x7.i.0, BV32_ADD($r, 1bv32));
  goto $truebb0, $falsebb0;
$for.body.11.i:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  assert {:sourceloc} {:sourceloc_num 12} true;
  v8 := $$id[BV32_ADD(v1, BV32_ADD($x7.i.0, $r))];
  assert {:sourceloc} {:sourceloc_num 13} true;
  v9 := $$id[v1];
  v10 := FSUB32(FADD32($t.i.1, v8), v9);
  assert {:sourceloc} {:sourceloc_num 14} true;
  $$od[BV32_ADD(v2, $x7.i.0)] := FMUL32(v10, v3);
  $t.i.1, $x7.i.0 := v10, BV32_ADD($x7.i.0, 1bv32);
  goto $for.cond.8.i;
$for.end.20.i:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  $t.i.2, $x21.i.0 := $t.i.1, BV32_ADD($r, 1bv32);
  goto $for.cond.23.i;
$for.cond.23.i:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  v11 := BV32_SLT($x21.i.0, BV32_SUB($w, $r));
  goto $truebb1, $falsebb1;
$for.body.26.i:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  assert {:sourceloc} {:sourceloc_num 18} true;
  v12 := $$id[BV32_ADD(v1, BV32_ADD($x21.i.0, $r))];
  assert {:sourceloc} {:sourceloc_num 19} true;
  v13 := $$id[BV32_ADD(v1, BV32_SUB(BV32_SUB($x21.i.0, $r), 1bv32))];
  v14 := FSUB32(FADD32($t.i.2, v12), v13);
  assert {:sourceloc} {:sourceloc_num 20} true;
  $$od[BV32_ADD(v2, $x21.i.0)] := FMUL32(v14, v3);
  $t.i.2, $x21.i.0 := v14, BV32_ADD($x21.i.0, 1bv32);
  goto $for.cond.23.i;
$for.end.38.i:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  $t.i.3, $x39.i.0 := $t.i.2, BV32_SUB($w, $r);
  goto $for.cond.41.i;
$for.cond.41.i:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  v15 := BV32_SLT($x39.i.0, $w);
  goto $truebb2, $falsebb2;
$for.body.43.i:
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  assert {:sourceloc} {:sourceloc_num 24} true;
  v16 := $$id[BV32_ADD(v1, BV32_SUB($w, 1bv32))];
  assert {:sourceloc} {:sourceloc_num 25} true;
  v17 := $$id[BV32_ADD(v1, BV32_SUB(BV32_SUB($x39.i.0, $r), 1bv32))];
  v18 := FSUB32(FADD32($t.i.3, v16), v17);
  assert {:sourceloc} {:sourceloc_num 26} true;
  $$od[BV32_ADD(v2, $x39.i.0)] := FMUL32(v18, v3);
  $t.i.3, $x39.i.0 := v18, BV32_ADD($x39.i.0, 1bv32);
  goto $for.cond.41.i;
$_ZL13d_boxfilter_xPfS_iii.exit:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  return;
$truebb:
  assume {:partition} v5;
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  goto $for.body.i;
$falsebb:
  assume {:partition} !v5;
  assert {:block_sourceloc} {:sourceloc_num 29} true;
  goto $for.end.i;
$truebb0:
  assume {:partition} v7;
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  goto $for.body.11.i;
$falsebb0:
  assume {:partition} !v7;
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  goto $for.end.20.i;
$truebb1:
  assume {:partition} v11;
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  goto $for.body.26.i;
$falsebb1:
  assume {:partition} !v11;
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  goto $for.end.38.i;
$truebb2:
  assume {:partition} v15;
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  goto $for.body.43.i;
$falsebb2:
  assume {:partition} !v15;
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  goto $_ZL13d_boxfilter_xPfS_iii.exit;
}
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 64bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 16bv32 then 1bv1 else 0bv1) != 0bv1;
