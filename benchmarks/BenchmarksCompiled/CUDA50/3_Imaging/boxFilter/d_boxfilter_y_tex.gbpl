type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
procedure _ATOMIC_OP8(x : [bv32]bv8, y : bv32) returns (z : bv8, A : [bv32]bv8);
var {:source_name "od"} {:global} $$od : [bv32]bv32;
axiom {:array_info "$$od"} {:global} {:elem_width 32} {:source_name "od"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$od : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$od : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$od : bool;
const $arrayId$$od : arrayId;
axiom $arrayId$$od == 1bv3;

var {:source_name "agg.tmp"} $$agg.tmp : [bv32]bv8;
axiom {:array_info "$$agg.tmp"} {:elem_width 8} {:source_name "agg.tmp"} {:source_elem_width 96} {:source_dimensions "1"} true;
const $arrayId$$agg.tmp : arrayId;
axiom $arrayId$$agg.tmp == 2bv3;

var {:source_name "agg.tmp12"} $$agg.tmp12 : [bv32]bv8;
axiom {:array_info "$$agg.tmp12"} {:elem_width 8} {:source_name "agg.tmp12"} {:source_elem_width 96} {:source_dimensions "1"} true;
const $arrayId$$agg.tmp12 : arrayId;
axiom $arrayId$$agg.tmp12 == 3bv3;

var {:source_name "agg.tmp18"} $$agg.tmp18 : [bv32]bv8;
axiom {:array_info "$$agg.tmp18"} {:elem_width 8} {:source_name "agg.tmp18"} {:source_elem_width 96} {:source_dimensions "1"} true;
const $arrayId$$agg.tmp18 : arrayId;
axiom $arrayId$$agg.tmp18 == 4bv3;

var {:source_name "tex"} {:global} $$tex : [bv32]bv8;
axiom {:array_info "$$tex"} {:global} {:elem_width 8} {:source_name "tex"} {:source_elem_width 96} {:source_dimensions "1"} true;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 96} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$tex : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 96} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$tex : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 96} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$tex : bool;
const $arrayId$$tex : arrayId;
axiom $arrayId$$tex == 5bv3;

type ptr = bv32;
type arrayId = bv3;

function {:inline true} MKPTR(base: arrayId, offset: bv32) : ptr {
  base ++ offset[29:0]
}

function {:inline true} base#MKPTR(p: ptr) : arrayId {
  p[32:29]
}

function {:inline true} offset#MKPTR(p : ptr) : bv32 {
  0bv3++p[29:0]
}

const $arrayId$$null$ : arrayId;
axiom $arrayId$$null$ == 0bv3;

const _WATCHED_OFFSET : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FADD32(bv32, bv32) : bv32;
function FDIV32(bv32, bv32) : bv32;
function FMUL32(bv32, bv32) : bv32;
function FSUB32(bv32, bv32) : bv32;
function SI32_TO_FP32(bv32) : bv32;
function UI32_TO_FP32(bv32) : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvshl"} BV32_SHL(bv32, bv32) : bv32;
function {:bvbuiltin "bvsle"} BV32_SLE(bv32, bv32) : bool;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
procedure {:source_name "d_boxfilter_y_tex"} {:kernel} $_Z17d_boxfilter_y_texPfiii($w:bv32, $h:bv32, $r:bv32)
requires {:sourceloc_num 0} (if $w == 1024bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 1} (if $h == 1024bv32 then 1bv1 else 0bv1) != 0bv1;
{
  var $t.0:bv32;
  var $y.0:bv32;
  var $t.1:bv32;
  var $y8.0:bv32;
  var v25:bv8;
  var v16:bool;
  var v2:bool;
  var v0:bv32;
  var v1:bv32;
  var v4:bv8;
  var v7:bv8;
  var v5:bv8;
  var v3:bv8;
  var v6:bv8;
  var v17:bv8;
  var v8:bv8;
  var v13:bv8;
  var v9:bv8;
  var v11:bv8;
  var v14:bv8;
  var v15:bv32;
  var v12:bv8;
  var v10:bv8;
  var v19:bv8;
  var v20:bv8;
  var v24:bv8;
  var v18:bv8;
  var v22:bv8;
  var v21:bv8;
  var v23:bv8;
  var v29:bv32;
  var v28:bv8;
  var v26:bv8;
  var v27:bv8;
  var v36:bv8;
  var v33:bv8;
  var v35:bv8;
  var v32:bv8;
  var v34:bv8;
  var v30:bv8;
  var v31:bv8;
  var v39:bv8;
  var v42:bv32;
  var v38:bv8;
  var v41:bv8;
  var v37:bv8;
  var v40:bv8;
  var v43:bv32;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v0 := FDIV32(1065353216bv32, SI32_TO_FP32(BV32_ADD(BV32_SHL($r, 1bv32), 1bv32)));
  v1 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  $t.0, $y.0 := 0bv32, BV32_SUB(0bv32, $r);
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  v2 := BV32_SLE($y.0, $r);
  goto $truebb, $falsebb;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  assert {:sourceloc} {:sourceloc_num 5} true;
  v3 := $$tex[0bv32];
  assert {:sourceloc} {:sourceloc_num 6} true;
  $$agg.tmp[0bv32] := v3;
  assert {:sourceloc} {:sourceloc_num 7} true;
  v4 := $$tex[1bv32];
  assert {:sourceloc} {:sourceloc_num 8} true;
  $$agg.tmp[1bv32] := v4;
  assert {:sourceloc} {:sourceloc_num 9} true;
  v5 := $$tex[2bv32];
  assert {:sourceloc} {:sourceloc_num 10} true;
  $$agg.tmp[2bv32] := v5;
  assert {:sourceloc} {:sourceloc_num 11} true;
  v6 := $$tex[3bv32];
  assert {:sourceloc} {:sourceloc_num 12} true;
  $$agg.tmp[3bv32] := v6;
  assert {:sourceloc} {:sourceloc_num 13} true;
  v7 := $$tex[4bv32];
  assert {:sourceloc} {:sourceloc_num 14} true;
  $$agg.tmp[4bv32] := v7;
  assert {:sourceloc} {:sourceloc_num 15} true;
  v8 := $$tex[5bv32];
  assert {:sourceloc} {:sourceloc_num 16} true;
  $$agg.tmp[5bv32] := v8;
  assert {:sourceloc} {:sourceloc_num 17} true;
  v9 := $$tex[6bv32];
  assert {:sourceloc} {:sourceloc_num 18} true;
  $$agg.tmp[6bv32] := v9;
  assert {:sourceloc} {:sourceloc_num 19} true;
  v10 := $$tex[7bv32];
  assert {:sourceloc} {:sourceloc_num 20} true;
  $$agg.tmp[7bv32] := v10;
  assert {:sourceloc} {:sourceloc_num 21} true;
  v11 := $$tex[8bv32];
  assert {:sourceloc} {:sourceloc_num 22} true;
  $$agg.tmp[8bv32] := v11;
  assert {:sourceloc} {:sourceloc_num 23} true;
  v12 := $$tex[9bv32];
  assert {:sourceloc} {:sourceloc_num 24} true;
  $$agg.tmp[9bv32] := v12;
  assert {:sourceloc} {:sourceloc_num 25} true;
  v13 := $$tex[10bv32];
  assert {:sourceloc} {:sourceloc_num 26} true;
  $$agg.tmp[10bv32] := v13;
  assert {:sourceloc} {:sourceloc_num 27} true;
  v14 := $$tex[11bv32];
  assert {:sourceloc} {:sourceloc_num 28} true;
  $$agg.tmp[11bv32] := v14;
  call {:sourceloc_num 29}   v15 := $_Z5tex2DIfET_7textureIS0_Li2EL19cudaTextureReadMode0EEff(MKPTR($arrayId$$agg.tmp, 0bv32), UI32_TO_FP32(v1), SI32_TO_FP32($y.0));
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  $t.0, $y.0 := FADD32($t.0, v15), BV32_ADD($y.0, 1bv32);
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  assert {:sourceloc} {:sourceloc_num 32} true;
  $$od[v1] := FMUL32($t.0, v0);
  $t.1, $y8.0 := $t.0, 1bv32;
  goto $for.cond.9;
$for.cond.9:
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  v16 := BV32_SLT($y8.0, $h);
  goto $truebb0, $falsebb0;
$for.body.11:
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  assert {:sourceloc} {:sourceloc_num 35} true;
  v17 := $$tex[0bv32];
  assert {:sourceloc} {:sourceloc_num 36} true;
  $$agg.tmp12[0bv32] := v17;
  assert {:sourceloc} {:sourceloc_num 37} true;
  v18 := $$tex[1bv32];
  assert {:sourceloc} {:sourceloc_num 38} true;
  $$agg.tmp12[1bv32] := v18;
  assert {:sourceloc} {:sourceloc_num 39} true;
  v19 := $$tex[2bv32];
  assert {:sourceloc} {:sourceloc_num 40} true;
  $$agg.tmp12[2bv32] := v19;
  assert {:sourceloc} {:sourceloc_num 41} true;
  v20 := $$tex[3bv32];
  assert {:sourceloc} {:sourceloc_num 42} true;
  $$agg.tmp12[3bv32] := v20;
  assert {:sourceloc} {:sourceloc_num 43} true;
  v21 := $$tex[4bv32];
  assert {:sourceloc} {:sourceloc_num 44} true;
  $$agg.tmp12[4bv32] := v21;
  assert {:sourceloc} {:sourceloc_num 45} true;
  v22 := $$tex[5bv32];
  assert {:sourceloc} {:sourceloc_num 46} true;
  $$agg.tmp12[5bv32] := v22;
  assert {:sourceloc} {:sourceloc_num 47} true;
  v23 := $$tex[6bv32];
  assert {:sourceloc} {:sourceloc_num 48} true;
  $$agg.tmp12[6bv32] := v23;
  assert {:sourceloc} {:sourceloc_num 49} true;
  v24 := $$tex[7bv32];
  assert {:sourceloc} {:sourceloc_num 50} true;
  $$agg.tmp12[7bv32] := v24;
  assert {:sourceloc} {:sourceloc_num 51} true;
  v25 := $$tex[8bv32];
  assert {:sourceloc} {:sourceloc_num 52} true;
  $$agg.tmp12[8bv32] := v25;
  assert {:sourceloc} {:sourceloc_num 53} true;
  v26 := $$tex[9bv32];
  assert {:sourceloc} {:sourceloc_num 54} true;
  $$agg.tmp12[9bv32] := v26;
  assert {:sourceloc} {:sourceloc_num 55} true;
  v27 := $$tex[10bv32];
  assert {:sourceloc} {:sourceloc_num 56} true;
  $$agg.tmp12[10bv32] := v27;
  assert {:sourceloc} {:sourceloc_num 57} true;
  v28 := $$tex[11bv32];
  assert {:sourceloc} {:sourceloc_num 58} true;
  $$agg.tmp12[11bv32] := v28;
  call {:sourceloc_num 59}   v29 := $_Z5tex2DIfET_7textureIS0_Li2EL19cudaTextureReadMode0EEff(MKPTR($arrayId$$agg.tmp12, 0bv32), UI32_TO_FP32(v1), SI32_TO_FP32(BV32_ADD($y8.0, $r)));
  assert {:sourceloc} {:sourceloc_num 60} true;
  v30 := $$tex[0bv32];
  assert {:sourceloc} {:sourceloc_num 61} true;
  $$agg.tmp18[0bv32] := v30;
  assert {:sourceloc} {:sourceloc_num 62} true;
  v31 := $$tex[1bv32];
  assert {:sourceloc} {:sourceloc_num 63} true;
  $$agg.tmp18[1bv32] := v31;
  assert {:sourceloc} {:sourceloc_num 64} true;
  v32 := $$tex[2bv32];
  assert {:sourceloc} {:sourceloc_num 65} true;
  $$agg.tmp18[2bv32] := v32;
  assert {:sourceloc} {:sourceloc_num 66} true;
  v33 := $$tex[3bv32];
  assert {:sourceloc} {:sourceloc_num 67} true;
  $$agg.tmp18[3bv32] := v33;
  assert {:sourceloc} {:sourceloc_num 68} true;
  v34 := $$tex[4bv32];
  assert {:sourceloc} {:sourceloc_num 69} true;
  $$agg.tmp18[4bv32] := v34;
  assert {:sourceloc} {:sourceloc_num 70} true;
  v35 := $$tex[5bv32];
  assert {:sourceloc} {:sourceloc_num 71} true;
  $$agg.tmp18[5bv32] := v35;
  assert {:sourceloc} {:sourceloc_num 72} true;
  v36 := $$tex[6bv32];
  assert {:sourceloc} {:sourceloc_num 73} true;
  $$agg.tmp18[6bv32] := v36;
  assert {:sourceloc} {:sourceloc_num 74} true;
  v37 := $$tex[7bv32];
  assert {:sourceloc} {:sourceloc_num 75} true;
  $$agg.tmp18[7bv32] := v37;
  assert {:sourceloc} {:sourceloc_num 76} true;
  v38 := $$tex[8bv32];
  assert {:sourceloc} {:sourceloc_num 77} true;
  $$agg.tmp18[8bv32] := v38;
  assert {:sourceloc} {:sourceloc_num 78} true;
  v39 := $$tex[9bv32];
  assert {:sourceloc} {:sourceloc_num 79} true;
  $$agg.tmp18[9bv32] := v39;
  assert {:sourceloc} {:sourceloc_num 80} true;
  v40 := $$tex[10bv32];
  assert {:sourceloc} {:sourceloc_num 81} true;
  $$agg.tmp18[10bv32] := v40;
  assert {:sourceloc} {:sourceloc_num 82} true;
  v41 := $$tex[11bv32];
  assert {:sourceloc} {:sourceloc_num 83} true;
  $$agg.tmp18[11bv32] := v41;
  call {:sourceloc_num 84}   v42 := $_Z5tex2DIfET_7textureIS0_Li2EL19cudaTextureReadMode0EEff(MKPTR($arrayId$$agg.tmp18, 0bv32), UI32_TO_FP32(v1), SI32_TO_FP32(BV32_SUB(BV32_SUB($y8.0, $r), 1bv32)));
  v43 := FSUB32(FADD32($t.1, v29), v42);
  assert {:sourceloc} {:sourceloc_num 85} true;
  $$od[BV32_ADD(BV32_MUL($y8.0, $w), v1)] := FMUL32(v43, v0);
  goto $for.inc.29;
$for.inc.29:
  assert {:block_sourceloc} {:sourceloc_num 86} true;
  $t.1, $y8.0 := v43, BV32_ADD($y8.0, 1bv32);
  goto $for.cond.9;
$for.end.31:
  assert {:block_sourceloc} {:sourceloc_num 87} true;
  return;
$truebb:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 88} true;
  goto $for.body;
$falsebb:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 89} true;
  goto $for.end;
$truebb0:
  assume {:partition} v16;
  assert {:block_sourceloc} {:sourceloc_num 90} true;
  goto $for.body.11;
$falsebb0:
  assume {:partition} !v16;
  assert {:block_sourceloc} {:sourceloc_num 91} true;
  goto $for.end.31;
}
procedure {:source_name "_Z5tex2DIfET_7textureIS0_Li2EL19cudaTextureReadMode0EEff"} $_Z5tex2DIfET_7textureIS0_Li2EL19cudaTextureReadMode0EEff($0:ptr, $1:bv32, $2:bv32) returns ($ret:bv32);
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 64bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 16bv32 then 1bv1 else 0bv1) != 0bv1;
