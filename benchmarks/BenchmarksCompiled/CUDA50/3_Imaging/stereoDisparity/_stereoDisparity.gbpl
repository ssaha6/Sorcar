type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "g_img0"} {:global} $$g_img0 : [bv32]bv32;
axiom {:array_info "$$g_img0"} {:global} {:elem_width 32} {:source_name "g_img0"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$g_img0 : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$g_img0 : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$g_img0 : bool;
const $arrayId$$g_img0 : arrayId;
axiom $arrayId$$g_img0 == 1bv4;

var {:source_name "g_img1"} {:global} $$g_img1 : [bv32]bv32;
axiom {:array_info "$$g_img1"} {:global} {:elem_width 32} {:source_name "g_img1"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$g_img1 : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$g_img1 : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$g_img1 : bool;
const $arrayId$$g_img1 : arrayId;
axiom $arrayId$$g_img1 == 2bv4;

var {:source_name "g_odata"} {:global} $$g_odata : [bv32]bv32;
axiom {:array_info "$$g_odata"} {:global} {:elem_width 32} {:source_name "g_odata"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$g_odata : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$g_odata : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$g_odata : bool;
const $arrayId$$g_odata : arrayId;
axiom $arrayId$$g_odata == 3bv4;

var {:source_name "imLeftA"} $$imLeftA : [bv32]bv32;
axiom {:array_info "$$imLeftA"} {:elem_width 32} {:source_name "imLeftA"} {:source_elem_width 32} {:source_dimensions "3"} true;
const $arrayId$$imLeftA : arrayId;
axiom $arrayId$$imLeftA == 4bv4;

var {:source_name "imLeftB"} $$imLeftB : [bv32]bv32;
axiom {:array_info "$$imLeftB"} {:elem_width 32} {:source_name "imLeftB"} {:source_elem_width 32} {:source_dimensions "3"} true;
const $arrayId$$imLeftB : arrayId;
axiom $arrayId$$imLeftB == 5bv4;

var {:source_name "agg.tmp"} $$agg.tmp : [bv32]bv32;
axiom {:array_info "$$agg.tmp"} {:elem_width 32} {:source_name "agg.tmp"} {:source_elem_width 96} {:source_dimensions "1"} true;
const $arrayId$$agg.tmp : arrayId;
axiom $arrayId$$agg.tmp == 6bv4;

var {:source_name "agg.tmp10"} $$agg.tmp10 : [bv32]bv32;
axiom {:array_info "$$agg.tmp10"} {:elem_width 32} {:source_name "agg.tmp10"} {:source_elem_width 96} {:source_dimensions "1"} true;
const $arrayId$$agg.tmp10 : arrayId;
axiom $arrayId$$agg.tmp10 == 7bv4;

var {:source_name "agg.tmp43"} $$agg.tmp43 : [bv32]bv32;
axiom {:array_info "$$agg.tmp43"} {:elem_width 32} {:source_name "agg.tmp43"} {:source_elem_width 96} {:source_dimensions "1"} true;
const $arrayId$$agg.tmp43 : arrayId;
axiom $arrayId$$agg.tmp43 == 8bv4;

var {:source_name "agg.tmp91"} $$agg.tmp91 : [bv32]bv32;
axiom {:array_info "$$agg.tmp91"} {:elem_width 32} {:source_name "agg.tmp91"} {:source_elem_width 96} {:source_dimensions "1"} true;
const $arrayId$$agg.tmp91 : arrayId;
axiom $arrayId$$agg.tmp91 == 9bv4;

var {:source_name "tex2Dleft"} {:global} $$tex2Dleft : [bv32]bv32;
axiom {:array_info "$$tex2Dleft"} {:global} {:elem_width 32} {:source_name "tex2Dleft"} {:source_elem_width 96} {:source_dimensions "1"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 96} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$tex2Dleft : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 96} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$tex2Dleft : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 96} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$tex2Dleft : bool;
const $arrayId$$tex2Dleft : arrayId;
axiom $arrayId$$tex2Dleft == 10bv4;

var {:source_name "diff"} {:group_shared} $$_ZZ21stereoDisparityKernelPjS_S_iiiiE4diff : [bv32]bv32;
axiom {:array_info "$$_ZZ21stereoDisparityKernelPjS_S_iiiiE4diff"} {:group_shared} {:elem_width 32} {:source_name "diff"} {:source_elem_width 32} {:source_dimensions "24,48"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,48"} _READ_HAS_OCCURRED_$$_ZZ21stereoDisparityKernelPjS_S_iiiiE4diff : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,48"} _WRITE_HAS_OCCURRED_$$_ZZ21stereoDisparityKernelPjS_S_iiiiE4diff : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,48"} _ATOMIC_HAS_OCCURRED_$$_ZZ21stereoDisparityKernelPjS_S_iiiiE4diff : bool;
const $arrayId$$_ZZ21stereoDisparityKernelPjS_S_iiiiE4diff : arrayId;
axiom $arrayId$$_ZZ21stereoDisparityKernelPjS_S_iiiiE4diff == 11bv4;

var {:source_name "tex2Dright"} {:global} $$tex2Dright : [bv32]bv32;
axiom {:array_info "$$tex2Dright"} {:global} {:elem_width 32} {:source_name "tex2Dright"} {:source_elem_width 96} {:source_dimensions "1"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 96} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$tex2Dright : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 96} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$tex2Dright : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 96} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$tex2Dright : bool;
const $arrayId$$tex2Dright : arrayId;
axiom $arrayId$$tex2Dright == 12bv4;

type ptr = bv32;
type arrayId = bv4;

function {:inline true} MKPTR(base: arrayId, offset: bv32) : ptr {
  base ++ offset[28:0]
}

function {:inline true} base#MKPTR(p: ptr) : arrayId {
  p[32:28]
}

function {:inline true} offset#MKPTR(p : ptr) : bv32 {
  0bv4++p[28:0]
}

const $arrayId$$null$ : arrayId;
axiom $arrayId$$null$ == 0bv4;

const _WATCHED_OFFSET : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_id_y} group_id_y : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:local_id_y} local_id_y : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function SI32_TO_FP32(bv32) : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvor"} BV32_OR(bv32, bv32) : bv32;
function {:bvbuiltin "bvsle"} BV32_SLE(bv32, bv32) : bool;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvult"} BV32_ULT(bv32, bv32) : bool;
function {:bvbuiltin "bvurem"} BV32_UREM(bv32, bv32) : bv32;
function {:bvbuiltin "zero_extend 31"} BV1_ZEXT32(bv1) : bv32;
procedure {:source_name "stereoDisparityKernel"} {:kernel} $_Z21stereoDisparityKernelPjS_S_iiii($w:bv32, $h:bv32, $minDisparity:bv32, $maxDisparity:bv32)
requires {:sourceloc_num 0} (if $w == 640bv32 then 1bv1 else 0bv1) != 0bv1;
{
  var $i.0:bv32;
  var $bestCost.0:bv32;
  var $bestDisparity.0:bv32;
  var $d.0:bv32;
  var $i21.0:bv32;
  var $i58.0:bv32;
  var $j.0:bv32;
  var $cost.0:bv32;
  var $i114.0:bv32;
  var $cost.1:bv32;
  var $i132.0:bv32;
  var $bestCost.1:bv32;
  var $bestDisparity.1:bv32;
  var v7:bv32;
  var v6:bv32;
  var v9:bv32;
  var v13:bv32;
  var v11:bv32;
  var v8:bv32;
  var v10:bv32;
  var v12:bv32;
  var v0:bv32;
  var v3:bv32;
  var v4:bool;
  var v2:bv32;
  var v5:bv32;
  var v1:bv32;
  var v14:bool;
  var v15:bool;
  var v16:bv32;
  var v37:bv32;
  var v35:bv32;
  var v17:bv32;
  var v19:bv32;
  var v21:bv32;
  var v18:bv32;
  var v20:bv32;
  var v22:bv32;
  var v28:bv32;
  var v30:bv32;
  var v26:bv32;
  var v29:bv32;
  var v31:bv32;
  var v27:bv32;
  var v32:bool;
  var v34:bool;
  var v33:bv32;
  var v36:bool;
  var v24:bv32;
  var v25:bool;
  var v23:bool;
  var v39:bool;
  var v38:bool;
  var v40:bool;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  v0 := BV32_ADD(BV32_MUL(group_size_x, group_id_x), local_id_x);
  v1 := BV32_ADD(BV32_MUL(group_size_y, group_id_y), local_id_y);
  v2 := BV32_ADD(local_id_x, 8bv32);
  v3 := BV32_ADD(local_id_y, 8bv32);
  $i.0 := 0bv32;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v4 := BV32_SLT($i.0, 3bv32);
  goto $truebb, $falsebb;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  v5 := BV32_ADD(4294967288bv32, BV32_MUL($i.0, 8bv32));
  assert {:sourceloc} {:sourceloc_num 4} true;
  v6 := $$tex2Dleft[0bv32];
  assert {:sourceloc} {:sourceloc_num 5} true;
  $$agg.tmp[0bv32] := v6;
  assert {:sourceloc} {:sourceloc_num 6} true;
  v7 := $$tex2Dleft[1bv32];
  assert {:sourceloc} {:sourceloc_num 7} true;
  $$agg.tmp[1bv32] := v7;
  assert {:sourceloc} {:sourceloc_num 8} true;
  v8 := $$tex2Dleft[2bv32];
  assert {:sourceloc} {:sourceloc_num 9} true;
  $$agg.tmp[2bv32] := v8;
  call {:sourceloc_num 10}   v9 := $_Z5tex2DIjET_7textureIS0_Li2EL19cudaTextureReadMode0EEff(MKPTR($arrayId$$agg.tmp, 0bv32), SI32_TO_FP32(BV32_SUB(v0, 8bv32)), SI32_TO_FP32(BV32_ADD(v1, v5)));
  assert {:sourceloc} {:sourceloc_num 11} true;
  $$imLeftA[$i.0] := v9;
  assert {:sourceloc} {:sourceloc_num 12} true;
  v10 := $$tex2Dleft[0bv32];
  assert {:sourceloc} {:sourceloc_num 13} true;
  $$agg.tmp10[0bv32] := v10;
  assert {:sourceloc} {:sourceloc_num 14} true;
  v11 := $$tex2Dleft[1bv32];
  assert {:sourceloc} {:sourceloc_num 15} true;
  $$agg.tmp10[1bv32] := v11;
  assert {:sourceloc} {:sourceloc_num 16} true;
  v12 := $$tex2Dleft[2bv32];
  assert {:sourceloc} {:sourceloc_num 17} true;
  $$agg.tmp10[2bv32] := v12;
  call {:sourceloc_num 18}   v13 := $_Z5tex2DIjET_7textureIS0_Li2EL19cudaTextureReadMode0EEff(MKPTR($arrayId$$agg.tmp10, 0bv32), SI32_TO_FP32(BV32_ADD(BV32_SUB(v0, 8bv32), 32bv32)), SI32_TO_FP32(BV32_ADD(v1, v5)));
  assert {:sourceloc} {:sourceloc_num 19} true;
  $$imLeftB[$i.0] := v13;
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  $i.0 := BV32_ADD($i.0, 1bv32);
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  $bestCost.0, $bestDisparity.0, $d.0 := 9999999bv32, 0bv32, $minDisparity;
  goto $for.cond.18;
$for.cond.18:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  v14 := BV32_SLE($d.0, $maxDisparity);
  goto $truebb0, $falsebb0;
$for.body.20:
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  $i21.0 := 0bv32;
  goto $for.cond.22;
$for.cond.22:
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 25} (if (_WRITE_HAS_OCCURRED_$$_ZZ21stereoDisparityKernelPjS_S_iiiiE4diff ==> BV32_UREM(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), 48bv32) == BV32_SUB(v2, 8bv32)) then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 26} (if (_WRITE_HAS_OCCURRED_$$_ZZ21stereoDisparityKernelPjS_S_iiiiE4diff ==> BV32_UREM(BV32_ADD(BV32_SUB(BV32_UDIV(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), 48bv32), v3), 8bv32), 8bv32) == 0bv32) then 1bv1 else 0bv1) != 0bv1;
  v15 := BV32_SLT($i21.0, 3bv32);
  goto $truebb1, $falsebb1;
$for.body.38:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  v16 := BV32_ADD(4294967288bv32, BV32_MUL($i21.0, 8bv32));
  assert {:sourceloc} {:sourceloc_num 28} true;
  v17 := $$imLeftA[$i21.0];
  assert {:sourceloc} {:sourceloc_num 29} true;
  v18 := $$tex2Dright[0bv32];
  assert {:sourceloc} {:sourceloc_num 30} true;
  $$agg.tmp43[0bv32] := v18;
  assert {:sourceloc} {:sourceloc_num 31} true;
  v19 := $$tex2Dright[1bv32];
  assert {:sourceloc} {:sourceloc_num 32} true;
  $$agg.tmp43[1bv32] := v19;
  assert {:sourceloc} {:sourceloc_num 33} true;
  v20 := $$tex2Dright[2bv32];
  assert {:sourceloc} {:sourceloc_num 34} true;
  $$agg.tmp43[2bv32] := v20;
  call {:sourceloc_num 35}   v21 := $_Z5tex2DIjET_7textureIS0_Li2EL19cudaTextureReadMode0EEff(MKPTR($arrayId$$agg.tmp43, 0bv32), SI32_TO_FP32(BV32_ADD(BV32_SUB(v0, 8bv32), $d.0)), SI32_TO_FP32(BV32_ADD(v1, v16)));
  call {:sourceloc_num 36}   v22 := $_ZL7__usad4jjj(v17, v21, 0bv32);
  assert {:sourceloc} {:sourceloc_num 37} true;
  $$_ZZ21stereoDisparityKernelPjS_S_iiiiE4diff[BV32_ADD(BV32_MUL(BV32_ADD(v3, v16), 48bv32), BV32_SUB(v2, 8bv32))] := v22;
  goto $for.inc.55;
$for.inc.55:
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  $i21.0 := BV32_ADD($i21.0, 1bv32);
  goto $for.cond.22;
$for.end.57:
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  $i58.0 := 0bv32;
  goto $for.cond.59;
$for.cond.59:
  assert {:block_sourceloc} {:sourceloc_num 40} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 41} (if (_WRITE_HAS_OCCURRED_$$_ZZ21stereoDisparityKernelPjS_S_iiiiE4diff ==> BV32_OR(BV1_ZEXT32((if BV32_UREM(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), 48bv32) == BV32_ADD(BV32_SUB(v2, 8bv32), 32bv32) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_UREM(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), 48bv32) == BV32_SUB(v2, 8bv32) then 1bv1 else 0bv1))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 42} (if (_WRITE_HAS_OCCURRED_$$_ZZ21stereoDisparityKernelPjS_S_iiiiE4diff ==> BV32_UREM(BV32_ADD(BV32_SUB(BV32_UDIV(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), 48bv32), v3), 8bv32), 8bv32) == 0bv32) then 1bv1 else 0bv1) != 0bv1;
  v23 := BV32_SLT($i58.0, 3bv32);
  goto $truebb2, $falsebb2;
$for.body.85:
  assert {:block_sourceloc} {:sourceloc_num 43} true;
  v24 := BV32_ADD(4294967288bv32, BV32_MUL($i58.0, 8bv32));
  v25 := BV32_ULT(local_id_x, 16bv32);
  goto $truebb3, $falsebb3;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 44} true;
  assert {:sourceloc} {:sourceloc_num 45} true;
  v26 := $$imLeftB[$i58.0];
  assert {:sourceloc} {:sourceloc_num 46} true;
  v27 := $$tex2Dright[0bv32];
  assert {:sourceloc} {:sourceloc_num 47} true;
  $$agg.tmp91[0bv32] := v27;
  assert {:sourceloc} {:sourceloc_num 48} true;
  v28 := $$tex2Dright[1bv32];
  assert {:sourceloc} {:sourceloc_num 49} true;
  $$agg.tmp91[1bv32] := v28;
  assert {:sourceloc} {:sourceloc_num 50} true;
  v29 := $$tex2Dright[2bv32];
  assert {:sourceloc} {:sourceloc_num 51} true;
  $$agg.tmp91[2bv32] := v29;
  call {:sourceloc_num 52}   v30 := $_Z5tex2DIjET_7textureIS0_Li2EL19cudaTextureReadMode0EEff(MKPTR($arrayId$$agg.tmp91, 0bv32), SI32_TO_FP32(BV32_ADD(BV32_ADD(BV32_SUB(v0, 8bv32), 32bv32), $d.0)), SI32_TO_FP32(BV32_ADD(v1, v24)));
  call {:sourceloc_num 53}   v31 := $_ZL7__usad4jjj(v26, v30, 0bv32);
  assert {:sourceloc} {:sourceloc_num 54} true;
  $$_ZZ21stereoDisparityKernelPjS_S_iiiiE4diff[BV32_ADD(BV32_MUL(BV32_ADD(v3, v24), 48bv32), BV32_ADD(BV32_SUB(v2, 8bv32), 32bv32))] := v31;
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 55} true;
  goto $for.inc.105;
$for.inc.105:
  assert {:block_sourceloc} {:sourceloc_num 56} true;
  $i58.0 := BV32_ADD($i58.0, 1bv32);
  goto $for.cond.59;
$for.end.107:
  assert {:block_sourceloc} {:sourceloc_num 57} true;
  call {:sourceloc_num 58} $bugle_barrier(1bv1, 1bv1);
  $j.0 := 0bv32;
  goto $for.cond.108;
$for.cond.108:
  assert {:block_sourceloc} {:sourceloc_num 59} true;
  v32 := BV32_SLT($j.0, 3bv32);
  goto $truebb4, $falsebb4;
$for.body.110:
  assert {:block_sourceloc} {:sourceloc_num 60} true;
  v33 := BV32_ADD(4294967288bv32, BV32_MUL($j.0, 8bv32));
  $cost.0, $i114.0 := 0bv32, 4294967288bv32;
  goto $for.cond.115;
$for.cond.115:
  assert {:block_sourceloc} {:sourceloc_num 61} true;
  v34 := BV32_SLE($i114.0, 8bv32);
  goto $truebb5, $falsebb5;
$for.body.117:
  assert {:block_sourceloc} {:sourceloc_num 62} true;
  assert {:sourceloc} {:sourceloc_num 63} true;
  v35 := $$_ZZ21stereoDisparityKernelPjS_S_iiiiE4diff[BV32_ADD(BV32_MUL(BV32_ADD(v3, v33), 48bv32), BV32_ADD(v2, $i114.0))];
  goto $for.inc.123;
$for.inc.123:
  assert {:block_sourceloc} {:sourceloc_num 64} true;
  $cost.0, $i114.0 := BV32_ADD($cost.0, v35), BV32_ADD($i114.0, 1bv32);
  goto $for.cond.115;
$for.end.125:
  assert {:block_sourceloc} {:sourceloc_num 65} true;
  call {:sourceloc_num 66} $bugle_barrier(1bv1, 1bv1);
  assert {:sourceloc} {:sourceloc_num 67} true;
  $$_ZZ21stereoDisparityKernelPjS_S_iiiiE4diff[BV32_ADD(BV32_MUL(BV32_ADD(v3, v33), 48bv32), v2)] := $cost.0;
  call {:sourceloc_num 68} $bugle_barrier(1bv1, 1bv1);
  goto $for.inc.129;
$for.inc.129:
  assert {:block_sourceloc} {:sourceloc_num 69} true;
  $j.0 := BV32_ADD($j.0, 1bv32);
  goto $for.cond.108;
$for.end.131:
  assert {:block_sourceloc} {:sourceloc_num 70} true;
  $cost.1, $i132.0 := 0bv32, 4294967288bv32;
  goto $for.cond.133;
$for.cond.133:
  assert {:block_sourceloc} {:sourceloc_num 71} true;
  v36 := BV32_SLE($i132.0, 8bv32);
  goto $truebb6, $falsebb6;
$for.body.135:
  assert {:block_sourceloc} {:sourceloc_num 72} true;
  assert {:sourceloc} {:sourceloc_num 73} true;
  v37 := $$_ZZ21stereoDisparityKernelPjS_S_iiiiE4diff[BV32_ADD(BV32_MUL(BV32_ADD(v3, $i132.0), 48bv32), v2)];
  goto $for.inc.140;
$for.inc.140:
  assert {:block_sourceloc} {:sourceloc_num 74} true;
  $cost.1, $i132.0 := BV32_ADD($cost.1, v37), BV32_ADD($i132.0, 1bv32);
  goto $for.cond.133;
$for.end.142:
  assert {:block_sourceloc} {:sourceloc_num 75} true;
  v38 := BV32_ULT($cost.1, $bestCost.0);
  goto $truebb7, $falsebb7;
$if.then.144:
  assert {:block_sourceloc} {:sourceloc_num 76} true;
  $bestCost.1, $bestDisparity.1 := $cost.1, BV32_ADD($d.0, 8bv32);
  goto $if.end.146;
$if.end.146:
  assert {:block_sourceloc} {:sourceloc_num 77} true;
  call {:sourceloc_num 78} $bugle_barrier(1bv1, 1bv1);
  goto $for.inc.147;
$for.inc.147:
  assert {:block_sourceloc} {:sourceloc_num 79} true;
  $bestCost.0, $bestDisparity.0, $d.0 := $bestCost.1, $bestDisparity.1, BV32_ADD($d.0, 1bv32);
  goto $for.cond.18;
$for.end.149:
  assert {:block_sourceloc} {:sourceloc_num 80} true;
  v39 := BV32_SLT(v1, $h);
  goto $truebb8, $falsebb8;
$land.lhs.true:
  assert {:block_sourceloc} {:sourceloc_num 81} true;
  v40 := BV32_SLT(v0, $w);
  goto $truebb9, $falsebb9;
$if.then.152:
  assert {:block_sourceloc} {:sourceloc_num 82} true;
  assert {:sourceloc} {:sourceloc_num 83} true;
  $$g_odata[BV32_ADD(BV32_MUL(v1, $w), v0)] := $bestDisparity.0;
  goto $if.end.156;
$if.end.156:
  assert {:block_sourceloc} {:sourceloc_num 84} true;
  return;
$truebb:
  assume {:partition} v4;
  assert {:block_sourceloc} {:sourceloc_num 85} true;
  goto $for.body;
$falsebb:
  assume {:partition} !v4;
  assert {:block_sourceloc} {:sourceloc_num 86} true;
  goto $for.end;
$truebb0:
  assume {:partition} v14;
  assert {:block_sourceloc} {:sourceloc_num 87} true;
  goto $for.body.20;
$falsebb0:
  assume {:partition} !v14;
  assert {:block_sourceloc} {:sourceloc_num 88} true;
  goto $for.end.149;
$truebb1:
  assume {:partition} v15;
  assert {:block_sourceloc} {:sourceloc_num 89} true;
  goto $for.body.38;
$falsebb1:
  assume {:partition} !v15;
  assert {:block_sourceloc} {:sourceloc_num 90} true;
  goto $for.end.57;
$truebb2:
  assume {:partition} v23;
  assert {:block_sourceloc} {:sourceloc_num 91} true;
  goto $for.body.85;
$falsebb2:
  assume {:partition} !v23;
  assert {:block_sourceloc} {:sourceloc_num 92} true;
  goto $for.end.107;
$truebb3:
  assume {:partition} v25;
  assert {:block_sourceloc} {:sourceloc_num 93} true;
  goto $if.then;
$falsebb3:
  assume {:partition} !v25;
  assert {:block_sourceloc} {:sourceloc_num 94} true;
  goto $if.end;
$truebb4:
  assume {:partition} v32;
  assert {:block_sourceloc} {:sourceloc_num 95} true;
  goto $for.body.110;
$falsebb4:
  assume {:partition} !v32;
  assert {:block_sourceloc} {:sourceloc_num 96} true;
  goto $for.end.131;
$truebb5:
  assume {:partition} v34;
  assert {:block_sourceloc} {:sourceloc_num 97} true;
  goto $for.body.117;
$falsebb5:
  assume {:partition} !v34;
  assert {:block_sourceloc} {:sourceloc_num 98} true;
  goto $for.end.125;
$truebb6:
  assume {:partition} v36;
  assert {:block_sourceloc} {:sourceloc_num 99} true;
  goto $for.body.135;
$falsebb6:
  assume {:partition} !v36;
  assert {:block_sourceloc} {:sourceloc_num 100} true;
  goto $for.end.142;
$truebb7:
  assume {:partition} v38;
  assert {:block_sourceloc} {:sourceloc_num 101} true;
  goto $if.then.144;
$falsebb7:
  assume {:partition} !v38;
  assert {:block_sourceloc} {:sourceloc_num 102} true;
  $bestCost.1, $bestDisparity.1 := $bestCost.0, $bestDisparity.0;
  goto $if.end.146;
$truebb8:
  assume {:partition} v39;
  assert {:block_sourceloc} {:sourceloc_num 103} true;
  goto $land.lhs.true;
$falsebb8:
  assume {:partition} !v39;
  assert {:block_sourceloc} {:sourceloc_num 104} true;
  goto $if.end.156;
$truebb9:
  assume {:partition} v40;
  assert {:block_sourceloc} {:sourceloc_num 105} true;
  goto $if.then.152;
$falsebb9:
  assume {:partition} !v40;
  assert {:block_sourceloc} {:sourceloc_num 106} true;
  goto $if.end.156;
}
procedure {:source_name "_Z5tex2DIjET_7textureIS0_Li2EL19cudaTextureReadMode0EEff"} $_Z5tex2DIjET_7textureIS0_Li2EL19cudaTextureReadMode0EEff($0:ptr, $1:bv32, $2:bv32) returns ($ret:bv32);
procedure {:source_name "_ZL7__usad4jjj"} $_ZL7__usad4jjj($0:bv32, $1:bv32, $2:bv32) returns ($ret:bv32);
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 32bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_y == 8bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 20bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 67bv32 then 1bv1 else 0bv1) != 0bv1;
