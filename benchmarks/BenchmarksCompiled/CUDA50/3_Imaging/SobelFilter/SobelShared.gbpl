type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP8(x : [bv32]bv8, y : bv32) returns (z : bv8, A : [bv32]bv8);
var {:source_name "pSobelOriginal"} {:global} $$pSobelOriginal : [bv32]bv8;
axiom {:array_info "$$pSobelOriginal"} {:global} {:elem_width 8} {:source_name "pSobelOriginal"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$pSobelOriginal : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$pSobelOriginal : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$pSobelOriginal : bool;
const $arrayId$$pSobelOriginal : arrayId;
axiom $arrayId$$pSobelOriginal == 1bv4;

var {:source_name "agg.tmp"} $$agg.tmp : [bv32]bv8;
axiom {:array_info "$$agg.tmp"} {:elem_width 8} {:source_name "agg.tmp"} {:source_elem_width 96} {:source_dimensions "1"} true;
const $arrayId$$agg.tmp : arrayId;
axiom $arrayId$$agg.tmp == 2bv4;

var {:source_name "agg.tmp48"} $$agg.tmp48 : [bv32]bv8;
axiom {:array_info "$$agg.tmp48"} {:elem_width 8} {:source_name "agg.tmp48"} {:source_elem_width 96} {:source_dimensions "1"} true;
const $arrayId$$agg.tmp48 : arrayId;
axiom $arrayId$$agg.tmp48 == 3bv4;

var {:source_name "agg.tmp65"} $$agg.tmp65 : [bv32]bv8;
axiom {:array_info "$$agg.tmp65"} {:elem_width 8} {:source_name "agg.tmp65"} {:source_elem_width 96} {:source_dimensions "1"} true;
const $arrayId$$agg.tmp65 : arrayId;
axiom $arrayId$$agg.tmp65 == 4bv4;

var {:source_name "agg.tmp82"} $$agg.tmp82 : [bv32]bv8;
axiom {:array_info "$$agg.tmp82"} {:elem_width 8} {:source_name "agg.tmp82"} {:source_elem_width 96} {:source_dimensions "1"} true;
const $arrayId$$agg.tmp82 : arrayId;
axiom $arrayId$$agg.tmp82 == 5bv4;

var {:source_name "agg.tmp153"} $$agg.tmp153 : [bv32]bv8;
axiom {:array_info "$$agg.tmp153"} {:elem_width 8} {:source_name "agg.tmp153"} {:source_elem_width 96} {:source_dimensions "1"} true;
const $arrayId$$agg.tmp153 : arrayId;
axiom $arrayId$$agg.tmp153 == 6bv4;

var {:source_name "agg.tmp171"} $$agg.tmp171 : [bv32]bv8;
axiom {:array_info "$$agg.tmp171"} {:elem_width 8} {:source_name "agg.tmp171"} {:source_elem_width 96} {:source_dimensions "1"} true;
const $arrayId$$agg.tmp171 : arrayId;
axiom $arrayId$$agg.tmp171 == 7bv4;

var {:source_name "agg.tmp189"} $$agg.tmp189 : [bv32]bv8;
axiom {:array_info "$$agg.tmp189"} {:elem_width 8} {:source_name "agg.tmp189"} {:source_elem_width 96} {:source_dimensions "1"} true;
const $arrayId$$agg.tmp189 : arrayId;
axiom $arrayId$$agg.tmp189 == 8bv4;

var {:source_name "agg.tmp207"} $$agg.tmp207 : [bv32]bv8;
axiom {:array_info "$$agg.tmp207"} {:elem_width 8} {:source_name "agg.tmp207"} {:source_elem_width 96} {:source_dimensions "1"} true;
const $arrayId$$agg.tmp207 : arrayId;
axiom $arrayId$$agg.tmp207 == 9bv4;

var {:source_name "out"} $$out : [bv32]bv8;
axiom {:array_info "$$out"} {:elem_width 8} {:source_name "out"} {:source_elem_width 32} {:source_dimensions "1"} true;
const $arrayId$$out : arrayId;
axiom $arrayId$$out == 10bv4;

var {:source_name "LocalBlock"} {:group_shared} $$LocalBlock : [bv32]bv8;
axiom {:array_info "$$LocalBlock"} {:group_shared} {:elem_width 8} {:source_name "LocalBlock"} {:source_elem_width 8} {:source_dimensions "0"} true;
var {:race_checking} {:group_shared} {:elem_width 8} {:source_elem_width 8} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$LocalBlock : bool;
var {:race_checking} {:group_shared} {:elem_width 8} {:source_elem_width 8} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$LocalBlock : bool;
var {:race_checking} {:group_shared} {:elem_width 8} {:source_elem_width 8} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$LocalBlock : bool;
const $arrayId$$LocalBlock : arrayId;
axiom $arrayId$$LocalBlock == 11bv4;

var {:source_name "tex"} {:global} $$tex : [bv32]bv8;
axiom {:array_info "$$tex"} {:global} {:elem_width 8} {:source_name "tex"} {:source_elem_width 96} {:source_dimensions "1"} true;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 96} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$tex : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 96} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$tex : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 96} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$tex : bool;
const $arrayId$$tex : arrayId;
axiom $arrayId$$tex == 12bv4;

type ptr = bv32;
type arrayId = bv4;

function {:inline true} MKPTR(base: arrayId, offset: bv32) : ptr {
  base ++ offset[28:0]
}

function {:inline true} base#MKPTR(p: ptr) : arrayId {
  p[32:28]
}

function {:inline true} offset#MKPTR(p : ptr) : bv32 {
  0bv4++p[28:0]
}

const $arrayId$$null$ : arrayId;
axiom $arrayId$$null$ == 0bv4;

const _WATCHED_OFFSET : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_id_y} group_id_y : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:local_id_y} local_id_y : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FADD32(bv32, bv32) : bv32;
function FMUL32(bv32, bv32) : bv32;
function FP32_TO_SI16(bv32) : bv16;
function SI32_TO_FP32(bv32) : bv32;
function UI32_TO_FP32(bv32) : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvand"} BV32_AND(bv32, bv32) : bv32;
function {:bvbuiltin "bvashr"} BV32_ASHR(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvor"} BV32_OR(bv32, bv32) : bv32;
function {:bvbuiltin "bvsdiv"} BV32_SDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvsgt"} BV32_SGT(bv32, bv32) : bool;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvult"} BV32_ULT(bv32, bv32) : bool;
function {:bvbuiltin "bvurem"} BV32_UREM(bv32, bv32) : bv32;
function {:bvbuiltin "sign_extend 16"} BV16_SEXT32(bv16) : bv32;
function {:bvbuiltin "zero_extend 16"} BV16_ZEXT32(bv16) : bv32;
function {:bvbuiltin "zero_extend 24"} BV8_ZEXT32(bv8) : bv32;
function {:bvbuiltin "zero_extend 31"} BV1_ZEXT32(bv1) : bv32;
procedure {:source_name "SobelShared"} {:kernel} $_Z11SobelSharedP6uchar4tssssf($SobelPitch:bv16, $BlockWidth:bv16, $SharedPitch:bv16, $w:bv16, $h:bv16, $fScale:bv32)
requires {:sourceloc_num 0} (if BV16_ZEXT32($SobelPitch) == 512bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 1} (if BV16_SEXT32($BlockWidth) == 80bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 2} (if BV16_SEXT32($SharedPitch) == 384bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 3} (if BV16_SEXT32($w) == 512bv32 then 1bv1 else 0bv1) != 0bv1;
{
  var $ib.0:bv16;
  var $ib.1:bv16;
  var $ib.2:bv16;
  var $retval.i.0:bv8;
  var $retval.i.447.0:bv8;
  var $retval.i.508.0:bv8;
  var $retval.i.569.0:bv8;
  var v1:bv16;
  var v0:bv16;
  var v2:bv32;
  var v5:bv8;
  var v7:bv8;
  var v6:bv8;
  var v8:bv8;
  var v4:bv8;
  var v11:bv8;
  var v12:bv8;
  var v15:bv8;
  var v16:bv8;
  var v19:bv8;
  var v18:bv8;
  var v20:bv8;
  var v10:bv8;
  var v14:bv8;
  var v9:bv8;
  var v13:bv8;
  var v17:bv8;
  var v28:bv8;
  var v31:bv8;
  var v27:bv8;
  var v24:bv8;
  var v26:bv8;
  var v23:bv8;
  var v22:bv8;
  var v29:bv8;
  var v21:bv8;
  var v25:bv8;
  var v30:bv8;
  var v32:bv8;
  var v39:bv8;
  var v42:bv8;
  var v38:bv8;
  var v35:bv8;
  var v40:bv8;
  var v34:bv8;
  var v41:bv8;
  var v36:bv8;
  var v33:bv8;
  var v37:bv8;
  var v48:bv8;
  var v45:bv8;
  var v52:bv8;
  var v44:bv8;
  var v46:bv8;
  var v51:bv8;
  var v53:bv8;
  var v43:bv8;
  var v47:bv8;
  var v49:bv8;
  var v50:bv8;
  var v3:bool;
  var v56:bool;
  var v57:bv32;
  var v109:bv8;
  var v110:bv8;
  var v107:bv8;
  var v106:bv8;
  var v102:bv8;
  var v101:bv8;
  var v104:bv8;
  var v105:bv8;
  var v103:bv8;
  var v108:bv8;
  var v61:bv8;
  var v64:bv8;
  var v62:bv8;
  var v63:bv8;
  var v54:bv8;
  var v55:bv8;
  var v60:bv8;
  var v59:bv8;
  var v72:bv8;
  var v67:bv8;
  var v68:bv8;
  var v66:bv8;
  var v73:bv8;
  var v74:bv8;
  var v65:bv8;
  var v69:bv8;
  var v70:bv8;
  var v75:bv8;
  var v71:bv8;
  var v80:bv8;
  var v83:bv8;
  var v79:bv8;
  var v82:bv8;
  var v84:bv8;
  var v76:bv8;
  var v77:bv8;
  var v81:bv8;
  var v85:bv8;
  var v86:bv8;
  var v78:bv8;
  var v88:bv8;
  var v93:bv8;
  var v94:bv8;
  var v89:bv8;
  var v92:bv8;
  var v95:bv8;
  var v91:bv8;
  var v96:bv8;
  var v97:bv8;
  var v87:bv8;
  var v90:bv8;
  var v98:bv8;
  var v100:bv8;
  var v99:bv8;
  var v58:bool;
  var v113:bool;
  var v111:bv16;
  var v112:bv32;
  var v114:bv8;
  var v120:bv8;
  var v121:bv8;
  var v115:bv8;
  var v123:bv32;
  var v124:bv32;
  var v116:bv8;
  var v122:bv8;
  var v117:bv8;
  var v119:bv8;
  var v118:bv8;
  var v128:bv8;
  var v144:bv8;
  var v131:bv32;
  var v146:bv8;
  var v147:bv32;
  var v140:bv32;
  var v145:bv8;
  var v136:bv8;
  var v130:bv8;
  var v129:bv8;
  var v137:bv8;
  var v132:bv32;
  var v139:bv32;
  var v138:bv8;
  var v148:bv32;
  var v155:bv8;
  var v154:bv8;
  var v156:bv8;
  var v157:bv8;
  var v127:bool;
  var v126:bool;
  var v125:bv16;
  var v133:bv16;
  var v134:bool;
  var v135:bool;
  var v141:bv16;
  var v142:bool;
  var v143:bool;
  var v149:bv16;
  var v151:bool;
  var v150:bool;
  var v153:bool;
  var v152:bool;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  v0 := BV32_MUL(BV32_MUL(4bv32, group_id_x), BV16_SEXT32($BlockWidth))[16:0];
  v1 := BV32_ADD(BV32_MUL(group_id_y, group_size_y), local_id_y)[16:0];
  v2 := BV32_MUL(local_id_y, BV16_SEXT32($SharedPitch));
  $ib.0 := local_id_x[16:0];
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 6} (if BV32_UREM(BV16_SEXT32($ib.0), group_size_x) == local_id_x then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 7} (if (_WRITE_HAS_OCCURRED_$$LocalBlock ==> BV32_ULT(BV32_UDIV(BV32_SUB(_WATCHED_OFFSET, v2), 4bv32), BV32_ADD(BV16_SEXT32($BlockWidth), 2bv32))) then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 8} (if (_WRITE_HAS_OCCURRED_$$LocalBlock ==> BV32_UREM(BV32_UDIV(BV32_SUB(_WATCHED_OFFSET, v2), 4bv32), group_size_x) == local_id_x) then 1bv1 else 0bv1) != 0bv1;
  v3 := BV32_SLT(BV16_SEXT32($ib.0), BV32_ADD(BV16_SEXT32($BlockWidth), 2bv32));
  goto $truebb, $falsebb;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  assert {:sourceloc} {:sourceloc_num 10} true;
  v4 := $$tex[0bv32];
  assert {:sourceloc} {:sourceloc_num 11} true;
  $$agg.tmp[0bv32] := v4;
  assert {:sourceloc} {:sourceloc_num 12} true;
  v5 := $$tex[1bv32];
  assert {:sourceloc} {:sourceloc_num 13} true;
  $$agg.tmp[1bv32] := v5;
  assert {:sourceloc} {:sourceloc_num 14} true;
  v6 := $$tex[2bv32];
  assert {:sourceloc} {:sourceloc_num 15} true;
  $$agg.tmp[2bv32] := v6;
  assert {:sourceloc} {:sourceloc_num 16} true;
  v7 := $$tex[3bv32];
  assert {:sourceloc} {:sourceloc_num 17} true;
  $$agg.tmp[3bv32] := v7;
  assert {:sourceloc} {:sourceloc_num 18} true;
  v8 := $$tex[4bv32];
  assert {:sourceloc} {:sourceloc_num 19} true;
  $$agg.tmp[4bv32] := v8;
  assert {:sourceloc} {:sourceloc_num 20} true;
  v9 := $$tex[5bv32];
  assert {:sourceloc} {:sourceloc_num 21} true;
  $$agg.tmp[5bv32] := v9;
  assert {:sourceloc} {:sourceloc_num 22} true;
  v10 := $$tex[6bv32];
  assert {:sourceloc} {:sourceloc_num 23} true;
  $$agg.tmp[6bv32] := v10;
  assert {:sourceloc} {:sourceloc_num 24} true;
  v11 := $$tex[7bv32];
  assert {:sourceloc} {:sourceloc_num 25} true;
  $$agg.tmp[7bv32] := v11;
  assert {:sourceloc} {:sourceloc_num 26} true;
  v12 := $$tex[8bv32];
  assert {:sourceloc} {:sourceloc_num 27} true;
  $$agg.tmp[8bv32] := v12;
  assert {:sourceloc} {:sourceloc_num 28} true;
  v13 := $$tex[9bv32];
  assert {:sourceloc} {:sourceloc_num 29} true;
  $$agg.tmp[9bv32] := v13;
  assert {:sourceloc} {:sourceloc_num 30} true;
  v14 := $$tex[10bv32];
  assert {:sourceloc} {:sourceloc_num 31} true;
  $$agg.tmp[10bv32] := v14;
  assert {:sourceloc} {:sourceloc_num 32} true;
  v15 := $$tex[11bv32];
  assert {:sourceloc} {:sourceloc_num 33} true;
  $$agg.tmp[11bv32] := v15;
  call {:sourceloc_num 34}   v16 := $_Z5tex2DIhET_7textureIS0_Li2EL19cudaTextureReadMode0EEff(MKPTR($arrayId$$agg.tmp, 0bv32), SI32_TO_FP32(BV32_SUB(BV32_ADD(BV16_SEXT32(v0), BV32_MUL(4bv32, BV16_SEXT32($ib.0))), 1bv32)), SI32_TO_FP32(BV32_SUB(BV16_SEXT32(v1), 1bv32)));
  assert {:sourceloc} {:sourceloc_num 35} true;
  $$LocalBlock[BV32_ADD(v2, BV32_MUL(4bv32, BV16_SEXT32($ib.0)))] := v16;
  assert {:sourceloc} {:sourceloc_num 36} true;
  v17 := $$tex[0bv32];
  assert {:sourceloc} {:sourceloc_num 37} true;
  $$agg.tmp48[0bv32] := v17;
  assert {:sourceloc} {:sourceloc_num 38} true;
  v18 := $$tex[1bv32];
  assert {:sourceloc} {:sourceloc_num 39} true;
  $$agg.tmp48[1bv32] := v18;
  assert {:sourceloc} {:sourceloc_num 40} true;
  v19 := $$tex[2bv32];
  assert {:sourceloc} {:sourceloc_num 41} true;
  $$agg.tmp48[2bv32] := v19;
  assert {:sourceloc} {:sourceloc_num 42} true;
  v20 := $$tex[3bv32];
  assert {:sourceloc} {:sourceloc_num 43} true;
  $$agg.tmp48[3bv32] := v20;
  assert {:sourceloc} {:sourceloc_num 44} true;
  v21 := $$tex[4bv32];
  assert {:sourceloc} {:sourceloc_num 45} true;
  $$agg.tmp48[4bv32] := v21;
  assert {:sourceloc} {:sourceloc_num 46} true;
  v22 := $$tex[5bv32];
  assert {:sourceloc} {:sourceloc_num 47} true;
  $$agg.tmp48[5bv32] := v22;
  assert {:sourceloc} {:sourceloc_num 48} true;
  v23 := $$tex[6bv32];
  assert {:sourceloc} {:sourceloc_num 49} true;
  $$agg.tmp48[6bv32] := v23;
  assert {:sourceloc} {:sourceloc_num 50} true;
  v24 := $$tex[7bv32];
  assert {:sourceloc} {:sourceloc_num 51} true;
  $$agg.tmp48[7bv32] := v24;
  assert {:sourceloc} {:sourceloc_num 52} true;
  v25 := $$tex[8bv32];
  assert {:sourceloc} {:sourceloc_num 53} true;
  $$agg.tmp48[8bv32] := v25;
  assert {:sourceloc} {:sourceloc_num 54} true;
  v26 := $$tex[9bv32];
  assert {:sourceloc} {:sourceloc_num 55} true;
  $$agg.tmp48[9bv32] := v26;
  assert {:sourceloc} {:sourceloc_num 56} true;
  v27 := $$tex[10bv32];
  assert {:sourceloc} {:sourceloc_num 57} true;
  $$agg.tmp48[10bv32] := v27;
  assert {:sourceloc} {:sourceloc_num 58} true;
  v28 := $$tex[11bv32];
  assert {:sourceloc} {:sourceloc_num 59} true;
  $$agg.tmp48[11bv32] := v28;
  call {:sourceloc_num 60}   v29 := $_Z5tex2DIhET_7textureIS0_Li2EL19cudaTextureReadMode0EEff(MKPTR($arrayId$$agg.tmp48, 0bv32), SI32_TO_FP32(BV32_ADD(BV32_SUB(BV32_ADD(BV16_SEXT32(v0), BV32_MUL(4bv32, BV16_SEXT32($ib.0))), 1bv32), 1bv32)), SI32_TO_FP32(BV32_SUB(BV16_SEXT32(v1), 1bv32)));
  assert {:sourceloc} {:sourceloc_num 61} true;
  $$LocalBlock[BV32_ADD(BV32_ADD(v2, BV32_MUL(4bv32, BV16_SEXT32($ib.0))), 1bv32)] := v29;
  assert {:sourceloc} {:sourceloc_num 62} true;
  v30 := $$tex[0bv32];
  assert {:sourceloc} {:sourceloc_num 63} true;
  $$agg.tmp65[0bv32] := v30;
  assert {:sourceloc} {:sourceloc_num 64} true;
  v31 := $$tex[1bv32];
  assert {:sourceloc} {:sourceloc_num 65} true;
  $$agg.tmp65[1bv32] := v31;
  assert {:sourceloc} {:sourceloc_num 66} true;
  v32 := $$tex[2bv32];
  assert {:sourceloc} {:sourceloc_num 67} true;
  $$agg.tmp65[2bv32] := v32;
  assert {:sourceloc} {:sourceloc_num 68} true;
  v33 := $$tex[3bv32];
  assert {:sourceloc} {:sourceloc_num 69} true;
  $$agg.tmp65[3bv32] := v33;
  assert {:sourceloc} {:sourceloc_num 70} true;
  v34 := $$tex[4bv32];
  assert {:sourceloc} {:sourceloc_num 71} true;
  $$agg.tmp65[4bv32] := v34;
  assert {:sourceloc} {:sourceloc_num 72} true;
  v35 := $$tex[5bv32];
  assert {:sourceloc} {:sourceloc_num 73} true;
  $$agg.tmp65[5bv32] := v35;
  assert {:sourceloc} {:sourceloc_num 74} true;
  v36 := $$tex[6bv32];
  assert {:sourceloc} {:sourceloc_num 75} true;
  $$agg.tmp65[6bv32] := v36;
  assert {:sourceloc} {:sourceloc_num 76} true;
  v37 := $$tex[7bv32];
  assert {:sourceloc} {:sourceloc_num 77} true;
  $$agg.tmp65[7bv32] := v37;
  assert {:sourceloc} {:sourceloc_num 78} true;
  v38 := $$tex[8bv32];
  assert {:sourceloc} {:sourceloc_num 79} true;
  $$agg.tmp65[8bv32] := v38;
  assert {:sourceloc} {:sourceloc_num 80} true;
  v39 := $$tex[9bv32];
  assert {:sourceloc} {:sourceloc_num 81} true;
  $$agg.tmp65[9bv32] := v39;
  assert {:sourceloc} {:sourceloc_num 82} true;
  v40 := $$tex[10bv32];
  assert {:sourceloc} {:sourceloc_num 83} true;
  $$agg.tmp65[10bv32] := v40;
  assert {:sourceloc} {:sourceloc_num 84} true;
  v41 := $$tex[11bv32];
  assert {:sourceloc} {:sourceloc_num 85} true;
  $$agg.tmp65[11bv32] := v41;
  call {:sourceloc_num 86}   v42 := $_Z5tex2DIhET_7textureIS0_Li2EL19cudaTextureReadMode0EEff(MKPTR($arrayId$$agg.tmp65, 0bv32), SI32_TO_FP32(BV32_ADD(BV32_SUB(BV32_ADD(BV16_SEXT32(v0), BV32_MUL(4bv32, BV16_SEXT32($ib.0))), 1bv32), 2bv32)), SI32_TO_FP32(BV32_SUB(BV16_SEXT32(v1), 1bv32)));
  assert {:sourceloc} {:sourceloc_num 87} true;
  $$LocalBlock[BV32_ADD(BV32_ADD(v2, BV32_MUL(4bv32, BV16_SEXT32($ib.0))), 2bv32)] := v42;
  assert {:sourceloc} {:sourceloc_num 88} true;
  v43 := $$tex[0bv32];
  assert {:sourceloc} {:sourceloc_num 89} true;
  $$agg.tmp82[0bv32] := v43;
  assert {:sourceloc} {:sourceloc_num 90} true;
  v44 := $$tex[1bv32];
  assert {:sourceloc} {:sourceloc_num 91} true;
  $$agg.tmp82[1bv32] := v44;
  assert {:sourceloc} {:sourceloc_num 92} true;
  v45 := $$tex[2bv32];
  assert {:sourceloc} {:sourceloc_num 93} true;
  $$agg.tmp82[2bv32] := v45;
  assert {:sourceloc} {:sourceloc_num 94} true;
  v46 := $$tex[3bv32];
  assert {:sourceloc} {:sourceloc_num 95} true;
  $$agg.tmp82[3bv32] := v46;
  assert {:sourceloc} {:sourceloc_num 96} true;
  v47 := $$tex[4bv32];
  assert {:sourceloc} {:sourceloc_num 97} true;
  $$agg.tmp82[4bv32] := v47;
  assert {:sourceloc} {:sourceloc_num 98} true;
  v48 := $$tex[5bv32];
  assert {:sourceloc} {:sourceloc_num 99} true;
  $$agg.tmp82[5bv32] := v48;
  assert {:sourceloc} {:sourceloc_num 100} true;
  v49 := $$tex[6bv32];
  assert {:sourceloc} {:sourceloc_num 101} true;
  $$agg.tmp82[6bv32] := v49;
  assert {:sourceloc} {:sourceloc_num 102} true;
  v50 := $$tex[7bv32];
  assert {:sourceloc} {:sourceloc_num 103} true;
  $$agg.tmp82[7bv32] := v50;
  assert {:sourceloc} {:sourceloc_num 104} true;
  v51 := $$tex[8bv32];
  assert {:sourceloc} {:sourceloc_num 105} true;
  $$agg.tmp82[8bv32] := v51;
  assert {:sourceloc} {:sourceloc_num 106} true;
  v52 := $$tex[9bv32];
  assert {:sourceloc} {:sourceloc_num 107} true;
  $$agg.tmp82[9bv32] := v52;
  assert {:sourceloc} {:sourceloc_num 108} true;
  v53 := $$tex[10bv32];
  assert {:sourceloc} {:sourceloc_num 109} true;
  $$agg.tmp82[10bv32] := v53;
  assert {:sourceloc} {:sourceloc_num 110} true;
  v54 := $$tex[11bv32];
  assert {:sourceloc} {:sourceloc_num 111} true;
  $$agg.tmp82[11bv32] := v54;
  call {:sourceloc_num 112}   v55 := $_Z5tex2DIhET_7textureIS0_Li2EL19cudaTextureReadMode0EEff(MKPTR($arrayId$$agg.tmp82, 0bv32), SI32_TO_FP32(BV32_ADD(BV32_SUB(BV32_ADD(BV16_SEXT32(v0), BV32_MUL(4bv32, BV16_SEXT32($ib.0))), 1bv32), 3bv32)), SI32_TO_FP32(BV32_SUB(BV16_SEXT32(v1), 1bv32)));
  assert {:sourceloc} {:sourceloc_num 113} true;
  $$LocalBlock[BV32_ADD(BV32_ADD(v2, BV32_MUL(4bv32, BV16_SEXT32($ib.0))), 3bv32)] := v55;
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 114} true;
  $ib.0 := BV32_ADD(BV16_SEXT32($ib.0), group_size_x)[16:0];
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 115} true;
  v56 := BV32_ULT(local_id_y, 2bv32);
  goto $truebb0, $falsebb0;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 116} true;
  v57 := BV32_MUL(BV32_ADD(group_size_y, local_id_y), BV16_SEXT32($SharedPitch));
  $ib.1 := local_id_x[16:0];
  goto $for.cond.107;
$for.cond.107:
  assert {:block_sourceloc} {:sourceloc_num 117} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 118} (if (BV32_ULT(local_id_y, 2bv32) ==> BV32_UREM(BV16_SEXT32($ib.1), group_size_x) == local_id_x) then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 119} (if (BV32_ULT(local_id_y, 2bv32) ==> (_WRITE_HAS_OCCURRED_$$LocalBlock ==> BV32_OR(BV32_AND(BV1_ZEXT32((if BV32_ULT(BV32_UDIV(BV32_SUB(_WATCHED_OFFSET, v57), 4bv32), BV32_ADD(BV16_SEXT32($BlockWidth), 2bv32)) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_UREM(BV32_UDIV(BV32_SUB(_WATCHED_OFFSET, v57), 4bv32), group_size_x) == local_id_x then 1bv1 else 0bv1))), BV32_AND(BV1_ZEXT32((if BV32_ULT(BV32_UDIV(BV32_SUB(_WATCHED_OFFSET, BV32_MUL(local_id_y, BV16_SEXT32($SharedPitch))), 4bv32), BV32_ADD(BV16_SEXT32($BlockWidth), 2bv32)) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_UREM(BV32_UDIV(BV32_SUB(_WATCHED_OFFSET, BV32_MUL(local_id_y, BV16_SEXT32($SharedPitch))), 4bv32), group_size_x) == local_id_x then 1bv1 else 0bv1)))) != 0bv32)) then 1bv1 else 0bv1) != 0bv1;
  v58 := BV32_SLT(BV16_SEXT32($ib.1), BV32_ADD(BV16_SEXT32($BlockWidth), 2bv32));
  goto $truebb1, $falsebb1;
$for.body.152:
  assert {:block_sourceloc} {:sourceloc_num 120} true;
  assert {:sourceloc} {:sourceloc_num 121} true;
  v59 := $$tex[0bv32];
  assert {:sourceloc} {:sourceloc_num 122} true;
  $$agg.tmp153[0bv32] := v59;
  assert {:sourceloc} {:sourceloc_num 123} true;
  v60 := $$tex[1bv32];
  assert {:sourceloc} {:sourceloc_num 124} true;
  $$agg.tmp153[1bv32] := v60;
  assert {:sourceloc} {:sourceloc_num 125} true;
  v61 := $$tex[2bv32];
  assert {:sourceloc} {:sourceloc_num 126} true;
  $$agg.tmp153[2bv32] := v61;
  assert {:sourceloc} {:sourceloc_num 127} true;
  v62 := $$tex[3bv32];
  assert {:sourceloc} {:sourceloc_num 128} true;
  $$agg.tmp153[3bv32] := v62;
  assert {:sourceloc} {:sourceloc_num 129} true;
  v63 := $$tex[4bv32];
  assert {:sourceloc} {:sourceloc_num 130} true;
  $$agg.tmp153[4bv32] := v63;
  assert {:sourceloc} {:sourceloc_num 131} true;
  v64 := $$tex[5bv32];
  assert {:sourceloc} {:sourceloc_num 132} true;
  $$agg.tmp153[5bv32] := v64;
  assert {:sourceloc} {:sourceloc_num 133} true;
  v65 := $$tex[6bv32];
  assert {:sourceloc} {:sourceloc_num 134} true;
  $$agg.tmp153[6bv32] := v65;
  assert {:sourceloc} {:sourceloc_num 135} true;
  v66 := $$tex[7bv32];
  assert {:sourceloc} {:sourceloc_num 136} true;
  $$agg.tmp153[7bv32] := v66;
  assert {:sourceloc} {:sourceloc_num 137} true;
  v67 := $$tex[8bv32];
  assert {:sourceloc} {:sourceloc_num 138} true;
  $$agg.tmp153[8bv32] := v67;
  assert {:sourceloc} {:sourceloc_num 139} true;
  v68 := $$tex[9bv32];
  assert {:sourceloc} {:sourceloc_num 140} true;
  $$agg.tmp153[9bv32] := v68;
  assert {:sourceloc} {:sourceloc_num 141} true;
  v69 := $$tex[10bv32];
  assert {:sourceloc} {:sourceloc_num 142} true;
  $$agg.tmp153[10bv32] := v69;
  assert {:sourceloc} {:sourceloc_num 143} true;
  v70 := $$tex[11bv32];
  assert {:sourceloc} {:sourceloc_num 144} true;
  $$agg.tmp153[11bv32] := v70;
  call {:sourceloc_num 145}   v71 := $_Z5tex2DIhET_7textureIS0_Li2EL19cudaTextureReadMode0EEff(MKPTR($arrayId$$agg.tmp153, 0bv32), SI32_TO_FP32(BV32_SUB(BV32_ADD(BV16_SEXT32(v0), BV32_MUL(4bv32, BV16_SEXT32($ib.1))), 1bv32)), UI32_TO_FP32(BV32_SUB(BV32_ADD(BV16_SEXT32(v1), group_size_y), 1bv32)));
  assert {:sourceloc} {:sourceloc_num 146} true;
  $$LocalBlock[BV32_ADD(v57, BV32_MUL(4bv32, BV16_SEXT32($ib.1)))] := v71;
  assert {:sourceloc} {:sourceloc_num 147} true;
  v72 := $$tex[0bv32];
  assert {:sourceloc} {:sourceloc_num 148} true;
  $$agg.tmp171[0bv32] := v72;
  assert {:sourceloc} {:sourceloc_num 149} true;
  v73 := $$tex[1bv32];
  assert {:sourceloc} {:sourceloc_num 150} true;
  $$agg.tmp171[1bv32] := v73;
  assert {:sourceloc} {:sourceloc_num 151} true;
  v74 := $$tex[2bv32];
  assert {:sourceloc} {:sourceloc_num 152} true;
  $$agg.tmp171[2bv32] := v74;
  assert {:sourceloc} {:sourceloc_num 153} true;
  v75 := $$tex[3bv32];
  assert {:sourceloc} {:sourceloc_num 154} true;
  $$agg.tmp171[3bv32] := v75;
  assert {:sourceloc} {:sourceloc_num 155} true;
  v76 := $$tex[4bv32];
  assert {:sourceloc} {:sourceloc_num 156} true;
  $$agg.tmp171[4bv32] := v76;
  assert {:sourceloc} {:sourceloc_num 157} true;
  v77 := $$tex[5bv32];
  assert {:sourceloc} {:sourceloc_num 158} true;
  $$agg.tmp171[5bv32] := v77;
  assert {:sourceloc} {:sourceloc_num 159} true;
  v78 := $$tex[6bv32];
  assert {:sourceloc} {:sourceloc_num 160} true;
  $$agg.tmp171[6bv32] := v78;
  assert {:sourceloc} {:sourceloc_num 161} true;
  v79 := $$tex[7bv32];
  assert {:sourceloc} {:sourceloc_num 162} true;
  $$agg.tmp171[7bv32] := v79;
  assert {:sourceloc} {:sourceloc_num 163} true;
  v80 := $$tex[8bv32];
  assert {:sourceloc} {:sourceloc_num 164} true;
  $$agg.tmp171[8bv32] := v80;
  assert {:sourceloc} {:sourceloc_num 165} true;
  v81 := $$tex[9bv32];
  assert {:sourceloc} {:sourceloc_num 166} true;
  $$agg.tmp171[9bv32] := v81;
  assert {:sourceloc} {:sourceloc_num 167} true;
  v82 := $$tex[10bv32];
  assert {:sourceloc} {:sourceloc_num 168} true;
  $$agg.tmp171[10bv32] := v82;
  assert {:sourceloc} {:sourceloc_num 169} true;
  v83 := $$tex[11bv32];
  assert {:sourceloc} {:sourceloc_num 170} true;
  $$agg.tmp171[11bv32] := v83;
  call {:sourceloc_num 171}   v84 := $_Z5tex2DIhET_7textureIS0_Li2EL19cudaTextureReadMode0EEff(MKPTR($arrayId$$agg.tmp171, 0bv32), SI32_TO_FP32(BV32_ADD(BV32_SUB(BV32_ADD(BV16_SEXT32(v0), BV32_MUL(4bv32, BV16_SEXT32($ib.1))), 1bv32), 1bv32)), UI32_TO_FP32(BV32_SUB(BV32_ADD(BV16_SEXT32(v1), group_size_y), 1bv32)));
  assert {:sourceloc} {:sourceloc_num 172} true;
  $$LocalBlock[BV32_ADD(BV32_ADD(v57, BV32_MUL(4bv32, BV16_SEXT32($ib.1))), 1bv32)] := v84;
  assert {:sourceloc} {:sourceloc_num 173} true;
  v85 := $$tex[0bv32];
  assert {:sourceloc} {:sourceloc_num 174} true;
  $$agg.tmp189[0bv32] := v85;
  assert {:sourceloc} {:sourceloc_num 175} true;
  v86 := $$tex[1bv32];
  assert {:sourceloc} {:sourceloc_num 176} true;
  $$agg.tmp189[1bv32] := v86;
  assert {:sourceloc} {:sourceloc_num 177} true;
  v87 := $$tex[2bv32];
  assert {:sourceloc} {:sourceloc_num 178} true;
  $$agg.tmp189[2bv32] := v87;
  assert {:sourceloc} {:sourceloc_num 179} true;
  v88 := $$tex[3bv32];
  assert {:sourceloc} {:sourceloc_num 180} true;
  $$agg.tmp189[3bv32] := v88;
  assert {:sourceloc} {:sourceloc_num 181} true;
  v89 := $$tex[4bv32];
  assert {:sourceloc} {:sourceloc_num 182} true;
  $$agg.tmp189[4bv32] := v89;
  assert {:sourceloc} {:sourceloc_num 183} true;
  v90 := $$tex[5bv32];
  assert {:sourceloc} {:sourceloc_num 184} true;
  $$agg.tmp189[5bv32] := v90;
  assert {:sourceloc} {:sourceloc_num 185} true;
  v91 := $$tex[6bv32];
  assert {:sourceloc} {:sourceloc_num 186} true;
  $$agg.tmp189[6bv32] := v91;
  assert {:sourceloc} {:sourceloc_num 187} true;
  v92 := $$tex[7bv32];
  assert {:sourceloc} {:sourceloc_num 188} true;
  $$agg.tmp189[7bv32] := v92;
  assert {:sourceloc} {:sourceloc_num 189} true;
  v93 := $$tex[8bv32];
  assert {:sourceloc} {:sourceloc_num 190} true;
  $$agg.tmp189[8bv32] := v93;
  assert {:sourceloc} {:sourceloc_num 191} true;
  v94 := $$tex[9bv32];
  assert {:sourceloc} {:sourceloc_num 192} true;
  $$agg.tmp189[9bv32] := v94;
  assert {:sourceloc} {:sourceloc_num 193} true;
  v95 := $$tex[10bv32];
  assert {:sourceloc} {:sourceloc_num 194} true;
  $$agg.tmp189[10bv32] := v95;
  assert {:sourceloc} {:sourceloc_num 195} true;
  v96 := $$tex[11bv32];
  assert {:sourceloc} {:sourceloc_num 196} true;
  $$agg.tmp189[11bv32] := v96;
  call {:sourceloc_num 197}   v97 := $_Z5tex2DIhET_7textureIS0_Li2EL19cudaTextureReadMode0EEff(MKPTR($arrayId$$agg.tmp189, 0bv32), SI32_TO_FP32(BV32_ADD(BV32_SUB(BV32_ADD(BV16_SEXT32(v0), BV32_MUL(4bv32, BV16_SEXT32($ib.1))), 1bv32), 2bv32)), UI32_TO_FP32(BV32_SUB(BV32_ADD(BV16_SEXT32(v1), group_size_y), 1bv32)));
  assert {:sourceloc} {:sourceloc_num 198} true;
  $$LocalBlock[BV32_ADD(BV32_ADD(v57, BV32_MUL(4bv32, BV16_SEXT32($ib.1))), 2bv32)] := v97;
  assert {:sourceloc} {:sourceloc_num 199} true;
  v98 := $$tex[0bv32];
  assert {:sourceloc} {:sourceloc_num 200} true;
  $$agg.tmp207[0bv32] := v98;
  assert {:sourceloc} {:sourceloc_num 201} true;
  v99 := $$tex[1bv32];
  assert {:sourceloc} {:sourceloc_num 202} true;
  $$agg.tmp207[1bv32] := v99;
  assert {:sourceloc} {:sourceloc_num 203} true;
  v100 := $$tex[2bv32];
  assert {:sourceloc} {:sourceloc_num 204} true;
  $$agg.tmp207[2bv32] := v100;
  assert {:sourceloc} {:sourceloc_num 205} true;
  v101 := $$tex[3bv32];
  assert {:sourceloc} {:sourceloc_num 206} true;
  $$agg.tmp207[3bv32] := v101;
  assert {:sourceloc} {:sourceloc_num 207} true;
  v102 := $$tex[4bv32];
  assert {:sourceloc} {:sourceloc_num 208} true;
  $$agg.tmp207[4bv32] := v102;
  assert {:sourceloc} {:sourceloc_num 209} true;
  v103 := $$tex[5bv32];
  assert {:sourceloc} {:sourceloc_num 210} true;
  $$agg.tmp207[5bv32] := v103;
  assert {:sourceloc} {:sourceloc_num 211} true;
  v104 := $$tex[6bv32];
  assert {:sourceloc} {:sourceloc_num 212} true;
  $$agg.tmp207[6bv32] := v104;
  assert {:sourceloc} {:sourceloc_num 213} true;
  v105 := $$tex[7bv32];
  assert {:sourceloc} {:sourceloc_num 214} true;
  $$agg.tmp207[7bv32] := v105;
  assert {:sourceloc} {:sourceloc_num 215} true;
  v106 := $$tex[8bv32];
  assert {:sourceloc} {:sourceloc_num 216} true;
  $$agg.tmp207[8bv32] := v106;
  assert {:sourceloc} {:sourceloc_num 217} true;
  v107 := $$tex[9bv32];
  assert {:sourceloc} {:sourceloc_num 218} true;
  $$agg.tmp207[9bv32] := v107;
  assert {:sourceloc} {:sourceloc_num 219} true;
  v108 := $$tex[10bv32];
  assert {:sourceloc} {:sourceloc_num 220} true;
  $$agg.tmp207[10bv32] := v108;
  assert {:sourceloc} {:sourceloc_num 221} true;
  v109 := $$tex[11bv32];
  assert {:sourceloc} {:sourceloc_num 222} true;
  $$agg.tmp207[11bv32] := v109;
  call {:sourceloc_num 223}   v110 := $_Z5tex2DIhET_7textureIS0_Li2EL19cudaTextureReadMode0EEff(MKPTR($arrayId$$agg.tmp207, 0bv32), SI32_TO_FP32(BV32_ADD(BV32_SUB(BV32_ADD(BV16_SEXT32(v0), BV32_MUL(4bv32, BV16_SEXT32($ib.1))), 1bv32), 3bv32)), UI32_TO_FP32(BV32_SUB(BV32_ADD(BV16_SEXT32(v1), group_size_y), 1bv32)));
  assert {:sourceloc} {:sourceloc_num 224} true;
  $$LocalBlock[BV32_ADD(BV32_ADD(v57, BV32_MUL(4bv32, BV16_SEXT32($ib.1))), 3bv32)] := v110;
  goto $for.inc.225;
$for.inc.225:
  assert {:block_sourceloc} {:sourceloc_num 225} true;
  $ib.1 := BV32_ADD(BV16_SEXT32($ib.1), group_size_x)[16:0];
  goto $for.cond.107;
$for.end.229:
  assert {:block_sourceloc} {:sourceloc_num 226} true;
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 227} true;
  call {:sourceloc_num 228} $bugle_barrier(1bv1, 1bv1);
  v111 := BV32_ASHR(BV16_SEXT32(v0), 2bv32)[16:0];
  v112 := BV32_MUL(local_id_y, BV16_SEXT32($SharedPitch));
  $ib.2 := local_id_x[16:0];
  goto $for.cond.238;
$for.cond.238:
  assert {:block_sourceloc} {:sourceloc_num 229} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 230} (if BV32_UREM(BV16_SEXT32($ib.2), group_size_x) == local_id_x then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 231} (if (_WRITE_HAS_OCCURRED_$$pSobelOriginal ==> BV32_UREM(BV32_SUB(BV32_UDIV(BV32_SUB(_WATCHED_OFFSET, BV32_MUL(BV16_SEXT32(v1), BV16_ZEXT32($SobelPitch))), 4bv32), BV16_SEXT32(v111)), group_size_x) == local_id_x) then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 232} (if (_WRITE_HAS_OCCURRED_$$pSobelOriginal ==> BV32_ULT(BV32_SUB(BV32_UDIV(BV32_SUB(_WATCHED_OFFSET, BV32_MUL(BV16_SEXT32(v1), BV16_ZEXT32($SobelPitch))), 4bv32), BV16_SEXT32(v111)), BV16_SEXT32($BlockWidth))) then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 233} (if (_WRITE_HAS_OCCURRED_$$pSobelOriginal ==> BV32_ULT(_WATCHED_OFFSET, BV32_MUL(BV32_ADD(BV16_SEXT32(v1), 1bv32), BV16_ZEXT32($SobelPitch)))) then 1bv1 else 0bv1) != 0bv1;
  v113 := BV32_SLT(BV16_SEXT32($ib.2), BV16_SEXT32($BlockWidth));
  goto $truebb2, $falsebb2;
$for.body.277:
  assert {:block_sourceloc} {:sourceloc_num 234} true;
  assert {:sourceloc} {:sourceloc_num 235} true;
  v114 := $$LocalBlock[BV32_ADD(BV32_ADD(v112, BV32_MUL(4bv32, BV16_SEXT32($ib.2))), BV32_MUL(0bv32, BV16_SEXT32($SharedPitch)))];
  assert {:sourceloc} {:sourceloc_num 236} true;
  v115 := $$LocalBlock[BV32_ADD(BV32_ADD(BV32_ADD(v112, BV32_MUL(4bv32, BV16_SEXT32($ib.2))), BV32_MUL(0bv32, BV16_SEXT32($SharedPitch))), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 237} true;
  v116 := $$LocalBlock[BV32_ADD(BV32_ADD(BV32_ADD(v112, BV32_MUL(4bv32, BV16_SEXT32($ib.2))), BV32_MUL(0bv32, BV16_SEXT32($SharedPitch))), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 238} true;
  v117 := $$LocalBlock[BV32_ADD(BV32_ADD(v112, BV32_MUL(4bv32, BV16_SEXT32($ib.2))), BV16_SEXT32($SharedPitch))];
  assert {:sourceloc} {:sourceloc_num 239} true;
  v118 := $$LocalBlock[BV32_ADD(BV32_ADD(BV32_ADD(v112, BV32_MUL(4bv32, BV16_SEXT32($ib.2))), BV16_SEXT32($SharedPitch)), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 240} true;
  v119 := $$LocalBlock[BV32_ADD(BV32_ADD(BV32_ADD(v112, BV32_MUL(4bv32, BV16_SEXT32($ib.2))), BV16_SEXT32($SharedPitch)), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 241} true;
  v120 := $$LocalBlock[BV32_ADD(BV32_ADD(v112, BV32_MUL(4bv32, BV16_SEXT32($ib.2))), BV32_MUL(2bv32, BV16_SEXT32($SharedPitch)))];
  assert {:sourceloc} {:sourceloc_num 242} true;
  v121 := $$LocalBlock[BV32_ADD(BV32_ADD(BV32_ADD(v112, BV32_MUL(4bv32, BV16_SEXT32($ib.2))), BV32_MUL(2bv32, BV16_SEXT32($SharedPitch))), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 243} true;
  v122 := $$LocalBlock[BV32_ADD(BV32_ADD(BV32_ADD(v112, BV32_MUL(4bv32, BV16_SEXT32($ib.2))), BV32_MUL(2bv32, BV16_SEXT32($SharedPitch))), 2bv32)];
  call {:sourceloc_num 244}   v123 := $abs(SI32_TO_FP32(BV16_SEXT32(BV32_SUB(BV32_SUB(BV32_SUB(BV32_ADD(BV32_ADD(BV8_ZEXT32(v116), BV32_MUL(2bv32, BV8_ZEXT32(v119))), BV8_ZEXT32(v122)), BV8_ZEXT32(v114)), BV32_MUL(2bv32, BV8_ZEXT32(v117))), BV8_ZEXT32(v120))[16:0])));
  call {:sourceloc_num 245}   v124 := $abs(SI32_TO_FP32(BV16_SEXT32(BV32_SUB(BV32_SUB(BV32_SUB(BV32_ADD(BV32_ADD(BV8_ZEXT32(v114), BV32_MUL(2bv32, BV8_ZEXT32(v115))), BV8_ZEXT32(v116)), BV8_ZEXT32(v120)), BV32_MUL(2bv32, BV8_ZEXT32(v121))), BV8_ZEXT32(v122))[16:0])));
  v125 := FP32_TO_SI16(FMUL32($fScale, FADD32(v123, v124)));
  v126 := BV32_SLT(BV16_SEXT32(v125), 0bv32);
  goto $truebb3, $falsebb3;
$if.then.i:
  assert {:block_sourceloc} {:sourceloc_num 246} true;
  $retval.i.0 := 0bv8;
  goto $_ZL12ComputeSobelhhhhhhhhhf.exit;
$if.else.i:
  assert {:block_sourceloc} {:sourceloc_num 247} true;
  v127 := BV32_SGT(BV16_SEXT32(v125), 255bv32);
  goto $truebb4, $falsebb4;
$if.then.36.i:
  assert {:block_sourceloc} {:sourceloc_num 248} true;
  $retval.i.0 := 255bv8;
  goto $_ZL12ComputeSobelhhhhhhhhhf.exit;
$if.end.i:
  assert {:block_sourceloc} {:sourceloc_num 249} true;
  $retval.i.0 := v125[8:0];
  goto $_ZL12ComputeSobelhhhhhhhhhf.exit;
$_ZL12ComputeSobelhhhhhhhhhf.exit:
  assert {:block_sourceloc} {:sourceloc_num 250} true;
  assert {:sourceloc} {:sourceloc_num 251} true;
  $$out[0bv32] := $retval.i.0;
  assert {:sourceloc} {:sourceloc_num 252} true;
  v128 := $$LocalBlock[BV32_ADD(BV32_ADD(BV32_ADD(v112, BV32_MUL(4bv32, BV16_SEXT32($ib.2))), BV32_MUL(0bv32, BV16_SEXT32($SharedPitch))), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 253} true;
  v129 := $$LocalBlock[BV32_ADD(BV32_ADD(BV32_ADD(v112, BV32_MUL(4bv32, BV16_SEXT32($ib.2))), BV16_SEXT32($SharedPitch)), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 254} true;
  v130 := $$LocalBlock[BV32_ADD(BV32_ADD(BV32_ADD(v112, BV32_MUL(4bv32, BV16_SEXT32($ib.2))), BV32_MUL(2bv32, BV16_SEXT32($SharedPitch))), 3bv32)];
  call {:sourceloc_num 255}   v131 := $abs(SI32_TO_FP32(BV16_SEXT32(BV32_SUB(BV32_SUB(BV32_SUB(BV32_ADD(BV32_ADD(BV8_ZEXT32(v128), BV32_MUL(2bv32, BV8_ZEXT32(v129))), BV8_ZEXT32(v130)), BV8_ZEXT32(v115)), BV32_MUL(2bv32, BV8_ZEXT32(v118))), BV8_ZEXT32(v121))[16:0])));
  call {:sourceloc_num 256}   v132 := $abs(SI32_TO_FP32(BV16_SEXT32(BV32_SUB(BV32_SUB(BV32_SUB(BV32_ADD(BV32_ADD(BV8_ZEXT32(v115), BV32_MUL(2bv32, BV8_ZEXT32(v116))), BV8_ZEXT32(v128)), BV8_ZEXT32(v121)), BV32_MUL(2bv32, BV8_ZEXT32(v122))), BV8_ZEXT32(v130))[16:0])));
  v133 := FP32_TO_SI16(FMUL32($fScale, FADD32(v131, v132)));
  v134 := BV32_SLT(BV16_SEXT32(v133), 0bv32);
  goto $truebb5, $falsebb5;
$if.then.i.500:
  assert {:block_sourceloc} {:sourceloc_num 257} true;
  $retval.i.447.0 := 0bv8;
  goto $_ZL12ComputeSobelhhhhhhhhhf.exit507;
$if.else.i.503:
  assert {:block_sourceloc} {:sourceloc_num 258} true;
  v135 := BV32_SGT(BV16_SEXT32(v133), 255bv32);
  goto $truebb6, $falsebb6;
$if.then.36.i.504:
  assert {:block_sourceloc} {:sourceloc_num 259} true;
  $retval.i.447.0 := 255bv8;
  goto $_ZL12ComputeSobelhhhhhhhhhf.exit507;
$if.end.i.505:
  assert {:block_sourceloc} {:sourceloc_num 260} true;
  $retval.i.447.0 := v133[8:0];
  goto $_ZL12ComputeSobelhhhhhhhhhf.exit507;
$_ZL12ComputeSobelhhhhhhhhhf.exit507:
  assert {:block_sourceloc} {:sourceloc_num 261} true;
  assert {:sourceloc} {:sourceloc_num 262} true;
  $$out[1bv32] := $retval.i.447.0;
  assert {:sourceloc} {:sourceloc_num 263} true;
  v136 := $$LocalBlock[BV32_ADD(BV32_ADD(BV32_ADD(v112, BV32_MUL(4bv32, BV16_SEXT32($ib.2))), BV32_MUL(0bv32, BV16_SEXT32($SharedPitch))), 4bv32)];
  assert {:sourceloc} {:sourceloc_num 264} true;
  v137 := $$LocalBlock[BV32_ADD(BV32_ADD(BV32_ADD(v112, BV32_MUL(4bv32, BV16_SEXT32($ib.2))), BV16_SEXT32($SharedPitch)), 4bv32)];
  assert {:sourceloc} {:sourceloc_num 265} true;
  v138 := $$LocalBlock[BV32_ADD(BV32_ADD(BV32_ADD(v112, BV32_MUL(4bv32, BV16_SEXT32($ib.2))), BV32_MUL(2bv32, BV16_SEXT32($SharedPitch))), 4bv32)];
  call {:sourceloc_num 266}   v139 := $abs(SI32_TO_FP32(BV16_SEXT32(BV32_SUB(BV32_SUB(BV32_SUB(BV32_ADD(BV32_ADD(BV8_ZEXT32(v136), BV32_MUL(2bv32, BV8_ZEXT32(v137))), BV8_ZEXT32(v138)), BV8_ZEXT32(v116)), BV32_MUL(2bv32, BV8_ZEXT32(v119))), BV8_ZEXT32(v122))[16:0])));
  call {:sourceloc_num 267}   v140 := $abs(SI32_TO_FP32(BV16_SEXT32(BV32_SUB(BV32_SUB(BV32_SUB(BV32_ADD(BV32_ADD(BV8_ZEXT32(v116), BV32_MUL(2bv32, BV8_ZEXT32(v128))), BV8_ZEXT32(v136)), BV8_ZEXT32(v122)), BV32_MUL(2bv32, BV8_ZEXT32(v130))), BV8_ZEXT32(v138))[16:0])));
  v141 := FP32_TO_SI16(FMUL32($fScale, FADD32(v139, v140)));
  v142 := BV32_SLT(BV16_SEXT32(v141), 0bv32);
  goto $truebb7, $falsebb7;
$if.then.i.561:
  assert {:block_sourceloc} {:sourceloc_num 268} true;
  $retval.i.508.0 := 0bv8;
  goto $_ZL12ComputeSobelhhhhhhhhhf.exit568;
$if.else.i.564:
  assert {:block_sourceloc} {:sourceloc_num 269} true;
  v143 := BV32_SGT(BV16_SEXT32(v141), 255bv32);
  goto $truebb8, $falsebb8;
$if.then.36.i.565:
  assert {:block_sourceloc} {:sourceloc_num 270} true;
  $retval.i.508.0 := 255bv8;
  goto $_ZL12ComputeSobelhhhhhhhhhf.exit568;
$if.end.i.566:
  assert {:block_sourceloc} {:sourceloc_num 271} true;
  $retval.i.508.0 := v141[8:0];
  goto $_ZL12ComputeSobelhhhhhhhhhf.exit568;
$_ZL12ComputeSobelhhhhhhhhhf.exit568:
  assert {:block_sourceloc} {:sourceloc_num 272} true;
  assert {:sourceloc} {:sourceloc_num 273} true;
  $$out[2bv32] := $retval.i.508.0;
  assert {:sourceloc} {:sourceloc_num 274} true;
  v144 := $$LocalBlock[BV32_ADD(BV32_ADD(BV32_ADD(v112, BV32_MUL(4bv32, BV16_SEXT32($ib.2))), BV32_MUL(0bv32, BV16_SEXT32($SharedPitch))), 5bv32)];
  assert {:sourceloc} {:sourceloc_num 275} true;
  v145 := $$LocalBlock[BV32_ADD(BV32_ADD(BV32_ADD(v112, BV32_MUL(4bv32, BV16_SEXT32($ib.2))), BV16_SEXT32($SharedPitch)), 5bv32)];
  assert {:sourceloc} {:sourceloc_num 276} true;
  v146 := $$LocalBlock[BV32_ADD(BV32_ADD(BV32_ADD(v112, BV32_MUL(4bv32, BV16_SEXT32($ib.2))), BV32_MUL(2bv32, BV16_SEXT32($SharedPitch))), 5bv32)];
  call {:sourceloc_num 277}   v147 := $abs(SI32_TO_FP32(BV16_SEXT32(BV32_SUB(BV32_SUB(BV32_SUB(BV32_ADD(BV32_ADD(BV8_ZEXT32(v144), BV32_MUL(2bv32, BV8_ZEXT32(v145))), BV8_ZEXT32(v146)), BV8_ZEXT32(v128)), BV32_MUL(2bv32, BV8_ZEXT32(v129))), BV8_ZEXT32(v130))[16:0])));
  call {:sourceloc_num 278}   v148 := $abs(SI32_TO_FP32(BV16_SEXT32(BV32_SUB(BV32_SUB(BV32_SUB(BV32_ADD(BV32_ADD(BV8_ZEXT32(v128), BV32_MUL(2bv32, BV8_ZEXT32(v136))), BV8_ZEXT32(v144)), BV8_ZEXT32(v130)), BV32_MUL(2bv32, BV8_ZEXT32(v138))), BV8_ZEXT32(v146))[16:0])));
  v149 := FP32_TO_SI16(FMUL32($fScale, FADD32(v147, v148)));
  v150 := BV32_SLT(BV16_SEXT32(v149), 0bv32);
  goto $truebb9, $falsebb9;
$if.then.i.622:
  assert {:block_sourceloc} {:sourceloc_num 279} true;
  $retval.i.569.0 := 0bv8;
  goto $_ZL12ComputeSobelhhhhhhhhhf.exit629;
$if.else.i.625:
  assert {:block_sourceloc} {:sourceloc_num 280} true;
  v151 := BV32_SGT(BV16_SEXT32(v149), 255bv32);
  goto $truebb10, $falsebb10;
$if.then.36.i.626:
  assert {:block_sourceloc} {:sourceloc_num 281} true;
  $retval.i.569.0 := 255bv8;
  goto $_ZL12ComputeSobelhhhhhhhhhf.exit629;
$if.end.i.627:
  assert {:block_sourceloc} {:sourceloc_num 282} true;
  $retval.i.569.0 := v149[8:0];
  goto $_ZL12ComputeSobelhhhhhhhhhf.exit629;
$_ZL12ComputeSobelhhhhhhhhhf.exit629:
  assert {:block_sourceloc} {:sourceloc_num 283} true;
  assert {:sourceloc} {:sourceloc_num 284} true;
  $$out[3bv32] := $retval.i.569.0;
  v152 := BV32_SLT(BV32_ADD(BV16_SEXT32(v111), BV16_SEXT32($ib.2)), BV32_SDIV(BV16_SEXT32($w), 4bv32));
  goto $truebb11, $falsebb11;
$land.lhs.true:
  assert {:block_sourceloc} {:sourceloc_num 285} true;
  v153 := BV32_SLT(BV16_SEXT32(v1), BV16_SEXT32($h));
  goto $truebb12, $falsebb12;
$if.then.436:
  assert {:block_sourceloc} {:sourceloc_num 286} true;
  assert {:sourceloc} {:sourceloc_num 287} true;
  v154 := $$out[0bv32];
  assert {:sourceloc} {:sourceloc_num 288} true;
  $$pSobelOriginal[BV32_ADD(BV32_MUL(BV16_SEXT32(v1), BV16_ZEXT32($SobelPitch)), BV32_MUL(BV32_ADD(BV16_SEXT32(v111), BV16_SEXT32($ib.2)), 4bv32))] := v154;
  assert {:sourceloc} {:sourceloc_num 289} true;
  v155 := $$out[1bv32];
  assert {:sourceloc} {:sourceloc_num 290} true;
  $$pSobelOriginal[BV32_ADD(BV32_ADD(BV32_MUL(BV16_SEXT32(v1), BV16_ZEXT32($SobelPitch)), BV32_MUL(BV32_ADD(BV16_SEXT32(v111), BV16_SEXT32($ib.2)), 4bv32)), 1bv32)] := v155;
  assert {:sourceloc} {:sourceloc_num 291} true;
  v156 := $$out[2bv32];
  assert {:sourceloc} {:sourceloc_num 292} true;
  $$pSobelOriginal[BV32_ADD(BV32_ADD(BV32_MUL(BV16_SEXT32(v1), BV16_ZEXT32($SobelPitch)), BV32_MUL(BV32_ADD(BV16_SEXT32(v111), BV16_SEXT32($ib.2)), 4bv32)), 2bv32)] := v156;
  assert {:sourceloc} {:sourceloc_num 293} true;
  v157 := $$out[3bv32];
  assert {:sourceloc} {:sourceloc_num 294} true;
  $$pSobelOriginal[BV32_ADD(BV32_ADD(BV32_MUL(BV16_SEXT32(v1), BV16_ZEXT32($SobelPitch)), BV32_MUL(BV32_ADD(BV16_SEXT32(v111), BV16_SEXT32($ib.2)), 4bv32)), 3bv32)] := v157;
  goto $if.end.441;
$if.end.441:
  assert {:block_sourceloc} {:sourceloc_num 295} true;
  goto $for.inc.442;
$for.inc.442:
  assert {:block_sourceloc} {:sourceloc_num 296} true;
  $ib.2 := BV32_ADD(BV16_SEXT32($ib.2), group_size_x)[16:0];
  goto $for.cond.238;
$for.end.446:
  assert {:block_sourceloc} {:sourceloc_num 297} true;
  call {:sourceloc_num 298} $bugle_barrier(1bv1, 1bv1);
  return;
$truebb:
  assume {:partition} v3;
  assert {:block_sourceloc} {:sourceloc_num 299} true;
  goto $for.body;
$falsebb:
  assume {:partition} !v3;
  assert {:block_sourceloc} {:sourceloc_num 300} true;
  goto $for.end;
$truebb0:
  assume {:partition} v56;
  assert {:block_sourceloc} {:sourceloc_num 301} true;
  goto $if.then;
$falsebb0:
  assume {:partition} !v56;
  assert {:block_sourceloc} {:sourceloc_num 302} true;
  goto $if.end;
$truebb1:
  assume {:partition} v58;
  assert {:block_sourceloc} {:sourceloc_num 303} true;
  goto $for.body.152;
$falsebb1:
  assume {:partition} !v58;
  assert {:block_sourceloc} {:sourceloc_num 304} true;
  goto $for.end.229;
$truebb2:
  assume {:partition} v113;
  assert {:block_sourceloc} {:sourceloc_num 305} true;
  goto $for.body.277;
$falsebb2:
  assume {:partition} !v113;
  assert {:block_sourceloc} {:sourceloc_num 306} true;
  goto $for.end.446;
$truebb3:
  assume {:partition} v126;
  assert {:block_sourceloc} {:sourceloc_num 307} true;
  goto $if.then.i;
$falsebb3:
  assume {:partition} !v126;
  assert {:block_sourceloc} {:sourceloc_num 308} true;
  goto $if.else.i;
$truebb4:
  assume {:partition} v127;
  assert {:block_sourceloc} {:sourceloc_num 309} true;
  goto $if.then.36.i;
$falsebb4:
  assume {:partition} !v127;
  assert {:block_sourceloc} {:sourceloc_num 310} true;
  goto $if.end.i;
$truebb5:
  assume {:partition} v134;
  assert {:block_sourceloc} {:sourceloc_num 311} true;
  goto $if.then.i.500;
$falsebb5:
  assume {:partition} !v134;
  assert {:block_sourceloc} {:sourceloc_num 312} true;
  goto $if.else.i.503;
$truebb6:
  assume {:partition} v135;
  assert {:block_sourceloc} {:sourceloc_num 313} true;
  goto $if.then.36.i.504;
$falsebb6:
  assume {:partition} !v135;
  assert {:block_sourceloc} {:sourceloc_num 314} true;
  goto $if.end.i.505;
$truebb7:
  assume {:partition} v142;
  assert {:block_sourceloc} {:sourceloc_num 315} true;
  goto $if.then.i.561;
$falsebb7:
  assume {:partition} !v142;
  assert {:block_sourceloc} {:sourceloc_num 316} true;
  goto $if.else.i.564;
$truebb8:
  assume {:partition} v143;
  assert {:block_sourceloc} {:sourceloc_num 317} true;
  goto $if.then.36.i.565;
$falsebb8:
  assume {:partition} !v143;
  assert {:block_sourceloc} {:sourceloc_num 318} true;
  goto $if.end.i.566;
$truebb9:
  assume {:partition} v150;
  assert {:block_sourceloc} {:sourceloc_num 319} true;
  goto $if.then.i.622;
$falsebb9:
  assume {:partition} !v150;
  assert {:block_sourceloc} {:sourceloc_num 320} true;
  goto $if.else.i.625;
$truebb10:
  assume {:partition} v151;
  assert {:block_sourceloc} {:sourceloc_num 321} true;
  goto $if.then.36.i.626;
$falsebb10:
  assume {:partition} !v151;
  assert {:block_sourceloc} {:sourceloc_num 322} true;
  goto $if.end.i.627;
$truebb11:
  assume {:partition} v152;
  assert {:block_sourceloc} {:sourceloc_num 323} true;
  goto $land.lhs.true;
$falsebb11:
  assume {:partition} !v152;
  assert {:block_sourceloc} {:sourceloc_num 324} true;
  goto $if.end.441;
$truebb12:
  assume {:partition} v153;
  assert {:block_sourceloc} {:sourceloc_num 325} true;
  goto $if.then.436;
$falsebb12:
  assume {:partition} !v153;
  assert {:block_sourceloc} {:sourceloc_num 326} true;
  goto $if.end.441;
}
procedure {:source_name "_Z5tex2DIhET_7textureIS0_Li2EL19cudaTextureReadMode0EEff"} $_Z5tex2DIhET_7textureIS0_Li2EL19cudaTextureReadMode0EEff($0:ptr, $1:bv32, $2:bv32) returns ($ret:bv8);
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
procedure {:source_name "abs"} $abs($0:bv32) returns ($ret:bv32);
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 16bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_y == 4bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 2bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 128bv32 then 1bv1 else 0bv1) != 0bv1;
