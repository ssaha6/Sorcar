type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
procedure _ATOMIC_OP8(x : [bv32]bv8, y : bv32) returns (z : bv8, A : [bv32]bv8);
var {:source_name "d_PartialHistograms"} {:global} $$d_PartialHistograms : [bv32]bv32;
axiom {:array_info "$$d_PartialHistograms"} {:global} {:elem_width 32} {:source_name "d_PartialHistograms"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_PartialHistograms : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_PartialHistograms : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_PartialHistograms : bool;

var {:source_name "d_Data"} {:global} $$d_Data : [bv32]bv32;
axiom {:array_info "$$d_Data"} {:global} {:elem_width 32} {:source_name "d_Data"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_Data : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_Data : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_Data : bool;

var {:source_name "data"} $$data : [bv32]bv32;
axiom {:array_info "$$data"} {:elem_width 32} {:source_name "data"} {:source_elem_width 128} {:source_dimensions "1"} true;

var {:source_name "s_Hist"} {:group_shared} $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist : [bv32]bv8;
axiom {:array_info "$$_ZZ17histogram64KernelPjP5uint4jE6s_Hist"} {:group_shared} {:elem_width 8} {:source_name "s_Hist"} {:source_elem_width 8} {:source_dimensions "4096"} true;
var {:race_checking} {:group_shared} {:elem_width 8} {:source_elem_width 8} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ17histogram64KernelPjP5uint4jE6s_Hist : bool;
var {:race_checking} {:group_shared} {:elem_width 8} {:source_elem_width 8} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ17histogram64KernelPjP5uint4jE6s_Hist : bool;
var {:race_checking} {:group_shared} {:elem_width 8} {:source_elem_width 8} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ17histogram64KernelPjP5uint4jE6s_Hist : bool;

const _WATCHED_OFFSET : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvadd"} BV8_ADD(bv8, bv8) : bv8;
function {:bvbuiltin "bvand"} BV32_AND(bv32, bv32) : bv32;
function {:bvbuiltin "bvlshr"} BV32_LSHR(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvor"} BV32_OR(bv32, bv32) : bv32;
function {:bvbuiltin "bvshl"} BV32_SHL(bv32, bv32) : bv32;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvult"} BV32_ULT(bv32, bv32) : bool;
function {:bvbuiltin "bvurem"} BV32_UREM(bv32, bv32) : bv32;
function {:bvbuiltin "zero_extend 24"} BV8_ZEXT32(bv8) : bv32;
procedure {:source_name "histogram64Kernel"} {:kernel} $_Z17histogram64KernelPjP5uint4j($dataCount:bv32)
{
  var $i.0:bv32;
  var $pos.0:bv32;
  var $sum.0:bv32;
  var $pos28.0:bv32;
  var $i31.0:bv32;
  var v3:bv32;
  var v4:bv32;
  var v12:bv32;
  var v6:bv32;
  var v10:bv8;
  var v8:bv8;
  var v7:bv32;
  var v9:bv8;
  var v11:bv8;
  var v5:bv32;
  var v0:bv32;
  var v1:bool;
  var v2:bool;
  var v16:bv8;
  var v20:bv8;
  var v19:bv8;
  var v17:bv32;
  var v25:bv8;
  var v13:bv8;
  var v23:bv8;
  var v24:bv8;
  var v15:bv8;
  var v22:bv32;
  var v18:bv8;
  var v21:bv8;
  var v30:bv8;
  var v26:bv8;
  var v14:bv8;
  var v31:bv8;
  var v32:bv8;
  var v33:bv8;
  var v27:bool;
  var v29:bool;
  var v28:bv32;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  v0 := BV32_OR(BV32_OR(BV32_SHL(BV32_AND(local_id_x, 4294967232bv32), 0bv32), BV32_SHL(BV32_AND(local_id_x, 15bv32), 2bv32)), BV32_LSHR(BV32_AND(local_id_x, 48bv32), 4bv32));
  $i.0 := 0bv32;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  v1 := BV32_ULT($i.0, 16bv32);
  goto $truebb, $falsebb;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  assert {:sourceloc} {:sourceloc_num 3} true;
  $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_MUL(BV32_ADD(local_id_x, BV32_MUL($i.0, 64bv32)), 4bv32)] := 0bv8;
  assert {:sourceloc} {:sourceloc_num 4} true;
  $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(BV32_MUL(BV32_ADD(local_id_x, BV32_MUL($i.0, 64bv32)), 4bv32), 1bv32)] := 0bv8;
  assert {:sourceloc} {:sourceloc_num 5} true;
  $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(BV32_MUL(BV32_ADD(local_id_x, BV32_MUL($i.0, 64bv32)), 4bv32), 2bv32)] := 0bv8;
  assert {:sourceloc} {:sourceloc_num 6} true;
  $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(BV32_MUL(BV32_ADD(local_id_x, BV32_MUL($i.0, 64bv32)), 4bv32), 3bv32)] := 0bv8;
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  $i.0 := BV32_ADD($i.0, 1bv32);
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  call {:sourceloc_num 9} $bugle_barrier(1bv1, 1bv1);
  $pos.0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  goto $for.cond.7;
$for.cond.7:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 11} (if (_WRITE_HAS_OCCURRED_$$_ZZ17histogram64KernelPjP5uint4jE6s_Hist ==> BV32_UREM(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 1bv32), v0), 64bv32) == 0bv32) then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 12} (if (_READ_HAS_OCCURRED_$$_ZZ17histogram64KernelPjP5uint4jE6s_Hist ==> BV32_UREM(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 1bv32), v0), 64bv32) == 0bv32) then 1bv1 else 0bv1) != 0bv1;
  v2 := BV32_ULT($pos.0, $dataCount);
  goto $truebb0, $falsebb0;
$for.body.19:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  assert {:sourceloc} {:sourceloc_num 14} true;
  v3 := $$d_Data[BV32_MUL($pos.0, 4bv32)];
  assert {:sourceloc} {:sourceloc_num 15} true;
  $$data[0bv32] := v3;
  assert {:sourceloc} {:sourceloc_num 16} true;
  v4 := $$d_Data[BV32_ADD(BV32_MUL($pos.0, 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 17} true;
  $$data[1bv32] := v4;
  assert {:sourceloc} {:sourceloc_num 18} true;
  v5 := $$d_Data[BV32_ADD(BV32_MUL($pos.0, 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 19} true;
  $$data[2bv32] := v5;
  assert {:sourceloc} {:sourceloc_num 20} true;
  v6 := $$d_Data[BV32_ADD(BV32_MUL($pos.0, 4bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 21} true;
  $$data[3bv32] := v6;
  assert {:sourceloc} {:sourceloc_num 22} true;
  v7 := $$data[0bv32];
  assert {:sourceloc} {:sourceloc_num 23} true;
  v8 := $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v7, 2bv32), 63bv32), 64bv32))];
  assert {:sourceloc} {:sourceloc_num 24} true;
  $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v7, 2bv32), 63bv32), 64bv32))] := BV8_ADD(v8, 1bv8);
  assert {:sourceloc} {:sourceloc_num 25} true;
  v9 := $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v7, 10bv32), 63bv32), 64bv32))];
  assert {:sourceloc} {:sourceloc_num 26} true;
  $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v7, 10bv32), 63bv32), 64bv32))] := BV8_ADD(v9, 1bv8);
  assert {:sourceloc} {:sourceloc_num 27} true;
  v10 := $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v7, 18bv32), 63bv32), 64bv32))];
  assert {:sourceloc} {:sourceloc_num 28} true;
  $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v7, 18bv32), 63bv32), 64bv32))] := BV8_ADD(v10, 1bv8);
  assert {:sourceloc} {:sourceloc_num 29} true;
  v11 := $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v7, 26bv32), 63bv32), 64bv32))];
  assert {:sourceloc} {:sourceloc_num 30} true;
  $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v7, 26bv32), 63bv32), 64bv32))] := BV8_ADD(v11, 1bv8);
  assert {:sourceloc} {:sourceloc_num 31} true;
  v12 := $$data[1bv32];
  assert {:sourceloc} {:sourceloc_num 32} true;
  v13 := $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v12, 2bv32), 63bv32), 64bv32))];
  assert {:sourceloc} {:sourceloc_num 33} true;
  $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v12, 2bv32), 63bv32), 64bv32))] := BV8_ADD(v13, 1bv8);
  assert {:sourceloc} {:sourceloc_num 34} true;
  v14 := $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v12, 10bv32), 63bv32), 64bv32))];
  assert {:sourceloc} {:sourceloc_num 35} true;
  $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v12, 10bv32), 63bv32), 64bv32))] := BV8_ADD(v14, 1bv8);
  assert {:sourceloc} {:sourceloc_num 36} true;
  v15 := $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v12, 18bv32), 63bv32), 64bv32))];
  assert {:sourceloc} {:sourceloc_num 37} true;
  $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v12, 18bv32), 63bv32), 64bv32))] := BV8_ADD(v15, 1bv8);
  assert {:sourceloc} {:sourceloc_num 38} true;
  v16 := $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v12, 26bv32), 63bv32), 64bv32))];
  assert {:sourceloc} {:sourceloc_num 39} true;
  $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v12, 26bv32), 63bv32), 64bv32))] := BV8_ADD(v16, 1bv8);
  assert {:sourceloc} {:sourceloc_num 40} true;
  v17 := $$data[2bv32];
  assert {:sourceloc} {:sourceloc_num 41} true;
  v18 := $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v17, 2bv32), 63bv32), 64bv32))];
  assert {:sourceloc} {:sourceloc_num 42} true;
  $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v17, 2bv32), 63bv32), 64bv32))] := BV8_ADD(v18, 1bv8);
  assert {:sourceloc} {:sourceloc_num 43} true;
  v19 := $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v17, 10bv32), 63bv32), 64bv32))];
  assert {:sourceloc} {:sourceloc_num 44} true;
  $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v17, 10bv32), 63bv32), 64bv32))] := BV8_ADD(v19, 1bv8);
  assert {:sourceloc} {:sourceloc_num 45} true;
  v20 := $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v17, 18bv32), 63bv32), 64bv32))];
  assert {:sourceloc} {:sourceloc_num 46} true;
  $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v17, 18bv32), 63bv32), 64bv32))] := BV8_ADD(v20, 1bv8);
  assert {:sourceloc} {:sourceloc_num 47} true;
  v21 := $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v17, 26bv32), 63bv32), 64bv32))];
  assert {:sourceloc} {:sourceloc_num 48} true;
  $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v17, 26bv32), 63bv32), 64bv32))] := BV8_ADD(v21, 1bv8);
  assert {:sourceloc} {:sourceloc_num 49} true;
  v22 := $$data[3bv32];
  assert {:sourceloc} {:sourceloc_num 50} true;
  v23 := $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v22, 2bv32), 63bv32), 64bv32))];
  assert {:sourceloc} {:sourceloc_num 51} true;
  $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v22, 2bv32), 63bv32), 64bv32))] := BV8_ADD(v23, 1bv8);
  assert {:sourceloc} {:sourceloc_num 52} true;
  v24 := $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v22, 10bv32), 63bv32), 64bv32))];
  assert {:sourceloc} {:sourceloc_num 53} true;
  $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v22, 10bv32), 63bv32), 64bv32))] := BV8_ADD(v24, 1bv8);
  assert {:sourceloc} {:sourceloc_num 54} true;
  v25 := $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v22, 18bv32), 63bv32), 64bv32))];
  assert {:sourceloc} {:sourceloc_num 55} true;
  $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v22, 18bv32), 63bv32), 64bv32))] := BV8_ADD(v25, 1bv8);
  assert {:sourceloc} {:sourceloc_num 56} true;
  v26 := $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v22, 26bv32), 63bv32), 64bv32))];
  assert {:sourceloc} {:sourceloc_num 57} true;
  $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v0, BV32_MUL(BV32_AND(BV32_LSHR(v22, 26bv32), 63bv32), 64bv32))] := BV8_ADD(v26, 1bv8);
  goto $for.inc.21;
$for.inc.21:
  assert {:block_sourceloc} {:sourceloc_num 58} true;
  $pos.0 := BV32_ADD($pos.0, BV32_MUL(group_size_x, num_groups_x));
  goto $for.cond.7;
$for.end.24:
  assert {:block_sourceloc} {:sourceloc_num 59} true;
  call {:sourceloc_num 60} $bugle_barrier(1bv1, 1bv1);
  v27 := BV32_ULT(local_id_x, 64bv32);
  goto $truebb1, $falsebb1;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 61} true;
  v28 := BV32_MUL(local_id_x, 64bv32);
  $sum.0, $pos28.0, $i31.0 := 0bv32, BV32_MUL(4bv32, BV32_AND(local_id_x, 15bv32)), 0bv32;
  goto $for.cond.32;
$for.cond.32:
  assert {:block_sourceloc} {:sourceloc_num 62} true;
  v29 := BV32_ULT($i31.0, 16bv32);
  goto $truebb2, $falsebb2;
$for.body.34:
  assert {:block_sourceloc} {:sourceloc_num 63} true;
  assert {:sourceloc} {:sourceloc_num 64} true;
  v30 := $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v28, $pos28.0)];
  assert {:sourceloc} {:sourceloc_num 65} true;
  v31 := $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v28, BV32_ADD($pos28.0, 1bv32))];
  assert {:sourceloc} {:sourceloc_num 66} true;
  v32 := $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v28, BV32_ADD($pos28.0, 2bv32))];
  assert {:sourceloc} {:sourceloc_num 67} true;
  v33 := $$_ZZ17histogram64KernelPjP5uint4jE6s_Hist[BV32_ADD(v28, BV32_ADD($pos28.0, 3bv32))];
  goto $for.inc.52;
$for.inc.52:
  assert {:block_sourceloc} {:sourceloc_num 68} true;
  $sum.0, $pos28.0, $i31.0 := BV32_ADD($sum.0, BV32_ADD(BV32_ADD(BV32_ADD(BV8_ZEXT32(v30), BV8_ZEXT32(v31)), BV8_ZEXT32(v32)), BV8_ZEXT32(v33))), BV32_AND(BV32_ADD($pos28.0, 4bv32), 63bv32), BV32_ADD($i31.0, 1bv32);
  goto $for.cond.32;
$for.end.54:
  assert {:block_sourceloc} {:sourceloc_num 69} true;
  assert {:sourceloc} {:sourceloc_num 70} true;
  $$d_PartialHistograms[BV32_ADD(BV32_MUL(group_id_x, 64bv32), local_id_x)] := $sum.0;
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 71} true;
  return;
$truebb:
  assume {:partition} v1;
  assert {:block_sourceloc} {:sourceloc_num 72} true;
  goto $for.body;
$falsebb:
  assume {:partition} !v1;
  assert {:block_sourceloc} {:sourceloc_num 73} true;
  goto $for.end;
$truebb0:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 74} true;
  goto $for.body.19;
$falsebb0:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 75} true;
  goto $for.end.24;
$truebb1:
  assume {:partition} v27;
  assert {:block_sourceloc} {:sourceloc_num 76} true;
  goto $if.then;
$falsebb1:
  assume {:partition} !v27;
  assert {:block_sourceloc} {:sourceloc_num 77} true;
  goto $if.end;
$truebb2:
  assume {:partition} v29;
  assert {:block_sourceloc} {:sourceloc_num 78} true;
  goto $for.body.34;
$falsebb2:
  assume {:partition} !v29;
  assert {:block_sourceloc} {:sourceloc_num 79} true;
  goto $for.end.54;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 64bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 4370bv32 then 1bv1 else 0bv1) != 0bv1;
