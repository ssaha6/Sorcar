type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "d_Dst"} {:global} $$d_Dst : [bv32]bv32;
axiom {:array_info "$$d_Dst"} {:global} {:elem_width 32} {:source_name "d_Dst"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_Dst : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_Dst : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_Dst : bool;

var {:source_name "d_Src"} {:global} $$d_Src : [bv32]bv32;
axiom {:array_info "$$d_Src"} {:global} {:elem_width 32} {:source_name "d_Src"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_Src : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_Src : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_Src : bool;

var {:source_name "s_Data"} {:group_shared} $$_ZZ24convolutionColumnsKernelPfS_iiiE6s_Data : [bv32]bv32;
axiom {:array_info "$$_ZZ24convolutionColumnsKernelPfS_iiiE6s_Data"} {:group_shared} {:elem_width 32} {:source_name "s_Data"} {:source_elem_width 32} {:source_dimensions "16,81"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,81"} _READ_HAS_OCCURRED_$$_ZZ24convolutionColumnsKernelPfS_iiiE6s_Data : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,81"} _WRITE_HAS_OCCURRED_$$_ZZ24convolutionColumnsKernelPfS_iiiE6s_Data : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,81"} _ATOMIC_HAS_OCCURRED_$$_ZZ24convolutionColumnsKernelPfS_iiiE6s_Data : bool;

var {:source_name "c_Kernel"} {:constant} $$c_Kernel : [bv32]bv32;
axiom {:array_info "$$c_Kernel"} {:constant} {:elem_width 32} {:source_name "c_Kernel"} {:source_elem_width 32} {:source_dimensions "17"} true;

const _WATCHED_OFFSET : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_id_y} group_id_y : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:local_id_y} local_id_y : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FADD32(bv32, bv32) : bv32;
function FMUL32(bv32, bv32) : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvsge"} BV32_SGE(bv32, bv32) : bool;
function {:bvbuiltin "bvsgt"} BV32_SGT(bv32, bv32) : bool;
function {:bvbuiltin "bvsle"} BV32_SLE(bv32, bv32) : bool;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvuge"} BV32_UGE(bv32, bv32) : bool;
function {:bvbuiltin "bvult"} BV32_ULT(bv32, bv32) : bool;
function {:bvbuiltin "bvurem"} BV32_UREM(bv32, bv32) : bv32;
procedure {:source_name "convolutionColumnsKernel"} {:kernel} $_Z24convolutionColumnsKernelPfS_iii($imageW:bv32, $imageH:bv32, $pitch:bv32)
requires {:sourceloc_num 0} (if $pitch == 3072bv32 then 1bv1 else 0bv1) != 0bv1;
{
  var $i.0:bv32;
  var $i16.0:bv32;
  var $cond:bv32;
  var $i33.0:bv32;
  var $cond46:bv32;
  var $i54.0:bv32;
  var $sum.0:bv32;
  var $j.0:bv32;
  var v3:bv32;
  var v2:bv32;
  var v4:bool;
  var v1:bv32;
  var v0:bv32;
  var v14:bv32;
  var v8:bv32;
  var v5:bv32;
  var v11:bv32;
  var v6:bool;
  var v7:bool;
  var v9:bool;
  var v10:bool;
  var v12:bool;
  var v13:bool;
  var v15:bv32;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, 16bv32), local_id_x);
  v1 := BV32_ADD(BV32_MUL(BV32_SUB(BV32_MUL(group_id_y, 8bv32), 1bv32), 8bv32), local_id_y);
  v2 := BV32_ADD(BV32_MUL(v1, $pitch), v0);
  v3 := BV32_ADD(BV32_MUL(v1, $pitch), v0);
  $i.0 := 1bv32;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v4 := BV32_SLT($i.0, 9bv32);
  goto $truebb, $falsebb;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  assert {:sourceloc} {:sourceloc_num 4} true;
  v5 := $$d_Src[BV32_ADD(v2, BV32_MUL(BV32_MUL($i.0, 8bv32), $pitch))];
  assert {:sourceloc} {:sourceloc_num 5} true;
  $$_ZZ24convolutionColumnsKernelPfS_iiiE6s_Data[BV32_ADD(BV32_MUL(local_id_x, 81bv32), BV32_ADD(local_id_y, BV32_MUL($i.0, 8bv32)))] := v5;
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  $i.0 := BV32_ADD($i.0, 1bv32);
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  $i16.0 := 0bv32;
  goto $for.cond.17;
$for.cond.17:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  v6 := BV32_SLT($i16.0, 1bv32);
  goto $truebb0, $falsebb0;
$for.body.19:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  v7 := BV32_SGE(v1, BV32_MUL(BV32_SUB(0bv32, $i16.0), 8bv32));
  goto $truebb1, $falsebb1;
$cond.true:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  assert {:sourceloc} {:sourceloc_num 11} true;
  v8 := $$d_Src[BV32_ADD(v2, BV32_MUL(BV32_MUL($i16.0, 8bv32), $pitch))];
  $cond := v8;
  goto $cond.end;
$cond.false:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  $cond := 0bv32;
  goto $cond.end;
$cond.end:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  assert {:sourceloc} {:sourceloc_num 14} true;
  $$_ZZ24convolutionColumnsKernelPfS_iiiE6s_Data[BV32_ADD(BV32_MUL(local_id_x, 81bv32), BV32_ADD(local_id_y, BV32_MUL($i16.0, 8bv32)))] := $cond;
  goto $for.inc.30;
$for.inc.30:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  $i16.0 := BV32_ADD($i16.0, 1bv32);
  goto $for.cond.17;
$for.end.32:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  $i33.0 := 9bv32;
  goto $for.cond.34;
$for.cond.34:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  v9 := BV32_SLT($i33.0, 10bv32);
  goto $truebb2, $falsebb2;
$for.body.36:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  v10 := BV32_SGT(BV32_SUB($imageH, v1), BV32_MUL($i33.0, 8bv32));
  goto $truebb3, $falsebb3;
$cond.true.40:
  assert {:block_sourceloc} {:sourceloc_num 19} true;
  assert {:sourceloc} {:sourceloc_num 20} true;
  v11 := $$d_Src[BV32_ADD(v2, BV32_MUL(BV32_MUL($i33.0, 8bv32), $pitch))];
  $cond46 := v11;
  goto $cond.end.45;
$cond.false.44:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  $cond46 := 0bv32;
  goto $cond.end.45;
$cond.end.45:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  assert {:sourceloc} {:sourceloc_num 23} true;
  $$_ZZ24convolutionColumnsKernelPfS_iiiE6s_Data[BV32_ADD(BV32_MUL(local_id_x, 81bv32), BV32_ADD(local_id_y, BV32_MUL($i33.0, 8bv32)))] := $cond46;
  goto $for.inc.51;
$for.inc.51:
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  $i33.0 := BV32_ADD($i33.0, 1bv32);
  goto $for.cond.34;
$for.end.53:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  call {:sourceloc_num 26} $bugle_barrier(1bv1, 1bv1);
  $i54.0 := 1bv32;
  goto $for.cond.55;
$for.cond.55:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  assert {:originated_from_invariant} {:sourceloc_num 28} (if (_WRITE_HAS_OCCURRED_$$d_Dst ==> BV32_UREM(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), BV32_ADD(BV32_MUL(v1, $pitch), v0)), BV32_MUL(8bv32, $pitch)) == 0bv32) then 1bv1 else 0bv1) != 0bv1;
  assert {:originated_from_invariant} {:sourceloc_num 29} (if (_WRITE_HAS_OCCURRED_$$d_Dst ==> BV32_UGE(BV32_UDIV(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), BV32_ADD(BV32_MUL(v1, $pitch), v0)), BV32_MUL(8bv32, $pitch)), 1bv32)) then 1bv1 else 0bv1) != 0bv1;
  assert {:originated_from_invariant} {:sourceloc_num 30} (if (_WRITE_HAS_OCCURRED_$$d_Dst ==> BV32_ULT(BV32_UDIV(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), BV32_ADD(BV32_MUL(v1, $pitch), v0)), BV32_MUL(8bv32, $pitch)), 9bv32)) then 1bv1 else 0bv1) != 0bv1;
  v12 := BV32_SLT($i54.0, 9bv32);
  goto $truebb4, $falsebb4;
$for.body.84:
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  $sum.0, $j.0 := 0bv32, 4294967288bv32;
  goto $for.cond.85;
$for.cond.85:
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  v13 := BV32_SLE($j.0, 8bv32);
  goto $truebb5, $falsebb5;
$for.body.87:
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  assert {:sourceloc} {:sourceloc_num 34} true;
  v14 := $$c_Kernel[BV32_SUB(8bv32, $j.0)];
  assert {:sourceloc} {:sourceloc_num 35} true;
  v15 := $$_ZZ24convolutionColumnsKernelPfS_iiiE6s_Data[BV32_ADD(BV32_MUL(local_id_x, 81bv32), BV32_ADD(BV32_ADD(local_id_y, BV32_MUL($i54.0, 8bv32)), $j.0))];
  goto $for.inc.97;
$for.inc.97:
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  $sum.0, $j.0 := FADD32($sum.0, FMUL32(v14, v15)), BV32_ADD($j.0, 1bv32);
  goto $for.cond.85;
$for.end.99:
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  assert {:sourceloc} {:sourceloc_num 38} true;
  $$d_Dst[BV32_ADD(v3, BV32_MUL(BV32_MUL($i54.0, 8bv32), $pitch))] := $sum.0;
  goto $for.inc.103;
$for.inc.103:
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  $i54.0 := BV32_ADD($i54.0, 1bv32);
  goto $for.cond.55;
$for.end.105:
  assert {:block_sourceloc} {:sourceloc_num 40} true;
  return;
$truebb:
  assume {:partition} v4;
  assert {:block_sourceloc} {:sourceloc_num 41} true;
  goto $for.body;
$falsebb:
  assume {:partition} !v4;
  assert {:block_sourceloc} {:sourceloc_num 42} true;
  goto $for.end;
$truebb0:
  assume {:partition} v6;
  assert {:block_sourceloc} {:sourceloc_num 43} true;
  goto $for.body.19;
$falsebb0:
  assume {:partition} !v6;
  assert {:block_sourceloc} {:sourceloc_num 44} true;
  goto $for.end.32;
$truebb1:
  assume {:partition} v7;
  assert {:block_sourceloc} {:sourceloc_num 45} true;
  goto $cond.true;
$falsebb1:
  assume {:partition} !v7;
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  goto $cond.false;
$truebb2:
  assume {:partition} v9;
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  goto $for.body.36;
$falsebb2:
  assume {:partition} !v9;
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  goto $for.end.53;
$truebb3:
  assume {:partition} v10;
  assert {:block_sourceloc} {:sourceloc_num 49} true;
  goto $cond.true.40;
$falsebb3:
  assume {:partition} !v10;
  assert {:block_sourceloc} {:sourceloc_num 50} true;
  goto $cond.false.44;
$truebb4:
  assume {:partition} v12;
  assert {:block_sourceloc} {:sourceloc_num 51} true;
  goto $for.body.84;
$falsebb4:
  assume {:partition} !v12;
  assert {:block_sourceloc} {:sourceloc_num 52} true;
  goto $for.end.105;
$truebb5:
  assume {:partition} v13;
  assert {:block_sourceloc} {:sourceloc_num 53} true;
  goto $for.body.87;
$falsebb5:
  assume {:partition} !v13;
  assert {:block_sourceloc} {:sourceloc_num 54} true;
  goto $for.end.99;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 16bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_y == 8bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 192bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 48bv32 then 1bv1 else 0bv1) != 0bv1;
