type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
procedure _ATOMIC_OP8(x : [bv32]bv8, y : bv32) returns (z : bv8, A : [bv32]bv8);
var {:source_name "dst"} {:global} $$dst : [bv32]bv32;
axiom {:array_info "$$dst"} {:global} {:elem_width 32} {:source_name "dst"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$dst : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$dst : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$dst : bool;
const $arrayId$$dst : arrayId;
axiom $arrayId$$dst == 1bv4;

var {:source_name "agg.tmp24111"} $$agg.tmp24111 : [bv32]bv32;
axiom {:array_info "$$agg.tmp24111"} {:elem_width 32} {:source_name "agg.tmp24111"} {:source_elem_width 128} {:source_dimensions "1"} true;
const $arrayId$$agg.tmp24111 : arrayId;
axiom $arrayId$$agg.tmp24111 == 2bv4;

var {:source_name "agg.tmp110"} $$agg.tmp110 : [bv32]bv32;
axiom {:array_info "$$agg.tmp110"} {:elem_width 32} {:source_name "agg.tmp110"} {:source_elem_width 128} {:source_dimensions "1"} true;
const $arrayId$$agg.tmp110 : arrayId;
axiom $arrayId$$agg.tmp110 == 3bv4;

var {:source_name "agg.tmp"} $$agg.tmp : [bv32]bv32;
axiom {:array_info "$$agg.tmp"} {:elem_width 32} {:source_name "agg.tmp"} {:source_elem_width 128} {:source_dimensions "1"} true;
const $arrayId$$agg.tmp : arrayId;
axiom $arrayId$$agg.tmp == 4bv4;

var {:source_name "agg.tmp21"} $$agg.tmp21 : [bv32]bv8;
axiom {:array_info "$$agg.tmp21"} {:elem_width 8} {:source_name "agg.tmp21"} {:source_elem_width 96} {:source_dimensions "1"} true;
const $arrayId$$agg.tmp21 : arrayId;
axiom $arrayId$$agg.tmp21 == 5bv4;

var {:source_name "agg.tmp24"} $$agg.tmp24 : [bv32]bv32;
axiom {:array_info "$$agg.tmp24"} {:elem_width 32} {:source_name "agg.tmp24"} {:source_elem_width 128} {:source_dimensions "1"} true;
const $arrayId$$agg.tmp24 : arrayId;
axiom $arrayId$$agg.tmp24 == 6bv4;

var {:source_name "agg.tmp25"} $$agg.tmp25 : [bv32]bv8;
axiom {:array_info "$$agg.tmp25"} {:elem_width 8} {:source_name "agg.tmp25"} {:source_elem_width 96} {:source_dimensions "1"} true;
const $arrayId$$agg.tmp25 : arrayId;
axiom $arrayId$$agg.tmp25 == 7bv4;

var {:source_name "clr"} $$clr : [bv32]bv32;
axiom {:array_info "$$clr"} {:elem_width 32} {:source_name "clr"} {:source_elem_width 96} {:source_dimensions "1"} true;
const $arrayId$$clr : arrayId;
axiom $arrayId$$clr == 8bv4;

var {:source_name "clrIJ"} $$clrIJ : [bv32]bv32;
axiom {:array_info "$$clrIJ"} {:elem_width 32} {:source_name "clrIJ"} {:source_elem_width 128} {:source_dimensions "1"} true;
const $arrayId$$clrIJ : arrayId;
axiom $arrayId$$clrIJ == 9bv4;

var {:source_name "agg.tmp56"} $$agg.tmp56 : [bv32]bv8;
axiom {:array_info "$$agg.tmp56"} {:elem_width 8} {:source_name "agg.tmp56"} {:source_elem_width 96} {:source_dimensions "1"} true;
const $arrayId$$agg.tmp56 : arrayId;
axiom $arrayId$$agg.tmp56 == 10bv4;

var {:source_name "clr00"} $$clr00 : [bv32]bv32;
axiom {:array_info "$$clr00"} {:elem_width 32} {:source_name "clr00"} {:source_elem_width 128} {:source_dimensions "1"} true;
const $arrayId$$clr00 : arrayId;
axiom $arrayId$$clr00 == 11bv4;

var {:source_name "agg.tmp89"} $$agg.tmp89 : [bv32]bv8;
axiom {:array_info "$$agg.tmp89"} {:elem_width 8} {:source_name "agg.tmp89"} {:source_elem_width 96} {:source_dimensions "1"} true;
const $arrayId$$agg.tmp89 : arrayId;
axiom $arrayId$$agg.tmp89 == 12bv4;

var {:source_name "texImage"} {:global} $$texImage : [bv32]bv8;
axiom {:array_info "$$texImage"} {:global} {:elem_width 8} {:source_name "texImage"} {:source_elem_width 96} {:source_dimensions "1"} true;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 96} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$texImage : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 96} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$texImage : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 96} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$texImage : bool;
const $arrayId$$texImage : arrayId;
axiom $arrayId$$texImage == 13bv4;

var {:source_name "fWeights"} {:group_shared} $$_ZZ4NLM2PjiiffE8fWeights : [bv32]bv32;
axiom {:array_info "$$_ZZ4NLM2PjiiffE8fWeights"} {:group_shared} {:elem_width 32} {:source_name "fWeights"} {:source_elem_width 32} {:source_dimensions "64"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ4NLM2PjiiffE8fWeights : bool;
const $arrayId$$_ZZ4NLM2PjiiffE8fWeights : arrayId;
axiom $arrayId$$_ZZ4NLM2PjiiffE8fWeights == 14bv4;

type ptr = bv32;
type arrayId = bv4;

function {:inline true} MKPTR(base: arrayId, offset: bv32) : ptr {
  base ++ offset[28:0]
}

function {:inline true} base#MKPTR(p: ptr) : arrayId {
  p[32:28]
}

function {:inline true} offset#MKPTR(p : ptr) : bv32 {
  0bv4++p[28:0]
}

const $arrayId$$null$ : arrayId;
axiom $arrayId$$null$ == 0bv4;

const _WATCHED_OFFSET : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_id_y} group_id_y : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:local_id_y} local_id_y : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FADD32(bv32, bv32) : bv32;
function FDIV32(bv32, bv32) : bv32;
function FEQ32(bv32, bv32) : bool;
function FLT32(bv32, bv32) : bool;
function FMUL32(bv32, bv32) : bv32;
function FP32_TO_SI32(bv32) : bv32;
function FSUB32(bv32, bv32) : bv32;
function SI32_TO_FP32(bv32) : bv32;
function UI32_TO_FP32(bv32) : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvor"} BV32_OR(bv32, bv32) : bv32;
function {:bvbuiltin "bvshl"} BV32_SHL(bv32, bv32) : bv32;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
procedure {:source_name "NLM2"} {:kernel} $_Z4NLM2Pjiiff($imageW:bv32, $imageH:bv32, $Noise:bv32, $lerpC:bv32)
requires {:sourceloc_num 0} (if $imageW == 320bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 1} (if $imageH == 408bv32 then 1bv1 else 0bv1) != 0bv1;
{
  var $weight.0:bv32;
  var $n.0:bv32;
  var $weight.1:bv32;
  var $m.0:bv32;
  var $fCount.0:bv32;
  var $sumWeights.0:bv32;
  var $idx.0:bv32;
  var $i.0:bv32;
  var $fCount.1:bv32;
  var $sumWeights.1:bv32;
  var $idx.1:bv32;
  var $j.0:bv32;
  var $cond88:bv32;
  var v1:bv32;
  var v0:bv32;
  var v57:bv32;
  var v58:bv8;
  var v59:bv8;
  var v63:bv8;
  var v64:bv8;
  var v65:bv8;
  var v62:bv8;
  var v66:bv8;
  var v61:bv8;
  var v60:bv8;
  var v72:bv32;
  var v71:bv32;
  var v73:bv32;
  var v69:bv8;
  var v67:bv8;
  var v74:bv32;
  var v68:bv8;
  var v70:bv128;
  var v34:bv32;
  var v36:bv32;
  var v35:bv32;
  var v37:bv32;
  var v39:bv32;
  var v38:bv32;
  var v33:bv128;
  var v48:bv32;
  var v43:bv32;
  var v44:bv32;
  var v40:bv32;
  var v41:bv32;
  var v47:bv32;
  var v49:bv32;
  var v50:bv32;
  var v42:bv32;
  var v46:bv32;
  var v45:bv32;
  var v54:bv32;
  var v53:bv32;
  var v52:bv32;
  var v51:bv32;
  var v6:bool;
  var v2:bv32;
  var v3:bv32;
  var v5:bool;
  var v4:bool;
  var v7:bool;
  var v26:bv8;
  var v30:bv8;
  var v24:bv8;
  var v28:bv8;
  var v29:bv8;
  var v23:bv8;
  var v22:bv8;
  var v31:bv8;
  var v27:bv8;
  var v25:bv8;
  var v32:bv8;
  var v16:bv8;
  var v11:bv8;
  var v8:bv8;
  var v12:bv8;
  var v15:bv8;
  var v10:bv8;
  var v13:bv8;
  var v9:bv8;
  var v14:bv8;
  var v19:bv8;
  var v17:bv8;
  var v21:bv8;
  var v18:bv8;
  var v20:bv128;
  var v77:bv32;
  var v55:bool;
  var v56:bool;
  var v105:bv32;
  var v106:bv32;
  var v76:bv32;
  var v78:bv32;
  var v80:bv32;
  var v79:bv32;
  var v82:bv8;
  var v75:bv32;
  var v86:bv8;
  var v90:bv8;
  var v91:bv8;
  var v89:bv8;
  var v85:bv8;
  var v92:bv8;
  var v83:bv8;
  var v87:bv8;
  var v88:bv8;
  var v93:bv8;
  var v84:bv8;
  var v94:bv128;
  var v97:bv32;
  var v96:bv32;
  var v100:bv32;
  var v95:bv32;
  var v98:bv32;
  var v101:bv32;
  var v99:bv32;
  var v104:bv32;
  var v103:bv32;
  var v102:bv32;
  var v81:bool;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v0 := BV32_ADD(BV32_MUL(group_size_x, group_id_x), local_id_x);
  v1 := BV32_ADD(BV32_MUL(group_size_y, group_id_y), local_id_y);
  v2 := FADD32(SI32_TO_FP32(v0), 1056964608bv32);
  v3 := FADD32(SI32_TO_FP32(v1), 1056964608bv32);
  v4 := BV32_SLT(v0, $imageW);
  goto $truebb, $falsebb;
$land.lhs.true:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  v5 := BV32_SLT(v1, $imageH);
  goto $truebb0, $falsebb0;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  $weight.0, $n.0 := 0bv32, 3225419776bv32;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  v6 := FEQ32($n.0, 1077936128bv32) || FLT32($n.0, 1077936128bv32);
  goto $truebb1, $falsebb1;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  $weight.1, $m.0 := $weight.0, 3225419776bv32;
  goto $for.cond.18;
$for.cond.18:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  v7 := FEQ32($m.0, 1077936128bv32) || FLT32($m.0, 1077936128bv32);
  goto $truebb2, $falsebb2;
$for.body.20:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  assert {:sourceloc} {:sourceloc_num 9} true;
  v8 := $$texImage[0bv32];
  assert {:sourceloc} {:sourceloc_num 10} true;
  $$agg.tmp21[0bv32] := v8;
  assert {:sourceloc} {:sourceloc_num 11} true;
  v9 := $$texImage[1bv32];
  assert {:sourceloc} {:sourceloc_num 12} true;
  $$agg.tmp21[1bv32] := v9;
  assert {:sourceloc} {:sourceloc_num 13} true;
  v10 := $$texImage[2bv32];
  assert {:sourceloc} {:sourceloc_num 14} true;
  $$agg.tmp21[2bv32] := v10;
  assert {:sourceloc} {:sourceloc_num 15} true;
  v11 := $$texImage[3bv32];
  assert {:sourceloc} {:sourceloc_num 16} true;
  $$agg.tmp21[3bv32] := v11;
  assert {:sourceloc} {:sourceloc_num 17} true;
  v12 := $$texImage[4bv32];
  assert {:sourceloc} {:sourceloc_num 18} true;
  $$agg.tmp21[4bv32] := v12;
  assert {:sourceloc} {:sourceloc_num 19} true;
  v13 := $$texImage[5bv32];
  assert {:sourceloc} {:sourceloc_num 20} true;
  $$agg.tmp21[5bv32] := v13;
  assert {:sourceloc} {:sourceloc_num 21} true;
  v14 := $$texImage[6bv32];
  assert {:sourceloc} {:sourceloc_num 22} true;
  $$agg.tmp21[6bv32] := v14;
  assert {:sourceloc} {:sourceloc_num 23} true;
  v15 := $$texImage[7bv32];
  assert {:sourceloc} {:sourceloc_num 24} true;
  $$agg.tmp21[7bv32] := v15;
  assert {:sourceloc} {:sourceloc_num 25} true;
  v16 := $$texImage[8bv32];
  assert {:sourceloc} {:sourceloc_num 26} true;
  $$agg.tmp21[8bv32] := v16;
  assert {:sourceloc} {:sourceloc_num 27} true;
  v17 := $$texImage[9bv32];
  assert {:sourceloc} {:sourceloc_num 28} true;
  $$agg.tmp21[9bv32] := v17;
  assert {:sourceloc} {:sourceloc_num 29} true;
  v18 := $$texImage[10bv32];
  assert {:sourceloc} {:sourceloc_num 30} true;
  $$agg.tmp21[10bv32] := v18;
  assert {:sourceloc} {:sourceloc_num 31} true;
  v19 := $$texImage[11bv32];
  assert {:sourceloc} {:sourceloc_num 32} true;
  $$agg.tmp21[11bv32] := v19;
  call {:sourceloc_num 33}   v20 := $_Z5tex2D7textureI6uchar4Li2EL19cudaTextureReadMode1EEff(MKPTR($arrayId$$agg.tmp21, 0bv32), FADD32(FADD32(UI32_TO_FP32(BV32_ADD(BV32_MUL(group_size_x, group_id_x), 3bv32)), 1056964608bv32), $m.0), FADD32(FADD32(UI32_TO_FP32(BV32_ADD(BV32_MUL(group_size_x, group_id_y), 3bv32)), 1056964608bv32), $n.0));
  assert {:sourceloc} {:sourceloc_num 34} true;
  $$agg.tmp[0bv32] := v20[32:0];
  assert {:sourceloc} {:sourceloc_num 35} true;
  $$agg.tmp[1bv32] := v20[64:32];
  assert {:sourceloc} {:sourceloc_num 36} true;
  $$agg.tmp[2bv32] := v20[96:64];
  assert {:sourceloc} {:sourceloc_num 37} true;
  $$agg.tmp[3bv32] := v20[128:96];
  assert {:sourceloc} {:sourceloc_num 38} true;
  v21 := $$texImage[0bv32];
  assert {:sourceloc} {:sourceloc_num 39} true;
  $$agg.tmp25[0bv32] := v21;
  assert {:sourceloc} {:sourceloc_num 40} true;
  v22 := $$texImage[1bv32];
  assert {:sourceloc} {:sourceloc_num 41} true;
  $$agg.tmp25[1bv32] := v22;
  assert {:sourceloc} {:sourceloc_num 42} true;
  v23 := $$texImage[2bv32];
  assert {:sourceloc} {:sourceloc_num 43} true;
  $$agg.tmp25[2bv32] := v23;
  assert {:sourceloc} {:sourceloc_num 44} true;
  v24 := $$texImage[3bv32];
  assert {:sourceloc} {:sourceloc_num 45} true;
  $$agg.tmp25[3bv32] := v24;
  assert {:sourceloc} {:sourceloc_num 46} true;
  v25 := $$texImage[4bv32];
  assert {:sourceloc} {:sourceloc_num 47} true;
  $$agg.tmp25[4bv32] := v25;
  assert {:sourceloc} {:sourceloc_num 48} true;
  v26 := $$texImage[5bv32];
  assert {:sourceloc} {:sourceloc_num 49} true;
  $$agg.tmp25[5bv32] := v26;
  assert {:sourceloc} {:sourceloc_num 50} true;
  v27 := $$texImage[6bv32];
  assert {:sourceloc} {:sourceloc_num 51} true;
  $$agg.tmp25[6bv32] := v27;
  assert {:sourceloc} {:sourceloc_num 52} true;
  v28 := $$texImage[7bv32];
  assert {:sourceloc} {:sourceloc_num 53} true;
  $$agg.tmp25[7bv32] := v28;
  assert {:sourceloc} {:sourceloc_num 54} true;
  v29 := $$texImage[8bv32];
  assert {:sourceloc} {:sourceloc_num 55} true;
  $$agg.tmp25[8bv32] := v29;
  assert {:sourceloc} {:sourceloc_num 56} true;
  v30 := $$texImage[9bv32];
  assert {:sourceloc} {:sourceloc_num 57} true;
  $$agg.tmp25[9bv32] := v30;
  assert {:sourceloc} {:sourceloc_num 58} true;
  v31 := $$texImage[10bv32];
  assert {:sourceloc} {:sourceloc_num 59} true;
  $$agg.tmp25[10bv32] := v31;
  assert {:sourceloc} {:sourceloc_num 60} true;
  v32 := $$texImage[11bv32];
  assert {:sourceloc} {:sourceloc_num 61} true;
  $$agg.tmp25[11bv32] := v32;
  call {:sourceloc_num 62}   v33 := $_Z5tex2D7textureI6uchar4Li2EL19cudaTextureReadMode1EEff(MKPTR($arrayId$$agg.tmp25, 0bv32), FADD32(v2, $m.0), FADD32(v3, $n.0));
  assert {:sourceloc} {:sourceloc_num 63} true;
  $$agg.tmp24[0bv32] := v33[32:0];
  assert {:sourceloc} {:sourceloc_num 64} true;
  $$agg.tmp24[1bv32] := v33[64:32];
  assert {:sourceloc} {:sourceloc_num 65} true;
  $$agg.tmp24[2bv32] := v33[96:64];
  assert {:sourceloc} {:sourceloc_num 66} true;
  $$agg.tmp24[3bv32] := v33[128:96];
  assert {:sourceloc} {:sourceloc_num 67} true;
  v34 := $$agg.tmp24[0bv32];
  assert {:sourceloc} {:sourceloc_num 68} true;
  $$agg.tmp24111[0bv32] := v34;
  assert {:sourceloc} {:sourceloc_num 69} true;
  v35 := $$agg.tmp24[1bv32];
  assert {:sourceloc} {:sourceloc_num 70} true;
  $$agg.tmp24111[1bv32] := v35;
  assert {:sourceloc} {:sourceloc_num 71} true;
  v36 := $$agg.tmp24[2bv32];
  assert {:sourceloc} {:sourceloc_num 72} true;
  $$agg.tmp24111[2bv32] := v36;
  assert {:sourceloc} {:sourceloc_num 73} true;
  v37 := $$agg.tmp24[3bv32];
  assert {:sourceloc} {:sourceloc_num 74} true;
  $$agg.tmp24111[3bv32] := v37;
  assert {:sourceloc} {:sourceloc_num 75} true;
  v38 := $$agg.tmp[0bv32];
  assert {:sourceloc} {:sourceloc_num 76} true;
  $$agg.tmp110[0bv32] := v38;
  assert {:sourceloc} {:sourceloc_num 77} true;
  v39 := $$agg.tmp[1bv32];
  assert {:sourceloc} {:sourceloc_num 78} true;
  $$agg.tmp110[1bv32] := v39;
  assert {:sourceloc} {:sourceloc_num 79} true;
  v40 := $$agg.tmp[2bv32];
  assert {:sourceloc} {:sourceloc_num 80} true;
  $$agg.tmp110[2bv32] := v40;
  assert {:sourceloc} {:sourceloc_num 81} true;
  v41 := $$agg.tmp[3bv32];
  assert {:sourceloc} {:sourceloc_num 82} true;
  $$agg.tmp110[3bv32] := v41;
  assert {:sourceloc} {:sourceloc_num 83} true;
  v42 := $$agg.tmp24111[0bv32];
  assert {:sourceloc} {:sourceloc_num 84} true;
  v43 := $$agg.tmp110[0bv32];
  assert {:sourceloc} {:sourceloc_num 85} true;
  v44 := $$agg.tmp24111[0bv32];
  assert {:sourceloc} {:sourceloc_num 86} true;
  v45 := $$agg.tmp110[0bv32];
  assert {:sourceloc} {:sourceloc_num 87} true;
  v46 := $$agg.tmp24111[1bv32];
  assert {:sourceloc} {:sourceloc_num 88} true;
  v47 := $$agg.tmp110[1bv32];
  assert {:sourceloc} {:sourceloc_num 89} true;
  v48 := $$agg.tmp24111[1bv32];
  assert {:sourceloc} {:sourceloc_num 90} true;
  v49 := $$agg.tmp110[1bv32];
  assert {:sourceloc} {:sourceloc_num 91} true;
  v50 := $$agg.tmp24111[2bv32];
  assert {:sourceloc} {:sourceloc_num 92} true;
  v51 := $$agg.tmp110[2bv32];
  assert {:sourceloc} {:sourceloc_num 93} true;
  v52 := $$agg.tmp24111[2bv32];
  assert {:sourceloc} {:sourceloc_num 94} true;
  v53 := $$agg.tmp110[2bv32];
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 95} true;
  $weight.1, $m.0 := FADD32($weight.1, FADD32(FADD32(FMUL32(FSUB32(v42, v43), FSUB32(v44, v45)), FMUL32(FSUB32(v46, v47), FSUB32(v48, v49))), FMUL32(FSUB32(v50, v51), FSUB32(v52, v53)))), FADD32($m.0, 1065353216bv32);
  goto $for.cond.18;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 96} true;
  goto $for.inc.31;
$for.inc.31:
  assert {:block_sourceloc} {:sourceloc_num 97} true;
  $weight.0, $n.0 := $weight.1, FADD32($n.0, 1065353216bv32);
  goto $for.cond;
$for.end.33:
  assert {:block_sourceloc} {:sourceloc_num 98} true;
  call {:sourceloc_num 99}   v54 := $__expf(FSUB32(2147483648bv32, FADD32(FMUL32($weight.0, $Noise), FMUL32(UI32_TO_FP32(BV32_ADD(BV32_MUL(BV32_SUB(local_id_x, 3bv32), BV32_SUB(local_id_x, 3bv32)), BV32_MUL(BV32_SUB(local_id_y, 3bv32), BV32_SUB(local_id_y, 3bv32)))), 1017589509bv32))));
  assert {:sourceloc} {:sourceloc_num 100} true;
  $$_ZZ4NLM2PjiiffE8fWeights[BV32_ADD(BV32_MUL(local_id_y, 8bv32), local_id_x)] := v54;
  call {:sourceloc_num 101} $bugle_barrier(1bv1, 1bv1);
  assert {:sourceloc} {:sourceloc_num 102} true;
  $$clr[0bv32] := 0bv32;
  assert {:sourceloc} {:sourceloc_num 103} true;
  $$clr[1bv32] := 0bv32;
  assert {:sourceloc} {:sourceloc_num 104} true;
  $$clr[2bv32] := 0bv32;
  $fCount.0, $sumWeights.0, $idx.0, $i.0 := 0bv32, 0bv32, 0bv32, 3225419776bv32;
  goto $for.cond.48;
$for.cond.48:
  assert {:block_sourceloc} {:sourceloc_num 105} true;
  v55 := FEQ32($i.0, 1082130432bv32) || FLT32($i.0, 1082130432bv32);
  goto $truebb3, $falsebb3;
$for.body.50:
  assert {:block_sourceloc} {:sourceloc_num 106} true;
  $fCount.1, $sumWeights.1, $idx.1, $j.0 := $fCount.0, $sumWeights.0, $idx.0, 3225419776bv32;
  goto $for.cond.51;
$for.cond.51:
  assert {:block_sourceloc} {:sourceloc_num 107} true;
  v56 := FEQ32($j.0, 1082130432bv32) || FLT32($j.0, 1082130432bv32);
  goto $truebb4, $falsebb4;
$for.body.53:
  assert {:block_sourceloc} {:sourceloc_num 108} true;
  assert {:sourceloc} {:sourceloc_num 109} true;
  v57 := $$_ZZ4NLM2PjiiffE8fWeights[$idx.1];
  assert {:sourceloc} {:sourceloc_num 110} true;
  v58 := $$texImage[0bv32];
  assert {:sourceloc} {:sourceloc_num 111} true;
  $$agg.tmp56[0bv32] := v58;
  assert {:sourceloc} {:sourceloc_num 112} true;
  v59 := $$texImage[1bv32];
  assert {:sourceloc} {:sourceloc_num 113} true;
  $$agg.tmp56[1bv32] := v59;
  assert {:sourceloc} {:sourceloc_num 114} true;
  v60 := $$texImage[2bv32];
  assert {:sourceloc} {:sourceloc_num 115} true;
  $$agg.tmp56[2bv32] := v60;
  assert {:sourceloc} {:sourceloc_num 116} true;
  v61 := $$texImage[3bv32];
  assert {:sourceloc} {:sourceloc_num 117} true;
  $$agg.tmp56[3bv32] := v61;
  assert {:sourceloc} {:sourceloc_num 118} true;
  v62 := $$texImage[4bv32];
  assert {:sourceloc} {:sourceloc_num 119} true;
  $$agg.tmp56[4bv32] := v62;
  assert {:sourceloc} {:sourceloc_num 120} true;
  v63 := $$texImage[5bv32];
  assert {:sourceloc} {:sourceloc_num 121} true;
  $$agg.tmp56[5bv32] := v63;
  assert {:sourceloc} {:sourceloc_num 122} true;
  v64 := $$texImage[6bv32];
  assert {:sourceloc} {:sourceloc_num 123} true;
  $$agg.tmp56[6bv32] := v64;
  assert {:sourceloc} {:sourceloc_num 124} true;
  v65 := $$texImage[7bv32];
  assert {:sourceloc} {:sourceloc_num 125} true;
  $$agg.tmp56[7bv32] := v65;
  assert {:sourceloc} {:sourceloc_num 126} true;
  v66 := $$texImage[8bv32];
  assert {:sourceloc} {:sourceloc_num 127} true;
  $$agg.tmp56[8bv32] := v66;
  assert {:sourceloc} {:sourceloc_num 128} true;
  v67 := $$texImage[9bv32];
  assert {:sourceloc} {:sourceloc_num 129} true;
  $$agg.tmp56[9bv32] := v67;
  assert {:sourceloc} {:sourceloc_num 130} true;
  v68 := $$texImage[10bv32];
  assert {:sourceloc} {:sourceloc_num 131} true;
  $$agg.tmp56[10bv32] := v68;
  assert {:sourceloc} {:sourceloc_num 132} true;
  v69 := $$texImage[11bv32];
  assert {:sourceloc} {:sourceloc_num 133} true;
  $$agg.tmp56[11bv32] := v69;
  call {:sourceloc_num 134}   v70 := $_Z5tex2D7textureI6uchar4Li2EL19cudaTextureReadMode1EEff(MKPTR($arrayId$$agg.tmp56, 0bv32), FADD32(v2, $j.0), FADD32(v3, $i.0));
  assert {:sourceloc} {:sourceloc_num 135} true;
  $$clrIJ[0bv32] := v70[32:0];
  assert {:sourceloc} {:sourceloc_num 136} true;
  $$clrIJ[1bv32] := v70[64:32];
  assert {:sourceloc} {:sourceloc_num 137} true;
  $$clrIJ[2bv32] := v70[96:64];
  assert {:sourceloc} {:sourceloc_num 138} true;
  $$clrIJ[3bv32] := v70[128:96];
  assert {:sourceloc} {:sourceloc_num 139} true;
  v71 := $$clrIJ[0bv32];
  assert {:sourceloc} {:sourceloc_num 140} true;
  v72 := $$clr[0bv32];
  assert {:sourceloc} {:sourceloc_num 141} true;
  $$clr[0bv32] := FADD32(v72, FMUL32(v71, v57));
  assert {:sourceloc} {:sourceloc_num 142} true;
  v73 := $$clrIJ[1bv32];
  assert {:sourceloc} {:sourceloc_num 143} true;
  v74 := $$clr[1bv32];
  assert {:sourceloc} {:sourceloc_num 144} true;
  $$clr[1bv32] := FADD32(v74, FMUL32(v73, v57));
  assert {:sourceloc} {:sourceloc_num 145} true;
  v75 := $$clrIJ[2bv32];
  assert {:sourceloc} {:sourceloc_num 146} true;
  v76 := $$clr[2bv32];
  assert {:sourceloc} {:sourceloc_num 147} true;
  $$clr[2bv32] := FADD32(v76, FMUL32(v75, v57));
  goto $for.inc.74;
$for.inc.74:
  assert {:block_sourceloc} {:sourceloc_num 148} true;
  $fCount.1, $sumWeights.1, $idx.1, $j.0 := FADD32($fCount.1, (if FLT32(1036831949bv32, v57) then 1017589509bv32 else 0bv32)), FADD32($sumWeights.1, v57), BV32_ADD($idx.1, 1bv32), FADD32($j.0, 1065353216bv32);
  goto $for.cond.51;
$for.end.76:
  assert {:block_sourceloc} {:sourceloc_num 149} true;
  goto $for.inc.77;
$for.inc.77:
  assert {:block_sourceloc} {:sourceloc_num 150} true;
  $fCount.0, $sumWeights.0, $idx.0, $i.0 := $fCount.1, $sumWeights.1, $idx.1, FADD32($i.0, 1065353216bv32);
  goto $for.cond.48;
$for.end.79:
  assert {:block_sourceloc} {:sourceloc_num 151} true;
  v77 := FDIV32(1065353216bv32, $sumWeights.0);
  assert {:sourceloc} {:sourceloc_num 152} true;
  v78 := $$clr[0bv32];
  assert {:sourceloc} {:sourceloc_num 153} true;
  $$clr[0bv32] := FMUL32(v78, v77);
  assert {:sourceloc} {:sourceloc_num 154} true;
  v79 := $$clr[1bv32];
  assert {:sourceloc} {:sourceloc_num 155} true;
  $$clr[1bv32] := FMUL32(v79, v77);
  assert {:sourceloc} {:sourceloc_num 156} true;
  v80 := $$clr[2bv32];
  assert {:sourceloc} {:sourceloc_num 157} true;
  $$clr[2bv32] := FMUL32(v80, v77);
  v81 := FLT32(1036831949bv32, $fCount.0);
  goto $truebb5, $falsebb5;
$cond.true:
  assert {:block_sourceloc} {:sourceloc_num 158} true;
  $cond88 := $lerpC;
  goto $cond.end;
$cond.false:
  assert {:block_sourceloc} {:sourceloc_num 159} true;
  $cond88 := FSUB32(1065353216bv32, $lerpC);
  goto $cond.end;
$cond.end:
  assert {:block_sourceloc} {:sourceloc_num 160} true;
  assert {:sourceloc} {:sourceloc_num 161} true;
  v82 := $$texImage[0bv32];
  assert {:sourceloc} {:sourceloc_num 162} true;
  $$agg.tmp89[0bv32] := v82;
  assert {:sourceloc} {:sourceloc_num 163} true;
  v83 := $$texImage[1bv32];
  assert {:sourceloc} {:sourceloc_num 164} true;
  $$agg.tmp89[1bv32] := v83;
  assert {:sourceloc} {:sourceloc_num 165} true;
  v84 := $$texImage[2bv32];
  assert {:sourceloc} {:sourceloc_num 166} true;
  $$agg.tmp89[2bv32] := v84;
  assert {:sourceloc} {:sourceloc_num 167} true;
  v85 := $$texImage[3bv32];
  assert {:sourceloc} {:sourceloc_num 168} true;
  $$agg.tmp89[3bv32] := v85;
  assert {:sourceloc} {:sourceloc_num 169} true;
  v86 := $$texImage[4bv32];
  assert {:sourceloc} {:sourceloc_num 170} true;
  $$agg.tmp89[4bv32] := v86;
  assert {:sourceloc} {:sourceloc_num 171} true;
  v87 := $$texImage[5bv32];
  assert {:sourceloc} {:sourceloc_num 172} true;
  $$agg.tmp89[5bv32] := v87;
  assert {:sourceloc} {:sourceloc_num 173} true;
  v88 := $$texImage[6bv32];
  assert {:sourceloc} {:sourceloc_num 174} true;
  $$agg.tmp89[6bv32] := v88;
  assert {:sourceloc} {:sourceloc_num 175} true;
  v89 := $$texImage[7bv32];
  assert {:sourceloc} {:sourceloc_num 176} true;
  $$agg.tmp89[7bv32] := v89;
  assert {:sourceloc} {:sourceloc_num 177} true;
  v90 := $$texImage[8bv32];
  assert {:sourceloc} {:sourceloc_num 178} true;
  $$agg.tmp89[8bv32] := v90;
  assert {:sourceloc} {:sourceloc_num 179} true;
  v91 := $$texImage[9bv32];
  assert {:sourceloc} {:sourceloc_num 180} true;
  $$agg.tmp89[9bv32] := v91;
  assert {:sourceloc} {:sourceloc_num 181} true;
  v92 := $$texImage[10bv32];
  assert {:sourceloc} {:sourceloc_num 182} true;
  $$agg.tmp89[10bv32] := v92;
  assert {:sourceloc} {:sourceloc_num 183} true;
  v93 := $$texImage[11bv32];
  assert {:sourceloc} {:sourceloc_num 184} true;
  $$agg.tmp89[11bv32] := v93;
  call {:sourceloc_num 185}   v94 := $_Z5tex2D7textureI6uchar4Li2EL19cudaTextureReadMode1EEff(MKPTR($arrayId$$agg.tmp89, 0bv32), v2, v3);
  assert {:sourceloc} {:sourceloc_num 186} true;
  $$clr00[0bv32] := v94[32:0];
  assert {:sourceloc} {:sourceloc_num 187} true;
  $$clr00[1bv32] := v94[64:32];
  assert {:sourceloc} {:sourceloc_num 188} true;
  $$clr00[2bv32] := v94[96:64];
  assert {:sourceloc} {:sourceloc_num 189} true;
  $$clr00[3bv32] := v94[128:96];
  assert {:sourceloc} {:sourceloc_num 190} true;
  v95 := $$clr[0bv32];
  assert {:sourceloc} {:sourceloc_num 191} true;
  v96 := $$clr00[0bv32];
  call {:sourceloc_num 192}   v97 := $_Z5lerpffff(v95, v96, $cond88);
  assert {:sourceloc} {:sourceloc_num 193} true;
  $$clr[0bv32] := v97;
  assert {:sourceloc} {:sourceloc_num 194} true;
  v98 := $$clr[1bv32];
  assert {:sourceloc} {:sourceloc_num 195} true;
  v99 := $$clr00[1bv32];
  call {:sourceloc_num 196}   v100 := $_Z5lerpffff(v98, v99, $cond88);
  assert {:sourceloc} {:sourceloc_num 197} true;
  $$clr[1bv32] := v100;
  assert {:sourceloc} {:sourceloc_num 198} true;
  v101 := $$clr[2bv32];
  assert {:sourceloc} {:sourceloc_num 199} true;
  v102 := $$clr00[2bv32];
  call {:sourceloc_num 200}   v103 := $_Z5lerpffff(v101, v102, $cond88);
  assert {:sourceloc} {:sourceloc_num 201} true;
  $$clr[2bv32] := v103;
  assert {:sourceloc} {:sourceloc_num 202} true;
  v104 := $$clr[0bv32];
  assert {:sourceloc} {:sourceloc_num 203} true;
  v105 := $$clr[1bv32];
  assert {:sourceloc} {:sourceloc_num 204} true;
  v106 := $$clr[2bv32];
  assert {:sourceloc} {:sourceloc_num 205} true;
  $$dst[BV32_ADD(BV32_MUL($imageW, v1), v0)] := BV32_OR(BV32_OR(BV32_OR(BV32_SHL(FP32_TO_SI32(FMUL32(0bv32, 1132396544bv32)), 24bv32), BV32_SHL(FP32_TO_SI32(FMUL32(v106, 1132396544bv32)), 16bv32)), BV32_SHL(FP32_TO_SI32(FMUL32(v105, 1132396544bv32)), 8bv32)), FP32_TO_SI32(FMUL32(v104, 1132396544bv32)));
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 206} true;
  return;
$truebb:
  assume {:partition} v4;
  assert {:block_sourceloc} {:sourceloc_num 207} true;
  goto $land.lhs.true;
$falsebb:
  assume {:partition} !v4;
  assert {:block_sourceloc} {:sourceloc_num 208} true;
  goto $if.end;
$truebb0:
  assume {:partition} v5;
  assert {:block_sourceloc} {:sourceloc_num 209} true;
  goto $if.then;
$falsebb0:
  assume {:partition} !v5;
  assert {:block_sourceloc} {:sourceloc_num 210} true;
  goto $if.end;
$truebb1:
  assume {:partition} v6;
  assert {:block_sourceloc} {:sourceloc_num 211} true;
  goto $for.body;
$falsebb1:
  assume {:partition} !v6;
  assert {:block_sourceloc} {:sourceloc_num 212} true;
  goto $for.end.33;
$truebb2:
  assume {:partition} v7;
  assert {:block_sourceloc} {:sourceloc_num 213} true;
  goto $for.body.20;
$falsebb2:
  assume {:partition} !v7;
  assert {:block_sourceloc} {:sourceloc_num 214} true;
  goto $for.end;
$truebb3:
  assume {:partition} v55;
  assert {:block_sourceloc} {:sourceloc_num 215} true;
  goto $for.body.50;
$falsebb3:
  assume {:partition} !v55;
  assert {:block_sourceloc} {:sourceloc_num 216} true;
  goto $for.end.79;
$truebb4:
  assume {:partition} v56;
  assert {:block_sourceloc} {:sourceloc_num 217} true;
  goto $for.body.53;
$falsebb4:
  assume {:partition} !v56;
  assert {:block_sourceloc} {:sourceloc_num 218} true;
  goto $for.end.76;
$truebb5:
  assume {:partition} v81;
  assert {:block_sourceloc} {:sourceloc_num 219} true;
  goto $cond.true;
$falsebb5:
  assume {:partition} !v81;
  assert {:block_sourceloc} {:sourceloc_num 220} true;
  goto $cond.false;
}
procedure {:source_name "_Z5tex2D7textureI6uchar4Li2EL19cudaTextureReadMode1EEff"} $_Z5tex2D7textureI6uchar4Li2EL19cudaTextureReadMode1EEff($0:ptr, $1:bv32, $2:bv32) returns ($ret:bv128);
procedure {:source_name "__expf"} $__expf($0:bv32) returns ($ret:bv32);
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
procedure {:source_name "_Z5lerpffff"} $_Z5lerpffff($0:bv32, $1:bv32, $2:bv32) returns ($ret:bv32);
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 8bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_y == 8bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 40bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 51bv32 then 1bv1 else 0bv1) != 0bv1;
