type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "d_CallResult"} {:global} $$d_CallResult : [bv32]bv32;
axiom {:array_info "$$d_CallResult"} {:global} {:elem_width 32} {:source_name "d_CallResult"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_CallResult : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_CallResult : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_CallResult : bool;

var {:source_name "d_PutResult"} {:global} $$d_PutResult : [bv32]bv32;
axiom {:array_info "$$d_PutResult"} {:global} {:elem_width 32} {:source_name "d_PutResult"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_PutResult : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_PutResult : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_PutResult : bool;

var {:source_name "d_StockPrice"} {:global} $$d_StockPrice : [bv32]bv32;
axiom {:array_info "$$d_StockPrice"} {:global} {:elem_width 32} {:source_name "d_StockPrice"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_StockPrice : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_StockPrice : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_StockPrice : bool;

var {:source_name "d_OptionStrike"} {:global} $$d_OptionStrike : [bv32]bv32;
axiom {:array_info "$$d_OptionStrike"} {:global} {:elem_width 32} {:source_name "d_OptionStrike"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_OptionStrike : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_OptionStrike : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_OptionStrike : bool;

var {:source_name "d_OptionYears"} {:global} $$d_OptionYears : [bv32]bv32;
axiom {:array_info "$$d_OptionYears"} {:global} {:elem_width 32} {:source_name "d_OptionYears"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_OptionYears : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_OptionYears : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_OptionYears : bool;

const _WATCHED_OFFSET : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FADD32(bv32, bv32) : bv32;
function FDIV32(bv32, bv32) : bv32;
function FLT32(bv32, bv32) : bool;
function FMUL32(bv32, bv32) : bv32;
function FSQRT32(bv32) : bv32;
function FSUB32(bv32, bv32) : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
function {:bvbuiltin "bvsrem"} BV32_SREM(bv32, bv32) : bv32;
function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvurem"} BV32_UREM(bv32, bv32) : bv32;
procedure {:source_name "BlackScholesGPU"} {:kernel} $_Z15BlackScholesGPUPfS_S_S_S_ffi($Riskfree:bv32, $Volatility:bv32, $optN:bv32)
requires {:sourceloc_num 0} (if $optN == 4000000bv32 then 1bv1 else 0bv1) != 0bv1;
{
  var $opt.0:bv32;
  var $cnd.i.i.0:bv32;
  var $cnd.i.31.i.0:bv32;
  var v1:bv32;
  var v0:bv32;
  var v3:bv32;
  var v4:bv32;
  var v7:bv32;
  var v17:bv32;
  var v12:bv32;
  var v20:bv32;
  var v15:bv32;
  var v10:bv32;
  var v5:bv32;
  var v2:bool;
  var v6:bv32;
  var v8:bv32;
  var v11:bv32;
  var v13:bv32;
  var v9:bv32;
  var v14:bool;
  var v18:bv32;
  var v16:bv32;
  var v19:bool;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  v0 := BV32_ADD(BV32_MUL(group_size_x, group_id_x), local_id_x);
  v1 := BV32_MUL(group_size_x, num_groups_x);
  $opt.0 := v0;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  assert {:originated_from_invariant} {:sourceloc_num 3} (if BV32_SREM($opt.0, v1) == v0 then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 4} (if (_WRITE_HAS_OCCURRED_$$d_CallResult ==> BV32_UREM(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), v1) == v0) then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 5} (if (_WRITE_HAS_OCCURRED_$$d_PutResult ==> BV32_UREM(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), v1) == v0) then 1bv1 else 0bv1) != 0bv1;
  v2 := BV32_SLT($opt.0, $optN);
  goto $truebb, $falsebb;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  assert {:sourceloc} {:sourceloc_num 7} true;
  v3 := $$d_StockPrice[$opt.0];
  assert {:sourceloc} {:sourceloc_num 8} true;
  v4 := $$d_OptionStrike[$opt.0];
  assert {:sourceloc} {:sourceloc_num 9} true;
  v5 := $$d_OptionYears[$opt.0];
  v6 := FSQRT32(v5);
  call {:sourceloc_num 10}   v7 := $__logf(FDIV32(v3, v4));
  v8 := FDIV32(FADD32(v7, FMUL32(FADD32($Riskfree, FMUL32(FMUL32(1056964608bv32, $Volatility), $Volatility)), v5)), FMUL32($Volatility, v6));
  v9 := FSUB32(v8, FMUL32($Volatility, v6));
  call {:sourceloc_num 11}   v10 := $fabsf(v8);
  v11 := FDIV32(1065353216bv32, FADD32(1065353216bv32, FMUL32(1047344009bv32, v10)));
  call {:sourceloc_num 12}   v12 := $__expf(FMUL32(FMUL32(3204448256bv32, v8), v8));
  v13 := FMUL32(FMUL32(1053573674bv32, v12), FMUL32(v11, FADD32(1050904058bv32, FMUL32(v11, FADD32(3199635335bv32, FMUL32(v11, FADD32(1071908728bv32, FMUL32(v11, FADD32(3219726058bv32, FMUL32(v11, 1068123759bv32))))))))));
  v14 := FLT32(0bv32, v8);
  goto $truebb0, $falsebb0;
$if.then.i.i:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  $cnd.i.i.0 := FSUB32(1065353216bv32, v13);
  goto $_ZL6cndGPUf.exit.i;
$_ZL6cndGPUf.exit.i:
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  call {:sourceloc_num 15}   v15 := $fabsf(v9);
  v16 := FDIV32(1065353216bv32, FADD32(1065353216bv32, FMUL32(1047344009bv32, v15)));
  call {:sourceloc_num 16}   v17 := $__expf(FMUL32(FMUL32(3204448256bv32, v9), v9));
  v18 := FMUL32(FMUL32(1053573674bv32, v17), FMUL32(v16, FADD32(1050904058bv32, FMUL32(v16, FADD32(3199635335bv32, FMUL32(v16, FADD32(1071908728bv32, FMUL32(v16, FADD32(3219726058bv32, FMUL32(v16, 1068123759bv32))))))))));
  v19 := FLT32(0bv32, v9);
  goto $truebb1, $falsebb1;
$if.then.i.52.i:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  $cnd.i.31.i.0 := FSUB32(1065353216bv32, v18);
  goto $_ZL19BlackScholesBodyGPURfS_fffff.exit;
$_ZL19BlackScholesBodyGPURfS_fffff.exit:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  call {:sourceloc_num 19}   v20 := $__expf(FMUL32(FSUB32(2147483648bv32, $Riskfree), v5));
  assert {:sourceloc} {:sourceloc_num 20} true;
  $$d_CallResult[$opt.0] := FSUB32(FMUL32(v3, $cnd.i.i.0), FMUL32(FMUL32(v4, v20), $cnd.i.31.i.0));
  assert {:sourceloc} {:sourceloc_num 21} true;
  $$d_PutResult[$opt.0] := FSUB32(FMUL32(FMUL32(v4, v20), FSUB32(1065353216bv32, $cnd.i.31.i.0)), FMUL32(v3, FSUB32(1065353216bv32, $cnd.i.i.0)));
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  $opt.0 := BV32_ADD($opt.0, v1);
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  return;
$truebb:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  goto $for.body;
$falsebb:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  goto $for.end;
$truebb0:
  assume {:partition} v14;
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  goto $if.then.i.i;
$falsebb0:
  assume {:partition} !v14;
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  $cnd.i.i.0 := v13;
  goto $_ZL6cndGPUf.exit.i;
$truebb1:
  assume {:partition} v19;
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  goto $if.then.i.52.i;
$falsebb1:
  assume {:partition} !v19;
  assert {:block_sourceloc} {:sourceloc_num 29} true;
  $cnd.i.31.i.0 := v18;
  goto $_ZL19BlackScholesBodyGPURfS_fffff.exit;
}
procedure {:source_name "__logf"} $__logf($0:bv32) returns ($ret:bv32);
procedure {:source_name "__expf"} $__expf($0:bv32) returns ($ret:bv32);
procedure {:source_name "fabsf"} $fabsf($0:bv32) returns ($ret:bv32);
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 128bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 480bv32 then 1bv1 else 0bv1) != 0bv1;
