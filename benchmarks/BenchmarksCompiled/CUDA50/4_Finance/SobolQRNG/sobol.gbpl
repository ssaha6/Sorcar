type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "d_directions"} {:global} $$d_directions : [bv32]bv32;
axiom {:array_info "$$d_directions"} {:global} {:elem_width 32} {:source_name "d_directions"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_directions : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_directions : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_directions : bool;

var {:source_name "d_output"} {:global} $$d_output : [bv32]bv32;
axiom {:array_info "$$d_output"} {:global} {:elem_width 32} {:source_name "d_output"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_output : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_output : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_output : bool;

var {:source_name "v"} {:group_shared} $$_ZZ15sobolGPU_kerneljjPjPfE1v : [bv32]bv32;
axiom {:array_info "$$_ZZ15sobolGPU_kerneljjPjPfE1v"} {:group_shared} {:elem_width 32} {:source_name "v"} {:source_elem_width 32} {:source_dimensions "32"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ15sobolGPU_kerneljjPjPfE1v : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ15sobolGPU_kerneljjPjPfE1v : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ15sobolGPU_kerneljjPjPfE1v : bool;

const _WATCHED_OFFSET : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_id_y} group_id_y : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FMUL32(bv32, bv32) : bv32;
function UI32_TO_FP32(bv32) : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvand"} BV32_AND(bv32, bv32) : bv32;
function {:bvbuiltin "bvashr"} BV32_ASHR(bv32, bv32) : bv32;
function {:bvbuiltin "bvlshr"} BV32_LSHR(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvor"} BV32_OR(bv32, bv32) : bv32;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "bvult"} BV32_ULT(bv32, bv32) : bool;
function {:bvbuiltin "bvxor"} BV32_XOR(bv32, bv32) : bv32;
procedure BV32_CTLZ(val : bv32, isZeroUndef : bool) returns (count : bv32);
  ensures (val == 0bv32 && !isZeroUndef)  ==> count == 32bv32;
  ensures (BV32_LSHR(val, 1bv32) == 0bv32 && BV32_LSHR(val, 0bv32) != 0bv32) ==> count == 31bv32;
  ensures (BV32_LSHR(val, 2bv32) == 0bv32 && BV32_LSHR(val, 1bv32) != 0bv32) ==> count == 30bv32;
  ensures (BV32_LSHR(val, 3bv32) == 0bv32 && BV32_LSHR(val, 2bv32) != 0bv32) ==> count == 29bv32;
  ensures (BV32_LSHR(val, 4bv32) == 0bv32 && BV32_LSHR(val, 3bv32) != 0bv32) ==> count == 28bv32;
  ensures (BV32_LSHR(val, 5bv32) == 0bv32 && BV32_LSHR(val, 4bv32) != 0bv32) ==> count == 27bv32;
  ensures (BV32_LSHR(val, 6bv32) == 0bv32 && BV32_LSHR(val, 5bv32) != 0bv32) ==> count == 26bv32;
  ensures (BV32_LSHR(val, 7bv32) == 0bv32 && BV32_LSHR(val, 6bv32) != 0bv32) ==> count == 25bv32;
  ensures (BV32_LSHR(val, 8bv32) == 0bv32 && BV32_LSHR(val, 7bv32) != 0bv32) ==> count == 24bv32;
  ensures (BV32_LSHR(val, 9bv32) == 0bv32 && BV32_LSHR(val, 8bv32) != 0bv32) ==> count == 23bv32;
  ensures (BV32_LSHR(val, 10bv32) == 0bv32 && BV32_LSHR(val, 9bv32) != 0bv32) ==> count == 22bv32;
  ensures (BV32_LSHR(val, 11bv32) == 0bv32 && BV32_LSHR(val, 10bv32) != 0bv32) ==> count == 21bv32;
  ensures (BV32_LSHR(val, 12bv32) == 0bv32 && BV32_LSHR(val, 11bv32) != 0bv32) ==> count == 20bv32;
  ensures (BV32_LSHR(val, 13bv32) == 0bv32 && BV32_LSHR(val, 12bv32) != 0bv32) ==> count == 19bv32;
  ensures (BV32_LSHR(val, 14bv32) == 0bv32 && BV32_LSHR(val, 13bv32) != 0bv32) ==> count == 18bv32;
  ensures (BV32_LSHR(val, 15bv32) == 0bv32 && BV32_LSHR(val, 14bv32) != 0bv32) ==> count == 17bv32;
  ensures (BV32_LSHR(val, 16bv32) == 0bv32 && BV32_LSHR(val, 15bv32) != 0bv32) ==> count == 16bv32;
  ensures (BV32_LSHR(val, 17bv32) == 0bv32 && BV32_LSHR(val, 16bv32) != 0bv32) ==> count == 15bv32;
  ensures (BV32_LSHR(val, 18bv32) == 0bv32 && BV32_LSHR(val, 17bv32) != 0bv32) ==> count == 14bv32;
  ensures (BV32_LSHR(val, 19bv32) == 0bv32 && BV32_LSHR(val, 18bv32) != 0bv32) ==> count == 13bv32;
  ensures (BV32_LSHR(val, 20bv32) == 0bv32 && BV32_LSHR(val, 19bv32) != 0bv32) ==> count == 12bv32;
  ensures (BV32_LSHR(val, 21bv32) == 0bv32 && BV32_LSHR(val, 20bv32) != 0bv32) ==> count == 11bv32;
  ensures (BV32_LSHR(val, 22bv32) == 0bv32 && BV32_LSHR(val, 21bv32) != 0bv32) ==> count == 10bv32;
  ensures (BV32_LSHR(val, 23bv32) == 0bv32 && BV32_LSHR(val, 22bv32) != 0bv32) ==> count == 9bv32;
  ensures (BV32_LSHR(val, 24bv32) == 0bv32 && BV32_LSHR(val, 23bv32) != 0bv32) ==> count == 8bv32;
  ensures (BV32_LSHR(val, 25bv32) == 0bv32 && BV32_LSHR(val, 24bv32) != 0bv32) ==> count == 7bv32;
  ensures (BV32_LSHR(val, 26bv32) == 0bv32 && BV32_LSHR(val, 25bv32) != 0bv32) ==> count == 6bv32;
  ensures (BV32_LSHR(val, 27bv32) == 0bv32 && BV32_LSHR(val, 26bv32) != 0bv32) ==> count == 5bv32;
  ensures (BV32_LSHR(val, 28bv32) == 0bv32 && BV32_LSHR(val, 27bv32) != 0bv32) ==> count == 4bv32;
  ensures (BV32_LSHR(val, 29bv32) == 0bv32 && BV32_LSHR(val, 28bv32) != 0bv32) ==> count == 3bv32;
  ensures (BV32_LSHR(val, 30bv32) == 0bv32 && BV32_LSHR(val, 29bv32) != 0bv32) ==> count == 2bv32;
  ensures (BV32_LSHR(val, 31bv32) == 0bv32 && BV32_LSHR(val, 30bv32) != 0bv32) ==> count == 1bv32;

procedure {:source_name "sobolGPU_kernel"} {:kernel} $_Z15sobolGPU_kerneljjPjPf($n_vectors:bv32, $n_dimensions:bv32)
requires {:sourceloc_num 0} (if $n_vectors == 100000bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 1} (if $n_dimensions == 100bv32 then 1bv1 else 0bv1) != 0bv1;
{
  var $g.0:bv32;
  var $X.0:bv32;
  var $k.0:bv32;
  var $X.1:bv32;
  var $i.0:bv32;
  var v3:bv32;
  var v8:bv32;
  var v0:bv32;
  var v2:bool;
  var v1:bv32;
  var v6:bv32;
  var v5:bv32;
  var v4:bv32;
  var v12:bool;
  var v10:bv32;
  var v9:bool;
  var v7:bool;
  var v11:bv32;
  var v15:bv32;
  var v14:bv32;
  var v13:bv32;
  var v16:bv32;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v0 := BV32_MUL(32bv32, group_id_y);
  v1 := BV32_MUL($n_vectors, group_id_y);
  v2 := BV32_ULT(local_id_x, 32bv32);
  goto $truebb, $falsebb;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  assert {:sourceloc} {:sourceloc_num 4} true;
  v3 := $$d_directions[BV32_ADD(v0, local_id_x)];
  assert {:sourceloc} {:sourceloc_num 5} true;
  $$_ZZ15sobolGPU_kerneljjPjPfE1v[local_id_x] := v3;
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  call {:sourceloc_num 7} $bugle_barrier(1bv1, 1bv1);
  v4 := BV32_ADD(local_id_x, BV32_MUL(group_id_x, group_size_x));
  v5 := BV32_MUL(num_groups_x, group_size_x);
  $g.0, $X.0, $k.0 := BV32_XOR(v4, BV32_ASHR(v4, 1bv32)), 0bv32, 0bv32;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  call v6 := BV32_CTLZ(BV32_AND(v5, BV32_SUB(0bv32, v5)), false);
  v7 := BV32_ULT($k.0, BV32_SUB(BV32_SUB(32bv32, v6), 1bv32));
  goto $truebb0, $falsebb0;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  assert {:sourceloc} {:sourceloc_num 10} true;
  v8 := $$_ZZ15sobolGPU_kerneljjPjPfE1v[$k.0];
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  $g.0, $X.0, $k.0 := BV32_LSHR($g.0, 1bv32), BV32_XOR($X.0, BV32_AND(BV32_SUB(0bv32, BV32_AND($g.0, 1bv32)), v8)), BV32_ADD($k.0, 1bv32);
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  v9 := BV32_ULT(v4, $n_vectors);
  goto $truebb1, $falsebb1;
$if.then.15:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  assert {:sourceloc} {:sourceloc_num 14} true;
  $$d_output[BV32_ADD(v1, v4)] := FMUL32(UI32_TO_FP32($X.0), 796917760bv32);
  goto $if.end.18;
$if.end.18:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  call v10 := BV32_CTLZ(BV32_AND(v5, BV32_SUB(0bv32, v5)), false);
  assert {:sourceloc} {:sourceloc_num 16} true;
  v11 := $$_ZZ15sobolGPU_kerneljjPjPfE1v[BV32_SUB(BV32_SUB(32bv32, v10), 2bv32)];
  $X.1, $i.0 := $X.0, BV32_ADD(v4, v5);
  goto $for.cond.24;
$for.cond.24:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  v12 := BV32_ULT($i.0, $n_vectors);
  goto $truebb2, $falsebb2;
$for.body.26:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  v13 := BV32_XOR(BV32_OR(BV32_SUB($i.0, v5), BV32_SUB(v5, 1bv32)), 4294967295bv32);
  call v14 := BV32_CTLZ(BV32_AND(v13, BV32_SUB(0bv32, v13)), false);
  assert {:sourceloc} {:sourceloc_num 19} true;
  v15 := $$_ZZ15sobolGPU_kerneljjPjPfE1v[BV32_SUB(BV32_SUB(32bv32, v14), 1bv32)];
  v16 := BV32_XOR($X.1, BV32_XOR(v11, v15));
  assert {:sourceloc} {:sourceloc_num 20} true;
  $$d_output[BV32_ADD(v1, $i.0)] := FMUL32(UI32_TO_FP32(v16), 796917760bv32);
  goto $for.inc.36;
$for.inc.36:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  $X.1, $i.0 := v16, BV32_ADD($i.0, v5);
  goto $for.cond.24;
$for.end.38:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  return;
$truebb:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  goto $if.then;
$falsebb:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  goto $if.end;
$truebb0:
  assume {:partition} v7;
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  goto $for.body;
$falsebb0:
  assume {:partition} !v7;
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  goto $for.end;
$truebb1:
  assume {:partition} v9;
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  goto $if.then.15;
$falsebb1:
  assume {:partition} !v9;
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  goto $if.end.18;
$truebb2:
  assume {:partition} v12;
  assert {:block_sourceloc} {:sourceloc_num 29} true;
  goto $for.body.26;
$falsebb2:
  assume {:partition} !v12;
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  goto $for.end.38;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_x == 64bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 100bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
