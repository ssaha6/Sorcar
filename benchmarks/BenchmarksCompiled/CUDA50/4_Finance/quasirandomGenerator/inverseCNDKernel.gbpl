type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "d_Output"} {:global} $$d_Output : [bv32]bv32;
axiom {:array_info "$$d_Output"} {:global} {:elem_width 32} {:source_name "d_Output"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_Output : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_Output : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_Output : bool;
const $arrayId$$d_Output : arrayId;
axiom $arrayId$$d_Output == 1bv2;

var {:source_name "d_Input"} {:global} $$d_Input : [bv32]bv32;
axiom {:array_info "$$d_Input"} {:global} {:elem_width 32} {:source_name "d_Input"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_Input : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_Input : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_Input : bool;
const $arrayId$$d_Input : arrayId;
axiom $arrayId$$d_Input == 2bv2;

type ptr = bv32;
type arrayId = bv2;

function {:inline true} MKPTR(base: arrayId, offset: bv32) : ptr {
  base ++ offset[30:0]
}

function {:inline true} base#MKPTR(p: ptr) : arrayId {
  p[32:30]
}

function {:inline true} offset#MKPTR(p : ptr) : bv32 {
  0bv2++p[30:0]
}

const $arrayId$$null$ : arrayId;
axiom $arrayId$$null$ == 0bv2;

const _WATCHED_OFFSET : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FADD32(bv32, bv32) : bv32;
function FDIV32(bv32, bv32) : bv32;
function FLT32(bv32, bv32) : bool;
function FMUL32(bv32, bv32) : bv32;
function FSUB32(bv32, bv32) : bv32;
function UI32_TO_FP32(bv32) : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvsub"} BV64_SUB(bv64, bv64) : bv64;
function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvuge"} BV64_UGE(bv64, bv64) : bool;
function {:bvbuiltin "bvult"} BV32_ULT(bv32, bv32) : bool;
function {:bvbuiltin "zero_extend 32"} BV32_ZEXT64(bv32) : bv64;
procedure {:source_name "inverseCNDKernel"} {:kernel} $_Z16inverseCNDKernelPfPjj($pathN:bv32)
{
  var $pos.0:bv32;
  var $negate.i.41.0:bv8;
  var $x.addr.i.22.0:bv32;
  var $z.i.40.0:bv32;
  var $cond.i.102:bv32;
  var $pos6.0:bv32;
  var $x.addr.i.17.0:bv32;
  var $negate.i.0:bv8;
  var $z.i.0:bv32;
  var $cond.i:bv32;
  var v1:bv32;
  var v5:bool;
  var v0:bv32;
  var v2:bool;
  var v3:bool;
  var v21:bv32;
  var v20:bv32;
  var v4:bv32;
  var v11:bv32;
  var v10:bv32;
  var v9:bv32;
  var v6:bv32;
  var v7:bv32;
  var v8:bool;
  var v13:bool;
  var v12:bool;
  var v14:bv32;
  var v15:bool;
  var v19:bv32;
  var v17:bv32;
  var v16:bv32;
  var v18:bool;
  var v22:bool;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  v0 := BV32_ADD(BV32_MUL(group_size_x, group_id_x), local_id_x);
  v1 := BV32_MUL(group_size_x, num_groups_x);
  v2 := MKPTR($arrayId$$d_Input, 0bv32) != MKPTR($arrayId$$null$, 0bv32);
  goto $truebb, $falsebb;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  $pos.0 := v0;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v3 := BV32_ULT($pos.0, $pathN);
  goto $truebb0, $falsebb0;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  assert {:sourceloc} {:sourceloc_num 4} true;
  v4 := $$d_Input[$pos.0];
  v5 := BV64_UGE(BV32_ZEXT64(v4), 2147483648bv64);
  goto $truebb1, $falsebb1;
$if.then.i.51:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  $negate.i.41.0, $x.addr.i.22.0 := 1bv8, BV64_SUB(4294967295bv64, BV32_ZEXT64(v4))[32:0];
  goto $if.end.i.57;
$if.end.i.57:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  v6 := FADD32(FMUL32(UI32_TO_FP32($x.addr.i.22.0), 796917760bv32), 788529152bv32);
  v7 := FSUB32(v6, 1056964608bv32);
  v8 := FLT32(3201763901bv32, v7);
  goto $truebb2, $falsebb2;
$if.then.6.i.75:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  v9 := FMUL32(v7, v7);
  $z.i.40.0 := FDIV32(FMUL32(v7, FADD32(FMUL32(FADD32(FMUL32(FADD32(FMUL32(3251341131bv32, v9), 1109758102bv32), v9), 3247762309bv32), v9), 1075866777bv32)), FADD32(FMUL32(FADD32(FMUL32(FADD32(FMUL32(FADD32(FMUL32(1078484865bv32, v9), 3249045368bv32), v9), 1102621373bv32), v9), 3238499200bv32), v9), 1065353216bv32));
  goto $if.end.42.i.98;
$if.else.i.96:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  call {:sourceloc_num 9}   v10 := $__logf(v6);
  call {:sourceloc_num 10}   v11 := $__logf(FSUB32(2147483648bv32, v10));
  $z.i.40.0 := FSUB32(2147483648bv32, FADD32(1051511190bv32, FMUL32(v11, FADD32(1064953398bv32, FMUL32(v11, FADD32(1042589753bv32, FMUL32(v11, FADD32(1021474156bv32, FMUL32(v11, FADD32(997962271bv32, FMUL32(v11, FADD32(969879925bv32, FMUL32(v11, FADD32(939980176bv32, FMUL32(v11, FADD32(882577068bv32, FMUL32(v11, 886349352bv32)))))))))))))))));
  goto $if.end.42.i.98;
$if.end.42.i.98:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  v12 := $negate.i.41.0[1:0] == 1bv1;
  goto $truebb3, $falsebb3;
$cond.true.i.100:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  $cond.i.102 := FSUB32(2147483648bv32, $z.i.40.0);
  goto $_ZL13MoroInvCNDgpuj.exit103;
$cond.false.i.101:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  $cond.i.102 := $z.i.40.0;
  goto $_ZL13MoroInvCNDgpuj.exit103;
$_ZL13MoroInvCNDgpuj.exit103:
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  assert {:sourceloc} {:sourceloc_num 15} true;
  $$d_Output[$pos.0] := $cond.i.102;
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  $pos.0 := BV32_ADD($pos.0, v1);
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  goto $if.end;
$if.else:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  $pos6.0 := v0;
  goto $for.cond.7;
$for.cond.7:
  assert {:block_sourceloc} {:sourceloc_num 19} true;
  v13 := BV32_ULT($pos6.0, $pathN);
  goto $truebb4, $falsebb4;
$for.body.9:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  v14 := BV32_MUL(BV32_ADD($pos6.0, 1bv32), BV32_UDIV(4294967295bv32, BV32_ADD($pathN, 1bv32)));
  v15 := BV64_UGE(BV32_ZEXT64(v14), 2147483648bv64);
  goto $truebb5, $falsebb5;
$if.then.i:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  $x.addr.i.17.0, $negate.i.0 := BV64_SUB(4294967295bv64, BV32_ZEXT64(v14))[32:0], 1bv8;
  goto $if.end.i;
$if.end.i:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  v16 := FADD32(FMUL32(UI32_TO_FP32($x.addr.i.17.0), 796917760bv32), 788529152bv32);
  v17 := FSUB32(v16, 1056964608bv32);
  v18 := FLT32(3201763901bv32, v17);
  goto $truebb6, $falsebb6;
$if.then.6.i:
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  v19 := FMUL32(v17, v17);
  $z.i.0 := FDIV32(FMUL32(v17, FADD32(FMUL32(FADD32(FMUL32(FADD32(FMUL32(3251341131bv32, v19), 1109758102bv32), v19), 3247762309bv32), v19), 1075866777bv32)), FADD32(FMUL32(FADD32(FMUL32(FADD32(FMUL32(FADD32(FMUL32(1078484865bv32, v19), 3249045368bv32), v19), 1102621373bv32), v19), 3238499200bv32), v19), 1065353216bv32));
  goto $if.end.42.i;
$if.else.i:
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  call {:sourceloc_num 25}   v20 := $__logf(v16);
  call {:sourceloc_num 26}   v21 := $__logf(FSUB32(2147483648bv32, v20));
  $z.i.0 := FSUB32(2147483648bv32, FADD32(1051511190bv32, FMUL32(v21, FADD32(1064953398bv32, FMUL32(v21, FADD32(1042589753bv32, FMUL32(v21, FADD32(1021474156bv32, FMUL32(v21, FADD32(997962271bv32, FMUL32(v21, FADD32(969879925bv32, FMUL32(v21, FADD32(939980176bv32, FMUL32(v21, FADD32(882577068bv32, FMUL32(v21, 886349352bv32)))))))))))))))));
  goto $if.end.42.i;
$if.end.42.i:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  v22 := $negate.i.0[1:0] == 1bv1;
  goto $truebb7, $falsebb7;
$cond.true.i:
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  $cond.i := FSUB32(2147483648bv32, $z.i.0);
  goto $_ZL13MoroInvCNDgpuj.exit;
$cond.false.i:
  assert {:block_sourceloc} {:sourceloc_num 29} true;
  $cond.i := $z.i.0;
  goto $_ZL13MoroInvCNDgpuj.exit;
$_ZL13MoroInvCNDgpuj.exit:
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  assert {:sourceloc} {:sourceloc_num 31} true;
  $$d_Output[$pos6.0] := $cond.i;
  goto $for.inc.14;
$for.inc.14:
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  $pos6.0 := BV32_ADD($pos6.0, v1);
  goto $for.cond.7;
$for.end.16:
  assert {:block_sourceloc} true;
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  return;
$truebb:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  goto $if.then;
$falsebb:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  goto $if.else;
$truebb0:
  assume {:partition} v3;
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  goto $for.body;
$falsebb0:
  assume {:partition} !v3;
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  goto $for.end;
$truebb1:
  assume {:partition} v5;
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  goto $if.then.i.51;
$falsebb1:
  assume {:partition} !v5;
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  $negate.i.41.0, $x.addr.i.22.0 := 0bv8, v4;
  goto $if.end.i.57;
$truebb2:
  assume {:partition} v8;
  assert {:block_sourceloc} {:sourceloc_num 40} true;
  goto $if.then.6.i.75;
$falsebb2:
  assume {:partition} !v8;
  assert {:block_sourceloc} {:sourceloc_num 41} true;
  goto $if.else.i.96;
$truebb3:
  assume {:partition} v12;
  assert {:block_sourceloc} {:sourceloc_num 42} true;
  goto $cond.true.i.100;
$falsebb3:
  assume {:partition} !v12;
  assert {:block_sourceloc} {:sourceloc_num 43} true;
  goto $cond.false.i.101;
$truebb4:
  assume {:partition} v13;
  assert {:block_sourceloc} {:sourceloc_num 44} true;
  goto $for.body.9;
$falsebb4:
  assume {:partition} !v13;
  assert {:block_sourceloc} {:sourceloc_num 45} true;
  goto $for.end.16;
$truebb5:
  assume {:partition} v15;
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  goto $if.then.i;
$falsebb5:
  assume {:partition} !v15;
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  $x.addr.i.17.0, $negate.i.0 := v14, 0bv8;
  goto $if.end.i;
$truebb6:
  assume {:partition} v18;
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  goto $if.then.6.i;
$falsebb6:
  assume {:partition} !v18;
  assert {:block_sourceloc} {:sourceloc_num 49} true;
  goto $if.else.i;
$truebb7:
  assume {:partition} v22;
  assert {:block_sourceloc} {:sourceloc_num 50} true;
  goto $cond.true.i;
$falsebb7:
  assume {:partition} !v22;
  assert {:block_sourceloc} {:sourceloc_num 51} true;
  goto $cond.false.i;
}
procedure {:source_name "__logf"} $__logf($0:bv32) returns ($ret:bv32);
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 128bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 128bv32 then 1bv1 else 0bv1) != 0bv1;
