type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP8(x : [bv32]bv8, y : bv32) returns (z : bv8, A : [bv32]bv8);
var {:source_name "pSobelOriginal"} {:global} $$pSobelOriginal : [bv32]bv8;
axiom {:array_info "$$pSobelOriginal"} {:global} {:elem_width 8} {:source_name "pSobelOriginal"} {:source_elem_width 8} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 8} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$pSobelOriginal : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 8} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$pSobelOriginal : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 8} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$pSobelOriginal : bool;
const $arrayId$$pSobelOriginal : arrayId;
axiom $arrayId$$pSobelOriginal == 1bv3;

var {:source_name "agg.tmp"} $$agg.tmp : [bv32]bv8;
axiom {:array_info "$$agg.tmp"} {:elem_width 8} {:source_name "agg.tmp"} {:source_elem_width 96} {:source_dimensions "1"} true;
const $arrayId$$agg.tmp : arrayId;
axiom $arrayId$$agg.tmp == 2bv3;

var {:source_name "agg.tmp15"} $$agg.tmp15 : [bv32]bv8;
axiom {:array_info "$$agg.tmp15"} {:elem_width 8} {:source_name "agg.tmp15"} {:source_elem_width 96} {:source_dimensions "1"} true;
const $arrayId$$agg.tmp15 : arrayId;
axiom $arrayId$$agg.tmp15 == 3bv3;

var {:source_name "agg.tmp24"} $$agg.tmp24 : [bv32]bv8;
axiom {:array_info "$$agg.tmp24"} {:elem_width 8} {:source_name "agg.tmp24"} {:source_elem_width 96} {:source_dimensions "1"} true;
const $arrayId$$agg.tmp24 : arrayId;
axiom $arrayId$$agg.tmp24 == 4bv3;

var {:source_name "agg.tmp34"} $$agg.tmp34 : [bv32]bv8;
axiom {:array_info "$$agg.tmp34"} {:elem_width 8} {:source_name "agg.tmp34"} {:source_elem_width 96} {:source_dimensions "1"} true;
const $arrayId$$agg.tmp34 : arrayId;
axiom $arrayId$$agg.tmp34 == 5bv3;

var {:source_name "tex"} {:global} $$tex : [bv32]bv8;
axiom {:array_info "$$tex"} {:global} {:elem_width 8} {:source_name "tex"} {:source_elem_width 96} {:source_dimensions "1"} true;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 96} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$tex : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 96} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$tex : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 96} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$tex : bool;
const $arrayId$$tex : arrayId;
axiom $arrayId$$tex == 6bv3;

type ptr = bv32;
type arrayId = bv3;

function {:inline true} MKPTR(base: arrayId, offset: bv32) : ptr {
  base ++ offset[29:0]
}

function {:inline true} base#MKPTR(p: ptr) : arrayId {
  p[32:29]
}

function {:inline true} offset#MKPTR(p : ptr) : bv32 {
  0bv3++p[29:0]
}

const $arrayId$$null$ : arrayId;
axiom $arrayId$$null$ == 0bv3;

const _WATCHED_OFFSET : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FLT32(bv32, bv32) : bool;
function FMUL32(bv32, bv32) : bv32;
function FP32_TO_UI8(bv32) : bv8;
function SI32_TO_FP32(bv32) : bv32;
function UI32_TO_FP32(bv32) : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
function {:bvbuiltin "bvurem"} BV32_UREM(bv32, bv32) : bv32;
function {:bvbuiltin "zero_extend 24"} BV8_ZEXT32(bv8) : bv32;
procedure {:source_name "SobelCopyImage"} {:kernel} $_Z14SobelCopyImagePhjiif($Pitch:bv32, $w:bv32, $h:bv32, $fscale:bv32)
requires {:sourceloc_num 0} (if $Pitch == 512bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 1} (if $w == 512bv32 then 1bv1 else 0bv1) != 0bv1;
{
  var $i.0:bv32;
  var $cond:bv32;
  var $cond42:bv32;
  var $cond45:bv32;
  var v15:bv8;
  var v16:bv8;
  var v22:bv8;
  var v23:bv8;
  var v24:bv8;
  var v21:bv8;
  var v20:bv8;
  var v17:bv8;
  var v19:bv8;
  var v18:bv8;
  var v2:bv8;
  var v5:bv8;
  var v6:bv8;
  var v4:bv8;
  var v7:bv8;
  var v1:bv8;
  var v3:bv8;
  var v13:bv8;
  var v8:bv8;
  var v10:bv8;
  var v11:bv8;
  var v9:bv8;
  var v12:bv8;
  var v0:bool;
  var v14:bool;
  var v34:bv8;
  var v33:bv8;
  var v32:bv8;
  var v35:bv8;
  var v30:bv8;
  var v25:bv8;
  var v27:bv8;
  var v26:bv8;
  var v29:bv8;
  var v31:bv8;
  var v37:bv8;
  var v44:bv8;
  var v38:bv8;
  var v46:bv8;
  var v39:bv8;
  var v41:bv8;
  var v43:bv8;
  var v45:bv8;
  var v36:bv8;
  var v40:bv8;
  var v52:bv8;
  var v49:bv8;
  var v53:bv8;
  var v48:bv8;
  var v50:bv8;
  var v47:bv8;
  var v51:bv8;
  var v42:bool;
  var v28:bool;
  var v54:bv8;
  var v55:bv8;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  $i.0 := local_id_x;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 4} (if BV32_UREM($i.0, group_size_x) == local_id_x then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 5} (if (_WRITE_HAS_OCCURRED_$$pSobelOriginal ==> BV32_UREM(BV32_UREM(_WATCHED_OFFSET, $Pitch), group_size_x) == local_id_x) then 1bv1 else 0bv1) != 0bv1;
  v0 := BV32_SLT($i.0, $w);
  goto $truebb, $falsebb;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  assert {:sourceloc} {:sourceloc_num 7} true;
  v1 := $$tex[0bv32];
  assert {:sourceloc} {:sourceloc_num 8} true;
  $$agg.tmp[0bv32] := v1;
  assert {:sourceloc} {:sourceloc_num 9} true;
  v2 := $$tex[1bv32];
  assert {:sourceloc} {:sourceloc_num 10} true;
  $$agg.tmp[1bv32] := v2;
  assert {:sourceloc} {:sourceloc_num 11} true;
  v3 := $$tex[2bv32];
  assert {:sourceloc} {:sourceloc_num 12} true;
  $$agg.tmp[2bv32] := v3;
  assert {:sourceloc} {:sourceloc_num 13} true;
  v4 := $$tex[3bv32];
  assert {:sourceloc} {:sourceloc_num 14} true;
  $$agg.tmp[3bv32] := v4;
  assert {:sourceloc} {:sourceloc_num 15} true;
  v5 := $$tex[4bv32];
  assert {:sourceloc} {:sourceloc_num 16} true;
  $$agg.tmp[4bv32] := v5;
  assert {:sourceloc} {:sourceloc_num 17} true;
  v6 := $$tex[5bv32];
  assert {:sourceloc} {:sourceloc_num 18} true;
  $$agg.tmp[5bv32] := v6;
  assert {:sourceloc} {:sourceloc_num 19} true;
  v7 := $$tex[6bv32];
  assert {:sourceloc} {:sourceloc_num 20} true;
  $$agg.tmp[6bv32] := v7;
  assert {:sourceloc} {:sourceloc_num 21} true;
  v8 := $$tex[7bv32];
  assert {:sourceloc} {:sourceloc_num 22} true;
  $$agg.tmp[7bv32] := v8;
  assert {:sourceloc} {:sourceloc_num 23} true;
  v9 := $$tex[8bv32];
  assert {:sourceloc} {:sourceloc_num 24} true;
  $$agg.tmp[8bv32] := v9;
  assert {:sourceloc} {:sourceloc_num 25} true;
  v10 := $$tex[9bv32];
  assert {:sourceloc} {:sourceloc_num 26} true;
  $$agg.tmp[9bv32] := v10;
  assert {:sourceloc} {:sourceloc_num 27} true;
  v11 := $$tex[10bv32];
  assert {:sourceloc} {:sourceloc_num 28} true;
  $$agg.tmp[10bv32] := v11;
  assert {:sourceloc} {:sourceloc_num 29} true;
  v12 := $$tex[11bv32];
  assert {:sourceloc} {:sourceloc_num 30} true;
  $$agg.tmp[11bv32] := v12;
  call {:sourceloc_num 31}   v13 := $_Z5tex2DIhET_7textureIS0_Li2EL19cudaTextureReadMode0EEff(MKPTR($arrayId$$agg.tmp, 0bv32), SI32_TO_FP32($i.0), UI32_TO_FP32(group_id_x));
  v14 := FLT32(FMUL32(SI32_TO_FP32(BV8_ZEXT32(v13)), $fscale), 0bv32);
  goto $truebb0, $falsebb0;
$cond.true:
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  $cond := 0bv32;
  goto $cond.end;
$cond.false:
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  assert {:sourceloc} {:sourceloc_num 34} true;
  v15 := $$tex[0bv32];
  assert {:sourceloc} {:sourceloc_num 35} true;
  $$agg.tmp15[0bv32] := v15;
  assert {:sourceloc} {:sourceloc_num 36} true;
  v16 := $$tex[1bv32];
  assert {:sourceloc} {:sourceloc_num 37} true;
  $$agg.tmp15[1bv32] := v16;
  assert {:sourceloc} {:sourceloc_num 38} true;
  v17 := $$tex[2bv32];
  assert {:sourceloc} {:sourceloc_num 39} true;
  $$agg.tmp15[2bv32] := v17;
  assert {:sourceloc} {:sourceloc_num 40} true;
  v18 := $$tex[3bv32];
  assert {:sourceloc} {:sourceloc_num 41} true;
  $$agg.tmp15[3bv32] := v18;
  assert {:sourceloc} {:sourceloc_num 42} true;
  v19 := $$tex[4bv32];
  assert {:sourceloc} {:sourceloc_num 43} true;
  $$agg.tmp15[4bv32] := v19;
  assert {:sourceloc} {:sourceloc_num 44} true;
  v20 := $$tex[5bv32];
  assert {:sourceloc} {:sourceloc_num 45} true;
  $$agg.tmp15[5bv32] := v20;
  assert {:sourceloc} {:sourceloc_num 46} true;
  v21 := $$tex[6bv32];
  assert {:sourceloc} {:sourceloc_num 47} true;
  $$agg.tmp15[6bv32] := v21;
  assert {:sourceloc} {:sourceloc_num 48} true;
  v22 := $$tex[7bv32];
  assert {:sourceloc} {:sourceloc_num 49} true;
  $$agg.tmp15[7bv32] := v22;
  assert {:sourceloc} {:sourceloc_num 50} true;
  v23 := $$tex[8bv32];
  assert {:sourceloc} {:sourceloc_num 51} true;
  $$agg.tmp15[8bv32] := v23;
  assert {:sourceloc} {:sourceloc_num 52} true;
  v24 := $$tex[9bv32];
  assert {:sourceloc} {:sourceloc_num 53} true;
  $$agg.tmp15[9bv32] := v24;
  assert {:sourceloc} {:sourceloc_num 54} true;
  v25 := $$tex[10bv32];
  assert {:sourceloc} {:sourceloc_num 55} true;
  $$agg.tmp15[10bv32] := v25;
  assert {:sourceloc} {:sourceloc_num 56} true;
  v26 := $$tex[11bv32];
  assert {:sourceloc} {:sourceloc_num 57} true;
  $$agg.tmp15[11bv32] := v26;
  call {:sourceloc_num 58}   v27 := $_Z5tex2DIhET_7textureIS0_Li2EL19cudaTextureReadMode0EEff(MKPTR($arrayId$$agg.tmp15, 0bv32), SI32_TO_FP32($i.0), UI32_TO_FP32(group_id_x));
  $cond := FMUL32(SI32_TO_FP32(BV8_ZEXT32(v27)), $fscale);
  goto $cond.end;
$cond.end:
  assert {:block_sourceloc} {:sourceloc_num 59} true;
  v28 := FLT32($cond, 1132396544bv32);
  goto $truebb1, $falsebb1;
$cond.true.23:
  assert {:block_sourceloc} {:sourceloc_num 60} true;
  assert {:sourceloc} {:sourceloc_num 61} true;
  v29 := $$tex[0bv32];
  assert {:sourceloc} {:sourceloc_num 62} true;
  $$agg.tmp24[0bv32] := v29;
  assert {:sourceloc} {:sourceloc_num 63} true;
  v30 := $$tex[1bv32];
  assert {:sourceloc} {:sourceloc_num 64} true;
  $$agg.tmp24[1bv32] := v30;
  assert {:sourceloc} {:sourceloc_num 65} true;
  v31 := $$tex[2bv32];
  assert {:sourceloc} {:sourceloc_num 66} true;
  $$agg.tmp24[2bv32] := v31;
  assert {:sourceloc} {:sourceloc_num 67} true;
  v32 := $$tex[3bv32];
  assert {:sourceloc} {:sourceloc_num 68} true;
  $$agg.tmp24[3bv32] := v32;
  assert {:sourceloc} {:sourceloc_num 69} true;
  v33 := $$tex[4bv32];
  assert {:sourceloc} {:sourceloc_num 70} true;
  $$agg.tmp24[4bv32] := v33;
  assert {:sourceloc} {:sourceloc_num 71} true;
  v34 := $$tex[5bv32];
  assert {:sourceloc} {:sourceloc_num 72} true;
  $$agg.tmp24[5bv32] := v34;
  assert {:sourceloc} {:sourceloc_num 73} true;
  v35 := $$tex[6bv32];
  assert {:sourceloc} {:sourceloc_num 74} true;
  $$agg.tmp24[6bv32] := v35;
  assert {:sourceloc} {:sourceloc_num 75} true;
  v36 := $$tex[7bv32];
  assert {:sourceloc} {:sourceloc_num 76} true;
  $$agg.tmp24[7bv32] := v36;
  assert {:sourceloc} {:sourceloc_num 77} true;
  v37 := $$tex[8bv32];
  assert {:sourceloc} {:sourceloc_num 78} true;
  $$agg.tmp24[8bv32] := v37;
  assert {:sourceloc} {:sourceloc_num 79} true;
  v38 := $$tex[9bv32];
  assert {:sourceloc} {:sourceloc_num 80} true;
  $$agg.tmp24[9bv32] := v38;
  assert {:sourceloc} {:sourceloc_num 81} true;
  v39 := $$tex[10bv32];
  assert {:sourceloc} {:sourceloc_num 82} true;
  $$agg.tmp24[10bv32] := v39;
  assert {:sourceloc} {:sourceloc_num 83} true;
  v40 := $$tex[11bv32];
  assert {:sourceloc} {:sourceloc_num 84} true;
  $$agg.tmp24[11bv32] := v40;
  call {:sourceloc_num 85}   v41 := $_Z5tex2DIhET_7textureIS0_Li2EL19cudaTextureReadMode0EEff(MKPTR($arrayId$$agg.tmp24, 0bv32), SI32_TO_FP32($i.0), UI32_TO_FP32(group_id_x));
  v42 := FLT32(FMUL32(SI32_TO_FP32(BV8_ZEXT32(v41)), $fscale), 0bv32);
  goto $truebb2, $falsebb2;
$cond.true.32:
  assert {:block_sourceloc} {:sourceloc_num 86} true;
  $cond42 := 0bv32;
  goto $cond.end.41;
$cond.false.33:
  assert {:block_sourceloc} {:sourceloc_num 87} true;
  assert {:sourceloc} {:sourceloc_num 88} true;
  v43 := $$tex[0bv32];
  assert {:sourceloc} {:sourceloc_num 89} true;
  $$agg.tmp34[0bv32] := v43;
  assert {:sourceloc} {:sourceloc_num 90} true;
  v44 := $$tex[1bv32];
  assert {:sourceloc} {:sourceloc_num 91} true;
  $$agg.tmp34[1bv32] := v44;
  assert {:sourceloc} {:sourceloc_num 92} true;
  v45 := $$tex[2bv32];
  assert {:sourceloc} {:sourceloc_num 93} true;
  $$agg.tmp34[2bv32] := v45;
  assert {:sourceloc} {:sourceloc_num 94} true;
  v46 := $$tex[3bv32];
  assert {:sourceloc} {:sourceloc_num 95} true;
  $$agg.tmp34[3bv32] := v46;
  assert {:sourceloc} {:sourceloc_num 96} true;
  v47 := $$tex[4bv32];
  assert {:sourceloc} {:sourceloc_num 97} true;
  $$agg.tmp34[4bv32] := v47;
  assert {:sourceloc} {:sourceloc_num 98} true;
  v48 := $$tex[5bv32];
  assert {:sourceloc} {:sourceloc_num 99} true;
  $$agg.tmp34[5bv32] := v48;
  assert {:sourceloc} {:sourceloc_num 100} true;
  v49 := $$tex[6bv32];
  assert {:sourceloc} {:sourceloc_num 101} true;
  $$agg.tmp34[6bv32] := v49;
  assert {:sourceloc} {:sourceloc_num 102} true;
  v50 := $$tex[7bv32];
  assert {:sourceloc} {:sourceloc_num 103} true;
  $$agg.tmp34[7bv32] := v50;
  assert {:sourceloc} {:sourceloc_num 104} true;
  v51 := $$tex[8bv32];
  assert {:sourceloc} {:sourceloc_num 105} true;
  $$agg.tmp34[8bv32] := v51;
  assert {:sourceloc} {:sourceloc_num 106} true;
  v52 := $$tex[9bv32];
  assert {:sourceloc} {:sourceloc_num 107} true;
  $$agg.tmp34[9bv32] := v52;
  assert {:sourceloc} {:sourceloc_num 108} true;
  v53 := $$tex[10bv32];
  assert {:sourceloc} {:sourceloc_num 109} true;
  $$agg.tmp34[10bv32] := v53;
  assert {:sourceloc} {:sourceloc_num 110} true;
  v54 := $$tex[11bv32];
  assert {:sourceloc} {:sourceloc_num 111} true;
  $$agg.tmp34[11bv32] := v54;
  call {:sourceloc_num 112}   v55 := $_Z5tex2DIhET_7textureIS0_Li2EL19cudaTextureReadMode0EEff(MKPTR($arrayId$$agg.tmp34, 0bv32), SI32_TO_FP32($i.0), UI32_TO_FP32(group_id_x));
  $cond42 := FMUL32(SI32_TO_FP32(BV8_ZEXT32(v55)), $fscale);
  goto $cond.end.41;
$cond.end.41:
  assert {:block_sourceloc} {:sourceloc_num 113} true;
  $cond45 := $cond42;
  goto $cond.end.44;
$cond.false.43:
  assert {:block_sourceloc} {:sourceloc_num 114} true;
  $cond45 := 1132396544bv32;
  goto $cond.end.44;
$cond.end.44:
  assert {:block_sourceloc} {:sourceloc_num 115} true;
  assert {:sourceloc} {:sourceloc_num 116} true;
  $$pSobelOriginal[BV32_ADD(BV32_MUL(group_id_x, $Pitch), $i.0)] := FP32_TO_UI8($cond45);
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 117} true;
  $i.0 := BV32_ADD($i.0, group_size_x);
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 118} true;
  return;
$truebb:
  assume {:partition} v0;
  assert {:block_sourceloc} {:sourceloc_num 119} true;
  goto $for.body;
$falsebb:
  assume {:partition} !v0;
  assert {:block_sourceloc} {:sourceloc_num 120} true;
  goto $for.end;
$truebb0:
  assume {:partition} v14;
  assert {:block_sourceloc} {:sourceloc_num 121} true;
  goto $cond.true;
$falsebb0:
  assume {:partition} !v14;
  assert {:block_sourceloc} {:sourceloc_num 122} true;
  goto $cond.false;
$truebb1:
  assume {:partition} v28;
  assert {:block_sourceloc} {:sourceloc_num 123} true;
  goto $cond.true.23;
$falsebb1:
  assume {:partition} !v28;
  assert {:block_sourceloc} {:sourceloc_num 124} true;
  goto $cond.false.43;
$truebb2:
  assume {:partition} v42;
  assert {:block_sourceloc} {:sourceloc_num 125} true;
  goto $cond.true.32;
$falsebb2:
  assume {:partition} !v42;
  assert {:block_sourceloc} {:sourceloc_num 126} true;
  goto $cond.false.33;
}
procedure {:source_name "_Z5tex2DIhET_7textureIS0_Li2EL19cudaTextureReadMode0EEff"} $_Z5tex2DIhET_7textureIS0_Li2EL19cudaTextureReadMode0EEff($0:ptr, $1:bv32, $2:bv32) returns ($ret:bv8);
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 384bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 512bv32 then 1bv1 else 0bv1) != 0bv1;
