type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP8(x : [bv32]bv8, y : bv32) returns (z : bv8, A : [bv32]bv8);
procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "pSobelOriginal"} {:global} $$pSobelOriginal : [bv32]bv8;
axiom {:array_info "$$pSobelOriginal"} {:global} {:elem_width 8} {:source_name "pSobelOriginal"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$pSobelOriginal : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$pSobelOriginal : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$pSobelOriginal : bool;
const $arrayId$$pSobelOriginal : arrayId;
axiom $arrayId$$pSobelOriginal == 1bv4;

var {:source_name "agg.tmp"} $$agg.tmp : [bv32]bv8;
axiom {:array_info "$$agg.tmp"} {:elem_width 8} {:source_name "agg.tmp"} {:source_elem_width 96} {:source_dimensions "1"} true;
const $arrayId$$agg.tmp : arrayId;
axiom $arrayId$$agg.tmp == 2bv4;

var {:source_name "agg.tmp60"} $$agg.tmp60 : [bv32]bv8;
axiom {:array_info "$$agg.tmp60"} {:elem_width 8} {:source_name "agg.tmp60"} {:source_elem_width 96} {:source_dimensions "1"} true;
const $arrayId$$agg.tmp60 : arrayId;
axiom $arrayId$$agg.tmp60 == 3bv4;

var {:source_name "agg.tmp77"} $$agg.tmp77 : [bv32]bv8;
axiom {:array_info "$$agg.tmp77"} {:elem_width 8} {:source_name "agg.tmp77"} {:source_elem_width 96} {:source_dimensions "1"} true;
const $arrayId$$agg.tmp77 : arrayId;
axiom $arrayId$$agg.tmp77 == 4bv4;

var {:source_name "agg.tmp94"} $$agg.tmp94 : [bv32]bv8;
axiom {:array_info "$$agg.tmp94"} {:elem_width 8} {:source_name "agg.tmp94"} {:source_elem_width 96} {:source_dimensions "1"} true;
const $arrayId$$agg.tmp94 : arrayId;
axiom $arrayId$$agg.tmp94 == 5bv4;

var {:source_name "agg.tmp167"} $$agg.tmp167 : [bv32]bv8;
axiom {:array_info "$$agg.tmp167"} {:elem_width 8} {:source_name "agg.tmp167"} {:source_elem_width 96} {:source_dimensions "1"} true;
const $arrayId$$agg.tmp167 : arrayId;
axiom $arrayId$$agg.tmp167 == 6bv4;

var {:source_name "agg.tmp185"} $$agg.tmp185 : [bv32]bv8;
axiom {:array_info "$$agg.tmp185"} {:elem_width 8} {:source_name "agg.tmp185"} {:source_elem_width 96} {:source_dimensions "1"} true;
const $arrayId$$agg.tmp185 : arrayId;
axiom $arrayId$$agg.tmp185 == 7bv4;

var {:source_name "agg.tmp203"} $$agg.tmp203 : [bv32]bv8;
axiom {:array_info "$$agg.tmp203"} {:elem_width 8} {:source_name "agg.tmp203"} {:source_elem_width 96} {:source_dimensions "1"} true;
const $arrayId$$agg.tmp203 : arrayId;
axiom $arrayId$$agg.tmp203 == 8bv4;

var {:source_name "agg.tmp221"} $$agg.tmp221 : [bv32]bv8;
axiom {:array_info "$$agg.tmp221"} {:elem_width 8} {:source_name "agg.tmp221"} {:source_elem_width 96} {:source_dimensions "1"} true;
const $arrayId$$agg.tmp221 : arrayId;
axiom $arrayId$$agg.tmp221 == 9bv4;

var {:source_name "out"} $$out : [bv32]bv8;
axiom {:array_info "$$out"} {:elem_width 8} {:source_name "out"} {:source_elem_width 32} {:source_dimensions "1"} true;
const $arrayId$$out : arrayId;
axiom $arrayId$$out == 10bv4;

var {:source_name "blockFunction_table"} {:global} $$blockFunction_table : [bv32]functionPtr;
axiom {:array_info "$$blockFunction_table"} {:global} {:elem_width 32} {:source_name "blockFunction_table"} {:source_elem_width 32} {:source_dimensions "2"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$blockFunction_table : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$blockFunction_table : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$blockFunction_table : bool;
const $arrayId$$blockFunction_table : arrayId;
axiom $arrayId$$blockFunction_table == 11bv4;

var {:source_name "LocalBlock"} {:group_shared} $$LocalBlock : [bv32]bv8;
axiom {:array_info "$$LocalBlock"} {:group_shared} {:elem_width 8} {:source_name "LocalBlock"} {:source_elem_width 8} {:source_dimensions "0"} true;
var {:race_checking} {:group_shared} {:elem_width 8} {:source_elem_width 8} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$LocalBlock : bool;
var {:race_checking} {:group_shared} {:elem_width 8} {:source_elem_width 8} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$LocalBlock : bool;
var {:race_checking} {:group_shared} {:elem_width 8} {:source_elem_width 8} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$LocalBlock : bool;
const $arrayId$$LocalBlock : arrayId;
axiom $arrayId$$LocalBlock == 12bv4;

var {:source_name "tex"} {:global} $$tex : [bv32]bv8;
axiom {:array_info "$$tex"} {:global} {:elem_width 8} {:source_name "tex"} {:source_elem_width 96} {:source_dimensions "1"} true;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 96} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$tex : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 96} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$tex : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 96} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$tex : bool;
const $arrayId$$tex : arrayId;
axiom $arrayId$$tex == 13bv4;

var {:source_name "blockFunction"} {:global} $$blockFunction : [bv32]functionPtr;
axiom {:array_info "$$blockFunction"} {:global} {:elem_width 32} {:source_name "blockFunction"} {:source_elem_width 32} {:source_dimensions "1"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$blockFunction : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$blockFunction : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$blockFunction : bool;
const $arrayId$$blockFunction : arrayId;
axiom $arrayId$$blockFunction == 14bv4;

type ptr = bv32;
type arrayId = bv4;

function {:inline true} MKPTR(base: arrayId, offset: bv32) : ptr {
  base ++ offset[28:0]
}

function {:inline true} base#MKPTR(p: ptr) : arrayId {
  p[32:28]
}

function {:inline true} offset#MKPTR(p : ptr) : bv32 {
  0bv4++p[28:0]
}

const $arrayId$$null$ : arrayId;
axiom $arrayId$$null$ == 0bv4;

const _WATCHED_OFFSET : bv32;
type functionPtr = bv4;
const $functionId$$_Z12ComputeSobelhhhhhhhhhf : functionPtr;
axiom $functionId$$_Z12ComputeSobelhhhhhhhhhf == 1bv4;
const $functionId$$abs : functionPtr;
axiom $functionId$$abs == 2bv4;
const $functionId$$_Z10ComputeBoxhhhhhhhhhf : functionPtr;
axiom $functionId$$_Z10ComputeBoxhhhhhhhhhf == 3bv4;
const $functionId$$_Z9Thresholdhf : functionPtr;
axiom $functionId$$_Z9Thresholdhf == 4bv4;
const $functionId$$_Z11SobelSharedP6uchar4tssssfiPFhhfE : functionPtr;
axiom $functionId$$_Z11SobelSharedP6uchar4tssssfiPFhhfE == 5bv4;
const $functionId$$_Z5tex2DIhET_7textureIS0_Li2EL19cudaTextureReadMode0EEff : functionPtr;
axiom $functionId$$_Z5tex2DIhET_7textureIS0_Li2EL19cudaTextureReadMode0EEff == 6bv4;
const $functionId$$bugle_barrier : functionPtr;
axiom $functionId$$bugle_barrier == 7bv4;
const $functionId$$null$ : functionPtr;
axiom $functionId$$null$ == 0bv4;

const {:group_id_x} group_id_x : bv32;
const {:group_id_y} group_id_y : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:local_id_y} local_id_y : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FADD32(bv32, bv32) : bv32;
function FLT32(bv32, bv32) : bool;
function FMUL32(bv32, bv32) : bv32;
function FP32_TO_SI16(bv32) : bv16;
function SI16_TO_FP32(bv16) : bv32;
function SI32_TO_FP32(bv32) : bv32;
function UI32_TO_FP32(bv32) : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvand"} BV32_AND(bv32, bv32) : bv32;
function {:bvbuiltin "bvashr"} BV32_ASHR(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvor"} BV32_OR(bv32, bv32) : bv32;
function {:bvbuiltin "bvsdiv"} BV32_SDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvsgt"} BV32_SGT(bv32, bv32) : bool;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvult"} BV32_ULT(bv32, bv32) : bool;
function {:bvbuiltin "bvurem"} BV32_UREM(bv32, bv32) : bv32;
function {:bvbuiltin "sign_extend 16"} BV16_SEXT32(bv16) : bv32;
function {:bvbuiltin "zero_extend 16"} BV16_ZEXT32(bv16) : bv32;
function {:bvbuiltin "zero_extend 24"} BV8_ZEXT32(bv8) : bv32;
function {:bvbuiltin "zero_extend 31"} BV1_ZEXT32(bv1) : bv32;
procedure {:source_name "ComputeSobel"} $_Z12ComputeSobelhhhhhhhhhf($ul:bv8, $um:bv8, $ur:bv8, $ml:bv8, $mm:bv8, $mr:bv8, $ll:bv8, $lm:bv8, $lr:bv8, $fScale:bv32) returns ($ret:bv8)
{
  var $cond40:bv32;
  var $cond:bv32;
  var v0:bv32;
  var v1:bv32;
  var v3:bool;
  var v4:bool;
  var v2:bv16;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  call {:sourceloc_num 1}   v0 := $abs(SI32_TO_FP32(BV16_SEXT32(BV32_SUB(BV32_SUB(BV32_SUB(BV32_ADD(BV32_ADD(BV8_ZEXT32($ur), BV32_MUL(2bv32, BV8_ZEXT32($mr))), BV8_ZEXT32($lr)), BV8_ZEXT32($ul)), BV32_MUL(2bv32, BV8_ZEXT32($ml))), BV8_ZEXT32($ll))[16:0])));
  call {:sourceloc_num 2}   v1 := $abs(SI32_TO_FP32(BV16_SEXT32(BV32_SUB(BV32_SUB(BV32_SUB(BV32_ADD(BV32_ADD(BV8_ZEXT32($ul), BV32_MUL(2bv32, BV8_ZEXT32($um))), BV8_ZEXT32($ur)), BV8_ZEXT32($ll)), BV32_MUL(2bv32, BV8_ZEXT32($lm))), BV8_ZEXT32($lr))[16:0])));
  v2 := FP32_TO_SI16(FMUL32($fScale, FADD32(v0, v1)));
  v3 := BV32_SLT(BV16_SEXT32(v2), 0bv32);
  goto $truebb, $falsebb;
$cond.true:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  $cond40 := 0bv32;
  goto $cond.end.39;
$cond.false:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  v4 := BV32_SGT(BV16_SEXT32(v2), 255bv32);
  goto $truebb0, $falsebb0;
$cond.true.36:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  $cond := 255bv32;
  goto $cond.end;
$cond.false.37:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  $cond := BV16_SEXT32(v2);
  goto $cond.end;
$cond.end:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  $cond40 := $cond;
  goto $cond.end.39;
$cond.end.39:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  $ret := $cond40[8:0];
  return;
$truebb:
  assume {:partition} v3;
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  goto $cond.true;
$falsebb:
  assume {:partition} !v3;
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  goto $cond.false;
$truebb0:
  assume {:partition} v4;
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  goto $cond.true.36;
$falsebb0:
  assume {:partition} !v4;
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  goto $cond.false.37;
}
procedure {:source_name "abs"} $abs($0:bv32) returns ($ret:bv32);
procedure {:source_name "ComputeBox"} $_Z10ComputeBoxhhhhhhhhhf($ul:bv8, $um:bv8, $ur:bv8, $ml:bv8, $mm:bv8, $mr:bv8, $ll:bv8, $lm:bv8, $lr:bv8, $fscale:bv32) returns ($ret:bv8)
{
  var $cond28:bv32;
  var $cond:bv32;
  var v0:bv16;
  var v1:bool;
  var v2:bool;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  v0 := FP32_TO_SI16(FMUL32(SI16_TO_FP32(BV32_SDIV(BV16_SEXT32(BV32_ADD(BV32_ADD(BV32_ADD(BV32_ADD(BV32_ADD(BV32_ADD(BV32_ADD(BV32_ADD(BV8_ZEXT32($ul), BV8_ZEXT32($um)), BV8_ZEXT32($ur)), BV8_ZEXT32($ml)), BV8_ZEXT32($mm)), BV8_ZEXT32($mr)), BV8_ZEXT32($ll)), BV8_ZEXT32($lm)), BV8_ZEXT32($lr))[16:0]), 9bv32)[16:0]), $fscale));
  v1 := BV32_SLT(BV16_SEXT32(v0), 0bv32);
  goto $truebb, $falsebb;
$cond.true:
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  $cond28 := 0bv32;
  goto $cond.end.27;
$cond.false:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  v2 := BV32_SGT(BV16_SEXT32(v0), 255bv32);
  goto $truebb0, $falsebb0;
$cond.true.24:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  $cond := 255bv32;
  goto $cond.end;
$cond.false.25:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  $cond := BV16_SEXT32(v0);
  goto $cond.end;
$cond.end:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  $cond28 := $cond;
  goto $cond.end.27;
$cond.end.27:
  assert {:block_sourceloc} {:sourceloc_num 19} true;
  $ret := $cond28[8:0];
  return;
$truebb:
  assume {:partition} v1;
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  goto $cond.true;
$falsebb:
  assume {:partition} !v1;
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  goto $cond.false;
$truebb0:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  goto $cond.true.24;
$falsebb0:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  goto $cond.false.25;
}
procedure {:source_name "Threshold"} $_Z9Thresholdhf($in:bv8, $thresh:bv32) returns ($ret:bv8)
{
  var $retval.0:bv8;
  var v0:bool;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  v0 := FLT32($thresh, SI32_TO_FP32(BV8_ZEXT32($in)));
  goto $truebb, $falsebb;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  $retval.0 := 255bv8;
  goto $return;
$if.else:
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  $retval.0 := 0bv8;
  goto $return;
$return:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  $ret := $retval.0;
  return;
$truebb:
  assume {:partition} v0;
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  goto $if.then;
$falsebb:
  assume {:partition} !v0;
  assert {:block_sourceloc} {:sourceloc_num 29} true;
  goto $if.else;
}
procedure {:source_name "SobelShared"} {:kernel} $_Z11SobelSharedP6uchar4tssssfiPFhhfE($SobelPitch:bv16, $BlockWidth:bv16, $SharedPitch:bv16, $w:bv16, $h:bv16, $fScale:bv32, $blockOperation:bv32, $pPointFunction:functionPtr)
requires {:sourceloc_num 30} (if BV16_ZEXT32($SobelPitch) == 512bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 31} (if BV16_SEXT32($w) == 512bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 32} (if BV16_SEXT32($BlockWidth) == 80bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 33} (if BV16_SEXT32($SharedPitch) == 384bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 34} (if BV32_OR(BV1_ZEXT32((if $blockOperation == 0bv32 then 1bv1 else 0bv1)), BV1_ZEXT32((if $blockOperation == 1bv32 then 1bv1 else 0bv1))) != 0bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 35} (if $$blockFunction_table[0bv32] == $functionId$$_Z12ComputeSobelhhhhhhhhhf then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 36} (if $$blockFunction_table[1bv32] == $functionId$$_Z10ComputeBoxhhhhhhhhhf then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 37} (if BV32_OR(BV1_ZEXT32((if $pPointFunction == $functionId$$_Z9Thresholdhf then 1bv1 else 0bv1)), BV1_ZEXT32((if $pPointFunction == $functionId$$null$ then 1bv1 else 0bv1))) != 0bv32 then 1bv1 else 0bv1) != 0bv1;
{
  var $ib.0:bv16;
  var $ib.1:bv16;
  var $ib.2:bv16;
  var v10:bv8;
  var v9:bv8;
  var v12:bv8;
  var v14:bv8;
  var v6:bv8;
  var v7:bv8;
  var v11:bv8;
  var v5:bv8;
  var v13:bv8;
  var v8:bv8;
  var v22:bv8;
  var v24:bv8;
  var v21:bv8;
  var v25:bv8;
  var v23:bv8;
  var v16:bv8;
  var v18:bv8;
  var v19:bv8;
  var v20:bv8;
  var v15:bv8;
  var v17:bv8;
  var v36:bv8;
  var v29:bv8;
  var v31:bv8;
  var v26:bv8;
  var v27:bv8;
  var v30:bv8;
  var v34:bv8;
  var v32:bv8;
  var v35:bv8;
  var v28:bv8;
  var v33:bv8;
  var v4:bv8;
  var v0:bv16;
  var v1:bv16;
  var v2:bv32;
  var v3:bool;
  var v56:bool;
  var v57:bv32;
  var v74:bv8;
  var v77:bv8;
  var v75:bv8;
  var v81:bv8;
  var v73:bv8;
  var v78:bv8;
  var v83:bv8;
  var v76:bv8;
  var v79:bv8;
  var v80:bv8;
  var v82:bv8;
  var v84:bv8;
  var v85:bv8;
  var v86:bv8;
  var v89:bv8;
  var v90:bv8;
  var v92:bv8;
  var v88:bv8;
  var v87:bv8;
  var v93:bv8;
  var v91:bv8;
  var v94:bv8;
  var v43:bv8;
  var v45:bv8;
  var v46:bv8;
  var v47:bv8;
  var v40:bv8;
  var v37:bv8;
  var v42:bv8;
  var v41:bv8;
  var v38:bv8;
  var v39:bv8;
  var v44:bv8;
  var v48:bv8;
  var v53:bv8;
  var v49:bv8;
  var v50:bv8;
  var v54:bv8;
  var v55:bv8;
  var v51:bv8;
  var v52:bv8;
  var v63:bv8;
  var v67:bv8;
  var v60:bv8;
  var v59:bv8;
  var v69:bv8;
  var v64:bv8;
  var v65:bv8;
  var v66:bv8;
  var v68:bv8;
  var v61:bv8;
  var v62:bv8;
  var v71:bv8;
  var v70:bv8;
  var v72:bv8;
  var v58:bool;
  var v154:bv8;
  var v155:bv8;
  var v153:bv8;
  var v105:bv8;
  var v99:bv8;
  var v95:bv8;
  var v96:bv8;
  var v98:bv8;
  var v97:bv8;
  var v100:bv8;
  var v102:bv8;
  var v101:bv8;
  var v104:bv8;
  var v103:bv8;
  var v106:bv8;
  var v116:bv8;
  var v109:bv8;
  var v108:bv8;
  var v113:functionPtr;
  var v107:bv8;
  var v110:bv8;
  var v117:bv8;
  var v125:bv8;
  var v129:functionPtr;
  var v124:functionPtr;
  var v126:bv8;
  var v127:bv8;
  var v130:bv8;
  var v131:bv8;
  var v132:bv8;
  var v133:bv8;
  var v134:functionPtr;
  var v118:bv8;
  var v122:bv8;
  var v123:bv8;
  var v128:bv8;
  var v120:bv8;
  var v115:bv8;
  var v121:bv8;
  var v119:bv8;
  var v144:bv8;
  var v145:bv8;
  var v138:bv8;
  var v142:bv8;
  var v135:bv8;
  var v139:functionPtr;
  var v143:bv8;
  var v137:bv8;
  var v136:bv8;
  var v140:bv8;
  var v148:bv8;
  var v149:bv8;
  var v152:bv8;
  var v146:bv8;
  var v147:bv8;
  var v111:bv16;
  var v112:bv32;
  var v114:bool;
  var v151:bool;
  var v150:bool;
  var v141:bool;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  v0 := BV32_MUL(BV32_MUL(4bv32, group_id_x), BV16_SEXT32($BlockWidth))[16:0];
  v1 := BV32_ADD(BV32_MUL(group_id_y, group_size_y), local_id_y)[16:0];
  v2 := BV32_MUL(local_id_y, BV16_SEXT32($SharedPitch));
  $ib.0 := local_id_x[16:0];
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 40} (if BV32_UREM(BV16_SEXT32($ib.0), group_size_x) == local_id_x then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 41} (if (_WRITE_HAS_OCCURRED_$$LocalBlock ==> BV32_ULT(BV32_UDIV(BV32_SUB(_WATCHED_OFFSET, v2), 4bv32), BV32_ADD(BV16_SEXT32($BlockWidth), 2bv32))) then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 42} (if (_WRITE_HAS_OCCURRED_$$LocalBlock ==> BV32_UREM(BV32_UDIV(BV32_SUB(_WATCHED_OFFSET, v2), 4bv32), group_size_x) == local_id_x) then 1bv1 else 0bv1) != 0bv1;
  v3 := BV32_SLT(BV16_SEXT32($ib.0), BV32_ADD(BV16_SEXT32($BlockWidth), 2bv32));
  goto $truebb, $falsebb;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 43} true;
  assert {:sourceloc} {:sourceloc_num 44} true;
  v4 := $$tex[0bv32];
  assert {:sourceloc} {:sourceloc_num 45} true;
  $$agg.tmp[0bv32] := v4;
  assert {:sourceloc} {:sourceloc_num 46} true;
  v5 := $$tex[1bv32];
  assert {:sourceloc} {:sourceloc_num 47} true;
  $$agg.tmp[1bv32] := v5;
  assert {:sourceloc} {:sourceloc_num 48} true;
  v6 := $$tex[2bv32];
  assert {:sourceloc} {:sourceloc_num 49} true;
  $$agg.tmp[2bv32] := v6;
  assert {:sourceloc} {:sourceloc_num 50} true;
  v7 := $$tex[3bv32];
  assert {:sourceloc} {:sourceloc_num 51} true;
  $$agg.tmp[3bv32] := v7;
  assert {:sourceloc} {:sourceloc_num 52} true;
  v8 := $$tex[4bv32];
  assert {:sourceloc} {:sourceloc_num 53} true;
  $$agg.tmp[4bv32] := v8;
  assert {:sourceloc} {:sourceloc_num 54} true;
  v9 := $$tex[5bv32];
  assert {:sourceloc} {:sourceloc_num 55} true;
  $$agg.tmp[5bv32] := v9;
  assert {:sourceloc} {:sourceloc_num 56} true;
  v10 := $$tex[6bv32];
  assert {:sourceloc} {:sourceloc_num 57} true;
  $$agg.tmp[6bv32] := v10;
  assert {:sourceloc} {:sourceloc_num 58} true;
  v11 := $$tex[7bv32];
  assert {:sourceloc} {:sourceloc_num 59} true;
  $$agg.tmp[7bv32] := v11;
  assert {:sourceloc} {:sourceloc_num 60} true;
  v12 := $$tex[8bv32];
  assert {:sourceloc} {:sourceloc_num 61} true;
  $$agg.tmp[8bv32] := v12;
  assert {:sourceloc} {:sourceloc_num 62} true;
  v13 := $$tex[9bv32];
  assert {:sourceloc} {:sourceloc_num 63} true;
  $$agg.tmp[9bv32] := v13;
  assert {:sourceloc} {:sourceloc_num 64} true;
  v14 := $$tex[10bv32];
  assert {:sourceloc} {:sourceloc_num 65} true;
  $$agg.tmp[10bv32] := v14;
  assert {:sourceloc} {:sourceloc_num 66} true;
  v15 := $$tex[11bv32];
  assert {:sourceloc} {:sourceloc_num 67} true;
  $$agg.tmp[11bv32] := v15;
  call {:sourceloc_num 68}   v16 := $_Z5tex2DIhET_7textureIS0_Li2EL19cudaTextureReadMode0EEff(MKPTR($arrayId$$agg.tmp, 0bv32), SI32_TO_FP32(BV32_SUB(BV32_ADD(BV16_SEXT32(v0), BV32_MUL(4bv32, BV16_SEXT32($ib.0))), 1bv32)), SI32_TO_FP32(BV32_SUB(BV16_SEXT32(v1), 1bv32)));
  assert {:sourceloc} {:sourceloc_num 69} true;
  $$LocalBlock[BV32_ADD(v2, BV32_MUL(4bv32, BV16_SEXT32($ib.0)))] := v16;
  assert {:sourceloc} {:sourceloc_num 70} true;
  v17 := $$tex[0bv32];
  assert {:sourceloc} {:sourceloc_num 71} true;
  $$agg.tmp60[0bv32] := v17;
  assert {:sourceloc} {:sourceloc_num 72} true;
  v18 := $$tex[1bv32];
  assert {:sourceloc} {:sourceloc_num 73} true;
  $$agg.tmp60[1bv32] := v18;
  assert {:sourceloc} {:sourceloc_num 74} true;
  v19 := $$tex[2bv32];
  assert {:sourceloc} {:sourceloc_num 75} true;
  $$agg.tmp60[2bv32] := v19;
  assert {:sourceloc} {:sourceloc_num 76} true;
  v20 := $$tex[3bv32];
  assert {:sourceloc} {:sourceloc_num 77} true;
  $$agg.tmp60[3bv32] := v20;
  assert {:sourceloc} {:sourceloc_num 78} true;
  v21 := $$tex[4bv32];
  assert {:sourceloc} {:sourceloc_num 79} true;
  $$agg.tmp60[4bv32] := v21;
  assert {:sourceloc} {:sourceloc_num 80} true;
  v22 := $$tex[5bv32];
  assert {:sourceloc} {:sourceloc_num 81} true;
  $$agg.tmp60[5bv32] := v22;
  assert {:sourceloc} {:sourceloc_num 82} true;
  v23 := $$tex[6bv32];
  assert {:sourceloc} {:sourceloc_num 83} true;
  $$agg.tmp60[6bv32] := v23;
  assert {:sourceloc} {:sourceloc_num 84} true;
  v24 := $$tex[7bv32];
  assert {:sourceloc} {:sourceloc_num 85} true;
  $$agg.tmp60[7bv32] := v24;
  assert {:sourceloc} {:sourceloc_num 86} true;
  v25 := $$tex[8bv32];
  assert {:sourceloc} {:sourceloc_num 87} true;
  $$agg.tmp60[8bv32] := v25;
  assert {:sourceloc} {:sourceloc_num 88} true;
  v26 := $$tex[9bv32];
  assert {:sourceloc} {:sourceloc_num 89} true;
  $$agg.tmp60[9bv32] := v26;
  assert {:sourceloc} {:sourceloc_num 90} true;
  v27 := $$tex[10bv32];
  assert {:sourceloc} {:sourceloc_num 91} true;
  $$agg.tmp60[10bv32] := v27;
  assert {:sourceloc} {:sourceloc_num 92} true;
  v28 := $$tex[11bv32];
  assert {:sourceloc} {:sourceloc_num 93} true;
  $$agg.tmp60[11bv32] := v28;
  call {:sourceloc_num 94}   v29 := $_Z5tex2DIhET_7textureIS0_Li2EL19cudaTextureReadMode0EEff(MKPTR($arrayId$$agg.tmp60, 0bv32), SI32_TO_FP32(BV32_ADD(BV32_SUB(BV32_ADD(BV16_SEXT32(v0), BV32_MUL(4bv32, BV16_SEXT32($ib.0))), 1bv32), 1bv32)), SI32_TO_FP32(BV32_SUB(BV16_SEXT32(v1), 1bv32)));
  assert {:sourceloc} {:sourceloc_num 95} true;
  $$LocalBlock[BV32_ADD(BV32_ADD(v2, BV32_MUL(4bv32, BV16_SEXT32($ib.0))), 1bv32)] := v29;
  assert {:sourceloc} {:sourceloc_num 96} true;
  v30 := $$tex[0bv32];
  assert {:sourceloc} {:sourceloc_num 97} true;
  $$agg.tmp77[0bv32] := v30;
  assert {:sourceloc} {:sourceloc_num 98} true;
  v31 := $$tex[1bv32];
  assert {:sourceloc} {:sourceloc_num 99} true;
  $$agg.tmp77[1bv32] := v31;
  assert {:sourceloc} {:sourceloc_num 100} true;
  v32 := $$tex[2bv32];
  assert {:sourceloc} {:sourceloc_num 101} true;
  $$agg.tmp77[2bv32] := v32;
  assert {:sourceloc} {:sourceloc_num 102} true;
  v33 := $$tex[3bv32];
  assert {:sourceloc} {:sourceloc_num 103} true;
  $$agg.tmp77[3bv32] := v33;
  assert {:sourceloc} {:sourceloc_num 104} true;
  v34 := $$tex[4bv32];
  assert {:sourceloc} {:sourceloc_num 105} true;
  $$agg.tmp77[4bv32] := v34;
  assert {:sourceloc} {:sourceloc_num 106} true;
  v35 := $$tex[5bv32];
  assert {:sourceloc} {:sourceloc_num 107} true;
  $$agg.tmp77[5bv32] := v35;
  assert {:sourceloc} {:sourceloc_num 108} true;
  v36 := $$tex[6bv32];
  assert {:sourceloc} {:sourceloc_num 109} true;
  $$agg.tmp77[6bv32] := v36;
  assert {:sourceloc} {:sourceloc_num 110} true;
  v37 := $$tex[7bv32];
  assert {:sourceloc} {:sourceloc_num 111} true;
  $$agg.tmp77[7bv32] := v37;
  assert {:sourceloc} {:sourceloc_num 112} true;
  v38 := $$tex[8bv32];
  assert {:sourceloc} {:sourceloc_num 113} true;
  $$agg.tmp77[8bv32] := v38;
  assert {:sourceloc} {:sourceloc_num 114} true;
  v39 := $$tex[9bv32];
  assert {:sourceloc} {:sourceloc_num 115} true;
  $$agg.tmp77[9bv32] := v39;
  assert {:sourceloc} {:sourceloc_num 116} true;
  v40 := $$tex[10bv32];
  assert {:sourceloc} {:sourceloc_num 117} true;
  $$agg.tmp77[10bv32] := v40;
  assert {:sourceloc} {:sourceloc_num 118} true;
  v41 := $$tex[11bv32];
  assert {:sourceloc} {:sourceloc_num 119} true;
  $$agg.tmp77[11bv32] := v41;
  call {:sourceloc_num 120}   v42 := $_Z5tex2DIhET_7textureIS0_Li2EL19cudaTextureReadMode0EEff(MKPTR($arrayId$$agg.tmp77, 0bv32), SI32_TO_FP32(BV32_ADD(BV32_SUB(BV32_ADD(BV16_SEXT32(v0), BV32_MUL(4bv32, BV16_SEXT32($ib.0))), 1bv32), 2bv32)), SI32_TO_FP32(BV32_SUB(BV16_SEXT32(v1), 1bv32)));
  assert {:sourceloc} {:sourceloc_num 121} true;
  $$LocalBlock[BV32_ADD(BV32_ADD(v2, BV32_MUL(4bv32, BV16_SEXT32($ib.0))), 2bv32)] := v42;
  assert {:sourceloc} {:sourceloc_num 122} true;
  v43 := $$tex[0bv32];
  assert {:sourceloc} {:sourceloc_num 123} true;
  $$agg.tmp94[0bv32] := v43;
  assert {:sourceloc} {:sourceloc_num 124} true;
  v44 := $$tex[1bv32];
  assert {:sourceloc} {:sourceloc_num 125} true;
  $$agg.tmp94[1bv32] := v44;
  assert {:sourceloc} {:sourceloc_num 126} true;
  v45 := $$tex[2bv32];
  assert {:sourceloc} {:sourceloc_num 127} true;
  $$agg.tmp94[2bv32] := v45;
  assert {:sourceloc} {:sourceloc_num 128} true;
  v46 := $$tex[3bv32];
  assert {:sourceloc} {:sourceloc_num 129} true;
  $$agg.tmp94[3bv32] := v46;
  assert {:sourceloc} {:sourceloc_num 130} true;
  v47 := $$tex[4bv32];
  assert {:sourceloc} {:sourceloc_num 131} true;
  $$agg.tmp94[4bv32] := v47;
  assert {:sourceloc} {:sourceloc_num 132} true;
  v48 := $$tex[5bv32];
  assert {:sourceloc} {:sourceloc_num 133} true;
  $$agg.tmp94[5bv32] := v48;
  assert {:sourceloc} {:sourceloc_num 134} true;
  v49 := $$tex[6bv32];
  assert {:sourceloc} {:sourceloc_num 135} true;
  $$agg.tmp94[6bv32] := v49;
  assert {:sourceloc} {:sourceloc_num 136} true;
  v50 := $$tex[7bv32];
  assert {:sourceloc} {:sourceloc_num 137} true;
  $$agg.tmp94[7bv32] := v50;
  assert {:sourceloc} {:sourceloc_num 138} true;
  v51 := $$tex[8bv32];
  assert {:sourceloc} {:sourceloc_num 139} true;
  $$agg.tmp94[8bv32] := v51;
  assert {:sourceloc} {:sourceloc_num 140} true;
  v52 := $$tex[9bv32];
  assert {:sourceloc} {:sourceloc_num 141} true;
  $$agg.tmp94[9bv32] := v52;
  assert {:sourceloc} {:sourceloc_num 142} true;
  v53 := $$tex[10bv32];
  assert {:sourceloc} {:sourceloc_num 143} true;
  $$agg.tmp94[10bv32] := v53;
  assert {:sourceloc} {:sourceloc_num 144} true;
  v54 := $$tex[11bv32];
  assert {:sourceloc} {:sourceloc_num 145} true;
  $$agg.tmp94[11bv32] := v54;
  call {:sourceloc_num 146}   v55 := $_Z5tex2DIhET_7textureIS0_Li2EL19cudaTextureReadMode0EEff(MKPTR($arrayId$$agg.tmp94, 0bv32), SI32_TO_FP32(BV32_ADD(BV32_SUB(BV32_ADD(BV16_SEXT32(v0), BV32_MUL(4bv32, BV16_SEXT32($ib.0))), 1bv32), 3bv32)), SI32_TO_FP32(BV32_SUB(BV16_SEXT32(v1), 1bv32)));
  assert {:sourceloc} {:sourceloc_num 147} true;
  $$LocalBlock[BV32_ADD(BV32_ADD(v2, BV32_MUL(4bv32, BV16_SEXT32($ib.0))), 3bv32)] := v55;
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 148} true;
  $ib.0 := BV32_ADD(BV16_SEXT32($ib.0), group_size_x)[16:0];
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 149} true;
  v56 := BV32_ULT(local_id_y, 2bv32);
  goto $truebb0, $falsebb0;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 150} true;
  v57 := BV32_MUL(BV32_ADD(group_size_y, local_id_y), BV16_SEXT32($SharedPitch));
  $ib.1 := local_id_x[16:0];
  goto $for.cond.119;
$for.cond.119:
  assert {:block_sourceloc} {:sourceloc_num 151} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 152} (if (BV32_ULT(local_id_y, 2bv32) ==> BV32_UREM(BV16_SEXT32($ib.1), group_size_x) == local_id_x) then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 153} (if (BV32_ULT(local_id_y, 2bv32) ==> (_WRITE_HAS_OCCURRED_$$LocalBlock ==> BV32_OR(BV32_AND(BV1_ZEXT32((if BV32_ULT(BV32_UDIV(BV32_SUB(_WATCHED_OFFSET, v57), 4bv32), BV32_ADD(BV16_SEXT32($BlockWidth), 2bv32)) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_UREM(BV32_UDIV(BV32_SUB(_WATCHED_OFFSET, v57), 4bv32), group_size_x) == local_id_x then 1bv1 else 0bv1))), BV32_AND(BV1_ZEXT32((if BV32_ULT(BV32_UDIV(BV32_SUB(_WATCHED_OFFSET, BV32_MUL(local_id_y, BV16_SEXT32($SharedPitch))), 4bv32), BV32_ADD(BV16_SEXT32($BlockWidth), 2bv32)) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_UREM(BV32_UDIV(BV32_SUB(_WATCHED_OFFSET, BV32_MUL(local_id_y, BV16_SEXT32($SharedPitch))), 4bv32), group_size_x) == local_id_x then 1bv1 else 0bv1)))) != 0bv32)) then 1bv1 else 0bv1) != 0bv1;
  v58 := BV32_SLT(BV16_SEXT32($ib.1), BV32_ADD(BV16_SEXT32($BlockWidth), 2bv32));
  goto $truebb1, $falsebb1;
$for.body.166:
  assert {:block_sourceloc} {:sourceloc_num 154} true;
  assert {:sourceloc} {:sourceloc_num 155} true;
  v59 := $$tex[0bv32];
  assert {:sourceloc} {:sourceloc_num 156} true;
  $$agg.tmp167[0bv32] := v59;
  assert {:sourceloc} {:sourceloc_num 157} true;
  v60 := $$tex[1bv32];
  assert {:sourceloc} {:sourceloc_num 158} true;
  $$agg.tmp167[1bv32] := v60;
  assert {:sourceloc} {:sourceloc_num 159} true;
  v61 := $$tex[2bv32];
  assert {:sourceloc} {:sourceloc_num 160} true;
  $$agg.tmp167[2bv32] := v61;
  assert {:sourceloc} {:sourceloc_num 161} true;
  v62 := $$tex[3bv32];
  assert {:sourceloc} {:sourceloc_num 162} true;
  $$agg.tmp167[3bv32] := v62;
  assert {:sourceloc} {:sourceloc_num 163} true;
  v63 := $$tex[4bv32];
  assert {:sourceloc} {:sourceloc_num 164} true;
  $$agg.tmp167[4bv32] := v63;
  assert {:sourceloc} {:sourceloc_num 165} true;
  v64 := $$tex[5bv32];
  assert {:sourceloc} {:sourceloc_num 166} true;
  $$agg.tmp167[5bv32] := v64;
  assert {:sourceloc} {:sourceloc_num 167} true;
  v65 := $$tex[6bv32];
  assert {:sourceloc} {:sourceloc_num 168} true;
  $$agg.tmp167[6bv32] := v65;
  assert {:sourceloc} {:sourceloc_num 169} true;
  v66 := $$tex[7bv32];
  assert {:sourceloc} {:sourceloc_num 170} true;
  $$agg.tmp167[7bv32] := v66;
  assert {:sourceloc} {:sourceloc_num 171} true;
  v67 := $$tex[8bv32];
  assert {:sourceloc} {:sourceloc_num 172} true;
  $$agg.tmp167[8bv32] := v67;
  assert {:sourceloc} {:sourceloc_num 173} true;
  v68 := $$tex[9bv32];
  assert {:sourceloc} {:sourceloc_num 174} true;
  $$agg.tmp167[9bv32] := v68;
  assert {:sourceloc} {:sourceloc_num 175} true;
  v69 := $$tex[10bv32];
  assert {:sourceloc} {:sourceloc_num 176} true;
  $$agg.tmp167[10bv32] := v69;
  assert {:sourceloc} {:sourceloc_num 177} true;
  v70 := $$tex[11bv32];
  assert {:sourceloc} {:sourceloc_num 178} true;
  $$agg.tmp167[11bv32] := v70;
  call {:sourceloc_num 179}   v71 := $_Z5tex2DIhET_7textureIS0_Li2EL19cudaTextureReadMode0EEff(MKPTR($arrayId$$agg.tmp167, 0bv32), SI32_TO_FP32(BV32_SUB(BV32_ADD(BV16_SEXT32(v0), BV32_MUL(4bv32, BV16_SEXT32($ib.1))), 1bv32)), UI32_TO_FP32(BV32_SUB(BV32_ADD(BV16_SEXT32(v1), group_size_y), 1bv32)));
  assert {:sourceloc} {:sourceloc_num 180} true;
  $$LocalBlock[BV32_ADD(v57, BV32_MUL(4bv32, BV16_SEXT32($ib.1)))] := v71;
  assert {:sourceloc} {:sourceloc_num 181} true;
  v72 := $$tex[0bv32];
  assert {:sourceloc} {:sourceloc_num 182} true;
  $$agg.tmp185[0bv32] := v72;
  assert {:sourceloc} {:sourceloc_num 183} true;
  v73 := $$tex[1bv32];
  assert {:sourceloc} {:sourceloc_num 184} true;
  $$agg.tmp185[1bv32] := v73;
  assert {:sourceloc} {:sourceloc_num 185} true;
  v74 := $$tex[2bv32];
  assert {:sourceloc} {:sourceloc_num 186} true;
  $$agg.tmp185[2bv32] := v74;
  assert {:sourceloc} {:sourceloc_num 187} true;
  v75 := $$tex[3bv32];
  assert {:sourceloc} {:sourceloc_num 188} true;
  $$agg.tmp185[3bv32] := v75;
  assert {:sourceloc} {:sourceloc_num 189} true;
  v76 := $$tex[4bv32];
  assert {:sourceloc} {:sourceloc_num 190} true;
  $$agg.tmp185[4bv32] := v76;
  assert {:sourceloc} {:sourceloc_num 191} true;
  v77 := $$tex[5bv32];
  assert {:sourceloc} {:sourceloc_num 192} true;
  $$agg.tmp185[5bv32] := v77;
  assert {:sourceloc} {:sourceloc_num 193} true;
  v78 := $$tex[6bv32];
  assert {:sourceloc} {:sourceloc_num 194} true;
  $$agg.tmp185[6bv32] := v78;
  assert {:sourceloc} {:sourceloc_num 195} true;
  v79 := $$tex[7bv32];
  assert {:sourceloc} {:sourceloc_num 196} true;
  $$agg.tmp185[7bv32] := v79;
  assert {:sourceloc} {:sourceloc_num 197} true;
  v80 := $$tex[8bv32];
  assert {:sourceloc} {:sourceloc_num 198} true;
  $$agg.tmp185[8bv32] := v80;
  assert {:sourceloc} {:sourceloc_num 199} true;
  v81 := $$tex[9bv32];
  assert {:sourceloc} {:sourceloc_num 200} true;
  $$agg.tmp185[9bv32] := v81;
  assert {:sourceloc} {:sourceloc_num 201} true;
  v82 := $$tex[10bv32];
  assert {:sourceloc} {:sourceloc_num 202} true;
  $$agg.tmp185[10bv32] := v82;
  assert {:sourceloc} {:sourceloc_num 203} true;
  v83 := $$tex[11bv32];
  assert {:sourceloc} {:sourceloc_num 204} true;
  $$agg.tmp185[11bv32] := v83;
  call {:sourceloc_num 205}   v84 := $_Z5tex2DIhET_7textureIS0_Li2EL19cudaTextureReadMode0EEff(MKPTR($arrayId$$agg.tmp185, 0bv32), SI32_TO_FP32(BV32_ADD(BV32_SUB(BV32_ADD(BV16_SEXT32(v0), BV32_MUL(4bv32, BV16_SEXT32($ib.1))), 1bv32), 1bv32)), UI32_TO_FP32(BV32_SUB(BV32_ADD(BV16_SEXT32(v1), group_size_y), 1bv32)));
  assert {:sourceloc} {:sourceloc_num 206} true;
  $$LocalBlock[BV32_ADD(BV32_ADD(v57, BV32_MUL(4bv32, BV16_SEXT32($ib.1))), 1bv32)] := v84;
  assert {:sourceloc} {:sourceloc_num 207} true;
  v85 := $$tex[0bv32];
  assert {:sourceloc} {:sourceloc_num 208} true;
  $$agg.tmp203[0bv32] := v85;
  assert {:sourceloc} {:sourceloc_num 209} true;
  v86 := $$tex[1bv32];
  assert {:sourceloc} {:sourceloc_num 210} true;
  $$agg.tmp203[1bv32] := v86;
  assert {:sourceloc} {:sourceloc_num 211} true;
  v87 := $$tex[2bv32];
  assert {:sourceloc} {:sourceloc_num 212} true;
  $$agg.tmp203[2bv32] := v87;
  assert {:sourceloc} {:sourceloc_num 213} true;
  v88 := $$tex[3bv32];
  assert {:sourceloc} {:sourceloc_num 214} true;
  $$agg.tmp203[3bv32] := v88;
  assert {:sourceloc} {:sourceloc_num 215} true;
  v89 := $$tex[4bv32];
  assert {:sourceloc} {:sourceloc_num 216} true;
  $$agg.tmp203[4bv32] := v89;
  assert {:sourceloc} {:sourceloc_num 217} true;
  v90 := $$tex[5bv32];
  assert {:sourceloc} {:sourceloc_num 218} true;
  $$agg.tmp203[5bv32] := v90;
  assert {:sourceloc} {:sourceloc_num 219} true;
  v91 := $$tex[6bv32];
  assert {:sourceloc} {:sourceloc_num 220} true;
  $$agg.tmp203[6bv32] := v91;
  assert {:sourceloc} {:sourceloc_num 221} true;
  v92 := $$tex[7bv32];
  assert {:sourceloc} {:sourceloc_num 222} true;
  $$agg.tmp203[7bv32] := v92;
  assert {:sourceloc} {:sourceloc_num 223} true;
  v93 := $$tex[8bv32];
  assert {:sourceloc} {:sourceloc_num 224} true;
  $$agg.tmp203[8bv32] := v93;
  assert {:sourceloc} {:sourceloc_num 225} true;
  v94 := $$tex[9bv32];
  assert {:sourceloc} {:sourceloc_num 226} true;
  $$agg.tmp203[9bv32] := v94;
  assert {:sourceloc} {:sourceloc_num 227} true;
  v95 := $$tex[10bv32];
  assert {:sourceloc} {:sourceloc_num 228} true;
  $$agg.tmp203[10bv32] := v95;
  assert {:sourceloc} {:sourceloc_num 229} true;
  v96 := $$tex[11bv32];
  assert {:sourceloc} {:sourceloc_num 230} true;
  $$agg.tmp203[11bv32] := v96;
  call {:sourceloc_num 231}   v97 := $_Z5tex2DIhET_7textureIS0_Li2EL19cudaTextureReadMode0EEff(MKPTR($arrayId$$agg.tmp203, 0bv32), SI32_TO_FP32(BV32_ADD(BV32_SUB(BV32_ADD(BV16_SEXT32(v0), BV32_MUL(4bv32, BV16_SEXT32($ib.1))), 1bv32), 2bv32)), UI32_TO_FP32(BV32_SUB(BV32_ADD(BV16_SEXT32(v1), group_size_y), 1bv32)));
  assert {:sourceloc} {:sourceloc_num 232} true;
  $$LocalBlock[BV32_ADD(BV32_ADD(v57, BV32_MUL(4bv32, BV16_SEXT32($ib.1))), 2bv32)] := v97;
  assert {:sourceloc} {:sourceloc_num 233} true;
  v98 := $$tex[0bv32];
  assert {:sourceloc} {:sourceloc_num 234} true;
  $$agg.tmp221[0bv32] := v98;
  assert {:sourceloc} {:sourceloc_num 235} true;
  v99 := $$tex[1bv32];
  assert {:sourceloc} {:sourceloc_num 236} true;
  $$agg.tmp221[1bv32] := v99;
  assert {:sourceloc} {:sourceloc_num 237} true;
  v100 := $$tex[2bv32];
  assert {:sourceloc} {:sourceloc_num 238} true;
  $$agg.tmp221[2bv32] := v100;
  assert {:sourceloc} {:sourceloc_num 239} true;
  v101 := $$tex[3bv32];
  assert {:sourceloc} {:sourceloc_num 240} true;
  $$agg.tmp221[3bv32] := v101;
  assert {:sourceloc} {:sourceloc_num 241} true;
  v102 := $$tex[4bv32];
  assert {:sourceloc} {:sourceloc_num 242} true;
  $$agg.tmp221[4bv32] := v102;
  assert {:sourceloc} {:sourceloc_num 243} true;
  v103 := $$tex[5bv32];
  assert {:sourceloc} {:sourceloc_num 244} true;
  $$agg.tmp221[5bv32] := v103;
  assert {:sourceloc} {:sourceloc_num 245} true;
  v104 := $$tex[6bv32];
  assert {:sourceloc} {:sourceloc_num 246} true;
  $$agg.tmp221[6bv32] := v104;
  assert {:sourceloc} {:sourceloc_num 247} true;
  v105 := $$tex[7bv32];
  assert {:sourceloc} {:sourceloc_num 248} true;
  $$agg.tmp221[7bv32] := v105;
  assert {:sourceloc} {:sourceloc_num 249} true;
  v106 := $$tex[8bv32];
  assert {:sourceloc} {:sourceloc_num 250} true;
  $$agg.tmp221[8bv32] := v106;
  assert {:sourceloc} {:sourceloc_num 251} true;
  v107 := $$tex[9bv32];
  assert {:sourceloc} {:sourceloc_num 252} true;
  $$agg.tmp221[9bv32] := v107;
  assert {:sourceloc} {:sourceloc_num 253} true;
  v108 := $$tex[10bv32];
  assert {:sourceloc} {:sourceloc_num 254} true;
  $$agg.tmp221[10bv32] := v108;
  assert {:sourceloc} {:sourceloc_num 255} true;
  v109 := $$tex[11bv32];
  assert {:sourceloc} {:sourceloc_num 256} true;
  $$agg.tmp221[11bv32] := v109;
  call {:sourceloc_num 257}   v110 := $_Z5tex2DIhET_7textureIS0_Li2EL19cudaTextureReadMode0EEff(MKPTR($arrayId$$agg.tmp221, 0bv32), SI32_TO_FP32(BV32_ADD(BV32_SUB(BV32_ADD(BV16_SEXT32(v0), BV32_MUL(4bv32, BV16_SEXT32($ib.1))), 1bv32), 3bv32)), UI32_TO_FP32(BV32_SUB(BV32_ADD(BV16_SEXT32(v1), group_size_y), 1bv32)));
  assert {:sourceloc} {:sourceloc_num 258} true;
  $$LocalBlock[BV32_ADD(BV32_ADD(v57, BV32_MUL(4bv32, BV16_SEXT32($ib.1))), 3bv32)] := v110;
  goto $for.inc.239;
$for.inc.239:
  assert {:block_sourceloc} {:sourceloc_num 259} true;
  $ib.1 := BV32_ADD(BV16_SEXT32($ib.1), group_size_x)[16:0];
  goto $for.cond.119;
$for.end.243:
  assert {:block_sourceloc} {:sourceloc_num 260} true;
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 261} true;
  call {:sourceloc_num 262} $bugle_barrier(1bv1, 1bv1);
  v111 := BV32_ASHR(BV16_SEXT32(v0), 2bv32)[16:0];
  v112 := BV32_MUL(local_id_y, BV16_SEXT32($SharedPitch));
  assert {:sourceloc} {:sourceloc_num 263} true;
  v113 := $$blockFunction_table[$blockOperation];
  assert {:sourceloc} {:sourceloc_num 264} true;
  $$blockFunction[0bv32] := v113;
  $ib.2 := local_id_x[16:0];
  goto $for.cond.253;
$for.cond.253:
  assert {:block_sourceloc} {:sourceloc_num 265} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 266} (if BV32_UREM(BV16_SEXT32($ib.2), group_size_x) == local_id_x then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 267} (if (_WRITE_HAS_OCCURRED_$$pSobelOriginal ==> BV32_UREM(BV32_SUB(BV32_UDIV(BV32_SUB(_WATCHED_OFFSET, BV32_MUL(BV16_SEXT32(v1), BV16_ZEXT32($SobelPitch))), 4bv32), BV16_SEXT32(v111)), group_size_x) == local_id_x) then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 268} (if (_WRITE_HAS_OCCURRED_$$pSobelOriginal ==> BV32_ULT(BV32_SUB(BV32_UDIV(BV32_SUB(_WATCHED_OFFSET, BV32_MUL(BV16_SEXT32(v1), BV16_ZEXT32($SobelPitch))), 4bv32), BV16_SEXT32(v111)), BV16_SEXT32($BlockWidth))) then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 269} (if (_WRITE_HAS_OCCURRED_$$pSobelOriginal ==> BV32_ULT(_WATCHED_OFFSET, BV32_MUL(BV32_ADD(BV16_SEXT32(v1), 1bv32), BV16_ZEXT32($SobelPitch)))) then 1bv1 else 0bv1) != 0bv1;
  v114 := BV32_SLT(BV16_SEXT32($ib.2), BV16_SEXT32($BlockWidth));
  goto $truebb2, $falsebb2;
$for.body.292:
  assert {:block_sourceloc} {:sourceloc_num 270} true;
  assert {:sourceloc} {:sourceloc_num 271} true;
  v115 := $$LocalBlock[BV32_ADD(BV32_ADD(v112, BV32_MUL(4bv32, BV16_SEXT32($ib.2))), BV32_MUL(0bv32, BV16_SEXT32($SharedPitch)))];
  assert {:sourceloc} {:sourceloc_num 272} true;
  v116 := $$LocalBlock[BV32_ADD(BV32_ADD(BV32_ADD(v112, BV32_MUL(4bv32, BV16_SEXT32($ib.2))), BV32_MUL(0bv32, BV16_SEXT32($SharedPitch))), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 273} true;
  v117 := $$LocalBlock[BV32_ADD(BV32_ADD(BV32_ADD(v112, BV32_MUL(4bv32, BV16_SEXT32($ib.2))), BV32_MUL(0bv32, BV16_SEXT32($SharedPitch))), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 274} true;
  v118 := $$LocalBlock[BV32_ADD(BV32_ADD(v112, BV32_MUL(4bv32, BV16_SEXT32($ib.2))), BV16_SEXT32($SharedPitch))];
  assert {:sourceloc} {:sourceloc_num 275} true;
  v119 := $$LocalBlock[BV32_ADD(BV32_ADD(BV32_ADD(v112, BV32_MUL(4bv32, BV16_SEXT32($ib.2))), BV16_SEXT32($SharedPitch)), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 276} true;
  v120 := $$LocalBlock[BV32_ADD(BV32_ADD(BV32_ADD(v112, BV32_MUL(4bv32, BV16_SEXT32($ib.2))), BV16_SEXT32($SharedPitch)), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 277} true;
  v121 := $$LocalBlock[BV32_ADD(BV32_ADD(v112, BV32_MUL(4bv32, BV16_SEXT32($ib.2))), BV32_MUL(2bv32, BV16_SEXT32($SharedPitch)))];
  assert {:sourceloc} {:sourceloc_num 278} true;
  v122 := $$LocalBlock[BV32_ADD(BV32_ADD(BV32_ADD(v112, BV32_MUL(4bv32, BV16_SEXT32($ib.2))), BV32_MUL(2bv32, BV16_SEXT32($SharedPitch))), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 279} true;
  v123 := $$LocalBlock[BV32_ADD(BV32_ADD(BV32_ADD(v112, BV32_MUL(4bv32, BV16_SEXT32($ib.2))), BV32_MUL(2bv32, BV16_SEXT32($SharedPitch))), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 280} true;
  v124 := $$blockFunction[0bv32];
  if (v124 == $functionId$$_Z12ComputeSobelhhhhhhhhhf) {
    call {:sourceloc_num 281} v125 := $_Z12ComputeSobelhhhhhhhhhf(v115, v116, v117, v118, v119, v120, v121, v122, v123, $fScale);
  } else if (v124 == $functionId$$_Z10ComputeBoxhhhhhhhhhf) {
    call {:sourceloc_num 282} v125 := $_Z10ComputeBoxhhhhhhhhhf(v115, v116, v117, v118, v119, v120, v121, v122, v123, $fScale);
  } else {
    assert {:bad_pointer_access} {:sourceloc_num 283} false;
  }
  assert {:sourceloc} {:sourceloc_num 284} true;
  $$out[0bv32] := v125;
  assert {:sourceloc} {:sourceloc_num 285} true;
  v126 := $$LocalBlock[BV32_ADD(BV32_ADD(BV32_ADD(v112, BV32_MUL(4bv32, BV16_SEXT32($ib.2))), BV32_MUL(0bv32, BV16_SEXT32($SharedPitch))), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 286} true;
  v127 := $$LocalBlock[BV32_ADD(BV32_ADD(BV32_ADD(v112, BV32_MUL(4bv32, BV16_SEXT32($ib.2))), BV16_SEXT32($SharedPitch)), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 287} true;
  v128 := $$LocalBlock[BV32_ADD(BV32_ADD(BV32_ADD(v112, BV32_MUL(4bv32, BV16_SEXT32($ib.2))), BV32_MUL(2bv32, BV16_SEXT32($SharedPitch))), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 288} true;
  v129 := $$blockFunction[0bv32];
  if (v129 == $functionId$$_Z12ComputeSobelhhhhhhhhhf) {
    call {:sourceloc_num 289} v130 := $_Z12ComputeSobelhhhhhhhhhf(v116, v117, v126, v119, v120, v127, v122, v123, v128, $fScale);
  } else if (v129 == $functionId$$_Z10ComputeBoxhhhhhhhhhf) {
    call {:sourceloc_num 290} v130 := $_Z10ComputeBoxhhhhhhhhhf(v116, v117, v126, v119, v120, v127, v122, v123, v128, $fScale);
  } else {
    assert {:bad_pointer_access} {:sourceloc_num 291} false;
  }
  assert {:sourceloc} {:sourceloc_num 292} true;
  $$out[1bv32] := v130;
  assert {:sourceloc} {:sourceloc_num 293} true;
  v131 := $$LocalBlock[BV32_ADD(BV32_ADD(BV32_ADD(v112, BV32_MUL(4bv32, BV16_SEXT32($ib.2))), BV32_MUL(0bv32, BV16_SEXT32($SharedPitch))), 4bv32)];
  assert {:sourceloc} {:sourceloc_num 294} true;
  v132 := $$LocalBlock[BV32_ADD(BV32_ADD(BV32_ADD(v112, BV32_MUL(4bv32, BV16_SEXT32($ib.2))), BV16_SEXT32($SharedPitch)), 4bv32)];
  assert {:sourceloc} {:sourceloc_num 295} true;
  v133 := $$LocalBlock[BV32_ADD(BV32_ADD(BV32_ADD(v112, BV32_MUL(4bv32, BV16_SEXT32($ib.2))), BV32_MUL(2bv32, BV16_SEXT32($SharedPitch))), 4bv32)];
  assert {:sourceloc} {:sourceloc_num 296} true;
  v134 := $$blockFunction[0bv32];
  if (v134 == $functionId$$_Z12ComputeSobelhhhhhhhhhf) {
    call {:sourceloc_num 297} v135 := $_Z12ComputeSobelhhhhhhhhhf(v117, v126, v131, v120, v127, v132, v123, v128, v133, $fScale);
  } else if (v134 == $functionId$$_Z10ComputeBoxhhhhhhhhhf) {
    call {:sourceloc_num 298} v135 := $_Z10ComputeBoxhhhhhhhhhf(v117, v126, v131, v120, v127, v132, v123, v128, v133, $fScale);
  } else {
    assert {:bad_pointer_access} {:sourceloc_num 299} false;
  }
  assert {:sourceloc} {:sourceloc_num 300} true;
  $$out[2bv32] := v135;
  assert {:sourceloc} {:sourceloc_num 301} true;
  v136 := $$LocalBlock[BV32_ADD(BV32_ADD(BV32_ADD(v112, BV32_MUL(4bv32, BV16_SEXT32($ib.2))), BV32_MUL(0bv32, BV16_SEXT32($SharedPitch))), 5bv32)];
  assert {:sourceloc} {:sourceloc_num 302} true;
  v137 := $$LocalBlock[BV32_ADD(BV32_ADD(BV32_ADD(v112, BV32_MUL(4bv32, BV16_SEXT32($ib.2))), BV16_SEXT32($SharedPitch)), 5bv32)];
  assert {:sourceloc} {:sourceloc_num 303} true;
  v138 := $$LocalBlock[BV32_ADD(BV32_ADD(BV32_ADD(v112, BV32_MUL(4bv32, BV16_SEXT32($ib.2))), BV32_MUL(2bv32, BV16_SEXT32($SharedPitch))), 5bv32)];
  assert {:sourceloc} {:sourceloc_num 304} true;
  v139 := $$blockFunction[0bv32];
  if (v139 == $functionId$$_Z12ComputeSobelhhhhhhhhhf) {
    call {:sourceloc_num 305} v140 := $_Z12ComputeSobelhhhhhhhhhf(v126, v131, v136, v127, v132, v137, v128, v133, v138, $fScale);
  } else if (v139 == $functionId$$_Z10ComputeBoxhhhhhhhhhf) {
    call {:sourceloc_num 306} v140 := $_Z10ComputeBoxhhhhhhhhhf(v126, v131, v136, v127, v132, v137, v128, v133, v138, $fScale);
  } else {
    assert {:bad_pointer_access} {:sourceloc_num 307} false;
  }
  assert {:sourceloc} {:sourceloc_num 308} true;
  $$out[3bv32] := v140;
  v141 := $pPointFunction != $functionId$$null$;
  goto $truebb3, $falsebb3;
$if.then.443:
  assert {:block_sourceloc} {:sourceloc_num 309} true;
  assert {:sourceloc} {:sourceloc_num 310} true;
  v142 := $$out[0bv32];
  if ($pPointFunction == $functionId$$_Z9Thresholdhf) {
    call {:sourceloc_num 311} v143 := $_Z9Thresholdhf(v142, 1125515264bv32);
  } else {
    assert {:bad_pointer_access} {:sourceloc_num 312} false;
  }
  assert {:sourceloc} {:sourceloc_num 313} true;
  $$out[0bv32] := v143;
  assert {:sourceloc} {:sourceloc_num 314} true;
  v144 := $$out[1bv32];
  if ($pPointFunction == $functionId$$_Z9Thresholdhf) {
    call {:sourceloc_num 315} v145 := $_Z9Thresholdhf(v144, 1125515264bv32);
  } else {
    assert {:bad_pointer_access} {:sourceloc_num 316} false;
  }
  assert {:sourceloc} {:sourceloc_num 317} true;
  $$out[1bv32] := v145;
  assert {:sourceloc} {:sourceloc_num 318} true;
  v146 := $$out[2bv32];
  if ($pPointFunction == $functionId$$_Z9Thresholdhf) {
    call {:sourceloc_num 319} v147 := $_Z9Thresholdhf(v146, 1125515264bv32);
  } else {
    assert {:bad_pointer_access} {:sourceloc_num 320} false;
  }
  assert {:sourceloc} {:sourceloc_num 321} true;
  $$out[2bv32] := v147;
  assert {:sourceloc} {:sourceloc_num 322} true;
  v148 := $$out[3bv32];
  if ($pPointFunction == $functionId$$_Z9Thresholdhf) {
    call {:sourceloc_num 323} v149 := $_Z9Thresholdhf(v148, 1125515264bv32);
  } else {
    assert {:bad_pointer_access} {:sourceloc_num 324} false;
  }
  assert {:sourceloc} {:sourceloc_num 325} true;
  $$out[3bv32] := v149;
  goto $if.end.456;
$if.end.456:
  assert {:block_sourceloc} {:sourceloc_num 326} true;
  v150 := BV32_SLT(BV32_ADD(BV16_SEXT32(v111), BV16_SEXT32($ib.2)), BV32_SDIV(BV16_SEXT32($w), 4bv32));
  goto $truebb4, $falsebb4;
$land.lhs.true:
  assert {:block_sourceloc} {:sourceloc_num 327} true;
  v151 := BV32_SLT(BV16_SEXT32(v1), BV16_SEXT32($h));
  goto $truebb5, $falsebb5;
$if.then.466:
  assert {:block_sourceloc} {:sourceloc_num 328} true;
  assert {:sourceloc} {:sourceloc_num 329} true;
  v152 := $$out[0bv32];
  assert {:sourceloc} {:sourceloc_num 330} true;
  $$pSobelOriginal[BV32_ADD(BV32_MUL(BV16_SEXT32(v1), BV16_ZEXT32($SobelPitch)), BV32_MUL(BV32_ADD(BV16_SEXT32(v111), BV16_SEXT32($ib.2)), 4bv32))] := v152;
  assert {:sourceloc} {:sourceloc_num 331} true;
  v153 := $$out[1bv32];
  assert {:sourceloc} {:sourceloc_num 332} true;
  $$pSobelOriginal[BV32_ADD(BV32_ADD(BV32_MUL(BV16_SEXT32(v1), BV16_ZEXT32($SobelPitch)), BV32_MUL(BV32_ADD(BV16_SEXT32(v111), BV16_SEXT32($ib.2)), 4bv32)), 1bv32)] := v153;
  assert {:sourceloc} {:sourceloc_num 333} true;
  v154 := $$out[2bv32];
  assert {:sourceloc} {:sourceloc_num 334} true;
  $$pSobelOriginal[BV32_ADD(BV32_ADD(BV32_MUL(BV16_SEXT32(v1), BV16_ZEXT32($SobelPitch)), BV32_MUL(BV32_ADD(BV16_SEXT32(v111), BV16_SEXT32($ib.2)), 4bv32)), 2bv32)] := v154;
  assert {:sourceloc} {:sourceloc_num 335} true;
  v155 := $$out[3bv32];
  assert {:sourceloc} {:sourceloc_num 336} true;
  $$pSobelOriginal[BV32_ADD(BV32_ADD(BV32_MUL(BV16_SEXT32(v1), BV16_ZEXT32($SobelPitch)), BV32_MUL(BV32_ADD(BV16_SEXT32(v111), BV16_SEXT32($ib.2)), 4bv32)), 3bv32)] := v155;
  goto $if.end.471;
$if.end.471:
  assert {:block_sourceloc} {:sourceloc_num 337} true;
  goto $for.inc.472;
$for.inc.472:
  assert {:block_sourceloc} {:sourceloc_num 338} true;
  $ib.2 := BV32_ADD(BV16_SEXT32($ib.2), group_size_x)[16:0];
  goto $for.cond.253;
$for.end.476:
  assert {:block_sourceloc} {:sourceloc_num 339} true;
  call {:sourceloc_num 340} $bugle_barrier(1bv1, 1bv1);
  return;
$truebb:
  assume {:partition} v3;
  assert {:block_sourceloc} {:sourceloc_num 341} true;
  goto $for.body;
$falsebb:
  assume {:partition} !v3;
  assert {:block_sourceloc} {:sourceloc_num 342} true;
  goto $for.end;
$truebb0:
  assume {:partition} v56;
  assert {:block_sourceloc} {:sourceloc_num 343} true;
  goto $if.then;
$falsebb0:
  assume {:partition} !v56;
  assert {:block_sourceloc} {:sourceloc_num 344} true;
  goto $if.end;
$truebb1:
  assume {:partition} v58;
  assert {:block_sourceloc} {:sourceloc_num 345} true;
  goto $for.body.166;
$falsebb1:
  assume {:partition} !v58;
  assert {:block_sourceloc} {:sourceloc_num 346} true;
  goto $for.end.243;
$truebb2:
  assume {:partition} v114;
  assert {:block_sourceloc} {:sourceloc_num 347} true;
  goto $for.body.292;
$falsebb2:
  assume {:partition} !v114;
  assert {:block_sourceloc} {:sourceloc_num 348} true;
  goto $for.end.476;
$truebb3:
  assume {:partition} v141;
  assert {:block_sourceloc} {:sourceloc_num 349} true;
  goto $if.then.443;
$falsebb3:
  assume {:partition} !v141;
  assert {:block_sourceloc} {:sourceloc_num 350} true;
  goto $if.end.456;
$truebb4:
  assume {:partition} v150;
  assert {:block_sourceloc} {:sourceloc_num 351} true;
  goto $land.lhs.true;
$falsebb4:
  assume {:partition} !v150;
  assert {:block_sourceloc} {:sourceloc_num 352} true;
  goto $if.end.471;
$truebb5:
  assume {:partition} v151;
  assert {:block_sourceloc} {:sourceloc_num 353} true;
  goto $if.then.466;
$falsebb5:
  assume {:partition} !v151;
  assert {:block_sourceloc} {:sourceloc_num 354} true;
  goto $if.end.471;
}
procedure {:source_name "_Z5tex2DIhET_7textureIS0_Li2EL19cudaTextureReadMode0EEff"} $_Z5tex2DIhET_7textureIS0_Li2EL19cudaTextureReadMode0EEff($0:ptr, $1:bv32, $2:bv32) returns ($ret:bv8);
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 16bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_y == 4bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 2bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 128bv32 then 1bv1 else 0bv1) != 0bv1;
