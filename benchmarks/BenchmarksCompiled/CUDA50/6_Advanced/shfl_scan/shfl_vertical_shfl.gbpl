type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "img"} {:global} $$img : [bv32]bv32;
axiom {:array_info "$$img"} {:global} {:elem_width 32} {:source_name "img"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$img : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$img : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$img : bool;

var {:source_name "sums"} {:group_shared} $$_ZZ18shfl_vertical_shflPjiiE4sums : [bv32]bv32;
axiom {:array_info "$$_ZZ18shfl_vertical_shflPjiiE4sums"} {:group_shared} {:elem_width 32} {:source_name "sums"} {:source_elem_width 32} {:source_dimensions "32,9"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,9"} _READ_HAS_OCCURRED_$$_ZZ18shfl_vertical_shflPjiiE4sums : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,9"} _WRITE_HAS_OCCURRED_$$_ZZ18shfl_vertical_shflPjiiE4sums : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,9"} _ATOMIC_HAS_OCCURRED_$$_ZZ18shfl_vertical_shflPjiiE4sums : bool;

const _WATCHED_OFFSET : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:local_id_y} local_id_y : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvsle"} BV32_SLE(bv32, bv32) : bool;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
function {:bvbuiltin "bvsrem"} BV32_SREM(bv32, bv32) : bv32;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvuge"} BV32_UGE(bv32, bv32) : bool;
function {:bvbuiltin "bvugt"} BV32_UGT(bv32, bv32) : bool;
function {:bvbuiltin "bvurem"} BV32_UREM(bv32, bv32) : bv32;
procedure {:source_name "shfl_vertical_shfl"} {:kernel} $_Z18shfl_vertical_shflPjii($width:bv32, $height:bv32)
requires {:sourceloc_num 0} (if $width == 1920bv32 then 1bv1 else 0bv1) != 0bv1;
{
  var $stepSum.0:bv32;
  var $step.0:bv32;
  var $partial_sum.0:bv32;
  var $i.0:bv32;
  var $partial_sum.1:bv32;
  var $sum.0:bv32;
  var v8:bv32;
  var v6:bv32;
  var v3:bv32;
  var v0:bv32;
  var v4:bv32;
  var v2:bv32;
  var v1:bool;
  var v5:bv32;
  var v7:bool;
  var v9:bool;
  var v10:bool;
  var v12:bv32;
  var v11:bv32;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  assert {:sourceloc} {:sourceloc_num 2} true;
  $$_ZZ18shfl_vertical_shflPjiiE4sums[BV32_ADD(BV32_MUL(local_id_x, 9bv32), local_id_y)] := 0bv32;
  call {:sourceloc_num 3} $bugle_barrier(1bv1, 1bv1);
  $stepSum.0, $step.0 := 0bv32, 0bv32;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 5} (if (_WRITE_HAS_OCCURRED_$$img ==> BV32_UREM(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), $width) == v0) then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 6} (if (_READ_HAS_OCCURRED_$$img ==> BV32_UREM(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), $width) == v0) then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 7} (if (_WRITE_HAS_OCCURRED_$$img ==> BV32_UREM(BV32_SUB(BV32_UDIV(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), v0), $width), local_id_y), 8bv32) == 0bv32) then 1bv1 else 0bv1) != 0bv1;
  v1 := BV32_SLT($step.0, 135bv32);
  goto $truebb, $falsebb;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  v2 := BV32_MUL(BV32_ADD(local_id_y, BV32_MUL($step.0, 8bv32)), $width);
  assert {:sourceloc} {:sourceloc_num 9} true;
  v3 := $$img[BV32_ADD(v2, v0)];
  assert {:sourceloc} {:sourceloc_num 10} true;
  $$_ZZ18shfl_vertical_shflPjiiE4sums[BV32_ADD(BV32_MUL(local_id_x, 9bv32), local_id_y)] := v3;
  call {:sourceloc_num 11} $bugle_barrier(1bv1, 1bv1);
  v4 := BV32_UREM(local_id_x, 8bv32);
  v5 := BV32_ADD(BV32_UDIV(local_id_x, 8bv32), BV32_MUL(local_id_y, 4bv32));
  assert {:sourceloc} {:sourceloc_num 12} true;
  v6 := $$_ZZ18shfl_vertical_shflPjiiE4sums[BV32_ADD(BV32_MUL(v5, 9bv32), v4)];
  $partial_sum.0, $i.0 := v6, 1bv32;
  goto $for.cond.33;
$for.cond.33:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  v7 := BV32_SLE($i.0, 8bv32);
  goto $truebb0, $falsebb0;
$for.body.35:
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  call {:sourceloc_num 15}   v8 := $_Z9__shfl_upiii($partial_sum.0, $i.0, 32bv32);
  v9 := BV32_UGE(BV32_SREM(v0, 8bv32), $i.0);
  goto $truebb1, $falsebb1;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  $partial_sum.1 := BV32_ADD($partial_sum.0, v8);
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  $partial_sum.0, $i.0 := $partial_sum.1, BV32_MUL($i.0, 2bv32);
  goto $for.cond.33;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 19} true;
  assert {:sourceloc} {:sourceloc_num 20} true;
  $$_ZZ18shfl_vertical_shflPjiiE4sums[BV32_ADD(BV32_MUL(v5, 9bv32), v4)] := $partial_sum.0;
  call {:sourceloc_num 21} $bugle_barrier(1bv1, 1bv1);
  v10 := BV32_UGT(local_id_y, 0bv32);
  goto $truebb2, $falsebb2;
$if.then.43:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  assert {:sourceloc} {:sourceloc_num 23} true;
  v11 := $$_ZZ18shfl_vertical_shflPjiiE4sums[BV32_ADD(BV32_MUL(local_id_x, 9bv32), BV32_SUB(local_id_y, 1bv32))];
  $sum.0 := BV32_ADD(v3, v11);
  goto $if.end.48;
$if.end.48:
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  assert {:sourceloc} {:sourceloc_num 25} true;
  v12 := $$_ZZ18shfl_vertical_shflPjiiE4sums[BV32_ADD(BV32_MUL(local_id_x, 9bv32), BV32_SUB(group_size_y, 1bv32))];
  call {:sourceloc_num 26} $bugle_barrier(1bv1, 1bv1);
  assert {:sourceloc} {:sourceloc_num 27} true;
  $$img[BV32_ADD(v2, v0)] := BV32_ADD($sum.0, $stepSum.0);
  goto $for.inc.54;
$for.inc.54:
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  $stepSum.0, $step.0 := BV32_ADD($stepSum.0, v12), BV32_ADD($step.0, 1bv32);
  goto $for.cond;
$for.end.55:
  assert {:block_sourceloc} {:sourceloc_num 29} true;
  return;
$truebb:
  assume {:partition} v1;
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  goto $for.body;
$falsebb:
  assume {:partition} !v1;
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  goto $for.end.55;
$truebb0:
  assume {:partition} v7;
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  goto $for.body.35;
$falsebb0:
  assume {:partition} !v7;
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  goto $for.end;
$truebb1:
  assume {:partition} v9;
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  goto $if.then;
$falsebb1:
  assume {:partition} !v9;
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  $partial_sum.1 := $partial_sum.0;
  goto $if.end;
$truebb2:
  assume {:partition} v10;
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  goto $if.then.43;
$falsebb2:
  assume {:partition} !v10;
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  $sum.0 := v3;
  goto $if.end.48;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
procedure {:source_name "_Z9__shfl_upiii"} $_Z9__shfl_upiii($0:bv32, $1:bv32, $2:bv32) returns ($ret:bv32);
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 32bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_y == 8bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 60bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
