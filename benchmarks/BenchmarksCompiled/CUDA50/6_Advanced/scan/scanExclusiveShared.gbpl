type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "d_Dst"} {:global} $$d_Dst : [bv32]bv32;
axiom {:array_info "$$d_Dst"} {:global} {:elem_width 32} {:source_name "d_Dst"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_Dst : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_Dst : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_Dst : bool;

var {:source_name "d_Src"} {:global} $$d_Src : [bv32]bv32;
axiom {:array_info "$$d_Src"} {:global} {:elem_width 32} {:source_name "d_Src"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_Src : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_Src : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_Src : bool;

var {:source_name "retval.i.i"} $$retval.i.i : [bv32]bv32;
axiom {:array_info "$$retval.i.i"} {:elem_width 32} {:source_name "retval.i.i"} {:source_elem_width 128} {:source_dimensions "1"} true;

var {:source_name "agg.tmp8.i"} $$agg.tmp8.i : [bv32]bv32;
axiom {:array_info "$$agg.tmp8.i"} {:elem_width 32} {:source_name "agg.tmp8.i"} {:source_elem_width 128} {:source_dimensions "1"} true;

var {:source_name "retval.i"} $$retval.i : [bv32]bv32;
axiom {:array_info "$$retval.i"} {:elem_width 32} {:source_name "retval.i"} {:source_elem_width 128} {:source_dimensions "1"} true;

var {:source_name "agg.tmp.i"} $$agg.tmp.i : [bv32]bv32;
axiom {:array_info "$$agg.tmp.i"} {:elem_width 32} {:source_name "agg.tmp.i"} {:source_elem_width 128} {:source_dimensions "1"} true;

var {:source_name "agg.tmp2"} $$agg.tmp2 : [bv32]bv32;
axiom {:array_info "$$agg.tmp2"} {:elem_width 32} {:source_name "agg.tmp2"} {:source_elem_width 128} {:source_dimensions "1"} true;

var {:source_name "idata4"} $$idata4 : [bv32]bv32;
axiom {:array_info "$$idata4"} {:elem_width 32} {:source_name "idata4"} {:source_elem_width 128} {:source_dimensions "1"} true;

var {:source_name "odata4"} $$odata4 : [bv32]bv32;
axiom {:array_info "$$odata4"} {:elem_width 32} {:source_name "odata4"} {:source_elem_width 128} {:source_dimensions "1"} true;

var {:source_name "agg.tmp"} $$agg.tmp : [bv32]bv32;
axiom {:array_info "$$agg.tmp"} {:elem_width 32} {:source_name "agg.tmp"} {:source_elem_width 128} {:source_dimensions "1"} true;

var {:source_name "s_Data"} {:group_shared} $$_ZZ19scanExclusiveSharedP5uint4S0_jE6s_Data : [bv32]bv32;
axiom {:array_info "$$_ZZ19scanExclusiveSharedP5uint4S0_jE6s_Data"} {:group_shared} {:elem_width 32} {:source_name "s_Data"} {:source_elem_width 32} {:source_dimensions "512"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ19scanExclusiveSharedP5uint4S0_jE6s_Data : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ19scanExclusiveSharedP5uint4S0_jE6s_Data : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ19scanExclusiveSharedP5uint4S0_jE6s_Data : bool;

const _WATCHED_OFFSET : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvand"} BV32_AND(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvor"} BV32_OR(bv32, bv32) : bv32;
function {:bvbuiltin "bvshl"} BV32_SHL(bv32, bv32) : bv32;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvult"} BV32_ULT(bv32, bv32) : bool;
function {:bvbuiltin "zero_extend 31"} BV1_ZEXT32(bv1) : bv32;
procedure {:source_name "scanExclusiveShared"} {:kernel} $_Z19scanExclusiveSharedP5uint4S0_j($size:bv32)
requires {:sourceloc_num 0} (if BV32_AND($size, BV32_SUB($size, 1bv32)) == 0bv32 then 1bv1 else 0bv1) != 0bv1;
{
  var $offset.i.i.i.i.0:bv32;
  var v10:bv32;
  var v1:bv32;
  var v2:bv32;
  var v3:bv32;
  var v5:bv32;
  var v4:bv32;
  var v6:bv32;
  var v7:bv32;
  var v8:bv32;
  var v9:bv32;
  var v28:bv32;
  var v29:bv32;
  var v30:bv32;
  var v0:bv32;
  var v20:bv32;
  var v12:bv32;
  var v15:bv32;
  var v13:bv32;
  var v14:bv32;
  var v16:bv32;
  var v19:bv32;
  var v17:bv32;
  var v18:bv32;
  var v11:bv32;
  var v24:bv32;
  var v23:bv32;
  var v27:bv32;
  var v21:bv32;
  var v22:bv32;
  var v26:bv32;
  var v25:bv32;
  var v34:bv32;
  var v33:bv32;
  var v32:bv32;
  var v36:bv32;
  var v31:bool;
  var v35:bv32;
  var v43:bv32;
  var v50:bv32;
  var v44:bv32;
  var v42:bv32;
  var v45:bv32;
  var v47:bv32;
  var v48:bv32;
  var v46:bv32;
  var v49:bv32;
  var v58:bv32;
  var v52:bv32;
  var v51:bv32;
  var v56:bv32;
  var v57:bv32;
  var v53:bv32;
  var v55:bv32;
  var v54:bv32;
  var v59:bv32;
  var v40:bv32;
  var v41:bv32;
  var v38:bv32;
  var v37:bv32;
  var v39:bv32;
  var v62:bv32;
  var v63:bv32;
  var v60:bv32;
  var v61:bv32;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  assert {:sourceloc} {:sourceloc_num 2} true;
  v1 := $$d_Src[BV32_MUL(v0, 4bv32)];
  assert {:sourceloc} {:sourceloc_num 3} true;
  $$idata4[0bv32] := v1;
  assert {:sourceloc} {:sourceloc_num 4} true;
  v2 := $$d_Src[BV32_ADD(BV32_MUL(v0, 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 5} true;
  $$idata4[1bv32] := v2;
  assert {:sourceloc} {:sourceloc_num 6} true;
  v3 := $$d_Src[BV32_ADD(BV32_MUL(v0, 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 7} true;
  $$idata4[2bv32] := v3;
  assert {:sourceloc} {:sourceloc_num 8} true;
  v4 := $$d_Src[BV32_ADD(BV32_MUL(v0, 4bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 9} true;
  $$idata4[3bv32] := v4;
  assert {:sourceloc} {:sourceloc_num 10} true;
  v5 := $$idata4[0bv32];
  assert {:sourceloc} {:sourceloc_num 11} true;
  $$agg.tmp[0bv32] := v5;
  assert {:sourceloc} {:sourceloc_num 12} true;
  v6 := $$idata4[1bv32];
  assert {:sourceloc} {:sourceloc_num 13} true;
  $$agg.tmp[1bv32] := v6;
  assert {:sourceloc} {:sourceloc_num 14} true;
  v7 := $$idata4[2bv32];
  assert {:sourceloc} {:sourceloc_num 15} true;
  $$agg.tmp[2bv32] := v7;
  assert {:sourceloc} {:sourceloc_num 16} true;
  v8 := $$idata4[3bv32];
  assert {:sourceloc} {:sourceloc_num 17} true;
  $$agg.tmp[3bv32] := v8;
  assert {:sourceloc} {:sourceloc_num 18} true;
  v9 := $$agg.tmp[0bv32];
  assert {:sourceloc} {:sourceloc_num 19} true;
  $$agg.tmp2[0bv32] := v9;
  assert {:sourceloc} {:sourceloc_num 20} true;
  v10 := $$agg.tmp[1bv32];
  assert {:sourceloc} {:sourceloc_num 21} true;
  $$agg.tmp2[1bv32] := v10;
  assert {:sourceloc} {:sourceloc_num 22} true;
  v11 := $$agg.tmp[2bv32];
  assert {:sourceloc} {:sourceloc_num 23} true;
  $$agg.tmp2[2bv32] := v11;
  assert {:sourceloc} {:sourceloc_num 24} true;
  v12 := $$agg.tmp[3bv32];
  assert {:sourceloc} {:sourceloc_num 25} true;
  $$agg.tmp2[3bv32] := v12;
  assert {:sourceloc} {:sourceloc_num 26} true;
  v13 := $$agg.tmp2[0bv32];
  assert {:sourceloc} {:sourceloc_num 27} true;
  $$agg.tmp.i[0bv32] := v13;
  assert {:sourceloc} {:sourceloc_num 28} true;
  v14 := $$agg.tmp2[1bv32];
  assert {:sourceloc} {:sourceloc_num 29} true;
  $$agg.tmp.i[1bv32] := v14;
  assert {:sourceloc} {:sourceloc_num 30} true;
  v15 := $$agg.tmp2[2bv32];
  assert {:sourceloc} {:sourceloc_num 31} true;
  $$agg.tmp.i[2bv32] := v15;
  assert {:sourceloc} {:sourceloc_num 32} true;
  v16 := $$agg.tmp2[3bv32];
  assert {:sourceloc} {:sourceloc_num 33} true;
  $$agg.tmp.i[3bv32] := v16;
  assert {:sourceloc} {:sourceloc_num 34} true;
  v17 := $$agg.tmp.i[0bv32];
  assert {:sourceloc} {:sourceloc_num 35} true;
  $$agg.tmp8.i[0bv32] := v17;
  assert {:sourceloc} {:sourceloc_num 36} true;
  v18 := $$agg.tmp.i[1bv32];
  assert {:sourceloc} {:sourceloc_num 37} true;
  $$agg.tmp8.i[1bv32] := v18;
  assert {:sourceloc} {:sourceloc_num 38} true;
  v19 := $$agg.tmp.i[2bv32];
  assert {:sourceloc} {:sourceloc_num 39} true;
  $$agg.tmp8.i[2bv32] := v19;
  assert {:sourceloc} {:sourceloc_num 40} true;
  v20 := $$agg.tmp.i[3bv32];
  assert {:sourceloc} {:sourceloc_num 41} true;
  $$agg.tmp8.i[3bv32] := v20;
  assert {:sourceloc} {:sourceloc_num 42} true;
  v21 := $$agg.tmp8.i[0bv32];
  assert {:sourceloc} {:sourceloc_num 43} true;
  v22 := $$agg.tmp8.i[1bv32];
  assert {:sourceloc} {:sourceloc_num 44} true;
  $$agg.tmp8.i[1bv32] := BV32_ADD(v22, v21);
  assert {:sourceloc} {:sourceloc_num 45} true;
  v23 := $$agg.tmp8.i[1bv32];
  assert {:sourceloc} {:sourceloc_num 46} true;
  v24 := $$agg.tmp8.i[2bv32];
  assert {:sourceloc} {:sourceloc_num 47} true;
  $$agg.tmp8.i[2bv32] := BV32_ADD(v24, v23);
  assert {:sourceloc} {:sourceloc_num 48} true;
  v25 := $$agg.tmp8.i[2bv32];
  assert {:sourceloc} {:sourceloc_num 49} true;
  v26 := $$agg.tmp8.i[3bv32];
  assert {:sourceloc} {:sourceloc_num 50} true;
  $$agg.tmp8.i[3bv32] := BV32_ADD(v26, v25);
  assert {:sourceloc} {:sourceloc_num 51} true;
  v27 := $$agg.tmp8.i[3bv32];
  v28 := BV32_UDIV($size, 4bv32);
  v29 := BV32_SUB(BV32_MUL(2bv32, local_id_x), BV32_AND(local_id_x, BV32_SUB(v28, 1bv32)));
  assert {:sourceloc} {:sourceloc_num 52} true;
  $$_ZZ19scanExclusiveSharedP5uint4S0_jE6s_Data[v29] := 0bv32;
  v30 := BV32_ADD(v29, v28);
  assert {:sourceloc} {:sourceloc_num 53} true;
  $$_ZZ19scanExclusiveSharedP5uint4S0_jE6s_Data[v30] := v27;
  $offset.i.i.i.i.0 := 1bv32;
  goto $for.cond.i.i.i.i;
$for.cond.i.i.i.i:
  assert {:block_sourceloc} {:sourceloc_num 54} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 55} (if (_WRITE_HAS_OCCURRED_$$_ZZ19scanExclusiveSharedP5uint4S0_jE6s_Data ==> BV32_OR(BV1_ZEXT32((if BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32) == v30 then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32) == BV32_SUB(v30, v28) then 1bv1 else 0bv1))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
  v31 := BV32_ULT($offset.i.i.i.i.0, v28);
  goto $truebb, $falsebb;
$for.body.i.i.i.i:
  assert {:block_sourceloc} {:sourceloc_num 56} true;
  call {:sourceloc_num 57} $bugle_barrier(1bv1, 1bv1);
  assert {:sourceloc} {:sourceloc_num 58} true;
  v32 := $$_ZZ19scanExclusiveSharedP5uint4S0_jE6s_Data[v30];
  assert {:sourceloc} {:sourceloc_num 59} true;
  v33 := $$_ZZ19scanExclusiveSharedP5uint4S0_jE6s_Data[BV32_SUB(v30, $offset.i.i.i.i.0)];
  call {:sourceloc_num 60} $bugle_barrier(1bv1, 1bv1);
  assert {:sourceloc} {:sourceloc_num 61} true;
  $$_ZZ19scanExclusiveSharedP5uint4S0_jE6s_Data[v30] := BV32_ADD(v32, v33);
  $offset.i.i.i.i.0 := BV32_SHL($offset.i.i.i.i.0, 1bv32);
  goto $for.cond.i.i.i.i;
$_ZL14scan4Exclusive5uint4PVjj.exit:
  assert {:block_sourceloc} {:sourceloc_num 62} true;
  assert {:sourceloc} {:sourceloc_num 63} true;
  v34 := $$_ZZ19scanExclusiveSharedP5uint4S0_jE6s_Data[v30];
  v35 := BV32_SUB(v34, v27);
  assert {:sourceloc} {:sourceloc_num 64} true;
  v36 := $$agg.tmp8.i[0bv32];
  assert {:sourceloc} {:sourceloc_num 65} true;
  $$agg.tmp8.i[0bv32] := BV32_ADD(v36, v35);
  assert {:sourceloc} {:sourceloc_num 66} true;
  v37 := $$agg.tmp8.i[1bv32];
  assert {:sourceloc} {:sourceloc_num 67} true;
  $$agg.tmp8.i[1bv32] := BV32_ADD(v37, v35);
  assert {:sourceloc} {:sourceloc_num 68} true;
  v38 := $$agg.tmp8.i[2bv32];
  assert {:sourceloc} {:sourceloc_num 69} true;
  $$agg.tmp8.i[2bv32] := BV32_ADD(v38, v35);
  assert {:sourceloc} {:sourceloc_num 70} true;
  v39 := $$agg.tmp8.i[3bv32];
  assert {:sourceloc} {:sourceloc_num 71} true;
  $$agg.tmp8.i[3bv32] := BV32_ADD(v39, v35);
  assert {:sourceloc} {:sourceloc_num 72} true;
  v40 := $$agg.tmp8.i[0bv32];
  assert {:sourceloc} {:sourceloc_num 73} true;
  $$retval.i.i[0bv32] := v40;
  assert {:sourceloc} {:sourceloc_num 74} true;
  v41 := $$agg.tmp8.i[1bv32];
  assert {:sourceloc} {:sourceloc_num 75} true;
  $$retval.i.i[1bv32] := v41;
  assert {:sourceloc} {:sourceloc_num 76} true;
  v42 := $$agg.tmp8.i[2bv32];
  assert {:sourceloc} {:sourceloc_num 77} true;
  $$retval.i.i[2bv32] := v42;
  assert {:sourceloc} {:sourceloc_num 78} true;
  v43 := $$agg.tmp8.i[3bv32];
  assert {:sourceloc} {:sourceloc_num 79} true;
  $$retval.i.i[3bv32] := v43;
  assert {:sourceloc} {:sourceloc_num 80} true;
  v44 := $$retval.i.i[0bv32];
  assert {:sourceloc} {:sourceloc_num 81} true;
  v45 := $$retval.i.i[1bv32];
  assert {:sourceloc} {:sourceloc_num 82} true;
  v46 := $$retval.i.i[2bv32];
  assert {:sourceloc} {:sourceloc_num 83} true;
  v47 := $$retval.i.i[3bv32];
  assert {:sourceloc} {:sourceloc_num 84} true;
  $$retval.i[0bv32] := v44;
  assert {:sourceloc} {:sourceloc_num 85} true;
  $$retval.i[1bv32] := v45;
  assert {:sourceloc} {:sourceloc_num 86} true;
  $$retval.i[2bv32] := v46;
  assert {:sourceloc} {:sourceloc_num 87} true;
  $$retval.i[3bv32] := v47;
  assert {:sourceloc} {:sourceloc_num 88} true;
  v48 := $$agg.tmp2[0bv32];
  assert {:sourceloc} {:sourceloc_num 89} true;
  v49 := $$retval.i[0bv32];
  assert {:sourceloc} {:sourceloc_num 90} true;
  $$retval.i[0bv32] := BV32_SUB(v49, v48);
  assert {:sourceloc} {:sourceloc_num 91} true;
  v50 := $$agg.tmp2[1bv32];
  assert {:sourceloc} {:sourceloc_num 92} true;
  v51 := $$retval.i[1bv32];
  assert {:sourceloc} {:sourceloc_num 93} true;
  $$retval.i[1bv32] := BV32_SUB(v51, v50);
  assert {:sourceloc} {:sourceloc_num 94} true;
  v52 := $$agg.tmp2[2bv32];
  assert {:sourceloc} {:sourceloc_num 95} true;
  v53 := $$retval.i[2bv32];
  assert {:sourceloc} {:sourceloc_num 96} true;
  $$retval.i[2bv32] := BV32_SUB(v53, v52);
  assert {:sourceloc} {:sourceloc_num 97} true;
  v54 := $$agg.tmp2[3bv32];
  assert {:sourceloc} {:sourceloc_num 98} true;
  v55 := $$retval.i[3bv32];
  assert {:sourceloc} {:sourceloc_num 99} true;
  $$retval.i[3bv32] := BV32_SUB(v55, v54);
  assert {:sourceloc} {:sourceloc_num 100} true;
  v56 := $$retval.i[0bv32];
  assert {:sourceloc} {:sourceloc_num 101} true;
  v57 := $$retval.i[1bv32];
  assert {:sourceloc} {:sourceloc_num 102} true;
  v58 := $$retval.i[2bv32];
  assert {:sourceloc} {:sourceloc_num 103} true;
  v59 := $$retval.i[3bv32];
  assert {:sourceloc} {:sourceloc_num 104} true;
  $$odata4[0bv32] := v56;
  assert {:sourceloc} {:sourceloc_num 105} true;
  $$odata4[1bv32] := v57;
  assert {:sourceloc} {:sourceloc_num 106} true;
  $$odata4[2bv32] := v58;
  assert {:sourceloc} {:sourceloc_num 107} true;
  $$odata4[3bv32] := v59;
  assert {:sourceloc} {:sourceloc_num 108} true;
  v60 := $$odata4[0bv32];
  assert {:sourceloc} {:sourceloc_num 109} true;
  $$d_Dst[BV32_MUL(v0, 4bv32)] := v60;
  assert {:sourceloc} {:sourceloc_num 110} true;
  v61 := $$odata4[1bv32];
  assert {:sourceloc} {:sourceloc_num 111} true;
  $$d_Dst[BV32_ADD(BV32_MUL(v0, 4bv32), 1bv32)] := v61;
  assert {:sourceloc} {:sourceloc_num 112} true;
  v62 := $$odata4[2bv32];
  assert {:sourceloc} {:sourceloc_num 113} true;
  $$d_Dst[BV32_ADD(BV32_MUL(v0, 4bv32), 2bv32)] := v62;
  assert {:sourceloc} {:sourceloc_num 114} true;
  v63 := $$odata4[3bv32];
  assert {:sourceloc} {:sourceloc_num 115} true;
  $$d_Dst[BV32_ADD(BV32_MUL(v0, 4bv32), 3bv32)] := v63;
  return;
$truebb:
  assume {:partition} v31;
  assert {:block_sourceloc} {:sourceloc_num 116} true;
  goto $for.body.i.i.i.i;
$falsebb:
  assume {:partition} !v31;
  assert {:block_sourceloc} {:sourceloc_num 117} true;
  goto $_ZL14scan4Exclusive5uint4PVjj.exit;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 256bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 6624bv32 then 1bv1 else 0bv1) != 0bv1;
