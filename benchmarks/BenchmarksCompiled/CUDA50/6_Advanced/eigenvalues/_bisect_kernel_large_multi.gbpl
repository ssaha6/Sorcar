type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "g_d"} {:global} $$g_d : [bv32]bv32;
axiom {:array_info "$$g_d"} {:global} {:elem_width 32} {:source_name "g_d"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$g_d : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$g_d : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$g_d : bool;

var {:source_name "g_s"} {:global} $$g_s : [bv32]bv32;
axiom {:array_info "$$g_s"} {:global} {:elem_width 32} {:source_name "g_s"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$g_s : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$g_s : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$g_s : bool;

var {:source_name "blocks_mult"} {:global} $$blocks_mult : [bv32]bv32;
axiom {:array_info "$$blocks_mult"} {:global} {:elem_width 32} {:source_name "blocks_mult"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$blocks_mult : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$blocks_mult : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$blocks_mult : bool;

var {:source_name "blocks_mult_sum"} {:global} $$blocks_mult_sum : [bv32]bv32;
axiom {:array_info "$$blocks_mult_sum"} {:global} {:elem_width 32} {:source_name "blocks_mult_sum"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$blocks_mult_sum : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$blocks_mult_sum : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$blocks_mult_sum : bool;

var {:source_name "g_left"} {:global} $$g_left : [bv32]bv32;
axiom {:array_info "$$g_left"} {:global} {:elem_width 32} {:source_name "g_left"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$g_left : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$g_left : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$g_left : bool;

var {:source_name "g_right"} {:global} $$g_right : [bv32]bv32;
axiom {:array_info "$$g_right"} {:global} {:elem_width 32} {:source_name "g_right"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$g_right : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$g_right : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$g_right : bool;

var {:source_name "g_left_count"} {:global} $$g_left_count : [bv32]bv32;
axiom {:array_info "$$g_left_count"} {:global} {:elem_width 32} {:source_name "g_left_count"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$g_left_count : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$g_left_count : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$g_left_count : bool;

var {:source_name "g_right_count"} {:global} $$g_right_count : [bv32]bv32;
axiom {:array_info "$$g_right_count"} {:global} {:elem_width 32} {:source_name "g_right_count"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$g_right_count : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$g_right_count : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$g_right_count : bool;

var {:source_name "g_lambda"} {:global} $$g_lambda : [bv32]bv32;
axiom {:array_info "$$g_lambda"} {:global} {:elem_width 32} {:source_name "g_lambda"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$g_lambda : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$g_lambda : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$g_lambda : bool;

var {:source_name "g_pos"} {:global} $$g_pos : [bv32]bv32;
axiom {:array_info "$$g_pos"} {:global} {:elem_width 32} {:source_name "g_pos"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$g_pos : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$g_pos : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$g_pos : bool;

var {:source_name "c_block_start"} {:group_shared} $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE13c_block_start : [bv32]bv32;
axiom {:array_info "$$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE13c_block_start"} {:group_shared} {:elem_width 32} {:source_name "c_block_start"} {:source_elem_width 32} {:source_dimensions "1"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE13c_block_start : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE13c_block_start : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE13c_block_start : bool;

var {:source_name "c_block_end"} {:group_shared} $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE11c_block_end : [bv32]bv32;
axiom {:array_info "$$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE11c_block_end"} {:group_shared} {:elem_width 32} {:source_name "c_block_end"} {:source_elem_width 32} {:source_dimensions "1"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE11c_block_end : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE11c_block_end : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE11c_block_end : bool;

var {:source_name "c_block_offset_output"} {:group_shared} $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE21c_block_offset_output : [bv32]bv32;
axiom {:array_info "$$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE21c_block_offset_output"} {:group_shared} {:elem_width 32} {:source_name "c_block_offset_output"} {:source_elem_width 32} {:source_dimensions "1"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE21c_block_offset_output : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE21c_block_offset_output : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE21c_block_offset_output : bool;

var {:source_name "num_threads_active"} {:group_shared} $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE18num_threads_active : [bv32]bv32;
axiom {:array_info "$$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE18num_threads_active"} {:group_shared} {:elem_width 32} {:source_name "num_threads_active"} {:source_elem_width 32} {:source_dimensions "1"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE18num_threads_active : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE18num_threads_active : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE18num_threads_active : bool;

var {:source_name "s_compaction_list"} {:group_shared} $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE17s_compaction_list : [bv32]bv32;
axiom {:array_info "$$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE17s_compaction_list"} {:group_shared} {:elem_width 32} {:source_name "s_compaction_list"} {:source_elem_width 32} {:source_dimensions "513"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE17s_compaction_list : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE17s_compaction_list : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE17s_compaction_list : bool;

var {:source_name "num_threads_compaction"} {:group_shared} $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE22num_threads_compaction : [bv32]bv32;
axiom {:array_info "$$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE22num_threads_compaction"} {:group_shared} {:elem_width 32} {:source_name "num_threads_compaction"} {:source_elem_width 32} {:source_dimensions "1"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE22num_threads_compaction : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE22num_threads_compaction : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE22num_threads_compaction : bool;

var {:source_name "all_threads_converged"} {:group_shared} $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE21all_threads_converged : [bv32]bv32;
axiom {:array_info "$$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE21all_threads_converged"} {:group_shared} {:elem_width 32} {:source_name "all_threads_converged"} {:source_elem_width 32} {:source_dimensions "1"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE21all_threads_converged : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE21all_threads_converged : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE21all_threads_converged : bool;

var {:source_name "compact_second_chunk"} {:group_shared} $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE20compact_second_chunk : [bv32]bv32;
axiom {:array_info "$$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE20compact_second_chunk"} {:group_shared} {:elem_width 32} {:source_name "compact_second_chunk"} {:source_elem_width 32} {:source_dimensions "1"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE20compact_second_chunk : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE20compact_second_chunk : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE20compact_second_chunk : bool;

var {:source_name "s_left"} {:group_shared} $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE6s_left : [bv32]bv32;
axiom {:array_info "$$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE6s_left"} {:group_shared} {:elem_width 32} {:source_name "s_left"} {:source_elem_width 32} {:source_dimensions "512"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE6s_left : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE6s_left : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE6s_left : bool;

var {:source_name "s_right"} {:group_shared} $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE7s_right : [bv32]bv32;
axiom {:array_info "$$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE7s_right"} {:group_shared} {:elem_width 32} {:source_name "s_right"} {:source_elem_width 32} {:source_dimensions "512"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE7s_right : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE7s_right : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE7s_right : bool;

var {:source_name "s_left_count"} {:group_shared} $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE12s_left_count : [bv32]bv32;
axiom {:array_info "$$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE12s_left_count"} {:group_shared} {:elem_width 32} {:source_name "s_left_count"} {:source_elem_width 32} {:source_dimensions "512"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE12s_left_count : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE12s_left_count : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE12s_left_count : bool;

var {:source_name "s_right_count"} {:group_shared} $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE13s_right_count : [bv32]bv32;
axiom {:array_info "$$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE13s_right_count"} {:group_shared} {:elem_width 32} {:source_name "s_right_count"} {:source_elem_width 32} {:source_dimensions "512"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE13s_right_count : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE13s_right_count : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE13s_right_count : bool;

const _WATCHED_OFFSET : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FADD32(bv32, bv32) : bv32;
function FDIV32(bv32, bv32) : bv32;
function FEQ64(bv64, bv64) : bool;
function FLT32(bv32, bv32) : bool;
function FLT64(bv64, bv64) : bool;
function FMUL32(bv32, bv32) : bv32;
function FP32_CONV64(bv32) : bv64;
function FSUB32(bv32, bv32) : bv32;
function FUNO32(bv32, bv32) : bool;
function SI32_TO_FP32(bv32) : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvand"} BV32_AND(bv32, bv32) : bv32;
function {:bvbuiltin "bvashr"} BV32_ASHR(bv32, bv32) : bv32;
function {:bvbuiltin "bvlshr"} BV32_LSHR(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvsgt"} BV32_SGT(bv32, bv32) : bool;
function {:bvbuiltin "bvshl"} BV32_SHL(bv32, bv32) : bv32;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "bvugt"} BV32_UGT(bv32, bv32) : bool;
function {:bvbuiltin "bvult"} BV32_ULT(bv32, bv32) : bool;
procedure {:source_name "bisectKernelLarge_MultIntervals"} {:kernel} $_Z31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_f($n:bv32, $precision:bv32)
{
  var $retval.i.0:bv32;
  var $left_count.0:bv32;
  var $right.0:bv32;
  var $left.0:bv32;
  var $mid.0:bv32;
  var $right_count.0:bv32;
  var $is_active_second.0:bv32;
  var $left_count.1:bv32;
  var $right.1:bv32;
  var $left.1:bv32;
  var $mid.2:bv32;
  var $right_count.1:bv32;
  var $mid.i.i.0:bv32;
  var $mid.1:bv32;
  var $delta.i.0:bv32;
  var $count.i.0:bv32;
  var $rem.i.0:bv32;
  var $i.i.0:bv32;
  var $delta.i.2:bv32;
  var $count.i.2:bv32;
  var $delta.i.1:bv32;
  var $count.i.1:bv32;
  var $k.i.0:bv32;
  var $cond.i:bv32;
  var $mid_count.2:bv32;
  var $mid.5:bv32;
  var $is_active_second.4:bv32;
  var $cond.i.i:bv32;
  var $cond12.i.i:bv64;
  var $mid.i.i.i.0:bv32;
  var $is_active_second.1:bv32;
  var $cond.i.34.i:bv32;
  var $cond12.i.43.i:bv64;
  var $mid.i.i.9.i.0:bv32;
  var $cond.i.91.i:bv32;
  var $cond12.i.100.i:bv64;
  var $mid.i.i.66.i.0:bv32;
  var $mid_count.1:bv32;
  var $mid.4:bv32;
  var $is_active_second.3:bv32;
  var $mid_count.0:bv32;
  var $mid.3:bv32;
  var $is_active_second.2:bv32;
  var $offset.i.0:bv32;
  var $d.i.0:bv32;
  var $offset.i.1:bv32;
  var $d11.i.0:bv32;
  var $retval.i.155.0:bv32;
  var v0:bool;
  var v131:bv32;
  var v134:bv32;
  var v133:bv32;
  var v129:bv32;
  var v72:bv32;
  var v70:bv32;
  var v74:bv32;
  var v71:bv32;
  var v75:bv32;
  var v85:bv32;
  var v87:bv32;
  var v84:bv32;
  var v88:bv32;
  var v81:bv32;
  var v83:bv32;
  var v80:bv32;
  var v93:bv32;
  var v94:bv32;
  var v96:bv32;
  var v100:bv32;
  var v102:bv32;
  var v106:bv32;
  var v107:bv32;
  var v113:bv32;
  var v114:bv32;
  var v115:bv32;
  var v118:bv32;
  var v121:bv32;
  var v123:bv32;
  var v127:bv32;
  var v122:bv32;
  var v128:bv64;
  var v124:bv32;
  var v14:bv32;
  var v13:bv32;
  var v10:bv64;
  var v11:bv32;
  var v2:bv32;
  var v1:bv32;
  var v3:bv32;
  var v4:bv32;
  var v5:bv32;
  var v6:bv32;
  var v9:bv32;
  var v12:bool;
  var v8:bv64;
  var v7:bool;
  var v21:bv32;
  var v23:bv32;
  var v22:bv32;
  var v24:bv32;
  var v42:bv32;
  var v36:bv32;
  var v38:bv32;
  var v41:bv32;
  var v50:bv32;
  var v48:bv32;
  var v47:bv32;
  var v46:bv32;
  var v58:bv32;
  var v56:bv32;
  var v57:bv32;
  var v66:bv32;
  var v67:bv32;
  var v53:bv32;
  var v61:bv32;
  var v60:bv32;
  var v16:bv32;
  var v17:bv32;
  var v15:bv32;
  var v20:bv32;
  var v18:bv32;
  var v19:bv32;
  var v25:bv32;
  var v33:bv32;
  var v30:bv32;
  var v28:bv32;
  var v29:bv32;
  var v32:bv32;
  var v27:bv32;
  var v34:bool;
  var v31:bool;
  var v35:bool;
  var v39:bool;
  var v37:bool;
  var v26:bool;
  var v52:bool;
  var v51:bool;
  var v49:bv32;
  var v40:bool;
  var v43:bool;
  var v45:bool;
  var v44:bool;
  var v62:bv32;
  var v63:bv64;
  var v54:bool;
  var v59:bool;
  var v55:bool;
  var v64:bool;
  var v65:bool;
  var v68:bool;
  var v69:bool;
  var v79:bool;
  var v73:bool;
  var v76:bv32;
  var v78:bool;
  var v77:bv64;
  var v82:bool;
  var v86:bool;
  var v89:bv32;
  var v91:bool;
  var v92:bool;
  var v90:bv64;
  var v95:bool;
  var v116:bool;
  var v117:bool;
  var v119:bv32;
  var v120:bool;
  var v97:bv32;
  var v98:bool;
  var v99:bv32;
  var v101:bool;
  var v103:bool;
  var v105:bv32;
  var v104:bool;
  var v109:bv32;
  var v110:bool;
  var v108:bool;
  var v111:bv32;
  var v112:bv32;
  var v130:bool;
  var v125:bool;
  var v126:bv64;
  var v132:bv32;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  v0 := 0bv32 == local_id_x;
  goto $truebb, $falsebb;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  assert {:sourceloc} {:sourceloc_num 2} true;
  v1 := $$blocks_mult[group_id_x];
  assert {:sourceloc} {:sourceloc_num 3} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE13c_block_start[0bv32] := v1;
  assert {:sourceloc} {:sourceloc_num 4} true;
  v2 := $$blocks_mult[BV32_ADD(group_id_x, 1bv32)];
  assert {:sourceloc} {:sourceloc_num 5} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE11c_block_end[0bv32] := v2;
  assert {:sourceloc} {:sourceloc_num 6} true;
  v3 := $$blocks_mult_sum[group_id_x];
  assert {:sourceloc} {:sourceloc_num 7} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE21c_block_offset_output[0bv32] := v3;
  assert {:sourceloc} {:sourceloc_num 8} true;
  v4 := $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE11c_block_end[0bv32];
  assert {:sourceloc} {:sourceloc_num 9} true;
  v5 := $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE13c_block_start[0bv32];
  assert {:sourceloc} {:sourceloc_num 10} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE18num_threads_active[0bv32] := BV32_SUB(v4, v5);
  assert {:sourceloc} {:sourceloc_num 11} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE17s_compaction_list[0bv32] := 0bv32;
  assert {:sourceloc} {:sourceloc_num 12} true;
  v6 := $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE18num_threads_active[0bv32];
  v7 := 0bv32 == BV32_AND(v6, BV32_SUB(v6, 1bv32));
  goto $truebb0, $falsebb0;
$if.then.i:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  $retval.i.0 := v6;
  goto $_ZL8ceilPow2i.exit;
$if.end.i:
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  v8 := FP32_CONV64(SI32_TO_FP32(v6));
  call {:sourceloc_num 15}   v9 := $__bugle_frexp_exp(v8);
  call {:sourceloc_num 16}   v10 := $__bugle_frexp_frac(v8);
  $retval.i.0 := BV32_SHL(1bv32, v9);
  goto $_ZL8ceilPow2i.exit;
$_ZL8ceilPow2i.exit:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  assert {:sourceloc} {:sourceloc_num 18} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE22num_threads_compaction[0bv32] := $retval.i.0;
  assert {:sourceloc} {:sourceloc_num 19} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE21all_threads_converged[0bv32] := 1bv32;
  assert {:sourceloc} {:sourceloc_num 20} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE20compact_second_chunk[0bv32] := 0bv32;
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  call {:sourceloc_num 22} $bugle_barrier(1bv1, 1bv1);
  assert {:sourceloc} {:sourceloc_num 23} true;
  v11 := $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE18num_threads_active[0bv32];
  v12 := BV32_ULT(local_id_x, v11);
  goto $truebb1, $falsebb1;
$if.then.4:
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  assert {:sourceloc} {:sourceloc_num 25} true;
  v13 := $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE13c_block_start[0bv32];
  assert {:sourceloc} {:sourceloc_num 26} true;
  v14 := $$g_left[BV32_ADD(v13, local_id_x)];
  assert {:sourceloc} {:sourceloc_num 27} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE6s_left[local_id_x] := v14;
  assert {:sourceloc} {:sourceloc_num 28} true;
  v15 := $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE13c_block_start[0bv32];
  assert {:sourceloc} {:sourceloc_num 29} true;
  v16 := $$g_right[BV32_ADD(v15, local_id_x)];
  assert {:sourceloc} {:sourceloc_num 30} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE7s_right[local_id_x] := v16;
  assert {:sourceloc} {:sourceloc_num 31} true;
  v17 := $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE13c_block_start[0bv32];
  assert {:sourceloc} {:sourceloc_num 32} true;
  v18 := $$g_left_count[BV32_ADD(v17, local_id_x)];
  assert {:sourceloc} {:sourceloc_num 33} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE12s_left_count[local_id_x] := v18;
  assert {:sourceloc} {:sourceloc_num 34} true;
  v19 := $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE13c_block_start[0bv32];
  assert {:sourceloc} {:sourceloc_num 35} true;
  v20 := $$g_right_count[BV32_ADD(v19, local_id_x)];
  assert {:sourceloc} {:sourceloc_num 36} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE13s_right_count[local_id_x] := v20;
  goto $if.end.17;
$if.end.17:
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  call {:sourceloc_num 38} $bugle_barrier(1bv1, 1bv1);
  havoc v21;
  havoc v22;
  havoc v23;
  havoc v24;
  $left_count.0, $right.0, $left.0, $mid.0, $right_count.0, $is_active_second.0 := v21, v22, v23, 0bv32, v24, 0bv32;
  goto $while.body;
$while.body:
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  assert {:sourceloc} {:sourceloc_num 40} true;
  v25 := $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE18num_threads_active[0bv32];
  v26 := BV32_ULT(local_id_x, v25);
  goto $truebb2, $falsebb2;
$if.then.i.50:
  assert {:block_sourceloc} {:sourceloc_num 41} true;
  assert {:sourceloc} {:sourceloc_num 42} true;
  v27 := $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE6s_left[local_id_x];
  assert {:sourceloc} {:sourceloc_num 43} true;
  v28 := $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE7s_right[local_id_x];
  assert {:sourceloc} {:sourceloc_num 44} true;
  v29 := $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE12s_left_count[local_id_x];
  assert {:sourceloc} {:sourceloc_num 45} true;
  v30 := $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE13s_right_count[local_id_x];
  v31 := (FLT32(v28, v27) || FLT32(v27, v28)) || FUNO32(v27, v28);
  goto $truebb3, $falsebb3;
$if.then.5.i:
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  call {:sourceloc_num 47}   v32 := $_Z6sign_ff(v27);
  call {:sourceloc_num 48}   v33 := $_Z6sign_ff(v28);
  v34 := v32 == v33;
  goto $truebb4, $falsebb4;
$if.then.i.i:
  assert {:block_sourceloc} {:sourceloc_num 49} true;
  $mid.i.i.0 := FADD32(v27, FMUL32(FSUB32(v28, v27), 1056964608bv32));
  goto $_ZL15computeMidpointff.exit.i;
$if.else.i.i:
  assert {:block_sourceloc} {:sourceloc_num 50} true;
  $mid.i.i.0 := FMUL32(FADD32(v27, v28), 1056964608bv32);
  goto $_ZL15computeMidpointff.exit.i;
$_ZL15computeMidpointff.exit.i:
  assert {:block_sourceloc} {:sourceloc_num 51} true;
  assert {:sourceloc} {:sourceloc_num 52} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE21all_threads_converged[0bv32] := 0bv32;
  $mid.1 := $mid.i.i.0;
  goto $if.end.8.i;
$if.else.i:
  assert {:block_sourceloc} {:sourceloc_num 53} true;
  v35 := BV32_UGT(BV32_SUB(v30, v29), 1bv32);
  goto $truebb5, $falsebb5;
$if.then.7.i:
  assert {:block_sourceloc} {:sourceloc_num 54} true;
  assert {:sourceloc} {:sourceloc_num 55} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE21all_threads_converged[0bv32] := 0bv32;
  goto $if.end.i.54;
$if.end.i.54:
  assert {:block_sourceloc} {:sourceloc_num 56} true;
  $mid.1 := $mid.0;
  goto $if.end.8.i;
$if.end.8.i:
  assert {:block_sourceloc} {:sourceloc_num 57} true;
  $left_count.1, $right.1, $left.1, $mid.2, $right_count.1 := v29, v28, v27, $mid.1, v30;
  goto $_ZL23subdivideActiveIntervalIjEvjPfS0_PT_S2_jRfS3_RjS4_S3_S4_.exit;
$_ZL23subdivideActiveIntervalIjEvjPfS0_PT_S2_jRfS3_RjS4_S3_S4_.exit:
  assert {:block_sourceloc} {:sourceloc_num 58} true;
  call {:sourceloc_num 59} $bugle_barrier(1bv1, 1bv1);
  assert {:sourceloc} {:sourceloc_num 60} true;
  v36 := $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE21all_threads_converged[0bv32];
  v37 := 1bv32 == v36;
  goto $truebb6, $falsebb6;
$if.then.19:
  assert {:block_sourceloc} {:sourceloc_num 61} true;
  goto $while.end;
$if.end.20:
  assert {:block_sourceloc} {:sourceloc_num 62} true;
  assert {:sourceloc} {:sourceloc_num 63} true;
  v38 := $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE18num_threads_active[0bv32];
  $delta.i.0, $count.i.0, $rem.i.0, $i.i.0 := 1065353216bv32, 0bv32, $n, 0bv32;
  goto $for.cond.i;
$for.cond.i:
  assert {:block_sourceloc} {:sourceloc_num 64} true;
  v39 := BV32_ULT($i.i.0, $n);
  goto $truebb7, $falsebb7;
$for.body.i:
  assert {:block_sourceloc} {:sourceloc_num 65} true;
  call {:sourceloc_num 66} $bugle_barrier(1bv1, 1bv1);
  v40 := BV32_ULT(BV32_ADD($i.i.0, local_id_x), $n);
  goto $truebb8, $falsebb8;
$if.then.i.59:
  assert {:block_sourceloc} {:sourceloc_num 67} true;
  assert {:sourceloc} {:sourceloc_num 68} true;
  v41 := $$g_d[BV32_ADD($i.i.0, local_id_x)];
  assert {:sourceloc} {:sourceloc_num 69} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE6s_left[local_id_x] := v41;
  assert {:sourceloc} {:sourceloc_num 70} true;
  v42 := $$g_s[BV32_ADD(BV32_ADD($i.i.0, local_id_x), 4294967295bv32)];
  assert {:sourceloc} {:sourceloc_num 71} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE7s_right[local_id_x] := v42;
  goto $if.end.i.60;
$if.end.i.60:
  assert {:block_sourceloc} {:sourceloc_num 72} true;
  call {:sourceloc_num 73} $bugle_barrier(1bv1, 1bv1);
  v43 := BV32_ULT(local_id_x, v38);
  goto $truebb9, $falsebb9;
$if.then.8.i:
  assert {:block_sourceloc} {:sourceloc_num 74} true;
  $delta.i.1, $count.i.1, $k.i.0 := $delta.i.0, $count.i.0, 0bv32;
  goto $for.cond.9.i;
$for.cond.9.i:
  assert {:block_sourceloc} {:sourceloc_num 75} true;
  v44 := BV32_ULT($rem.i.0, group_size_x);
  goto $truebb10, $falsebb10;
$cond.true.i:
  assert {:block_sourceloc} {:sourceloc_num 76} true;
  $cond.i := $rem.i.0;
  goto $cond.end.i;
$cond.false.i:
  assert {:block_sourceloc} {:sourceloc_num 77} true;
  $cond.i := group_size_x;
  goto $cond.end.i;
$cond.end.i:
  assert {:block_sourceloc} {:sourceloc_num 78} true;
  v45 := BV32_ULT($k.i.0, $cond.i);
  goto $truebb11, $falsebb11;
$for.body.12.i:
  assert {:block_sourceloc} {:sourceloc_num 79} true;
  assert {:sourceloc} {:sourceloc_num 80} true;
  v46 := $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE6s_left[$k.i.0];
  assert {:sourceloc} {:sourceloc_num 81} true;
  v47 := $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE7s_right[$k.i.0];
  assert {:sourceloc} {:sourceloc_num 82} true;
  v48 := $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE7s_right[$k.i.0];
  v49 := FSUB32(FSUB32(v46, $mid.2), FDIV32(FMUL32(v47, v48), $delta.i.1));
  $delta.i.1, $count.i.1, $k.i.0 := v49, BV32_ADD($count.i.1, (if FLT32(v49, 0bv32) then 1bv32 else 0bv32)), BV32_ADD($k.i.0, 1bv32);
  goto $for.cond.9.i;
$for.end.i:
  assert {:block_sourceloc} {:sourceloc_num 83} true;
  $delta.i.2, $count.i.2 := $delta.i.1, $count.i.1;
  goto $if.end.20.i;
$if.end.20.i:
  assert {:block_sourceloc} {:sourceloc_num 84} true;
  $delta.i.0, $count.i.0, $rem.i.0, $i.i.0 := $delta.i.2, $count.i.2, BV32_SUB($rem.i.0, group_size_x), BV32_ADD($i.i.0, group_size_x);
  goto $for.cond.i;
$_ZL31computeNumSmallerEigenvalsLargePfS_jfjjS_S_j.exit:
  assert {:block_sourceloc} {:sourceloc_num 85} true;
  call {:sourceloc_num 86} $bugle_barrier(1bv1, 1bv1);
  assert {:sourceloc} {:sourceloc_num 87} true;
  v50 := $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE18num_threads_active[0bv32];
  v51 := BV32_ULT(local_id_x, v50);
  goto $truebb12, $falsebb12;
$if.then.24:
  assert {:block_sourceloc} {:sourceloc_num 88} true;
  v52 := (FLT32($right.1, $left.1) || FLT32($left.1, $right.1)) || FUNO32($left.1, $right.1);
  goto $truebb13, $falsebb13;
$if.then.26:
  assert {:block_sourceloc} {:sourceloc_num 89} true;
  assert {:sourceloc} {:sourceloc_num 90} true;
  v53 := $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE18num_threads_active[0bv32];
  v54 := $left_count.1 != $count.i.0;
  goto $truebb14, $falsebb14;
$land.lhs.true.i:
  assert {:block_sourceloc} {:sourceloc_num 91} true;
  v55 := $count.i.0 != $right_count.1;
  goto $truebb15, $falsebb15;
$if.then.i.79:
  assert {:block_sourceloc} {:sourceloc_num 92} true;
  assert {:sourceloc} {:sourceloc_num 93} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE12s_left_count[local_id_x] := $left_count.1;
  assert {:sourceloc} {:sourceloc_num 94} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE13s_right_count[local_id_x] := $count.i.0;
  call {:sourceloc_num 95}   v56 := $abs(FSUB32($mid.2, $left.1));
  call {:sourceloc_num 96}   v57 := $abs($left.1);
  call {:sourceloc_num 97}   v58 := $abs($mid.2);
  v59 := FLT32(v57, v58);
  goto $truebb16, $falsebb16;
$cond.true.i.i:
  assert {:block_sourceloc} {:sourceloc_num 98} true;
  call {:sourceloc_num 99}   v60 := $abs($mid.2);
  $cond.i.i := v60;
  goto $cond.end.i.i;
$cond.false.i.i:
  assert {:block_sourceloc} {:sourceloc_num 100} true;
  call {:sourceloc_num 101}   v61 := $abs($left.1);
  $cond.i.i := v61;
  goto $cond.end.i.i;
$cond.end.i.i:
  assert {:block_sourceloc} {:sourceloc_num 102} true;
  v62 := FMUL32($cond.i.i, $precision);
  v63 := FP32_CONV64(v56);
  v64 := FLT64(4063729574967324274bv64, FP32_CONV64(v62));
  goto $truebb17, $falsebb17;
$cond.true.8.i.i:
  assert {:block_sourceloc} {:sourceloc_num 103} true;
  $cond12.i.i := FP32_CONV64(v62);
  goto $cond.end.11.i.i;
$cond.false.10.i.i:
  assert {:block_sourceloc} {:sourceloc_num 104} true;
  $cond12.i.i := 4063729574967324274bv64;
  goto $cond.end.11.i.i;
$cond.end.11.i.i:
  assert {:block_sourceloc} {:sourceloc_num 105} true;
  v65 := FEQ64(v63, $cond12.i.i) || FLT64(v63, $cond12.i.i);
  goto $truebb18, $falsebb18;
$if.then.i.i.81:
  assert {:block_sourceloc} {:sourceloc_num 106} true;
  call {:sourceloc_num 107}   v66 := $_Z6sign_ff($left.1);
  call {:sourceloc_num 108}   v67 := $_Z6sign_ff($mid.2);
  v68 := v66 == v67;
  goto $truebb19, $falsebb19;
$if.then.i.i.i:
  assert {:block_sourceloc} {:sourceloc_num 109} true;
  $mid.i.i.i.0 := FADD32($left.1, FMUL32(FSUB32($mid.2, $left.1), 1056964608bv32));
  goto $_ZL15computeMidpointff.exit.i.i;
$if.else.i.i.i:
  assert {:block_sourceloc} {:sourceloc_num 110} true;
  $mid.i.i.i.0 := FMUL32(FADD32($left.1, $mid.2), 1056964608bv32);
  goto $_ZL15computeMidpointff.exit.i.i;
$_ZL15computeMidpointff.exit.i.i:
  assert {:block_sourceloc} {:sourceloc_num 111} true;
  assert {:sourceloc} {:sourceloc_num 112} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE6s_left[local_id_x] := $mid.i.i.i.0;
  assert {:sourceloc} {:sourceloc_num 113} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE7s_right[local_id_x] := $mid.i.i.i.0;
  goto $_ZL13storeIntervalIjjEvjPfS0_PT0_S2_ffT_S3_f.exit.i;
$if.else.i.i.82:
  assert {:block_sourceloc} {:sourceloc_num 114} true;
  assert {:sourceloc} {:sourceloc_num 115} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE6s_left[local_id_x] := $left.1;
  assert {:sourceloc} {:sourceloc_num 116} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE7s_right[local_id_x] := $mid.2;
  goto $_ZL13storeIntervalIjjEvjPfS0_PT0_S2_ffT_S3_f.exit.i;
$_ZL13storeIntervalIjjEvjPfS0_PT0_S2_ffT_S3_f.exit.i:
  assert {:block_sourceloc} {:sourceloc_num 117} true;
  assert {:sourceloc} {:sourceloc_num 118} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE17s_compaction_list[BV32_ADD(1bv32, local_id_x)] := 1bv32;
  assert {:sourceloc} {:sourceloc_num 119} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE20compact_second_chunk[0bv32] := 1bv32;
  $is_active_second.1 := 1bv32;
  goto $_ZL22storeNonEmptyIntervalsIjjEvjjPfS0_PT0_S2_fffT_S3_S3_fRjS2_S4_.exit;
$if.else.i.85:
  assert {:block_sourceloc} {:sourceloc_num 120} true;
  assert {:sourceloc} {:sourceloc_num 121} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE17s_compaction_list[BV32_ADD(1bv32, local_id_x)] := 0bv32;
  v69 := $left_count.1 != $count.i.0;
  goto $truebb20, $falsebb20;
$if.then.4.i:
  assert {:block_sourceloc} {:sourceloc_num 122} true;
  assert {:sourceloc} {:sourceloc_num 123} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE12s_left_count[local_id_x] := $left_count.1;
  assert {:sourceloc} {:sourceloc_num 124} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE13s_right_count[local_id_x] := $count.i.0;
  call {:sourceloc_num 125}   v70 := $abs(FSUB32($mid.2, $left.1));
  call {:sourceloc_num 126}   v71 := $abs($left.1);
  call {:sourceloc_num 127}   v72 := $abs($mid.2);
  v73 := FLT32(v71, v72);
  goto $truebb21, $falsebb21;
$cond.true.i.31.i:
  assert {:block_sourceloc} {:sourceloc_num 128} true;
  call {:sourceloc_num 129}   v74 := $abs($mid.2);
  $cond.i.34.i := v74;
  goto $cond.end.i.39.i;
$cond.false.i.33.i:
  assert {:block_sourceloc} {:sourceloc_num 130} true;
  call {:sourceloc_num 131}   v75 := $abs($left.1);
  $cond.i.34.i := v75;
  goto $cond.end.i.39.i;
$cond.end.i.39.i:
  assert {:block_sourceloc} {:sourceloc_num 132} true;
  v76 := FMUL32($cond.i.34.i, $precision);
  v77 := FP32_CONV64(v70);
  v78 := FLT64(4063729574967324274bv64, FP32_CONV64(v76));
  goto $truebb22, $falsebb22;
$cond.true.8.i.41.i:
  assert {:block_sourceloc} {:sourceloc_num 133} true;
  $cond12.i.43.i := FP32_CONV64(v76);
  goto $cond.end.11.i.45.i;
$cond.false.10.i.42.i:
  assert {:block_sourceloc} {:sourceloc_num 134} true;
  $cond12.i.43.i := 4063729574967324274bv64;
  goto $cond.end.11.i.45.i;
$cond.end.11.i.45.i:
  assert {:block_sourceloc} {:sourceloc_num 135} true;
  v79 := FEQ64(v77, $cond12.i.43.i) || FLT64(v77, $cond12.i.43.i);
  goto $truebb23, $falsebb23;
$if.then.i.49.i:
  assert {:block_sourceloc} {:sourceloc_num 136} true;
  call {:sourceloc_num 137}   v80 := $_Z6sign_ff($left.1);
  call {:sourceloc_num 138}   v81 := $_Z6sign_ff($mid.2);
  v82 := v80 == v81;
  goto $truebb24, $falsebb24;
$if.then.i.i.53.i:
  assert {:block_sourceloc} {:sourceloc_num 139} true;
  $mid.i.i.9.i.0 := FADD32($left.1, FMUL32(FSUB32($mid.2, $left.1), 1056964608bv32));
  goto $_ZL15computeMidpointff.exit.i.59.i;
$if.else.i.i.56.i:
  assert {:block_sourceloc} {:sourceloc_num 140} true;
  $mid.i.i.9.i.0 := FMUL32(FADD32($left.1, $mid.2), 1056964608bv32);
  goto $_ZL15computeMidpointff.exit.i.59.i;
$_ZL15computeMidpointff.exit.i.59.i:
  assert {:block_sourceloc} {:sourceloc_num 141} true;
  assert {:sourceloc} {:sourceloc_num 142} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE6s_left[local_id_x] := $mid.i.i.9.i.0;
  assert {:sourceloc} {:sourceloc_num 143} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE7s_right[local_id_x] := $mid.i.i.9.i.0;
  goto $_ZL13storeIntervalIjjEvjPfS0_PT0_S2_ffT_S3_f.exit63.i;
$if.else.i.62.i:
  assert {:block_sourceloc} {:sourceloc_num 144} true;
  assert {:sourceloc} {:sourceloc_num 145} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE6s_left[local_id_x] := $left.1;
  assert {:sourceloc} {:sourceloc_num 146} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE7s_right[local_id_x] := $mid.2;
  goto $_ZL13storeIntervalIjjEvjPfS0_PT0_S2_ffT_S3_f.exit63.i;
$_ZL13storeIntervalIjjEvjPfS0_PT0_S2_ffT_S3_f.exit63.i:
  assert {:block_sourceloc} {:sourceloc_num 147} true;
  goto $if.end.i.86;
$if.else.5.i:
  assert {:block_sourceloc} {:sourceloc_num 148} true;
  assert {:sourceloc} {:sourceloc_num 149} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE12s_left_count[local_id_x] := $count.i.0;
  assert {:sourceloc} {:sourceloc_num 150} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE13s_right_count[local_id_x] := $right_count.1;
  call {:sourceloc_num 151}   v83 := $abs(FSUB32($right.1, $mid.2));
  call {:sourceloc_num 152}   v84 := $abs($mid.2);
  call {:sourceloc_num 153}   v85 := $abs($right.1);
  v86 := FLT32(v84, v85);
  goto $truebb25, $falsebb25;
$cond.true.i.88.i:
  assert {:block_sourceloc} {:sourceloc_num 154} true;
  call {:sourceloc_num 155}   v87 := $abs($right.1);
  $cond.i.91.i := v87;
  goto $cond.end.i.96.i;
$cond.false.i.90.i:
  assert {:block_sourceloc} {:sourceloc_num 156} true;
  call {:sourceloc_num 157}   v88 := $abs($mid.2);
  $cond.i.91.i := v88;
  goto $cond.end.i.96.i;
$cond.end.i.96.i:
  assert {:block_sourceloc} {:sourceloc_num 158} true;
  v89 := FMUL32($cond.i.91.i, $precision);
  v90 := FP32_CONV64(v83);
  v91 := FLT64(4063729574967324274bv64, FP32_CONV64(v89));
  goto $truebb26, $falsebb26;
$cond.true.8.i.98.i:
  assert {:block_sourceloc} {:sourceloc_num 159} true;
  $cond12.i.100.i := FP32_CONV64(v89);
  goto $cond.end.11.i.102.i;
$cond.false.10.i.99.i:
  assert {:block_sourceloc} {:sourceloc_num 160} true;
  $cond12.i.100.i := 4063729574967324274bv64;
  goto $cond.end.11.i.102.i;
$cond.end.11.i.102.i:
  assert {:block_sourceloc} {:sourceloc_num 161} true;
  v92 := FEQ64(v90, $cond12.i.100.i) || FLT64(v90, $cond12.i.100.i);
  goto $truebb27, $falsebb27;
$if.then.i.106.i:
  assert {:block_sourceloc} {:sourceloc_num 162} true;
  call {:sourceloc_num 163}   v93 := $_Z6sign_ff($mid.2);
  call {:sourceloc_num 164}   v94 := $_Z6sign_ff($right.1);
  v95 := v93 == v94;
  goto $truebb28, $falsebb28;
$if.then.i.i.110.i:
  assert {:block_sourceloc} {:sourceloc_num 165} true;
  $mid.i.i.66.i.0 := FADD32($mid.2, FMUL32(FSUB32($right.1, $mid.2), 1056964608bv32));
  goto $_ZL15computeMidpointff.exit.i.116.i;
$if.else.i.i.113.i:
  assert {:block_sourceloc} {:sourceloc_num 166} true;
  $mid.i.i.66.i.0 := FMUL32(FADD32($mid.2, $right.1), 1056964608bv32);
  goto $_ZL15computeMidpointff.exit.i.116.i;
$_ZL15computeMidpointff.exit.i.116.i:
  assert {:block_sourceloc} {:sourceloc_num 167} true;
  assert {:sourceloc} {:sourceloc_num 168} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE6s_left[local_id_x] := $mid.i.i.66.i.0;
  assert {:sourceloc} {:sourceloc_num 169} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE7s_right[local_id_x] := $mid.i.i.66.i.0;
  goto $_ZL13storeIntervalIjjEvjPfS0_PT0_S2_ffT_S3_f.exit120.i;
$if.else.i.119.i:
  assert {:block_sourceloc} {:sourceloc_num 170} true;
  assert {:sourceloc} {:sourceloc_num 171} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE6s_left[local_id_x] := $mid.2;
  assert {:sourceloc} {:sourceloc_num 172} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE7s_right[local_id_x] := $right.1;
  goto $_ZL13storeIntervalIjjEvjPfS0_PT0_S2_ffT_S3_f.exit120.i;
$_ZL13storeIntervalIjjEvjPfS0_PT0_S2_ffT_S3_f.exit120.i:
  assert {:block_sourceloc} {:sourceloc_num 173} true;
  goto $if.end.i.86;
$if.end.i.86:
  assert {:block_sourceloc} {:sourceloc_num 174} true;
  $is_active_second.1 := 0bv32;
  goto $_ZL22storeNonEmptyIntervalsIjjEvjjPfS0_PT0_S2_fffT_S3_S3_fRjS2_S4_.exit;
$_ZL22storeNonEmptyIntervalsIjjEvjjPfS0_PT0_S2_fffT_S3_S3_fRjS2_S4_.exit:
  assert {:block_sourceloc} {:sourceloc_num 175} true;
  $mid_count.1, $mid.4, $is_active_second.3 := $count.i.0, $mid.2, $is_active_second.1;
  goto $if.end.27;
$if.else:
  assert {:block_sourceloc} {:sourceloc_num 176} true;
  assert {:sourceloc} {:sourceloc_num 177} true;
  v96 := $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE18num_threads_active[0bv32];
  v97 := BV32_SUB($right_count.1, $left_count.1);
  v98 := 1bv32 == v97;
  goto $truebb29, $falsebb29;
$if.then.i.107:
  assert {:block_sourceloc} {:sourceloc_num 178} true;
  assert {:sourceloc} {:sourceloc_num 179} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE6s_left[local_id_x] := $left.1;
  assert {:sourceloc} {:sourceloc_num 180} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE7s_right[local_id_x] := $right.1;
  assert {:sourceloc} {:sourceloc_num 181} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE12s_left_count[local_id_x] := $left_count.1;
  assert {:sourceloc} {:sourceloc_num 182} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE13s_right_count[local_id_x] := $right_count.1;
  assert {:sourceloc} {:sourceloc_num 183} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE17s_compaction_list[BV32_ADD(1bv32, local_id_x)] := 0bv32;
  $mid_count.0, $mid.3, $is_active_second.2 := $count.i.0, $mid.2, 0bv32;
  goto $_ZL22storeIntervalConvergedIjjEvPfS0_PT_S2_RfS3_S3_RT0_S5_S5_S2_RjjS6_.exit;
$if.else.i.110:
  assert {:block_sourceloc} {:sourceloc_num 184} true;
  v99 := BV32_ADD($left_count.1, BV32_LSHR(v97, 1bv32));
  assert {:sourceloc} {:sourceloc_num 185} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE6s_left[local_id_x] := $left.1;
  assert {:sourceloc} {:sourceloc_num 186} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE7s_right[local_id_x] := $right.1;
  assert {:sourceloc} {:sourceloc_num 187} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE12s_left_count[local_id_x] := $left_count.1;
  assert {:sourceloc} {:sourceloc_num 188} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE13s_right_count[local_id_x] := v99;
  assert {:sourceloc} {:sourceloc_num 189} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE17s_compaction_list[BV32_ADD(1bv32, local_id_x)] := 1bv32;
  assert {:sourceloc} {:sourceloc_num 190} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE20compact_second_chunk[0bv32] := 1bv32;
  $mid_count.0, $mid.3, $is_active_second.2 := v99, $left.1, 1bv32;
  goto $_ZL22storeIntervalConvergedIjjEvPfS0_PT_S2_RfS3_S3_RT0_S5_S5_S2_RjjS6_.exit;
$_ZL22storeIntervalConvergedIjjEvPfS0_PT_S2_RfS3_S3_RT0_S5_S5_S2_RjjS6_.exit:
  assert {:block_sourceloc} true;
  $mid_count.1, $mid.4, $is_active_second.3 := $mid_count.0, $mid.3, $is_active_second.2;
  goto $if.end.27;
$if.end.27:
  assert {:block_sourceloc} {:sourceloc_num 191} true;
  $mid_count.2, $mid.5, $is_active_second.4 := $mid_count.1, $mid.4, $is_active_second.3;
  goto $if.end.28;
$if.end.28:
  assert {:block_sourceloc} {:sourceloc_num 192} true;
  call {:sourceloc_num 193} $bugle_barrier(1bv1, 1bv1);
  assert {:sourceloc} {:sourceloc_num 194} true;
  v100 := $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE20compact_second_chunk[0bv32];
  v101 := 1bv32 == v100;
  goto $truebb30, $falsebb30;
$if.then.30:
  assert {:block_sourceloc} {:sourceloc_num 195} true;
  assert {:sourceloc} {:sourceloc_num 196} true;
  v102 := $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE22num_threads_compaction[0bv32];
  $offset.i.0, $d.i.0 := 1bv32, BV32_LSHR(v102, 1bv32);
  goto $for.cond.i.116;
$for.cond.i.116:
  assert {:block_sourceloc} {:sourceloc_num 197} true;
  v103 := BV32_SGT($d.i.0, 0bv32);
  goto $truebb31, $falsebb31;
$for.body.i.118:
  assert {:block_sourceloc} {:sourceloc_num 198} true;
  call {:sourceloc_num 199} $bugle_barrier(1bv1, 1bv1);
  v104 := BV32_ULT(local_id_x, $d.i.0);
  goto $truebb32, $falsebb32;
$if.then.i.125:
  assert {:block_sourceloc} {:sourceloc_num 200} true;
  v105 := BV32_SUB(BV32_MUL($offset.i.0, BV32_ADD(BV32_MUL(2bv32, local_id_x), 2bv32)), 1bv32);
  assert {:sourceloc} {:sourceloc_num 201} true;
  v106 := $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE17s_compaction_list[BV32_ADD(1bv32, v105)];
  assert {:sourceloc} {:sourceloc_num 202} true;
  v107 := $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE17s_compaction_list[BV32_ADD(1bv32, BV32_SUB(BV32_MUL($offset.i.0, BV32_ADD(BV32_MUL(2bv32, local_id_x), 1bv32)), 1bv32))];
  assert {:sourceloc} {:sourceloc_num 203} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE17s_compaction_list[BV32_ADD(1bv32, v105)] := BV32_ADD(v106, v107);
  goto $if.end.i.127;
$if.end.i.127:
  assert {:block_sourceloc} {:sourceloc_num 204} true;
  $offset.i.0, $d.i.0 := BV32_SHL($offset.i.0, 1bv32), BV32_ASHR($d.i.0, 1bv32);
  goto $for.cond.i.116;
$for.end.i.128:
  assert {:block_sourceloc} {:sourceloc_num 205} true;
  $offset.i.1, $d11.i.0 := $offset.i.0, 2bv32;
  goto $for.cond.12.i;
$for.cond.12.i:
  assert {:block_sourceloc} {:sourceloc_num 206} true;
  v108 := BV32_ULT($d11.i.0, v102);
  goto $truebb33, $falsebb33;
$for.body.14.i:
  assert {:block_sourceloc} {:sourceloc_num 207} true;
  v109 := BV32_LSHR($offset.i.1, 1bv32);
  call {:sourceloc_num 208} $bugle_barrier(1bv1, 1bv1);
  v110 := BV32_ULT(local_id_x, BV32_SUB($d11.i.0, 1bv32));
  goto $truebb34, $falsebb34;
$if.then.18.i:
  assert {:block_sourceloc} {:sourceloc_num 209} true;
  v111 := BV32_SUB(BV32_MUL(v109, BV32_ADD(local_id_x, 1bv32)), 1bv32);
  v112 := BV32_ADD(v111, BV32_LSHR(v109, 1bv32));
  assert {:sourceloc} {:sourceloc_num 210} true;
  v113 := $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE17s_compaction_list[BV32_ADD(1bv32, v112)];
  assert {:sourceloc} {:sourceloc_num 211} true;
  v114 := $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE17s_compaction_list[BV32_ADD(1bv32, v111)];
  assert {:sourceloc} {:sourceloc_num 212} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE17s_compaction_list[BV32_ADD(1bv32, v112)] := BV32_ADD(v113, v114);
  goto $if.end.30.i;
$if.end.30.i:
  assert {:block_sourceloc} {:sourceloc_num 213} true;
  $offset.i.1, $d11.i.0 := v109, BV32_SHL($d11.i.0, 1bv32);
  goto $for.cond.12.i;
$_ZL23createIndicesCompactionIjEvPT_j.exit:
  assert {:block_sourceloc} {:sourceloc_num 214} true;
  call {:sourceloc_num 215} $bugle_barrier(1bv1, 1bv1);
  assert {:sourceloc} {:sourceloc_num 216} true;
  v115 := $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE18num_threads_active[0bv32];
  v116 := BV32_ULT(local_id_x, v115);
  goto $truebb35, $falsebb35;
$land.lhs.true.i.144:
  assert {:block_sourceloc} {:sourceloc_num 217} true;
  v117 := 1bv32 == $is_active_second.4;
  goto $truebb36, $falsebb36;
$if.then.i.151:
  assert {:block_sourceloc} {:sourceloc_num 218} true;
  assert {:sourceloc} {:sourceloc_num 219} true;
  v118 := $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE17s_compaction_list[local_id_x];
  v119 := BV32_ADD(v115, v118);
  assert {:sourceloc} {:sourceloc_num 220} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE6s_left[v119] := $mid.5;
  assert {:sourceloc} {:sourceloc_num 221} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE7s_right[v119] := $right.1;
  assert {:sourceloc} {:sourceloc_num 222} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE12s_left_count[v119] := $mid_count.2;
  assert {:sourceloc} {:sourceloc_num 223} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE13s_right_count[v119] := $right_count.1;
  goto $_ZL16compactIntervalsIjEvPfS0_PT_S2_ffjjS2_jj.exit;
$_ZL16compactIntervalsIjEvPfS0_PT_S2_ffjjS2_jj.exit:
  assert {:block_sourceloc} {:sourceloc_num 224} true;
  goto $if.end.31;
$if.end.31:
  assert {:block_sourceloc} {:sourceloc_num 225} true;
  call {:sourceloc_num 226} $bugle_barrier(1bv1, 1bv1);
  v120 := 0bv32 == local_id_x;
  goto $truebb37, $falsebb37;
$if.then.33:
  assert {:block_sourceloc} {:sourceloc_num 227} true;
  assert {:sourceloc} {:sourceloc_num 228} true;
  v121 := $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE18num_threads_active[0bv32];
  assert {:sourceloc} {:sourceloc_num 229} true;
  v122 := $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE17s_compaction_list[v121];
  assert {:sourceloc} {:sourceloc_num 230} true;
  v123 := $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE18num_threads_active[0bv32];
  assert {:sourceloc} {:sourceloc_num 231} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE18num_threads_active[0bv32] := BV32_ADD(v123, v122);
  assert {:sourceloc} {:sourceloc_num 232} true;
  v124 := $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE18num_threads_active[0bv32];
  v125 := 0bv32 == BV32_AND(v124, BV32_SUB(v124, 1bv32));
  goto $truebb38, $falsebb38;
$if.then.i.161:
  assert {:block_sourceloc} {:sourceloc_num 233} true;
  $retval.i.155.0 := v124;
  goto $_ZL8ceilPow2i.exit168;
$if.end.i.167:
  assert {:block_sourceloc} {:sourceloc_num 234} true;
  v126 := FP32_CONV64(SI32_TO_FP32(v124));
  call {:sourceloc_num 235}   v127 := $__bugle_frexp_exp(v126);
  call {:sourceloc_num 236}   v128 := $__bugle_frexp_frac(v126);
  $retval.i.155.0 := BV32_SHL(1bv32, v127);
  goto $_ZL8ceilPow2i.exit168;
$_ZL8ceilPow2i.exit168:
  assert {:block_sourceloc} {:sourceloc_num 237} true;
  assert {:sourceloc} {:sourceloc_num 238} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE22num_threads_compaction[0bv32] := $retval.i.155.0;
  assert {:sourceloc} {:sourceloc_num 239} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE20compact_second_chunk[0bv32] := 0bv32;
  assert {:sourceloc} {:sourceloc_num 240} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE21all_threads_converged[0bv32] := 1bv32;
  goto $if.end.37;
$if.end.37:
  assert {:block_sourceloc} {:sourceloc_num 241} true;
  call {:sourceloc_num 242} $bugle_barrier(1bv1, 1bv1);
  assert {:sourceloc} {:sourceloc_num 243} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE17s_compaction_list[BV32_ADD(1bv32, local_id_x)] := 0bv32;
  assert {:sourceloc} {:sourceloc_num 244} true;
  $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE17s_compaction_list[BV32_ADD(1bv32, BV32_ADD(local_id_x, group_size_x))] := 0bv32;
  call {:sourceloc_num 245} $bugle_barrier(1bv1, 1bv1);
  $left_count.0, $right.0, $left.0, $mid.0, $right_count.0, $is_active_second.0 := $left_count.1, $right.1, $left.1, $mid.5, $right_count.1, $is_active_second.4;
  goto $while.body;
$while.end:
  assert {:block_sourceloc} {:sourceloc_num 246} true;
  assert {:sourceloc} {:sourceloc_num 247} true;
  v129 := $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE18num_threads_active[0bv32];
  v130 := BV32_ULT(local_id_x, v129);
  goto $truebb39, $falsebb39;
$if.then.42:
  assert {:block_sourceloc} {:sourceloc_num 248} true;
  assert {:sourceloc} {:sourceloc_num 249} true;
  v131 := $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE21c_block_offset_output[0bv32];
  v132 := BV32_ADD(v131, local_id_x);
  assert {:sourceloc} {:sourceloc_num 250} true;
  v133 := $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE6s_left[local_id_x];
  assert {:sourceloc} {:sourceloc_num 251} true;
  $$g_lambda[v132] := v133;
  assert {:sourceloc} {:sourceloc_num 252} true;
  v134 := $$_ZZ31bisectKernelLarge_MultIntervalsPfS_jPjS0_S_S_S0_S0_S_S0_fE13s_right_count[local_id_x];
  assert {:sourceloc} {:sourceloc_num 253} true;
  $$g_pos[v132] := v134;
  goto $if.end.48;
$if.end.48:
  assert {:block_sourceloc} {:sourceloc_num 254} true;
  return;
$truebb:
  assume {:partition} v0;
  assert {:block_sourceloc} {:sourceloc_num 255} true;
  goto $if.then;
$falsebb:
  assume {:partition} !v0;
  assert {:block_sourceloc} {:sourceloc_num 256} true;
  goto $if.end;
$truebb0:
  assume {:partition} v7;
  assert {:block_sourceloc} {:sourceloc_num 257} true;
  goto $if.then.i;
$falsebb0:
  assume {:partition} !v7;
  assert {:block_sourceloc} {:sourceloc_num 258} true;
  goto $if.end.i;
$truebb1:
  assume {:partition} v12;
  assert {:block_sourceloc} {:sourceloc_num 259} true;
  goto $if.then.4;
$falsebb1:
  assume {:partition} !v12;
  assert {:block_sourceloc} {:sourceloc_num 260} true;
  goto $if.end.17;
$truebb2:
  assume {:partition} v26;
  assert {:block_sourceloc} {:sourceloc_num 261} true;
  goto $if.then.i.50;
$falsebb2:
  assume {:partition} !v26;
  assert {:block_sourceloc} {:sourceloc_num 262} true;
  $left_count.1, $right.1, $left.1, $mid.2, $right_count.1 := $left_count.0, $right.0, $left.0, $mid.0, $right_count.0;
  goto $_ZL23subdivideActiveIntervalIjEvjPfS0_PT_S2_jRfS3_RjS4_S3_S4_.exit;
$truebb3:
  assume {:partition} v31;
  assert {:block_sourceloc} {:sourceloc_num 263} true;
  goto $if.then.5.i;
$falsebb3:
  assume {:partition} !v31;
  assert {:block_sourceloc} {:sourceloc_num 264} true;
  goto $if.else.i;
$truebb4:
  assume {:partition} v34;
  assert {:block_sourceloc} {:sourceloc_num 265} true;
  goto $if.then.i.i;
$falsebb4:
  assume {:partition} !v34;
  assert {:block_sourceloc} {:sourceloc_num 266} true;
  goto $if.else.i.i;
$truebb5:
  assume {:partition} v35;
  assert {:block_sourceloc} {:sourceloc_num 267} true;
  goto $if.then.7.i;
$falsebb5:
  assume {:partition} !v35;
  assert {:block_sourceloc} {:sourceloc_num 268} true;
  goto $if.end.i.54;
$truebb6:
  assume {:partition} v37;
  assert {:block_sourceloc} {:sourceloc_num 269} true;
  goto $if.then.19;
$falsebb6:
  assume {:partition} !v37;
  assert {:block_sourceloc} {:sourceloc_num 270} true;
  goto $if.end.20;
$truebb7:
  assume {:partition} v39;
  assert {:block_sourceloc} {:sourceloc_num 271} true;
  goto $for.body.i;
$falsebb7:
  assume {:partition} !v39;
  assert {:block_sourceloc} {:sourceloc_num 272} true;
  goto $_ZL31computeNumSmallerEigenvalsLargePfS_jfjjS_S_j.exit;
$truebb8:
  assume {:partition} v40;
  assert {:block_sourceloc} {:sourceloc_num 273} true;
  goto $if.then.i.59;
$falsebb8:
  assume {:partition} !v40;
  assert {:block_sourceloc} {:sourceloc_num 274} true;
  goto $if.end.i.60;
$truebb9:
  assume {:partition} v43;
  assert {:block_sourceloc} {:sourceloc_num 275} true;
  goto $if.then.8.i;
$falsebb9:
  assume {:partition} !v43;
  assert {:block_sourceloc} {:sourceloc_num 276} true;
  $delta.i.2, $count.i.2 := $delta.i.0, $count.i.0;
  goto $if.end.20.i;
$truebb10:
  assume {:partition} v44;
  assert {:block_sourceloc} {:sourceloc_num 277} true;
  goto $cond.true.i;
$falsebb10:
  assume {:partition} !v44;
  assert {:block_sourceloc} {:sourceloc_num 278} true;
  goto $cond.false.i;
$truebb11:
  assume {:partition} v45;
  assert {:block_sourceloc} {:sourceloc_num 279} true;
  goto $for.body.12.i;
$falsebb11:
  assume {:partition} !v45;
  assert {:block_sourceloc} {:sourceloc_num 280} true;
  goto $for.end.i;
$truebb12:
  assume {:partition} v51;
  assert {:block_sourceloc} {:sourceloc_num 281} true;
  goto $if.then.24;
$falsebb12:
  assume {:partition} !v51;
  assert {:block_sourceloc} {:sourceloc_num 282} true;
  $mid_count.2, $mid.5, $is_active_second.4 := $count.i.0, $mid.2, $is_active_second.0;
  goto $if.end.28;
$truebb13:
  assume {:partition} v52;
  assert {:block_sourceloc} {:sourceloc_num 283} true;
  goto $if.then.26;
$falsebb13:
  assume {:partition} !v52;
  assert {:block_sourceloc} {:sourceloc_num 284} true;
  goto $if.else;
$truebb14:
  assume {:partition} v54;
  assert {:block_sourceloc} {:sourceloc_num 285} true;
  goto $land.lhs.true.i;
$falsebb14:
  assume {:partition} !v54;
  assert {:block_sourceloc} {:sourceloc_num 286} true;
  goto $if.else.i.85;
$truebb15:
  assume {:partition} v55;
  assert {:block_sourceloc} {:sourceloc_num 287} true;
  goto $if.then.i.79;
$falsebb15:
  assume {:partition} !v55;
  assert {:block_sourceloc} {:sourceloc_num 288} true;
  goto $if.else.i.85;
$truebb16:
  assume {:partition} v59;
  assert {:block_sourceloc} {:sourceloc_num 289} true;
  goto $cond.true.i.i;
$falsebb16:
  assume {:partition} !v59;
  assert {:block_sourceloc} {:sourceloc_num 290} true;
  goto $cond.false.i.i;
$truebb17:
  assume {:partition} v64;
  assert {:block_sourceloc} {:sourceloc_num 291} true;
  goto $cond.true.8.i.i;
$falsebb17:
  assume {:partition} !v64;
  assert {:block_sourceloc} {:sourceloc_num 292} true;
  goto $cond.false.10.i.i;
$truebb18:
  assume {:partition} v65;
  assert {:block_sourceloc} {:sourceloc_num 293} true;
  goto $if.then.i.i.81;
$falsebb18:
  assume {:partition} !v65;
  assert {:block_sourceloc} {:sourceloc_num 294} true;
  goto $if.else.i.i.82;
$truebb19:
  assume {:partition} v68;
  assert {:block_sourceloc} {:sourceloc_num 295} true;
  goto $if.then.i.i.i;
$falsebb19:
  assume {:partition} !v68;
  assert {:block_sourceloc} {:sourceloc_num 296} true;
  goto $if.else.i.i.i;
$truebb20:
  assume {:partition} v69;
  assert {:block_sourceloc} {:sourceloc_num 297} true;
  goto $if.then.4.i;
$falsebb20:
  assume {:partition} !v69;
  assert {:block_sourceloc} {:sourceloc_num 298} true;
  goto $if.else.5.i;
$truebb21:
  assume {:partition} v73;
  assert {:block_sourceloc} {:sourceloc_num 299} true;
  goto $cond.true.i.31.i;
$falsebb21:
  assume {:partition} !v73;
  assert {:block_sourceloc} {:sourceloc_num 300} true;
  goto $cond.false.i.33.i;
$truebb22:
  assume {:partition} v78;
  assert {:block_sourceloc} {:sourceloc_num 301} true;
  goto $cond.true.8.i.41.i;
$falsebb22:
  assume {:partition} !v78;
  assert {:block_sourceloc} {:sourceloc_num 302} true;
  goto $cond.false.10.i.42.i;
$truebb23:
  assume {:partition} v79;
  assert {:block_sourceloc} {:sourceloc_num 303} true;
  goto $if.then.i.49.i;
$falsebb23:
  assume {:partition} !v79;
  assert {:block_sourceloc} {:sourceloc_num 304} true;
  goto $if.else.i.62.i;
$truebb24:
  assume {:partition} v82;
  assert {:block_sourceloc} {:sourceloc_num 305} true;
  goto $if.then.i.i.53.i;
$falsebb24:
  assume {:partition} !v82;
  assert {:block_sourceloc} {:sourceloc_num 306} true;
  goto $if.else.i.i.56.i;
$truebb25:
  assume {:partition} v86;
  assert {:block_sourceloc} {:sourceloc_num 307} true;
  goto $cond.true.i.88.i;
$falsebb25:
  assume {:partition} !v86;
  assert {:block_sourceloc} {:sourceloc_num 308} true;
  goto $cond.false.i.90.i;
$truebb26:
  assume {:partition} v91;
  assert {:block_sourceloc} {:sourceloc_num 309} true;
  goto $cond.true.8.i.98.i;
$falsebb26:
  assume {:partition} !v91;
  assert {:block_sourceloc} {:sourceloc_num 310} true;
  goto $cond.false.10.i.99.i;
$truebb27:
  assume {:partition} v92;
  assert {:block_sourceloc} {:sourceloc_num 311} true;
  goto $if.then.i.106.i;
$falsebb27:
  assume {:partition} !v92;
  assert {:block_sourceloc} {:sourceloc_num 312} true;
  goto $if.else.i.119.i;
$truebb28:
  assume {:partition} v95;
  assert {:block_sourceloc} {:sourceloc_num 313} true;
  goto $if.then.i.i.110.i;
$falsebb28:
  assume {:partition} !v95;
  assert {:block_sourceloc} {:sourceloc_num 314} true;
  goto $if.else.i.i.113.i;
$truebb29:
  assume {:partition} v98;
  assert {:block_sourceloc} {:sourceloc_num 315} true;
  goto $if.then.i.107;
$falsebb29:
  assume {:partition} !v98;
  assert {:block_sourceloc} {:sourceloc_num 316} true;
  goto $if.else.i.110;
$truebb30:
  assume {:partition} v101;
  assert {:block_sourceloc} {:sourceloc_num 317} true;
  goto $if.then.30;
$falsebb30:
  assume {:partition} !v101;
  assert {:block_sourceloc} {:sourceloc_num 318} true;
  goto $if.end.31;
$truebb31:
  assume {:partition} v103;
  assert {:block_sourceloc} {:sourceloc_num 319} true;
  goto $for.body.i.118;
$falsebb31:
  assume {:partition} !v103;
  assert {:block_sourceloc} {:sourceloc_num 320} true;
  goto $for.end.i.128;
$truebb32:
  assume {:partition} v104;
  assert {:block_sourceloc} {:sourceloc_num 321} true;
  goto $if.then.i.125;
$falsebb32:
  assume {:partition} !v104;
  assert {:block_sourceloc} {:sourceloc_num 322} true;
  goto $if.end.i.127;
$truebb33:
  assume {:partition} v108;
  assert {:block_sourceloc} {:sourceloc_num 323} true;
  goto $for.body.14.i;
$falsebb33:
  assume {:partition} !v108;
  assert {:block_sourceloc} {:sourceloc_num 324} true;
  goto $_ZL23createIndicesCompactionIjEvPT_j.exit;
$truebb34:
  assume {:partition} v110;
  assert {:block_sourceloc} {:sourceloc_num 325} true;
  goto $if.then.18.i;
$falsebb34:
  assume {:partition} !v110;
  assert {:block_sourceloc} {:sourceloc_num 326} true;
  goto $if.end.30.i;
$truebb35:
  assume {:partition} v116;
  assert {:block_sourceloc} {:sourceloc_num 327} true;
  goto $land.lhs.true.i.144;
$falsebb35:
  assume {:partition} !v116;
  assert {:block_sourceloc} {:sourceloc_num 328} true;
  goto $_ZL16compactIntervalsIjEvPfS0_PT_S2_ffjjS2_jj.exit;
$truebb36:
  assume {:partition} v117;
  assert {:block_sourceloc} {:sourceloc_num 329} true;
  goto $if.then.i.151;
$falsebb36:
  assume {:partition} !v117;
  assert {:block_sourceloc} {:sourceloc_num 330} true;
  goto $_ZL16compactIntervalsIjEvPfS0_PT_S2_ffjjS2_jj.exit;
$truebb37:
  assume {:partition} v120;
  assert {:block_sourceloc} {:sourceloc_num 331} true;
  goto $if.then.33;
$falsebb37:
  assume {:partition} !v120;
  assert {:block_sourceloc} {:sourceloc_num 332} true;
  goto $if.end.37;
$truebb38:
  assume {:partition} v125;
  assert {:block_sourceloc} {:sourceloc_num 333} true;
  goto $if.then.i.161;
$falsebb38:
  assume {:partition} !v125;
  assert {:block_sourceloc} {:sourceloc_num 334} true;
  goto $if.end.i.167;
$truebb39:
  assume {:partition} v130;
  assert {:block_sourceloc} {:sourceloc_num 335} true;
  goto $if.then.42;
$falsebb39:
  assume {:partition} !v130;
  assert {:block_sourceloc} {:sourceloc_num 336} true;
  goto $if.end.48;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
procedure {:source_name "__bugle_frexp_exp"} $__bugle_frexp_exp($0:bv64) returns ($ret:bv32);
procedure {:source_name "__bugle_frexp_frac"} $__bugle_frexp_frac($0:bv64) returns ($ret:bv64);
procedure {:source_name "_Z6sign_ff"} $_Z6sign_ff($0:bv32) returns ($ret:bv32);
procedure {:source_name "abs"} $abs($0:bv32) returns ($ret:bv32);
axiom (if group_size_x == 256bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 11bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
