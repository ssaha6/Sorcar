type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "odata"} {:global} $$odata : [bv32]bv32;
axiom {:array_info "$$odata"} {:global} {:elem_width 32} {:source_name "odata"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$odata : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$odata : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$odata : bool;

var {:source_name "idata"} {:global} $$idata : [bv32]bv32;
axiom {:array_info "$$idata"} {:global} {:elem_width 32} {:source_name "idata"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$idata : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$idata : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$idata : bool;

var {:source_name "tile"} {:group_shared} $$_ZZ18transposeCoalescedPfS_iiiE4tile : [bv32]bv32;
axiom {:array_info "$$_ZZ18transposeCoalescedPfS_iiiE4tile"} {:group_shared} {:elem_width 32} {:source_name "tile"} {:source_elem_width 32} {:source_dimensions "16,16"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,16"} _READ_HAS_OCCURRED_$$_ZZ18transposeCoalescedPfS_iiiE4tile : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,16"} _WRITE_HAS_OCCURRED_$$_ZZ18transposeCoalescedPfS_iiiE4tile : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,16"} _ATOMIC_HAS_OCCURRED_$$_ZZ18transposeCoalescedPfS_iiiE4tile : bool;

const _WATCHED_OFFSET : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_id_y} group_id_y : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:local_id_y} local_id_y : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
procedure {:source_name "transposeCoalesced"} {:kernel} $_Z18transposeCoalescedPfS_iii($width:bv32, $height:bv32, $nreps:bv32)
requires {:sourceloc_num 0} (if $width == 1024bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 1} (if $height == 1024bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 2} (if $nreps == 1bv32 then 1bv1 else 0bv1) != 0bv1;
{
  var $r.0:bv32;
  var $i.0:bv32;
  var $i23.0:bv32;
  var v2:bv32;
  var v4:bv32;
  var v0:bool;
  var v1:bool;
  var v3:bool;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  $r.0 := 0bv32;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  v0 := BV32_SLT($r.0, $nreps);
  goto $truebb, $falsebb;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  $i.0 := 0bv32;
  goto $for.cond.14;
$for.cond.14:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  v1 := BV32_SLT($i.0, 16bv32);
  goto $truebb0, $falsebb0;
$for.body.16:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  assert {:sourceloc} {:sourceloc_num 8} true;
  v2 := $$idata[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(group_id_x, 16bv32), local_id_x), BV32_MUL(BV32_ADD(BV32_MUL(group_id_y, 16bv32), local_id_y), $width)), BV32_MUL($i.0, $width))];
  assert {:sourceloc} {:sourceloc_num 9} true;
  $$_ZZ18transposeCoalescedPfS_iiiE4tile[BV32_ADD(BV32_MUL(BV32_ADD(local_id_y, $i.0), 16bv32), local_id_x)] := v2;
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  $i.0 := BV32_ADD($i.0, 16bv32);
  goto $for.cond.14;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  call {:sourceloc_num 12} $bugle_barrier(1bv1, 1bv1);
  $i23.0 := 0bv32;
  goto $for.cond.24;
$for.cond.24:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  v3 := BV32_SLT($i23.0, 16bv32);
  goto $truebb1, $falsebb1;
$for.body.26:
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  assert {:sourceloc} {:sourceloc_num 15} true;
  v4 := $$_ZZ18transposeCoalescedPfS_iiiE4tile[BV32_ADD(BV32_MUL(local_id_x, 16bv32), BV32_ADD(local_id_y, $i23.0))];
  assert {:sourceloc} {:sourceloc_num 16} true;
  $$odata[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(group_id_y, 16bv32), local_id_x), BV32_MUL(BV32_ADD(BV32_MUL(group_id_x, 16bv32), local_id_y), $height)), BV32_MUL($i23.0, $height))] := v4;
  goto $for.inc.33;
$for.inc.33:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  $i23.0 := BV32_ADD($i23.0, 16bv32);
  goto $for.cond.24;
$for.end.35:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  call {:sourceloc_num 19} $bugle_barrier(1bv1, 1bv1);
  goto $for.inc.36;
$for.inc.36:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  $r.0 := BV32_ADD($r.0, 1bv32);
  goto $for.cond;
$for.end.37:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  return;
$truebb:
  assume {:partition} v0;
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  goto $for.body;
$falsebb:
  assume {:partition} !v0;
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  goto $for.end.37;
$truebb0:
  assume {:partition} v1;
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  goto $for.body.16;
$falsebb0:
  assume {:partition} !v1;
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  goto $for.end;
$truebb1:
  assume {:partition} v3;
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  goto $for.body.26;
$falsebb1:
  assume {:partition} !v3;
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  goto $for.end.35;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 16bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_y == 16bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 64bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 64bv32 then 1bv1 else 0bv1) != 0bv1;
