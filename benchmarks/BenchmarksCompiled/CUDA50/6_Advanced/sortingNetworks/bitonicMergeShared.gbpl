type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "d_DstKey"} {:global} $$d_DstKey : [bv32]bv32;
axiom {:array_info "$$d_DstKey"} {:global} {:elem_width 32} {:source_name "d_DstKey"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_DstKey : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_DstKey : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_DstKey : bool;

var {:source_name "d_DstVal"} {:global} $$d_DstVal : [bv32]bv32;
axiom {:array_info "$$d_DstVal"} {:global} {:elem_width 32} {:source_name "d_DstVal"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_DstVal : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_DstVal : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_DstVal : bool;

var {:source_name "d_SrcKey"} {:global} $$d_SrcKey : [bv32]bv32;
axiom {:array_info "$$d_SrcKey"} {:global} {:elem_width 32} {:source_name "d_SrcKey"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_SrcKey : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_SrcKey : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_SrcKey : bool;

var {:source_name "d_SrcVal"} {:global} $$d_SrcVal : [bv32]bv32;
axiom {:array_info "$$d_SrcVal"} {:global} {:elem_width 32} {:source_name "d_SrcVal"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_SrcVal : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_SrcVal : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_SrcVal : bool;

var {:source_name "s_key"} {:group_shared} $$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_key : [bv32]bv32;
axiom {:array_info "$$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_key"} {:group_shared} {:elem_width 32} {:source_name "s_key"} {:source_elem_width 32} {:source_dimensions "1024"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_key : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_key : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_key : bool;

var {:source_name "s_val"} {:group_shared} $$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_val : [bv32]bv32;
axiom {:array_info "$$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_val"} {:group_shared} {:elem_width 32} {:source_name "s_val"} {:source_elem_width 32} {:source_dimensions "1024"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_val : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_val : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_val : bool;

const _WATCHED_OFFSET : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvand"} BV32_AND(bv32, bv32) : bv32;
function {:bvbuiltin "bvlshr"} BV32_LSHR(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvugt"} BV32_UGT(bv32, bv32) : bool;
function {:bvbuiltin "bvxor"} BV32_XOR(bv32, bv32) : bv32;
function {:bvbuiltin "zero_extend 31"} BV1_ZEXT32(bv1) : bv32;
procedure {:source_name "bitonicMergeShared"} {:kernel} $_Z18bitonicMergeSharedPjS_S_S_jjj($arrayLength:bv32, $size:bv32, $dir:bv32)
requires {:sourceloc_num 0} (if $arrayLength == 2048bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 1} (if $size == 1024bv32 then 1bv1 else 0bv1) != 0bv1;
{
  var $stride.0:bv32;
  var v4:bv32;
  var v0:bv32;
  var v1:bv32;
  var v3:bv32;
  var v2:bv32;
  var v5:bv32;
  var v13:bv32;
  var v6:bv32;
  var v7:bv32;
  var v12:bv32;
  var v15:bv32;
  var v21:bv32;
  var v19:bv32;
  var v17:bv32;
  var v20:bv32;
  var v16:bv32;
  var v22:bv32;
  var v18:bv32;
  var v8:bool;
  var v9:bv32;
  var v10:bv32;
  var v11:bv32;
  var v14:bool;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, 1024bv32), local_id_x);
  v1 := BV32_ADD(BV32_MUL(group_id_x, 1024bv32), local_id_x);
  v2 := BV32_ADD(BV32_MUL(group_id_x, 1024bv32), local_id_x);
  v3 := BV32_ADD(BV32_MUL(group_id_x, 1024bv32), local_id_x);
  assert {:sourceloc} {:sourceloc_num 3} true;
  v4 := $$d_SrcKey[v0];
  assert {:sourceloc} {:sourceloc_num 4} true;
  $$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_key[local_id_x] := v4;
  assert {:sourceloc} {:sourceloc_num 5} true;
  v5 := $$d_SrcVal[v1];
  assert {:sourceloc} {:sourceloc_num 6} true;
  $$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_val[local_id_x] := v5;
  assert {:sourceloc} {:sourceloc_num 7} true;
  v6 := $$d_SrcKey[BV32_ADD(v0, 512bv32)];
  assert {:sourceloc} {:sourceloc_num 8} true;
  $$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_key[BV32_ADD(local_id_x, 512bv32)] := v6;
  assert {:sourceloc} {:sourceloc_num 9} true;
  v7 := $$d_SrcVal[BV32_ADD(v1, 512bv32)];
  assert {:sourceloc} {:sourceloc_num 10} true;
  $$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_val[BV32_ADD(local_id_x, 512bv32)] := v7;
  $stride.0 := 512bv32;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  v8 := BV32_UGT($stride.0, 0bv32);
  goto $truebb, $falsebb;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  call {:sourceloc_num 13} $bugle_barrier(1bv1, 1bv1);
  v9 := BV32_SUB(BV32_MUL(2bv32, local_id_x), BV32_AND(local_id_x, BV32_SUB($stride.0, 1bv32)));
  v10 := BV32_ADD(v9, $stride.0);
  v11 := BV32_ADD(v9, $stride.0);
  assert {:sourceloc} {:sourceloc_num 14} true;
  v12 := $$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_key[v9];
  assert {:sourceloc} {:sourceloc_num 15} true;
  v13 := $$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_key[v10];
  v14 := BV1_ZEXT32((if BV32_UGT(v12, v13) then 1bv1 else 0bv1)) == BV32_XOR($dir, BV1_ZEXT32((if BV32_AND(BV32_AND(BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x), BV32_SUB(BV32_UDIV($arrayLength, 2bv32), 1bv32)), BV32_UDIV($size, 2bv32)) != 0bv32 then 1bv1 else 0bv1)));
  goto $truebb0, $falsebb0;
$if.then.i:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  assert {:sourceloc} {:sourceloc_num 17} true;
  v15 := $$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_key[v9];
  assert {:sourceloc} {:sourceloc_num 18} true;
  v16 := $$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_key[v10];
  assert {:sourceloc} {:sourceloc_num 19} true;
  $$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_key[v9] := v16;
  assert {:sourceloc} {:sourceloc_num 20} true;
  $$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_key[v10] := v15;
  assert {:sourceloc} {:sourceloc_num 21} true;
  v17 := $$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_val[v9];
  assert {:sourceloc} {:sourceloc_num 22} true;
  v18 := $$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_val[v11];
  assert {:sourceloc} {:sourceloc_num 23} true;
  $$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_val[v9] := v18;
  assert {:sourceloc} {:sourceloc_num 24} true;
  $$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_val[v11] := v17;
  goto $_ZL10ComparatorRjS_S_S_j.exit;
$_ZL10ComparatorRjS_S_S_j.exit:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  $stride.0 := BV32_LSHR($stride.0, 1bv32);
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  call {:sourceloc_num 28} $bugle_barrier(1bv1, 1bv1);
  assert {:sourceloc} {:sourceloc_num 29} true;
  v19 := $$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_key[local_id_x];
  assert {:sourceloc} {:sourceloc_num 30} true;
  $$d_DstKey[v2] := v19;
  assert {:sourceloc} {:sourceloc_num 31} true;
  v20 := $$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_val[local_id_x];
  assert {:sourceloc} {:sourceloc_num 32} true;
  $$d_DstVal[v3] := v20;
  assert {:sourceloc} {:sourceloc_num 33} true;
  v21 := $$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_key[BV32_ADD(local_id_x, 512bv32)];
  assert {:sourceloc} {:sourceloc_num 34} true;
  $$d_DstKey[BV32_ADD(v2, 512bv32)] := v21;
  assert {:sourceloc} {:sourceloc_num 35} true;
  v22 := $$_ZZ18bitonicMergeSharedPjS_S_S_jjjE5s_val[BV32_ADD(local_id_x, 512bv32)];
  assert {:sourceloc} {:sourceloc_num 36} true;
  $$d_DstVal[BV32_ADD(v3, 512bv32)] := v22;
  return;
$truebb:
  assume {:partition} v8;
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  goto $for.body;
$falsebb:
  assume {:partition} !v8;
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  goto $for.end;
$truebb0:
  assume {:partition} v14;
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  goto $if.then.i;
$falsebb0:
  assume {:partition} !v14;
  assert {:block_sourceloc} {:sourceloc_num 40} true;
  goto $_ZL10ComparatorRjS_S_S_j.exit;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 512bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 1024bv32 then 1bv1 else 0bv1) != 0bv1;
