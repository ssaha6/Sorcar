type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "output"} {:global} $$output : [bv32]bv32;
axiom {:array_info "$$output"} {:global} {:elem_width 32} {:source_name "output"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$output : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$output : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$output : bool;

var {:source_name "input"} {:global} $$input : [bv32]bv32;
axiom {:array_info "$$input"} {:global} {:elem_width 32} {:source_name "input"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$input : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$input : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$input : bool;

var {:source_name "infront"} $$infront : [bv32]bv32;
axiom {:array_info "$$infront"} {:elem_width 32} {:source_name "infront"} {:source_elem_width 32} {:source_dimensions "4"} true;

var {:source_name "behind"} $$behind : [bv32]bv32;
axiom {:array_info "$$behind"} {:elem_width 32} {:source_name "behind"} {:source_elem_width 32} {:source_dimensions "4"} true;

var {:source_name "tile"} {:group_shared} $$_ZZ23FiniteDifferencesKernelPfPKfiiiE4tile : [bv32]bv32;
axiom {:array_info "$$_ZZ23FiniteDifferencesKernelPfPKfiiiE4tile"} {:group_shared} {:elem_width 32} {:source_name "tile"} {:source_elem_width 32} {:source_dimensions "24,40"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,40"} _READ_HAS_OCCURRED_$$_ZZ23FiniteDifferencesKernelPfPKfiiiE4tile : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,40"} _WRITE_HAS_OCCURRED_$$_ZZ23FiniteDifferencesKernelPfPKfiiiE4tile : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,40"} _ATOMIC_HAS_OCCURRED_$$_ZZ23FiniteDifferencesKernelPfPKfiiiE4tile : bool;

var {:source_name "stencil"} {:constant} $$stencil : [bv32]bv32;
axiom {:array_info "$$stencil"} {:constant} {:elem_width 32} {:source_name "stencil"} {:source_elem_width 32} {:source_dimensions "5"} true;

const _WATCHED_OFFSET : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_id_y} group_id_y : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:local_id_y} local_id_y : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FADD32(bv32, bv32) : bv32;
function FMUL32(bv32, bv32) : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvsge"} BV32_SGE(bv32, bv32) : bool;
function {:bvbuiltin "bvsgt"} BV32_SGT(bv32, bv32) : bool;
function {:bvbuiltin "bvsle"} BV32_SLE(bv32, bv32) : bool;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvurem"} BV32_UREM(bv32, bv32) : bv32;
function {:bvbuiltin "bvxor"} BV1_XOR(bv1, bv1) : bv1;
procedure {:source_name "FiniteDifferencesKernel"} {:kernel} $_Z23FiniteDifferencesKernelPfPKfiii($dimx:bv32, $dimy:bv32, $dimz:bv32)
requires {:sourceloc_num 0} (if $dimx == 96bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 1} (if $dimy == 96bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 2} (if $dimz == 96bv32 then 1bv1 else 0bv1) != 0bv1;
{
  var $validr.0:bv8;
  var $validw.0:bv8;
  var $inputIndex.0:bv32;
  var $i.0:bv32;
  var $current.0:bv32;
  var $inputIndex.1:bv32;
  var $i43.0:bv32;
  var $inputIndex.2:bv32;
  var $outputIndex.0:bv32;
  var $current.1:bv32;
  var $iz.0:bv32;
  var $i81.0:bv32;
  var $i93.0:bv32;
  var $value.0:bv32;
  var $i141.0:bv32;
  var v0:bv32;
  var v1:bv32;
  var v2:bv32;
  var v4:bv32;
  var v6:bool;
  var v5:bv32;
  var v7:bool;
  var v3:bv32;
  var v39:bv32;
  var v40:bv32;
  var v37:bv32;
  var v38:bv32;
  var v33:bv32;
  var v35:bv32;
  var v36:bv32;
  var v41:bv32;
  var v14:bv32;
  var v12:bv32;
  var v8:bool;
  var v9:bool;
  var v10:bool;
  var v11:bool;
  var v43:bv32;
  var v15:bool;
  var v16:bool;
  var v13:bool;
  var v20:bv32;
  var v17:bv32;
  var v28:bv32;
  var v21:bv32;
  var v25:bv32;
  var v23:bv32;
  var v29:bv32;
  var v31:bv32;
  var v32:bv32;
  var v22:bool;
  var v24:bool;
  var v19:bool;
  var v18:bool;
  var v26:bv32;
  var v27:bool;
  var v30:bool;
  var v34:bool;
  var v42:bool;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  v1 := BV32_ADD(BV32_MUL(group_id_y, group_size_y), local_id_y);
  v2 := BV32_ADD($dimx, 8bv32);
  v3 := BV32_MUL(v2, BV32_ADD($dimy, 8bv32));
  v4 := BV32_ADD(local_id_x, 4bv32);
  v5 := BV32_ADD(local_id_y, 4bv32);
  v6 := BV32_SGE(v0, BV32_ADD($dimx, 4bv32));
  goto $truebb, $falsebb;
$lor.lhs.false:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  v7 := BV32_SGE(v1, BV32_ADD($dimy, 4bv32));
  goto $truebb0, $falsebb0;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  $validr.0 := 0bv8;
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  v8 := BV32_SGE(v0, $dimx);
  goto $truebb1, $falsebb1;
$lor.lhs.false.21:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  v9 := BV32_SGE(v1, $dimy);
  goto $truebb2, $falsebb2;
$if.then.23:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  $validw.0 := 0bv8;
  goto $if.end.24;
$if.end.24:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  $inputIndex.0, $i.0 := BV32_ADD(BV32_ADD(BV32_MUL(4bv32, v2), 4bv32), BV32_ADD(BV32_MUL(v1, v2), v0)), 2bv32;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  assert {:originated_from_invariant} {:sourceloc_num 11} (if BV32_SUB($inputIndex.0, BV32_ADD(BV32_ADD(BV32_MUL(BV32_ADD(4bv32, v1), v2), 4bv32), v0)) == BV32_MUL(v3, BV32_SUB(2bv32, $i.0)) then 1bv1 else 0bv1) != 0bv1;
  assert {:originated_from_invariant} {:sourceloc_num 12} (if BV32_SGE($i.0, 4294967295bv32) then 1bv1 else 0bv1) != 0bv1;
  v10 := BV32_SGE($i.0, 0bv32);
  goto $truebb3, $falsebb3;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  v11 := $validr.0[1:0] == 1bv1;
  goto $truebb4, $falsebb4;
$if.then.34:
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  assert {:sourceloc} {:sourceloc_num 15} true;
  v12 := $$input[$inputIndex.0];
  assert {:sourceloc} {:sourceloc_num 16} true;
  $$behind[$i.0] := v12;
  goto $if.end.36;
$if.end.36:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  $inputIndex.0, $i.0 := BV32_ADD($inputIndex.0, v3), BV32_ADD($i.0, 4294967295bv32);
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 19} true;
  v13 := $validr.0[1:0] == 1bv1;
  goto $truebb5, $falsebb5;
$if.then.39:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  assert {:sourceloc} {:sourceloc_num 21} true;
  v14 := $$input[$inputIndex.0];
  $current.0 := v14;
  goto $if.end.41;
$if.end.41:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  $inputIndex.1, $i43.0 := BV32_ADD($inputIndex.0, v3), 0bv32;
  goto $for.cond.44;
$for.cond.44:
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  v15 := BV32_SLT($i43.0, 4bv32);
  goto $truebb6, $falsebb6;
$for.body.46:
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  v16 := $validr.0[1:0] == 1bv1;
  goto $truebb7, $falsebb7;
$if.then.48:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  assert {:sourceloc} {:sourceloc_num 26} true;
  v17 := $$input[$inputIndex.1];
  assert {:sourceloc} {:sourceloc_num 27} true;
  $$infront[$i43.0] := v17;
  goto $if.end.51;
$if.end.51:
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  goto $for.inc.53;
$for.inc.53:
  assert {:block_sourceloc} {:sourceloc_num 29} true;
  $inputIndex.1, $i43.0 := BV32_ADD($inputIndex.1, v3), BV32_ADD($i43.0, 1bv32);
  goto $for.cond.44;
$for.end.54:
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  $inputIndex.2, $outputIndex.0, $current.1, $iz.0 := $inputIndex.1, $inputIndex.0, $current.0, 0bv32;
  goto $for.cond.55;
$for.cond.55:
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  assert {:originated_from_invariant} {:sourceloc_num 32} (if BV32_SUB($outputIndex.0, BV32_ADD(BV32_ADD(BV32_MUL(BV32_ADD(4bv32, v1), v2), 4bv32), v0)) == BV32_MUL(v3, BV32_ADD(3bv32, $iz.0)) then 1bv1 else 0bv1) != 0bv1;
  assert {:originated_from_invariant} {:sourceloc_num 33} (if (_WRITE_HAS_OCCURRED_$$output ==> BV32_UREM(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), BV32_ADD(BV32_ADD(BV32_MUL(BV32_ADD(4bv32, v1), v2), 4bv32), v0)), v3) == 0bv32) then 1bv1 else 0bv1) != 0bv1;
  assert {:originated_from_invariant} {:sourceloc_num 34} (if (BV32_SGE(v0, $dimx) ==> BV1_XOR((if _WRITE_HAS_OCCURRED_$$output then 1bv1 else 0bv1), 1bv1) == 1bv1) then 1bv1 else 0bv1) != 0bv1;
  assert {:originated_from_invariant} {:sourceloc_num 35} (if (BV32_SGE(v1, $dimy) ==> BV1_XOR((if _WRITE_HAS_OCCURRED_$$output then 1bv1 else 0bv1), 1bv1) == 1bv1) then 1bv1 else 0bv1) != 0bv1;
  v18 := BV32_SLT($iz.0, $dimz);
  goto $truebb8, $falsebb8;
$for.body.80:
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  $i81.0 := 3bv32;
  goto $for.cond.82;
$for.cond.82:
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  v19 := BV32_SGT($i81.0, 0bv32);
  goto $truebb9, $falsebb9;
$for.body.84:
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  assert {:sourceloc} {:sourceloc_num 39} true;
  v20 := $$behind[BV32_SUB($i81.0, 1bv32)];
  assert {:sourceloc} {:sourceloc_num 40} true;
  $$behind[$i81.0] := v20;
  goto $for.inc.88;
$for.inc.88:
  assert {:block_sourceloc} {:sourceloc_num 41} true;
  $i81.0 := BV32_ADD($i81.0, 4294967295bv32);
  goto $for.cond.82;
$for.end.90:
  assert {:block_sourceloc} {:sourceloc_num 42} true;
  assert {:sourceloc} {:sourceloc_num 43} true;
  $$behind[0bv32] := $current.1;
  assert {:sourceloc} {:sourceloc_num 44} true;
  v21 := $$infront[0bv32];
  $i93.0 := 0bv32;
  goto $for.cond.94;
$for.cond.94:
  assert {:block_sourceloc} {:sourceloc_num 45} true;
  v22 := BV32_SLT($i93.0, 3bv32);
  goto $truebb10, $falsebb10;
$for.body.96:
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  assert {:sourceloc} {:sourceloc_num 47} true;
  v23 := $$infront[BV32_ADD($i93.0, 1bv32)];
  assert {:sourceloc} {:sourceloc_num 48} true;
  $$infront[$i93.0] := v23;
  goto $for.inc.100;
$for.inc.100:
  assert {:block_sourceloc} {:sourceloc_num 49} true;
  $i93.0 := BV32_ADD($i93.0, 1bv32);
  goto $for.cond.94;
$for.end.102:
  assert {:block_sourceloc} {:sourceloc_num 50} true;
  v24 := $validr.0[1:0] == 1bv1;
  goto $truebb11, $falsebb11;
$if.then.104:
  assert {:block_sourceloc} {:sourceloc_num 51} true;
  assert {:sourceloc} {:sourceloc_num 52} true;
  v25 := $$input[$inputIndex.2];
  assert {:sourceloc} {:sourceloc_num 53} true;
  $$infront[3bv32] := v25;
  goto $if.end.107;
$if.end.107:
  assert {:block_sourceloc} {:sourceloc_num 54} true;
  v26 := BV32_ADD($outputIndex.0, v3);
  call {:sourceloc_num 55} $bugle_barrier(1bv1, 1bv1);
  v27 := BV32_SLT(local_id_y, 4bv32);
  goto $truebb12, $falsebb12;
$if.then.111:
  assert {:block_sourceloc} {:sourceloc_num 56} true;
  assert {:sourceloc} {:sourceloc_num 57} true;
  v28 := $$input[BV32_SUB(v26, BV32_MUL(4bv32, v2))];
  assert {:sourceloc} {:sourceloc_num 58} true;
  $$_ZZ23FiniteDifferencesKernelPfPKfiiiE4tile[BV32_ADD(BV32_MUL(local_id_y, 40bv32), v4)] := v28;
  assert {:sourceloc} {:sourceloc_num 59} true;
  v29 := $$input[BV32_ADD(v26, BV32_MUL(group_size_y, v2))];
  assert {:sourceloc} {:sourceloc_num 60} true;
  $$_ZZ23FiniteDifferencesKernelPfPKfiiiE4tile[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(local_id_y, group_size_y), 4bv32), 40bv32), v4)] := v29;
  goto $if.end.124;
$if.end.124:
  assert {:block_sourceloc} {:sourceloc_num 61} true;
  v30 := BV32_SLT(local_id_x, 4bv32);
  goto $truebb13, $falsebb13;
$if.then.126:
  assert {:block_sourceloc} {:sourceloc_num 62} true;
  assert {:sourceloc} {:sourceloc_num 63} true;
  v31 := $$input[BV32_SUB(v26, 4bv32)];
  assert {:sourceloc} {:sourceloc_num 64} true;
  $$_ZZ23FiniteDifferencesKernelPfPKfiiiE4tile[BV32_ADD(BV32_MUL(v5, 40bv32), local_id_x)] := v31;
  assert {:sourceloc} {:sourceloc_num 65} true;
  v32 := $$input[BV32_ADD(v26, group_size_x)];
  assert {:sourceloc} {:sourceloc_num 66} true;
  $$_ZZ23FiniteDifferencesKernelPfPKfiiiE4tile[BV32_ADD(BV32_MUL(v5, 40bv32), BV32_ADD(BV32_ADD(local_id_x, group_size_x), 4bv32))] := v32;
  goto $if.end.137;
$if.end.137:
  assert {:block_sourceloc} {:sourceloc_num 67} true;
  assert {:sourceloc} {:sourceloc_num 68} true;
  $$_ZZ23FiniteDifferencesKernelPfPKfiiiE4tile[BV32_ADD(BV32_MUL(v5, 40bv32), v4)] := v21;
  call {:sourceloc_num 69} $bugle_barrier(1bv1, 1bv1);
  assert {:sourceloc} {:sourceloc_num 70} true;
  v33 := $$stencil[0bv32];
  $value.0, $i141.0 := FMUL32(v33, v21), 1bv32;
  goto $for.cond.142;
$for.cond.142:
  assert {:block_sourceloc} {:sourceloc_num 71} true;
  v34 := BV32_SLE($i141.0, 4bv32);
  goto $truebb14, $falsebb14;
$for.body.144:
  assert {:block_sourceloc} {:sourceloc_num 72} true;
  assert {:sourceloc} {:sourceloc_num 73} true;
  v35 := $$stencil[$i141.0];
  assert {:sourceloc} {:sourceloc_num 74} true;
  v36 := $$infront[BV32_SUB($i141.0, 1bv32)];
  assert {:sourceloc} {:sourceloc_num 75} true;
  v37 := $$behind[BV32_SUB($i141.0, 1bv32)];
  assert {:sourceloc} {:sourceloc_num 76} true;
  v38 := $$_ZZ23FiniteDifferencesKernelPfPKfiiiE4tile[BV32_ADD(BV32_MUL(BV32_SUB(v5, $i141.0), 40bv32), v4)];
  assert {:sourceloc} {:sourceloc_num 77} true;
  v39 := $$_ZZ23FiniteDifferencesKernelPfPKfiiiE4tile[BV32_ADD(BV32_MUL(BV32_ADD(v5, $i141.0), 40bv32), v4)];
  assert {:sourceloc} {:sourceloc_num 78} true;
  v40 := $$_ZZ23FiniteDifferencesKernelPfPKfiiiE4tile[BV32_ADD(BV32_MUL(v5, 40bv32), BV32_SUB(v4, $i141.0))];
  assert {:sourceloc} {:sourceloc_num 79} true;
  v41 := $$_ZZ23FiniteDifferencesKernelPfPKfiiiE4tile[BV32_ADD(BV32_MUL(v5, 40bv32), BV32_ADD(v4, $i141.0))];
  goto $for.inc.169;
$for.inc.169:
  assert {:block_sourceloc} {:sourceloc_num 80} true;
  $value.0, $i141.0 := FADD32($value.0, FMUL32(v35, FADD32(FADD32(FADD32(FADD32(FADD32(v36, v37), v38), v39), v40), v41))), BV32_ADD($i141.0, 1bv32);
  goto $for.cond.142;
$for.end.171:
  assert {:block_sourceloc} {:sourceloc_num 81} true;
  v42 := $validw.0[1:0] == 1bv1;
  goto $truebb15, $falsebb15;
$if.then.173:
  assert {:block_sourceloc} {:sourceloc_num 82} true;
  assert {:sourceloc} {:sourceloc_num 83} true;
  $$output[v26] := $value.0;
  goto $if.end.175;
$if.end.175:
  assert {:block_sourceloc} {:sourceloc_num 84} true;
  goto $for.inc.176;
$for.inc.176:
  assert {:block_sourceloc} {:sourceloc_num 85} true;
  $inputIndex.2, $outputIndex.0, $current.1, $iz.0 := BV32_ADD($inputIndex.2, v3), v26, v21, BV32_ADD($iz.0, 1bv32);
  goto $for.cond.55;
$for.end.178:
  assert {:block_sourceloc} {:sourceloc_num 86} true;
  return;
$truebb:
  assume {:partition} v6;
  assert {:block_sourceloc} {:sourceloc_num 87} true;
  goto $if.then;
$falsebb:
  assume {:partition} !v6;
  assert {:block_sourceloc} {:sourceloc_num 88} true;
  goto $lor.lhs.false;
$truebb0:
  assume {:partition} v7;
  assert {:block_sourceloc} {:sourceloc_num 89} true;
  goto $if.then;
$falsebb0:
  assume {:partition} !v7;
  assert {:block_sourceloc} {:sourceloc_num 90} true;
  $validr.0 := 1bv8;
  goto $if.end;
$truebb1:
  assume {:partition} v8;
  assert {:block_sourceloc} {:sourceloc_num 91} true;
  goto $if.then.23;
$falsebb1:
  assume {:partition} !v8;
  assert {:block_sourceloc} {:sourceloc_num 92} true;
  goto $lor.lhs.false.21;
$truebb2:
  assume {:partition} v9;
  assert {:block_sourceloc} {:sourceloc_num 93} true;
  goto $if.then.23;
$falsebb2:
  assume {:partition} !v9;
  assert {:block_sourceloc} {:sourceloc_num 94} true;
  $validw.0 := 1bv8;
  goto $if.end.24;
$truebb3:
  assume {:partition} v10;
  assert {:block_sourceloc} {:sourceloc_num 95} true;
  goto $for.body;
$falsebb3:
  assume {:partition} !v10;
  assert {:block_sourceloc} {:sourceloc_num 96} true;
  goto $for.end;
$truebb4:
  assume {:partition} v11;
  assert {:block_sourceloc} {:sourceloc_num 97} true;
  goto $if.then.34;
$falsebb4:
  assume {:partition} !v11;
  assert {:block_sourceloc} {:sourceloc_num 98} true;
  goto $if.end.36;
$truebb5:
  assume {:partition} v13;
  assert {:block_sourceloc} {:sourceloc_num 99} true;
  goto $if.then.39;
$falsebb5:
  assume {:partition} !v13;
  assert {:block_sourceloc} {:sourceloc_num 100} true;
  havoc v43;
  $current.0 := v43;
  goto $if.end.41;
$truebb6:
  assume {:partition} v15;
  assert {:block_sourceloc} {:sourceloc_num 101} true;
  goto $for.body.46;
$falsebb6:
  assume {:partition} !v15;
  assert {:block_sourceloc} {:sourceloc_num 102} true;
  goto $for.end.54;
$truebb7:
  assume {:partition} v16;
  assert {:block_sourceloc} {:sourceloc_num 103} true;
  goto $if.then.48;
$falsebb7:
  assume {:partition} !v16;
  assert {:block_sourceloc} {:sourceloc_num 104} true;
  goto $if.end.51;
$truebb8:
  assume {:partition} v18;
  assert {:block_sourceloc} {:sourceloc_num 105} true;
  goto $for.body.80;
$falsebb8:
  assume {:partition} !v18;
  assert {:block_sourceloc} {:sourceloc_num 106} true;
  goto $for.end.178;
$truebb9:
  assume {:partition} v19;
  assert {:block_sourceloc} {:sourceloc_num 107} true;
  goto $for.body.84;
$falsebb9:
  assume {:partition} !v19;
  assert {:block_sourceloc} {:sourceloc_num 108} true;
  goto $for.end.90;
$truebb10:
  assume {:partition} v22;
  assert {:block_sourceloc} {:sourceloc_num 109} true;
  goto $for.body.96;
$falsebb10:
  assume {:partition} !v22;
  assert {:block_sourceloc} {:sourceloc_num 110} true;
  goto $for.end.102;
$truebb11:
  assume {:partition} v24;
  assert {:block_sourceloc} {:sourceloc_num 111} true;
  goto $if.then.104;
$falsebb11:
  assume {:partition} !v24;
  assert {:block_sourceloc} {:sourceloc_num 112} true;
  goto $if.end.107;
$truebb12:
  assume {:partition} v27;
  assert {:block_sourceloc} {:sourceloc_num 113} true;
  goto $if.then.111;
$falsebb12:
  assume {:partition} !v27;
  assert {:block_sourceloc} {:sourceloc_num 114} true;
  goto $if.end.124;
$truebb13:
  assume {:partition} v30;
  assert {:block_sourceloc} {:sourceloc_num 115} true;
  goto $if.then.126;
$falsebb13:
  assume {:partition} !v30;
  assert {:block_sourceloc} {:sourceloc_num 116} true;
  goto $if.end.137;
$truebb14:
  assume {:partition} v34;
  assert {:block_sourceloc} {:sourceloc_num 117} true;
  goto $for.body.144;
$falsebb14:
  assume {:partition} !v34;
  assert {:block_sourceloc} {:sourceloc_num 118} true;
  goto $for.end.171;
$truebb15:
  assume {:partition} v42;
  assert {:block_sourceloc} {:sourceloc_num 119} true;
  goto $if.then.173;
$falsebb15:
  assume {:partition} !v42;
  assert {:block_sourceloc} {:sourceloc_num 120} true;
  goto $if.end.175;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 32bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_y == 16bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 12bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 24bv32 then 1bv1 else 0bv1) != 0bv1;
