type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "d_DstKey"} {:global} $$d_DstKey : [bv32]bv32;
axiom {:array_info "$$d_DstKey"} {:global} {:elem_width 32} {:source_name "d_DstKey"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_DstKey : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_DstKey : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_DstKey : bool;

var {:source_name "d_DstVal"} {:global} $$d_DstVal : [bv32]bv32;
axiom {:array_info "$$d_DstVal"} {:global} {:elem_width 32} {:source_name "d_DstVal"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_DstVal : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_DstVal : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_DstVal : bool;

var {:source_name "d_SrcKey"} {:global} $$d_SrcKey : [bv32]bv32;
axiom {:array_info "$$d_SrcKey"} {:global} {:elem_width 32} {:source_name "d_SrcKey"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_SrcKey : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_SrcKey : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_SrcKey : bool;

var {:source_name "d_SrcVal"} {:global} $$d_SrcVal : [bv32]bv32;
axiom {:array_info "$$d_SrcVal"} {:global} {:elem_width 32} {:source_name "d_SrcVal"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_SrcVal : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_SrcVal : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_SrcVal : bool;

var {:source_name "s_key"} {:group_shared} $$_ZZ21mergeSortSharedKernelILj1EEvPjS0_S0_S0_jE5s_key : [bv32]bv32;
axiom {:array_info "$$_ZZ21mergeSortSharedKernelILj1EEvPjS0_S0_S0_jE5s_key"} {:group_shared} {:elem_width 32} {:source_name "s_key"} {:source_elem_width 32} {:source_dimensions "1024"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ21mergeSortSharedKernelILj1EEvPjS0_S0_S0_jE5s_key : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ21mergeSortSharedKernelILj1EEvPjS0_S0_S0_jE5s_key : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ21mergeSortSharedKernelILj1EEvPjS0_S0_S0_jE5s_key : bool;

var {:source_name "s_val"} {:group_shared} $$_ZZ21mergeSortSharedKernelILj1EEvPjS0_S0_S0_jE5s_val : [bv32]bv32;
axiom {:array_info "$$_ZZ21mergeSortSharedKernelILj1EEvPjS0_S0_S0_jE5s_val"} {:group_shared} {:elem_width 32} {:source_name "s_val"} {:source_elem_width 32} {:source_dimensions "1024"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ21mergeSortSharedKernelILj1EEvPjS0_S0_S0_jE5s_val : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ21mergeSortSharedKernelILj1EEvPjS0_S0_S0_jE5s_val : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ21mergeSortSharedKernelILj1EEvPjS0_S0_S0_jE5s_val : bool;

const _WATCHED_OFFSET : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvand"} BV32_AND(bv32, bv32) : bv32;
function {:bvbuiltin "bvlshr"} BV32_LSHR(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvshl"} BV32_SHL(bv32, bv32) : bv32;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "bvugt"} BV32_UGT(bv32, bv32) : bool;
function {:bvbuiltin "bvule"} BV32_ULE(bv32, bv32) : bool;
function {:bvbuiltin "bvult"} BV32_ULT(bv32, bv32) : bool;
procedure {:source_name "mergeSortSharedKernel<1>"} {:kernel} $_Z21mergeSortSharedKernelILj1EEvPjS0_S0_S0_j($arrayLength:bv32)
{
  var $stride.0:bv32;
  var $retval.i.0:bv32;
  var $stride.addr.i.0:bv32;
  var $pos.i.0:bv32;
  var $cond.i:bv32;
  var $pos.i.1:bv32;
  var $retval.i.56.0:bv32;
  var $pos.i.61.0:bv32;
  var $stride.addr.i.60.0:bv32;
  var $cond.i.74:bv32;
  var $pos.i.61.1:bv32;
  var v12:bv32;
  var v2:bv32;
  var v1:bv32;
  var v3:bv32;
  var v0:bv32;
  var v4:bv32;
  var v5:bv32;
  var v6:bv32;
  var v7:bv32;
  var v13:bv32;
  var v9:bv32;
  var v10:bv32;
  var v8:bool;
  var v11:bv32;
  var v25:bv32;
  var v19:bv32;
  var v31:bv32;
  var v28:bv32;
  var v30:bv32;
  var v29:bv32;
  var v14:bv32;
  var v15:bv32;
  var v18:bool;
  var v16:bool;
  var v17:bool;
  var v20:bool;
  var v23:bool;
  var v24:bool;
  var v21:bv32;
  var v22:bool;
  var v27:bv32;
  var v26:bool;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, 1024bv32), local_id_x);
  v1 := BV32_ADD(BV32_MUL(group_id_x, 1024bv32), local_id_x);
  v2 := BV32_ADD(BV32_MUL(group_id_x, 1024bv32), local_id_x);
  v3 := BV32_ADD(BV32_MUL(group_id_x, 1024bv32), local_id_x);
  assert {:sourceloc} {:sourceloc_num 1} true;
  v4 := $$d_SrcKey[v0];
  assert {:sourceloc} {:sourceloc_num 2} true;
  $$_ZZ21mergeSortSharedKernelILj1EEvPjS0_S0_S0_jE5s_key[local_id_x] := v4;
  assert {:sourceloc} {:sourceloc_num 3} true;
  v5 := $$d_SrcVal[v1];
  assert {:sourceloc} {:sourceloc_num 4} true;
  $$_ZZ21mergeSortSharedKernelILj1EEvPjS0_S0_S0_jE5s_val[local_id_x] := v5;
  assert {:sourceloc} {:sourceloc_num 5} true;
  v6 := $$d_SrcKey[BV32_ADD(v0, 512bv32)];
  assert {:sourceloc} {:sourceloc_num 6} true;
  $$_ZZ21mergeSortSharedKernelILj1EEvPjS0_S0_S0_jE5s_key[BV32_ADD(local_id_x, 512bv32)] := v6;
  assert {:sourceloc} {:sourceloc_num 7} true;
  v7 := $$d_SrcVal[BV32_ADD(v1, 512bv32)];
  assert {:sourceloc} {:sourceloc_num 8} true;
  $$_ZZ21mergeSortSharedKernelILj1EEvPjS0_S0_S0_jE5s_val[BV32_ADD(local_id_x, 512bv32)] := v7;
  $stride.0 := 1bv32;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  v8 := BV32_ULT($stride.0, $arrayLength);
  goto $truebb, $falsebb;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  v9 := BV32_AND(local_id_x, BV32_SUB($stride.0, 1bv32));
  v10 := BV32_MUL(2bv32, BV32_SUB(local_id_x, v9));
  v11 := BV32_MUL(2bv32, BV32_SUB(local_id_x, v9));
  call {:sourceloc_num 11} $bugle_barrier(1bv1, 1bv1);
  assert {:sourceloc} {:sourceloc_num 12} true;
  v12 := $$_ZZ21mergeSortSharedKernelILj1EEvPjS0_S0_S0_jE5s_key[BV32_ADD(v10, v9)];
  assert {:sourceloc} {:sourceloc_num 13} true;
  v13 := $$_ZZ21mergeSortSharedKernelILj1EEvPjS0_S0_S0_jE5s_val[BV32_ADD(v11, v9)];
  assert {:sourceloc} {:sourceloc_num 14} true;
  v14 := $$_ZZ21mergeSortSharedKernelILj1EEvPjS0_S0_S0_jE5s_key[BV32_ADD(v10, BV32_ADD(v9, $stride.0))];
  assert {:sourceloc} {:sourceloc_num 15} true;
  v15 := $$_ZZ21mergeSortSharedKernelILj1EEvPjS0_S0_S0_jE5s_val[BV32_ADD(v11, BV32_ADD(v9, $stride.0))];
  v16 := $stride.0 == 0bv32;
  goto $truebb0, $falsebb0;
$if.then.i:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  $retval.i.0 := 0bv32;
  goto $_ZL21binarySearchExclusiveILj1EEjjPjjj.exit;
$if.end.i:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  $stride.addr.i.0, $pos.i.0 := $stride.0, 0bv32;
  goto $for.cond.i;
$for.cond.i:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  v17 := BV32_UGT($stride.addr.i.0, 0bv32);
  goto $truebb1, $falsebb1;
$for.body.i:
  assert {:block_sourceloc} {:sourceloc_num 19} true;
  v18 := BV32_ULT(BV32_ADD($pos.i.0, $stride.addr.i.0), $stride.0);
  goto $truebb2, $falsebb2;
$cond.true.i:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  $cond.i := BV32_ADD($pos.i.0, $stride.addr.i.0);
  goto $cond.end.i;
$cond.false.i:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  $cond.i := $stride.0;
  goto $cond.end.i;
$cond.end.i:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  assert {:sourceloc} {:sourceloc_num 23} true;
  v19 := $$_ZZ21mergeSortSharedKernelILj1EEvPjS0_S0_S0_jE5s_key[BV32_ADD(BV32_ADD(v10, $stride.0), BV32_SUB($cond.i, 1bv32))];
  v20 := BV32_ULT(v19, v12);
  goto $truebb3, $falsebb3;
$if.then.5.i:
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  $pos.i.1 := $cond.i;
  goto $if.end.6.i;
$if.end.6.i:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  $stride.addr.i.0, $pos.i.0 := BV32_LSHR($stride.addr.i.0, 1bv32), $pos.i.1;
  goto $for.cond.i;
$for.end.i:
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  $retval.i.0 := $pos.i.0;
  goto $_ZL21binarySearchExclusiveILj1EEjjPjjj.exit;
$_ZL21binarySearchExclusiveILj1EEjjPjjj.exit:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  v21 := BV32_ADD($retval.i.0, v9);
  v22 := $stride.0 == 0bv32;
  goto $truebb4, $falsebb4;
$if.then.i.64:
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  $retval.i.56.0 := 0bv32;
  goto $_ZL21binarySearchInclusiveILj1EEjjPjjj.exit;
$if.end.i.65:
  assert {:block_sourceloc} {:sourceloc_num 29} true;
  $pos.i.61.0, $stride.addr.i.60.0 := 0bv32, $stride.0;
  goto $for.cond.i.67;
$for.cond.i.67:
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  v23 := BV32_UGT($stride.addr.i.60.0, 0bv32);
  goto $truebb5, $falsebb5;
$for.body.i.70:
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  v24 := BV32_ULT(BV32_ADD($pos.i.61.0, $stride.addr.i.60.0), $stride.0);
  goto $truebb6, $falsebb6;
$cond.true.i.72:
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  $cond.i.74 := BV32_ADD($pos.i.61.0, $stride.addr.i.60.0);
  goto $cond.end.i.78;
$cond.false.i.73:
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  $cond.i.74 := $stride.0;
  goto $cond.end.i.78;
$cond.end.i.78:
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  assert {:sourceloc} {:sourceloc_num 35} true;
  v25 := $$_ZZ21mergeSortSharedKernelILj1EEvPjS0_S0_S0_jE5s_key[BV32_ADD(v10, BV32_SUB($cond.i.74, 1bv32))];
  v26 := BV32_ULE(v25, v14);
  goto $truebb7, $falsebb7;
$if.then.5.i.79:
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  $pos.i.61.1 := $cond.i.74;
  goto $if.end.6.i.80;
$if.end.6.i.80:
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  $pos.i.61.0, $stride.addr.i.60.0 := $pos.i.61.1, BV32_LSHR($stride.addr.i.60.0, 1bv32);
  goto $for.cond.i.67;
$for.end.i.82:
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  $retval.i.56.0 := $pos.i.61.0;
  goto $_ZL21binarySearchInclusiveILj1EEjjPjjj.exit;
$_ZL21binarySearchInclusiveILj1EEjjPjjj.exit:
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  v27 := BV32_ADD($retval.i.56.0, v9);
  call {:sourceloc_num 40} $bugle_barrier(1bv1, 1bv1);
  assert {:sourceloc} {:sourceloc_num 41} true;
  $$_ZZ21mergeSortSharedKernelILj1EEvPjS0_S0_S0_jE5s_key[BV32_ADD(v10, v21)] := v12;
  assert {:sourceloc} {:sourceloc_num 42} true;
  $$_ZZ21mergeSortSharedKernelILj1EEvPjS0_S0_S0_jE5s_val[BV32_ADD(v11, v21)] := v13;
  assert {:sourceloc} {:sourceloc_num 43} true;
  $$_ZZ21mergeSortSharedKernelILj1EEvPjS0_S0_S0_jE5s_key[BV32_ADD(v10, v27)] := v14;
  assert {:sourceloc} {:sourceloc_num 44} true;
  $$_ZZ21mergeSortSharedKernelILj1EEvPjS0_S0_S0_jE5s_val[BV32_ADD(v11, v27)] := v15;
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 45} true;
  $stride.0 := BV32_SHL($stride.0, 1bv32);
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  call {:sourceloc_num 47} $bugle_barrier(1bv1, 1bv1);
  assert {:sourceloc} {:sourceloc_num 48} true;
  v28 := $$_ZZ21mergeSortSharedKernelILj1EEvPjS0_S0_S0_jE5s_key[local_id_x];
  assert {:sourceloc} {:sourceloc_num 49} true;
  $$d_DstKey[v2] := v28;
  assert {:sourceloc} {:sourceloc_num 50} true;
  v29 := $$_ZZ21mergeSortSharedKernelILj1EEvPjS0_S0_S0_jE5s_val[local_id_x];
  assert {:sourceloc} {:sourceloc_num 51} true;
  $$d_DstVal[v3] := v29;
  assert {:sourceloc} {:sourceloc_num 52} true;
  v30 := $$_ZZ21mergeSortSharedKernelILj1EEvPjS0_S0_S0_jE5s_key[BV32_ADD(local_id_x, 512bv32)];
  assert {:sourceloc} {:sourceloc_num 53} true;
  $$d_DstKey[BV32_ADD(v2, 512bv32)] := v30;
  assert {:sourceloc} {:sourceloc_num 54} true;
  v31 := $$_ZZ21mergeSortSharedKernelILj1EEvPjS0_S0_S0_jE5s_val[BV32_ADD(local_id_x, 512bv32)];
  assert {:sourceloc} {:sourceloc_num 55} true;
  $$d_DstVal[BV32_ADD(v3, 512bv32)] := v31;
  return;
$truebb:
  assume {:partition} v8;
  assert {:block_sourceloc} {:sourceloc_num 56} true;
  goto $for.body;
$falsebb:
  assume {:partition} !v8;
  assert {:block_sourceloc} {:sourceloc_num 57} true;
  goto $for.end;
$truebb0:
  assume {:partition} v16;
  assert {:block_sourceloc} {:sourceloc_num 58} true;
  goto $if.then.i;
$falsebb0:
  assume {:partition} !v16;
  assert {:block_sourceloc} {:sourceloc_num 59} true;
  goto $if.end.i;
$truebb1:
  assume {:partition} v17;
  assert {:block_sourceloc} {:sourceloc_num 60} true;
  goto $for.body.i;
$falsebb1:
  assume {:partition} !v17;
  assert {:block_sourceloc} {:sourceloc_num 61} true;
  goto $for.end.i;
$truebb2:
  assume {:partition} v18;
  assert {:block_sourceloc} {:sourceloc_num 62} true;
  goto $cond.true.i;
$falsebb2:
  assume {:partition} !v18;
  assert {:block_sourceloc} {:sourceloc_num 63} true;
  goto $cond.false.i;
$truebb3:
  assume {:partition} v20;
  assert {:block_sourceloc} {:sourceloc_num 64} true;
  goto $if.then.5.i;
$falsebb3:
  assume {:partition} !v20;
  assert {:block_sourceloc} {:sourceloc_num 65} true;
  $pos.i.1 := $pos.i.0;
  goto $if.end.6.i;
$truebb4:
  assume {:partition} v22;
  assert {:block_sourceloc} {:sourceloc_num 66} true;
  goto $if.then.i.64;
$falsebb4:
  assume {:partition} !v22;
  assert {:block_sourceloc} {:sourceloc_num 67} true;
  goto $if.end.i.65;
$truebb5:
  assume {:partition} v23;
  assert {:block_sourceloc} {:sourceloc_num 68} true;
  goto $for.body.i.70;
$falsebb5:
  assume {:partition} !v23;
  assert {:block_sourceloc} {:sourceloc_num 69} true;
  goto $for.end.i.82;
$truebb6:
  assume {:partition} v24;
  assert {:block_sourceloc} {:sourceloc_num 70} true;
  goto $cond.true.i.72;
$falsebb6:
  assume {:partition} !v24;
  assert {:block_sourceloc} {:sourceloc_num 71} true;
  goto $cond.false.i.73;
$truebb7:
  assume {:partition} v26;
  assert {:block_sourceloc} {:sourceloc_num 72} true;
  goto $if.then.5.i.79;
$falsebb7:
  assume {:partition} !v26;
  assert {:block_sourceloc} {:sourceloc_num 73} true;
  $pos.i.61.1 := $pos.i.61.0;
  goto $if.end.6.i.80;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 512bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 4096bv32 then 1bv1 else 0bv1) != 0bv1;
