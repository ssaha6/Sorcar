type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "d_DstKey"} {:global} $$d_DstKey : [bv32]bv32;
axiom {:array_info "$$d_DstKey"} {:global} {:elem_width 32} {:source_name "d_DstKey"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_DstKey : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_DstKey : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_DstKey : bool;

var {:source_name "d_DstVal"} {:global} $$d_DstVal : [bv32]bv32;
axiom {:array_info "$$d_DstVal"} {:global} {:elem_width 32} {:source_name "d_DstVal"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_DstVal : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_DstVal : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_DstVal : bool;

var {:source_name "d_SrcKey"} {:global} $$d_SrcKey : [bv32]bv32;
axiom {:array_info "$$d_SrcKey"} {:global} {:elem_width 32} {:source_name "d_SrcKey"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_SrcKey : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_SrcKey : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_SrcKey : bool;

var {:source_name "d_SrcVal"} {:global} $$d_SrcVal : [bv32]bv32;
axiom {:array_info "$$d_SrcVal"} {:global} {:elem_width 32} {:source_name "d_SrcVal"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_SrcVal : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_SrcVal : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_SrcVal : bool;

var {:source_name "d_LimitsA"} {:global} $$d_LimitsA : [bv32]bv32;
axiom {:array_info "$$d_LimitsA"} {:global} {:elem_width 32} {:source_name "d_LimitsA"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_LimitsA : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_LimitsA : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_LimitsA : bool;

var {:source_name "d_LimitsB"} {:global} $$d_LimitsB : [bv32]bv32;
axiom {:array_info "$$d_LimitsB"} {:global} {:elem_width 32} {:source_name "d_LimitsB"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_LimitsB : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_LimitsB : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_LimitsB : bool;

var {:source_name "startSrcA"} {:group_shared} $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startSrcA : [bv32]bv32;
axiom {:array_info "$$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startSrcA"} {:group_shared} {:elem_width 32} {:source_name "startSrcA"} {:source_elem_width 32} {:source_dimensions "1"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startSrcA : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startSrcA : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startSrcA : bool;

var {:source_name "startSrcB"} {:group_shared} $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startSrcB : [bv32]bv32;
axiom {:array_info "$$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startSrcB"} {:group_shared} {:elem_width 32} {:source_name "startSrcB"} {:source_elem_width 32} {:source_dimensions "1"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startSrcB : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startSrcB : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startSrcB : bool;

var {:source_name "lenSrcA"} {:group_shared} $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE7lenSrcA : [bv32]bv32;
axiom {:array_info "$$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE7lenSrcA"} {:group_shared} {:elem_width 32} {:source_name "lenSrcA"} {:source_elem_width 32} {:source_dimensions "1"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE7lenSrcA : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE7lenSrcA : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE7lenSrcA : bool;

var {:source_name "lenSrcB"} {:group_shared} $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE7lenSrcB : [bv32]bv32;
axiom {:array_info "$$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE7lenSrcB"} {:group_shared} {:elem_width 32} {:source_name "lenSrcB"} {:source_elem_width 32} {:source_dimensions "1"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE7lenSrcB : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE7lenSrcB : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE7lenSrcB : bool;

var {:source_name "startDstA"} {:group_shared} $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startDstA : [bv32]bv32;
axiom {:array_info "$$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startDstA"} {:group_shared} {:elem_width 32} {:source_name "startDstA"} {:source_elem_width 32} {:source_dimensions "1"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startDstA : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startDstA : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startDstA : bool;

var {:source_name "startDstB"} {:group_shared} $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startDstB : [bv32]bv32;
axiom {:array_info "$$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startDstB"} {:group_shared} {:elem_width 32} {:source_name "startDstB"} {:source_elem_width 32} {:source_dimensions "1"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startDstB : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startDstB : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startDstB : bool;

var {:source_name "s_key"} {:group_shared} $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_key : [bv32]bv32;
axiom {:array_info "$$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_key"} {:group_shared} {:elem_width 32} {:source_name "s_key"} {:source_elem_width 32} {:source_dimensions "256"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_key : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_key : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_key : bool;

var {:source_name "s_val"} {:group_shared} $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_val : [bv32]bv32;
axiom {:array_info "$$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_val"} {:group_shared} {:elem_width 32} {:source_name "s_val"} {:source_elem_width 32} {:source_dimensions "256"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_val : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_val : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_val : bool;

const _WATCHED_OFFSET : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvand"} BV32_AND(bv32, bv32) : bv32;
function {:bvbuiltin "bvlshr"} BV32_LSHR(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvugt"} BV32_UGT(bv32, bv32) : bool;
function {:bvbuiltin "bvule"} BV32_ULE(bv32, bv32) : bool;
function {:bvbuiltin "bvult"} BV32_ULT(bv32, bv32) : bool;
function {:bvbuiltin "bvurem"} BV32_UREM(bv32, bv32) : bv32;
procedure {:source_name "mergeElementaryIntervalsKernel<1>"} {:kernel} $_Z30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jj($stride:bv32, $N:bv32)
requires {:sourceloc_num 0} (if BV32_AND($stride, BV32_SUB($stride, 1bv32)) == 0bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 1} (if BV32_ULT($stride, $N) then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 2} (if BV32_UGT($stride, 1bv32) then 1bv1 else 0bv1) != 0bv1;
{
  var $cond:bv32;
  var $cond.i.i:bv32;
  var $cond.i.i.99:bv32;
  var $cond25:bv32;
  var $cond33:bv32;
  var $keyA.i.0:bv32;
  var $valA.i.0:bv32;
  var $dstPosA.i.0:bv32;
  var $retval.i.i.0:bv32;
  var $pos.i.i.0:bv32;
  var $stride.addr.i.i.0:bv32;
  var $cond.i.i.88:bv32;
  var $pos.i.i.1:bv32;
  var $keyB.i.0:bv32;
  var $valB.i.0:bv32;
  var $dstPosB.i.0:bv32;
  var $retval.i.19.i.0:bv32;
  var $pos.i.24.i.0:bv32;
  var $stride.addr.i.23.i.0:bv32;
  var $cond.i.37.i:bv32;
  var $pos.i.24.i.1:bv32;
  var v14:bv32;
  var v12:bv32;
  var v16:bv32;
  var v17:bv32;
  var v18:bv32;
  var v13:bv32;
  var v15:bv32;
  var v19:bv32;
  var v24:bv32;
  var v21:bv32;
  var v25:bv32;
  var v27:bv32;
  var v22:bv32;
  var v23:bv32;
  var v28:bv32;
  var v32:bv32;
  var v30:bv32;
  var v31:bv32;
  var v34:bv32;
  var v35:bv32;
  var v29:bv32;
  var v39:bv32;
  var v42:bv32;
  var v8:bv32;
  var v7:bv32;
  var v10:bv32;
  var v2:bool;
  var v1:bv32;
  var v0:bv32;
  var v3:bool;
  var v4:bool;
  var v6:bv32;
  var v5:bool;
  var v9:bool;
  var v11:bool;
  var v20:bool;
  var v26:bool;
  var v36:bool;
  var v33:bool;
  var v70:bv32;
  var v69:bv32;
  var v68:bv32;
  var v66:bv32;
  var v65:bv32;
  var v67:bv32;
  var v37:bool;
  var v38:bool;
  var v40:bool;
  var v41:bool;
  var v46:bool;
  var v44:bool;
  var v45:bool;
  var v43:bv32;
  var v47:bv32;
  var v56:bv32;
  var v60:bv32;
  var v55:bv32;
  var v61:bv32;
  var v51:bv32;
  var v54:bv32;
  var v57:bv32;
  var v59:bv32;
  var v53:bv32;
  var v62:bv32;
  var v63:bv32;
  var v64:bv32;
  var v49:bool;
  var v50:bool;
  var v58:bool;
  var v52:bool;
  var v48:bool;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  v0 := BV32_AND(group_id_x, BV32_SUB(BV32_UDIV(BV32_MUL(2bv32, $stride), 128bv32), 1bv32));
  v1 := BV32_MUL(BV32_SUB(group_id_x, v0), 128bv32);
  v2 := local_id_x == 0bv32;
  goto $truebb, $falsebb;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  v3 := BV32_ULT($stride, BV32_SUB(BV32_SUB($N, v1), $stride));
  goto $truebb0, $falsebb0;
$cond.true:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  $cond := $stride;
  goto $cond.end;
$cond.false:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  $cond := BV32_SUB(BV32_SUB($N, v1), $stride);
  goto $cond.end;
$cond.end:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  v4 := BV32_UREM($stride, 128bv32) == 0bv32;
  goto $truebb1, $falsebb1;
$cond.true.i.i:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  $cond.i.i := BV32_UDIV($stride, 128bv32);
  goto $_ZL14getSampleCountj.exit;
$cond.false.i.i:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  $cond.i.i := BV32_ADD(BV32_UDIV($stride, 128bv32), 1bv32);
  goto $_ZL14getSampleCountj.exit;
$_ZL14getSampleCountj.exit:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  v5 := BV32_UREM($cond, 128bv32) == 0bv32;
  goto $truebb2, $falsebb2;
$cond.true.i.i.95:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  $cond.i.i.99 := BV32_UDIV($cond, 128bv32);
  goto $_ZL14getSampleCountj.exit100;
$cond.false.i.i.98:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  $cond.i.i.99 := BV32_ADD(BV32_UDIV($cond, 128bv32), 1bv32);
  goto $_ZL14getSampleCountj.exit100;
$_ZL14getSampleCountj.exit100:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  v6 := BV32_ADD($cond.i.i, $cond.i.i.99);
  assert {:sourceloc} {:sourceloc_num 14} true;
  v7 := $$d_LimitsA[group_id_x];
  assert {:sourceloc} {:sourceloc_num 15} true;
  $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startSrcA[0bv32] := v7;
  assert {:sourceloc} {:sourceloc_num 16} true;
  v8 := $$d_LimitsB[group_id_x];
  assert {:sourceloc} {:sourceloc_num 17} true;
  $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startSrcB[0bv32] := v8;
  v9 := BV32_ULT(BV32_ADD(v0, 1bv32), v6);
  goto $truebb3, $falsebb3;
$cond.true.20:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  assert {:sourceloc} {:sourceloc_num 19} true;
  v10 := $$d_LimitsA[BV32_ADD(group_id_x, 1bv32)];
  $cond25 := v10;
  goto $cond.end.24;
$cond.false.23:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  $cond25 := $stride;
  goto $cond.end.24;
$cond.end.24:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  v11 := BV32_ULT(BV32_ADD(v0, 1bv32), v6);
  goto $truebb4, $falsebb4;
$cond.true.28:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  assert {:sourceloc} {:sourceloc_num 23} true;
  v12 := $$d_LimitsB[BV32_ADD(group_id_x, 1bv32)];
  $cond33 := v12;
  goto $cond.end.32;
$cond.false.31:
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  $cond33 := $cond;
  goto $cond.end.32;
$cond.end.32:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  assert {:sourceloc} {:sourceloc_num 26} true;
  v13 := $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startSrcA[0bv32];
  assert {:sourceloc} {:sourceloc_num 27} true;
  $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE7lenSrcA[0bv32] := BV32_SUB($cond25, v13);
  assert {:sourceloc} {:sourceloc_num 28} true;
  v14 := $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startSrcB[0bv32];
  assert {:sourceloc} {:sourceloc_num 29} true;
  $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE7lenSrcB[0bv32] := BV32_SUB($cond33, v14);
  assert {:sourceloc} {:sourceloc_num 30} true;
  v15 := $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startSrcA[0bv32];
  assert {:sourceloc} {:sourceloc_num 31} true;
  v16 := $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startSrcB[0bv32];
  assert {:sourceloc} {:sourceloc_num 32} true;
  $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startDstA[0bv32] := BV32_ADD(v15, v16);
  assert {:sourceloc} {:sourceloc_num 33} true;
  v17 := $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startDstA[0bv32];
  assert {:sourceloc} {:sourceloc_num 34} true;
  v18 := $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE7lenSrcA[0bv32];
  assert {:sourceloc} {:sourceloc_num 35} true;
  $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startDstB[0bv32] := BV32_ADD(v17, v18);
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  call {:sourceloc_num 37} $bugle_barrier(1bv1, 1bv1);
  assert {:sourceloc} {:sourceloc_num 38} true;
  v19 := $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE7lenSrcA[0bv32];
  v20 := BV32_ULT(local_id_x, v19);
  goto $truebb5, $falsebb5;
$if.then.39:
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  assert {:sourceloc} {:sourceloc_num 40} true;
  v21 := $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startSrcA[0bv32];
  assert {:sourceloc} {:sourceloc_num 41} true;
  v22 := $$d_SrcKey[BV32_ADD(v1, BV32_ADD(v21, local_id_x))];
  assert {:sourceloc} {:sourceloc_num 42} true;
  $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_key[local_id_x] := v22;
  assert {:sourceloc} {:sourceloc_num 43} true;
  v23 := $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startSrcA[0bv32];
  assert {:sourceloc} {:sourceloc_num 44} true;
  v24 := $$d_SrcVal[BV32_ADD(v1, BV32_ADD(v23, local_id_x))];
  assert {:sourceloc} {:sourceloc_num 45} true;
  $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_val[local_id_x] := v24;
  goto $if.end.50;
$if.end.50:
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  assert {:sourceloc} {:sourceloc_num 47} true;
  v25 := $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE7lenSrcB[0bv32];
  v26 := BV32_ULT(local_id_x, v25);
  goto $truebb6, $falsebb6;
$if.then.52:
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  assert {:sourceloc} {:sourceloc_num 49} true;
  v27 := $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startSrcB[0bv32];
  assert {:sourceloc} {:sourceloc_num 50} true;
  v28 := $$d_SrcKey[BV32_ADD(v1, BV32_ADD(BV32_ADD($stride, v27), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 51} true;
  $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_key[BV32_ADD(local_id_x, 128bv32)] := v28;
  assert {:sourceloc} {:sourceloc_num 52} true;
  v29 := $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startSrcB[0bv32];
  assert {:sourceloc} {:sourceloc_num 53} true;
  v30 := $$d_SrcVal[BV32_ADD(v1, BV32_ADD(BV32_ADD($stride, v29), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 54} true;
  $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_val[BV32_ADD(local_id_x, 128bv32)] := v30;
  goto $if.end.63;
$if.end.63:
  assert {:block_sourceloc} {:sourceloc_num 55} true;
  call {:sourceloc_num 56} $bugle_barrier(1bv1, 1bv1);
  assert {:sourceloc} {:sourceloc_num 57} true;
  v31 := $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE7lenSrcA[0bv32];
  assert {:sourceloc} {:sourceloc_num 58} true;
  v32 := $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE7lenSrcB[0bv32];
  v33 := BV32_ULT(local_id_x, v31);
  goto $truebb7, $falsebb7;
$if.then.i:
  assert {:block_sourceloc} {:sourceloc_num 59} true;
  assert {:sourceloc} {:sourceloc_num 60} true;
  v34 := $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_key[local_id_x];
  assert {:sourceloc} {:sourceloc_num 61} true;
  v35 := $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_val[local_id_x];
  v36 := v32 == 0bv32;
  goto $truebb8, $falsebb8;
$if.then.i.i:
  assert {:block_sourceloc} {:sourceloc_num 62} true;
  $retval.i.i.0 := 0bv32;
  goto $_ZL21binarySearchExclusiveILj1EEjjPjjj.exit.i;
$if.end.i.i:
  assert {:block_sourceloc} {:sourceloc_num 63} true;
  $pos.i.i.0, $stride.addr.i.i.0 := 0bv32, 128bv32;
  goto $for.cond.i.i;
$for.cond.i.i:
  assert {:block_sourceloc} {:sourceloc_num 64} true;
  v37 := BV32_UGT($stride.addr.i.i.0, 0bv32);
  goto $truebb9, $falsebb9;
$for.body.i.i:
  assert {:block_sourceloc} {:sourceloc_num 65} true;
  v38 := BV32_ULT(BV32_ADD($pos.i.i.0, $stride.addr.i.i.0), v32);
  goto $truebb10, $falsebb10;
$cond.true.i.i.86:
  assert {:block_sourceloc} {:sourceloc_num 66} true;
  $cond.i.i.88 := BV32_ADD($pos.i.i.0, $stride.addr.i.i.0);
  goto $cond.end.i.i;
$cond.false.i.i.87:
  assert {:block_sourceloc} {:sourceloc_num 67} true;
  $cond.i.i.88 := v32;
  goto $cond.end.i.i;
$cond.end.i.i:
  assert {:block_sourceloc} {:sourceloc_num 68} true;
  assert {:sourceloc} {:sourceloc_num 69} true;
  v39 := $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_key[BV32_ADD(128bv32, BV32_SUB($cond.i.i.88, 1bv32))];
  v40 := BV32_ULT(v39, v34);
  goto $truebb11, $falsebb11;
$if.then.5.i.i:
  assert {:block_sourceloc} {:sourceloc_num 70} true;
  $pos.i.i.1 := $cond.i.i.88;
  goto $if.end.6.i.i;
$if.end.6.i.i:
  assert {:block_sourceloc} {:sourceloc_num 71} true;
  $pos.i.i.0, $stride.addr.i.i.0 := $pos.i.i.1, BV32_LSHR($stride.addr.i.i.0, 1bv32);
  goto $for.cond.i.i;
$for.end.i.i:
  assert {:block_sourceloc} {:sourceloc_num 72} true;
  $retval.i.i.0 := $pos.i.i.0;
  goto $_ZL21binarySearchExclusiveILj1EEjjPjjj.exit.i;
$_ZL21binarySearchExclusiveILj1EEjjPjjj.exit.i:
  assert {:block_sourceloc} {:sourceloc_num 73} true;
  $keyA.i.0, $valA.i.0, $dstPosA.i.0 := v34, v35, BV32_ADD($retval.i.i.0, local_id_x);
  goto $if.end.i;
$if.end.i:
  assert {:block_sourceloc} {:sourceloc_num 74} true;
  v41 := BV32_ULT(local_id_x, v32);
  goto $truebb12, $falsebb12;
$if.then.3.i:
  assert {:block_sourceloc} {:sourceloc_num 75} true;
  assert {:sourceloc} {:sourceloc_num 76} true;
  v42 := $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_key[BV32_ADD(128bv32, local_id_x)];
  assert {:sourceloc} {:sourceloc_num 77} true;
  v43 := $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_val[BV32_ADD(128bv32, local_id_x)];
  v44 := v31 == 0bv32;
  goto $truebb13, $falsebb13;
$if.then.i.27.i:
  assert {:block_sourceloc} {:sourceloc_num 78} true;
  $retval.i.19.i.0 := 0bv32;
  goto $_ZL21binarySearchInclusiveILj1EEjjPjjj.exit.i;
$if.end.i.28.i:
  assert {:block_sourceloc} {:sourceloc_num 79} true;
  $pos.i.24.i.0, $stride.addr.i.23.i.0 := 0bv32, 128bv32;
  goto $for.cond.i.30.i;
$for.cond.i.30.i:
  assert {:block_sourceloc} {:sourceloc_num 80} true;
  v45 := BV32_UGT($stride.addr.i.23.i.0, 0bv32);
  goto $truebb14, $falsebb14;
$for.body.i.33.i:
  assert {:block_sourceloc} {:sourceloc_num 81} true;
  v46 := BV32_ULT(BV32_ADD($pos.i.24.i.0, $stride.addr.i.23.i.0), v31);
  goto $truebb15, $falsebb15;
$cond.true.i.35.i:
  assert {:block_sourceloc} {:sourceloc_num 82} true;
  $cond.i.37.i := BV32_ADD($pos.i.24.i.0, $stride.addr.i.23.i.0);
  goto $cond.end.i.41.i;
$cond.false.i.36.i:
  assert {:block_sourceloc} {:sourceloc_num 83} true;
  $cond.i.37.i := v31;
  goto $cond.end.i.41.i;
$cond.end.i.41.i:
  assert {:block_sourceloc} {:sourceloc_num 84} true;
  assert {:sourceloc} {:sourceloc_num 85} true;
  v47 := $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_key[BV32_SUB($cond.i.37.i, 1bv32)];
  v48 := BV32_ULE(v47, v42);
  goto $truebb16, $falsebb16;
$if.then.5.i.42.i:
  assert {:block_sourceloc} {:sourceloc_num 86} true;
  $pos.i.24.i.1 := $cond.i.37.i;
  goto $if.end.6.i.43.i;
$if.end.6.i.43.i:
  assert {:block_sourceloc} {:sourceloc_num 87} true;
  $pos.i.24.i.0, $stride.addr.i.23.i.0 := $pos.i.24.i.1, BV32_LSHR($stride.addr.i.23.i.0, 1bv32);
  goto $for.cond.i.30.i;
$for.end.i.45.i:
  assert {:block_sourceloc} {:sourceloc_num 88} true;
  $retval.i.19.i.0 := $pos.i.24.i.0;
  goto $_ZL21binarySearchInclusiveILj1EEjjPjjj.exit.i;
$_ZL21binarySearchInclusiveILj1EEjjPjjj.exit.i:
  assert {:block_sourceloc} {:sourceloc_num 89} true;
  $keyB.i.0, $valB.i.0, $dstPosB.i.0 := v42, v43, BV32_ADD($retval.i.19.i.0, local_id_x);
  goto $if.end.8.i;
$if.end.8.i:
  assert {:block_sourceloc} {:sourceloc_num 90} true;
  call {:sourceloc_num 91} $bugle_barrier(1bv1, 1bv1);
  v49 := BV32_ULT(local_id_x, v31);
  goto $truebb17, $falsebb17;
$if.then.10.i:
  assert {:block_sourceloc} {:sourceloc_num 92} true;
  assert {:sourceloc} {:sourceloc_num 93} true;
  $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_key[$dstPosA.i.0] := $keyA.i.0;
  assert {:sourceloc} {:sourceloc_num 94} true;
  $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_val[$dstPosA.i.0] := $valA.i.0;
  goto $if.end.13.i;
$if.end.13.i:
  assert {:block_sourceloc} {:sourceloc_num 95} true;
  v50 := BV32_ULT(local_id_x, v32);
  goto $truebb18, $falsebb18;
$if.then.15.i:
  assert {:block_sourceloc} {:sourceloc_num 96} true;
  assert {:sourceloc} {:sourceloc_num 97} true;
  $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_key[$dstPosB.i.0] := $keyB.i.0;
  assert {:sourceloc} {:sourceloc_num 98} true;
  $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_val[$dstPosB.i.0] := $valB.i.0;
  goto $_ZL5mergeILj1EEvPjS0_S0_S0_S0_S0_jjjj.exit;
$_ZL5mergeILj1EEvPjS0_S0_S0_S0_S0_jjjj.exit:
  assert {:block_sourceloc} {:sourceloc_num 99} true;
  call {:sourceloc_num 100} $bugle_barrier(1bv1, 1bv1);
  assert {:sourceloc} {:sourceloc_num 101} true;
  v51 := $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE7lenSrcA[0bv32];
  v52 := BV32_ULT(local_id_x, v51);
  goto $truebb19, $falsebb19;
$if.then.65:
  assert {:block_sourceloc} {:sourceloc_num 102} true;
  assert {:sourceloc} {:sourceloc_num 103} true;
  v53 := $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_key[local_id_x];
  assert {:sourceloc} {:sourceloc_num 104} true;
  v54 := $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startDstA[0bv32];
  assert {:sourceloc} {:sourceloc_num 105} true;
  $$d_DstKey[BV32_ADD(v1, BV32_ADD(v54, local_id_x))] := v53;
  assert {:sourceloc} {:sourceloc_num 106} true;
  v55 := $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_val[local_id_x];
  assert {:sourceloc} {:sourceloc_num 107} true;
  v56 := $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startDstA[0bv32];
  assert {:sourceloc} {:sourceloc_num 108} true;
  $$d_DstVal[BV32_ADD(v1, BV32_ADD(v56, local_id_x))] := v55;
  goto $if.end.72;
$if.end.72:
  assert {:block_sourceloc} {:sourceloc_num 109} true;
  assert {:sourceloc} {:sourceloc_num 110} true;
  v57 := $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE7lenSrcB[0bv32];
  v58 := BV32_ULT(local_id_x, v57);
  goto $truebb20, $falsebb20;
$if.then.74:
  assert {:block_sourceloc} {:sourceloc_num 111} true;
  assert {:sourceloc} {:sourceloc_num 112} true;
  v59 := $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE7lenSrcA[0bv32];
  assert {:sourceloc} {:sourceloc_num 113} true;
  v60 := $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_key[BV32_ADD(v59, local_id_x)];
  assert {:sourceloc} {:sourceloc_num 114} true;
  v61 := $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startDstB[0bv32];
  assert {:sourceloc} {:sourceloc_num 115} true;
  $$d_DstKey[BV32_ADD(v1, BV32_ADD(v61, local_id_x))] := v60;
  assert {:sourceloc} {:sourceloc_num 116} true;
  v62 := $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE7lenSrcA[0bv32];
  assert {:sourceloc} {:sourceloc_num 117} true;
  v63 := $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_val[BV32_ADD(v62, local_id_x)];
  assert {:sourceloc} {:sourceloc_num 118} true;
  v64 := $$_ZZ30mergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startDstB[0bv32];
  assert {:sourceloc} {:sourceloc_num 119} true;
  $$d_DstVal[BV32_ADD(v1, BV32_ADD(v64, local_id_x))] := v63;
  goto $if.end.83;
$if.end.83:
  assert {:block_sourceloc} {:sourceloc_num 120} true;
  return;
$truebb:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 121} true;
  goto $if.then;
$falsebb:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 122} true;
  goto $if.end;
$truebb0:
  assume {:partition} v3;
  assert {:block_sourceloc} {:sourceloc_num 123} true;
  goto $cond.true;
$falsebb0:
  assume {:partition} !v3;
  assert {:block_sourceloc} {:sourceloc_num 124} true;
  goto $cond.false;
$truebb1:
  assume {:partition} v4;
  assert {:block_sourceloc} {:sourceloc_num 125} true;
  goto $cond.true.i.i;
$falsebb1:
  assume {:partition} !v4;
  assert {:block_sourceloc} {:sourceloc_num 126} true;
  goto $cond.false.i.i;
$truebb2:
  assume {:partition} v5;
  assert {:block_sourceloc} {:sourceloc_num 127} true;
  goto $cond.true.i.i.95;
$falsebb2:
  assume {:partition} !v5;
  assert {:block_sourceloc} {:sourceloc_num 128} true;
  goto $cond.false.i.i.98;
$truebb3:
  assume {:partition} v9;
  assert {:block_sourceloc} {:sourceloc_num 129} true;
  goto $cond.true.20;
$falsebb3:
  assume {:partition} !v9;
  assert {:block_sourceloc} {:sourceloc_num 130} true;
  goto $cond.false.23;
$truebb4:
  assume {:partition} v11;
  assert {:block_sourceloc} {:sourceloc_num 131} true;
  goto $cond.true.28;
$falsebb4:
  assume {:partition} !v11;
  assert {:block_sourceloc} {:sourceloc_num 132} true;
  goto $cond.false.31;
$truebb5:
  assume {:partition} v20;
  assert {:block_sourceloc} {:sourceloc_num 133} true;
  goto $if.then.39;
$falsebb5:
  assume {:partition} !v20;
  assert {:block_sourceloc} {:sourceloc_num 134} true;
  goto $if.end.50;
$truebb6:
  assume {:partition} v26;
  assert {:block_sourceloc} {:sourceloc_num 135} true;
  goto $if.then.52;
$falsebb6:
  assume {:partition} !v26;
  assert {:block_sourceloc} {:sourceloc_num 136} true;
  goto $if.end.63;
$truebb7:
  assume {:partition} v33;
  assert {:block_sourceloc} {:sourceloc_num 137} true;
  goto $if.then.i;
$falsebb7:
  assume {:partition} !v33;
  assert {:block_sourceloc} {:sourceloc_num 138} true;
  havoc v65;
  havoc v66;
  havoc v67;
  $keyA.i.0, $valA.i.0, $dstPosA.i.0 := v65, v66, v67;
  goto $if.end.i;
$truebb8:
  assume {:partition} v36;
  assert {:block_sourceloc} {:sourceloc_num 139} true;
  goto $if.then.i.i;
$falsebb8:
  assume {:partition} !v36;
  assert {:block_sourceloc} {:sourceloc_num 140} true;
  goto $if.end.i.i;
$truebb9:
  assume {:partition} v37;
  assert {:block_sourceloc} {:sourceloc_num 141} true;
  goto $for.body.i.i;
$falsebb9:
  assume {:partition} !v37;
  assert {:block_sourceloc} {:sourceloc_num 142} true;
  goto $for.end.i.i;
$truebb10:
  assume {:partition} v38;
  assert {:block_sourceloc} {:sourceloc_num 143} true;
  goto $cond.true.i.i.86;
$falsebb10:
  assume {:partition} !v38;
  assert {:block_sourceloc} {:sourceloc_num 144} true;
  goto $cond.false.i.i.87;
$truebb11:
  assume {:partition} v40;
  assert {:block_sourceloc} {:sourceloc_num 145} true;
  goto $if.then.5.i.i;
$falsebb11:
  assume {:partition} !v40;
  assert {:block_sourceloc} {:sourceloc_num 146} true;
  $pos.i.i.1 := $pos.i.i.0;
  goto $if.end.6.i.i;
$truebb12:
  assume {:partition} v41;
  assert {:block_sourceloc} {:sourceloc_num 147} true;
  goto $if.then.3.i;
$falsebb12:
  assume {:partition} !v41;
  assert {:block_sourceloc} {:sourceloc_num 148} true;
  havoc v68;
  havoc v69;
  havoc v70;
  $keyB.i.0, $valB.i.0, $dstPosB.i.0 := v68, v69, v70;
  goto $if.end.8.i;
$truebb13:
  assume {:partition} v44;
  assert {:block_sourceloc} {:sourceloc_num 149} true;
  goto $if.then.i.27.i;
$falsebb13:
  assume {:partition} !v44;
  assert {:block_sourceloc} {:sourceloc_num 150} true;
  goto $if.end.i.28.i;
$truebb14:
  assume {:partition} v45;
  assert {:block_sourceloc} {:sourceloc_num 151} true;
  goto $for.body.i.33.i;
$falsebb14:
  assume {:partition} !v45;
  assert {:block_sourceloc} {:sourceloc_num 152} true;
  goto $for.end.i.45.i;
$truebb15:
  assume {:partition} v46;
  assert {:block_sourceloc} {:sourceloc_num 153} true;
  goto $cond.true.i.35.i;
$falsebb15:
  assume {:partition} !v46;
  assert {:block_sourceloc} {:sourceloc_num 154} true;
  goto $cond.false.i.36.i;
$truebb16:
  assume {:partition} v48;
  assert {:block_sourceloc} {:sourceloc_num 155} true;
  goto $if.then.5.i.42.i;
$falsebb16:
  assume {:partition} !v48;
  assert {:block_sourceloc} {:sourceloc_num 156} true;
  $pos.i.24.i.1 := $pos.i.24.i.0;
  goto $if.end.6.i.43.i;
$truebb17:
  assume {:partition} v49;
  assert {:block_sourceloc} {:sourceloc_num 157} true;
  goto $if.then.10.i;
$falsebb17:
  assume {:partition} !v49;
  assert {:block_sourceloc} {:sourceloc_num 158} true;
  goto $if.end.13.i;
$truebb18:
  assume {:partition} v50;
  assert {:block_sourceloc} {:sourceloc_num 159} true;
  goto $if.then.15.i;
$falsebb18:
  assume {:partition} !v50;
  assert {:block_sourceloc} {:sourceloc_num 160} true;
  goto $_ZL5mergeILj1EEvPjS0_S0_S0_S0_S0_jjjj.exit;
$truebb19:
  assume {:partition} v52;
  assert {:block_sourceloc} {:sourceloc_num 161} true;
  goto $if.then.65;
$falsebb19:
  assume {:partition} !v52;
  assert {:block_sourceloc} {:sourceloc_num 162} true;
  goto $if.end.72;
$truebb20:
  assume {:partition} v58;
  assert {:block_sourceloc} {:sourceloc_num 163} true;
  goto $if.then.74;
$falsebb20:
  assume {:partition} !v58;
  assert {:block_sourceloc} {:sourceloc_num 164} true;
  goto $if.end.83;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 128bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 32768bv32 then 1bv1 else 0bv1) != 0bv1;
