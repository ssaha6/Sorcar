type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "d_DstKey"} {:global} $$d_DstKey : [bv32]bv32;
axiom {:array_info "$$d_DstKey"} {:global} {:elem_width 32} {:source_name "d_DstKey"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_DstKey : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_DstKey : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_DstKey : bool;

var {:source_name "d_DstVal"} {:global} $$d_DstVal : [bv32]bv32;
axiom {:array_info "$$d_DstVal"} {:global} {:elem_width 32} {:source_name "d_DstVal"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_DstVal : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_DstVal : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_DstVal : bool;

var {:source_name "d_SrcKey"} {:global} $$d_SrcKey : [bv32]bv32;
axiom {:array_info "$$d_SrcKey"} {:global} {:elem_width 32} {:source_name "d_SrcKey"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_SrcKey : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_SrcKey : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_SrcKey : bool;

var {:source_name "d_SrcVal"} {:global} $$d_SrcVal : [bv32]bv32;
axiom {:array_info "$$d_SrcVal"} {:global} {:elem_width 32} {:source_name "d_SrcVal"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_SrcVal : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_SrcVal : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_SrcVal : bool;

var {:source_name "d_LimitsA"} {:global} $$d_LimitsA : [bv32]bv32;
axiom {:array_info "$$d_LimitsA"} {:global} {:elem_width 32} {:source_name "d_LimitsA"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_LimitsA : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_LimitsA : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_LimitsA : bool;

var {:source_name "d_LimitsB"} {:global} $$d_LimitsB : [bv32]bv32;
axiom {:array_info "$$d_LimitsB"} {:global} {:elem_width 32} {:source_name "d_LimitsB"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_LimitsB : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_LimitsB : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_LimitsB : bool;

var {:source_name "startSrcA"} {:group_shared} $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startSrcA : [bv32]bv32;
axiom {:array_info "$$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startSrcA"} {:group_shared} {:elem_width 32} {:source_name "startSrcA"} {:source_elem_width 32} {:source_dimensions "1"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startSrcA : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startSrcA : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startSrcA : bool;

var {:source_name "startSrcB"} {:group_shared} $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startSrcB : [bv32]bv32;
axiom {:array_info "$$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startSrcB"} {:group_shared} {:elem_width 32} {:source_name "startSrcB"} {:source_elem_width 32} {:source_dimensions "1"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startSrcB : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startSrcB : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startSrcB : bool;

var {:source_name "startDst"} {:group_shared} $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE8startDst : [bv32]bv32;
axiom {:array_info "$$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE8startDst"} {:group_shared} {:elem_width 32} {:source_name "startDst"} {:source_elem_width 32} {:source_dimensions "1"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE8startDst : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE8startDst : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE8startDst : bool;

var {:source_name "lenSrcA"} {:group_shared} $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE7lenSrcA : [bv32]bv32;
axiom {:array_info "$$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE7lenSrcA"} {:group_shared} {:elem_width 32} {:source_name "lenSrcA"} {:source_elem_width 32} {:source_dimensions "1"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE7lenSrcA : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE7lenSrcA : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE7lenSrcA : bool;

var {:source_name "lenSrcB"} {:group_shared} $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE7lenSrcB : [bv32]bv32;
axiom {:array_info "$$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE7lenSrcB"} {:group_shared} {:elem_width 32} {:source_name "lenSrcB"} {:source_elem_width 32} {:source_dimensions "1"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE7lenSrcB : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE7lenSrcB : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE7lenSrcB : bool;

var {:source_name "s_inf"} {:group_shared} $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_inf : [bv32]bv32;
axiom {:array_info "$$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_inf"} {:group_shared} {:elem_width 32} {:source_name "s_inf"} {:source_elem_width 32} {:source_dimensions "256"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_inf : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_inf : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_inf : bool;

var {:source_name "s_key"} {:group_shared} $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_key : [bv32]bv32;
axiom {:array_info "$$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_key"} {:group_shared} {:elem_width 32} {:source_name "s_key"} {:source_elem_width 32} {:source_dimensions "256"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_key : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_key : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_key : bool;

var {:source_name "s_val"} {:group_shared} $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_val : [bv32]bv32;
axiom {:array_info "$$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_val"} {:group_shared} {:elem_width 32} {:source_name "s_val"} {:source_elem_width 32} {:source_dimensions "256"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_val : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_val : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_val : bool;

const _WATCHED_OFFSET : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvand"} BV32_AND(bv32, bv32) : bv32;
function {:bvbuiltin "bvlshr"} BV32_LSHR(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvugt"} BV32_UGT(bv32, bv32) : bool;
function {:bvbuiltin "bvult"} BV32_ULT(bv32, bv32) : bool;
function {:bvbuiltin "bvurem"} BV32_UREM(bv32, bv32) : bv32;
function {:bvbuiltin "zero_extend 31"} BV1_ZEXT32(bv1) : bv32;
procedure {:source_name "bitonicMergeElementaryIntervalsKernel<1>"} {:kernel} $_Z37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jj($stride:bv32, $N:bv32)
requires {:sourceloc_num 0} (if BV32_AND($stride, BV32_SUB($stride, 1bv32)) == 0bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 1} (if BV32_ULT($stride, $N) then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 2} (if BV32_UGT($stride, 1bv32) then 1bv1 else 0bv1) != 0bv1;
{
  var $cond:bv32;
  var $cond.i.i:bv32;
  var $cond26:bv32;
  var $cond34:bv32;
  var $stride68.0:bv32;
  var v3:bool;
  var v1:bv32;
  var v0:bv32;
  var v2:bool;
  var v35:bv32;
  var v50:bv32;
  var v48:bv32;
  var v47:bv32;
  var v46:bv32;
  var v44:bv32;
  var v51:bv32;
  var v37:bv32;
  var v42:bv32;
  var v45:bv32;
  var v49:bv32;
  var v38:bv32;
  var v40:bv32;
  var v54:bv32;
  var v56:bv32;
  var v61:bv32;
  var v63:bv32;
  var v58:bv32;
  var v59:bv32;
  var v60:bv32;
  var v55:bv32;
  var v52:bv32;
  var v62:bv32;
  var v27:bv32;
  var v20:bv32;
  var v21:bv32;
  var v24:bv32;
  var v22:bv32;
  var v25:bv32;
  var v26:bv32;
  var v33:bv32;
  var v6:bv32;
  var v7:bv32;
  var v9:bv32;
  var v14:bv32;
  var v15:bv32;
  var v11:bv32;
  var v13:bv32;
  var v8:bv32;
  var v16:bv32;
  var v19:bv32;
  var v18:bv32;
  var v4:bool;
  var v5:bv32;
  var v10:bool;
  var v12:bool;
  var v17:bool;
  var v23:bool;
  var v31:bv32;
  var v30:bv32;
  var v28:bool;
  var v29:bv32;
  var v32:bv32;
  var v34:bool;
  var v39:bool;
  var v41:bool;
  var v36:bool;
  var v43:bool;
  var v53:bool;
  var v57:bool;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  v0 := BV32_AND(group_id_x, BV32_SUB(BV32_UDIV(BV32_MUL(2bv32, $stride), 128bv32), 1bv32));
  v1 := BV32_MUL(BV32_SUB(group_id_x, v0), 128bv32);
  v2 := local_id_x == 0bv32;
  goto $truebb, $falsebb;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  v3 := BV32_ULT($stride, BV32_SUB(BV32_SUB($N, v1), $stride));
  goto $truebb0, $falsebb0;
$cond.true:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  $cond := $stride;
  goto $cond.end;
$cond.false:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  $cond := BV32_SUB(BV32_SUB($N, v1), $stride);
  goto $cond.end;
$cond.end:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  v4 := BV32_UREM($cond, 128bv32) == 0bv32;
  goto $truebb1, $falsebb1;
$cond.true.i.i:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  $cond.i.i := BV32_UDIV($cond, 128bv32);
  goto $_ZL14getSampleCountj.exit;
$cond.false.i.i:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  $cond.i.i := BV32_ADD(BV32_UDIV($cond, 128bv32), 1bv32);
  goto $_ZL14getSampleCountj.exit;
$_ZL14getSampleCountj.exit:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  v5 := BV32_ADD(BV32_UDIV($stride, 128bv32), $cond.i.i);
  assert {:sourceloc} {:sourceloc_num 11} true;
  v6 := $$d_LimitsA[group_id_x];
  assert {:sourceloc} {:sourceloc_num 12} true;
  $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startSrcA[0bv32] := v6;
  assert {:sourceloc} {:sourceloc_num 13} true;
  v7 := $$d_LimitsB[group_id_x];
  assert {:sourceloc} {:sourceloc_num 14} true;
  $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startSrcB[0bv32] := v7;
  assert {:sourceloc} {:sourceloc_num 15} true;
  v8 := $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startSrcA[0bv32];
  assert {:sourceloc} {:sourceloc_num 16} true;
  v9 := $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startSrcB[0bv32];
  assert {:sourceloc} {:sourceloc_num 17} true;
  $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE8startDst[0bv32] := BV32_ADD(v8, v9);
  v10 := BV32_ULT(BV32_ADD(v0, 1bv32), v5);
  goto $truebb2, $falsebb2;
$cond.true.21:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  assert {:sourceloc} {:sourceloc_num 19} true;
  v11 := $$d_LimitsA[BV32_ADD(group_id_x, 1bv32)];
  $cond26 := v11;
  goto $cond.end.25;
$cond.false.24:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  $cond26 := $stride;
  goto $cond.end.25;
$cond.end.25:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  v12 := BV32_ULT(BV32_ADD(v0, 1bv32), v5);
  goto $truebb3, $falsebb3;
$cond.true.29:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  assert {:sourceloc} {:sourceloc_num 23} true;
  v13 := $$d_LimitsB[BV32_ADD(group_id_x, 1bv32)];
  $cond34 := v13;
  goto $cond.end.33;
$cond.false.32:
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  $cond34 := $cond;
  goto $cond.end.33;
$cond.end.33:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  assert {:sourceloc} {:sourceloc_num 26} true;
  v14 := $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startSrcA[0bv32];
  assert {:sourceloc} {:sourceloc_num 27} true;
  $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE7lenSrcA[0bv32] := BV32_SUB($cond26, v14);
  assert {:sourceloc} {:sourceloc_num 28} true;
  v15 := $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startSrcB[0bv32];
  assert {:sourceloc} {:sourceloc_num 29} true;
  $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE7lenSrcB[0bv32] := BV32_SUB($cond34, v15);
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  assert {:sourceloc} {:sourceloc_num 31} true;
  $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_inf[local_id_x] := 1bv32;
  assert {:sourceloc} {:sourceloc_num 32} true;
  $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_inf[BV32_ADD(local_id_x, 128bv32)] := 1bv32;
  call {:sourceloc_num 33} $bugle_barrier(1bv1, 1bv1);
  assert {:sourceloc} {:sourceloc_num 34} true;
  v16 := $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE7lenSrcA[0bv32];
  v17 := BV32_ULT(local_id_x, v16);
  goto $truebb4, $falsebb4;
$if.then.42:
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  assert {:sourceloc} {:sourceloc_num 36} true;
  v18 := $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startSrcA[0bv32];
  assert {:sourceloc} {:sourceloc_num 37} true;
  v19 := $$d_SrcKey[BV32_ADD(v1, BV32_ADD(v18, local_id_x))];
  assert {:sourceloc} {:sourceloc_num 38} true;
  $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_key[local_id_x] := v19;
  assert {:sourceloc} {:sourceloc_num 39} true;
  v20 := $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startSrcA[0bv32];
  assert {:sourceloc} {:sourceloc_num 40} true;
  v21 := $$d_SrcVal[BV32_ADD(v1, BV32_ADD(v20, local_id_x))];
  assert {:sourceloc} {:sourceloc_num 41} true;
  $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_val[local_id_x] := v21;
  assert {:sourceloc} {:sourceloc_num 42} true;
  $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_inf[local_id_x] := 0bv32;
  goto $if.end.52;
$if.end.52:
  assert {:block_sourceloc} {:sourceloc_num 43} true;
  assert {:sourceloc} {:sourceloc_num 44} true;
  v22 := $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE7lenSrcB[0bv32];
  v23 := BV32_ULT(local_id_x, v22);
  goto $truebb5, $falsebb5;
$if.then.54:
  assert {:block_sourceloc} {:sourceloc_num 45} true;
  assert {:sourceloc} {:sourceloc_num 46} true;
  v24 := $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startSrcB[0bv32];
  assert {:sourceloc} {:sourceloc_num 47} true;
  v25 := $$d_SrcKey[BV32_ADD(v1, BV32_ADD(BV32_ADD($stride, v24), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 48} true;
  $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_key[BV32_SUB(255bv32, local_id_x)] := v25;
  assert {:sourceloc} {:sourceloc_num 49} true;
  v26 := $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE9startSrcB[0bv32];
  assert {:sourceloc} {:sourceloc_num 50} true;
  v27 := $$d_SrcVal[BV32_ADD(v1, BV32_ADD(BV32_ADD($stride, v26), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 51} true;
  $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_val[BV32_SUB(255bv32, local_id_x)] := v27;
  assert {:sourceloc} {:sourceloc_num 52} true;
  $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_inf[BV32_SUB(255bv32, local_id_x)] := 0bv32;
  goto $if.end.67;
$if.end.67:
  assert {:block_sourceloc} {:sourceloc_num 53} true;
  $stride68.0 := 128bv32;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 54} true;
  v28 := BV32_UGT($stride68.0, 0bv32);
  goto $truebb6, $falsebb6;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 55} true;
  call {:sourceloc_num 56} $bugle_barrier(1bv1, 1bv1);
  v29 := BV32_SUB(BV32_MUL(2bv32, local_id_x), BV32_AND(local_id_x, BV32_SUB($stride68.0, 1bv32)));
  v30 := BV32_ADD(v29, $stride68.0);
  v31 := BV32_ADD(v29, $stride68.0);
  v32 := BV32_ADD(v29, $stride68.0);
  assert {:sourceloc} {:sourceloc_num 57} true;
  v33 := $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_inf[v29];
  v34 := v33 != 0bv32;
  goto $truebb7, $falsebb7;
$lor.lhs.false.i:
  assert {:block_sourceloc} {:sourceloc_num 58} true;
  assert {:sourceloc} {:sourceloc_num 59} true;
  v35 := $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_inf[v32];
  v36 := v35 != 0bv32;
  goto $truebb8, $falsebb8;
$land.lhs.true.i:
  assert {:block_sourceloc} {:sourceloc_num 60} true;
  assert {:sourceloc} {:sourceloc_num 61} true;
  v37 := $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_key[v29];
  assert {:sourceloc} {:sourceloc_num 62} true;
  v38 := $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_key[v30];
  v39 := BV1_ZEXT32((if BV32_UGT(v37, v38) then 1bv1 else 0bv1)) == 1bv32;
  goto $truebb9, $falsebb9;
$lor.lhs.false.3.i:
  assert {:block_sourceloc} {:sourceloc_num 63} true;
  goto $truebb10, $falsebb10;
$land.lhs.true.5.i:
  assert {:block_sourceloc} {:sourceloc_num 64} true;
  assert {:sourceloc} {:sourceloc_num 65} true;
  v40 := $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_inf[v29];
  v41 := v40 == 1bv32;
  goto $truebb11, $falsebb11;
$lor.lhs.false.7.i:
  assert {:block_sourceloc} {:sourceloc_num 66} true;
  goto $truebb12, $falsebb12;
$land.lhs.true.9.i:
  assert {:block_sourceloc} {:sourceloc_num 67} true;
  assert {:sourceloc} {:sourceloc_num 68} true;
  v42 := $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_inf[v32];
  v43 := v42 == 1bv32;
  goto $truebb13, $falsebb13;
$if.then.i:
  assert {:block_sourceloc} {:sourceloc_num 69} true;
  assert {:sourceloc} {:sourceloc_num 70} true;
  v44 := $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_key[v29];
  assert {:sourceloc} {:sourceloc_num 71} true;
  v45 := $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_key[v30];
  assert {:sourceloc} {:sourceloc_num 72} true;
  $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_key[v29] := v45;
  assert {:sourceloc} {:sourceloc_num 73} true;
  $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_key[v30] := v44;
  assert {:sourceloc} {:sourceloc_num 74} true;
  v46 := $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_val[v29];
  assert {:sourceloc} {:sourceloc_num 75} true;
  v47 := $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_val[v31];
  assert {:sourceloc} {:sourceloc_num 76} true;
  $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_val[v29] := v47;
  assert {:sourceloc} {:sourceloc_num 77} true;
  $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_val[v31] := v46;
  assert {:sourceloc} {:sourceloc_num 78} true;
  v48 := $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_inf[v29];
  assert {:sourceloc} {:sourceloc_num 79} true;
  v49 := $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_inf[v32];
  assert {:sourceloc} {:sourceloc_num 80} true;
  $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_inf[v29] := v49;
  assert {:sourceloc} {:sourceloc_num 81} true;
  $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_inf[v32] := v48;
  goto $_ZL18ComparatorExtendedILj1EEvRjS0_S0_S0_S0_S0_j.exit;
$_ZL18ComparatorExtendedILj1EEvRjS0_S0_S0_S0_S0_j.exit:
  assert {:block_sourceloc} {:sourceloc_num 82} true;
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 83} true;
  $stride68.0 := BV32_LSHR($stride68.0, 1bv32);
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 84} true;
  call {:sourceloc_num 85} $bugle_barrier(1bv1, 1bv1);
  assert {:sourceloc} {:sourceloc_num 86} true;
  v50 := $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE8startDst[0bv32];
  assert {:sourceloc} {:sourceloc_num 87} true;
  v51 := $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE8startDst[0bv32];
  assert {:sourceloc} {:sourceloc_num 88} true;
  v52 := $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE7lenSrcA[0bv32];
  v53 := BV32_ULT(local_id_x, v52);
  goto $truebb14, $falsebb14;
$if.then.89:
  assert {:block_sourceloc} {:sourceloc_num 89} true;
  assert {:sourceloc} {:sourceloc_num 90} true;
  v54 := $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_key[local_id_x];
  assert {:sourceloc} {:sourceloc_num 91} true;
  $$d_DstKey[BV32_ADD(BV32_ADD(v1, v50), local_id_x)] := v54;
  assert {:sourceloc} {:sourceloc_num 92} true;
  v55 := $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_val[local_id_x];
  assert {:sourceloc} {:sourceloc_num 93} true;
  $$d_DstVal[BV32_ADD(BV32_ADD(v1, v51), local_id_x)] := v55;
  goto $if.end.94;
$if.end.94:
  assert {:block_sourceloc} {:sourceloc_num 94} true;
  assert {:sourceloc} {:sourceloc_num 95} true;
  v56 := $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE7lenSrcB[0bv32];
  v57 := BV32_ULT(local_id_x, v56);
  goto $truebb15, $falsebb15;
$if.then.96:
  assert {:block_sourceloc} {:sourceloc_num 96} true;
  assert {:sourceloc} {:sourceloc_num 97} true;
  v58 := $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE7lenSrcA[0bv32];
  assert {:sourceloc} {:sourceloc_num 98} true;
  v59 := $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_key[BV32_ADD(v58, local_id_x)];
  assert {:sourceloc} {:sourceloc_num 99} true;
  v60 := $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE7lenSrcA[0bv32];
  assert {:sourceloc} {:sourceloc_num 100} true;
  $$d_DstKey[BV32_ADD(BV32_ADD(v1, v50), BV32_ADD(v60, local_id_x))] := v59;
  assert {:sourceloc} {:sourceloc_num 101} true;
  v61 := $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE7lenSrcA[0bv32];
  assert {:sourceloc} {:sourceloc_num 102} true;
  v62 := $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE5s_val[BV32_ADD(v61, local_id_x)];
  assert {:sourceloc} {:sourceloc_num 103} true;
  v63 := $$_ZZ37bitonicMergeElementaryIntervalsKernelILj1EEvPjS0_S0_S0_S0_S0_jjE7lenSrcA[0bv32];
  assert {:sourceloc} {:sourceloc_num 104} true;
  $$d_DstVal[BV32_ADD(BV32_ADD(v1, v51), BV32_ADD(v63, local_id_x))] := v62;
  goto $if.end.105;
$if.end.105:
  assert {:block_sourceloc} {:sourceloc_num 105} true;
  return;
$truebb:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 106} true;
  goto $if.then;
$falsebb:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 107} true;
  goto $if.end;
$truebb0:
  assume {:partition} v3;
  assert {:block_sourceloc} {:sourceloc_num 108} true;
  goto $cond.true;
$falsebb0:
  assume {:partition} !v3;
  assert {:block_sourceloc} {:sourceloc_num 109} true;
  goto $cond.false;
$truebb1:
  assume {:partition} v4;
  assert {:block_sourceloc} {:sourceloc_num 110} true;
  goto $cond.true.i.i;
$falsebb1:
  assume {:partition} !v4;
  assert {:block_sourceloc} {:sourceloc_num 111} true;
  goto $cond.false.i.i;
$truebb2:
  assume {:partition} v10;
  assert {:block_sourceloc} {:sourceloc_num 112} true;
  goto $cond.true.21;
$falsebb2:
  assume {:partition} !v10;
  assert {:block_sourceloc} {:sourceloc_num 113} true;
  goto $cond.false.24;
$truebb3:
  assume {:partition} v12;
  assert {:block_sourceloc} {:sourceloc_num 114} true;
  goto $cond.true.29;
$falsebb3:
  assume {:partition} !v12;
  assert {:block_sourceloc} {:sourceloc_num 115} true;
  goto $cond.false.32;
$truebb4:
  assume {:partition} v17;
  assert {:block_sourceloc} {:sourceloc_num 116} true;
  goto $if.then.42;
$falsebb4:
  assume {:partition} !v17;
  assert {:block_sourceloc} {:sourceloc_num 117} true;
  goto $if.end.52;
$truebb5:
  assume {:partition} v23;
  assert {:block_sourceloc} {:sourceloc_num 118} true;
  goto $if.then.54;
$falsebb5:
  assume {:partition} !v23;
  assert {:block_sourceloc} {:sourceloc_num 119} true;
  goto $if.end.67;
$truebb6:
  assume {:partition} v28;
  assert {:block_sourceloc} {:sourceloc_num 120} true;
  goto $for.body;
$falsebb6:
  assume {:partition} !v28;
  assert {:block_sourceloc} {:sourceloc_num 121} true;
  goto $for.end;
$truebb7:
  assume {:partition} v34;
  assert {:block_sourceloc} {:sourceloc_num 122} true;
  goto $lor.lhs.false.3.i;
$falsebb7:
  assume {:partition} !v34;
  assert {:block_sourceloc} {:sourceloc_num 123} true;
  goto $lor.lhs.false.i;
$truebb8:
  assume {:partition} v36;
  assert {:block_sourceloc} {:sourceloc_num 124} true;
  goto $lor.lhs.false.3.i;
$falsebb8:
  assume {:partition} !v36;
  assert {:block_sourceloc} {:sourceloc_num 125} true;
  goto $land.lhs.true.i;
$truebb9:
  assume {:partition} v39;
  assert {:block_sourceloc} {:sourceloc_num 126} true;
  goto $if.then.i;
$falsebb9:
  assume {:partition} !v39;
  assert {:block_sourceloc} {:sourceloc_num 127} true;
  goto $lor.lhs.false.3.i;
$truebb10:
  assume {:partition} true;
  assert {:block_sourceloc} {:sourceloc_num 128} true;
  goto $land.lhs.true.5.i;
$falsebb10:
  assume {:partition} false;
  assert {:block_sourceloc} {:sourceloc_num 129} true;
  goto $lor.lhs.false.7.i;
$truebb11:
  assume {:partition} v41;
  assert {:block_sourceloc} {:sourceloc_num 130} true;
  goto $if.then.i;
$falsebb11:
  assume {:partition} !v41;
  assert {:block_sourceloc} {:sourceloc_num 131} true;
  goto $lor.lhs.false.7.i;
$truebb12:
  assume {:partition} false;
  assert {:block_sourceloc} {:sourceloc_num 132} true;
  goto $land.lhs.true.9.i;
$falsebb12:
  assume {:partition} true;
  assert {:block_sourceloc} {:sourceloc_num 133} true;
  goto $_ZL18ComparatorExtendedILj1EEvRjS0_S0_S0_S0_S0_j.exit;
$truebb13:
  assume {:partition} v43;
  assert {:block_sourceloc} {:sourceloc_num 134} true;
  goto $if.then.i;
$falsebb13:
  assume {:partition} !v43;
  assert {:block_sourceloc} {:sourceloc_num 135} true;
  goto $_ZL18ComparatorExtendedILj1EEvRjS0_S0_S0_S0_S0_j.exit;
$truebb14:
  assume {:partition} v53;
  assert {:block_sourceloc} {:sourceloc_num 136} true;
  goto $if.then.89;
$falsebb14:
  assume {:partition} !v53;
  assert {:block_sourceloc} {:sourceloc_num 137} true;
  goto $if.end.94;
$truebb15:
  assume {:partition} v57;
  assert {:block_sourceloc} {:sourceloc_num 138} true;
  goto $if.then.96;
$falsebb15:
  assume {:partition} !v57;
  assert {:block_sourceloc} {:sourceloc_num 139} true;
  goto $if.end.105;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 128bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 8bv32 then 1bv1 else 0bv1) != 0bv1;
