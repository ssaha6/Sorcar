type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "img"} {:global} $$img : [bv32]bv32;
axiom {:array_info "$$img"} {:global} {:elem_width 32} {:source_name "img"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$img : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$img : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$img : bool;

var {:source_name "filter"} {:global} $$filter : [bv32]bv32;
axiom {:array_info "$$filter"} {:global} {:elem_width 32} {:source_name "filter"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$filter : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$filter : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$filter : bool;

var {:source_name "result"} {:global} $$result : [bv32]bv32;
axiom {:array_info "$$result"} {:global} {:elem_width 32} {:source_name "result"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$result : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$result : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$result : bool;

var {:source_name "local_buf"} {:group_shared} $$_ZZ18convolution_tilingPKfS0_PfE9local_buf : [bv32]bv32;
axiom {:array_info "$$_ZZ18convolution_tilingPKfS0_PfE9local_buf"} {:group_shared} {:elem_width 32} {:source_name "local_buf"} {:source_elem_width 32} {:source_dimensions "128"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ18convolution_tilingPKfS0_PfE9local_buf : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ18convolution_tilingPKfS0_PfE9local_buf : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ18convolution_tilingPKfS0_PfE9local_buf : bool;

const _WATCHED_OFFSET : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_id_y} group_id_y : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_y} local_id_y : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FADD32(bv32, bv32) : bv32;
function FMUL32(bv32, bv32) : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvsge"} BV32_SGE(bv32, bv32) : bool;
function {:bvbuiltin "bvsgt"} BV32_SGT(bv32, bv32) : bool;
function {:bvbuiltin "bvsle"} BV32_SLE(bv32, bv32) : bool;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
procedure {:source_name "convolution_tiling"} {:kernel} $_Z18convolution_tilingPKfS0_Pf()
{
  var $cond7:bv32;
  var $cond:bv32;
  var $sum.0:bv32;
  var $k.0:bv32;
  var v0:bv32;
  var v1:bool;
  var v2:bool;
  var v10:bv32;
  var v4:bv32;
  var v9:bv32;
  var v7:bool;
  var v6:bool;
  var v5:bool;
  var v3:bool;
  var v8:bool;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  v0 := BV32_SUB(BV32_ADD(BV32_MUL(group_id_y, 114bv32), local_id_y), 7bv32);
  v1 := BV32_SLT(v0, 0bv32);
  goto $truebb, $falsebb;
$cond.true:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  $cond7 := 0bv32;
  goto $cond.end.6;
$cond.false:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v2 := BV32_SGT(v0, 511bv32);
  goto $truebb0, $falsebb0;
$cond.true.3:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  $cond := 511bv32;
  goto $cond.end;
$cond.false.5:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  $cond := v0;
  goto $cond.end;
$cond.end:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  $cond7 := $cond;
  goto $cond.end.6;
$cond.end.6:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  v3 := BV32_SLT(v0, 519bv32);
  goto $truebb1, $falsebb1;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  assert {:sourceloc} {:sourceloc_num 8} true;
  v4 := $$img[BV32_ADD(BV32_MUL($cond7, 512bv32), group_id_x)];
  assert {:sourceloc} {:sourceloc_num 9} true;
  $$_ZZ18convolution_tilingPKfS0_PfE9local_buf[local_id_y] := v4;
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  call {:sourceloc_num 11} $bugle_barrier(1bv1, 1bv1);
  v5 := BV32_SGE(local_id_y, 7bv32);
  goto $truebb2, $falsebb2;
$land.lhs.true:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  v6 := BV32_SLT(local_id_y, 121bv32);
  goto $truebb3, $falsebb3;
$land.lhs.true.15:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  v7 := BV32_SLT(v0, 512bv32);
  goto $truebb4, $falsebb4;
$if.then.17:
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  $sum.0, $k.0 := 0bv32, 4294967289bv32;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  v8 := BV32_SLE($k.0, 7bv32);
  goto $truebb5, $falsebb5;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  assert {:sourceloc} {:sourceloc_num 17} true;
  v9 := $$_ZZ18convolution_tilingPKfS0_PfE9local_buf[BV32_ADD(local_id_y, $k.0)];
  assert {:sourceloc} {:sourceloc_num 18} true;
  v10 := $$filter[BV32_ADD($k.0, 7bv32)];
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 19} true;
  $sum.0, $k.0 := FADD32($sum.0, FMUL32(v9, v10)), BV32_ADD($k.0, 1bv32);
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  assert {:sourceloc} {:sourceloc_num 21} true;
  $$result[BV32_ADD(BV32_MUL($cond7, 512bv32), group_id_x)] := $sum.0;
  goto $if.end.28;
$if.end.28:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  return;
$truebb:
  assume {:partition} v1;
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  goto $cond.true;
$falsebb:
  assume {:partition} !v1;
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  goto $cond.false;
$truebb0:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  goto $cond.true.3;
$falsebb0:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  goto $cond.false.5;
$truebb1:
  assume {:partition} v3;
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  goto $if.then;
$falsebb1:
  assume {:partition} !v3;
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  goto $if.end;
$truebb2:
  assume {:partition} v5;
  assert {:block_sourceloc} {:sourceloc_num 29} true;
  goto $land.lhs.true;
$falsebb2:
  assume {:partition} !v5;
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  goto $if.end.28;
$truebb3:
  assume {:partition} v6;
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  goto $land.lhs.true.15;
$falsebb3:
  assume {:partition} !v6;
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  goto $if.end.28;
$truebb4:
  assume {:partition} v7;
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  goto $if.then.17;
$falsebb4:
  assume {:partition} !v7;
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  goto $if.end.28;
$truebb5:
  assume {:partition} v8;
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  goto $for.body;
$falsebb5:
  assume {:partition} !v8;
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  goto $for.end;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_y == 128bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 512bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 6bv32 then 1bv1 else 0bv1) != 0bv1;
