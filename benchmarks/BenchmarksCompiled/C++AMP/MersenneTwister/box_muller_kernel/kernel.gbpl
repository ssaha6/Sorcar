type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "random_nums"} {:global} $$random_nums : [bv32]bv32;
axiom {:array_info "$$random_nums"} {:global} {:elem_width 32} {:source_name "random_nums"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$random_nums : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$random_nums : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$random_nums : bool;

var {:source_name "normalized_random_nums"} {:global} $$normalized_random_nums : [bv32]bv32;
axiom {:array_info "$$normalized_random_nums"} {:global} {:elem_width 32} {:source_name "normalized_random_nums"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$normalized_random_nums : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$normalized_random_nums : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$normalized_random_nums : bool;

const _WATCHED_OFFSET : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FCOS64(bv64) : bv64;
function FMUL32(bv32, bv32) : bv32;
function FMUL64(bv64, bv64) : bv64;
function FP32_CONV64(bv32) : bv64;
function FP64_CONV32(bv64) : bv32;
function FSIN64(bv64) : bv64;
function FSQRT64(bv64) : bv64;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
procedure {:source_name "box_muller_kernel"} {:kernel} $_Z17box_muller_kernelPfS_i($n_per_RNG:bv32)
{
  var $out.0:bv32;
  var v0:bv32;
  var v1:bool;
  var v2:bv32;
  var v4:bv64;
  var v3:bv32;
  var v6:bv32;
  var v5:bv32;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  $out.0 := 0bv32;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  v1 := BV32_SLT($out.0, $n_per_RNG);
  goto $truebb, $falsebb;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  assert {:sourceloc} {:sourceloc_num 3} true;
  v2 := $$random_nums[BV32_ADD(BV32_MUL($out.0, 4096bv32), v0)];
  assert {:sourceloc} {:sourceloc_num 4} true;
  v3 := $$random_nums[BV32_ADD(BV32_MUL(BV32_ADD($out.0, 1bv32), 4096bv32), v0)];
  call {:sourceloc_num 5}   v4 := $log(FP32_CONV64(v2));
  v5 := FP64_CONV32(FSQRT64(FMUL64(13835058055282163712bv64, v4)));
  v6 := FMUL32(1086918619bv32, v3);
  assert {:sourceloc} {:sourceloc_num 6} true;
  $$normalized_random_nums[BV32_ADD(BV32_MUL($out.0, 4096bv32), v0)] := FP64_CONV32(FMUL64(FP32_CONV64(v5), FCOS64(FP32_CONV64(v6))));
  assert {:sourceloc} {:sourceloc_num 7} true;
  $$normalized_random_nums[BV32_ADD(BV32_MUL(BV32_ADD($out.0, 1bv32), 4096bv32), v0)] := FP64_CONV32(FMUL64(FP32_CONV64(v5), FSIN64(FP32_CONV64(v6))));
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  $out.0 := BV32_ADD($out.0, 2bv32);
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  return;
$truebb:
  assume {:partition} v1;
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  goto $for.body;
$falsebb:
  assume {:partition} !v1;
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  goto $for.end;
}
procedure {:source_name "log"} $log($0:bv64) returns ($ret:bv64);
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 1024bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 4bv32 then 1bv1 else 0bv1) != 0bv1;
