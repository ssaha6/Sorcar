type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "graph"} {:global} $$graph : [bv32]bv32;
axiom {:array_info "$$graph"} {:global} {:elem_width 32} {:source_name "graph"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$graph : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$graph : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$graph : bool;

var {:source_name "primary_block_buffer"} {:group_shared} $$_ZZ32transitive_closure_stage2_kernelPjiE20primary_block_buffer : [bv32]bv32;
axiom {:array_info "$$_ZZ32transitive_closure_stage2_kernelPjiE20primary_block_buffer"} {:group_shared} {:elem_width 32} {:source_name "primary_block_buffer"} {:source_elem_width 32} {:source_dimensions "8,8"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,8"} _READ_HAS_OCCURRED_$$_ZZ32transitive_closure_stage2_kernelPjiE20primary_block_buffer : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,8"} _WRITE_HAS_OCCURRED_$$_ZZ32transitive_closure_stage2_kernelPjiE20primary_block_buffer : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,8"} _ATOMIC_HAS_OCCURRED_$$_ZZ32transitive_closure_stage2_kernelPjiE20primary_block_buffer : bool;

var {:source_name "curr_block_buffer"} {:group_shared} $$_ZZ32transitive_closure_stage2_kernelPjiE17curr_block_buffer : [bv32]bv32;
axiom {:array_info "$$_ZZ32transitive_closure_stage2_kernelPjiE17curr_block_buffer"} {:group_shared} {:elem_width 32} {:source_name "curr_block_buffer"} {:source_elem_width 32} {:source_dimensions "8,8"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,8"} _READ_HAS_OCCURRED_$$_ZZ32transitive_closure_stage2_kernelPjiE17curr_block_buffer : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,8"} _WRITE_HAS_OCCURRED_$$_ZZ32transitive_closure_stage2_kernelPjiE17curr_block_buffer : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,8"} _ATOMIC_HAS_OCCURRED_$$_ZZ32transitive_closure_stage2_kernelPjiE17curr_block_buffer : bool;

const _WATCHED_OFFSET : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_id_y} group_id_y : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:local_id_y} local_id_y : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvult"} BV32_ULT(bv32, bv32) : bool;
procedure {:source_name "transitive_closure_stage2_kernel"} {:kernel} $_Z32transitive_closure_stage2_kernelPji($passnum:bv32)
{
  var $group_id1.0:bv32;
  var $group_id0.1:bv32;
  var $group_id1.1:bv32;
  var $group_id0.0:bv32;
  var $k.0:bv32;
  var v1:bool;
  var v6:bv32;
  var v0:bv32;
  var v4:bv32;
  var v5:bv32;
  var v2:bool;
  var v3:bool;
  var v12:bool;
  var v14:bool;
  var v10:bool;
  var v7:bool;
  var v9:bool;
  var v13:bv32;
  var v15:bv32;
  var v11:bv32;
  var v8:bv32;
  var v19:bv32;
  var v17:bv32;
  var v16:bool;
  var v18:bool;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  assert {:sourceloc} {:sourceloc_num 1} true;
  v0 := $$graph[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL($passnum, 8bv32), local_id_y), 64bv32), BV32_ADD(BV32_MUL($passnum, 8bv32), local_id_x))];
  assert {:sourceloc} {:sourceloc_num 2} true;
  $$_ZZ32transitive_closure_stage2_kernelPjiE20primary_block_buffer[BV32_ADD(BV32_MUL(local_id_y, 8bv32), local_id_x)] := v0;
  v1 := group_id_y == 0bv32;
  goto $truebb, $falsebb;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  v2 := BV32_ULT(group_id_x, $passnum);
  goto $truebb0, $falsebb0;
$if.then.8:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  $group_id1.0 := group_id_x;
  goto $if.end;
$if.else:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  $group_id1.0 := BV32_ADD(group_id_x, 1bv32);
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  $group_id0.1, $group_id1.1 := $passnum, $group_id1.0;
  goto $if.end.16;
$if.else.10:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  v3 := BV32_ULT(group_id_x, $passnum);
  goto $truebb1, $falsebb1;
$if.then.12:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  $group_id0.0 := group_id_x;
  goto $if.end.15;
$if.else.13:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  $group_id0.0 := BV32_ADD(group_id_x, 1bv32);
  goto $if.end.15;
$if.end.15:
  assert {:block_sourceloc} true;
  $group_id0.1, $group_id1.1 := $group_id0.0, $passnum;
  goto $if.end.16;
$if.end.16:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  v4 := BV32_ADD(BV32_MUL($group_id0.1, 8bv32), local_id_y);
  v5 := BV32_ADD(BV32_MUL($group_id1.1, 8bv32), local_id_x);
  assert {:sourceloc} {:sourceloc_num 11} true;
  v6 := $$graph[BV32_ADD(BV32_MUL(v4, 64bv32), v5)];
  assert {:sourceloc} {:sourceloc_num 12} true;
  $$_ZZ32transitive_closure_stage2_kernelPjiE17curr_block_buffer[BV32_ADD(BV32_MUL(local_id_y, 8bv32), local_id_x)] := v6;
  call {:sourceloc_num 13} $bugle_barrier(1bv1, 1bv1);
  $k.0 := 0bv32;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  v7 := BV32_ULT($k.0, 8bv32);
  goto $truebb2, $falsebb2;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  assert {:sourceloc} {:sourceloc_num 16} true;
  v8 := $$_ZZ32transitive_closure_stage2_kernelPjiE17curr_block_buffer[BV32_ADD(BV32_MUL(local_id_y, 8bv32), local_id_x)];
  v9 := v8 == 0bv32;
  goto $truebb3, $falsebb3;
$if.then.30:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  v10 := group_id_y == 0bv32;
  goto $truebb4, $falsebb4;
$if.then.32:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  assert {:sourceloc} {:sourceloc_num 19} true;
  v11 := $$_ZZ32transitive_closure_stage2_kernelPjiE20primary_block_buffer[BV32_ADD(BV32_MUL(local_id_y, 8bv32), $k.0)];
  v12 := v11 != 0bv32;
  goto $truebb5, $falsebb5;
$land.lhs.true:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  assert {:sourceloc} {:sourceloc_num 21} true;
  v13 := $$_ZZ32transitive_closure_stage2_kernelPjiE17curr_block_buffer[BV32_ADD(BV32_MUL($k.0, 8bv32), local_id_x)];
  v14 := v13 != 0bv32;
  goto $truebb6, $falsebb6;
$if.then.39:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  assert {:sourceloc} {:sourceloc_num 23} true;
  $$_ZZ32transitive_closure_stage2_kernelPjiE17curr_block_buffer[BV32_ADD(BV32_MUL(local_id_y, 8bv32), local_id_x)] := BV32_ADD(BV32_ADD(BV32_MUL($passnum, 8bv32), $k.0), 2bv32);
  goto $if.end.45;
$if.end.45:
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  goto $if.end.61;
$if.else.46:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  assert {:sourceloc} {:sourceloc_num 26} true;
  v15 := $$_ZZ32transitive_closure_stage2_kernelPjiE17curr_block_buffer[BV32_ADD(BV32_MUL(local_id_y, 8bv32), $k.0)];
  v16 := v15 != 0bv32;
  goto $truebb7, $falsebb7;
$land.lhs.true.50:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  assert {:sourceloc} {:sourceloc_num 28} true;
  v17 := $$_ZZ32transitive_closure_stage2_kernelPjiE20primary_block_buffer[BV32_ADD(BV32_MUL($k.0, 8bv32), local_id_x)];
  v18 := v17 != 0bv32;
  goto $truebb8, $falsebb8;
$if.then.54:
  assert {:block_sourceloc} {:sourceloc_num 29} true;
  assert {:sourceloc} {:sourceloc_num 30} true;
  $$_ZZ32transitive_closure_stage2_kernelPjiE17curr_block_buffer[BV32_ADD(BV32_MUL(local_id_y, 8bv32), local_id_x)] := BV32_ADD(BV32_ADD(BV32_MUL($passnum, 8bv32), $k.0), 2bv32);
  goto $if.end.60;
$if.end.60:
  assert {:block_sourceloc} true;
  goto $if.end.61;
$if.end.61:
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  goto $if.end.62;
$if.end.62:
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  call {:sourceloc_num 33} $bugle_barrier(1bv1, 1bv1);
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  $k.0 := BV32_ADD($k.0, 1bv32);
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  assert {:sourceloc} {:sourceloc_num 36} true;
  v19 := $$_ZZ32transitive_closure_stage2_kernelPjiE17curr_block_buffer[BV32_ADD(BV32_MUL(local_id_y, 8bv32), local_id_x)];
  assert {:sourceloc} {:sourceloc_num 37} true;
  $$graph[BV32_ADD(BV32_MUL(v4, 64bv32), v5)] := v19;
  return;
$truebb:
  assume {:partition} v1;
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  goto $if.then;
$falsebb:
  assume {:partition} !v1;
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  goto $if.else.10;
$truebb0:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 40} true;
  goto $if.then.8;
$falsebb0:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 41} true;
  goto $if.else;
$truebb1:
  assume {:partition} v3;
  assert {:block_sourceloc} {:sourceloc_num 42} true;
  goto $if.then.12;
$falsebb1:
  assume {:partition} !v3;
  assert {:block_sourceloc} {:sourceloc_num 43} true;
  goto $if.else.13;
$truebb2:
  assume {:partition} v7;
  assert {:block_sourceloc} {:sourceloc_num 44} true;
  goto $for.body;
$falsebb2:
  assume {:partition} !v7;
  assert {:block_sourceloc} {:sourceloc_num 45} true;
  goto $for.end;
$truebb3:
  assume {:partition} v9;
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  goto $if.then.30;
$falsebb3:
  assume {:partition} !v9;
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  goto $if.end.62;
$truebb4:
  assume {:partition} v10;
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  goto $if.then.32;
$falsebb4:
  assume {:partition} !v10;
  assert {:block_sourceloc} {:sourceloc_num 49} true;
  goto $if.else.46;
$truebb5:
  assume {:partition} v12;
  assert {:block_sourceloc} {:sourceloc_num 50} true;
  goto $land.lhs.true;
$falsebb5:
  assume {:partition} !v12;
  assert {:block_sourceloc} {:sourceloc_num 51} true;
  goto $if.end.45;
$truebb6:
  assume {:partition} v14;
  assert {:block_sourceloc} {:sourceloc_num 52} true;
  goto $if.then.39;
$falsebb6:
  assume {:partition} !v14;
  assert {:block_sourceloc} {:sourceloc_num 53} true;
  goto $if.end.45;
$truebb7:
  assume {:partition} v16;
  assert {:block_sourceloc} {:sourceloc_num 54} true;
  goto $land.lhs.true.50;
$falsebb7:
  assume {:partition} !v16;
  assert {:block_sourceloc} {:sourceloc_num 55} true;
  goto $if.end.60;
$truebb8:
  assume {:partition} v18;
  assert {:block_sourceloc} {:sourceloc_num 56} true;
  goto $if.then.54;
$falsebb8:
  assume {:partition} !v18;
  assert {:block_sourceloc} {:sourceloc_num 57} true;
  goto $if.end.60;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 8bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_y == 8bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
