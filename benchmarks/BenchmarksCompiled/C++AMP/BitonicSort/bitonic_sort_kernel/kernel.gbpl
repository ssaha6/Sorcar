type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "data"} {:global} $$data : [bv32]bv32;
axiom {:array_info "$$data"} {:global} {:elem_width 32} {:source_name "data"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$data : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$data : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$data : bool;

var {:source_name "sh_data"} {:group_shared} $$_ZZ19bitonic_sort_kernelPfjjE7sh_data : [bv32]bv32;
axiom {:array_info "$$_ZZ19bitonic_sort_kernelPfjjE7sh_data"} {:group_shared} {:elem_width 32} {:source_name "sh_data"} {:source_elem_width 32} {:source_dimensions "512"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ19bitonic_sort_kernelPfjjE7sh_data : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ19bitonic_sort_kernelPfjjE7sh_data : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ19bitonic_sort_kernelPfjjE7sh_data : bool;

const _WATCHED_OFFSET : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FEQ32(bv32, bv32) : bool;
function FLT32(bv32, bv32) : bool;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvand"} BV32_AND(bv32, bv32) : bv32;
function {:bvbuiltin "bvlshr"} BV32_LSHR(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvor"} BV32_OR(bv32, bv32) : bv32;
function {:bvbuiltin "bvugt"} BV32_UGT(bv32, bv32) : bool;
function {:bvbuiltin "bvxor"} BV32_XOR(bv32, bv32) : bv32;
function {:bvbuiltin "zero_extend 31"} BV1_ZEXT32(bv1) : bv32;
procedure {:source_name "bitonic_sort_kernel"} {:kernel} $_Z19bitonic_sort_kernelPfjj($ulevel:bv32, $ulevelmask:bv32)
{
  var $j.0:bv32;
  var $cond:bv32;
  var v0:bv32;
  var v2:bool;
  var v4:bv32;
  var v6:bv32;
  var v1:bv32;
  var v3:bv32;
  var v7:bv32;
  var v8:bv32;
  var v5:bool;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  assert {:sourceloc} {:sourceloc_num 1} true;
  v1 := $$data[v0];
  assert {:sourceloc} {:sourceloc_num 2} true;
  $$_ZZ19bitonic_sort_kernelPfjjE7sh_data[local_id_x] := v1;
  call {:sourceloc_num 3} $bugle_barrier(1bv1, 1bv1);
  $j.0 := BV32_LSHR($ulevel, 1bv32);
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  v2 := BV32_UGT($j.0, 0bv32);
  goto $truebb, $falsebb;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  assert {:sourceloc} {:sourceloc_num 6} true;
  v3 := $$_ZZ19bitonic_sort_kernelPfjjE7sh_data[BV32_AND(local_id_x, BV32_XOR($j.0, 4294967295bv32))];
  assert {:sourceloc} {:sourceloc_num 7} true;
  v4 := $$_ZZ19bitonic_sort_kernelPfjjE7sh_data[BV32_OR(local_id_x, $j.0)];
  v5 := BV1_ZEXT32((if FEQ32(v3, v4) || FLT32(v3, v4) then 1bv1 else 0bv1)) == BV1_ZEXT32((if BV32_AND($ulevelmask, v0) != 0bv32 then 1bv1 else 0bv1));
  goto $truebb0, $falsebb0;
$cond.true:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  assert {:sourceloc} {:sourceloc_num 9} true;
  v6 := $$_ZZ19bitonic_sort_kernelPfjjE7sh_data[BV32_XOR(local_id_x, $j.0)];
  $cond := v6;
  goto $cond.end;
$cond.false:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  assert {:sourceloc} {:sourceloc_num 11} true;
  v7 := $$_ZZ19bitonic_sort_kernelPfjjE7sh_data[local_id_x];
  $cond := v7;
  goto $cond.end;
$cond.end:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  call {:sourceloc_num 13} $bugle_barrier(1bv1, 1bv1);
  assert {:sourceloc} {:sourceloc_num 14} true;
  $$_ZZ19bitonic_sort_kernelPfjjE7sh_data[local_id_x] := $cond;
  call {:sourceloc_num 15} $bugle_barrier(1bv1, 1bv1);
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  $j.0 := BV32_LSHR($j.0, 1bv32);
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  assert {:sourceloc} {:sourceloc_num 18} true;
  v8 := $$_ZZ19bitonic_sort_kernelPfjjE7sh_data[local_id_x];
  assert {:sourceloc} {:sourceloc_num 19} true;
  $$data[v0] := v8;
  return;
$truebb:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  goto $for.body;
$falsebb:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  goto $for.end;
$truebb0:
  assume {:partition} v5;
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  goto $cond.true;
$falsebb0:
  assume {:partition} !v5;
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  goto $cond.false;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 512bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 512bv32 then 1bv1 else 0bv1) != 0bv1;
