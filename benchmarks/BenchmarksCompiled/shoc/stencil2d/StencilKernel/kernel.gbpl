type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "data"} {:global} $$data : [bv32]bv32;
axiom {:array_info "$$data"} {:global} {:elem_width 32} {:source_name "data"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$data : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$data : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$data : bool;

var {:source_name "newData"} {:global} $$newData : [bv32]bv32;
axiom {:array_info "$$newData"} {:global} {:elem_width 32} {:source_name "newData"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$newData : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$newData : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$newData : bool;

var {:source_name "sh"} {:group_shared} $$sh : [bv32]bv32;
axiom {:array_info "$$sh"} {:group_shared} {:elem_width 32} {:source_name "sh"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$sh : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$sh : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$sh : bool;

const _WATCHED_OFFSET : bv32;
const {:global_offset_x} global_offset_x : bv32;
const {:global_offset_y} global_offset_y : bv32;
const {:global_offset_z} global_offset_z : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_id_y} group_id_y : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:local_id_y} local_id_y : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FADD32(bv32, bv32) : bv32;
function FMUL32(bv32, bv32) : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvor"} BV32_OR(bv32, bv32) : bv32;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
function {:bvbuiltin "bvsrem"} BV32_SREM(bv32, bv32) : bv32;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvult"} BV32_ULT(bv32, bv32) : bool;
function {:bvbuiltin "bvurem"} BV32_UREM(bv32, bv32) : bv32;
function {:bvbuiltin "zero_extend 31"} BV1_ZEXT32(bv1) : bv32;
procedure {:source_name "StencilKernel"} {:kernel} $StencilKernel($alignment:bv32, $wCenter:bv32, $wCardinal:bv32, $wDiagonal:bv32)
requires {:sourceloc_num 0} (if $alignment == 16bv32 then 1bv1 else 0bv1) != 0bv1;
{
  var $cond:bv32;
  var $i.0:bv32;
  var $i42.0:bv32;
  var $i83.0:bv32;
  var $i133.0:bv32;
  var v1:bv32;
  var v0:bv32;
  var v9:bv32;
  var v12:bv32;
  var v7:bv32;
  var v4:bv32;
  var v6:bool;
  var v3:bv32;
  var v5:bv32;
  var v2:bv32;
  var v11:bool;
  var v8:bool;
  var v10:bool;
  var v13:bool;
  var v14:bool;
  var v18:bv32;
  var v17:bv32;
  var v15:bv32;
  var v19:bv32;
  var v20:bv32;
  var v25:bv32;
  var v22:bv32;
  var v24:bv32;
  var v21:bv32;
  var v23:bv32;
  var v16:bool;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  v0 := local_id_x;
  v1 := local_id_y;
  v2 := group_size_y;
  v3 := BV32_ADD(BV32_MUL(group_id_x, 8bv32), v0);
  v4 := BV32_ADD(BV32_MUL(group_id_y, v2), v1);
  v5 := BV32_ADD(BV32_MUL(num_groups_y, v2), 2bv32);
  v6 := BV32_SREM(v5, $alignment) == 0bv32;
  goto $truebb, $falsebb;
$cond.true:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  $cond := 0bv32;
  goto $cond.end;
$cond.false:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  $cond := BV32_SUB($alignment, BV32_SREM(v5, $alignment));
  goto $cond.end;
$cond.end:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  v7 := BV32_SUB(BV32_ADD(v5, $cond), 2bv32);
  $i.0 := 0bv32;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 6} (if (_WRITE_HAS_OCCURRED_$$sh ==> BV32_ULT(BV32_SUB(BV32_UDIV(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), BV32_ADD(v1, 1bv32)), BV32_ADD(v2, 2bv32)), v0), 10bv32)) then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 7} (if (_WRITE_HAS_OCCURRED_$$sh ==> BV32_UREM(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), BV32_ADD(v1, 1bv32)), BV32_ADD(v2, 2bv32)) == 0bv32) then 1bv1 else 0bv1) != 0bv1;
  v8 := BV32_SLT($i.0, 10bv32);
  goto $truebb0, $falsebb0;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  assert {:sourceloc} {:sourceloc_num 9} true;
  v9 := $$data[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(BV32_SUB(v3, 1bv32), $i.0), 1bv32), BV32_ADD(v7, 2bv32)), BV32_ADD(v4, 1bv32))];
  assert {:sourceloc} {:sourceloc_num 10} true;
  $$sh[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(BV32_SUB(v0, 1bv32), $i.0), 1bv32), BV32_ADD(v2, 2bv32)), BV32_ADD(v1, 1bv32))] := v9;
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  $i.0 := BV32_ADD($i.0, 1bv32);
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  v10 := v1 == 0bv32;
  goto $truebb1, $falsebb1;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  $i42.0 := 0bv32;
  goto $for.cond.43;
$for.cond.43:
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 15} (if (_WRITE_HAS_OCCURRED_$$sh ==> BV32_OR(BV1_ZEXT32((if BV32_UREM(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), BV32_ADD(v1, 1bv32)), BV32_ADD(v2, 2bv32)) == 0bv32 then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_UREM(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), v1), BV32_ADD(v2, 2bv32)) == 0bv32 then 1bv1 else 0bv1))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
  v11 := BV32_SLT($i42.0, 10bv32);
  goto $truebb2, $falsebb2;
$for.body.63:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  assert {:sourceloc} {:sourceloc_num 17} true;
  v12 := $$data[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(BV32_SUB(v3, 1bv32), $i42.0), 1bv32), BV32_ADD(v7, 2bv32)), BV32_ADD(BV32_SUB(v4, 1bv32), 1bv32))];
  assert {:sourceloc} {:sourceloc_num 18} true;
  $$sh[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(BV32_SUB(v0, 1bv32), $i42.0), 1bv32), BV32_ADD(v2, 2bv32)), BV32_ADD(BV32_SUB(v1, 1bv32), 1bv32))] := v12;
  goto $for.inc.76;
$for.inc.76:
  assert {:block_sourceloc} {:sourceloc_num 19} true;
  $i42.0 := BV32_ADD($i42.0, 1bv32);
  goto $for.cond.43;
$for.end.78:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  goto $if.end.132;
$if.else:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  v13 := v1 == BV32_SUB(v2, 1bv32);
  goto $truebb3, $falsebb3;
$if.then.82:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  $i83.0 := 0bv32;
  goto $for.cond.84;
$for.cond.84:
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 24} (if (_WRITE_HAS_OCCURRED_$$sh ==> BV32_OR(BV32_OR(BV1_ZEXT32((if BV32_UREM(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), BV32_ADD(v1, 1bv32)), BV32_ADD(v2, 2bv32)) == 0bv32 then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_UREM(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), BV32_ADD(v1, 2bv32)), BV32_ADD(v2, 2bv32)) == 0bv32 then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UREM(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), v1), BV32_ADD(v2, 2bv32)) == 0bv32 then 1bv1 else 0bv1))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
  v14 := BV32_SLT($i83.0, 10bv32);
  goto $truebb4, $falsebb4;
$for.body.116:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  assert {:sourceloc} {:sourceloc_num 26} true;
  v15 := $$data[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(BV32_SUB(v3, 1bv32), $i83.0), 1bv32), BV32_ADD(v7, 2bv32)), BV32_ADD(v4, 2bv32))];
  assert {:sourceloc} {:sourceloc_num 27} true;
  $$sh[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(BV32_SUB(v0, 1bv32), $i83.0), 1bv32), BV32_ADD(v2, 2bv32)), BV32_ADD(v1, 2bv32))] := v15;
  goto $for.inc.129;
$for.inc.129:
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  $i83.0 := BV32_ADD($i83.0, 1bv32);
  goto $for.cond.84;
$for.end.131:
  assert {:block_sourceloc} {:sourceloc_num 29} true;
  goto $if.end;
$if.end:
  assert {:block_sourceloc} true;
  goto $if.end.132;
$if.end.132:
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  call {:sourceloc_num 31} $bugle_barrier(1bv1, 0bv1);
  $i133.0 := 0bv32;
  goto $for.cond.134;
$for.cond.134:
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 33} (if (_WRITE_HAS_OCCURRED_$$newData ==> BV32_ULT(BV32_SUB(BV32_UDIV(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), BV32_ADD(v4, 1bv32)), BV32_ADD(v7, 2bv32)), BV32_ADD(v3, 1bv32)), 8bv32)) then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 34} (if (_WRITE_HAS_OCCURRED_$$newData ==> BV32_UREM(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), BV32_ADD(v4, 1bv32)), BV32_ADD(v7, 2bv32)) == 0bv32) then 1bv1 else 0bv1) != 0bv1;
  v16 := BV32_SLT($i133.0, 8bv32);
  goto $truebb5, $falsebb5;
$for.body.159:
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  assert {:sourceloc} {:sourceloc_num 36} true;
  v17 := $$sh[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(v0, $i133.0), 1bv32), BV32_ADD(v2, 2bv32)), BV32_ADD(v1, 1bv32))];
  assert {:sourceloc} {:sourceloc_num 37} true;
  v18 := $$sh[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(BV32_SUB(v0, 1bv32), $i133.0), 1bv32), BV32_ADD(v2, 2bv32)), BV32_ADD(v1, 1bv32))];
  assert {:sourceloc} {:sourceloc_num 38} true;
  v19 := $$sh[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(BV32_ADD(v0, 1bv32), $i133.0), 1bv32), BV32_ADD(v2, 2bv32)), BV32_ADD(v1, 1bv32))];
  assert {:sourceloc} {:sourceloc_num 39} true;
  v20 := $$sh[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(v0, $i133.0), 1bv32), BV32_ADD(v2, 2bv32)), BV32_ADD(v1, 2bv32))];
  assert {:sourceloc} {:sourceloc_num 40} true;
  v21 := $$sh[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(v0, $i133.0), 1bv32), BV32_ADD(v2, 2bv32)), BV32_ADD(BV32_SUB(v1, 1bv32), 1bv32))];
  assert {:sourceloc} {:sourceloc_num 41} true;
  v22 := $$sh[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(BV32_SUB(v0, 1bv32), $i133.0), 1bv32), BV32_ADD(v2, 2bv32)), BV32_ADD(v1, 2bv32))];
  assert {:sourceloc} {:sourceloc_num 42} true;
  v23 := $$sh[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(BV32_ADD(v0, 1bv32), $i133.0), 1bv32), BV32_ADD(v2, 2bv32)), BV32_ADD(v1, 2bv32))];
  assert {:sourceloc} {:sourceloc_num 43} true;
  v24 := $$sh[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(BV32_SUB(v0, 1bv32), $i133.0), 1bv32), BV32_ADD(v2, 2bv32)), BV32_ADD(BV32_SUB(v1, 1bv32), 1bv32))];
  assert {:sourceloc} {:sourceloc_num 44} true;
  v25 := $$sh[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(BV32_ADD(v0, 1bv32), $i133.0), 1bv32), BV32_ADD(v2, 2bv32)), BV32_ADD(BV32_SUB(v1, 1bv32), 1bv32))];
  assert {:sourceloc} {:sourceloc_num 45} true;
  $$newData[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(v3, $i133.0), 1bv32), BV32_ADD(v7, 2bv32)), BV32_ADD(v4, 1bv32))] := FADD32(FMUL32($wDiagonal, FADD32(FADD32(FADD32(v22, v23), v24), v25)), FADD32(FMUL32($wCenter, v17), FMUL32($wCardinal, FADD32(FADD32(FADD32(v18, v19), v20), v21))));
  goto $for.inc.211;
$for.inc.211:
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  $i133.0 := BV32_ADD($i133.0, 1bv32);
  goto $for.cond.134;
$for.end.213:
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  return;
$truebb:
  assume {:partition} v6;
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  goto $cond.true;
$falsebb:
  assume {:partition} !v6;
  assert {:block_sourceloc} {:sourceloc_num 49} true;
  goto $cond.false;
$truebb0:
  assume {:partition} v8;
  assert {:block_sourceloc} {:sourceloc_num 50} true;
  goto $for.body;
$falsebb0:
  assume {:partition} !v8;
  assert {:block_sourceloc} {:sourceloc_num 51} true;
  goto $for.end;
$truebb1:
  assume {:partition} v10;
  assert {:block_sourceloc} {:sourceloc_num 52} true;
  goto $if.then;
$falsebb1:
  assume {:partition} !v10;
  assert {:block_sourceloc} {:sourceloc_num 53} true;
  goto $if.else;
$truebb2:
  assume {:partition} v11;
  assert {:block_sourceloc} {:sourceloc_num 54} true;
  goto $for.body.63;
$falsebb2:
  assume {:partition} !v11;
  assert {:block_sourceloc} {:sourceloc_num 55} true;
  goto $for.end.78;
$truebb3:
  assume {:partition} v13;
  assert {:block_sourceloc} {:sourceloc_num 56} true;
  goto $if.then.82;
$falsebb3:
  assume {:partition} !v13;
  assert {:block_sourceloc} {:sourceloc_num 57} true;
  goto $if.end;
$truebb4:
  assume {:partition} v14;
  assert {:block_sourceloc} {:sourceloc_num 58} true;
  goto $for.body.116;
$falsebb4:
  assume {:partition} !v14;
  assert {:block_sourceloc} {:sourceloc_num 59} true;
  goto $for.end.131;
$truebb5:
  assume {:partition} v16;
  assert {:block_sourceloc} {:sourceloc_num 60} true;
  goto $for.body.159;
$falsebb5:
  assume {:partition} !v16;
  assert {:block_sourceloc} {:sourceloc_num 61} true;
  goto $for.end.213;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_y == 256bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 64bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 2bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_x == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_y == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_z == 0bv32 then 1bv1 else 0bv1) != 0bv1;
