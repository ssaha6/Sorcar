type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "frontier"} {:global} $$frontier : [bv32]bv32;
axiom {:array_info "$$frontier"} {:global} {:elem_width 32} {:source_name "frontier"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$frontier : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$frontier : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$frontier : bool;

var {:source_name "frontier2"} {:global} $$frontier2 : [bv32]bv32;
axiom {:array_info "$$frontier2"} {:global} {:elem_width 32} {:source_name "frontier2"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$frontier2 : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$frontier2 : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$frontier2 : bool;

var {:source_name "visited"} {:global} $$visited : [bv32]bv32;
axiom {:array_info "$$visited"} {:global} {:elem_width 32} {:source_name "visited"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$visited : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$visited : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$visited : bool;

var {:source_name "cost"} {:global} $$cost : [bv32]bv32;
axiom {:array_info "$$cost"} {:global} {:elem_width 32} {:source_name "cost"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$cost : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$cost : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$cost : bool;

var {:source_name "edgeArray"} {:global} $$edgeArray : [bv32]bv32;
axiom {:array_info "$$edgeArray"} {:global} {:elem_width 32} {:source_name "edgeArray"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$edgeArray : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$edgeArray : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$edgeArray : bool;

var {:source_name "edgeArrayAux"} {:global} $$edgeArrayAux : [bv32]bv32;
axiom {:array_info "$$edgeArrayAux"} {:global} {:elem_width 32} {:source_name "edgeArrayAux"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$edgeArrayAux : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$edgeArrayAux : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$edgeArrayAux : bool;

var {:source_name "frontier_length"} {:global} $$frontier_length : [bv32]bv32;
axiom {:array_info "$$frontier_length"} {:global} {:elem_width 32} {:source_name "frontier_length"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$frontier_length : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$frontier_length : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$frontier_length : bool;

var {:source_name "g_mutex"} {:global} $$g_mutex : [bv32]bv32;
axiom {:array_info "$$g_mutex"} {:global} {:elem_width 32} {:source_name "g_mutex"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$g_mutex : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$g_mutex : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$g_mutex : bool;

var {:source_name "g_mutex2"} {:global} $$g_mutex2 : [bv32]bv32;
axiom {:array_info "$$g_mutex2"} {:global} {:elem_width 32} {:source_name "g_mutex2"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$g_mutex2 : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$g_mutex2 : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$g_mutex2 : bool;

var {:source_name "g_q_offsets"} {:global} $$g_q_offsets : [bv32]bv32;
axiom {:array_info "$$g_q_offsets"} {:global} {:elem_width 32} {:source_name "g_q_offsets"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$g_q_offsets : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$g_q_offsets : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$g_q_offsets : bool;

var {:source_name "g_q_size"} {:global} $$g_q_size : [bv32]bv32;
axiom {:array_info "$$g_q_size"} {:global} {:elem_width 32} {:source_name "g_q_size"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$g_q_size : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$g_q_size : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$g_q_size : bool;

var {:source_name "b_q"} {:group_shared} $$b_q : [bv32]bv32;
axiom {:array_info "$$b_q"} {:group_shared} {:elem_width 32} {:source_name "b_q"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$b_q : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$b_q : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$b_q : bool;

var {:source_name "b_q_length"} {:group_shared} $$BFS_kernel_SM_block.b_q_length : [bv32]bv32;
axiom {:array_info "$$BFS_kernel_SM_block.b_q_length"} {:group_shared} {:elem_width 32} {:source_name "b_q_length"} {:source_elem_width 32} {:source_dimensions "1"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$BFS_kernel_SM_block.b_q_length : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$BFS_kernel_SM_block.b_q_length : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$BFS_kernel_SM_block.b_q_length : bool;

var {:source_name "b_offset"} {:group_shared} $$BFS_kernel_SM_block.b_offset : [bv32]bv32;
axiom {:array_info "$$BFS_kernel_SM_block.b_offset"} {:group_shared} {:elem_width 32} {:source_name "b_offset"} {:source_elem_width 32} {:source_dimensions "1"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$BFS_kernel_SM_block.b_offset : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$BFS_kernel_SM_block.b_offset : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$BFS_kernel_SM_block.b_offset : bool;

const _WATCHED_OFFSET : bv32;
const {:global_offset_x} global_offset_x : bv32;
const {:global_offset_y} global_offset_y : bv32;
const {:global_offset_z} global_offset_z : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvsdiv"} BV32_SDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvsrem"} BV32_SREM(bv32, bv32) : bv32;
function {:bvbuiltin "bvugt"} BV32_UGT(bv32, bv32) : bool;
function {:bvbuiltin "bvult"} BV32_ULT(bv32, bv32) : bool;
procedure {:source_name "BFS_kernel_SM_block"} {:kernel} $BFS_kernel_SM_block($frontier_len:bv32, $numVertices:bv32, $numEdges:bv32, $max_local_mem:bv32)
requires {:sourceloc_num 0} (if $frontier_len == 2048bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 1} (if $max_local_mem == 1024bv32 then 1bv1 else 0bv1) != 0bv1;
{
  var $loop_index.0:bv32;
  var $l_mutex.0:bv32;
  var $f_len.0:bv32;
  var $node_to_process.0:bv32;
  var $offset.0:bv32;
  var $i.0:bv32;
  var v1:bv32;
  var v5:bool;
  var v3:bool;
  var v4:bool;
  var v0:bv32;
  var v2:bv32;
  var v11:bv32;
  var v14:bv32;
  var v8:bv32;
  var v9:bv32;
  var v12:bv32;
  var v6:bv32;
  var v7:bv32;
  var v23:bv32;
  var v10:bool;
  var v15:bool;
  var v29:bv32;
  var v20:bv32;
  var v18:bv32;
  var v43:bv32;
  var v26:bv32;
  var v16:bv32;
  var v13:bv32;
  var v21:bool;
  var v19:bool;
  var v17:bool;
  var v27:bv32;
  var v28:bool;
  var v22:bool;
  var v24:bool;
  var v35:bool;
  var v32:bool;
  var v36:bool;
  var v31:bool;
  var v44:bv32;
  var v52:bv32;
  var v48:bv32;
  var v50:bv32;
  var v46:bv32;
  var v56:bv32;
  var v54:bv32;
  var v38:bv32;
  var v30:bv32;
  var v25:bv32;
  var v33:bv32;
  var v34:bv32;
  var v37:bv32;
  var v39:bv32;
  var v40:bv32;
  var v53:bool;
  var v51:bool;
  var v55:bool;
  var v42:bool;
  var v45:bool;
  var v47:bool;
  var v41:bv32;
  var v49:bool;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  v1 := local_id_x;
  assert {:sourceloc} {:sourceloc_num 3} true;
  v2 := $$g_mutex2[0bv32];
  call {:sourceloc_num 4} $bugle_barrier(1bv1, 1bv1);
  $loop_index.0, $l_mutex.0, $f_len.0 := 0bv32, v2, $frontier_len;
  goto $while.body;
$while.body:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  v3 := v1 == 0bv32;
  goto $truebb, $falsebb;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  assert {:sourceloc} {:sourceloc_num 7} true;
  $$BFS_kernel_SM_block.b_q_length[0bv32] := 0bv32;
  assert {:sourceloc} {:sourceloc_num 8} true;
  $$BFS_kernel_SM_block.b_offset[0bv32] := 0bv32;
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  call {:sourceloc_num 10} $bugle_barrier(1bv1, 1bv1);
  v4 := BV32_ULT(v0, $f_len.0);
  goto $truebb0, $falsebb0;
$if.then.5:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  v5 := $loop_index.0 == 0bv32;
  goto $truebb1, $falsebb1;
$if.then.7:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  assert {:sourceloc} {:sourceloc_num 13} true;
  v6 := $$frontier[v0];
  $node_to_process.0 := v6;
  goto $if.end.10;
$if.else:
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  assert {:sourceloc} {:sourceloc_num 15} true;
  v7 := $$frontier2[v0];
  $node_to_process.0 := v7;
  goto $if.end.10;
$if.end.10:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  assert {:sourceloc} {:sourceloc_num 17} true;
  $$visited[$node_to_process.0] := 0bv32;
  assert {:sourceloc} {:sourceloc_num 18} true;
  v8 := $$edgeArray[$node_to_process.0];
  assert {:sourceloc} {:sourceloc_num 19} true;
  v9 := $$edgeArray[BV32_ADD($node_to_process.0, 1bv32)];
  $offset.0 := v8;
  goto $while.cond.14;
$while.cond.14:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  v10 := BV32_ULT($offset.0, v9);
  goto $truebb2, $falsebb2;
$while.body.16:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  assert {:sourceloc} {:sourceloc_num 22} true;
  v11 := $$edgeArrayAux[$offset.0];
  assert {:sourceloc} {:sourceloc_num 23} true;
  v12 := $$cost[$node_to_process.0];
  assert {:sourceloc} {:sourceloc_num 24} true;
  call {:atomic} {:atomic_function "__bugle_atomic_min_global_uint"} {:arg1 BV32_ADD(v12, 1bv32)} {:parts 1} {:part 1} v13, $$cost := _ATOMIC_OP32($$cost, BV32_SDIV(BV32_MUL(v11, 4bv32), 4bv32));
  assert {:sourceloc} {:sourceloc_num 25} true;
  v14 := $$cost[$node_to_process.0];
  v15 := BV32_UGT(v13, BV32_ADD(v14, 1bv32));
  goto $truebb3, $falsebb3;
$if.then.25:
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  assert {:sourceloc} {:sourceloc_num 27} true;
  call {:atomic} {:atomic_function "__bugle_atomic_xchg_global_int"} {:arg1 1bv32} {:parts 1} {:part 1} v16, $$visited := _ATOMIC_OP32($$visited, BV32_SDIV(BV32_MUL(v11, 4bv32), 4bv32));
  v17 := v16 == 0bv32;
  goto $truebb4, $falsebb4;
$if.then.29:
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  assert {:sourceloc} {:sourceloc_num 29} true;
  call {:atomic} {:atomic_function "__bugle_atomic_add_local_uint"} {:arg1 1bv32} {:parts 1} {:part 1} v18, $$BFS_kernel_SM_block.b_q_length := _ATOMIC_OP32($$BFS_kernel_SM_block.b_q_length, 0bv32);
  v19 := BV32_ULT(v18, $max_local_mem);
  goto $truebb5, $falsebb5;
$if.then.32:
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  assert {:sourceloc} {:sourceloc_num 31} true;
  $$b_q[v18] := v11;
  goto $if.end.42;
$if.else.34:
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  assert {:sourceloc} {:sourceloc_num 33} true;
  call {:atomic} {:atomic_function "__bugle_atomic_add_global_uint"} {:arg1 1bv32} {:parts 1} {:part 1} v20, $$g_q_offsets := _ATOMIC_OP32($$g_q_offsets, 0bv32);
  v21 := $loop_index.0 == 0bv32;
  goto $truebb6, $falsebb6;
$if.then.37:
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  assert {:sourceloc} {:sourceloc_num 35} true;
  $$frontier2[v20] := v11;
  goto $if.end.41;
$if.else.39:
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  assert {:sourceloc} {:sourceloc_num 37} true;
  $$frontier[v20] := v11;
  goto $if.end.41;
$if.end.41:
  assert {:block_sourceloc} true;
  goto $if.end.42;
$if.end.42:
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  goto $if.end.43;
$if.end.43:
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  goto $if.end.44;
$if.end.44:
  assert {:block_sourceloc} {:sourceloc_num 40} true;
  $offset.0 := BV32_ADD($offset.0, 1bv32);
  goto $while.cond.14;
$while.end:
  assert {:block_sourceloc} {:sourceloc_num 41} true;
  goto $if.end.45;
$if.end.45:
  assert {:block_sourceloc} {:sourceloc_num 42} true;
  call {:sourceloc_num 43} $bugle_barrier(1bv1, 1bv1);
  v22 := v1 == 0bv32;
  goto $truebb7, $falsebb7;
$if.then.47:
  assert {:block_sourceloc} {:sourceloc_num 44} true;
  assert {:sourceloc} {:sourceloc_num 45} true;
  v23 := $$BFS_kernel_SM_block.b_q_length[0bv32];
  v24 := BV32_UGT(v23, $max_local_mem);
  goto $truebb8, $falsebb8;
$if.then.49:
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  assert {:sourceloc} {:sourceloc_num 47} true;
  $$BFS_kernel_SM_block.b_q_length[0bv32] := $max_local_mem;
  goto $if.end.50;
$if.end.50:
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  assert {:sourceloc} {:sourceloc_num 49} true;
  v25 := $$BFS_kernel_SM_block.b_q_length[0bv32];
  assert {:sourceloc} {:sourceloc_num 50} true;
  call {:atomic} {:atomic_function "__bugle_atomic_add_global_uint"} {:arg1 v25} {:parts 1} {:part 1} v26, $$g_q_offsets := _ATOMIC_OP32($$g_q_offsets, 0bv32);
  assert {:sourceloc} {:sourceloc_num 51} true;
  $$BFS_kernel_SM_block.b_offset[0bv32] := v26;
  goto $if.end.52;
$if.end.52:
  assert {:block_sourceloc} {:sourceloc_num 52} true;
  call {:sourceloc_num 53} $bugle_barrier(1bv1, 1bv1);
  v27 := BV32_ADD($l_mutex.0, num_groups_x);
  call {:sourceloc_num 54} $bugle_barrier(1bv1, 1bv1);
  v28 := local_id_x == 0bv32;
  goto $truebb9, $falsebb9;
$if.then.i:
  assert {:block_sourceloc} {:sourceloc_num 55} true;
  assert {:sourceloc} {:sourceloc_num 56} true;
  call {:atomic} {:atomic_function "__bugle_atomic_add_global_uint"} {:arg1 1bv32} {:parts 1} {:part 1} v29, $$g_mutex := _ATOMIC_OP32($$g_mutex, 0bv32);
  goto $while.cond.i;
$while.cond.i:
  assert {:block_sourceloc} {:sourceloc_num 57} true;
  assert {:sourceloc} {:sourceloc_num 58} true;
  v30 := $$g_mutex[0bv32];
  v31 := BV32_ULT(v30, v27);
  goto $truebb10, $falsebb10;
$while.body.i:
  assert {:block_sourceloc} {:sourceloc_num 59} true;
  goto $while.cond.i;
$while.end.i:
  assert {:block_sourceloc} {:sourceloc_num 60} true;
  goto $__gpu_sync.exit;
$__gpu_sync.exit:
  assert {:block_sourceloc} {:sourceloc_num 61} true;
  call {:sourceloc_num 62} $bugle_barrier(1bv1, 1bv1);
  v32 := v0 == 0bv32;
  goto $truebb11, $falsebb11;
$if.then.56:
  assert {:block_sourceloc} {:sourceloc_num 63} true;
  assert {:sourceloc} {:sourceloc_num 64} true;
  v33 := $$g_q_offsets[0bv32];
  assert {:sourceloc} {:sourceloc_num 65} true;
  $$g_q_size[0bv32] := v33;
  assert {:sourceloc} {:sourceloc_num 66} true;
  $$g_q_offsets[0bv32] := 0bv32;
  goto $if.end.60;
$if.end.60:
  assert {:block_sourceloc} {:sourceloc_num 67} true;
  assert {:sourceloc} {:sourceloc_num 68} true;
  v34 := $$BFS_kernel_SM_block.b_q_length[0bv32];
  v35 := BV32_ULT(v1, v34);
  goto $truebb12, $falsebb12;
$if.then.62:
  assert {:block_sourceloc} {:sourceloc_num 69} true;
  v36 := $loop_index.0 == 0bv32;
  goto $truebb13, $falsebb13;
$if.then.64:
  assert {:block_sourceloc} {:sourceloc_num 70} true;
  assert {:sourceloc} {:sourceloc_num 71} true;
  v37 := $$b_q[v1];
  assert {:sourceloc} {:sourceloc_num 72} true;
  v38 := $$BFS_kernel_SM_block.b_offset[0bv32];
  assert {:sourceloc} {:sourceloc_num 73} true;
  $$frontier2[BV32_ADD(v1, v38)] := v37;
  goto $if.end.72;
$if.else.68:
  assert {:block_sourceloc} {:sourceloc_num 74} true;
  assert {:sourceloc} {:sourceloc_num 75} true;
  v39 := $$b_q[v1];
  assert {:sourceloc} {:sourceloc_num 76} true;
  v40 := $$BFS_kernel_SM_block.b_offset[0bv32];
  assert {:sourceloc} {:sourceloc_num 77} true;
  $$frontier[BV32_ADD(v1, v40)] := v39;
  goto $if.end.72;
$if.end.72:
  assert {:block_sourceloc} {:sourceloc_num 78} true;
  goto $if.end.73;
$if.end.73:
  assert {:block_sourceloc} {:sourceloc_num 79} true;
  v41 := BV32_ADD(v27, num_groups_x);
  call {:sourceloc_num 80} $bugle_barrier(1bv1, 1bv1);
  v42 := local_id_x == 0bv32;
  goto $truebb14, $falsebb14;
$if.then.i.124:
  assert {:block_sourceloc} {:sourceloc_num 81} true;
  assert {:sourceloc} {:sourceloc_num 82} true;
  call {:atomic} {:atomic_function "__bugle_atomic_add_global_uint"} {:arg1 1bv32} {:parts 1} {:part 1} v43, $$g_mutex := _ATOMIC_OP32($$g_mutex, 0bv32);
  goto $while.cond.i.126;
$while.cond.i.126:
  assert {:block_sourceloc} {:sourceloc_num 83} true;
  assert {:sourceloc} {:sourceloc_num 84} true;
  v44 := $$g_mutex[0bv32];
  v45 := BV32_ULT(v44, v41);
  goto $truebb15, $falsebb15;
$while.body.i.127:
  assert {:block_sourceloc} {:sourceloc_num 85} true;
  goto $while.cond.i.126;
$while.end.i.128:
  assert {:block_sourceloc} {:sourceloc_num 86} true;
  goto $__gpu_sync.exit129;
$__gpu_sync.exit129:
  assert {:block_sourceloc} {:sourceloc_num 87} true;
  call {:sourceloc_num 88} $bugle_barrier(1bv1, 1bv1);
  assert {:sourceloc} {:sourceloc_num 89} true;
  v46 := $$g_q_size[0bv32];
  v47 := BV32_ULT(v46, group_size_x);
  goto $truebb16, $falsebb16;
$lor.lhs.false:
  assert {:block_sourceloc} {:sourceloc_num 90} true;
  assert {:sourceloc} {:sourceloc_num 91} true;
  v48 := $$g_q_size[0bv32];
  v49 := BV32_UGT(v48, BV32_MUL(group_size_x, num_groups_x));
  goto $truebb17, $falsebb17;
$if.then.83:
  assert {:block_sourceloc} {:sourceloc_num 92} true;
  goto $while.end.87;
$if.end.84:
  assert {:block_sourceloc} {:sourceloc_num 93} true;
  assert {:sourceloc} {:sourceloc_num 94} true;
  v50 := $$g_q_size[0bv32];
  $loop_index.0, $l_mutex.0, $f_len.0 := BV32_SREM(BV32_ADD($loop_index.0, 1bv32), 2bv32), v41, v50;
  goto $while.body;
$while.end.87:
  assert {:block_sourceloc} {:sourceloc_num 95} true;
  v51 := $loop_index.0 == 0bv32;
  goto $truebb18, $falsebb18;
$if.then.89:
  assert {:block_sourceloc} {:sourceloc_num 96} true;
  $i.0 := v0;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 97} true;
  assert {:sourceloc} {:sourceloc_num 98} true;
  v52 := $$g_q_size[0bv32];
  v53 := BV32_ULT($i.0, v52);
  goto $truebb19, $falsebb19;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 99} true;
  assert {:sourceloc} {:sourceloc_num 100} true;
  v54 := $$frontier2[$i.0];
  assert {:sourceloc} {:sourceloc_num 101} true;
  $$frontier[$i.0] := v54;
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 102} true;
  $i.0 := BV32_ADD($i.0, BV32_MUL(group_size_x, num_groups_x));
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 103} true;
  goto $if.end.96;
$if.end.96:
  assert {:block_sourceloc} {:sourceloc_num 104} true;
  v55 := v0 == 0bv32;
  goto $truebb20, $falsebb20;
$if.then.98:
  assert {:block_sourceloc} {:sourceloc_num 105} true;
  assert {:sourceloc} {:sourceloc_num 106} true;
  v56 := $$g_q_size[0bv32];
  assert {:sourceloc} {:sourceloc_num 107} true;
  $$frontier_length[0bv32] := v56;
  goto $if.end.101;
$if.end.101:
  assert {:block_sourceloc} {:sourceloc_num 108} true;
  return;
$truebb:
  assume {:partition} v3;
  assert {:block_sourceloc} {:sourceloc_num 109} true;
  goto $if.then;
$falsebb:
  assume {:partition} !v3;
  assert {:block_sourceloc} {:sourceloc_num 110} true;
  goto $if.end;
$truebb0:
  assume {:partition} v4;
  assert {:block_sourceloc} {:sourceloc_num 111} true;
  goto $if.then.5;
$falsebb0:
  assume {:partition} !v4;
  assert {:block_sourceloc} {:sourceloc_num 112} true;
  goto $if.end.45;
$truebb1:
  assume {:partition} v5;
  assert {:block_sourceloc} {:sourceloc_num 113} true;
  goto $if.then.7;
$falsebb1:
  assume {:partition} !v5;
  assert {:block_sourceloc} {:sourceloc_num 114} true;
  goto $if.else;
$truebb2:
  assume {:partition} v10;
  assert {:block_sourceloc} {:sourceloc_num 115} true;
  goto $while.body.16;
$falsebb2:
  assume {:partition} !v10;
  assert {:block_sourceloc} {:sourceloc_num 116} true;
  goto $while.end;
$truebb3:
  assume {:partition} v15;
  assert {:block_sourceloc} {:sourceloc_num 117} true;
  goto $if.then.25;
$falsebb3:
  assume {:partition} !v15;
  assert {:block_sourceloc} {:sourceloc_num 118} true;
  goto $if.end.44;
$truebb4:
  assume {:partition} v17;
  assert {:block_sourceloc} {:sourceloc_num 119} true;
  goto $if.then.29;
$falsebb4:
  assume {:partition} !v17;
  assert {:block_sourceloc} {:sourceloc_num 120} true;
  goto $if.end.43;
$truebb5:
  assume {:partition} v19;
  assert {:block_sourceloc} {:sourceloc_num 121} true;
  goto $if.then.32;
$falsebb5:
  assume {:partition} !v19;
  assert {:block_sourceloc} {:sourceloc_num 122} true;
  goto $if.else.34;
$truebb6:
  assume {:partition} v21;
  assert {:block_sourceloc} {:sourceloc_num 123} true;
  goto $if.then.37;
$falsebb6:
  assume {:partition} !v21;
  assert {:block_sourceloc} {:sourceloc_num 124} true;
  goto $if.else.39;
$truebb7:
  assume {:partition} v22;
  assert {:block_sourceloc} {:sourceloc_num 125} true;
  goto $if.then.47;
$falsebb7:
  assume {:partition} !v22;
  assert {:block_sourceloc} {:sourceloc_num 126} true;
  goto $if.end.52;
$truebb8:
  assume {:partition} v24;
  assert {:block_sourceloc} {:sourceloc_num 127} true;
  goto $if.then.49;
$falsebb8:
  assume {:partition} !v24;
  assert {:block_sourceloc} {:sourceloc_num 128} true;
  goto $if.end.50;
$truebb9:
  assume {:partition} v28;
  assert {:block_sourceloc} {:sourceloc_num 129} true;
  goto $if.then.i;
$falsebb9:
  assume {:partition} !v28;
  assert {:block_sourceloc} {:sourceloc_num 130} true;
  goto $__gpu_sync.exit;
$truebb10:
  assume {:partition} v31;
  assert {:block_sourceloc} {:sourceloc_num 131} true;
  goto $while.body.i;
$falsebb10:
  assume {:partition} !v31;
  assert {:block_sourceloc} {:sourceloc_num 132} true;
  goto $while.end.i;
$truebb11:
  assume {:partition} v32;
  assert {:block_sourceloc} {:sourceloc_num 133} true;
  goto $if.then.56;
$falsebb11:
  assume {:partition} !v32;
  assert {:block_sourceloc} {:sourceloc_num 134} true;
  goto $if.end.60;
$truebb12:
  assume {:partition} v35;
  assert {:block_sourceloc} {:sourceloc_num 135} true;
  goto $if.then.62;
$falsebb12:
  assume {:partition} !v35;
  assert {:block_sourceloc} {:sourceloc_num 136} true;
  goto $if.end.73;
$truebb13:
  assume {:partition} v36;
  assert {:block_sourceloc} {:sourceloc_num 137} true;
  goto $if.then.64;
$falsebb13:
  assume {:partition} !v36;
  assert {:block_sourceloc} {:sourceloc_num 138} true;
  goto $if.else.68;
$truebb14:
  assume {:partition} v42;
  assert {:block_sourceloc} {:sourceloc_num 139} true;
  goto $if.then.i.124;
$falsebb14:
  assume {:partition} !v42;
  assert {:block_sourceloc} {:sourceloc_num 140} true;
  goto $__gpu_sync.exit129;
$truebb15:
  assume {:partition} v45;
  assert {:block_sourceloc} {:sourceloc_num 141} true;
  goto $while.body.i.127;
$falsebb15:
  assume {:partition} !v45;
  assert {:block_sourceloc} {:sourceloc_num 142} true;
  goto $while.end.i.128;
$truebb16:
  assume {:partition} v47;
  assert {:block_sourceloc} {:sourceloc_num 143} true;
  goto $if.then.83;
$falsebb16:
  assume {:partition} !v47;
  assert {:block_sourceloc} {:sourceloc_num 144} true;
  goto $lor.lhs.false;
$truebb17:
  assume {:partition} v49;
  assert {:block_sourceloc} {:sourceloc_num 145} true;
  goto $if.then.83;
$falsebb17:
  assume {:partition} !v49;
  assert {:block_sourceloc} {:sourceloc_num 146} true;
  goto $if.end.84;
$truebb18:
  assume {:partition} v51;
  assert {:block_sourceloc} {:sourceloc_num 147} true;
  goto $if.then.89;
$falsebb18:
  assume {:partition} !v51;
  assert {:block_sourceloc} {:sourceloc_num 148} true;
  goto $if.end.96;
$truebb19:
  assume {:partition} v53;
  assert {:block_sourceloc} {:sourceloc_num 149} true;
  goto $for.body;
$falsebb19:
  assume {:partition} !v53;
  assert {:block_sourceloc} {:sourceloc_num 150} true;
  goto $for.end;
$truebb20:
  assume {:partition} v55;
  assert {:block_sourceloc} {:sourceloc_num 151} true;
  goto $if.then.98;
$falsebb20:
  assume {:partition} !v55;
  assert {:block_sourceloc} {:sourceloc_num 152} true;
  goto $if.end.101;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 1024bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 4bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_x == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_y == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_z == 0bv32 then 1bv1 else 0bv1) != 0bv1;
