type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "frontier"} {:global} $$frontier : [bv32]bv32;
axiom {:array_info "$$frontier"} {:global} {:elem_width 32} {:source_name "frontier"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$frontier : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$frontier : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$frontier : bool;

var {:source_name "frontier2"} {:global} $$frontier2 : [bv32]bv32;
axiom {:array_info "$$frontier2"} {:global} {:elem_width 32} {:source_name "frontier2"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$frontier2 : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$frontier2 : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$frontier2 : bool;

var {:source_name "visited"} {:global} $$visited : [bv32]bv32;
axiom {:array_info "$$visited"} {:global} {:elem_width 32} {:source_name "visited"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$visited : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$visited : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$visited : bool;

var {:source_name "cost"} {:global} $$cost : [bv32]bv32;
axiom {:array_info "$$cost"} {:global} {:elem_width 32} {:source_name "cost"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$cost : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$cost : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$cost : bool;

var {:source_name "edgeArray"} {:global} $$edgeArray : [bv32]bv32;
axiom {:array_info "$$edgeArray"} {:global} {:elem_width 32} {:source_name "edgeArray"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$edgeArray : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$edgeArray : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$edgeArray : bool;

var {:source_name "edgeArrayAux"} {:global} $$edgeArrayAux : [bv32]bv32;
axiom {:array_info "$$edgeArrayAux"} {:global} {:elem_width 32} {:source_name "edgeArrayAux"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$edgeArrayAux : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$edgeArrayAux : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$edgeArrayAux : bool;

var {:source_name "frontier_length"} {:global} $$frontier_length : [bv32]bv32;
axiom {:array_info "$$frontier_length"} {:global} {:elem_width 32} {:source_name "frontier_length"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$frontier_length : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$frontier_length : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$frontier_length : bool;

var {:source_name "b_q"} {:group_shared} $$b_q : [bv32]bv32;
axiom {:array_info "$$b_q"} {:group_shared} {:elem_width 32} {:source_name "b_q"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$b_q : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$b_q : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$b_q : bool;

var {:source_name "b_q_length"} {:group_shared} $$BFS_kernel_multi_block.b_q_length : [bv32]bv32;
axiom {:array_info "$$BFS_kernel_multi_block.b_q_length"} {:group_shared} {:elem_width 32} {:source_name "b_q_length"} {:source_elem_width 32} {:source_dimensions "1"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$BFS_kernel_multi_block.b_q_length : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$BFS_kernel_multi_block.b_q_length : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$BFS_kernel_multi_block.b_q_length : bool;

var {:source_name "b_offset"} {:group_shared} $$BFS_kernel_multi_block.b_offset : [bv32]bv32;
axiom {:array_info "$$BFS_kernel_multi_block.b_offset"} {:group_shared} {:elem_width 32} {:source_name "b_offset"} {:source_elem_width 32} {:source_dimensions "1"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$BFS_kernel_multi_block.b_offset : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$BFS_kernel_multi_block.b_offset : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$BFS_kernel_multi_block.b_offset : bool;

const _WATCHED_OFFSET : bv32;
const {:global_offset_x} global_offset_x : bv32;
const {:global_offset_y} global_offset_y : bv32;
const {:global_offset_z} global_offset_z : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvsdiv"} BV32_SDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvugt"} BV32_UGT(bv32, bv32) : bool;
function {:bvbuiltin "bvult"} BV32_ULT(bv32, bv32) : bool;
procedure {:source_name "BFS_kernel_multi_block"} {:kernel} $BFS_kernel_multi_block($frontier_len:bv32, $numVertices:bv32, $numEdges:bv32, $max_local_mem:bv32)
requires {:sourceloc_num 0} (if $frontier_len == 2048bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 1} (if $numVertices == 10000bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 2} (if $numEdges == 9999bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 3} (if $max_local_mem == 1024bv32 then 1bv1 else 0bv1) != 0bv1;
{
  var $offset.0:bv32;
  var v1:bv32;
  var v13:bv32;
  var v22:bv32;
  var v10:bv32;
  var v15:bv32;
  var v17:bv32;
  var v5:bv32;
  var v4:bv32;
  var v0:bv32;
  var v3:bool;
  var v2:bool;
  var v8:bv32;
  var v19:bv32;
  var v11:bv32;
  var v6:bv32;
  var v9:bv32;
  var v23:bv32;
  var v26:bv32;
  var v25:bv32;
  var v21:bv32;
  var v7:bool;
  var v12:bool;
  var v18:bool;
  var v20:bool;
  var v24:bool;
  var v14:bool;
  var v16:bool;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  v1 := local_id_x;
  v2 := v1 == 0bv32;
  goto $truebb, $falsebb;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  assert {:sourceloc} {:sourceloc_num 6} true;
  $$BFS_kernel_multi_block.b_q_length[0bv32] := 0bv32;
  assert {:sourceloc} {:sourceloc_num 7} true;
  $$BFS_kernel_multi_block.b_offset[0bv32] := 0bv32;
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  call {:sourceloc_num 9} $bugle_barrier(1bv1, 1bv1);
  v3 := BV32_ULT(v0, $frontier_len);
  goto $truebb0, $falsebb0;
$if.then.7:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  assert {:sourceloc} {:sourceloc_num 11} true;
  v4 := $$frontier[v0];
  assert {:sourceloc} {:sourceloc_num 12} true;
  $$visited[v4] := 0bv32;
  assert {:sourceloc} {:sourceloc_num 13} true;
  v5 := $$edgeArray[v4];
  assert {:sourceloc} {:sourceloc_num 14} true;
  v6 := $$edgeArray[BV32_ADD(v4, 1bv32)];
  $offset.0 := v5;
  goto $while.cond;
$while.cond:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  v7 := BV32_ULT($offset.0, v6);
  goto $truebb1, $falsebb1;
$while.body:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  assert {:sourceloc} {:sourceloc_num 17} true;
  v8 := $$edgeArrayAux[$offset.0];
  assert {:sourceloc} {:sourceloc_num 18} true;
  v9 := $$cost[v4];
  assert {:sourceloc} {:sourceloc_num 19} true;
  call {:atomic} {:atomic_function "__bugle_atomic_min_global_uint"} {:arg1 BV32_ADD(v9, 1bv32)} {:parts 1} {:part 1} v10, $$cost := _ATOMIC_OP32($$cost, BV32_SDIV(BV32_MUL(v8, 4bv32), 4bv32));
  assert {:sourceloc} {:sourceloc_num 20} true;
  v11 := $$cost[v4];
  v12 := BV32_UGT(v10, BV32_ADD(v11, 1bv32));
  goto $truebb2, $falsebb2;
$if.then.20:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  assert {:sourceloc} {:sourceloc_num 22} true;
  call {:atomic} {:atomic_function "__bugle_atomic_xchg_global_int"} {:arg1 1bv32} {:parts 1} {:part 1} v13, $$visited := _ATOMIC_OP32($$visited, BV32_SDIV(BV32_MUL(v8, 4bv32), 4bv32));
  v14 := v13 == 0bv32;
  goto $truebb3, $falsebb3;
$if.then.24:
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  assert {:sourceloc} {:sourceloc_num 24} true;
  call {:atomic} {:atomic_function "__bugle_atomic_add_local_uint"} {:arg1 1bv32} {:parts 1} {:part 1} v15, $$BFS_kernel_multi_block.b_q_length := _ATOMIC_OP32($$BFS_kernel_multi_block.b_q_length, 0bv32);
  v16 := BV32_ULT(v15, $max_local_mem);
  goto $truebb4, $falsebb4;
$if.then.27:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  assert {:sourceloc} {:sourceloc_num 26} true;
  $$b_q[v15] := v8;
  goto $if.end.31;
$if.else:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  assert {:sourceloc} {:sourceloc_num 28} true;
  call {:atomic} {:atomic_function "__bugle_atomic_add_global_uint"} {:arg1 1bv32} {:parts 1} {:part 1} v17, $$frontier_length := _ATOMIC_OP32($$frontier_length, 0bv32);
  assert {:sourceloc} {:sourceloc_num 29} true;
  $$frontier2[v17] := v8;
  goto $if.end.31;
$if.end.31:
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  goto $if.end.32;
$if.end.32:
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  goto $if.end.33;
$if.end.33:
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  $offset.0 := BV32_ADD($offset.0, 1bv32);
  goto $while.cond;
$while.end:
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  goto $if.end.34;
$if.end.34:
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  call {:sourceloc_num 35} $bugle_barrier(1bv1, 1bv1);
  v18 := v1 == 0bv32;
  goto $truebb5, $falsebb5;
$if.then.36:
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  assert {:sourceloc} {:sourceloc_num 37} true;
  v19 := $$BFS_kernel_multi_block.b_q_length[0bv32];
  v20 := BV32_UGT(v19, $max_local_mem);
  goto $truebb6, $falsebb6;
$if.then.38:
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  assert {:sourceloc} {:sourceloc_num 39} true;
  $$BFS_kernel_multi_block.b_q_length[0bv32] := $max_local_mem;
  goto $if.end.39;
$if.end.39:
  assert {:block_sourceloc} {:sourceloc_num 40} true;
  assert {:sourceloc} {:sourceloc_num 41} true;
  v21 := $$BFS_kernel_multi_block.b_q_length[0bv32];
  assert {:sourceloc} {:sourceloc_num 42} true;
  call {:atomic} {:atomic_function "__bugle_atomic_add_global_uint"} {:arg1 v21} {:parts 1} {:part 1} v22, $$frontier_length := _ATOMIC_OP32($$frontier_length, 0bv32);
  assert {:sourceloc} {:sourceloc_num 43} true;
  $$BFS_kernel_multi_block.b_offset[0bv32] := v22;
  goto $if.end.41;
$if.end.41:
  assert {:block_sourceloc} {:sourceloc_num 44} true;
  call {:sourceloc_num 45} $bugle_barrier(1bv1, 1bv1);
  assert {:sourceloc} {:sourceloc_num 46} true;
  v23 := $$BFS_kernel_multi_block.b_q_length[0bv32];
  v24 := BV32_ULT(v1, v23);
  goto $truebb7, $falsebb7;
$if.then.43:
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  assert {:sourceloc} {:sourceloc_num 48} true;
  v25 := $$b_q[v1];
  assert {:sourceloc} {:sourceloc_num 49} true;
  v26 := $$BFS_kernel_multi_block.b_offset[0bv32];
  assert {:sourceloc} {:sourceloc_num 50} true;
  $$frontier2[BV32_ADD(v1, v26)] := v25;
  goto $if.end.47;
$if.end.47:
  assert {:block_sourceloc} {:sourceloc_num 51} true;
  return;
$truebb:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 52} true;
  goto $if.then;
$falsebb:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 53} true;
  goto $if.end;
$truebb0:
  assume {:partition} v3;
  assert {:block_sourceloc} {:sourceloc_num 54} true;
  goto $if.then.7;
$falsebb0:
  assume {:partition} !v3;
  assert {:block_sourceloc} {:sourceloc_num 55} true;
  goto $if.end.34;
$truebb1:
  assume {:partition} v7;
  assert {:block_sourceloc} {:sourceloc_num 56} true;
  goto $while.body;
$falsebb1:
  assume {:partition} !v7;
  assert {:block_sourceloc} {:sourceloc_num 57} true;
  goto $while.end;
$truebb2:
  assume {:partition} v12;
  assert {:block_sourceloc} {:sourceloc_num 58} true;
  goto $if.then.20;
$falsebb2:
  assume {:partition} !v12;
  assert {:block_sourceloc} {:sourceloc_num 59} true;
  goto $if.end.33;
$truebb3:
  assume {:partition} v14;
  assert {:block_sourceloc} {:sourceloc_num 60} true;
  goto $if.then.24;
$falsebb3:
  assume {:partition} !v14;
  assert {:block_sourceloc} {:sourceloc_num 61} true;
  goto $if.end.32;
$truebb4:
  assume {:partition} v16;
  assert {:block_sourceloc} {:sourceloc_num 62} true;
  goto $if.then.27;
$falsebb4:
  assume {:partition} !v16;
  assert {:block_sourceloc} {:sourceloc_num 63} true;
  goto $if.else;
$truebb5:
  assume {:partition} v18;
  assert {:block_sourceloc} {:sourceloc_num 64} true;
  goto $if.then.36;
$falsebb5:
  assume {:partition} !v18;
  assert {:block_sourceloc} {:sourceloc_num 65} true;
  goto $if.end.41;
$truebb6:
  assume {:partition} v20;
  assert {:block_sourceloc} {:sourceloc_num 66} true;
  goto $if.then.38;
$falsebb6:
  assume {:partition} !v20;
  assert {:block_sourceloc} {:sourceloc_num 67} true;
  goto $if.end.39;
$truebb7:
  assume {:partition} v24;
  assert {:block_sourceloc} {:sourceloc_num 68} true;
  goto $if.then.43;
$falsebb7:
  assume {:partition} !v24;
  assert {:block_sourceloc} {:sourceloc_num 69} true;
  goto $if.end.47;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 1024bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 10bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_x == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_y == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_z == 0bv32 then 1bv1 else 0bv1) != 0bv1;
