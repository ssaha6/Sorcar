type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "levels"} {:global} $$levels : [bv32]bv32;
axiom {:array_info "$$levels"} {:global} {:elem_width 32} {:source_name "levels"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$levels : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$levels : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$levels : bool;

var {:source_name "edgeArray"} {:global} $$edgeArray : [bv32]bv32;
axiom {:array_info "$$edgeArray"} {:global} {:elem_width 32} {:source_name "edgeArray"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$edgeArray : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$edgeArray : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$edgeArray : bool;

var {:source_name "edgeArrayAux"} {:global} $$edgeArrayAux : [bv32]bv32;
axiom {:array_info "$$edgeArrayAux"} {:global} {:elem_width 32} {:source_name "edgeArrayAux"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$edgeArrayAux : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$edgeArrayAux : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$edgeArrayAux : bool;

var {:source_name "flag"} {:global} $$flag : [bv32]bv32;
axiom {:array_info "$$flag"} {:global} {:elem_width 32} {:source_name "flag"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$flag : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$flag : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$flag : bool;

const _WATCHED_OFFSET : bv32;
const {:global_offset_x} global_offset_x : bv32;
const {:global_offset_y} global_offset_y : bv32;
const {:global_offset_z} global_offset_z : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvsdiv"} BV32_SDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
function {:bvbuiltin "bvsrem"} BV32_SREM(bv32, bv32) : bv32;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "bvuge"} BV32_UGE(bv32, bv32) : bool;
function {:bvbuiltin "bvult"} BV32_ULT(bv32, bv32) : bool;
procedure {:source_name "BFS_kernel_warp"} {:kernel} $BFS_kernel_warp($W_SZ:bv32, $CHUNK_SZ:bv32, $numVertices:bv32, $curr:bv32)
requires {:sourceloc_num 0} (if $W_SZ == 32bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 1} (if $CHUNK_SZ == 32bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 2} (if $numVertices == 10000bv32 then 1bv1 else 0bv1) != 0bv1;
{
  var $chk_sz.1:bv32;
  var $chk_sz.0:bv32;
  var $v.0:bv32;
  var $i.0:bv32;
  var v4:bool;
  var v3:bv32;
  var v1:bv32;
  var v2:bool;
  var v0:bv32;
  var v5:bool;
  var v7:bool;
  var v11:bool;
  var v6:bv32;
  var v10:bv32;
  var v8:bv32;
  var v12:bv32;
  var v9:bv32;
  var v13:bv32;
  var v14:bool;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  v1 := BV32_MUL(BV32_SDIV(v0, $W_SZ), $CHUNK_SZ);
  v2 := BV32_UGE(BV32_ADD(v1, $CHUNK_SZ), $numVertices);
  goto $truebb, $falsebb;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  v3 := BV32_ADD(BV32_SUB($numVertices, v1), 1bv32);
  v4 := BV32_SLT(v3, 0bv32);
  goto $truebb0, $falsebb0;
$if.then.7:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  $chk_sz.0 := 0bv32;
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  $chk_sz.1 := $chk_sz.0;
  goto $if.end.8;
$if.end.8:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  $v.0 := v1;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  v5 := BV32_SLT($v.0, BV32_ADD(BV32_SUB($chk_sz.1, 1bv32), v1));
  goto $truebb1, $falsebb1;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  assert {:sourceloc} {:sourceloc_num 10} true;
  v6 := $$levels[$v.0];
  v7 := v6 == $curr;
  goto $truebb2, $falsebb2;
$if.then.13:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  assert {:sourceloc} {:sourceloc_num 12} true;
  v8 := $$edgeArray[BV32_ADD($v.0, 1bv32)];
  assert {:sourceloc} {:sourceloc_num 13} true;
  v9 := $$edgeArray[$v.0];
  assert {:sourceloc} {:sourceloc_num 14} true;
  v10 := $$edgeArray[$v.0];
  $i.0 := BV32_SREM(v0, $W_SZ);
  goto $for.cond.19;
$for.cond.19:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  v11 := BV32_ULT($i.0, BV32_SUB(v8, v9));
  goto $truebb3, $falsebb3;
$for.body.21:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  assert {:sourceloc} {:sourceloc_num 17} true;
  v12 := $$edgeArrayAux[BV32_ADD($i.0, v10)];
  assert {:sourceloc} {:sourceloc_num 18} true;
  v13 := $$levels[v12];
  v14 := v13 == 4294967295bv32;
  goto $truebb4, $falsebb4;
$if.then.27:
  assert {:block_sourceloc} {:sourceloc_num 19} true;
  assert {:sourceloc} {:sourceloc_num 20} true;
  $$levels[v12] := BV32_ADD($curr, 1bv32);
  assert {:sourceloc} {:sourceloc_num 21} true;
  $$flag[0bv32] := 1bv32;
  goto $if.end.30;
$if.end.30:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  $i.0 := BV32_ADD($i.0, $W_SZ);
  goto $for.cond.19;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  goto $if.end.32;
$if.end.32:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  goto $for.inc.33;
$for.inc.33:
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  $v.0 := BV32_ADD($v.0, 1bv32);
  goto $for.cond;
$for.end.34:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  return;
$truebb:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  goto $if.then;
$falsebb:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 29} true;
  $chk_sz.1 := BV32_ADD($CHUNK_SZ, 1bv32);
  goto $if.end.8;
$truebb0:
  assume {:partition} v4;
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  goto $if.then.7;
$falsebb0:
  assume {:partition} !v4;
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  $chk_sz.0 := v3;
  goto $if.end;
$truebb1:
  assume {:partition} v5;
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  goto $for.body;
$falsebb1:
  assume {:partition} !v5;
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  goto $for.end.34;
$truebb2:
  assume {:partition} v7;
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  goto $if.then.13;
$falsebb2:
  assume {:partition} !v7;
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  goto $if.end.32;
$truebb3:
  assume {:partition} v11;
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  goto $for.body.21;
$falsebb3:
  assume {:partition} !v11;
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  goto $for.end;
$truebb4:
  assume {:partition} v14;
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  goto $if.then.27;
$falsebb4:
  assume {:partition} !v14;
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  goto $if.end.30;
}
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 1024bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 10bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_x == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_y == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_z == 0bv32 then 1bv1 else 0bv1) != 0bv1;
