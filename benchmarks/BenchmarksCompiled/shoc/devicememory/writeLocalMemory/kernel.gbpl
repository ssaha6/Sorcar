type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "output"} {:global} $$output : [bv32]bv32;
axiom {:array_info "$$output"} {:global} {:elem_width 32} {:source_name "output"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$output : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$output : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$output : bool;

var {:source_name "lbuf"} {:group_shared} $$writeLocalMemory.lbuf : [bv32]bv32;
axiom {:array_info "$$writeLocalMemory.lbuf"} {:group_shared} {:elem_width 32} {:source_name "lbuf"} {:source_elem_width 32} {:source_dimensions "4096"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$writeLocalMemory.lbuf : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$writeLocalMemory.lbuf : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$writeLocalMemory.lbuf : bool;

const _WATCHED_OFFSET : bv32;
const {:global_offset_x} global_offset_x : bv32;
const {:global_offset_y} global_offset_y : bv32;
const {:global_offset_z} global_offset_z : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function SI32_TO_FP32(bv32) : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvand"} BV32_AND(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvsdiv"} BV32_SDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
procedure {:source_name "writeLocalMemory"} {:kernel} $writeLocalMemory($size:bv32)
requires {:sourceloc_num 0} (if $size == 16777216bv32 then 1bv1 else 0bv1) != 0bv1;
{
  var $j.0:bv32;
  var $s.0:bv32;
  var $j.1:bv32;
  var v4:bv32;
  var v1:bv32;
  var v2:bool;
  var v0:bv32;
  var v3:bool;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  v1 := local_id_x;
  $j.0, $s.0 := 0bv32, v1;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v2 := BV32_SLT($j.0, 3000bv32);
  goto $truebb, $falsebb;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  assert {:sourceloc} {:sourceloc_num 4} true;
  $$writeLocalMemory.lbuf[BV32_AND($s.0, 4095bv32)] := SI32_TO_FP32(v0);
  assert {:sourceloc} {:sourceloc_num 5} true;
  $$writeLocalMemory.lbuf[BV32_AND(BV32_ADD($s.0, 1bv32), 4095bv32)] := SI32_TO_FP32(v0);
  assert {:sourceloc} {:sourceloc_num 6} true;
  $$writeLocalMemory.lbuf[BV32_AND(BV32_ADD($s.0, 2bv32), 4095bv32)] := SI32_TO_FP32(v0);
  assert {:sourceloc} {:sourceloc_num 7} true;
  $$writeLocalMemory.lbuf[BV32_AND(BV32_ADD($s.0, 3bv32), 4095bv32)] := SI32_TO_FP32(v0);
  assert {:sourceloc} {:sourceloc_num 8} true;
  $$writeLocalMemory.lbuf[BV32_AND(BV32_ADD($s.0, 4bv32), 4095bv32)] := SI32_TO_FP32(v0);
  assert {:sourceloc} {:sourceloc_num 9} true;
  $$writeLocalMemory.lbuf[BV32_AND(BV32_ADD($s.0, 5bv32), 4095bv32)] := SI32_TO_FP32(v0);
  assert {:sourceloc} {:sourceloc_num 10} true;
  $$writeLocalMemory.lbuf[BV32_AND(BV32_ADD($s.0, 6bv32), 4095bv32)] := SI32_TO_FP32(v0);
  assert {:sourceloc} {:sourceloc_num 11} true;
  $$writeLocalMemory.lbuf[BV32_AND(BV32_ADD($s.0, 7bv32), 4095bv32)] := SI32_TO_FP32(v0);
  assert {:sourceloc} {:sourceloc_num 12} true;
  $$writeLocalMemory.lbuf[BV32_AND(BV32_ADD($s.0, 8bv32), 4095bv32)] := SI32_TO_FP32(v0);
  assert {:sourceloc} {:sourceloc_num 13} true;
  $$writeLocalMemory.lbuf[BV32_AND(BV32_ADD($s.0, 9bv32), 4095bv32)] := SI32_TO_FP32(v0);
  assert {:sourceloc} {:sourceloc_num 14} true;
  $$writeLocalMemory.lbuf[BV32_AND(BV32_ADD($s.0, 10bv32), 4095bv32)] := SI32_TO_FP32(v0);
  assert {:sourceloc} {:sourceloc_num 15} true;
  $$writeLocalMemory.lbuf[BV32_AND(BV32_ADD($s.0, 11bv32), 4095bv32)] := SI32_TO_FP32(v0);
  assert {:sourceloc} {:sourceloc_num 16} true;
  $$writeLocalMemory.lbuf[BV32_AND(BV32_ADD($s.0, 12bv32), 4095bv32)] := SI32_TO_FP32(v0);
  assert {:sourceloc} {:sourceloc_num 17} true;
  $$writeLocalMemory.lbuf[BV32_AND(BV32_ADD($s.0, 13bv32), 4095bv32)] := SI32_TO_FP32(v0);
  assert {:sourceloc} {:sourceloc_num 18} true;
  $$writeLocalMemory.lbuf[BV32_AND(BV32_ADD($s.0, 14bv32), 4095bv32)] := SI32_TO_FP32(v0);
  assert {:sourceloc} {:sourceloc_num 19} true;
  $$writeLocalMemory.lbuf[BV32_AND(BV32_ADD($s.0, 15bv32), 4095bv32)] := SI32_TO_FP32(v0);
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  $j.0, $s.0 := BV32_ADD($j.0, 1bv32), BV32_AND(BV32_ADD($s.0, 16bv32), 4095bv32);
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  call {:sourceloc_num 22} $bugle_barrier(1bv1, 0bv1);
  $j.1 := 0bv32;
  goto $for.cond.70;
$for.cond.70:
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  v3 := BV32_SLT($j.1, BV32_SDIV(4096bv32, group_size_x));
  goto $truebb0, $falsebb0;
$for.body.73:
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  assert {:sourceloc} {:sourceloc_num 25} true;
  v4 := $$writeLocalMemory.lbuf[v1];
  assert {:sourceloc} {:sourceloc_num 26} true;
  $$output[v0] := v4;
  goto $for.inc.76;
$for.inc.76:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  $j.1 := BV32_ADD($j.1, 1bv32);
  goto $for.cond.70;
$for.end.78:
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  return;
$truebb:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 29} true;
  goto $for.body;
$falsebb:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  goto $for.end;
$truebb0:
  assume {:partition} v3;
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  goto $for.body.73;
$falsebb0:
  assume {:partition} !v3;
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  goto $for.end.78;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 256bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 40bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_x == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_y == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_z == 0bv32 then 1bv1 else 0bv1) != 0bv1;
