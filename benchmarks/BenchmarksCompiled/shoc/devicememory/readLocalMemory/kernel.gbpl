type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "data"} {:global} $$data : [bv32]bv32;
axiom {:array_info "$$data"} {:global} {:elem_width 32} {:source_name "data"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$data : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$data : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$data : bool;

var {:source_name "output"} {:global} $$output : [bv32]bv32;
axiom {:array_info "$$output"} {:global} {:elem_width 32} {:source_name "output"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$output : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$output : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$output : bool;

var {:source_name "lbuf"} {:group_shared} $$readLocalMemory.lbuf : [bv32]bv32;
axiom {:array_info "$$readLocalMemory.lbuf"} {:group_shared} {:elem_width 32} {:source_name "lbuf"} {:source_elem_width 32} {:source_dimensions "4096"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$readLocalMemory.lbuf : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$readLocalMemory.lbuf : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$readLocalMemory.lbuf : bool;

const _WATCHED_OFFSET : bv32;
const {:global_offset_x} global_offset_x : bv32;
const {:global_offset_y} global_offset_y : bv32;
const {:global_offset_z} global_offset_z : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FADD32(bv32, bv32) : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvand"} BV32_AND(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvsdiv"} BV32_SDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvsge"} BV32_SGE(bv32, bv32) : bool;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvult"} BV32_ULT(bv32, bv32) : bool;
procedure {:source_name "readLocalMemory"} {:kernel} $readLocalMemory($size:bv32)
requires {:sourceloc_num 0} (if $size == 16777216bv32 then 1bv1 else 0bv1) != 0bv1;
{
  var $j.0:bv32;
  var $0:bv1;
  var $j.1:bv32;
  var $i.0:bv32;
  var $j.2:bv32;
  var $sum.0:bv32;
  var $s.0:bv32;
  var v2:bv32;
  var v1:bv32;
  var v0:bv32;
  var v4:bv32;
  var v3:bv32;
  var v5:bool;
  var v6:bool;
  var v19:bv32;
  var v18:bv32;
  var v24:bv32;
  var v17:bv32;
  var v20:bv32;
  var v23:bv32;
  var v16:bv32;
  var v25:bv32;
  var v21:bv32;
  var v22:bv32;
  var v9:bv32;
  var v7:bv32;
  var v14:bv32;
  var v15:bv32;
  var v11:bv32;
  var v12:bv32;
  var v13:bv32;
  var v10:bool;
  var v8:bool;
  var v26:bv32;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  v1 := local_id_x;
  v2 := group_size_x;
  v3 := BV32_SDIV(4096bv32, v2);
  v4 := BV32_ADD(BV32_MUL(v2, group_id_x), BV32_MUL(v1, v3));
  $j.0 := 0bv32;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 3} (if (_WRITE_HAS_OCCURRED_$$readLocalMemory.lbuf ==> BV32_ULT(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), BV32_MUL(v1, v3)), v3)) then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 4} (if BV32_SGE($j.0, 0bv32) then 1bv1 else 0bv1) != 0bv1;
  v5 := BV32_SLT($j.0, v3);
  goto $truebb, $falsebb;
$land.rhs:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  $0 := (if BV32_SLT($j.0, BV32_SUB($size, v4)) then 1bv1 else 0bv1);
  goto $land.end;
$land.end:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  v6 := $0 == 1bv1;
  goto $truebb0, $falsebb0;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  assert {:sourceloc} {:sourceloc_num 8} true;
  v7 := $$data[BV32_ADD(v4, $j.0)];
  assert {:sourceloc} {:sourceloc_num 9} true;
  $$readLocalMemory.lbuf[BV32_ADD(BV32_MUL(v1, v3), $j.0)] := v7;
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  $j.0 := BV32_ADD($j.0, 1bv32);
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  $j.1, $i.0 := $j.0, 0bv32;
  goto $for.cond.20;
$for.cond.20:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 13} (if (_WRITE_HAS_OCCURRED_$$readLocalMemory.lbuf ==> BV32_ULT(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), BV32_MUL(v1, v3)), v3)) then 1bv1 else 0bv1) != 0bv1;
  v8 := BV32_SLT($j.1, v3);
  goto $truebb1, $falsebb1;
$for.body.29:
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  assert {:sourceloc} {:sourceloc_num 15} true;
  v9 := $$data[$i.0];
  assert {:sourceloc} {:sourceloc_num 16} true;
  $$readLocalMemory.lbuf[BV32_ADD(BV32_MUL(v1, v3), $j.1)] := v9;
  goto $for.inc.34;
$for.inc.34:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  $j.1, $i.0 := BV32_ADD($j.1, 1bv32), BV32_ADD($i.0, 1bv32);
  goto $for.cond.20;
$for.end.37:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  call {:sourceloc_num 19} $bugle_barrier(1bv1, 0bv1);
  $j.2, $sum.0, $s.0 := 0bv32, 0bv32, v1;
  goto $for.cond.38;
$for.cond.38:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  v10 := BV32_SLT($j.2, 3000bv32);
  goto $truebb2, $falsebb2;
$for.body.40:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  assert {:sourceloc} {:sourceloc_num 22} true;
  v11 := $$readLocalMemory.lbuf[BV32_AND($s.0, 4095bv32)];
  assert {:sourceloc} {:sourceloc_num 23} true;
  v12 := $$readLocalMemory.lbuf[BV32_AND(BV32_ADD($s.0, 1bv32), 4095bv32)];
  assert {:sourceloc} {:sourceloc_num 24} true;
  v13 := $$readLocalMemory.lbuf[BV32_AND(BV32_ADD($s.0, 2bv32), 4095bv32)];
  assert {:sourceloc} {:sourceloc_num 25} true;
  v14 := $$readLocalMemory.lbuf[BV32_AND(BV32_ADD($s.0, 3bv32), 4095bv32)];
  assert {:sourceloc} {:sourceloc_num 26} true;
  v15 := $$readLocalMemory.lbuf[BV32_AND(BV32_ADD($s.0, 4bv32), 4095bv32)];
  assert {:sourceloc} {:sourceloc_num 27} true;
  v16 := $$readLocalMemory.lbuf[BV32_AND(BV32_ADD($s.0, 5bv32), 4095bv32)];
  assert {:sourceloc} {:sourceloc_num 28} true;
  v17 := $$readLocalMemory.lbuf[BV32_AND(BV32_ADD($s.0, 6bv32), 4095bv32)];
  assert {:sourceloc} {:sourceloc_num 29} true;
  v18 := $$readLocalMemory.lbuf[BV32_AND(BV32_ADD($s.0, 7bv32), 4095bv32)];
  assert {:sourceloc} {:sourceloc_num 30} true;
  v19 := $$readLocalMemory.lbuf[BV32_AND(BV32_ADD($s.0, 8bv32), 4095bv32)];
  assert {:sourceloc} {:sourceloc_num 31} true;
  v20 := $$readLocalMemory.lbuf[BV32_AND(BV32_ADD($s.0, 9bv32), 4095bv32)];
  assert {:sourceloc} {:sourceloc_num 32} true;
  v21 := $$readLocalMemory.lbuf[BV32_AND(BV32_ADD($s.0, 10bv32), 4095bv32)];
  assert {:sourceloc} {:sourceloc_num 33} true;
  v22 := $$readLocalMemory.lbuf[BV32_AND(BV32_ADD($s.0, 11bv32), 4095bv32)];
  assert {:sourceloc} {:sourceloc_num 34} true;
  v23 := $$readLocalMemory.lbuf[BV32_AND(BV32_ADD($s.0, 12bv32), 4095bv32)];
  assert {:sourceloc} {:sourceloc_num 35} true;
  v24 := $$readLocalMemory.lbuf[BV32_AND(BV32_ADD($s.0, 13bv32), 4095bv32)];
  assert {:sourceloc} {:sourceloc_num 36} true;
  v25 := $$readLocalMemory.lbuf[BV32_AND(BV32_ADD($s.0, 14bv32), 4095bv32)];
  assert {:sourceloc} {:sourceloc_num 37} true;
  v26 := $$readLocalMemory.lbuf[BV32_AND(BV32_ADD($s.0, 15bv32), 4095bv32)];
  goto $for.inc.106;
$for.inc.106:
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  $j.2, $sum.0, $s.0 := BV32_ADD($j.2, 1bv32), FADD32($sum.0, FADD32(FADD32(FADD32(FADD32(FADD32(FADD32(FADD32(FADD32(FADD32(FADD32(FADD32(FADD32(FADD32(FADD32(FADD32(v11, v12), v13), v14), v15), v16), v17), v18), v19), v20), v21), v22), v23), v24), v25), v26)), BV32_AND(BV32_ADD($s.0, 16bv32), 4095bv32);
  goto $for.cond.38;
$for.end.108:
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  assert {:sourceloc} {:sourceloc_num 40} true;
  $$output[v0] := $sum.0;
  return;
$truebb:
  assume {:partition} v5;
  assert {:block_sourceloc} {:sourceloc_num 41} true;
  goto $land.rhs;
$falsebb:
  assume {:partition} !v5;
  assert {:block_sourceloc} {:sourceloc_num 42} true;
  $0 := 0bv1;
  goto $land.end;
$truebb0:
  assume {:partition} v6;
  assert {:block_sourceloc} {:sourceloc_num 43} true;
  goto $for.body;
$falsebb0:
  assume {:partition} !v6;
  assert {:block_sourceloc} {:sourceloc_num 44} true;
  goto $for.end;
$truebb1:
  assume {:partition} v8;
  assert {:block_sourceloc} {:sourceloc_num 45} true;
  goto $for.body.29;
$falsebb1:
  assume {:partition} !v8;
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  goto $for.end.37;
$truebb2:
  assume {:partition} v10;
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  goto $for.body.40;
$falsebb2:
  assume {:partition} !v10;
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  goto $for.end.108;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 256bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 40bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_x == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_y == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_z == 0bv32 then 1bv1 else 0bv1) != 0bv1;
