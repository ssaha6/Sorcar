type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "work"} {:global} $$work : [bv32]bv32;
axiom {:array_info "$$work"} {:global} {:elem_width 32} {:source_name "work"} {:source_elem_width 64} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 64} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$work : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 64} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$work : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 64} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$work : bool;

var {:source_name "reversed.i"} $$reversed.i : [bv32]bv32;
axiom {:array_info "$$reversed.i"} {:elem_width 32} {:source_name "reversed.i"} {:source_elem_width 32} {:source_dimensions "8"} true;

var {:source_name "data"} $$data : [bv32]bv32;
axiom {:array_info "$$data"} {:elem_width 32} {:source_name "data"} {:source_elem_width 64} {:source_dimensions "8"} true;

var {:source_name "reversed8"} $$reversed8 : [bv32]bv32;
axiom {:array_info "$$reversed8"} {:elem_width 32} {:source_name "reversed8"} {:source_elem_width 32} {:source_dimensions "8"} true;

var {:source_name "reversed8260"} $$reversed8260 : [bv32]bv32;
axiom {:array_info "$$reversed8260"} {:elem_width 32} {:source_name "reversed8260"} {:source_elem_width 32} {:source_dimensions "8"} true;

var {:source_name "ifft1D_512.reversed8"} $$ifft1D_512.reversed8 : [bv32]bv32;
axiom {:array_info "$$ifft1D_512.reversed8"} {:elem_width 32} {:source_name "ifft1D_512.reversed8"} {:source_elem_width 32} {:source_dimensions "8"} true;

var {:source_name "smem"} {:group_shared} $$ifft1D_512.smem : [bv32]bv32;
axiom {:array_info "$$ifft1D_512.smem"} {:group_shared} {:elem_width 32} {:source_name "smem"} {:source_elem_width 32} {:source_dimensions "576"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$ifft1D_512.smem : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$ifft1D_512.smem : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$ifft1D_512.smem : bool;

var {:source_name "storex8.reversed"} $$storex8.reversed : [bv32]bv32;
axiom {:array_info "$$storex8.reversed"} {:elem_width 32} {:source_name "storex8.reversed"} {:source_elem_width 32} {:source_dimensions "8"} true;

var {:source_name "storey8.reversed"} $$storey8.reversed : [bv32]bv32;
axiom {:array_info "$$storey8.reversed"} {:elem_width 32} {:source_name "storey8.reversed"} {:source_elem_width 32} {:source_dimensions "8"} true;

var {:source_name "ifft1D_512.reversed8.1"} $$ifft1D_512.reversed8.1 : [bv32]bv32;
axiom {:array_info "$$ifft1D_512.reversed8.1"} {:elem_width 32} {:source_name "ifft1D_512.reversed8.1"} {:source_elem_width 32} {:source_dimensions "8"} true;

var {:source_name "globalStores8.reversed"} $$globalStores8.reversed : [bv32]bv32;
axiom {:array_info "$$globalStores8.reversed"} {:elem_width 32} {:source_name "globalStores8.reversed"} {:source_elem_width 32} {:source_dimensions "8"} true;

const _WATCHED_OFFSET : bv32;
const {:global_offset_x} global_offset_x : bv32;
const {:global_offset_y} global_offset_y : bv32;
const {:global_offset_z} global_offset_z : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FADD32(bv32, bv32) : bv32;
function FCOS32(bv32) : bv32;
function FDIV32(bv32, bv32) : bv32;
function FDIV64(bv64, bv64) : bv64;
function FMUL32(bv32, bv32) : bv32;
function FMUL64(bv64, bv64) : bv64;
function FP64_CONV32(bv64) : bv32;
function FSIN32(bv32) : bv32;
function FSUB32(bv32, bv32) : bv32;
function SI32_TO_FP64(bv32) : bv64;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvand"} BV32_AND(bv32, bv32) : bv32;
function {:bvbuiltin "bvashr"} BV32_ASHR(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvult"} BV32_ULT(bv32, bv32) : bool;
function {:bvbuiltin "bvurem"} BV32_UREM(bv32, bv32) : bv32;
procedure {:source_name "ifft1D_512"} {:kernel} $ifft1D_512()
requires $$ifft1D_512.reversed8[0bv32] == 0bv32;
requires $$ifft1D_512.reversed8[1bv32] == 4bv32;
requires $$ifft1D_512.reversed8[2bv32] == 2bv32;
requires $$ifft1D_512.reversed8[3bv32] == 6bv32;
requires $$ifft1D_512.reversed8[4bv32] == 1bv32;
requires $$ifft1D_512.reversed8[5bv32] == 5bv32;
requires $$ifft1D_512.reversed8[6bv32] == 3bv32;
requires $$ifft1D_512.reversed8[7bv32] == 7bv32;
requires $$storex8.reversed[0bv32] == 0bv32;
requires $$storex8.reversed[1bv32] == 4bv32;
requires $$storex8.reversed[2bv32] == 2bv32;
requires $$storex8.reversed[3bv32] == 6bv32;
requires $$storex8.reversed[4bv32] == 1bv32;
requires $$storex8.reversed[5bv32] == 5bv32;
requires $$storex8.reversed[6bv32] == 3bv32;
requires $$storex8.reversed[7bv32] == 7bv32;
requires $$storey8.reversed[0bv32] == 0bv32;
requires $$storey8.reversed[1bv32] == 4bv32;
requires $$storey8.reversed[2bv32] == 2bv32;
requires $$storey8.reversed[3bv32] == 6bv32;
requires $$storey8.reversed[4bv32] == 1bv32;
requires $$storey8.reversed[5bv32] == 5bv32;
requires $$storey8.reversed[6bv32] == 3bv32;
requires $$storey8.reversed[7bv32] == 7bv32;
requires $$ifft1D_512.reversed8.1[0bv32] == 0bv32;
requires $$ifft1D_512.reversed8.1[1bv32] == 4bv32;
requires $$ifft1D_512.reversed8.1[2bv32] == 2bv32;
requires $$ifft1D_512.reversed8.1[3bv32] == 6bv32;
requires $$ifft1D_512.reversed8.1[4bv32] == 1bv32;
requires $$ifft1D_512.reversed8.1[5bv32] == 5bv32;
requires $$ifft1D_512.reversed8.1[6bv32] == 3bv32;
requires $$ifft1D_512.reversed8.1[7bv32] == 7bv32;
requires $$globalStores8.reversed[0bv32] == 0bv32;
requires $$globalStores8.reversed[1bv32] == 4bv32;
requires $$globalStores8.reversed[2bv32] == 2bv32;
requires $$globalStores8.reversed[3bv32] == 6bv32;
requires $$globalStores8.reversed[4bv32] == 1bv32;
requires $$globalStores8.reversed[5bv32] == 5bv32;
requires $$globalStores8.reversed[6bv32] == 3bv32;
requires $$globalStores8.reversed[7bv32] == 7bv32;
{
  var $i.i.0:bv32;
  var $j.0:bv32;
  var $i.i.1237.0:bv32;
  var $i.i.1266.0:bv32;
  var $i.i.1168.0:bv32;
  var $i.i.1151.0:bv32;
  var $j261.0:bv32;
  var $i.i.790.0:bv32;
  var $i.i.774.0:bv32;
  var $i.i.662.0:bv32;
  var $i.i.650.0:bv32;
  var $i.0:bv32;
  var $i.i.432.0:bv32;
  var v19:bv32;
  var v14:bv32;
  var v13:bv32;
  var v12:bv32;
  var v15:bv32;
  var v17:bv32;
  var v16:bv32;
  var v18:bv32;
  var v20:bv32;
  var v23:bv32;
  var v28:bv32;
  var v21:bv32;
  var v24:bv32;
  var v25:bv32;
  var v26:bv32;
  var v29:bv32;
  var v27:bv32;
  var v22:bv32;
  var v34:bv32;
  var v31:bv32;
  var v32:bv32;
  var v30:bv32;
  var v33:bv32;
  var v39:bv32;
  var v41:bv32;
  var v40:bv32;
  var v37:bv32;
  var v35:bv32;
  var v38:bv32;
  var v36:bv32;
  var v76:bv32;
  var v49:bv32;
  var v48:bv32;
  var v42:bv32;
  var v45:bv32;
  var v44:bv32;
  var v43:bv32;
  var v47:bv32;
  var v46:bv32;
  var v57:bv32;
  var v52:bv32;
  var v55:bv32;
  var v51:bv32;
  var v50:bv32;
  var v53:bv32;
  var v54:bv32;
  var v56:bv32;
  var v58:bv32;
  var v62:bv32;
  var v65:bv32;
  var v61:bv32;
  var v67:bv32;
  var v66:bv32;
  var v59:bv32;
  var v60:bv32;
  var v64:bv32;
  var v63:bv32;
  var v71:bv32;
  var v73:bv32;
  var v74:bv32;
  var v75:bv32;
  var v68:bv32;
  var v72:bv32;
  var v69:bv32;
  var v70:bv32;
  var v6:bv32;
  var v5:bv32;
  var v7:bv32;
  var v8:bv32;
  var v11:bv32;
  var v9:bv32;
  var v10:bv32;
  var v0:bv32;
  var v1:bv32;
  var v2:bv32;
  var v3:bv32;
  var v4:bool;
  var v97:bool;
  var v101:bv32;
  var v102:bv32;
  var v104:bv32;
  var v103:bv32;
  var v113:bool;
  var v117:bv32;
  var v118:bool;
  var v122:bv32;
  var v88:bv32;
  var v86:bv32;
  var v85:bv32;
  var v83:bv32;
  var v84:bv32;
  var v82:bv32;
  var v87:bv32;
  var v94:bv32;
  var v89:bv32;
  var v91:bv32;
  var v92:bv32;
  var v90:bv32;
  var v93:bv32;
  var v98:bv32;
  var v95:bv32;
  var v99:bv32;
  var v346:bv32;
  var v96:bv32;
  var v100:bv32;
  var v111:bv32;
  var v112:bv32;
  var v107:bv32;
  var v109:bv32;
  var v108:bv32;
  var v105:bv32;
  var v106:bv32;
  var v110:bv32;
  var v120:bv32;
  var v116:bv32;
  var v114:bv32;
  var v119:bv32;
  var v115:bv32;
  var v127:bv32;
  var v123:bv32;
  var v126:bv32;
  var v121:bv32;
  var v124:bv32;
  var v125:bv32;
  var v128:bv32;
  var v130:bv32;
  var v134:bv32;
  var v129:bv32;
  var v133:bv32;
  var v132:bv32;
  var v144:bv32;
  var v139:bv32;
  var v142:bv32;
  var v145:bv32;
  var v138:bv32;
  var v143:bv32;
  var v137:bv32;
  var v141:bv32;
  var v140:bv32;
  var v154:bv32;
  var v155:bv32;
  var v146:bv32;
  var v151:bv32;
  var v152:bv32;
  var v149:bv32;
  var v150:bv32;
  var v148:bv32;
  var v147:bv32;
  var v153:bv32;
  var v161:bv32;
  var v160:bv32;
  var v158:bv32;
  var v162:bv32;
  var v156:bv32;
  var v163:bv32;
  var v157:bv32;
  var v164:bv32;
  var v159:bv32;
  var v77:bv32;
  var v78:bv32;
  var v80:bv32;
  var v79:bv32;
  var v81:bv32;
  var v136:bool;
  var v135:bv32;
  var v131:bool;
  var v240:bv32;
  var v244:bv32;
  var v239:bv32;
  var v238:bv32;
  var v243:bv32;
  var v241:bv32;
  var v242:bv32;
  var v233:bv32;
  var v245:bv32;
  var v249:bv32;
  var v252:bv32;
  var v248:bv32;
  var v247:bv32;
  var v166:bv32;
  var v167:bv32;
  var v169:bv32;
  var v168:bv32;
  var v253:bv32;
  var v165:bv32;
  var v178:bv32;
  var v176:bv32;
  var v175:bv32;
  var v173:bv32;
  var v172:bv32;
  var v177:bv32;
  var v171:bv32;
  var v174:bv32;
  var v170:bv32;
  var v182:bv32;
  var v183:bv32;
  var v184:bv32;
  var v179:bv32;
  var v180:bv32;
  var v185:bv32;
  var v186:bv32;
  var v181:bv32;
  var v188:bv32;
  var v191:bv32;
  var v192:bv32;
  var v187:bv32;
  var v193:bv32;
  var v195:bv32;
  var v254:bv32;
  var v189:bv32;
  var v194:bv32;
  var v190:bv32;
  var v204:bv32;
  var v203:bv32;
  var v198:bv32;
  var v200:bv32;
  var v201:bv32;
  var v202:bv32;
  var v196:bv32;
  var v199:bv32;
  var v197:bv32;
  var v205:bv32;
  var v208:bv32;
  var v206:bv32;
  var v210:bv32;
  var v207:bv32;
  var v209:bv32;
  var v211:bv32;
  var v215:bv32;
  var v212:bv32;
  var v216:bv32;
  var v217:bv32;
  var v218:bv32;
  var v213:bv32;
  var v214:bv32;
  var v219:bv32;
  var v220:bv32;
  var v223:bv32;
  var v224:bv32;
  var v225:bv32;
  var v221:bv32;
  var v222:bv32;
  var v232:bv32;
  var v231:bv32;
  var v227:bv32;
  var v228:bv32;
  var v226:bv32;
  var v229:bv32;
  var v230:bool;
  var v236:bv32;
  var v235:bv32;
  var v234:bv32;
  var v255:bv32;
  var v264:bool;
  var v269:bool;
  var v268:bv32;
  var v237:bv32;
  var v246:bool;
  var v250:bv32;
  var v251:bool;
  var v259:bv32;
  var v263:bv32;
  var v260:bv32;
  var v261:bv32;
  var v256:bv32;
  var v262:bv32;
  var v258:bv32;
  var v257:bv32;
  var v272:bv32;
  var v271:bv32;
  var v265:bv32;
  var v270:bv32;
  var v267:bv32;
  var v273:bv32;
  var v266:bv32;
  var v276:bv32;
  var v275:bv32;
  var v277:bv32;
  var v281:bv32;
  var v279:bv32;
  var v278:bv32;
  var v283:bv32;
  var v280:bv32;
  var v282:bv32;
  var v274:bv32;
  var v290:bv32;
  var v287:bv32;
  var v285:bv32;
  var v288:bv32;
  var v289:bv32;
  var v344:bv32;
  var v291:bv32;
  var v286:bv32;
  var v284:bv32;
  var v293:bv32;
  var v299:bv32;
  var v295:bv32;
  var v292:bv32;
  var v296:bv32;
  var v294:bv32;
  var v297:bv32;
  var v298:bv32;
  var v302:bv32;
  var v304:bv32;
  var v305:bv32;
  var v300:bv32;
  var v301:bv32;
  var v303:bv32;
  var v313:bv32;
  var v310:bv32;
  var v308:bv32;
  var v314:bv32;
  var v311:bv32;
  var v309:bv32;
  var v312:bv32;
  var v306:bv32;
  var v307:bv32;
  var v315:bv32;
  var v320:bv32;
  var v319:bv32;
  var v316:bv32;
  var v317:bv32;
  var v321:bv32;
  var v318:bv32;
  var v326:bv32;
  var v325:bv32;
  var v324:bv32;
  var v327:bv32;
  var v322:bv32;
  var v328:bv32;
  var v329:bv32;
  var v330:bv32;
  var v331:bv32;
  var v323:bv32;
  var v345:bv32;
  var v338:bv32;
  var v334:bv32;
  var v339:bv32;
  var v333:bv32;
  var v332:bv32;
  var v337:bv32;
  var v336:bv32;
  var v335:bv32;
  var v342:bv32;
  var v343:bv32;
  var v341:bv32;
  var v340:bv32;
  var v355:bool;
  var v372:bool;
  var v347:bv32;
  var v349:bv32;
  var v348:bv32;
  var v351:bv32;
  var v353:bv32;
  var v354:bv32;
  var v352:bv32;
  var v350:bv32;
  var v357:bv32;
  var v361:bv32;
  var v358:bv32;
  var v363:bv32;
  var v362:bv32;
  var v356:bv32;
  var v360:bv32;
  var v359:bv32;
  var v369:bv32;
  var v370:bv32;
  var v365:bv32;
  var v368:bv32;
  var v364:bv32;
  var v367:bv32;
  var v366:bv32;
  var v375:bv32;
  var v373:bv32;
  var v371:bv32;
  var v374:bv32;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  v0 := local_id_x;
  v1 := BV32_ADD(BV32_MUL(group_id_x, 512bv32), v0);
  v2 := BV32_ASHR(v0, 3bv32);
  v3 := BV32_AND(v0, 7bv32);
  $i.i.0 := 0bv32;
  goto $for.cond.i;
$for.cond.i:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  v4 := BV32_SLT($i.i.0, 8bv32);
  goto $truebb, $falsebb;
$for.body.i:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  assert {:sourceloc} {:sourceloc_num 3} true;
  v5 := $$work[BV32_ADD(BV32_MUL(v1, 2bv32), BV32_MUL(BV32_MUL($i.i.0, 64bv32), 2bv32))];
  assert {:sourceloc} {:sourceloc_num 4} true;
  v6 := $$work[BV32_ADD(BV32_ADD(BV32_MUL(v1, 2bv32), BV32_MUL(BV32_MUL($i.i.0, 64bv32), 2bv32)), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 5} true;
  $$data[BV32_MUL($i.i.0, 2bv32)] := v5;
  assert {:sourceloc} {:sourceloc_num 6} true;
  $$data[BV32_ADD(BV32_MUL($i.i.0, 2bv32), 1bv32)] := v6;
  $i.i.0 := BV32_ADD($i.i.0, 1bv32);
  goto $for.cond.i;
$globalLoads8.exit:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  assert {:sourceloc} {:sourceloc_num 8} true;
  v7 := $$data[0bv32];
  assert {:sourceloc} {:sourceloc_num 9} true;
  v8 := $$data[1bv32];
  assert {:sourceloc} {:sourceloc_num 10} true;
  v9 := $$data[8bv32];
  assert {:sourceloc} {:sourceloc_num 11} true;
  v10 := $$data[9bv32];
  assert {:sourceloc} {:sourceloc_num 12} true;
  $$data[0bv32] := FADD32(v7, v9);
  assert {:sourceloc} {:sourceloc_num 13} true;
  $$data[1bv32] := FADD32(v8, v10);
  assert {:sourceloc} {:sourceloc_num 14} true;
  v11 := $$data[8bv32];
  assert {:sourceloc} {:sourceloc_num 15} true;
  v12 := $$data[9bv32];
  assert {:sourceloc} {:sourceloc_num 16} true;
  $$data[8bv32] := FSUB32(v7, v11);
  assert {:sourceloc} {:sourceloc_num 17} true;
  $$data[9bv32] := FSUB32(v8, v12);
  assert {:sourceloc} {:sourceloc_num 18} true;
  v13 := $$data[2bv32];
  assert {:sourceloc} {:sourceloc_num 19} true;
  v14 := $$data[3bv32];
  assert {:sourceloc} {:sourceloc_num 20} true;
  v15 := $$data[10bv32];
  assert {:sourceloc} {:sourceloc_num 21} true;
  v16 := $$data[11bv32];
  assert {:sourceloc} {:sourceloc_num 22} true;
  $$data[2bv32] := FADD32(v13, v15);
  assert {:sourceloc} {:sourceloc_num 23} true;
  $$data[3bv32] := FADD32(v14, v16);
  assert {:sourceloc} {:sourceloc_num 24} true;
  v17 := $$data[10bv32];
  assert {:sourceloc} {:sourceloc_num 25} true;
  v18 := $$data[11bv32];
  assert {:sourceloc} {:sourceloc_num 26} true;
  $$data[10bv32] := FSUB32(v13, v17);
  assert {:sourceloc} {:sourceloc_num 27} true;
  $$data[11bv32] := FSUB32(v14, v18);
  assert {:sourceloc} {:sourceloc_num 28} true;
  v19 := $$data[4bv32];
  assert {:sourceloc} {:sourceloc_num 29} true;
  v20 := $$data[5bv32];
  assert {:sourceloc} {:sourceloc_num 30} true;
  v21 := $$data[12bv32];
  assert {:sourceloc} {:sourceloc_num 31} true;
  v22 := $$data[13bv32];
  assert {:sourceloc} {:sourceloc_num 32} true;
  $$data[4bv32] := FADD32(v19, v21);
  assert {:sourceloc} {:sourceloc_num 33} true;
  $$data[5bv32] := FADD32(v20, v22);
  assert {:sourceloc} {:sourceloc_num 34} true;
  v23 := $$data[12bv32];
  assert {:sourceloc} {:sourceloc_num 35} true;
  v24 := $$data[13bv32];
  assert {:sourceloc} {:sourceloc_num 36} true;
  $$data[12bv32] := FSUB32(v19, v23);
  assert {:sourceloc} {:sourceloc_num 37} true;
  $$data[13bv32] := FSUB32(v20, v24);
  assert {:sourceloc} {:sourceloc_num 38} true;
  v25 := $$data[6bv32];
  assert {:sourceloc} {:sourceloc_num 39} true;
  v26 := $$data[7bv32];
  assert {:sourceloc} {:sourceloc_num 40} true;
  v27 := $$data[14bv32];
  assert {:sourceloc} {:sourceloc_num 41} true;
  v28 := $$data[15bv32];
  assert {:sourceloc} {:sourceloc_num 42} true;
  $$data[6bv32] := FADD32(v25, v27);
  assert {:sourceloc} {:sourceloc_num 43} true;
  $$data[7bv32] := FADD32(v26, v28);
  assert {:sourceloc} {:sourceloc_num 44} true;
  v29 := $$data[14bv32];
  assert {:sourceloc} {:sourceloc_num 45} true;
  v30 := $$data[15bv32];
  assert {:sourceloc} {:sourceloc_num 46} true;
  $$data[14bv32] := FSUB32(v25, v29);
  assert {:sourceloc} {:sourceloc_num 47} true;
  $$data[15bv32] := FSUB32(v26, v30);
  assert {:sourceloc} {:sourceloc_num 48} true;
  v31 := $$data[10bv32];
  assert {:sourceloc} {:sourceloc_num 49} true;
  v32 := $$data[11bv32];
  assert {:sourceloc} {:sourceloc_num 50} true;
  $$data[10bv32] := FMUL32(1060439283bv32, FADD32(FMUL32(v31, 1065353216bv32), FSUB32(2147483648bv32, FMUL32(v32, 1065353216bv32))));
  assert {:sourceloc} {:sourceloc_num 51} true;
  $$data[11bv32] := FMUL32(1060439283bv32, FADD32(FMUL32(v31, 1065353216bv32), FMUL32(v32, 1065353216bv32)));
  assert {:sourceloc} {:sourceloc_num 52} true;
  v33 := $$data[12bv32];
  assert {:sourceloc} {:sourceloc_num 53} true;
  v34 := $$data[13bv32];
  assert {:sourceloc} {:sourceloc_num 54} true;
  $$data[12bv32] := FADD32(FMUL32(v33, 0bv32), FSUB32(2147483648bv32, FMUL32(v34, 1065353216bv32)));
  assert {:sourceloc} {:sourceloc_num 55} true;
  $$data[13bv32] := FADD32(FMUL32(v33, 1065353216bv32), FMUL32(v34, 0bv32));
  assert {:sourceloc} {:sourceloc_num 56} true;
  v35 := $$data[14bv32];
  assert {:sourceloc} {:sourceloc_num 57} true;
  v36 := $$data[15bv32];
  assert {:sourceloc} {:sourceloc_num 58} true;
  $$data[14bv32] := FMUL32(1060439283bv32, FADD32(FMUL32(v35, 3212836864bv32), FSUB32(2147483648bv32, FMUL32(v36, 1065353216bv32))));
  assert {:sourceloc} {:sourceloc_num 59} true;
  $$data[15bv32] := FMUL32(1060439283bv32, FADD32(FMUL32(v35, 1065353216bv32), FMUL32(v36, 3212836864bv32)));
  assert {:sourceloc} {:sourceloc_num 60} true;
  v37 := $$data[0bv32];
  assert {:sourceloc} {:sourceloc_num 61} true;
  v38 := $$data[1bv32];
  assert {:sourceloc} {:sourceloc_num 62} true;
  v39 := $$data[4bv32];
  assert {:sourceloc} {:sourceloc_num 63} true;
  v40 := $$data[5bv32];
  assert {:sourceloc} {:sourceloc_num 64} true;
  $$data[0bv32] := FADD32(v37, v39);
  assert {:sourceloc} {:sourceloc_num 65} true;
  $$data[1bv32] := FADD32(v38, v40);
  assert {:sourceloc} {:sourceloc_num 66} true;
  v41 := $$data[4bv32];
  assert {:sourceloc} {:sourceloc_num 67} true;
  v42 := $$data[5bv32];
  assert {:sourceloc} {:sourceloc_num 68} true;
  $$data[4bv32] := FSUB32(v37, v41);
  assert {:sourceloc} {:sourceloc_num 69} true;
  $$data[5bv32] := FSUB32(v38, v42);
  assert {:sourceloc} {:sourceloc_num 70} true;
  v43 := $$data[2bv32];
  assert {:sourceloc} {:sourceloc_num 71} true;
  v44 := $$data[3bv32];
  assert {:sourceloc} {:sourceloc_num 72} true;
  v45 := $$data[6bv32];
  assert {:sourceloc} {:sourceloc_num 73} true;
  v46 := $$data[7bv32];
  assert {:sourceloc} {:sourceloc_num 74} true;
  $$data[2bv32] := FADD32(v43, v45);
  assert {:sourceloc} {:sourceloc_num 75} true;
  $$data[3bv32] := FADD32(v44, v46);
  assert {:sourceloc} {:sourceloc_num 76} true;
  v47 := $$data[6bv32];
  assert {:sourceloc} {:sourceloc_num 77} true;
  v48 := $$data[7bv32];
  assert {:sourceloc} {:sourceloc_num 78} true;
  $$data[6bv32] := FSUB32(v43, v47);
  assert {:sourceloc} {:sourceloc_num 79} true;
  $$data[7bv32] := FSUB32(v44, v48);
  assert {:sourceloc} {:sourceloc_num 80} true;
  v49 := $$data[6bv32];
  assert {:sourceloc} {:sourceloc_num 81} true;
  v50 := $$data[7bv32];
  assert {:sourceloc} {:sourceloc_num 82} true;
  $$data[6bv32] := FADD32(FMUL32(v49, 0bv32), FSUB32(2147483648bv32, FMUL32(v50, 1065353216bv32)));
  assert {:sourceloc} {:sourceloc_num 83} true;
  $$data[7bv32] := FADD32(FMUL32(v49, 1065353216bv32), FMUL32(v50, 0bv32));
  assert {:sourceloc} {:sourceloc_num 84} true;
  v51 := $$data[0bv32];
  assert {:sourceloc} {:sourceloc_num 85} true;
  v52 := $$data[1bv32];
  assert {:sourceloc} {:sourceloc_num 86} true;
  v53 := $$data[2bv32];
  assert {:sourceloc} {:sourceloc_num 87} true;
  v54 := $$data[3bv32];
  assert {:sourceloc} {:sourceloc_num 88} true;
  $$data[0bv32] := FADD32(v51, v53);
  assert {:sourceloc} {:sourceloc_num 89} true;
  $$data[1bv32] := FADD32(v52, v54);
  assert {:sourceloc} {:sourceloc_num 90} true;
  v55 := $$data[2bv32];
  assert {:sourceloc} {:sourceloc_num 91} true;
  v56 := $$data[3bv32];
  assert {:sourceloc} {:sourceloc_num 92} true;
  $$data[2bv32] := FSUB32(v51, v55);
  assert {:sourceloc} {:sourceloc_num 93} true;
  $$data[3bv32] := FSUB32(v52, v56);
  assert {:sourceloc} {:sourceloc_num 94} true;
  v57 := $$data[4bv32];
  assert {:sourceloc} {:sourceloc_num 95} true;
  v58 := $$data[5bv32];
  assert {:sourceloc} {:sourceloc_num 96} true;
  v59 := $$data[6bv32];
  assert {:sourceloc} {:sourceloc_num 97} true;
  v60 := $$data[7bv32];
  assert {:sourceloc} {:sourceloc_num 98} true;
  $$data[4bv32] := FADD32(v57, v59);
  assert {:sourceloc} {:sourceloc_num 99} true;
  $$data[5bv32] := FADD32(v58, v60);
  assert {:sourceloc} {:sourceloc_num 100} true;
  v61 := $$data[6bv32];
  assert {:sourceloc} {:sourceloc_num 101} true;
  v62 := $$data[7bv32];
  assert {:sourceloc} {:sourceloc_num 102} true;
  $$data[6bv32] := FSUB32(v57, v61);
  assert {:sourceloc} {:sourceloc_num 103} true;
  $$data[7bv32] := FSUB32(v58, v62);
  assert {:sourceloc} {:sourceloc_num 104} true;
  v63 := $$data[8bv32];
  assert {:sourceloc} {:sourceloc_num 105} true;
  v64 := $$data[9bv32];
  assert {:sourceloc} {:sourceloc_num 106} true;
  v65 := $$data[12bv32];
  assert {:sourceloc} {:sourceloc_num 107} true;
  v66 := $$data[13bv32];
  assert {:sourceloc} {:sourceloc_num 108} true;
  $$data[8bv32] := FADD32(v63, v65);
  assert {:sourceloc} {:sourceloc_num 109} true;
  $$data[9bv32] := FADD32(v64, v66);
  assert {:sourceloc} {:sourceloc_num 110} true;
  v67 := $$data[12bv32];
  assert {:sourceloc} {:sourceloc_num 111} true;
  v68 := $$data[13bv32];
  assert {:sourceloc} {:sourceloc_num 112} true;
  $$data[12bv32] := FSUB32(v63, v67);
  assert {:sourceloc} {:sourceloc_num 113} true;
  $$data[13bv32] := FSUB32(v64, v68);
  assert {:sourceloc} {:sourceloc_num 114} true;
  v69 := $$data[10bv32];
  assert {:sourceloc} {:sourceloc_num 115} true;
  v70 := $$data[11bv32];
  assert {:sourceloc} {:sourceloc_num 116} true;
  v71 := $$data[14bv32];
  assert {:sourceloc} {:sourceloc_num 117} true;
  v72 := $$data[15bv32];
  assert {:sourceloc} {:sourceloc_num 118} true;
  $$data[10bv32] := FADD32(v69, v71);
  assert {:sourceloc} {:sourceloc_num 119} true;
  $$data[11bv32] := FADD32(v70, v72);
  assert {:sourceloc} {:sourceloc_num 120} true;
  v73 := $$data[14bv32];
  assert {:sourceloc} {:sourceloc_num 121} true;
  v74 := $$data[15bv32];
  assert {:sourceloc} {:sourceloc_num 122} true;
  $$data[14bv32] := FSUB32(v69, v73);
  assert {:sourceloc} {:sourceloc_num 123} true;
  $$data[15bv32] := FSUB32(v70, v74);
  assert {:sourceloc} {:sourceloc_num 124} true;
  v75 := $$data[14bv32];
  assert {:sourceloc} {:sourceloc_num 125} true;
  v76 := $$data[15bv32];
  assert {:sourceloc} {:sourceloc_num 126} true;
  $$data[14bv32] := FADD32(FMUL32(v75, 0bv32), FSUB32(2147483648bv32, FMUL32(v76, 1065353216bv32)));
  assert {:sourceloc} {:sourceloc_num 127} true;
  $$data[15bv32] := FADD32(FMUL32(v75, 1065353216bv32), FMUL32(v76, 0bv32));
  assert {:sourceloc} {:sourceloc_num 128} true;
  v77 := $$data[8bv32];
  assert {:sourceloc} {:sourceloc_num 129} true;
  v78 := $$data[9bv32];
  assert {:sourceloc} {:sourceloc_num 130} true;
  v79 := $$data[10bv32];
  assert {:sourceloc} {:sourceloc_num 131} true;
  v80 := $$data[11bv32];
  assert {:sourceloc} {:sourceloc_num 132} true;
  $$data[8bv32] := FADD32(v77, v79);
  assert {:sourceloc} {:sourceloc_num 133} true;
  $$data[9bv32] := FADD32(v78, v80);
  assert {:sourceloc} {:sourceloc_num 134} true;
  v81 := $$data[10bv32];
  assert {:sourceloc} {:sourceloc_num 135} true;
  v82 := $$data[11bv32];
  assert {:sourceloc} {:sourceloc_num 136} true;
  $$data[10bv32] := FSUB32(v77, v81);
  assert {:sourceloc} {:sourceloc_num 137} true;
  $$data[11bv32] := FSUB32(v78, v82);
  assert {:sourceloc} {:sourceloc_num 138} true;
  v83 := $$data[12bv32];
  assert {:sourceloc} {:sourceloc_num 139} true;
  v84 := $$data[13bv32];
  assert {:sourceloc} {:sourceloc_num 140} true;
  v85 := $$data[14bv32];
  assert {:sourceloc} {:sourceloc_num 141} true;
  v86 := $$data[15bv32];
  assert {:sourceloc} {:sourceloc_num 142} true;
  $$data[12bv32] := FADD32(v83, v85);
  assert {:sourceloc} {:sourceloc_num 143} true;
  $$data[13bv32] := FADD32(v84, v86);
  assert {:sourceloc} {:sourceloc_num 144} true;
  v87 := $$data[14bv32];
  assert {:sourceloc} {:sourceloc_num 145} true;
  v88 := $$data[15bv32];
  assert {:sourceloc} {:sourceloc_num 146} true;
  $$data[14bv32] := FSUB32(v83, v87);
  assert {:sourceloc} {:sourceloc_num 147} true;
  $$data[15bv32] := FSUB32(v84, v88);
  assert {:sourceloc} {:sourceloc_num 148} true;
  v89 := $$ifft1D_512.reversed8[0bv32];
  assert {:sourceloc} {:sourceloc_num 149} true;
  $$reversed8[0bv32] := v89;
  assert {:sourceloc} {:sourceloc_num 150} true;
  v90 := $$ifft1D_512.reversed8[1bv32];
  assert {:sourceloc} {:sourceloc_num 151} true;
  $$reversed8[1bv32] := v90;
  assert {:sourceloc} {:sourceloc_num 152} true;
  v91 := $$ifft1D_512.reversed8[2bv32];
  assert {:sourceloc} {:sourceloc_num 153} true;
  $$reversed8[2bv32] := v91;
  assert {:sourceloc} {:sourceloc_num 154} true;
  v92 := $$ifft1D_512.reversed8[3bv32];
  assert {:sourceloc} {:sourceloc_num 155} true;
  $$reversed8[3bv32] := v92;
  assert {:sourceloc} {:sourceloc_num 156} true;
  v93 := $$ifft1D_512.reversed8[4bv32];
  assert {:sourceloc} {:sourceloc_num 157} true;
  $$reversed8[4bv32] := v93;
  assert {:sourceloc} {:sourceloc_num 158} true;
  v94 := $$ifft1D_512.reversed8[5bv32];
  assert {:sourceloc} {:sourceloc_num 159} true;
  $$reversed8[5bv32] := v94;
  assert {:sourceloc} {:sourceloc_num 160} true;
  v95 := $$ifft1D_512.reversed8[6bv32];
  assert {:sourceloc} {:sourceloc_num 161} true;
  $$reversed8[6bv32] := v95;
  assert {:sourceloc} {:sourceloc_num 162} true;
  v96 := $$ifft1D_512.reversed8[7bv32];
  assert {:sourceloc} {:sourceloc_num 163} true;
  $$reversed8[7bv32] := v96;
  $j.0 := 1bv32;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 164} true;
  v97 := BV32_SLT($j.0, 8bv32);
  goto $truebb0, $falsebb0;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 165} true;
  assert {:sourceloc} {:sourceloc_num 166} true;
  v98 := $$data[BV32_MUL($j.0, 2bv32)];
  assert {:sourceloc} {:sourceloc_num 167} true;
  v99 := $$data[BV32_ADD(BV32_MUL($j.0, 2bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 168} true;
  v100 := $$reversed8[$j.0];
  v101 := FP64_CONV32(FMUL64(FDIV64(FMUL64(4618760256179416344bv64, SI32_TO_FP64(v100)), 4647714815446351872bv64), SI32_TO_FP64(v0)));
  v102 := FCOS32(v101);
  v103 := FSIN32(v101);
  assert {:sourceloc} {:sourceloc_num 169} true;
  $$data[BV32_MUL($j.0, 2bv32)] := FADD32(FMUL32(v98, v102), FSUB32(2147483648bv32, FMUL32(v99, v103)));
  assert {:sourceloc} {:sourceloc_num 170} true;
  $$data[BV32_ADD(BV32_MUL($j.0, 2bv32), 1bv32)] := FADD32(FMUL32(v98, v103), FMUL32(v99, v102));
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 171} true;
  $j.0 := BV32_ADD($j.0, 1bv32);
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 172} true;
  v104 := BV32_ADD(BV32_MUL(v2, 8bv32), v3);
  assert {:sourceloc} {:sourceloc_num 173} true;
  v105 := $$storex8.reversed[0bv32];
  assert {:sourceloc} {:sourceloc_num 174} true;
  $$reversed.i[0bv32] := v105;
  assert {:sourceloc} {:sourceloc_num 175} true;
  v106 := $$storex8.reversed[1bv32];
  assert {:sourceloc} {:sourceloc_num 176} true;
  $$reversed.i[1bv32] := v106;
  assert {:sourceloc} {:sourceloc_num 177} true;
  v107 := $$storex8.reversed[2bv32];
  assert {:sourceloc} {:sourceloc_num 178} true;
  $$reversed.i[2bv32] := v107;
  assert {:sourceloc} {:sourceloc_num 179} true;
  v108 := $$storex8.reversed[3bv32];
  assert {:sourceloc} {:sourceloc_num 180} true;
  $$reversed.i[3bv32] := v108;
  assert {:sourceloc} {:sourceloc_num 181} true;
  v109 := $$storex8.reversed[4bv32];
  assert {:sourceloc} {:sourceloc_num 182} true;
  $$reversed.i[4bv32] := v109;
  assert {:sourceloc} {:sourceloc_num 183} true;
  v110 := $$storex8.reversed[5bv32];
  assert {:sourceloc} {:sourceloc_num 184} true;
  $$reversed.i[5bv32] := v110;
  assert {:sourceloc} {:sourceloc_num 185} true;
  v111 := $$storex8.reversed[6bv32];
  assert {:sourceloc} {:sourceloc_num 186} true;
  $$reversed.i[6bv32] := v111;
  assert {:sourceloc} {:sourceloc_num 187} true;
  v112 := $$storex8.reversed[7bv32];
  assert {:sourceloc} {:sourceloc_num 188} true;
  $$reversed.i[7bv32] := v112;
  $i.i.1237.0 := 0bv32;
  goto $for.cond.i.1255;
$for.cond.i.1255:
  assert {:block_sourceloc} {:sourceloc_num 189} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 190} (if (_WRITE_HAS_OCCURRED_$$ifft1D_512.smem ==> BV32_ULT(BV32_UDIV(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), local_id_x), 66bv32), 8bv32)) then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 191} (if (_WRITE_HAS_OCCURRED_$$ifft1D_512.smem ==> BV32_UREM(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), local_id_x), 66bv32) == 0bv32) then 1bv1 else 0bv1) != 0bv1;
  v113 := BV32_SLT($i.i.1237.0, 8bv32);
  goto $truebb1, $falsebb1;
$for.body.i.1260:
  assert {:block_sourceloc} {:sourceloc_num 192} true;
  assert {:sourceloc} {:sourceloc_num 193} true;
  v114 := $$reversed.i[$i.i.1237.0];
  assert {:sourceloc} {:sourceloc_num 194} true;
  v115 := $$data[BV32_MUL(v114, 2bv32)];
  assert {:sourceloc} {:sourceloc_num 195} true;
  v116 := $$data[BV32_ADD(BV32_MUL(v114, 2bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 196} true;
  $$ifft1D_512.smem[BV32_ADD(v104, BV32_MUL($i.i.1237.0, 66bv32))] := v115;
  $i.i.1237.0 := BV32_ADD($i.i.1237.0, 1bv32);
  goto $for.cond.i.1255;
$storex8.exit1262:
  assert {:block_sourceloc} {:sourceloc_num 197} true;
  call {:sourceloc_num 198} $bugle_barrier(1bv1, 0bv1);
  v117 := BV32_ADD(BV32_MUL(v3, 66bv32), v2);
  $i.i.1266.0 := 0bv32;
  goto $for.cond.i.1268;
$for.cond.i.1268:
  assert {:block_sourceloc} {:sourceloc_num 199} true;
  v118 := BV32_SLT($i.i.1266.0, 8bv32);
  goto $truebb2, $falsebb2;
$for.body.i.1272:
  assert {:block_sourceloc} {:sourceloc_num 200} true;
  assert {:sourceloc} {:sourceloc_num 201} true;
  v119 := $$ifft1D_512.smem[BV32_ADD(v117, BV32_MUL($i.i.1266.0, 8bv32))];
  assert {:sourceloc} {:sourceloc_num 202} true;
  v120 := $$data[BV32_MUL($i.i.1266.0, 2bv32)];
  assert {:sourceloc} {:sourceloc_num 203} true;
  v121 := $$data[BV32_ADD(BV32_MUL($i.i.1266.0, 2bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 204} true;
  $$data[BV32_MUL($i.i.1266.0, 2bv32)] := v119;
  assert {:sourceloc} {:sourceloc_num 205} true;
  $$data[BV32_ADD(BV32_MUL($i.i.1266.0, 2bv32), 1bv32)] := v121;
  $i.i.1266.0 := BV32_ADD($i.i.1266.0, 1bv32);
  goto $for.cond.i.1268;
$loadx8.exit1274:
  assert {:block_sourceloc} {:sourceloc_num 206} true;
  call {:sourceloc_num 207} $bugle_barrier(1bv1, 0bv1);
  v122 := BV32_ADD(BV32_MUL(v2, 8bv32), v3);
  assert {:sourceloc} {:sourceloc_num 208} true;
  v123 := $$storey8.reversed[0bv32];
  assert {:sourceloc} {:sourceloc_num 209} true;
  $$reversed.i[0bv32] := v123;
  assert {:sourceloc} {:sourceloc_num 210} true;
  v124 := $$storey8.reversed[1bv32];
  assert {:sourceloc} {:sourceloc_num 211} true;
  $$reversed.i[1bv32] := v124;
  assert {:sourceloc} {:sourceloc_num 212} true;
  v125 := $$storey8.reversed[2bv32];
  assert {:sourceloc} {:sourceloc_num 213} true;
  $$reversed.i[2bv32] := v125;
  assert {:sourceloc} {:sourceloc_num 214} true;
  v126 := $$storey8.reversed[3bv32];
  assert {:sourceloc} {:sourceloc_num 215} true;
  $$reversed.i[3bv32] := v126;
  assert {:sourceloc} {:sourceloc_num 216} true;
  v127 := $$storey8.reversed[4bv32];
  assert {:sourceloc} {:sourceloc_num 217} true;
  $$reversed.i[4bv32] := v127;
  assert {:sourceloc} {:sourceloc_num 218} true;
  v128 := $$storey8.reversed[5bv32];
  assert {:sourceloc} {:sourceloc_num 219} true;
  $$reversed.i[5bv32] := v128;
  assert {:sourceloc} {:sourceloc_num 220} true;
  v129 := $$storey8.reversed[6bv32];
  assert {:sourceloc} {:sourceloc_num 221} true;
  $$reversed.i[6bv32] := v129;
  assert {:sourceloc} {:sourceloc_num 222} true;
  v130 := $$storey8.reversed[7bv32];
  assert {:sourceloc} {:sourceloc_num 223} true;
  $$reversed.i[7bv32] := v130;
  $i.i.1168.0 := 0bv32;
  goto $for.cond.i.1186;
$for.cond.i.1186:
  assert {:block_sourceloc} {:sourceloc_num 224} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 225} (if (_WRITE_HAS_OCCURRED_$$ifft1D_512.smem ==> BV32_ULT(BV32_UDIV(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), local_id_x), 66bv32), 8bv32)) then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 226} (if (_WRITE_HAS_OCCURRED_$$ifft1D_512.smem ==> BV32_UREM(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), local_id_x), 66bv32) == 0bv32) then 1bv1 else 0bv1) != 0bv1;
  v131 := BV32_SLT($i.i.1168.0, 8bv32);
  goto $truebb3, $falsebb3;
$for.body.i.1191:
  assert {:block_sourceloc} {:sourceloc_num 227} true;
  assert {:sourceloc} {:sourceloc_num 228} true;
  v132 := $$reversed.i[$i.i.1168.0];
  assert {:sourceloc} {:sourceloc_num 229} true;
  v133 := $$data[BV32_MUL(v132, 2bv32)];
  assert {:sourceloc} {:sourceloc_num 230} true;
  v134 := $$data[BV32_ADD(BV32_MUL(v132, 2bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 231} true;
  $$ifft1D_512.smem[BV32_ADD(v122, BV32_MUL($i.i.1168.0, 66bv32))] := v134;
  $i.i.1168.0 := BV32_ADD($i.i.1168.0, 1bv32);
  goto $for.cond.i.1186;
$storey8.exit1193:
  assert {:block_sourceloc} {:sourceloc_num 232} true;
  call {:sourceloc_num 233} $bugle_barrier(1bv1, 0bv1);
  v135 := BV32_ADD(BV32_MUL(v3, 66bv32), v2);
  $i.i.1151.0 := 0bv32;
  goto $for.cond.i.1153;
$for.cond.i.1153:
  assert {:block_sourceloc} {:sourceloc_num 234} true;
  v136 := BV32_SLT($i.i.1151.0, 8bv32);
  goto $truebb4, $falsebb4;
$for.body.i.1157:
  assert {:block_sourceloc} {:sourceloc_num 235} true;
  assert {:sourceloc} {:sourceloc_num 236} true;
  v137 := $$ifft1D_512.smem[BV32_ADD(v135, BV32_MUL($i.i.1151.0, 8bv32))];
  assert {:sourceloc} {:sourceloc_num 237} true;
  v138 := $$data[BV32_MUL($i.i.1151.0, 2bv32)];
  assert {:sourceloc} {:sourceloc_num 238} true;
  v139 := $$data[BV32_ADD(BV32_MUL($i.i.1151.0, 2bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 239} true;
  $$data[BV32_MUL($i.i.1151.0, 2bv32)] := v138;
  assert {:sourceloc} {:sourceloc_num 240} true;
  $$data[BV32_ADD(BV32_MUL($i.i.1151.0, 2bv32), 1bv32)] := v137;
  $i.i.1151.0 := BV32_ADD($i.i.1151.0, 1bv32);
  goto $for.cond.i.1153;
$loady8.exit1159:
  assert {:block_sourceloc} {:sourceloc_num 241} true;
  call {:sourceloc_num 242} $bugle_barrier(1bv1, 0bv1);
  assert {:sourceloc} {:sourceloc_num 243} true;
  v140 := $$data[0bv32];
  assert {:sourceloc} {:sourceloc_num 244} true;
  v141 := $$data[1bv32];
  assert {:sourceloc} {:sourceloc_num 245} true;
  v142 := $$data[8bv32];
  assert {:sourceloc} {:sourceloc_num 246} true;
  v143 := $$data[9bv32];
  assert {:sourceloc} {:sourceloc_num 247} true;
  $$data[0bv32] := FADD32(v140, v142);
  assert {:sourceloc} {:sourceloc_num 248} true;
  $$data[1bv32] := FADD32(v141, v143);
  assert {:sourceloc} {:sourceloc_num 249} true;
  v144 := $$data[8bv32];
  assert {:sourceloc} {:sourceloc_num 250} true;
  v145 := $$data[9bv32];
  assert {:sourceloc} {:sourceloc_num 251} true;
  $$data[8bv32] := FSUB32(v140, v144);
  assert {:sourceloc} {:sourceloc_num 252} true;
  $$data[9bv32] := FSUB32(v141, v145);
  assert {:sourceloc} {:sourceloc_num 253} true;
  v146 := $$data[2bv32];
  assert {:sourceloc} {:sourceloc_num 254} true;
  v147 := $$data[3bv32];
  assert {:sourceloc} {:sourceloc_num 255} true;
  v148 := $$data[10bv32];
  assert {:sourceloc} {:sourceloc_num 256} true;
  v149 := $$data[11bv32];
  assert {:sourceloc} {:sourceloc_num 257} true;
  $$data[2bv32] := FADD32(v146, v148);
  assert {:sourceloc} {:sourceloc_num 258} true;
  $$data[3bv32] := FADD32(v147, v149);
  assert {:sourceloc} {:sourceloc_num 259} true;
  v150 := $$data[10bv32];
  assert {:sourceloc} {:sourceloc_num 260} true;
  v151 := $$data[11bv32];
  assert {:sourceloc} {:sourceloc_num 261} true;
  $$data[10bv32] := FSUB32(v146, v150);
  assert {:sourceloc} {:sourceloc_num 262} true;
  $$data[11bv32] := FSUB32(v147, v151);
  assert {:sourceloc} {:sourceloc_num 263} true;
  v152 := $$data[4bv32];
  assert {:sourceloc} {:sourceloc_num 264} true;
  v153 := $$data[5bv32];
  assert {:sourceloc} {:sourceloc_num 265} true;
  v154 := $$data[12bv32];
  assert {:sourceloc} {:sourceloc_num 266} true;
  v155 := $$data[13bv32];
  assert {:sourceloc} {:sourceloc_num 267} true;
  $$data[4bv32] := FADD32(v152, v154);
  assert {:sourceloc} {:sourceloc_num 268} true;
  $$data[5bv32] := FADD32(v153, v155);
  assert {:sourceloc} {:sourceloc_num 269} true;
  v156 := $$data[12bv32];
  assert {:sourceloc} {:sourceloc_num 270} true;
  v157 := $$data[13bv32];
  assert {:sourceloc} {:sourceloc_num 271} true;
  $$data[12bv32] := FSUB32(v152, v156);
  assert {:sourceloc} {:sourceloc_num 272} true;
  $$data[13bv32] := FSUB32(v153, v157);
  assert {:sourceloc} {:sourceloc_num 273} true;
  v158 := $$data[6bv32];
  assert {:sourceloc} {:sourceloc_num 274} true;
  v159 := $$data[7bv32];
  assert {:sourceloc} {:sourceloc_num 275} true;
  v160 := $$data[14bv32];
  assert {:sourceloc} {:sourceloc_num 276} true;
  v161 := $$data[15bv32];
  assert {:sourceloc} {:sourceloc_num 277} true;
  $$data[6bv32] := FADD32(v158, v160);
  assert {:sourceloc} {:sourceloc_num 278} true;
  $$data[7bv32] := FADD32(v159, v161);
  assert {:sourceloc} {:sourceloc_num 279} true;
  v162 := $$data[14bv32];
  assert {:sourceloc} {:sourceloc_num 280} true;
  v163 := $$data[15bv32];
  assert {:sourceloc} {:sourceloc_num 281} true;
  $$data[14bv32] := FSUB32(v158, v162);
  assert {:sourceloc} {:sourceloc_num 282} true;
  $$data[15bv32] := FSUB32(v159, v163);
  assert {:sourceloc} {:sourceloc_num 283} true;
  v164 := $$data[10bv32];
  assert {:sourceloc} {:sourceloc_num 284} true;
  v165 := $$data[11bv32];
  assert {:sourceloc} {:sourceloc_num 285} true;
  $$data[10bv32] := FMUL32(1060439283bv32, FADD32(FMUL32(v164, 1065353216bv32), FSUB32(2147483648bv32, FMUL32(v165, 1065353216bv32))));
  assert {:sourceloc} {:sourceloc_num 286} true;
  $$data[11bv32] := FMUL32(1060439283bv32, FADD32(FMUL32(v164, 1065353216bv32), FMUL32(v165, 1065353216bv32)));
  assert {:sourceloc} {:sourceloc_num 287} true;
  v166 := $$data[12bv32];
  assert {:sourceloc} {:sourceloc_num 288} true;
  v167 := $$data[13bv32];
  assert {:sourceloc} {:sourceloc_num 289} true;
  $$data[12bv32] := FADD32(FMUL32(v166, 0bv32), FSUB32(2147483648bv32, FMUL32(v167, 1065353216bv32)));
  assert {:sourceloc} {:sourceloc_num 290} true;
  $$data[13bv32] := FADD32(FMUL32(v166, 1065353216bv32), FMUL32(v167, 0bv32));
  assert {:sourceloc} {:sourceloc_num 291} true;
  v168 := $$data[14bv32];
  assert {:sourceloc} {:sourceloc_num 292} true;
  v169 := $$data[15bv32];
  assert {:sourceloc} {:sourceloc_num 293} true;
  $$data[14bv32] := FMUL32(1060439283bv32, FADD32(FMUL32(v168, 3212836864bv32), FSUB32(2147483648bv32, FMUL32(v169, 1065353216bv32))));
  assert {:sourceloc} {:sourceloc_num 294} true;
  $$data[15bv32] := FMUL32(1060439283bv32, FADD32(FMUL32(v168, 1065353216bv32), FMUL32(v169, 3212836864bv32)));
  assert {:sourceloc} {:sourceloc_num 295} true;
  v170 := $$data[0bv32];
  assert {:sourceloc} {:sourceloc_num 296} true;
  v171 := $$data[1bv32];
  assert {:sourceloc} {:sourceloc_num 297} true;
  v172 := $$data[4bv32];
  assert {:sourceloc} {:sourceloc_num 298} true;
  v173 := $$data[5bv32];
  assert {:sourceloc} {:sourceloc_num 299} true;
  $$data[0bv32] := FADD32(v170, v172);
  assert {:sourceloc} {:sourceloc_num 300} true;
  $$data[1bv32] := FADD32(v171, v173);
  assert {:sourceloc} {:sourceloc_num 301} true;
  v174 := $$data[4bv32];
  assert {:sourceloc} {:sourceloc_num 302} true;
  v175 := $$data[5bv32];
  assert {:sourceloc} {:sourceloc_num 303} true;
  $$data[4bv32] := FSUB32(v170, v174);
  assert {:sourceloc} {:sourceloc_num 304} true;
  $$data[5bv32] := FSUB32(v171, v175);
  assert {:sourceloc} {:sourceloc_num 305} true;
  v176 := $$data[2bv32];
  assert {:sourceloc} {:sourceloc_num 306} true;
  v177 := $$data[3bv32];
  assert {:sourceloc} {:sourceloc_num 307} true;
  v178 := $$data[6bv32];
  assert {:sourceloc} {:sourceloc_num 308} true;
  v179 := $$data[7bv32];
  assert {:sourceloc} {:sourceloc_num 309} true;
  $$data[2bv32] := FADD32(v176, v178);
  assert {:sourceloc} {:sourceloc_num 310} true;
  $$data[3bv32] := FADD32(v177, v179);
  assert {:sourceloc} {:sourceloc_num 311} true;
  v180 := $$data[6bv32];
  assert {:sourceloc} {:sourceloc_num 312} true;
  v181 := $$data[7bv32];
  assert {:sourceloc} {:sourceloc_num 313} true;
  $$data[6bv32] := FSUB32(v176, v180);
  assert {:sourceloc} {:sourceloc_num 314} true;
  $$data[7bv32] := FSUB32(v177, v181);
  assert {:sourceloc} {:sourceloc_num 315} true;
  v182 := $$data[6bv32];
  assert {:sourceloc} {:sourceloc_num 316} true;
  v183 := $$data[7bv32];
  assert {:sourceloc} {:sourceloc_num 317} true;
  $$data[6bv32] := FADD32(FMUL32(v182, 0bv32), FSUB32(2147483648bv32, FMUL32(v183, 1065353216bv32)));
  assert {:sourceloc} {:sourceloc_num 318} true;
  $$data[7bv32] := FADD32(FMUL32(v182, 1065353216bv32), FMUL32(v183, 0bv32));
  assert {:sourceloc} {:sourceloc_num 319} true;
  v184 := $$data[0bv32];
  assert {:sourceloc} {:sourceloc_num 320} true;
  v185 := $$data[1bv32];
  assert {:sourceloc} {:sourceloc_num 321} true;
  v186 := $$data[2bv32];
  assert {:sourceloc} {:sourceloc_num 322} true;
  v187 := $$data[3bv32];
  assert {:sourceloc} {:sourceloc_num 323} true;
  $$data[0bv32] := FADD32(v184, v186);
  assert {:sourceloc} {:sourceloc_num 324} true;
  $$data[1bv32] := FADD32(v185, v187);
  assert {:sourceloc} {:sourceloc_num 325} true;
  v188 := $$data[2bv32];
  assert {:sourceloc} {:sourceloc_num 326} true;
  v189 := $$data[3bv32];
  assert {:sourceloc} {:sourceloc_num 327} true;
  $$data[2bv32] := FSUB32(v184, v188);
  assert {:sourceloc} {:sourceloc_num 328} true;
  $$data[3bv32] := FSUB32(v185, v189);
  assert {:sourceloc} {:sourceloc_num 329} true;
  v190 := $$data[4bv32];
  assert {:sourceloc} {:sourceloc_num 330} true;
  v191 := $$data[5bv32];
  assert {:sourceloc} {:sourceloc_num 331} true;
  v192 := $$data[6bv32];
  assert {:sourceloc} {:sourceloc_num 332} true;
  v193 := $$data[7bv32];
  assert {:sourceloc} {:sourceloc_num 333} true;
  $$data[4bv32] := FADD32(v190, v192);
  assert {:sourceloc} {:sourceloc_num 334} true;
  $$data[5bv32] := FADD32(v191, v193);
  assert {:sourceloc} {:sourceloc_num 335} true;
  v194 := $$data[6bv32];
  assert {:sourceloc} {:sourceloc_num 336} true;
  v195 := $$data[7bv32];
  assert {:sourceloc} {:sourceloc_num 337} true;
  $$data[6bv32] := FSUB32(v190, v194);
  assert {:sourceloc} {:sourceloc_num 338} true;
  $$data[7bv32] := FSUB32(v191, v195);
  assert {:sourceloc} {:sourceloc_num 339} true;
  v196 := $$data[8bv32];
  assert {:sourceloc} {:sourceloc_num 340} true;
  v197 := $$data[9bv32];
  assert {:sourceloc} {:sourceloc_num 341} true;
  v198 := $$data[12bv32];
  assert {:sourceloc} {:sourceloc_num 342} true;
  v199 := $$data[13bv32];
  assert {:sourceloc} {:sourceloc_num 343} true;
  $$data[8bv32] := FADD32(v196, v198);
  assert {:sourceloc} {:sourceloc_num 344} true;
  $$data[9bv32] := FADD32(v197, v199);
  assert {:sourceloc} {:sourceloc_num 345} true;
  v200 := $$data[12bv32];
  assert {:sourceloc} {:sourceloc_num 346} true;
  v201 := $$data[13bv32];
  assert {:sourceloc} {:sourceloc_num 347} true;
  $$data[12bv32] := FSUB32(v196, v200);
  assert {:sourceloc} {:sourceloc_num 348} true;
  $$data[13bv32] := FSUB32(v197, v201);
  assert {:sourceloc} {:sourceloc_num 349} true;
  v202 := $$data[10bv32];
  assert {:sourceloc} {:sourceloc_num 350} true;
  v203 := $$data[11bv32];
  assert {:sourceloc} {:sourceloc_num 351} true;
  v204 := $$data[14bv32];
  assert {:sourceloc} {:sourceloc_num 352} true;
  v205 := $$data[15bv32];
  assert {:sourceloc} {:sourceloc_num 353} true;
  $$data[10bv32] := FADD32(v202, v204);
  assert {:sourceloc} {:sourceloc_num 354} true;
  $$data[11bv32] := FADD32(v203, v205);
  assert {:sourceloc} {:sourceloc_num 355} true;
  v206 := $$data[14bv32];
  assert {:sourceloc} {:sourceloc_num 356} true;
  v207 := $$data[15bv32];
  assert {:sourceloc} {:sourceloc_num 357} true;
  $$data[14bv32] := FSUB32(v202, v206);
  assert {:sourceloc} {:sourceloc_num 358} true;
  $$data[15bv32] := FSUB32(v203, v207);
  assert {:sourceloc} {:sourceloc_num 359} true;
  v208 := $$data[14bv32];
  assert {:sourceloc} {:sourceloc_num 360} true;
  v209 := $$data[15bv32];
  assert {:sourceloc} {:sourceloc_num 361} true;
  $$data[14bv32] := FADD32(FMUL32(v208, 0bv32), FSUB32(2147483648bv32, FMUL32(v209, 1065353216bv32)));
  assert {:sourceloc} {:sourceloc_num 362} true;
  $$data[15bv32] := FADD32(FMUL32(v208, 1065353216bv32), FMUL32(v209, 0bv32));
  assert {:sourceloc} {:sourceloc_num 363} true;
  v210 := $$data[8bv32];
  assert {:sourceloc} {:sourceloc_num 364} true;
  v211 := $$data[9bv32];
  assert {:sourceloc} {:sourceloc_num 365} true;
  v212 := $$data[10bv32];
  assert {:sourceloc} {:sourceloc_num 366} true;
  v213 := $$data[11bv32];
  assert {:sourceloc} {:sourceloc_num 367} true;
  $$data[8bv32] := FADD32(v210, v212);
  assert {:sourceloc} {:sourceloc_num 368} true;
  $$data[9bv32] := FADD32(v211, v213);
  assert {:sourceloc} {:sourceloc_num 369} true;
  v214 := $$data[10bv32];
  assert {:sourceloc} {:sourceloc_num 370} true;
  v215 := $$data[11bv32];
  assert {:sourceloc} {:sourceloc_num 371} true;
  $$data[10bv32] := FSUB32(v210, v214);
  assert {:sourceloc} {:sourceloc_num 372} true;
  $$data[11bv32] := FSUB32(v211, v215);
  assert {:sourceloc} {:sourceloc_num 373} true;
  v216 := $$data[12bv32];
  assert {:sourceloc} {:sourceloc_num 374} true;
  v217 := $$data[13bv32];
  assert {:sourceloc} {:sourceloc_num 375} true;
  v218 := $$data[14bv32];
  assert {:sourceloc} {:sourceloc_num 376} true;
  v219 := $$data[15bv32];
  assert {:sourceloc} {:sourceloc_num 377} true;
  $$data[12bv32] := FADD32(v216, v218);
  assert {:sourceloc} {:sourceloc_num 378} true;
  $$data[13bv32] := FADD32(v217, v219);
  assert {:sourceloc} {:sourceloc_num 379} true;
  v220 := $$data[14bv32];
  assert {:sourceloc} {:sourceloc_num 380} true;
  v221 := $$data[15bv32];
  assert {:sourceloc} {:sourceloc_num 381} true;
  $$data[14bv32] := FSUB32(v216, v220);
  assert {:sourceloc} {:sourceloc_num 382} true;
  $$data[15bv32] := FSUB32(v217, v221);
  assert {:sourceloc} {:sourceloc_num 383} true;
  v222 := $$ifft1D_512.reversed8.1[0bv32];
  assert {:sourceloc} {:sourceloc_num 384} true;
  $$reversed8260[0bv32] := v222;
  assert {:sourceloc} {:sourceloc_num 385} true;
  v223 := $$ifft1D_512.reversed8.1[1bv32];
  assert {:sourceloc} {:sourceloc_num 386} true;
  $$reversed8260[1bv32] := v223;
  assert {:sourceloc} {:sourceloc_num 387} true;
  v224 := $$ifft1D_512.reversed8.1[2bv32];
  assert {:sourceloc} {:sourceloc_num 388} true;
  $$reversed8260[2bv32] := v224;
  assert {:sourceloc} {:sourceloc_num 389} true;
  v225 := $$ifft1D_512.reversed8.1[3bv32];
  assert {:sourceloc} {:sourceloc_num 390} true;
  $$reversed8260[3bv32] := v225;
  assert {:sourceloc} {:sourceloc_num 391} true;
  v226 := $$ifft1D_512.reversed8.1[4bv32];
  assert {:sourceloc} {:sourceloc_num 392} true;
  $$reversed8260[4bv32] := v226;
  assert {:sourceloc} {:sourceloc_num 393} true;
  v227 := $$ifft1D_512.reversed8.1[5bv32];
  assert {:sourceloc} {:sourceloc_num 394} true;
  $$reversed8260[5bv32] := v227;
  assert {:sourceloc} {:sourceloc_num 395} true;
  v228 := $$ifft1D_512.reversed8.1[6bv32];
  assert {:sourceloc} {:sourceloc_num 396} true;
  $$reversed8260[6bv32] := v228;
  assert {:sourceloc} {:sourceloc_num 397} true;
  v229 := $$ifft1D_512.reversed8.1[7bv32];
  assert {:sourceloc} {:sourceloc_num 398} true;
  $$reversed8260[7bv32] := v229;
  $j261.0 := 1bv32;
  goto $for.cond.262;
$for.cond.262:
  assert {:block_sourceloc} {:sourceloc_num 399} true;
  v230 := BV32_SLT($j261.0, 8bv32);
  goto $truebb5, $falsebb5;
$for.body.265:
  assert {:block_sourceloc} {:sourceloc_num 400} true;
  assert {:sourceloc} {:sourceloc_num 401} true;
  v231 := $$data[BV32_MUL($j261.0, 2bv32)];
  assert {:sourceloc} {:sourceloc_num 402} true;
  v232 := $$data[BV32_ADD(BV32_MUL($j261.0, 2bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 403} true;
  v233 := $$reversed8260[$j261.0];
  v234 := FP64_CONV32(FMUL64(FDIV64(FMUL64(4618760256179416344bv64, SI32_TO_FP64(v233)), 4634204016564240384bv64), SI32_TO_FP64(v2)));
  v235 := FCOS32(v234);
  v236 := FSIN32(v234);
  assert {:sourceloc} {:sourceloc_num 404} true;
  $$data[BV32_MUL($j261.0, 2bv32)] := FADD32(FMUL32(v231, v235), FSUB32(2147483648bv32, FMUL32(v232, v236)));
  assert {:sourceloc} {:sourceloc_num 405} true;
  $$data[BV32_ADD(BV32_MUL($j261.0, 2bv32), 1bv32)] := FADD32(FMUL32(v231, v236), FMUL32(v232, v235));
  goto $for.inc.277;
$for.inc.277:
  assert {:block_sourceloc} {:sourceloc_num 406} true;
  $j261.0 := BV32_ADD($j261.0, 1bv32);
  goto $for.cond.262;
$for.end.279:
  assert {:block_sourceloc} {:sourceloc_num 407} true;
  v237 := BV32_ADD(BV32_MUL(v2, 8bv32), v3);
  assert {:sourceloc} {:sourceloc_num 408} true;
  v238 := $$storex8.reversed[0bv32];
  assert {:sourceloc} {:sourceloc_num 409} true;
  $$reversed.i[0bv32] := v238;
  assert {:sourceloc} {:sourceloc_num 410} true;
  v239 := $$storex8.reversed[1bv32];
  assert {:sourceloc} {:sourceloc_num 411} true;
  $$reversed.i[1bv32] := v239;
  assert {:sourceloc} {:sourceloc_num 412} true;
  v240 := $$storex8.reversed[2bv32];
  assert {:sourceloc} {:sourceloc_num 413} true;
  $$reversed.i[2bv32] := v240;
  assert {:sourceloc} {:sourceloc_num 414} true;
  v241 := $$storex8.reversed[3bv32];
  assert {:sourceloc} {:sourceloc_num 415} true;
  $$reversed.i[3bv32] := v241;
  assert {:sourceloc} {:sourceloc_num 416} true;
  v242 := $$storex8.reversed[4bv32];
  assert {:sourceloc} {:sourceloc_num 417} true;
  $$reversed.i[4bv32] := v242;
  assert {:sourceloc} {:sourceloc_num 418} true;
  v243 := $$storex8.reversed[5bv32];
  assert {:sourceloc} {:sourceloc_num 419} true;
  $$reversed.i[5bv32] := v243;
  assert {:sourceloc} {:sourceloc_num 420} true;
  v244 := $$storex8.reversed[6bv32];
  assert {:sourceloc} {:sourceloc_num 421} true;
  $$reversed.i[6bv32] := v244;
  assert {:sourceloc} {:sourceloc_num 422} true;
  v245 := $$storex8.reversed[7bv32];
  assert {:sourceloc} {:sourceloc_num 423} true;
  $$reversed.i[7bv32] := v245;
  $i.i.790.0 := 0bv32;
  goto $for.cond.i.808;
$for.cond.i.808:
  assert {:block_sourceloc} {:sourceloc_num 424} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 425} (if (_WRITE_HAS_OCCURRED_$$ifft1D_512.smem ==> BV32_ULT(BV32_UDIV(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), local_id_x), 72bv32), 8bv32)) then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 426} (if (_WRITE_HAS_OCCURRED_$$ifft1D_512.smem ==> BV32_UREM(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), local_id_x), 72bv32) == 0bv32) then 1bv1 else 0bv1) != 0bv1;
  v246 := BV32_SLT($i.i.790.0, 8bv32);
  goto $truebb6, $falsebb6;
$for.body.i.813:
  assert {:block_sourceloc} {:sourceloc_num 427} true;
  assert {:sourceloc} {:sourceloc_num 428} true;
  v247 := $$reversed.i[$i.i.790.0];
  assert {:sourceloc} {:sourceloc_num 429} true;
  v248 := $$data[BV32_MUL(v247, 2bv32)];
  assert {:sourceloc} {:sourceloc_num 430} true;
  v249 := $$data[BV32_ADD(BV32_MUL(v247, 2bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 431} true;
  $$ifft1D_512.smem[BV32_ADD(v237, BV32_MUL($i.i.790.0, 72bv32))] := v248;
  $i.i.790.0 := BV32_ADD($i.i.790.0, 1bv32);
  goto $for.cond.i.808;
$storex8.exit:
  assert {:block_sourceloc} {:sourceloc_num 432} true;
  call {:sourceloc_num 433} $bugle_barrier(1bv1, 0bv1);
  v250 := BV32_ADD(BV32_MUL(BV32_MUL(v2, 8bv32), 9bv32), v3);
  $i.i.774.0 := 0bv32;
  goto $for.cond.i.776;
$for.cond.i.776:
  assert {:block_sourceloc} {:sourceloc_num 434} true;
  v251 := BV32_SLT($i.i.774.0, 8bv32);
  goto $truebb7, $falsebb7;
$for.body.i.780:
  assert {:block_sourceloc} {:sourceloc_num 435} true;
  assert {:sourceloc} {:sourceloc_num 436} true;
  v252 := $$ifft1D_512.smem[BV32_ADD(v250, BV32_MUL($i.i.774.0, 8bv32))];
  assert {:sourceloc} {:sourceloc_num 437} true;
  v253 := $$data[BV32_MUL($i.i.774.0, 2bv32)];
  assert {:sourceloc} {:sourceloc_num 438} true;
  v254 := $$data[BV32_ADD(BV32_MUL($i.i.774.0, 2bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 439} true;
  $$data[BV32_MUL($i.i.774.0, 2bv32)] := v252;
  assert {:sourceloc} {:sourceloc_num 440} true;
  $$data[BV32_ADD(BV32_MUL($i.i.774.0, 2bv32), 1bv32)] := v254;
  $i.i.774.0 := BV32_ADD($i.i.774.0, 1bv32);
  goto $for.cond.i.776;
$loadx8.exit:
  assert {:block_sourceloc} {:sourceloc_num 441} true;
  call {:sourceloc_num 442} $bugle_barrier(1bv1, 0bv1);
  v255 := BV32_ADD(BV32_MUL(v2, 8bv32), v3);
  assert {:sourceloc} {:sourceloc_num 443} true;
  v256 := $$storey8.reversed[0bv32];
  assert {:sourceloc} {:sourceloc_num 444} true;
  $$reversed.i[0bv32] := v256;
  assert {:sourceloc} {:sourceloc_num 445} true;
  v257 := $$storey8.reversed[1bv32];
  assert {:sourceloc} {:sourceloc_num 446} true;
  $$reversed.i[1bv32] := v257;
  assert {:sourceloc} {:sourceloc_num 447} true;
  v258 := $$storey8.reversed[2bv32];
  assert {:sourceloc} {:sourceloc_num 448} true;
  $$reversed.i[2bv32] := v258;
  assert {:sourceloc} {:sourceloc_num 449} true;
  v259 := $$storey8.reversed[3bv32];
  assert {:sourceloc} {:sourceloc_num 450} true;
  $$reversed.i[3bv32] := v259;
  assert {:sourceloc} {:sourceloc_num 451} true;
  v260 := $$storey8.reversed[4bv32];
  assert {:sourceloc} {:sourceloc_num 452} true;
  $$reversed.i[4bv32] := v260;
  assert {:sourceloc} {:sourceloc_num 453} true;
  v261 := $$storey8.reversed[5bv32];
  assert {:sourceloc} {:sourceloc_num 454} true;
  $$reversed.i[5bv32] := v261;
  assert {:sourceloc} {:sourceloc_num 455} true;
  v262 := $$storey8.reversed[6bv32];
  assert {:sourceloc} {:sourceloc_num 456} true;
  $$reversed.i[6bv32] := v262;
  assert {:sourceloc} {:sourceloc_num 457} true;
  v263 := $$storey8.reversed[7bv32];
  assert {:sourceloc} {:sourceloc_num 458} true;
  $$reversed.i[7bv32] := v263;
  $i.i.662.0 := 0bv32;
  goto $for.cond.i.665;
$for.cond.i.665:
  assert {:block_sourceloc} {:sourceloc_num 459} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 460} (if (_WRITE_HAS_OCCURRED_$$ifft1D_512.smem ==> BV32_ULT(BV32_UDIV(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), local_id_x), 72bv32), 8bv32)) then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 461} (if (_WRITE_HAS_OCCURRED_$$ifft1D_512.smem ==> BV32_UREM(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), local_id_x), 72bv32) == 0bv32) then 1bv1 else 0bv1) != 0bv1;
  v264 := BV32_SLT($i.i.662.0, 8bv32);
  goto $truebb8, $falsebb8;
$for.body.i.668:
  assert {:block_sourceloc} {:sourceloc_num 462} true;
  assert {:sourceloc} {:sourceloc_num 463} true;
  v265 := $$reversed.i[$i.i.662.0];
  assert {:sourceloc} {:sourceloc_num 464} true;
  v266 := $$data[BV32_MUL(v265, 2bv32)];
  assert {:sourceloc} {:sourceloc_num 465} true;
  v267 := $$data[BV32_ADD(BV32_MUL(v265, 2bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 466} true;
  $$ifft1D_512.smem[BV32_ADD(v255, BV32_MUL($i.i.662.0, 72bv32))] := v267;
  $i.i.662.0 := BV32_ADD($i.i.662.0, 1bv32);
  goto $for.cond.i.665;
$storey8.exit:
  assert {:block_sourceloc} {:sourceloc_num 467} true;
  call {:sourceloc_num 468} $bugle_barrier(1bv1, 0bv1);
  v268 := BV32_ADD(BV32_MUL(BV32_MUL(v2, 8bv32), 9bv32), v3);
  $i.i.650.0 := 0bv32;
  goto $for.cond.i.652;
$for.cond.i.652:
  assert {:block_sourceloc} {:sourceloc_num 469} true;
  v269 := BV32_SLT($i.i.650.0, 8bv32);
  goto $truebb9, $falsebb9;
$for.body.i.656:
  assert {:block_sourceloc} {:sourceloc_num 470} true;
  assert {:sourceloc} {:sourceloc_num 471} true;
  v270 := $$ifft1D_512.smem[BV32_ADD(v268, BV32_MUL($i.i.650.0, 8bv32))];
  assert {:sourceloc} {:sourceloc_num 472} true;
  v271 := $$data[BV32_MUL($i.i.650.0, 2bv32)];
  assert {:sourceloc} {:sourceloc_num 473} true;
  v272 := $$data[BV32_ADD(BV32_MUL($i.i.650.0, 2bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 474} true;
  $$data[BV32_MUL($i.i.650.0, 2bv32)] := v271;
  assert {:sourceloc} {:sourceloc_num 475} true;
  $$data[BV32_ADD(BV32_MUL($i.i.650.0, 2bv32), 1bv32)] := v270;
  $i.i.650.0 := BV32_ADD($i.i.650.0, 1bv32);
  goto $for.cond.i.652;
$loady8.exit:
  assert {:block_sourceloc} {:sourceloc_num 476} true;
  assert {:sourceloc} {:sourceloc_num 477} true;
  v273 := $$data[0bv32];
  assert {:sourceloc} {:sourceloc_num 478} true;
  v274 := $$data[1bv32];
  assert {:sourceloc} {:sourceloc_num 479} true;
  v275 := $$data[8bv32];
  assert {:sourceloc} {:sourceloc_num 480} true;
  v276 := $$data[9bv32];
  assert {:sourceloc} {:sourceloc_num 481} true;
  $$data[0bv32] := FADD32(v273, v275);
  assert {:sourceloc} {:sourceloc_num 482} true;
  $$data[1bv32] := FADD32(v274, v276);
  assert {:sourceloc} {:sourceloc_num 483} true;
  v277 := $$data[8bv32];
  assert {:sourceloc} {:sourceloc_num 484} true;
  v278 := $$data[9bv32];
  assert {:sourceloc} {:sourceloc_num 485} true;
  $$data[8bv32] := FSUB32(v273, v277);
  assert {:sourceloc} {:sourceloc_num 486} true;
  $$data[9bv32] := FSUB32(v274, v278);
  assert {:sourceloc} {:sourceloc_num 487} true;
  v279 := $$data[2bv32];
  assert {:sourceloc} {:sourceloc_num 488} true;
  v280 := $$data[3bv32];
  assert {:sourceloc} {:sourceloc_num 489} true;
  v281 := $$data[10bv32];
  assert {:sourceloc} {:sourceloc_num 490} true;
  v282 := $$data[11bv32];
  assert {:sourceloc} {:sourceloc_num 491} true;
  $$data[2bv32] := FADD32(v279, v281);
  assert {:sourceloc} {:sourceloc_num 492} true;
  $$data[3bv32] := FADD32(v280, v282);
  assert {:sourceloc} {:sourceloc_num 493} true;
  v283 := $$data[10bv32];
  assert {:sourceloc} {:sourceloc_num 494} true;
  v284 := $$data[11bv32];
  assert {:sourceloc} {:sourceloc_num 495} true;
  $$data[10bv32] := FSUB32(v279, v283);
  assert {:sourceloc} {:sourceloc_num 496} true;
  $$data[11bv32] := FSUB32(v280, v284);
  assert {:sourceloc} {:sourceloc_num 497} true;
  v285 := $$data[4bv32];
  assert {:sourceloc} {:sourceloc_num 498} true;
  v286 := $$data[5bv32];
  assert {:sourceloc} {:sourceloc_num 499} true;
  v287 := $$data[12bv32];
  assert {:sourceloc} {:sourceloc_num 500} true;
  v288 := $$data[13bv32];
  assert {:sourceloc} {:sourceloc_num 501} true;
  $$data[4bv32] := FADD32(v285, v287);
  assert {:sourceloc} {:sourceloc_num 502} true;
  $$data[5bv32] := FADD32(v286, v288);
  assert {:sourceloc} {:sourceloc_num 503} true;
  v289 := $$data[12bv32];
  assert {:sourceloc} {:sourceloc_num 504} true;
  v290 := $$data[13bv32];
  assert {:sourceloc} {:sourceloc_num 505} true;
  $$data[12bv32] := FSUB32(v285, v289);
  assert {:sourceloc} {:sourceloc_num 506} true;
  $$data[13bv32] := FSUB32(v286, v290);
  assert {:sourceloc} {:sourceloc_num 507} true;
  v291 := $$data[6bv32];
  assert {:sourceloc} {:sourceloc_num 508} true;
  v292 := $$data[7bv32];
  assert {:sourceloc} {:sourceloc_num 509} true;
  v293 := $$data[14bv32];
  assert {:sourceloc} {:sourceloc_num 510} true;
  v294 := $$data[15bv32];
  assert {:sourceloc} {:sourceloc_num 511} true;
  $$data[6bv32] := FADD32(v291, v293);
  assert {:sourceloc} {:sourceloc_num 512} true;
  $$data[7bv32] := FADD32(v292, v294);
  assert {:sourceloc} {:sourceloc_num 513} true;
  v295 := $$data[14bv32];
  assert {:sourceloc} {:sourceloc_num 514} true;
  v296 := $$data[15bv32];
  assert {:sourceloc} {:sourceloc_num 515} true;
  $$data[14bv32] := FSUB32(v291, v295);
  assert {:sourceloc} {:sourceloc_num 516} true;
  $$data[15bv32] := FSUB32(v292, v296);
  assert {:sourceloc} {:sourceloc_num 517} true;
  v297 := $$data[10bv32];
  assert {:sourceloc} {:sourceloc_num 518} true;
  v298 := $$data[11bv32];
  assert {:sourceloc} {:sourceloc_num 519} true;
  $$data[10bv32] := FMUL32(1060439283bv32, FADD32(FMUL32(v297, 1065353216bv32), FSUB32(2147483648bv32, FMUL32(v298, 1065353216bv32))));
  assert {:sourceloc} {:sourceloc_num 520} true;
  $$data[11bv32] := FMUL32(1060439283bv32, FADD32(FMUL32(v297, 1065353216bv32), FMUL32(v298, 1065353216bv32)));
  assert {:sourceloc} {:sourceloc_num 521} true;
  v299 := $$data[12bv32];
  assert {:sourceloc} {:sourceloc_num 522} true;
  v300 := $$data[13bv32];
  assert {:sourceloc} {:sourceloc_num 523} true;
  $$data[12bv32] := FADD32(FMUL32(v299, 0bv32), FSUB32(2147483648bv32, FMUL32(v300, 1065353216bv32)));
  assert {:sourceloc} {:sourceloc_num 524} true;
  $$data[13bv32] := FADD32(FMUL32(v299, 1065353216bv32), FMUL32(v300, 0bv32));
  assert {:sourceloc} {:sourceloc_num 525} true;
  v301 := $$data[14bv32];
  assert {:sourceloc} {:sourceloc_num 526} true;
  v302 := $$data[15bv32];
  assert {:sourceloc} {:sourceloc_num 527} true;
  $$data[14bv32] := FMUL32(1060439283bv32, FADD32(FMUL32(v301, 3212836864bv32), FSUB32(2147483648bv32, FMUL32(v302, 1065353216bv32))));
  assert {:sourceloc} {:sourceloc_num 528} true;
  $$data[15bv32] := FMUL32(1060439283bv32, FADD32(FMUL32(v301, 1065353216bv32), FMUL32(v302, 3212836864bv32)));
  assert {:sourceloc} {:sourceloc_num 529} true;
  v303 := $$data[0bv32];
  assert {:sourceloc} {:sourceloc_num 530} true;
  v304 := $$data[1bv32];
  assert {:sourceloc} {:sourceloc_num 531} true;
  v305 := $$data[4bv32];
  assert {:sourceloc} {:sourceloc_num 532} true;
  v306 := $$data[5bv32];
  assert {:sourceloc} {:sourceloc_num 533} true;
  $$data[0bv32] := FADD32(v303, v305);
  assert {:sourceloc} {:sourceloc_num 534} true;
  $$data[1bv32] := FADD32(v304, v306);
  assert {:sourceloc} {:sourceloc_num 535} true;
  v307 := $$data[4bv32];
  assert {:sourceloc} {:sourceloc_num 536} true;
  v308 := $$data[5bv32];
  assert {:sourceloc} {:sourceloc_num 537} true;
  $$data[4bv32] := FSUB32(v303, v307);
  assert {:sourceloc} {:sourceloc_num 538} true;
  $$data[5bv32] := FSUB32(v304, v308);
  assert {:sourceloc} {:sourceloc_num 539} true;
  v309 := $$data[2bv32];
  assert {:sourceloc} {:sourceloc_num 540} true;
  v310 := $$data[3bv32];
  assert {:sourceloc} {:sourceloc_num 541} true;
  v311 := $$data[6bv32];
  assert {:sourceloc} {:sourceloc_num 542} true;
  v312 := $$data[7bv32];
  assert {:sourceloc} {:sourceloc_num 543} true;
  $$data[2bv32] := FADD32(v309, v311);
  assert {:sourceloc} {:sourceloc_num 544} true;
  $$data[3bv32] := FADD32(v310, v312);
  assert {:sourceloc} {:sourceloc_num 545} true;
  v313 := $$data[6bv32];
  assert {:sourceloc} {:sourceloc_num 546} true;
  v314 := $$data[7bv32];
  assert {:sourceloc} {:sourceloc_num 547} true;
  $$data[6bv32] := FSUB32(v309, v313);
  assert {:sourceloc} {:sourceloc_num 548} true;
  $$data[7bv32] := FSUB32(v310, v314);
  assert {:sourceloc} {:sourceloc_num 549} true;
  v315 := $$data[6bv32];
  assert {:sourceloc} {:sourceloc_num 550} true;
  v316 := $$data[7bv32];
  assert {:sourceloc} {:sourceloc_num 551} true;
  $$data[6bv32] := FADD32(FMUL32(v315, 0bv32), FSUB32(2147483648bv32, FMUL32(v316, 1065353216bv32)));
  assert {:sourceloc} {:sourceloc_num 552} true;
  $$data[7bv32] := FADD32(FMUL32(v315, 1065353216bv32), FMUL32(v316, 0bv32));
  assert {:sourceloc} {:sourceloc_num 553} true;
  v317 := $$data[0bv32];
  assert {:sourceloc} {:sourceloc_num 554} true;
  v318 := $$data[1bv32];
  assert {:sourceloc} {:sourceloc_num 555} true;
  v319 := $$data[2bv32];
  assert {:sourceloc} {:sourceloc_num 556} true;
  v320 := $$data[3bv32];
  assert {:sourceloc} {:sourceloc_num 557} true;
  $$data[0bv32] := FADD32(v317, v319);
  assert {:sourceloc} {:sourceloc_num 558} true;
  $$data[1bv32] := FADD32(v318, v320);
  assert {:sourceloc} {:sourceloc_num 559} true;
  v321 := $$data[2bv32];
  assert {:sourceloc} {:sourceloc_num 560} true;
  v322 := $$data[3bv32];
  assert {:sourceloc} {:sourceloc_num 561} true;
  $$data[2bv32] := FSUB32(v317, v321);
  assert {:sourceloc} {:sourceloc_num 562} true;
  $$data[3bv32] := FSUB32(v318, v322);
  assert {:sourceloc} {:sourceloc_num 563} true;
  v323 := $$data[4bv32];
  assert {:sourceloc} {:sourceloc_num 564} true;
  v324 := $$data[5bv32];
  assert {:sourceloc} {:sourceloc_num 565} true;
  v325 := $$data[6bv32];
  assert {:sourceloc} {:sourceloc_num 566} true;
  v326 := $$data[7bv32];
  assert {:sourceloc} {:sourceloc_num 567} true;
  $$data[4bv32] := FADD32(v323, v325);
  assert {:sourceloc} {:sourceloc_num 568} true;
  $$data[5bv32] := FADD32(v324, v326);
  assert {:sourceloc} {:sourceloc_num 569} true;
  v327 := $$data[6bv32];
  assert {:sourceloc} {:sourceloc_num 570} true;
  v328 := $$data[7bv32];
  assert {:sourceloc} {:sourceloc_num 571} true;
  $$data[6bv32] := FSUB32(v323, v327);
  assert {:sourceloc} {:sourceloc_num 572} true;
  $$data[7bv32] := FSUB32(v324, v328);
  assert {:sourceloc} {:sourceloc_num 573} true;
  v329 := $$data[8bv32];
  assert {:sourceloc} {:sourceloc_num 574} true;
  v330 := $$data[9bv32];
  assert {:sourceloc} {:sourceloc_num 575} true;
  v331 := $$data[12bv32];
  assert {:sourceloc} {:sourceloc_num 576} true;
  v332 := $$data[13bv32];
  assert {:sourceloc} {:sourceloc_num 577} true;
  $$data[8bv32] := FADD32(v329, v331);
  assert {:sourceloc} {:sourceloc_num 578} true;
  $$data[9bv32] := FADD32(v330, v332);
  assert {:sourceloc} {:sourceloc_num 579} true;
  v333 := $$data[12bv32];
  assert {:sourceloc} {:sourceloc_num 580} true;
  v334 := $$data[13bv32];
  assert {:sourceloc} {:sourceloc_num 581} true;
  $$data[12bv32] := FSUB32(v329, v333);
  assert {:sourceloc} {:sourceloc_num 582} true;
  $$data[13bv32] := FSUB32(v330, v334);
  assert {:sourceloc} {:sourceloc_num 583} true;
  v335 := $$data[10bv32];
  assert {:sourceloc} {:sourceloc_num 584} true;
  v336 := $$data[11bv32];
  assert {:sourceloc} {:sourceloc_num 585} true;
  v337 := $$data[14bv32];
  assert {:sourceloc} {:sourceloc_num 586} true;
  v338 := $$data[15bv32];
  assert {:sourceloc} {:sourceloc_num 587} true;
  $$data[10bv32] := FADD32(v335, v337);
  assert {:sourceloc} {:sourceloc_num 588} true;
  $$data[11bv32] := FADD32(v336, v338);
  assert {:sourceloc} {:sourceloc_num 589} true;
  v339 := $$data[14bv32];
  assert {:sourceloc} {:sourceloc_num 590} true;
  v340 := $$data[15bv32];
  assert {:sourceloc} {:sourceloc_num 591} true;
  $$data[14bv32] := FSUB32(v335, v339);
  assert {:sourceloc} {:sourceloc_num 592} true;
  $$data[15bv32] := FSUB32(v336, v340);
  assert {:sourceloc} {:sourceloc_num 593} true;
  v341 := $$data[14bv32];
  assert {:sourceloc} {:sourceloc_num 594} true;
  v342 := $$data[15bv32];
  assert {:sourceloc} {:sourceloc_num 595} true;
  $$data[14bv32] := FADD32(FMUL32(v341, 0bv32), FSUB32(2147483648bv32, FMUL32(v342, 1065353216bv32)));
  assert {:sourceloc} {:sourceloc_num 596} true;
  $$data[15bv32] := FADD32(FMUL32(v341, 1065353216bv32), FMUL32(v342, 0bv32));
  assert {:sourceloc} {:sourceloc_num 597} true;
  v343 := $$data[8bv32];
  assert {:sourceloc} {:sourceloc_num 598} true;
  v344 := $$data[9bv32];
  assert {:sourceloc} {:sourceloc_num 599} true;
  v345 := $$data[10bv32];
  assert {:sourceloc} {:sourceloc_num 600} true;
  v346 := $$data[11bv32];
  assert {:sourceloc} {:sourceloc_num 601} true;
  $$data[8bv32] := FADD32(v343, v345);
  assert {:sourceloc} {:sourceloc_num 602} true;
  $$data[9bv32] := FADD32(v344, v346);
  assert {:sourceloc} {:sourceloc_num 603} true;
  v347 := $$data[10bv32];
  assert {:sourceloc} {:sourceloc_num 604} true;
  v348 := $$data[11bv32];
  assert {:sourceloc} {:sourceloc_num 605} true;
  $$data[10bv32] := FSUB32(v343, v347);
  assert {:sourceloc} {:sourceloc_num 606} true;
  $$data[11bv32] := FSUB32(v344, v348);
  assert {:sourceloc} {:sourceloc_num 607} true;
  v349 := $$data[12bv32];
  assert {:sourceloc} {:sourceloc_num 608} true;
  v350 := $$data[13bv32];
  assert {:sourceloc} {:sourceloc_num 609} true;
  v351 := $$data[14bv32];
  assert {:sourceloc} {:sourceloc_num 610} true;
  v352 := $$data[15bv32];
  assert {:sourceloc} {:sourceloc_num 611} true;
  $$data[12bv32] := FADD32(v349, v351);
  assert {:sourceloc} {:sourceloc_num 612} true;
  $$data[13bv32] := FADD32(v350, v352);
  assert {:sourceloc} {:sourceloc_num 613} true;
  v353 := $$data[14bv32];
  assert {:sourceloc} {:sourceloc_num 614} true;
  v354 := $$data[15bv32];
  assert {:sourceloc} {:sourceloc_num 615} true;
  $$data[14bv32] := FSUB32(v349, v353);
  assert {:sourceloc} {:sourceloc_num 616} true;
  $$data[15bv32] := FSUB32(v350, v354);
  $i.0 := 0bv32;
  goto $for.cond.416;
$for.cond.416:
  assert {:block_sourceloc} {:sourceloc_num 617} true;
  v355 := BV32_SLT($i.0, 8bv32);
  goto $truebb10, $falsebb10;
$for.body.419:
  assert {:block_sourceloc} {:sourceloc_num 618} true;
  assert {:sourceloc} {:sourceloc_num 619} true;
  v356 := $$data[BV32_MUL($i.0, 2bv32)];
  assert {:sourceloc} {:sourceloc_num 620} true;
  v357 := $$data[BV32_ADD(BV32_MUL($i.0, 2bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 621} true;
  v358 := $$data[BV32_MUL($i.0, 2bv32)];
  assert {:sourceloc} {:sourceloc_num 622} true;
  v359 := $$data[BV32_ADD(BV32_MUL($i.0, 2bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 623} true;
  $$data[BV32_MUL($i.0, 2bv32)] := FDIV32(v356, 1140850688bv32);
  assert {:sourceloc} {:sourceloc_num 624} true;
  $$data[BV32_ADD(BV32_MUL($i.0, 2bv32), 1bv32)] := v359;
  assert {:sourceloc} {:sourceloc_num 625} true;
  v360 := $$data[BV32_MUL($i.0, 2bv32)];
  assert {:sourceloc} {:sourceloc_num 626} true;
  v361 := $$data[BV32_ADD(BV32_MUL($i.0, 2bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 627} true;
  v362 := $$data[BV32_MUL($i.0, 2bv32)];
  assert {:sourceloc} {:sourceloc_num 628} true;
  v363 := $$data[BV32_ADD(BV32_MUL($i.0, 2bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 629} true;
  $$data[BV32_MUL($i.0, 2bv32)] := v362;
  assert {:sourceloc} {:sourceloc_num 630} true;
  $$data[BV32_ADD(BV32_MUL($i.0, 2bv32), 1bv32)] := FDIV32(v361, 1140850688bv32);
  goto $for.inc.426;
$for.inc.426:
  assert {:block_sourceloc} {:sourceloc_num 631} true;
  $i.0 := BV32_ADD($i.0, 1bv32);
  goto $for.cond.416;
$for.end.428:
  assert {:block_sourceloc} {:sourceloc_num 632} true;
  assert {:sourceloc} {:sourceloc_num 633} true;
  v364 := $$globalStores8.reversed[0bv32];
  assert {:sourceloc} {:sourceloc_num 634} true;
  $$reversed.i[0bv32] := v364;
  assert {:sourceloc} {:sourceloc_num 635} true;
  v365 := $$globalStores8.reversed[1bv32];
  assert {:sourceloc} {:sourceloc_num 636} true;
  $$reversed.i[1bv32] := v365;
  assert {:sourceloc} {:sourceloc_num 637} true;
  v366 := $$globalStores8.reversed[2bv32];
  assert {:sourceloc} {:sourceloc_num 638} true;
  $$reversed.i[2bv32] := v366;
  assert {:sourceloc} {:sourceloc_num 639} true;
  v367 := $$globalStores8.reversed[3bv32];
  assert {:sourceloc} {:sourceloc_num 640} true;
  $$reversed.i[3bv32] := v367;
  assert {:sourceloc} {:sourceloc_num 641} true;
  v368 := $$globalStores8.reversed[4bv32];
  assert {:sourceloc} {:sourceloc_num 642} true;
  $$reversed.i[4bv32] := v368;
  assert {:sourceloc} {:sourceloc_num 643} true;
  v369 := $$globalStores8.reversed[5bv32];
  assert {:sourceloc} {:sourceloc_num 644} true;
  $$reversed.i[5bv32] := v369;
  assert {:sourceloc} {:sourceloc_num 645} true;
  v370 := $$globalStores8.reversed[6bv32];
  assert {:sourceloc} {:sourceloc_num 646} true;
  $$reversed.i[6bv32] := v370;
  assert {:sourceloc} {:sourceloc_num 647} true;
  v371 := $$globalStores8.reversed[7bv32];
  assert {:sourceloc} {:sourceloc_num 648} true;
  $$reversed.i[7bv32] := v371;
  $i.i.432.0 := 0bv32;
  goto $for.cond.i.434;
$for.cond.i.434:
  assert {:block_sourceloc} {:sourceloc_num 649} true;
  v372 := BV32_SLT($i.i.432.0, 8bv32);
  goto $truebb11, $falsebb11;
$for.body.i.438:
  assert {:block_sourceloc} {:sourceloc_num 650} true;
  assert {:sourceloc} {:sourceloc_num 651} true;
  v373 := $$reversed.i[$i.i.432.0];
  assert {:sourceloc} {:sourceloc_num 652} true;
  v374 := $$data[BV32_MUL(v373, 2bv32)];
  assert {:sourceloc} {:sourceloc_num 653} true;
  v375 := $$data[BV32_ADD(BV32_MUL(v373, 2bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 654} true;
  $$work[BV32_ADD(BV32_MUL(v1, 2bv32), BV32_MUL(BV32_MUL($i.i.432.0, 64bv32), 2bv32))] := v374;
  assert {:sourceloc} {:sourceloc_num 655} true;
  $$work[BV32_ADD(BV32_ADD(BV32_MUL(v1, 2bv32), BV32_MUL(BV32_MUL($i.i.432.0, 64bv32), 2bv32)), 1bv32)] := v375;
  $i.i.432.0 := BV32_ADD($i.i.432.0, 1bv32);
  goto $for.cond.i.434;
$globalStores8.exit:
  assert {:block_sourceloc} {:sourceloc_num 656} true;
  return;
$truebb:
  assume {:partition} v4;
  assert {:block_sourceloc} {:sourceloc_num 657} true;
  goto $for.body.i;
$falsebb:
  assume {:partition} !v4;
  assert {:block_sourceloc} {:sourceloc_num 658} true;
  goto $globalLoads8.exit;
$truebb0:
  assume {:partition} v97;
  assert {:block_sourceloc} {:sourceloc_num 659} true;
  goto $for.body;
$falsebb0:
  assume {:partition} !v97;
  assert {:block_sourceloc} {:sourceloc_num 660} true;
  goto $for.end;
$truebb1:
  assume {:partition} v113;
  assert {:block_sourceloc} {:sourceloc_num 661} true;
  goto $for.body.i.1260;
$falsebb1:
  assume {:partition} !v113;
  assert {:block_sourceloc} {:sourceloc_num 662} true;
  goto $storex8.exit1262;
$truebb2:
  assume {:partition} v118;
  assert {:block_sourceloc} {:sourceloc_num 663} true;
  goto $for.body.i.1272;
$falsebb2:
  assume {:partition} !v118;
  assert {:block_sourceloc} {:sourceloc_num 664} true;
  goto $loadx8.exit1274;
$truebb3:
  assume {:partition} v131;
  assert {:block_sourceloc} {:sourceloc_num 665} true;
  goto $for.body.i.1191;
$falsebb3:
  assume {:partition} !v131;
  assert {:block_sourceloc} {:sourceloc_num 666} true;
  goto $storey8.exit1193;
$truebb4:
  assume {:partition} v136;
  assert {:block_sourceloc} {:sourceloc_num 667} true;
  goto $for.body.i.1157;
$falsebb4:
  assume {:partition} !v136;
  assert {:block_sourceloc} {:sourceloc_num 668} true;
  goto $loady8.exit1159;
$truebb5:
  assume {:partition} v230;
  assert {:block_sourceloc} {:sourceloc_num 669} true;
  goto $for.body.265;
$falsebb5:
  assume {:partition} !v230;
  assert {:block_sourceloc} {:sourceloc_num 670} true;
  goto $for.end.279;
$truebb6:
  assume {:partition} v246;
  assert {:block_sourceloc} {:sourceloc_num 671} true;
  goto $for.body.i.813;
$falsebb6:
  assume {:partition} !v246;
  assert {:block_sourceloc} {:sourceloc_num 672} true;
  goto $storex8.exit;
$truebb7:
  assume {:partition} v251;
  assert {:block_sourceloc} {:sourceloc_num 673} true;
  goto $for.body.i.780;
$falsebb7:
  assume {:partition} !v251;
  assert {:block_sourceloc} {:sourceloc_num 674} true;
  goto $loadx8.exit;
$truebb8:
  assume {:partition} v264;
  assert {:block_sourceloc} {:sourceloc_num 675} true;
  goto $for.body.i.668;
$falsebb8:
  assume {:partition} !v264;
  assert {:block_sourceloc} {:sourceloc_num 676} true;
  goto $storey8.exit;
$truebb9:
  assume {:partition} v269;
  assert {:block_sourceloc} {:sourceloc_num 677} true;
  goto $for.body.i.656;
$falsebb9:
  assume {:partition} !v269;
  assert {:block_sourceloc} {:sourceloc_num 678} true;
  goto $loady8.exit;
$truebb10:
  assume {:partition} v355;
  assert {:block_sourceloc} {:sourceloc_num 679} true;
  goto $for.body.419;
$falsebb10:
  assume {:partition} !v355;
  assert {:block_sourceloc} {:sourceloc_num 680} true;
  goto $for.end.428;
$truebb11:
  assume {:partition} v372;
  assert {:block_sourceloc} {:sourceloc_num 681} true;
  goto $for.body.i.438;
$falsebb11:
  assume {:partition} !v372;
  assert {:block_sourceloc} {:sourceloc_num 682} true;
  goto $globalStores8.exit;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 64bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 128bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_x == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_y == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_z == 0bv32 then 1bv1 else 0bv1) != 0bv1;
