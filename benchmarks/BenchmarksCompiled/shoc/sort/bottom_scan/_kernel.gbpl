type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "in"} {:global} $$in : [bv32]bv32;
axiom {:array_info "$$in"} {:global} {:elem_width 32} {:source_name "in"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$in : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$in : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$in : bool;

var {:source_name "isums"} {:global} $$isums : [bv32]bv32;
axiom {:array_info "$$isums"} {:global} {:elem_width 32} {:source_name "isums"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$isums : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$isums : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$isums : bool;

var {:source_name "out"} {:global} $$out : [bv32]bv32;
axiom {:array_info "$$out"} {:global} {:elem_width 32} {:source_name "out"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$out : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$out : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$out : bool;

var {:source_name "lmem"} {:group_shared} $$lmem : [bv32]bv32;
axiom {:array_info "$$lmem"} {:group_shared} {:elem_width 32} {:source_name "lmem"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$lmem : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$lmem : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$lmem : bool;

var {:source_name "histogram"} $$histogram : [bv32]bv32;
axiom {:array_info "$$histogram"} {:elem_width 32} {:source_name "histogram"} {:source_elem_width 32} {:source_dimensions "16"} true;

var {:source_name "l_block_counts"} {:group_shared} $$bottom_scan.l_block_counts : [bv32]bv32;
axiom {:array_info "$$bottom_scan.l_block_counts"} {:group_shared} {:elem_width 32} {:source_name "l_block_counts"} {:source_elem_width 32} {:source_dimensions "16"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$bottom_scan.l_block_counts : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$bottom_scan.l_block_counts : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$bottom_scan.l_block_counts : bool;

var {:source_name "l_scanned_seeds"} {:group_shared} $$bottom_scan.l_scanned_seeds : [bv32]bv32;
axiom {:array_info "$$bottom_scan.l_scanned_seeds"} {:group_shared} {:elem_width 32} {:source_name "l_scanned_seeds"} {:source_elem_width 32} {:source_dimensions "16"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$bottom_scan.l_scanned_seeds : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$bottom_scan.l_scanned_seeds : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$bottom_scan.l_scanned_seeds : bool;

const _WATCHED_OFFSET : bv32;
const {:global_offset_x} global_offset_x : bv32;
const {:global_offset_y} global_offset_y : bv32;
const {:global_offset_z} global_offset_z : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvand"} BV32_AND(bv32, bv32) : bv32;
function {:bvbuiltin "bvlshr"} BV32_LSHR(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvsdiv"} BV32_SDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvult"} BV32_ULT(bv32, bv32) : bool;
procedure {:source_name "bottom_scan"} {:kernel} $bottom_scan($n:bv32, $shift:bv32)
requires {:sourceloc_num 0} (if $n == 262144bv32 then 1bv1 else 0bv1) != 0bv1;
{
  var $cond:bv32;
  var $i.0:bv32;
  var $window.0:bv32;
  var $val_4.0:bv128;
  var $key_4.0:bv128;
  var $q.0:bv32;
  var $val_4.1:bv128;
  var $key_4.1:bv128;
  var $digit.0:bv32;
  var $i.i.0:bv32;
  var $q92.0:bv32;
  var v25:bv32;
  var v2:bv32;
  var v3:bool;
  var v1:bv32;
  var v0:bv32;
  var v5:bv32;
  var v11:bv32;
  var v12:bv32;
  var v14:bv32;
  var v13:bv32;
  var v8:bool;
  var v9:bool;
  var v4:bool;
  var v6:bv128;
  var v7:bv128;
  var v15:bv32;
  var v10:bool;
  var v16:bv32;
  var v17:bv32;
  var v18:bv32;
  var v23:bool;
  var v26:bv32;
  var v27:bool;
  var v22:bv32;
  var v21:bv32;
  var v24:bv32;
  var v28:bv32;
  var v30:bv32;
  var v29:bv32;
  var v19:bv32;
  var v20:bv32;
  var v36:bv32;
  var v43:bv32;
  var v33:bv32;
  var v47:bv32;
  var v46:bv32;
  var v48:bv32;
  var v37:bv32;
  var v42:bv32;
  var v34:bv32;
  var v39:bv32;
  var v41:bv32;
  var v32:bv32;
  var v38:bv32;
  var v44:bv32;
  var v49:bv32;
  var v54:bv32;
  var v55:bv32;
  var v51:bv32;
  var v40:bv32;
  var v45:bv32;
  var v50:bv32;
  var v52:bool;
  var v35:bv32;
  var v31:bool;
  var v53:bool;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  assert {:sourceloc} {:sourceloc_num 2} true;
  $$histogram[0bv32] := 0bv32;
  assert {:sourceloc} {:sourceloc_num 3} true;
  $$histogram[1bv32] := 0bv32;
  assert {:sourceloc} {:sourceloc_num 4} true;
  $$histogram[2bv32] := 0bv32;
  assert {:sourceloc} {:sourceloc_num 5} true;
  $$histogram[3bv32] := 0bv32;
  assert {:sourceloc} {:sourceloc_num 6} true;
  $$histogram[4bv32] := 0bv32;
  assert {:sourceloc} {:sourceloc_num 7} true;
  $$histogram[5bv32] := 0bv32;
  assert {:sourceloc} {:sourceloc_num 8} true;
  $$histogram[6bv32] := 0bv32;
  assert {:sourceloc} {:sourceloc_num 9} true;
  $$histogram[7bv32] := 0bv32;
  assert {:sourceloc} {:sourceloc_num 10} true;
  $$histogram[8bv32] := 0bv32;
  assert {:sourceloc} {:sourceloc_num 11} true;
  $$histogram[9bv32] := 0bv32;
  assert {:sourceloc} {:sourceloc_num 12} true;
  $$histogram[10bv32] := 0bv32;
  assert {:sourceloc} {:sourceloc_num 13} true;
  $$histogram[11bv32] := 0bv32;
  assert {:sourceloc} {:sourceloc_num 14} true;
  $$histogram[12bv32] := 0bv32;
  assert {:sourceloc} {:sourceloc_num 15} true;
  $$histogram[13bv32] := 0bv32;
  assert {:sourceloc} {:sourceloc_num 16} true;
  $$histogram[14bv32] := 0bv32;
  assert {:sourceloc} {:sourceloc_num 17} true;
  $$histogram[15bv32] := 0bv32;
  v0 := BV32_SDIV($n, 4bv32);
  v1 := BV32_UDIV(v0, num_groups_x);
  v2 := BV32_MUL(group_id_x, v1);
  v3 := group_id_x == BV32_SUB(num_groups_x, 1bv32);
  goto $truebb, $falsebb;
$cond.true:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  $cond := v0;
  goto $cond.end;
$cond.false:
  assert {:block_sourceloc} {:sourceloc_num 19} true;
  $cond := BV32_ADD(v2, v1);
  goto $cond.end;
$cond.end:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  v4 := BV32_ULT(local_id_x, 16bv32);
  goto $truebb0, $falsebb0;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  assert {:sourceloc} {:sourceloc_num 22} true;
  $$bottom_scan.l_block_counts[local_id_x] := 0bv32;
  assert {:sourceloc} {:sourceloc_num 23} true;
  v5 := $$isums[BV32_ADD(BV32_MUL(local_id_x, num_groups_x), group_id_x)];
  assert {:sourceloc} {:sourceloc_num 24} true;
  $$bottom_scan.l_scanned_seeds[local_id_x] := v5;
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  call {:sourceloc_num 26} $bugle_barrier(1bv1, 0bv1);
  havoc v6;
  havoc v7;
  $i.0, $window.0, $val_4.0, $key_4.0 := BV32_ADD(v2, local_id_x), v2, v6, v7;
  goto $while.cond;
$while.cond:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  v8 := BV32_SLT($window.0, $cond);
  goto $truebb1, $falsebb1;
$while.body:
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  $q.0 := 0bv32;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 29} true;
  v9 := BV32_SLT($q.0, 16bv32);
  goto $truebb2, $falsebb2;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  assert {:sourceloc} {:sourceloc_num 31} true;
  $$histogram[$q.0] := 0bv32;
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  $q.0 := BV32_ADD($q.0, 1bv32);
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  v10 := BV32_SLT($i.0, $cond);
  goto $truebb3, $falsebb3;
$if.then.23:
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  assert {:sourceloc} {:sourceloc_num 35} true;
  v11 := $$in[BV32_MUL($i.0, 4bv32)];
  assert {:sourceloc} {:sourceloc_num 36} true;
  v12 := $$in[BV32_ADD(BV32_MUL($i.0, 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 37} true;
  v13 := $$in[BV32_ADD(BV32_MUL($i.0, 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 38} true;
  v14 := $$in[BV32_ADD(BV32_MUL($i.0, 4bv32), 3bv32)];
  v15 := BV32_AND(BV32_LSHR(v11, BV32_AND($shift, 31bv32)), 15bv32);
  v16 := BV32_AND(BV32_LSHR(v12, BV32_AND($shift, 31bv32)), 15bv32);
  v17 := BV32_AND(BV32_LSHR(v13, BV32_AND($shift, 31bv32)), 15bv32);
  v18 := BV32_AND(BV32_LSHR(v14, BV32_AND($shift, 31bv32)), 15bv32);
  assert {:sourceloc} {:sourceloc_num 39} true;
  v19 := $$histogram[v15];
  assert {:sourceloc} {:sourceloc_num 40} true;
  $$histogram[v15] := BV32_ADD(v19, 1bv32);
  assert {:sourceloc} {:sourceloc_num 41} true;
  v20 := $$histogram[v16];
  assert {:sourceloc} {:sourceloc_num 42} true;
  $$histogram[v16] := BV32_ADD(v20, 1bv32);
  assert {:sourceloc} {:sourceloc_num 43} true;
  v21 := $$histogram[v17];
  assert {:sourceloc} {:sourceloc_num 44} true;
  $$histogram[v17] := BV32_ADD(v21, 1bv32);
  assert {:sourceloc} {:sourceloc_num 45} true;
  v22 := $$histogram[v18];
  assert {:sourceloc} {:sourceloc_num 46} true;
  $$histogram[v18] := BV32_ADD(v22, 1bv32);
  $val_4.1, $key_4.1 := v14 ++ v13 ++ v12 ++ v11, v18 ++ v17 ++ v16 ++ v15;
  goto $if.end.42;
$if.end.42:
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  $digit.0 := 0bv32;
  goto $for.cond.43;
$for.cond.43:
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  v23 := BV32_SLT($digit.0, 16bv32);
  goto $truebb4, $falsebb4;
$for.body.45:
  assert {:block_sourceloc} {:sourceloc_num 49} true;
  assert {:sourceloc} {:sourceloc_num 50} true;
  v24 := $$histogram[$digit.0];
  v25 := local_id_x;
  assert {:sourceloc} {:sourceloc_num 51} true;
  $$lmem[v25] := 0bv32;
  v26 := BV32_ADD(v25, group_size_x);
  assert {:sourceloc} {:sourceloc_num 52} true;
  $$lmem[v26] := v24;
  call {:sourceloc_num 53} $bugle_barrier(1bv1, 0bv1);
  $i.i.0 := 1bv32;
  goto $for.cond.i;
$for.cond.i:
  assert {:block_sourceloc} {:sourceloc_num 54} true;
  v27 := BV32_ULT($i.i.0, group_size_x);
  goto $truebb5, $falsebb5;
$for.body.i:
  assert {:block_sourceloc} {:sourceloc_num 55} true;
  assert {:sourceloc} {:sourceloc_num 56} true;
  v28 := $$lmem[BV32_SUB(v26, $i.i.0)];
  call {:sourceloc_num 57} $bugle_barrier(1bv1, 0bv1);
  assert {:sourceloc} {:sourceloc_num 58} true;
  v29 := $$lmem[v26];
  assert {:sourceloc} {:sourceloc_num 59} true;
  $$lmem[v26] := BV32_ADD(v29, v28);
  call {:sourceloc_num 60} $bugle_barrier(1bv1, 0bv1);
  $i.i.0 := BV32_MUL($i.i.0, 2bv32);
  goto $for.cond.i;
$scanLocalMem.exit:
  assert {:block_sourceloc} {:sourceloc_num 61} true;
  assert {:sourceloc} {:sourceloc_num 62} true;
  v30 := $$lmem[BV32_SUB(v26, 1bv32)];
  assert {:sourceloc} {:sourceloc_num 63} true;
  $$histogram[$digit.0] := v30;
  call {:sourceloc_num 64} $bugle_barrier(1bv1, 0bv1);
  goto $for.inc.49;
$for.inc.49:
  assert {:block_sourceloc} {:sourceloc_num 65} true;
  $digit.0 := BV32_ADD($digit.0, 1bv32);
  goto $for.cond.43;
$for.end.51:
  assert {:block_sourceloc} {:sourceloc_num 66} true;
  v31 := BV32_SLT($i.0, $cond);
  goto $truebb6, $falsebb6;
$if.then.53:
  assert {:block_sourceloc} {:sourceloc_num 67} true;
  assert {:sourceloc} {:sourceloc_num 68} true;
  v32 := $$histogram[$key_4.1[32:0]];
  assert {:sourceloc} {:sourceloc_num 69} true;
  v33 := $$bottom_scan.l_scanned_seeds[$key_4.1[32:0]];
  assert {:sourceloc} {:sourceloc_num 70} true;
  v34 := $$bottom_scan.l_block_counts[$key_4.1[32:0]];
  assert {:sourceloc} {:sourceloc_num 71} true;
  $$out[BV32_ADD(BV32_ADD(v32, v33), v34)] := $val_4.1[32:0];
  v35 := $key_4.1[32:0];
  assert {:sourceloc} {:sourceloc_num 72} true;
  v36 := $$histogram[v35];
  assert {:sourceloc} {:sourceloc_num 73} true;
  $$histogram[v35] := BV32_ADD(v36, 1bv32);
  assert {:sourceloc} {:sourceloc_num 74} true;
  v37 := $$histogram[$key_4.1[64:32]];
  assert {:sourceloc} {:sourceloc_num 75} true;
  v38 := $$bottom_scan.l_scanned_seeds[$key_4.1[64:32]];
  assert {:sourceloc} {:sourceloc_num 76} true;
  v39 := $$bottom_scan.l_block_counts[$key_4.1[64:32]];
  assert {:sourceloc} {:sourceloc_num 77} true;
  $$out[BV32_ADD(BV32_ADD(v37, v38), v39)] := $val_4.1[64:32];
  v40 := $key_4.1[64:32];
  assert {:sourceloc} {:sourceloc_num 78} true;
  v41 := $$histogram[v40];
  assert {:sourceloc} {:sourceloc_num 79} true;
  $$histogram[v40] := BV32_ADD(v41, 1bv32);
  assert {:sourceloc} {:sourceloc_num 80} true;
  v42 := $$histogram[$key_4.1[96:64]];
  assert {:sourceloc} {:sourceloc_num 81} true;
  v43 := $$bottom_scan.l_scanned_seeds[$key_4.1[96:64]];
  assert {:sourceloc} {:sourceloc_num 82} true;
  v44 := $$bottom_scan.l_block_counts[$key_4.1[96:64]];
  assert {:sourceloc} {:sourceloc_num 83} true;
  $$out[BV32_ADD(BV32_ADD(v42, v43), v44)] := $val_4.1[96:64];
  v45 := $key_4.1[96:64];
  assert {:sourceloc} {:sourceloc_num 84} true;
  v46 := $$histogram[v45];
  assert {:sourceloc} {:sourceloc_num 85} true;
  $$histogram[v45] := BV32_ADD(v46, 1bv32);
  assert {:sourceloc} {:sourceloc_num 86} true;
  v47 := $$histogram[$key_4.1[128:96]];
  assert {:sourceloc} {:sourceloc_num 87} true;
  v48 := $$bottom_scan.l_scanned_seeds[$key_4.1[128:96]];
  assert {:sourceloc} {:sourceloc_num 88} true;
  v49 := $$bottom_scan.l_block_counts[$key_4.1[128:96]];
  assert {:sourceloc} {:sourceloc_num 89} true;
  $$out[BV32_ADD(BV32_ADD(v47, v48), v49)] := $val_4.1[128:96];
  v50 := $key_4.1[128:96];
  assert {:sourceloc} {:sourceloc_num 90} true;
  v51 := $$histogram[v50];
  assert {:sourceloc} {:sourceloc_num 91} true;
  $$histogram[v50] := BV32_ADD(v51, 1bv32);
  goto $if.end.86;
$if.end.86:
  assert {:block_sourceloc} {:sourceloc_num 92} true;
  call {:sourceloc_num 93} $bugle_barrier(1bv1, 0bv1);
  v52 := local_id_x == BV32_SUB(group_size_x, 1bv32);
  goto $truebb7, $falsebb7;
$if.then.91:
  assert {:block_sourceloc} {:sourceloc_num 94} true;
  $q92.0 := 0bv32;
  goto $for.cond.93;
$for.cond.93:
  assert {:block_sourceloc} {:sourceloc_num 95} true;
  v53 := BV32_SLT($q92.0, 16bv32);
  goto $truebb8, $falsebb8;
$for.body.95:
  assert {:block_sourceloc} {:sourceloc_num 96} true;
  assert {:sourceloc} {:sourceloc_num 97} true;
  v54 := $$histogram[$q92.0];
  assert {:sourceloc} {:sourceloc_num 98} true;
  v55 := $$bottom_scan.l_block_counts[$q92.0];
  assert {:sourceloc} {:sourceloc_num 99} true;
  $$bottom_scan.l_block_counts[$q92.0] := BV32_ADD(v55, v54);
  goto $for.inc.99;
$for.inc.99:
  assert {:block_sourceloc} {:sourceloc_num 100} true;
  $q92.0 := BV32_ADD($q92.0, 1bv32);
  goto $for.cond.93;
$for.end.101:
  assert {:block_sourceloc} {:sourceloc_num 101} true;
  goto $if.end.102;
$if.end.102:
  assert {:block_sourceloc} {:sourceloc_num 102} true;
  call {:sourceloc_num 103} $bugle_barrier(1bv1, 0bv1);
  $i.0, $window.0, $val_4.0, $key_4.0 := BV32_ADD($i.0, group_size_x), BV32_ADD($window.0, group_size_x), $val_4.1, $key_4.1;
  goto $while.cond;
$while.end:
  assert {:block_sourceloc} {:sourceloc_num 104} true;
  return;
$truebb:
  assume {:partition} v3;
  assert {:block_sourceloc} {:sourceloc_num 105} true;
  goto $cond.true;
$falsebb:
  assume {:partition} !v3;
  assert {:block_sourceloc} {:sourceloc_num 106} true;
  goto $cond.false;
$truebb0:
  assume {:partition} v4;
  assert {:block_sourceloc} {:sourceloc_num 107} true;
  goto $if.then;
$falsebb0:
  assume {:partition} !v4;
  assert {:block_sourceloc} {:sourceloc_num 108} true;
  goto $if.end;
$truebb1:
  assume {:partition} v8;
  assert {:block_sourceloc} {:sourceloc_num 109} true;
  goto $while.body;
$falsebb1:
  assume {:partition} !v8;
  assert {:block_sourceloc} {:sourceloc_num 110} true;
  goto $while.end;
$truebb2:
  assume {:partition} v9;
  assert {:block_sourceloc} {:sourceloc_num 111} true;
  goto $for.body;
$falsebb2:
  assume {:partition} !v9;
  assert {:block_sourceloc} {:sourceloc_num 112} true;
  goto $for.end;
$truebb3:
  assume {:partition} v10;
  assert {:block_sourceloc} {:sourceloc_num 113} true;
  goto $if.then.23;
$falsebb3:
  assume {:partition} !v10;
  assert {:block_sourceloc} {:sourceloc_num 114} true;
  $val_4.1, $key_4.1 := $val_4.0, $key_4.0;
  goto $if.end.42;
$truebb4:
  assume {:partition} v23;
  assert {:block_sourceloc} {:sourceloc_num 115} true;
  goto $for.body.45;
$falsebb4:
  assume {:partition} !v23;
  assert {:block_sourceloc} {:sourceloc_num 116} true;
  goto $for.end.51;
$truebb5:
  assume {:partition} v27;
  assert {:block_sourceloc} {:sourceloc_num 117} true;
  goto $for.body.i;
$falsebb5:
  assume {:partition} !v27;
  assert {:block_sourceloc} {:sourceloc_num 118} true;
  goto $scanLocalMem.exit;
$truebb6:
  assume {:partition} v31;
  assert {:block_sourceloc} {:sourceloc_num 119} true;
  goto $if.then.53;
$falsebb6:
  assume {:partition} !v31;
  assert {:block_sourceloc} {:sourceloc_num 120} true;
  goto $if.end.86;
$truebb7:
  assume {:partition} v52;
  assert {:block_sourceloc} {:sourceloc_num 121} true;
  goto $if.then.91;
$falsebb7:
  assume {:partition} !v52;
  assert {:block_sourceloc} {:sourceloc_num 122} true;
  goto $if.end.102;
$truebb8:
  assume {:partition} v53;
  assert {:block_sourceloc} {:sourceloc_num 123} true;
  goto $for.body.95;
$falsebb8:
  assume {:partition} !v53;
  assert {:block_sourceloc} {:sourceloc_num 124} true;
  goto $for.end.101;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 256bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 64bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_x == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_y == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_z == 0bv32 then 1bv1 else 0bv1) != 0bv1;
