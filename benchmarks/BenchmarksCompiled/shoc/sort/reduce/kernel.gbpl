type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "in"} {:global} $$in : [bv32]bv32;
axiom {:array_info "$$in"} {:global} {:elem_width 32} {:source_name "in"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$in : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$in : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$in : bool;

var {:source_name "isums"} {:global} $$isums : [bv32]bv32;
axiom {:array_info "$$isums"} {:global} {:elem_width 32} {:source_name "isums"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$isums : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$isums : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$isums : bool;

var {:source_name "lmem"} {:group_shared} $$lmem : [bv32]bv32;
axiom {:array_info "$$lmem"} {:group_shared} {:elem_width 32} {:source_name "lmem"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$lmem : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$lmem : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$lmem : bool;

var {:source_name "digit_counts"} $$digit_counts : [bv32]bv32;
axiom {:array_info "$$digit_counts"} {:elem_width 32} {:source_name "digit_counts"} {:source_elem_width 32} {:source_dimensions "16"} true;

const _WATCHED_OFFSET : bv32;
const {:global_offset_x} global_offset_x : bv32;
const {:global_offset_y} global_offset_y : bv32;
const {:global_offset_z} global_offset_z : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvand"} BV32_AND(bv32, bv32) : bv32;
function {:bvbuiltin "bvlshr"} BV32_LSHR(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvsdiv"} BV32_SDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvugt"} BV32_UGT(bv32, bv32) : bool;
function {:bvbuiltin "bvult"} BV32_ULT(bv32, bv32) : bool;
function {:bvbuiltin "bvxor"} BV1_XOR(bv1, bv1) : bv1;
procedure {:source_name "reduce"} {:kernel} $reduce($n:bv32, $shift:bv32)
requires {:sourceloc_num 0} (if $n == 262144bv32 then 1bv1 else 0bv1) != 0bv1;
{
  var $cond:bv32;
  var $i.0:bv32;
  var $d.0:bv32;
  var $s.0:bv32;
  var v4:bool;
  var v3:bv32;
  var v2:bool;
  var v0:bv32;
  var v1:bv32;
  var v5:bv32;
  var v7:bv32;
  var v15:bv32;
  var v9:bv32;
  var v13:bv32;
  var v12:bv32;
  var v8:bool;
  var v6:bv32;
  var v14:bool;
  var v11:bool;
  var v10:bool;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  v0 := BV32_MUL(BV32_UDIV(BV32_SDIV($n, 4bv32), num_groups_x), 4bv32);
  v1 := BV32_MUL(group_id_x, v0);
  v2 := group_id_x == BV32_SUB(num_groups_x, 1bv32);
  goto $truebb, $falsebb;
$cond.true:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  $cond := $n;
  goto $cond.end;
$cond.false:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  $cond := BV32_ADD(v1, v0);
  goto $cond.end;
$cond.end:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  v3 := local_id_x;
  assert {:sourceloc} {:sourceloc_num 5} true;
  $$digit_counts[0bv32] := 0bv32;
  assert {:sourceloc} {:sourceloc_num 6} true;
  $$digit_counts[1bv32] := 0bv32;
  assert {:sourceloc} {:sourceloc_num 7} true;
  $$digit_counts[2bv32] := 0bv32;
  assert {:sourceloc} {:sourceloc_num 8} true;
  $$digit_counts[3bv32] := 0bv32;
  assert {:sourceloc} {:sourceloc_num 9} true;
  $$digit_counts[4bv32] := 0bv32;
  assert {:sourceloc} {:sourceloc_num 10} true;
  $$digit_counts[5bv32] := 0bv32;
  assert {:sourceloc} {:sourceloc_num 11} true;
  $$digit_counts[6bv32] := 0bv32;
  assert {:sourceloc} {:sourceloc_num 12} true;
  $$digit_counts[7bv32] := 0bv32;
  assert {:sourceloc} {:sourceloc_num 13} true;
  $$digit_counts[8bv32] := 0bv32;
  assert {:sourceloc} {:sourceloc_num 14} true;
  $$digit_counts[9bv32] := 0bv32;
  assert {:sourceloc} {:sourceloc_num 15} true;
  $$digit_counts[10bv32] := 0bv32;
  assert {:sourceloc} {:sourceloc_num 16} true;
  $$digit_counts[11bv32] := 0bv32;
  assert {:sourceloc} {:sourceloc_num 17} true;
  $$digit_counts[12bv32] := 0bv32;
  assert {:sourceloc} {:sourceloc_num 18} true;
  $$digit_counts[13bv32] := 0bv32;
  assert {:sourceloc} {:sourceloc_num 19} true;
  $$digit_counts[14bv32] := 0bv32;
  assert {:sourceloc} {:sourceloc_num 20} true;
  $$digit_counts[15bv32] := 0bv32;
  $i.0 := BV32_ADD(v1, v3);
  goto $while.cond;
$while.cond:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  v4 := BV32_SLT($i.0, $cond);
  goto $truebb0, $falsebb0;
$while.body:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  assert {:sourceloc} {:sourceloc_num 23} true;
  v5 := $$in[$i.0];
  v6 := BV32_AND(BV32_LSHR(v5, BV32_AND($shift, 31bv32)), 15bv32);
  assert {:sourceloc} {:sourceloc_num 24} true;
  v7 := $$digit_counts[v6];
  assert {:sourceloc} {:sourceloc_num 25} true;
  $$digit_counts[v6] := BV32_ADD(v7, 1bv32);
  $i.0 := BV32_ADD($i.0, group_size_x);
  goto $while.cond;
$while.end:
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  $d.0 := 0bv32;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  assert {:originated_from_invariant} {:sourceloc_num 28} (if (v3 != 0bv32 ==> BV1_XOR((if _WRITE_HAS_OCCURRED_$$isums then 1bv1 else 0bv1), 1bv1) == 1bv1) then 1bv1 else 0bv1) != 0bv1;
  assert {:originated_from_invariant} {:sourceloc_num 29} (if (v3 != 0bv32 ==> BV1_XOR((if _READ_HAS_OCCURRED_$$lmem then 1bv1 else 0bv1), 1bv1) == 1bv1) then 1bv1 else 0bv1) != 0bv1;
  v8 := BV32_SLT($d.0, 16bv32);
  goto $truebb1, $falsebb1;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  assert {:sourceloc} {:sourceloc_num 31} true;
  v9 := $$digit_counts[$d.0];
  assert {:sourceloc} {:sourceloc_num 32} true;
  $$lmem[v3] := v9;
  call {:sourceloc_num 33} $bugle_barrier(1bv1, 0bv1);
  $s.0 := BV32_UDIV(group_size_x, 2bv32);
  goto $for.cond.25;
$for.cond.25:
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  v10 := BV32_UGT($s.0, 0bv32);
  goto $truebb2, $falsebb2;
$for.body.27:
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  v11 := BV32_ULT(v3, $s.0);
  goto $truebb3, $falsebb3;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  assert {:sourceloc} {:sourceloc_num 37} true;
  v12 := $$lmem[BV32_ADD(v3, $s.0)];
  assert {:sourceloc} {:sourceloc_num 38} true;
  v13 := $$lmem[v3];
  assert {:sourceloc} {:sourceloc_num 39} true;
  $$lmem[v3] := BV32_ADD(v13, v12);
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 40} true;
  call {:sourceloc_num 41} $bugle_barrier(1bv1, 0bv1);
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 42} true;
  $s.0 := BV32_LSHR($s.0, 1bv32);
  goto $for.cond.25;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 43} true;
  v14 := v3 == 0bv32;
  goto $truebb4, $falsebb4;
$if.then.35:
  assert {:block_sourceloc} {:sourceloc_num 44} true;
  assert {:sourceloc} {:sourceloc_num 45} true;
  v15 := $$lmem[0bv32];
  assert {:sourceloc} {:sourceloc_num 46} true;
  $$isums[BV32_ADD(BV32_MUL($d.0, num_groups_x), group_id_x)] := v15;
  goto $if.end.42;
$if.end.42:
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  goto $for.inc.43;
$for.inc.43:
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  $d.0 := BV32_ADD($d.0, 1bv32);
  goto $for.cond;
$for.end.45:
  assert {:block_sourceloc} {:sourceloc_num 49} true;
  return;
$truebb:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 50} true;
  goto $cond.true;
$falsebb:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 51} true;
  goto $cond.false;
$truebb0:
  assume {:partition} v4;
  assert {:block_sourceloc} {:sourceloc_num 52} true;
  goto $while.body;
$falsebb0:
  assume {:partition} !v4;
  assert {:block_sourceloc} {:sourceloc_num 53} true;
  goto $while.end;
$truebb1:
  assume {:partition} v8;
  assert {:block_sourceloc} {:sourceloc_num 54} true;
  goto $for.body;
$falsebb1:
  assume {:partition} !v8;
  assert {:block_sourceloc} {:sourceloc_num 55} true;
  goto $for.end.45;
$truebb2:
  assume {:partition} v10;
  assert {:block_sourceloc} {:sourceloc_num 56} true;
  goto $for.body.27;
$falsebb2:
  assume {:partition} !v10;
  assert {:block_sourceloc} {:sourceloc_num 57} true;
  goto $for.end;
$truebb3:
  assume {:partition} v11;
  assert {:block_sourceloc} {:sourceloc_num 58} true;
  goto $if.then;
$falsebb3:
  assume {:partition} !v11;
  assert {:block_sourceloc} {:sourceloc_num 59} true;
  goto $if.end;
$truebb4:
  assume {:partition} v14;
  assert {:block_sourceloc} {:sourceloc_num 60} true;
  goto $if.then.35;
$falsebb4:
  assume {:partition} !v14;
  assert {:block_sourceloc} {:sourceloc_num 61} true;
  goto $if.end.42;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 256bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 64bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_x == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_y == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_z == 0bv32 then 1bv1 else 0bv1) != 0bv1;
