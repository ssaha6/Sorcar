type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "isums"} {:global} $$isums : [bv32]bv32;
axiom {:array_info "$$isums"} {:global} {:elem_width 32} {:source_name "isums"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$isums : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$isums : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$isums : bool;

var {:source_name "lmem"} {:group_shared} $$lmem : [bv32]bv32;
axiom {:array_info "$$lmem"} {:group_shared} {:elem_width 32} {:source_name "lmem"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$lmem : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$lmem : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$lmem : bool;

var {:source_name "s_seed"} {:group_shared} $$top_scan.s_seed : [bv32]bv32;
axiom {:array_info "$$top_scan.s_seed"} {:group_shared} {:elem_width 32} {:source_name "s_seed"} {:source_elem_width 32} {:source_dimensions "1"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$top_scan.s_seed : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$top_scan.s_seed : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$top_scan.s_seed : bool;

const _WATCHED_OFFSET : bv32;
const {:global_offset_x} global_offset_x : bv32;
const {:global_offset_y} global_offset_y : bv32;
const {:global_offset_z} global_offset_z : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "bvuge"} BV32_UGE(bv32, bv32) : bool;
function {:bvbuiltin "bvult"} BV32_ULT(bv32, bv32) : bool;
function {:bvbuiltin "bvxor"} BV1_XOR(bv1, bv1) : bv1;
procedure {:source_name "top_scan"} {:kernel} $top_scan($n:bv32)
requires {:sourceloc_num 0} (if $n == 64bv32 then 1bv1 else 0bv1) != 0bv1;
{
  var $0:bv1;
  var $d.0:bv32;
  var $val.0:bv32;
  var $i.i.0:bv32;
  var v4:bv32;
  var v0:bool;
  var v3:bv32;
  var v8:bv32;
  var v9:bv32;
  var v7:bv32;
  var v11:bv32;
  var v13:bv32;
  var v1:bool;
  var v5:bv32;
  var v2:bool;
  var v6:bool;
  var v10:bool;
  var v12:bool;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  assert {:sourceloc} {:sourceloc_num 2} true;
  $$top_scan.s_seed[0bv32] := 0bv32;
  call {:sourceloc_num 3} $bugle_barrier(1bv1, 0bv1);
  v0 := BV32_ULT(local_id_x, $n);
  goto $truebb, $falsebb;
$land.rhs:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  $0 := (if BV32_ADD(local_id_x, 1bv32) == $n then 1bv1 else 0bv1);
  goto $land.end;
$land.end:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  $d.0 := 0bv32;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  assert {:originated_from_invariant} {:sourceloc_num 7} (if (BV32_UGE(local_id_x, $n) ==> BV1_XOR((if _WRITE_HAS_OCCURRED_$$isums then 1bv1 else 0bv1), 1bv1) == 1bv1) then 1bv1 else 0bv1) != 0bv1;
  assert {:originated_from_invariant} {:sourceloc_num 8} (if (BV32_UGE(local_id_x, $n) ==> BV1_XOR((if _READ_HAS_OCCURRED_$$isums then 1bv1 else 0bv1), 1bv1) == 1bv1) then 1bv1 else 0bv1) != 0bv1;
  v1 := BV32_SLT($d.0, 16bv32);
  goto $truebb0, $falsebb0;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  v2 := BV32_ULT(local_id_x, $n);
  goto $truebb1, $falsebb1;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  assert {:sourceloc} {:sourceloc_num 11} true;
  v3 := $$isums[BV32_ADD(BV32_MUL($n, $d.0), local_id_x)];
  $val.0 := v3;
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  v4 := local_id_x;
  assert {:sourceloc} {:sourceloc_num 13} true;
  $$lmem[v4] := 0bv32;
  v5 := BV32_ADD(v4, group_size_x);
  assert {:sourceloc} {:sourceloc_num 14} true;
  $$lmem[v5] := $val.0;
  call {:sourceloc_num 15} $bugle_barrier(1bv1, 0bv1);
  $i.i.0 := 1bv32;
  goto $for.cond.i;
$for.cond.i:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  v6 := BV32_ULT($i.i.0, group_size_x);
  goto $truebb2, $falsebb2;
$for.body.i:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  assert {:sourceloc} {:sourceloc_num 18} true;
  v7 := $$lmem[BV32_SUB(v5, $i.i.0)];
  call {:sourceloc_num 19} $bugle_barrier(1bv1, 0bv1);
  assert {:sourceloc} {:sourceloc_num 20} true;
  v8 := $$lmem[v5];
  assert {:sourceloc} {:sourceloc_num 21} true;
  $$lmem[v5] := BV32_ADD(v8, v7);
  call {:sourceloc_num 22} $bugle_barrier(1bv1, 0bv1);
  $i.i.0 := BV32_MUL($i.i.0, 2bv32);
  goto $for.cond.i;
$scanLocalMem.exit:
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  assert {:sourceloc} {:sourceloc_num 24} true;
  v9 := $$lmem[BV32_SUB(v5, 1bv32)];
  v10 := BV32_ULT(local_id_x, $n);
  goto $truebb3, $falsebb3;
$if.then.21:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  assert {:sourceloc} {:sourceloc_num 26} true;
  v11 := $$top_scan.s_seed[0bv32];
  assert {:sourceloc} {:sourceloc_num 27} true;
  $$isums[BV32_ADD(BV32_MUL($n, $d.0), local_id_x)] := BV32_ADD(v9, v11);
  goto $if.end.27;
$if.end.27:
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  call {:sourceloc_num 29} $bugle_barrier(1bv1, 0bv1);
  v12 := (if $0 == 1bv1 then 1bv32 else 0bv32) != 0bv32;
  goto $truebb4, $falsebb4;
$if.then.28:
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  assert {:sourceloc} {:sourceloc_num 31} true;
  v13 := $$top_scan.s_seed[0bv32];
  assert {:sourceloc} {:sourceloc_num 32} true;
  $$top_scan.s_seed[0bv32] := BV32_ADD(v13, BV32_ADD(v9, $val.0));
  goto $if.end.31;
$if.end.31:
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  call {:sourceloc_num 34} $bugle_barrier(1bv1, 0bv1);
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  $d.0 := BV32_ADD($d.0, 1bv32);
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  return;
$truebb:
  assume {:partition} v0;
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  goto $land.rhs;
$falsebb:
  assume {:partition} !v0;
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  $0 := 0bv1;
  goto $land.end;
$truebb0:
  assume {:partition} v1;
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  goto $for.body;
$falsebb0:
  assume {:partition} !v1;
  assert {:block_sourceloc} {:sourceloc_num 40} true;
  goto $for.end;
$truebb1:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 41} true;
  goto $if.then;
$falsebb1:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 42} true;
  $val.0 := 0bv32;
  goto $if.end;
$truebb2:
  assume {:partition} v6;
  assert {:block_sourceloc} {:sourceloc_num 43} true;
  goto $for.body.i;
$falsebb2:
  assume {:partition} !v6;
  assert {:block_sourceloc} {:sourceloc_num 44} true;
  goto $scanLocalMem.exit;
$truebb3:
  assume {:partition} v10;
  assert {:block_sourceloc} {:sourceloc_num 45} true;
  goto $if.then.21;
$falsebb3:
  assume {:partition} !v10;
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  goto $if.end.27;
$truebb4:
  assume {:partition} v12;
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  goto $if.then.28;
$falsebb4:
  assume {:partition} !v12;
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  goto $if.end.31;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 256bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_x == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_y == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_z == 0bv32 then 1bv1 else 0bv1) != 0bv1;
