type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "in"} {:global} $$in : [bv32]bv32;
axiom {:array_info "$$in"} {:global} {:elem_width 32} {:source_name "in"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$in : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$in : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$in : bool;

var {:source_name "isums"} {:global} $$isums : [bv32]bv32;
axiom {:array_info "$$isums"} {:global} {:elem_width 32} {:source_name "isums"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$isums : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$isums : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$isums : bool;

var {:source_name "out"} {:global} $$out : [bv32]bv32;
axiom {:array_info "$$out"} {:global} {:elem_width 32} {:source_name "out"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$out : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$out : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$out : bool;

var {:source_name "lmem"} {:group_shared} $$lmem : [bv32]bv32;
axiom {:array_info "$$lmem"} {:group_shared} {:elem_width 32} {:source_name "lmem"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$lmem : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$lmem : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$lmem : bool;

var {:source_name "s_seed"} {:group_shared} $$bottom_scan.s_seed : [bv32]bv32;
axiom {:array_info "$$bottom_scan.s_seed"} {:group_shared} {:elem_width 32} {:source_name "s_seed"} {:source_elem_width 32} {:source_dimensions "1"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$bottom_scan.s_seed : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$bottom_scan.s_seed : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$bottom_scan.s_seed : bool;

const _WATCHED_OFFSET : bv32;
const {:global_offset_x} global_offset_x : bv32;
const {:global_offset_y} global_offset_y : bv32;
const {:global_offset_z} global_offset_z : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FADD32(bv32, bv32) : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvsdiv"} BV32_SDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvuge"} BV32_UGE(bv32, bv32) : bool;
function {:bvbuiltin "bvult"} BV32_ULT(bv32, bv32) : bool;
procedure {:source_name "bottom_scan"} {:kernel} $bottom_scan($n:bv32)
requires {:sourceloc_num 0} (if $n == 262144bv32 then 1bv1 else 0bv1) != 0bv1;
{
  var $cond:bv32;
  var $i.0:bv32;
  var $window.0:bv32;
  var $seed.0:bv32;
  var $val_4.0:bv128;
  var $val_4.1:bv128;
  var $i.i.0:bv32;
  var v17:bv32;
  var v4:bv32;
  var v9:bv32;
  var v10:bv32;
  var v11:bv32;
  var v8:bv32;
  var v2:bv32;
  var v1:bv32;
  var v0:bv32;
  var v3:bool;
  var v5:bv128;
  var v6:bool;
  var v7:bool;
  var v14:bv32;
  var v13:bv32;
  var v19:bool;
  var v12:bv32;
  var v15:bv32;
  var v16:bv32;
  var v18:bv32;
  var v21:bv32;
  var v22:bv32;
  var v20:bv32;
  var v29:bv32;
  var v27:bool;
  var v26:bv32;
  var v24:bv32;
  var v25:bv32;
  var v23:bv32;
  var v28:bool;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  v0 := BV32_SDIV($n, 4bv32);
  v1 := BV32_UDIV(v0, num_groups_x);
  v2 := BV32_MUL(group_id_x, v1);
  v3 := group_id_x == BV32_SUB(num_groups_x, 1bv32);
  goto $truebb, $falsebb;
$cond.true:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  $cond := v0;
  goto $cond.end;
$cond.false:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  $cond := BV32_ADD(v2, v1);
  goto $cond.end;
$cond.end:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  assert {:sourceloc} {:sourceloc_num 5} true;
  v4 := $$isums[group_id_x];
  havoc v5;
  $i.0, $window.0, $seed.0, $val_4.0 := BV32_ADD(v2, local_id_x), v2, v4, v5;
  goto $while.cond;
$while.cond:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 7} (if $i.0 == BV32_ADD($window.0, local_id_x) then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 8} (if (_WRITE_HAS_OCCURRED_$$out ==> BV32_UGE(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 16bv32), v2)) then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 9} (if (_WRITE_HAS_OCCURRED_$$out ==> BV32_ULT(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 16bv32), $cond)) then 1bv1 else 0bv1) != 0bv1;
  v6 := BV32_SLT($window.0, $cond);
  goto $truebb0, $falsebb0;
$while.body:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  v7 := BV32_SLT($i.0, $cond);
  goto $truebb1, $falsebb1;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  assert {:sourceloc} {:sourceloc_num 12} true;
  v8 := $$in[BV32_MUL($i.0, 4bv32)];
  assert {:sourceloc} {:sourceloc_num 13} true;
  v9 := $$in[BV32_ADD(BV32_MUL($i.0, 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 14} true;
  v10 := $$in[BV32_ADD(BV32_MUL($i.0, 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 15} true;
  v11 := $$in[BV32_ADD(BV32_MUL($i.0, 4bv32), 3bv32)];
  $val_4.1 := v11 ++ v10 ++ v9 ++ v8;
  goto $if.end;
$if.else:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  $val_4.1 := 0bv128;
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  v12 := FADD32($val_4.1[64:32], $val_4.1[32:0]);
  v13 := $val_4.1[96:64];
  v14 := FADD32(v13, v12);
  v15 := $val_4.1[128:96];
  v16 := FADD32(v15, v14);
  v17 := local_id_x;
  assert {:sourceloc} {:sourceloc_num 18} true;
  $$lmem[v17] := 0bv32;
  v18 := BV32_ADD(v17, group_size_x);
  assert {:sourceloc} {:sourceloc_num 19} true;
  $$lmem[v18] := v16;
  call {:sourceloc_num 20} $bugle_barrier(1bv1, 0bv1);
  $i.i.0 := 1bv32;
  goto $for.cond.i;
$for.cond.i:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  v19 := BV32_ULT($i.i.0, group_size_x);
  goto $truebb2, $falsebb2;
$for.body.i:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  assert {:sourceloc} {:sourceloc_num 23} true;
  v20 := $$lmem[BV32_SUB(v18, $i.i.0)];
  call {:sourceloc_num 24} $bugle_barrier(1bv1, 0bv1);
  assert {:sourceloc} {:sourceloc_num 25} true;
  v21 := $$lmem[v18];
  assert {:sourceloc} {:sourceloc_num 26} true;
  $$lmem[v18] := FADD32(v21, v20);
  call {:sourceloc_num 27} $bugle_barrier(1bv1, 0bv1);
  $i.i.0 := BV32_MUL($i.i.0, 2bv32);
  goto $for.cond.i;
$scanLocalMem.exit:
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  assert {:sourceloc} {:sourceloc_num 29} true;
  v22 := $$lmem[BV32_SUB(v18, 1bv32)];
  v23 := FADD32($val_4.1[32:0], FADD32(v22, $seed.0));
  v24 := FADD32(v12, FADD32(v22, $seed.0));
  v25 := FADD32(v14, FADD32(v22, $seed.0));
  v26 := FADD32(v16, FADD32(v22, $seed.0));
  v27 := BV32_SLT($i.0, $cond);
  goto $truebb3, $falsebb3;
$if.then.38:
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  assert {:sourceloc} {:sourceloc_num 31} true;
  $$out[BV32_MUL($i.0, 4bv32)] := v23;
  assert {:sourceloc} {:sourceloc_num 32} true;
  $$out[BV32_ADD(BV32_MUL($i.0, 4bv32), 1bv32)] := v24;
  assert {:sourceloc} {:sourceloc_num 33} true;
  $$out[BV32_ADD(BV32_MUL($i.0, 4bv32), 2bv32)] := v25;
  assert {:sourceloc} {:sourceloc_num 34} true;
  $$out[BV32_ADD(BV32_MUL($i.0, 4bv32), 3bv32)] := v26;
  goto $if.end.40;
$if.end.40:
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  v28 := local_id_x == BV32_SUB(group_size_x, 1bv32);
  goto $truebb4, $falsebb4;
$if.then.45:
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  assert {:sourceloc} {:sourceloc_num 37} true;
  $$bottom_scan.s_seed[0bv32] := v26;
  goto $if.end.46;
$if.end.46:
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  call {:sourceloc_num 39} $bugle_barrier(1bv1, 0bv1);
  assert {:sourceloc} {:sourceloc_num 40} true;
  v29 := $$bottom_scan.s_seed[0bv32];
  $i.0, $window.0, $seed.0, $val_4.0 := BV32_ADD($i.0, group_size_x), BV32_ADD($window.0, group_size_x), v29, v26 ++ v25 ++ v24 ++ v23;
  goto $while.cond;
$while.end:
  assert {:block_sourceloc} {:sourceloc_num 41} true;
  return;
$truebb:
  assume {:partition} v3;
  assert {:block_sourceloc} {:sourceloc_num 42} true;
  goto $cond.true;
$falsebb:
  assume {:partition} !v3;
  assert {:block_sourceloc} {:sourceloc_num 43} true;
  goto $cond.false;
$truebb0:
  assume {:partition} v6;
  assert {:block_sourceloc} {:sourceloc_num 44} true;
  goto $while.body;
$falsebb0:
  assume {:partition} !v6;
  assert {:block_sourceloc} {:sourceloc_num 45} true;
  goto $while.end;
$truebb1:
  assume {:partition} v7;
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  goto $if.then;
$falsebb1:
  assume {:partition} !v7;
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  goto $if.else;
$truebb2:
  assume {:partition} v19;
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  goto $for.body.i;
$falsebb2:
  assume {:partition} !v19;
  assert {:block_sourceloc} {:sourceloc_num 49} true;
  goto $scanLocalMem.exit;
$truebb3:
  assume {:partition} v27;
  assert {:block_sourceloc} {:sourceloc_num 50} true;
  goto $if.then.38;
$falsebb3:
  assume {:partition} !v27;
  assert {:block_sourceloc} {:sourceloc_num 51} true;
  goto $if.end.40;
$truebb4:
  assume {:partition} v28;
  assert {:block_sourceloc} {:sourceloc_num 52} true;
  goto $if.then.45;
$falsebb4:
  assume {:partition} !v28;
  assert {:block_sourceloc} {:sourceloc_num 53} true;
  goto $if.end.46;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 256bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 64bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_x == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_y == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_z == 0bv32 then 1bv1 else 0bv1) != 0bv1;
