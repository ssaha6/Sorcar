type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "randArray"} {:global} $$randArray : [bv32]bv32;
axiom {:array_info "$$randArray"} {:global} {:elem_width 32} {:source_name "randArray"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$randArray : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$randArray : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$randArray : bool;

var {:source_name "output"} {:global} $$output : [bv32]bv32;
axiom {:array_info "$$output"} {:global} {:elem_width 32} {:source_name "output"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$output : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$output : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$output : bool;

var {:source_name "callA"} {:group_shared} $$callA : [bv32]bv32;
axiom {:array_info "$$callA"} {:group_shared} {:elem_width 32} {:source_name "callA"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$callA : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$callA : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$callA : bool;

var {:source_name "callB"} {:group_shared} $$callB : [bv32]bv32;
axiom {:array_info "$$callB"} {:group_shared} {:elem_width 32} {:source_name "callB"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$callB : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$callB : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$callB : bool;

const _WATCHED_OFFSET : bv32;
const {:global_offset_x} global_offset_x : bv32;
const {:global_offset_y} global_offset_y : bv32;
const {:global_offset_z} global_offset_z : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FADD32(bv32, bv32) : bv32;
function FDIV32(bv32, bv32) : bv32;
function FEXP32(bv32) : bv32;
function FLT32(bv32, bv32) : bool;
function FMUL32(bv32, bv32) : bv32;
function FSQRT32(bv32) : bv32;
function FSUB32(bv32, bv32) : bv32;
function SI32_TO_FP32(bv32) : bv32;
function UI32_TO_FP32(bv32) : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvsgt"} BV32_SGT(bv32, bv32) : bool;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "bvult"} BV32_ULT(bv32, bv32) : bool;
procedure {:source_name "binomial_options"} {:kernel} $binomial_options($numSteps:bv32)
{
  var $cond:bv32;
  var $cond36:bv32;
  var $cond43:bv32;
  var $cond50:bv32;
  var $j.0:bv32;
  var v1:bv32;
  var v0:bv32;
  var v5:bv32;
  var v4:bv32;
  var v3:bv32;
  var v2:bv32;
  var v15:bv32;
  var v16:bv32;
  var v17:bv32;
  var v50:bv32;
  var v52:bv32;
  var v54:bv32;
  var v49:bv32;
  var v51:bv32;
  var v55:bv32;
  var v56:bv32;
  var v9:bv32;
  var v10:bv32;
  var v6:bv32;
  var v11:bv32;
  var v13:bv32;
  var v7:bv32;
  var v8:bv32;
  var v12:bv32;
  var v14:bv32;
  var v41:bv32;
  var v42:bv32;
  var v43:bv32;
  var v21:bv32;
  var v27:bv32;
  var v23:bv32;
  var v18:bv32;
  var v26:bv32;
  var v19:bv32;
  var v29:bv32;
  var v28:bv32;
  var v24:bv32;
  var v22:bv32;
  var v20:bv32;
  var v25:bv32;
  var v30:bv32;
  var v31:bv32;
  var v35:bv32;
  var v32:bv32;
  var v33:bv32;
  var v37:bv32;
  var v34:bv32;
  var v38:bv32;
  var v36:bv32;
  var v40:bv32;
  var v39:bv32;
  var v46:bv32;
  var v44:bv32;
  var v45:bv32;
  var v48:bool;
  var v47:bv32;
  var v53:bool;
  var v58:bool;
  var v60:bv32;
  var v61:bv32;
  var v62:bv32;
  var v59:bv32;
  var v57:bv32;
  var v71:bv32;
  var v67:bv32;
  var v73:bv32;
  var v70:bv32;
  var v72:bv32;
  var v64:bv32;
  var v65:bv32;
  var v66:bv32;
  var v80:bv32;
  var v75:bv32;
  var v76:bv32;
  var v74:bv32;
  var v77:bv32;
  var v79:bv32;
  var v78:bool;
  var v63:bool;
  var v68:bool;
  var v69:bool;
  var v87:bool;
  var v90:bv32;
  var v91:bv32;
  var v81:bv32;
  var v83:bv32;
  var v82:bv32;
  var v85:bv32;
  var v86:bv32;
  var v84:bv32;
  var v88:bv32;
  var v89:bv32;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  v0 := local_id_x;
  v1 := group_id_x;
  assert {:sourceloc} {:sourceloc_num 1} true;
  v2 := $$randArray[BV32_MUL(v1, 4bv32)];
  assert {:sourceloc} {:sourceloc_num 2} true;
  v3 := $$randArray[BV32_ADD(BV32_MUL(v1, 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 3} true;
  v4 := $$randArray[BV32_ADD(BV32_MUL(v1, 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 4} true;
  v5 := $$randArray[BV32_ADD(BV32_MUL(v1, 4bv32), 3bv32)];
  v6 := FDIV32(1065353216bv32, SI32_TO_FP32($numSteps));
  v7 := FMUL32(FADD32(FMUL32(FSUB32(1065353216bv32, v2), 1048576000bv32), FMUL32(v2, 1092616192bv32)), v6);
  v8 := FMUL32(FADD32(FMUL32(FSUB32(1065353216bv32, v3), 1048576000bv32), FMUL32(v3, 1092616192bv32)), v6);
  v9 := FMUL32(FADD32(FMUL32(FSUB32(1065353216bv32, v4), 1048576000bv32), FMUL32(v4, 1092616192bv32)), v6);
  v10 := FMUL32(FADD32(FMUL32(FSUB32(1065353216bv32, v5), 1048576000bv32), FMUL32(v5, 1092616192bv32)), v6);
  v11 := FMUL32(1050253722bv32, FSQRT32(v7));
  v12 := FMUL32(1050253722bv32, FSQRT32(v8));
  v13 := FMUL32(1050253722bv32, FSQRT32(v9));
  v14 := FMUL32(1050253722bv32, FSQRT32(v10));
  v15 := FEXP32(FMUL32(FMUL32(1017370378bv32, v7), 1069066811bv32));
  v16 := FEXP32(FMUL32(FMUL32(1017370378bv32, v8), 1069066811bv32));
  v17 := FEXP32(FMUL32(FMUL32(1017370378bv32, v9), 1069066811bv32));
  v18 := FEXP32(FMUL32(FMUL32(1017370378bv32, v10), 1069066811bv32));
  v19 := FDIV32(1065353216bv32, v15);
  v20 := FDIV32(1065353216bv32, v16);
  v21 := FDIV32(1065353216bv32, v17);
  v22 := FDIV32(1065353216bv32, v18);
  v23 := FEXP32(FMUL32(v11, 1069066811bv32));
  v24 := FEXP32(FMUL32(v12, 1069066811bv32));
  v25 := FEXP32(FMUL32(v13, 1069066811bv32));
  v26 := FEXP32(FMUL32(v14, 1069066811bv32));
  v27 := FDIV32(1065353216bv32, v23);
  v28 := FDIV32(1065353216bv32, v24);
  v29 := FDIV32(1065353216bv32, v25);
  v30 := FDIV32(1065353216bv32, v26);
  v31 := FDIV32(FSUB32(v15, v27), FSUB32(v23, v27));
  v32 := FDIV32(FSUB32(v16, v28), FSUB32(v24, v28));
  v33 := FDIV32(FSUB32(v17, v29), FSUB32(v25, v29));
  v34 := FDIV32(FSUB32(v18, v30), FSUB32(v26, v30));
  v35 := FMUL32(v31, v19);
  v36 := FMUL32(v32, v20);
  v37 := FMUL32(v33, v21);
  v38 := FMUL32(v34, v22);
  v39 := FMUL32(FSUB32(1065353216bv32, v31), v19);
  v40 := FMUL32(FSUB32(1065353216bv32, v32), v20);
  v41 := FMUL32(FSUB32(1065353216bv32, v33), v21);
  v42 := FMUL32(FSUB32(1065353216bv32, v34), v22);
  v43 := FADD32(FMUL32(1073741824bv32, UI32_TO_FP32(v0)), FSUB32(2147483648bv32, SI32_TO_FP32($numSteps)));
  v44 := FADD32(FMUL32(FADD32(FMUL32(FSUB32(1065353216bv32, v2), 1084227584bv32), FMUL32(v2, 1106247680bv32)), FEXP32(FMUL32(FMUL32(v11, v43), 1069066811bv32))), FSUB32(2147483648bv32, FADD32(FMUL32(FSUB32(1065353216bv32, v2), 1065353216bv32), FMUL32(v2, 1120403456bv32))));
  v45 := FADD32(FMUL32(FADD32(FMUL32(FSUB32(1065353216bv32, v3), 1084227584bv32), FMUL32(v3, 1106247680bv32)), FEXP32(FMUL32(FMUL32(v12, v43), 1069066811bv32))), FSUB32(2147483648bv32, FADD32(FMUL32(FSUB32(1065353216bv32, v3), 1065353216bv32), FMUL32(v3, 1120403456bv32))));
  v46 := FADD32(FMUL32(FADD32(FMUL32(FSUB32(1065353216bv32, v4), 1084227584bv32), FMUL32(v4, 1106247680bv32)), FEXP32(FMUL32(FMUL32(v13, v43), 1069066811bv32))), FSUB32(2147483648bv32, FADD32(FMUL32(FSUB32(1065353216bv32, v4), 1065353216bv32), FMUL32(v4, 1120403456bv32))));
  v47 := FADD32(FMUL32(FADD32(FMUL32(FSUB32(1065353216bv32, v5), 1084227584bv32), FMUL32(v5, 1106247680bv32)), FEXP32(FMUL32(FMUL32(v14, v43), 1069066811bv32))), FSUB32(2147483648bv32, FADD32(FMUL32(FSUB32(1065353216bv32, v5), 1065353216bv32), FMUL32(v5, 1120403456bv32))));
  v48 := FLT32(0bv32, v44);
  goto $truebb, $falsebb;
$cond.true:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  $cond := v44;
  goto $cond.end;
$cond.false:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  $cond := 0bv32;
  goto $cond.end;
$cond.end:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  assert {:sourceloc} {:sourceloc_num 8} true;
  v49 := $$callA[BV32_MUL(v0, 4bv32)];
  assert {:sourceloc} {:sourceloc_num 9} true;
  v50 := $$callA[BV32_ADD(BV32_MUL(v0, 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 10} true;
  v51 := $$callA[BV32_ADD(BV32_MUL(v0, 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 11} true;
  v52 := $$callA[BV32_ADD(BV32_MUL(v0, 4bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 12} true;
  $$callA[BV32_MUL(v0, 4bv32)] := $cond;
  assert {:sourceloc} {:sourceloc_num 13} true;
  $$callA[BV32_ADD(BV32_MUL(v0, 4bv32), 1bv32)] := v50;
  assert {:sourceloc} {:sourceloc_num 14} true;
  $$callA[BV32_ADD(BV32_MUL(v0, 4bv32), 2bv32)] := v51;
  assert {:sourceloc} {:sourceloc_num 15} true;
  $$callA[BV32_ADD(BV32_MUL(v0, 4bv32), 3bv32)] := v52;
  v53 := FLT32(0bv32, v45);
  goto $truebb0, $falsebb0;
$cond.true.33:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  $cond36 := v45;
  goto $cond.end.35;
$cond.false.34:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  $cond36 := 0bv32;
  goto $cond.end.35;
$cond.end.35:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  assert {:sourceloc} {:sourceloc_num 19} true;
  v54 := $$callA[BV32_MUL(v0, 4bv32)];
  assert {:sourceloc} {:sourceloc_num 20} true;
  v55 := $$callA[BV32_ADD(BV32_MUL(v0, 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 21} true;
  v56 := $$callA[BV32_ADD(BV32_MUL(v0, 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 22} true;
  v57 := $$callA[BV32_ADD(BV32_MUL(v0, 4bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 23} true;
  $$callA[BV32_MUL(v0, 4bv32)] := v54;
  assert {:sourceloc} {:sourceloc_num 24} true;
  $$callA[BV32_ADD(BV32_MUL(v0, 4bv32), 1bv32)] := $cond36;
  assert {:sourceloc} {:sourceloc_num 25} true;
  $$callA[BV32_ADD(BV32_MUL(v0, 4bv32), 2bv32)] := v56;
  assert {:sourceloc} {:sourceloc_num 26} true;
  $$callA[BV32_ADD(BV32_MUL(v0, 4bv32), 3bv32)] := v57;
  v58 := FLT32(0bv32, v46);
  goto $truebb1, $falsebb1;
$cond.true.40:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  $cond43 := v46;
  goto $cond.end.42;
$cond.false.41:
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  $cond43 := 0bv32;
  goto $cond.end.42;
$cond.end.42:
  assert {:block_sourceloc} {:sourceloc_num 29} true;
  assert {:sourceloc} {:sourceloc_num 30} true;
  v59 := $$callA[BV32_MUL(v0, 4bv32)];
  assert {:sourceloc} {:sourceloc_num 31} true;
  v60 := $$callA[BV32_ADD(BV32_MUL(v0, 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 32} true;
  v61 := $$callA[BV32_ADD(BV32_MUL(v0, 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 33} true;
  v62 := $$callA[BV32_ADD(BV32_MUL(v0, 4bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 34} true;
  $$callA[BV32_MUL(v0, 4bv32)] := v59;
  assert {:sourceloc} {:sourceloc_num 35} true;
  $$callA[BV32_ADD(BV32_MUL(v0, 4bv32), 1bv32)] := v60;
  assert {:sourceloc} {:sourceloc_num 36} true;
  $$callA[BV32_ADD(BV32_MUL(v0, 4bv32), 2bv32)] := $cond43;
  assert {:sourceloc} {:sourceloc_num 37} true;
  $$callA[BV32_ADD(BV32_MUL(v0, 4bv32), 3bv32)] := v62;
  v63 := FLT32(0bv32, v47);
  goto $truebb2, $falsebb2;
$cond.true.47:
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  $cond50 := v47;
  goto $cond.end.49;
$cond.false.48:
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  $cond50 := 0bv32;
  goto $cond.end.49;
$cond.end.49:
  assert {:block_sourceloc} {:sourceloc_num 40} true;
  assert {:sourceloc} {:sourceloc_num 41} true;
  v64 := $$callA[BV32_MUL(v0, 4bv32)];
  assert {:sourceloc} {:sourceloc_num 42} true;
  v65 := $$callA[BV32_ADD(BV32_MUL(v0, 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 43} true;
  v66 := $$callA[BV32_ADD(BV32_MUL(v0, 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 44} true;
  v67 := $$callA[BV32_ADD(BV32_MUL(v0, 4bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 45} true;
  $$callA[BV32_MUL(v0, 4bv32)] := v64;
  assert {:sourceloc} {:sourceloc_num 46} true;
  $$callA[BV32_ADD(BV32_MUL(v0, 4bv32), 1bv32)] := v65;
  assert {:sourceloc} {:sourceloc_num 47} true;
  $$callA[BV32_ADD(BV32_MUL(v0, 4bv32), 2bv32)] := v66;
  assert {:sourceloc} {:sourceloc_num 48} true;
  $$callA[BV32_ADD(BV32_MUL(v0, 4bv32), 3bv32)] := $cond50;
  call {:sourceloc_num 49} $bugle_barrier(1bv1, 0bv1);
  $j.0 := $numSteps;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 50} true;
  v68 := BV32_SGT($j.0, 0bv32);
  goto $truebb3, $falsebb3;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 51} true;
  v69 := BV32_ULT(v0, $j.0);
  goto $truebb4, $falsebb4;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 52} true;
  assert {:sourceloc} {:sourceloc_num 53} true;
  v70 := $$callA[BV32_MUL(v0, 4bv32)];
  assert {:sourceloc} {:sourceloc_num 54} true;
  v71 := $$callA[BV32_ADD(BV32_MUL(v0, 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 55} true;
  v72 := $$callA[BV32_ADD(BV32_MUL(v0, 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 56} true;
  v73 := $$callA[BV32_ADD(BV32_MUL(v0, 4bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 57} true;
  v74 := $$callA[BV32_MUL(BV32_ADD(v0, 1bv32), 4bv32)];
  assert {:sourceloc} {:sourceloc_num 58} true;
  v75 := $$callA[BV32_ADD(BV32_MUL(BV32_ADD(v0, 1bv32), 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 59} true;
  v76 := $$callA[BV32_ADD(BV32_MUL(BV32_ADD(v0, 1bv32), 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 60} true;
  v77 := $$callA[BV32_ADD(BV32_MUL(BV32_ADD(v0, 1bv32), 4bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 61} true;
  $$callB[BV32_MUL(v0, 4bv32)] := FADD32(FMUL32(v35, v70), FMUL32(v39, v74));
  assert {:sourceloc} {:sourceloc_num 62} true;
  $$callB[BV32_ADD(BV32_MUL(v0, 4bv32), 1bv32)] := FADD32(FMUL32(v36, v71), FMUL32(v40, v75));
  assert {:sourceloc} {:sourceloc_num 63} true;
  $$callB[BV32_ADD(BV32_MUL(v0, 4bv32), 2bv32)] := FADD32(FMUL32(v37, v72), FMUL32(v41, v76));
  assert {:sourceloc} {:sourceloc_num 64} true;
  $$callB[BV32_ADD(BV32_MUL(v0, 4bv32), 3bv32)] := FADD32(FMUL32(v38, v73), FMUL32(v42, v77));
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 65} true;
  call {:sourceloc_num 66} $bugle_barrier(1bv1, 0bv1);
  v78 := BV32_ULT(v0, BV32_SUB($j.0, 1bv32));
  goto $truebb5, $falsebb5;
$if.then.64:
  assert {:block_sourceloc} {:sourceloc_num 67} true;
  assert {:sourceloc} {:sourceloc_num 68} true;
  v79 := $$callB[BV32_MUL(v0, 4bv32)];
  assert {:sourceloc} {:sourceloc_num 69} true;
  v80 := $$callB[BV32_ADD(BV32_MUL(v0, 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 70} true;
  v81 := $$callB[BV32_ADD(BV32_MUL(v0, 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 71} true;
  v82 := $$callB[BV32_ADD(BV32_MUL(v0, 4bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 72} true;
  v83 := $$callB[BV32_MUL(BV32_ADD(v0, 1bv32), 4bv32)];
  assert {:sourceloc} {:sourceloc_num 73} true;
  v84 := $$callB[BV32_ADD(BV32_MUL(BV32_ADD(v0, 1bv32), 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 74} true;
  v85 := $$callB[BV32_ADD(BV32_MUL(BV32_ADD(v0, 1bv32), 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 75} true;
  v86 := $$callB[BV32_ADD(BV32_MUL(BV32_ADD(v0, 1bv32), 4bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 76} true;
  $$callA[BV32_MUL(v0, 4bv32)] := FADD32(FMUL32(v35, v79), FMUL32(v39, v83));
  assert {:sourceloc} {:sourceloc_num 77} true;
  $$callA[BV32_ADD(BV32_MUL(v0, 4bv32), 1bv32)] := FADD32(FMUL32(v36, v80), FMUL32(v40, v84));
  assert {:sourceloc} {:sourceloc_num 78} true;
  $$callA[BV32_ADD(BV32_MUL(v0, 4bv32), 2bv32)] := FADD32(FMUL32(v37, v81), FMUL32(v41, v85));
  assert {:sourceloc} {:sourceloc_num 79} true;
  $$callA[BV32_ADD(BV32_MUL(v0, 4bv32), 3bv32)] := FADD32(FMUL32(v38, v82), FMUL32(v42, v86));
  goto $if.end.71;
$if.end.71:
  assert {:block_sourceloc} {:sourceloc_num 80} true;
  call {:sourceloc_num 81} $bugle_barrier(1bv1, 0bv1);
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 82} true;
  $j.0 := BV32_SUB($j.0, 2bv32);
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 83} true;
  v87 := v0 == 0bv32;
  goto $truebb6, $falsebb6;
$if.then.75:
  assert {:block_sourceloc} {:sourceloc_num 84} true;
  assert {:sourceloc} {:sourceloc_num 85} true;
  v88 := $$callA[0bv32];
  assert {:sourceloc} {:sourceloc_num 86} true;
  v89 := $$callA[1bv32];
  assert {:sourceloc} {:sourceloc_num 87} true;
  v90 := $$callA[2bv32];
  assert {:sourceloc} {:sourceloc_num 88} true;
  v91 := $$callA[3bv32];
  assert {:sourceloc} {:sourceloc_num 89} true;
  $$output[BV32_MUL(v1, 4bv32)] := v88;
  assert {:sourceloc} {:sourceloc_num 90} true;
  $$output[BV32_ADD(BV32_MUL(v1, 4bv32), 1bv32)] := v89;
  assert {:sourceloc} {:sourceloc_num 91} true;
  $$output[BV32_ADD(BV32_MUL(v1, 4bv32), 2bv32)] := v90;
  assert {:sourceloc} {:sourceloc_num 92} true;
  $$output[BV32_ADD(BV32_MUL(v1, 4bv32), 3bv32)] := v91;
  goto $if.end.78;
$if.end.78:
  assert {:block_sourceloc} {:sourceloc_num 93} true;
  return;
$truebb:
  assume {:partition} v48;
  assert {:block_sourceloc} {:sourceloc_num 94} true;
  goto $cond.true;
$falsebb:
  assume {:partition} !v48;
  assert {:block_sourceloc} {:sourceloc_num 95} true;
  goto $cond.false;
$truebb0:
  assume {:partition} v53;
  assert {:block_sourceloc} {:sourceloc_num 96} true;
  goto $cond.true.33;
$falsebb0:
  assume {:partition} !v53;
  assert {:block_sourceloc} {:sourceloc_num 97} true;
  goto $cond.false.34;
$truebb1:
  assume {:partition} v58;
  assert {:block_sourceloc} {:sourceloc_num 98} true;
  goto $cond.true.40;
$falsebb1:
  assume {:partition} !v58;
  assert {:block_sourceloc} {:sourceloc_num 99} true;
  goto $cond.false.41;
$truebb2:
  assume {:partition} v63;
  assert {:block_sourceloc} {:sourceloc_num 100} true;
  goto $cond.true.47;
$falsebb2:
  assume {:partition} !v63;
  assert {:block_sourceloc} {:sourceloc_num 101} true;
  goto $cond.false.48;
$truebb3:
  assume {:partition} v68;
  assert {:block_sourceloc} {:sourceloc_num 102} true;
  goto $for.body;
$falsebb3:
  assume {:partition} !v68;
  assert {:block_sourceloc} {:sourceloc_num 103} true;
  goto $for.end;
$truebb4:
  assume {:partition} v69;
  assert {:block_sourceloc} {:sourceloc_num 104} true;
  goto $if.then;
$falsebb4:
  assume {:partition} !v69;
  assert {:block_sourceloc} {:sourceloc_num 105} true;
  goto $if.end;
$truebb5:
  assume {:partition} v78;
  assert {:block_sourceloc} {:sourceloc_num 106} true;
  goto $if.then.64;
$falsebb5:
  assume {:partition} !v78;
  assert {:block_sourceloc} {:sourceloc_num 107} true;
  goto $if.end.71;
$truebb6:
  assume {:partition} v87;
  assert {:block_sourceloc} {:sourceloc_num 108} true;
  goto $if.then.75;
$falsebb6:
  assume {:partition} !v87;
  assert {:block_sourceloc} {:sourceloc_num 109} true;
  goto $if.end.78;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 255bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 64bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_x == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_y == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_z == 0bv32 then 1bv1 else 0bv1) != 0bv1;
