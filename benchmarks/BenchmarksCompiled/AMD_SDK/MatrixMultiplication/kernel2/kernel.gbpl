type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "matrixA"} {:global} $$matrixA : [bv32]bv32;
axiom {:array_info "$$matrixA"} {:global} {:elem_width 32} {:source_name "matrixA"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$matrixA : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$matrixA : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$matrixA : bool;

var {:source_name "matrixB"} {:global} $$matrixB : [bv32]bv32;
axiom {:array_info "$$matrixB"} {:global} {:elem_width 32} {:source_name "matrixB"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$matrixB : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$matrixB : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$matrixB : bool;

var {:source_name "matrixC"} {:global} $$matrixC : [bv32]bv32;
axiom {:array_info "$$matrixC"} {:global} {:elem_width 32} {:source_name "matrixC"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$matrixC : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$matrixC : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$matrixC : bool;

var {:source_name "blockA"} {:group_shared} $$blockA : [bv32]bv32;
axiom {:array_info "$$blockA"} {:group_shared} {:elem_width 32} {:source_name "blockA"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$blockA : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$blockA : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$blockA : bool;

const _WATCHED_OFFSET : bv32;
const {:global_offset_x} global_offset_x : bv32;
const {:global_offset_y} global_offset_y : bv32;
const {:global_offset_z} global_offset_z : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_id_y} group_id_y : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:local_id_y} local_id_y : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FADD32(bv32, bv32) : bv32;
function FMUL32(bv32, bv32) : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvashr"} BV32_ASHR(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvsdiv"} BV32_SDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvshl"} BV32_SHL(bv32, bv32) : bv32;
function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvult"} BV32_ULT(bv32, bv32) : bool;
procedure {:source_name "mmmKernel_local"} {:kernel} $mmmKernel_local($widthA:bv32)
{
  var $sum0.0:bv128;
  var $sum1.0:bv128;
  var $sum2.0:bv128;
  var $sum3.0:bv128;
  var $i.0:bv32;
  var $sum0.1:bv128;
  var $sum1.1:bv128;
  var $sum2.1:bv128;
  var $sum3.1:bv128;
  var $j.0:bv32;
  var v41:bv32;
  var v33:bv32;
  var v42:bv32;
  var v30:bv32;
  var v39:bv32;
  var v43:bv32;
  var v31:bv32;
  var v32:bv32;
  var v34:bv32;
  var v38:bv32;
  var v37:bv32;
  var v35:bv32;
  var v36:bv32;
  var v40:bv32;
  var v7:bv32;
  var v8:bv32;
  var v5:bv32;
  var v6:bv32;
  var v13:bv32;
  var v15:bv32;
  var v16:bv32;
  var v12:bv32;
  var v10:bv32;
  var v14:bv32;
  var v9:bv32;
  var v11:bv32;
  var v19:bv32;
  var v25:bv32;
  var v23:bv32;
  var v20:bv32;
  var v24:bv32;
  var v17:bv32;
  var v18:bv32;
  var v27:bv32;
  var v28:bv32;
  var v29:bv32;
  var v26:bv32;
  var v0:bv32;
  var v2:bv32;
  var v1:bv32;
  var v3:bool;
  var v4:bv32;
  var v21:bv32;
  var v22:bool;
  var v55:bv32;
  var v53:bv32;
  var v49:bv32;
  var v50:bv32;
  var v45:bv32;
  var v48:bv32;
  var v51:bv32;
  var v52:bv32;
  var v54:bv32;
  var v47:bv32;
  var v44:bv32;
  var v46:bv32;
  var v56:bv32;
  var v57:bv32;
  var v60:bv32;
  var v58:bv32;
  var v59:bv32;
  var v61:bv32;
  var v63:bv32;
  var v62:bv32;
  var v64:bv32;
  var v65:bv32;
  var v66:bv32;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  v0 := BV32_ADD(local_id_x, BV32_MUL(group_size_x, BV32_SHL(local_id_y, 2bv32)));
  v1 := BV32_ADD(BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x), BV32_MUL(BV32_SHL(BV32_ADD(BV32_MUL(group_id_y, group_size_y), local_id_y), 2bv32), BV32_MUL(group_size_x, num_groups_x)));
  v2 := BV32_SDIV($widthA, 4bv32);
  $sum0.0, $sum1.0, $sum2.0, $sum3.0, $i.0 := 0bv128, 0bv128, 0bv128, 0bv128, 0bv32;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  v3 := BV32_ULT($i.0, BV32_UDIV(v2, group_size_x));
  goto $truebb, $falsebb;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v4 := BV32_ADD(BV32_ADD(BV32_MUL($i.0, group_size_x), local_id_x), BV32_MUL(BV32_SHL(BV32_ADD(BV32_MUL(group_id_y, group_size_y), local_id_y), 2bv32), v2));
  assert {:sourceloc} {:sourceloc_num 3} true;
  v5 := $$matrixA[BV32_MUL(v4, 4bv32)];
  assert {:sourceloc} {:sourceloc_num 4} true;
  v6 := $$matrixA[BV32_ADD(BV32_MUL(v4, 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 5} true;
  v7 := $$matrixA[BV32_ADD(BV32_MUL(v4, 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 6} true;
  v8 := $$matrixA[BV32_ADD(BV32_MUL(v4, 4bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 7} true;
  $$blockA[BV32_MUL(v0, 4bv32)] := v5;
  assert {:sourceloc} {:sourceloc_num 8} true;
  $$blockA[BV32_ADD(BV32_MUL(v0, 4bv32), 1bv32)] := v6;
  assert {:sourceloc} {:sourceloc_num 9} true;
  $$blockA[BV32_ADD(BV32_MUL(v0, 4bv32), 2bv32)] := v7;
  assert {:sourceloc} {:sourceloc_num 10} true;
  $$blockA[BV32_ADD(BV32_MUL(v0, 4bv32), 3bv32)] := v8;
  assert {:sourceloc} {:sourceloc_num 11} true;
  v9 := $$matrixA[BV32_MUL(BV32_ADD(v4, v2), 4bv32)];
  assert {:sourceloc} {:sourceloc_num 12} true;
  v10 := $$matrixA[BV32_ADD(BV32_MUL(BV32_ADD(v4, v2), 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 13} true;
  v11 := $$matrixA[BV32_ADD(BV32_MUL(BV32_ADD(v4, v2), 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 14} true;
  v12 := $$matrixA[BV32_ADD(BV32_MUL(BV32_ADD(v4, v2), 4bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 15} true;
  $$blockA[BV32_MUL(BV32_ADD(v0, group_size_x), 4bv32)] := v9;
  assert {:sourceloc} {:sourceloc_num 16} true;
  $$blockA[BV32_ADD(BV32_MUL(BV32_ADD(v0, group_size_x), 4bv32), 1bv32)] := v10;
  assert {:sourceloc} {:sourceloc_num 17} true;
  $$blockA[BV32_ADD(BV32_MUL(BV32_ADD(v0, group_size_x), 4bv32), 2bv32)] := v11;
  assert {:sourceloc} {:sourceloc_num 18} true;
  $$blockA[BV32_ADD(BV32_MUL(BV32_ADD(v0, group_size_x), 4bv32), 3bv32)] := v12;
  assert {:sourceloc} {:sourceloc_num 19} true;
  v13 := $$matrixA[BV32_MUL(BV32_ADD(v4, BV32_MUL(2bv32, v2)), 4bv32)];
  assert {:sourceloc} {:sourceloc_num 20} true;
  v14 := $$matrixA[BV32_ADD(BV32_MUL(BV32_ADD(v4, BV32_MUL(2bv32, v2)), 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 21} true;
  v15 := $$matrixA[BV32_ADD(BV32_MUL(BV32_ADD(v4, BV32_MUL(2bv32, v2)), 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 22} true;
  v16 := $$matrixA[BV32_ADD(BV32_MUL(BV32_ADD(v4, BV32_MUL(2bv32, v2)), 4bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 23} true;
  $$blockA[BV32_MUL(BV32_ADD(v0, BV32_MUL(2bv32, group_size_x)), 4bv32)] := v13;
  assert {:sourceloc} {:sourceloc_num 24} true;
  $$blockA[BV32_ADD(BV32_MUL(BV32_ADD(v0, BV32_MUL(2bv32, group_size_x)), 4bv32), 1bv32)] := v14;
  assert {:sourceloc} {:sourceloc_num 25} true;
  $$blockA[BV32_ADD(BV32_MUL(BV32_ADD(v0, BV32_MUL(2bv32, group_size_x)), 4bv32), 2bv32)] := v15;
  assert {:sourceloc} {:sourceloc_num 26} true;
  $$blockA[BV32_ADD(BV32_MUL(BV32_ADD(v0, BV32_MUL(2bv32, group_size_x)), 4bv32), 3bv32)] := v16;
  assert {:sourceloc} {:sourceloc_num 27} true;
  v17 := $$matrixA[BV32_MUL(BV32_ADD(v4, BV32_MUL(3bv32, v2)), 4bv32)];
  assert {:sourceloc} {:sourceloc_num 28} true;
  v18 := $$matrixA[BV32_ADD(BV32_MUL(BV32_ADD(v4, BV32_MUL(3bv32, v2)), 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 29} true;
  v19 := $$matrixA[BV32_ADD(BV32_MUL(BV32_ADD(v4, BV32_MUL(3bv32, v2)), 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 30} true;
  v20 := $$matrixA[BV32_ADD(BV32_MUL(BV32_ADD(v4, BV32_MUL(3bv32, v2)), 4bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 31} true;
  $$blockA[BV32_MUL(BV32_ADD(v0, BV32_MUL(3bv32, group_size_x)), 4bv32)] := v17;
  assert {:sourceloc} {:sourceloc_num 32} true;
  $$blockA[BV32_ADD(BV32_MUL(BV32_ADD(v0, BV32_MUL(3bv32, group_size_x)), 4bv32), 1bv32)] := v18;
  assert {:sourceloc} {:sourceloc_num 33} true;
  $$blockA[BV32_ADD(BV32_MUL(BV32_ADD(v0, BV32_MUL(3bv32, group_size_x)), 4bv32), 2bv32)] := v19;
  assert {:sourceloc} {:sourceloc_num 34} true;
  $$blockA[BV32_ADD(BV32_MUL(BV32_ADD(v0, BV32_MUL(3bv32, group_size_x)), 4bv32), 3bv32)] := v20;
  call {:sourceloc_num 35} $bugle_barrier(1bv1, 0bv1);
  v21 := BV32_ADD(BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x), BV32_MUL(BV32_SHL(BV32_MUL($i.0, group_size_x), 2bv32), BV32_MUL(group_size_x, num_groups_x)));
  $sum0.1, $sum1.1, $sum2.1, $sum3.1, $j.0 := $sum0.0, $sum1.0, $sum2.0, $sum3.0, 0bv32;
  goto $for.cond.46;
$for.cond.46:
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  v22 := BV32_ULT($j.0, BV32_MUL(group_size_x, 4bv32));
  goto $truebb0, $falsebb0;
$for.body.50:
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  assert {:sourceloc} {:sourceloc_num 38} true;
  v23 := $$blockA[BV32_MUL(BV32_ADD(BV32_ASHR($j.0, 2bv32), BV32_MUL(BV32_MUL(local_id_y, 4bv32), group_size_x)), 4bv32)];
  assert {:sourceloc} {:sourceloc_num 39} true;
  v24 := $$blockA[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ASHR($j.0, 2bv32), BV32_MUL(BV32_MUL(local_id_y, 4bv32), group_size_x)), 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 40} true;
  v25 := $$blockA[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ASHR($j.0, 2bv32), BV32_MUL(BV32_MUL(local_id_y, 4bv32), group_size_x)), 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 41} true;
  v26 := $$blockA[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ASHR($j.0, 2bv32), BV32_MUL(BV32_MUL(local_id_y, 4bv32), group_size_x)), 4bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 42} true;
  v27 := $$blockA[BV32_MUL(BV32_ADD(BV32_ASHR($j.0, 2bv32), BV32_MUL(BV32_ADD(BV32_MUL(local_id_y, 4bv32), 1bv32), group_size_x)), 4bv32)];
  assert {:sourceloc} {:sourceloc_num 43} true;
  v28 := $$blockA[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ASHR($j.0, 2bv32), BV32_MUL(BV32_ADD(BV32_MUL(local_id_y, 4bv32), 1bv32), group_size_x)), 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 44} true;
  v29 := $$blockA[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ASHR($j.0, 2bv32), BV32_MUL(BV32_ADD(BV32_MUL(local_id_y, 4bv32), 1bv32), group_size_x)), 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 45} true;
  v30 := $$blockA[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ASHR($j.0, 2bv32), BV32_MUL(BV32_ADD(BV32_MUL(local_id_y, 4bv32), 1bv32), group_size_x)), 4bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 46} true;
  v31 := $$blockA[BV32_MUL(BV32_ADD(BV32_ASHR($j.0, 2bv32), BV32_MUL(BV32_ADD(BV32_MUL(local_id_y, 4bv32), 2bv32), group_size_x)), 4bv32)];
  assert {:sourceloc} {:sourceloc_num 47} true;
  v32 := $$blockA[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ASHR($j.0, 2bv32), BV32_MUL(BV32_ADD(BV32_MUL(local_id_y, 4bv32), 2bv32), group_size_x)), 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 48} true;
  v33 := $$blockA[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ASHR($j.0, 2bv32), BV32_MUL(BV32_ADD(BV32_MUL(local_id_y, 4bv32), 2bv32), group_size_x)), 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 49} true;
  v34 := $$blockA[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ASHR($j.0, 2bv32), BV32_MUL(BV32_ADD(BV32_MUL(local_id_y, 4bv32), 2bv32), group_size_x)), 4bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 50} true;
  v35 := $$blockA[BV32_MUL(BV32_ADD(BV32_ASHR($j.0, 2bv32), BV32_MUL(BV32_ADD(BV32_MUL(local_id_y, 4bv32), 3bv32), group_size_x)), 4bv32)];
  assert {:sourceloc} {:sourceloc_num 51} true;
  v36 := $$blockA[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ASHR($j.0, 2bv32), BV32_MUL(BV32_ADD(BV32_MUL(local_id_y, 4bv32), 3bv32), group_size_x)), 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 52} true;
  v37 := $$blockA[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ASHR($j.0, 2bv32), BV32_MUL(BV32_ADD(BV32_MUL(local_id_y, 4bv32), 3bv32), group_size_x)), 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 53} true;
  v38 := $$blockA[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ASHR($j.0, 2bv32), BV32_MUL(BV32_ADD(BV32_MUL(local_id_y, 4bv32), 3bv32), group_size_x)), 4bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 54} true;
  v39 := $$matrixB[BV32_MUL(BV32_ADD(v21, BV32_MUL($j.0, BV32_MUL(group_size_x, num_groups_x))), 4bv32)];
  assert {:sourceloc} {:sourceloc_num 55} true;
  v40 := $$matrixB[BV32_ADD(BV32_MUL(BV32_ADD(v21, BV32_MUL($j.0, BV32_MUL(group_size_x, num_groups_x))), 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 56} true;
  v41 := $$matrixB[BV32_ADD(BV32_MUL(BV32_ADD(v21, BV32_MUL($j.0, BV32_MUL(group_size_x, num_groups_x))), 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 57} true;
  v42 := $$matrixB[BV32_ADD(BV32_MUL(BV32_ADD(v21, BV32_MUL($j.0, BV32_MUL(group_size_x, num_groups_x))), 4bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 58} true;
  v43 := $$matrixB[BV32_MUL(BV32_ADD(v21, BV32_MUL(BV32_ADD($j.0, 1bv32), BV32_MUL(group_size_x, num_groups_x))), 4bv32)];
  assert {:sourceloc} {:sourceloc_num 59} true;
  v44 := $$matrixB[BV32_ADD(BV32_MUL(BV32_ADD(v21, BV32_MUL(BV32_ADD($j.0, 1bv32), BV32_MUL(group_size_x, num_groups_x))), 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 60} true;
  v45 := $$matrixB[BV32_ADD(BV32_MUL(BV32_ADD(v21, BV32_MUL(BV32_ADD($j.0, 1bv32), BV32_MUL(group_size_x, num_groups_x))), 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 61} true;
  v46 := $$matrixB[BV32_ADD(BV32_MUL(BV32_ADD(v21, BV32_MUL(BV32_ADD($j.0, 1bv32), BV32_MUL(group_size_x, num_groups_x))), 4bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 62} true;
  v47 := $$matrixB[BV32_MUL(BV32_ADD(v21, BV32_MUL(BV32_ADD($j.0, 2bv32), BV32_MUL(group_size_x, num_groups_x))), 4bv32)];
  assert {:sourceloc} {:sourceloc_num 63} true;
  v48 := $$matrixB[BV32_ADD(BV32_MUL(BV32_ADD(v21, BV32_MUL(BV32_ADD($j.0, 2bv32), BV32_MUL(group_size_x, num_groups_x))), 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 64} true;
  v49 := $$matrixB[BV32_ADD(BV32_MUL(BV32_ADD(v21, BV32_MUL(BV32_ADD($j.0, 2bv32), BV32_MUL(group_size_x, num_groups_x))), 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 65} true;
  v50 := $$matrixB[BV32_ADD(BV32_MUL(BV32_ADD(v21, BV32_MUL(BV32_ADD($j.0, 2bv32), BV32_MUL(group_size_x, num_groups_x))), 4bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 66} true;
  v51 := $$matrixB[BV32_MUL(BV32_ADD(v21, BV32_MUL(BV32_ADD($j.0, 3bv32), BV32_MUL(group_size_x, num_groups_x))), 4bv32)];
  assert {:sourceloc} {:sourceloc_num 67} true;
  v52 := $$matrixB[BV32_ADD(BV32_MUL(BV32_ADD(v21, BV32_MUL(BV32_ADD($j.0, 3bv32), BV32_MUL(group_size_x, num_groups_x))), 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 68} true;
  v53 := $$matrixB[BV32_ADD(BV32_MUL(BV32_ADD(v21, BV32_MUL(BV32_ADD($j.0, 3bv32), BV32_MUL(group_size_x, num_groups_x))), 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 69} true;
  v54 := $$matrixB[BV32_ADD(BV32_MUL(BV32_ADD(v21, BV32_MUL(BV32_ADD($j.0, 3bv32), BV32_MUL(group_size_x, num_groups_x))), 4bv32), 3bv32)];
  v55 := $sum0.1[64:32];
  v56 := $sum0.1[96:64];
  v57 := $sum0.1[128:96];
  v58 := $sum1.1[64:32];
  v59 := $sum1.1[96:64];
  v60 := $sum1.1[128:96];
  v61 := $sum2.1[64:32];
  v62 := $sum2.1[96:64];
  v63 := $sum2.1[128:96];
  v64 := $sum3.1[64:32];
  v65 := $sum3.1[96:64];
  v66 := $sum3.1[128:96];
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 70} true;
  $sum0.1, $sum1.1, $sum2.1, $sum3.1, $j.0 := FADD32(v57, FADD32(FMUL32(v26, v54), FADD32(FMUL32(v25, v50), FADD32(FMUL32(v23, v42), FMUL32(v24, v46))))) ++ FADD32(v56, FADD32(FMUL32(v26, v53), FADD32(FMUL32(v25, v49), FADD32(FMUL32(v23, v41), FMUL32(v24, v45))))) ++ FADD32(v55, FADD32(FMUL32(v26, v52), FADD32(FMUL32(v25, v48), FADD32(FMUL32(v23, v40), FMUL32(v24, v44))))) ++ FADD32($sum0.1[32:0], FADD32(FMUL32(v26, v51), FADD32(FMUL32(v25, v47), FADD32(FMUL32(v23, v39), FMUL32(v24, v43))))), FADD32(v60, FADD32(FMUL32(v30, v54), FADD32(FMUL32(v29, v50), FADD32(FMUL32(v27, v42), FMUL32(v28, v46))))) ++ FADD32(v59, FADD32(FMUL32(v30, v53), FADD32(FMUL32(v29, v49), FADD32(FMUL32(v27, v41), FMUL32(v28, v45))))) ++ FADD32(v58, FADD32(FMUL32(v30, v52), FADD32(FMUL32(v29, v48), FADD32(FMUL32(v27, v40), FMUL32(v28, v44))))) ++ FADD32($sum1.1[32:0], FADD32(FMUL32(v30, v51), FADD32(FMUL32(v29, v47), FADD32(FMUL32(v27, v39), FMUL32(v28, v43))))), FADD32(v63, FADD32(FMUL32(v34, v54), FADD32(FMUL32(v33, v50), FADD32(FMUL32(v31, v42), FMUL32(v32, v46))))) ++ FADD32(v62, FADD32(FMUL32(v34, v53), FADD32(FMUL32(v33, v49), FADD32(FMUL32(v31, v41), FMUL32(v32, v45))))) ++ FADD32(v61, FADD32(FMUL32(v34, v52), FADD32(FMUL32(v33, v48), FADD32(FMUL32(v31, v40), FMUL32(v32, v44))))) ++ FADD32($sum2.1[32:0], FADD32(FMUL32(v34, v51), FADD32(FMUL32(v33, v47), FADD32(FMUL32(v31, v39), FMUL32(v32, v43))))), FADD32(v66, FADD32(FMUL32(v38, v54), FADD32(FMUL32(v37, v50), FADD32(FMUL32(v35, v42), FMUL32(v36, v46))))) ++ FADD32(v65, FADD32(FMUL32(v38, v53), FADD32(FMUL32(v37, v49), FADD32(FMUL32(v35, v41), FMUL32(v36, v45))))) ++ FADD32(v64, FADD32(FMUL32(v38, v52), FADD32(FMUL32(v37, v48), FADD32(FMUL32(v35, v40), FMUL32(v36, v44))))) ++ FADD32($sum3.1[32:0], FADD32(FMUL32(v38, v51), FADD32(FMUL32(v37, v47), FADD32(FMUL32(v35, v39), FMUL32(v36, v43))))), BV32_ADD($j.0, 4bv32);
  goto $for.cond.46;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 71} true;
  call {:sourceloc_num 72} $bugle_barrier(1bv1, 0bv1);
  goto $for.inc.181;
$for.inc.181:
  assert {:block_sourceloc} {:sourceloc_num 73} true;
  $sum0.0, $sum1.0, $sum2.0, $sum3.0, $i.0 := $sum0.1, $sum1.1, $sum2.1, $sum3.1, BV32_ADD($i.0, 1bv32);
  goto $for.cond;
$for.end.182:
  assert {:block_sourceloc} {:sourceloc_num 74} true;
  assert {:sourceloc} {:sourceloc_num 75} true;
  $$matrixC[BV32_MUL(v1, 4bv32)] := $sum0.0[32:0];
  assert {:sourceloc} {:sourceloc_num 76} true;
  $$matrixC[BV32_ADD(BV32_MUL(v1, 4bv32), 1bv32)] := $sum0.0[64:32];
  assert {:sourceloc} {:sourceloc_num 77} true;
  $$matrixC[BV32_ADD(BV32_MUL(v1, 4bv32), 2bv32)] := $sum0.0[96:64];
  assert {:sourceloc} {:sourceloc_num 78} true;
  $$matrixC[BV32_ADD(BV32_MUL(v1, 4bv32), 3bv32)] := $sum0.0[128:96];
  assert {:sourceloc} {:sourceloc_num 79} true;
  $$matrixC[BV32_MUL(BV32_ADD(v1, BV32_MUL(group_size_x, num_groups_x)), 4bv32)] := $sum1.0[32:0];
  assert {:sourceloc} {:sourceloc_num 80} true;
  $$matrixC[BV32_ADD(BV32_MUL(BV32_ADD(v1, BV32_MUL(group_size_x, num_groups_x)), 4bv32), 1bv32)] := $sum1.0[64:32];
  assert {:sourceloc} {:sourceloc_num 81} true;
  $$matrixC[BV32_ADD(BV32_MUL(BV32_ADD(v1, BV32_MUL(group_size_x, num_groups_x)), 4bv32), 2bv32)] := $sum1.0[96:64];
  assert {:sourceloc} {:sourceloc_num 82} true;
  $$matrixC[BV32_ADD(BV32_MUL(BV32_ADD(v1, BV32_MUL(group_size_x, num_groups_x)), 4bv32), 3bv32)] := $sum1.0[128:96];
  assert {:sourceloc} {:sourceloc_num 83} true;
  $$matrixC[BV32_MUL(BV32_ADD(v1, BV32_MUL(2bv32, BV32_MUL(group_size_x, num_groups_x))), 4bv32)] := $sum2.0[32:0];
  assert {:sourceloc} {:sourceloc_num 84} true;
  $$matrixC[BV32_ADD(BV32_MUL(BV32_ADD(v1, BV32_MUL(2bv32, BV32_MUL(group_size_x, num_groups_x))), 4bv32), 1bv32)] := $sum2.0[64:32];
  assert {:sourceloc} {:sourceloc_num 85} true;
  $$matrixC[BV32_ADD(BV32_MUL(BV32_ADD(v1, BV32_MUL(2bv32, BV32_MUL(group_size_x, num_groups_x))), 4bv32), 2bv32)] := $sum2.0[96:64];
  assert {:sourceloc} {:sourceloc_num 86} true;
  $$matrixC[BV32_ADD(BV32_MUL(BV32_ADD(v1, BV32_MUL(2bv32, BV32_MUL(group_size_x, num_groups_x))), 4bv32), 3bv32)] := $sum2.0[128:96];
  assert {:sourceloc} {:sourceloc_num 87} true;
  $$matrixC[BV32_MUL(BV32_ADD(v1, BV32_MUL(3bv32, BV32_MUL(group_size_x, num_groups_x))), 4bv32)] := $sum3.0[32:0];
  assert {:sourceloc} {:sourceloc_num 88} true;
  $$matrixC[BV32_ADD(BV32_MUL(BV32_ADD(v1, BV32_MUL(3bv32, BV32_MUL(group_size_x, num_groups_x))), 4bv32), 1bv32)] := $sum3.0[64:32];
  assert {:sourceloc} {:sourceloc_num 89} true;
  $$matrixC[BV32_ADD(BV32_MUL(BV32_ADD(v1, BV32_MUL(3bv32, BV32_MUL(group_size_x, num_groups_x))), 4bv32), 2bv32)] := $sum3.0[96:64];
  assert {:sourceloc} {:sourceloc_num 90} true;
  $$matrixC[BV32_ADD(BV32_MUL(BV32_ADD(v1, BV32_MUL(3bv32, BV32_MUL(group_size_x, num_groups_x))), 4bv32), 3bv32)] := $sum3.0[128:96];
  return;
$truebb:
  assume {:partition} v3;
  assert {:block_sourceloc} {:sourceloc_num 91} true;
  goto $for.body;
$falsebb:
  assume {:partition} !v3;
  assert {:block_sourceloc} {:sourceloc_num 92} true;
  goto $for.end.182;
$truebb0:
  assume {:partition} v22;
  assert {:block_sourceloc} {:sourceloc_num 93} true;
  goto $for.body.50;
$falsebb0:
  assume {:partition} !v22;
  assert {:block_sourceloc} {:sourceloc_num 94} true;
  goto $for.end;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 8bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_y == 8bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 4bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 4bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_x == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_y == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_z == 0bv32 then 1bv1 else 0bv1) != 0bv1;
