type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "in"} {:global} $$in : [bv32]bv32;
axiom {:array_info "$$in"} {:global} {:elem_width 32} {:source_name "in"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$in : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$in : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$in : bool;

var {:source_name "out"} {:global} $$out : [bv32]bv32;
axiom {:array_info "$$out"} {:global} {:elem_width 32} {:source_name "out"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$out : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$out : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$out : bool;

const _WATCHED_OFFSET : bv32;
const {:global_offset_x} global_offset_x : bv32;
const {:global_offset_y} global_offset_y : bv32;
const {:global_offset_z} global_offset_z : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_id_y} group_id_y : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:local_id_y} local_id_y : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvult"} BV32_ULT(bv32, bv32) : bool;
function {:bvbuiltin "bvurem"} BV32_UREM(bv32, bv32) : bv32;
procedure {:source_name "write_kernel"} {:kernel} $write_kernel($np:bv32, $val:bv32, $nk:bv32)
{
  var $coord.0:bv64;
  var $n.0:bv32;
  var $i.0:bv32;
  var $idx.0:bv32;
  var $coord.1:bv64;
  var v0:bool;
  var v1:bool;
  var v2:bool;
  var v3:bv32;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  v0 := $nk == 0bv32;
  goto $truebb, $falsebb;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  goto $for.end.52;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  $coord.0, $n.0 := 0bv32 ++ BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x), 0bv32;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  assert {:originated_from_invariant} {:sourceloc_num 4} (if $coord.0[32:0] == BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x) then 1bv1 else 0bv1) != 0bv1;
  assert {:originated_from_invariant} {:sourceloc_num 5} (if (_WRITE_HAS_OCCURRED_$$out ==> BV32_UREM(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 16bv32), 8192bv32) == BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x)) then 1bv1 else 0bv1) != 0bv1;
  assert {:originated_from_invariant} {:sourceloc_num 6} (if (_WRITE_HAS_OCCURRED_$$out ==> BV32_UREM(BV32_UDIV(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 16bv32), BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x)), 8192bv32), BV32_MUL(group_size_y, num_groups_y)) == BV32_ADD(BV32_MUL(group_id_y, group_size_y), local_id_y)) then 1bv1 else 0bv1) != 0bv1;
  v1 := BV32_ULT($n.0, $nk);
  goto $truebb0, $falsebb0;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  $i.0, $idx.0, $coord.1 := 0bv32, BV32_ADD(BV32_MUL(group_id_y, group_size_y), local_id_y), $coord.0;
  goto $for.cond.26;
$for.cond.26:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  assert {:originated_from_invariant} {:sourceloc_num 9} (if $coord.1[32:0] == BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x) then 1bv1 else 0bv1) != 0bv1;
  assert {:originated_from_invariant} {:sourceloc_num 10} (if (_WRITE_HAS_OCCURRED_$$out ==> BV32_UREM(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 16bv32), 8192bv32) == BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x)) then 1bv1 else 0bv1) != 0bv1;
  assert {:originated_from_invariant} {:sourceloc_num 11} (if (_WRITE_HAS_OCCURRED_$$out ==> BV32_UREM(BV32_UDIV(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 16bv32), BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x)), 8192bv32), BV32_MUL(group_size_y, num_groups_y)) == BV32_ADD(BV32_MUL(group_id_y, group_size_y), local_id_y)) then 1bv1 else 0bv1) != 0bv1;
  v2 := BV32_ULT($i.0, $np);
  goto $truebb1, $falsebb1;
$for.body.48:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  v3 := $coord.1[32:0];
  assert {:sourceloc} {:sourceloc_num 13} true;
  $$out[BV32_MUL(BV32_ADD(BV32_MUL($idx.0, 8192bv32), v3), 4bv32)] := $val;
  assert {:sourceloc} {:sourceloc_num 14} true;
  $$out[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL($idx.0, 8192bv32), v3), 4bv32), 1bv32)] := $val;
  assert {:sourceloc} {:sourceloc_num 15} true;
  $$out[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL($idx.0, 8192bv32), v3), 4bv32), 2bv32)] := $val;
  assert {:sourceloc} {:sourceloc_num 16} true;
  $$out[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL($idx.0, 8192bv32), v3), 4bv32), 3bv32)] := $val;
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  $i.0, $idx.0, $coord.1 := BV32_ADD($i.0, 1bv32), BV32_ADD($idx.0, BV32_MUL(group_size_y, num_groups_y)), $idx.0 ++ v3;
  goto $for.cond.26;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  goto $for.inc.50;
$for.inc.50:
  assert {:block_sourceloc} {:sourceloc_num 19} true;
  $coord.0, $n.0 := $coord.1, BV32_ADD($n.0, 1bv32);
  goto $for.cond;
$for.end.52:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  return;
$truebb:
  assume {:partition} v0;
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  goto $if.then;
$falsebb:
  assume {:partition} !v0;
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  goto $if.end;
$truebb0:
  assume {:partition} v1;
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  goto $for.body;
$falsebb0:
  assume {:partition} !v1;
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  goto $for.end.52;
$truebb1:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  goto $for.body.48;
$falsebb1:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  goto $for.end;
}
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 64bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_y == 64bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 16bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 16bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_x == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_y == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_z == 0bv32 then 1bv1 else 0bv1) != 0bv1;
