type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP8(x : [bv32]bv8, y : bv32) returns (z : bv8, A : [bv32]bv8);
procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "inputImage"} {:global} $$inputImage : [bv32]bv8;
axiom {:array_info "$$inputImage"} {:global} {:elem_width 8} {:source_name "inputImage"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$inputImage : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$inputImage : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$inputImage : bool;

var {:source_name "outputImage"} {:global} $$outputImage : [bv32]bv8;
axiom {:array_info "$$outputImage"} {:global} {:elem_width 8} {:source_name "outputImage"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$outputImage : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$outputImage : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$outputImage : bool;

var {:source_name "iv"} {:group_shared} $$noise_uniform.iv : [bv32]bv32;
axiom {:array_info "$$noise_uniform.iv"} {:group_shared} {:elem_width 32} {:source_name "iv"} {:source_elem_width 32} {:source_dimensions "256"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$noise_uniform.iv : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$noise_uniform.iv : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$noise_uniform.iv : bool;

const _WATCHED_OFFSET : bv32;
const {:global_offset_x} global_offset_x : bv32;
const {:global_offset_y} global_offset_y : bv32;
const {:global_offset_z} global_offset_z : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_id_y} group_id_y : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:local_id_y} local_id_y : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FADD32(bv32, bv32) : bv32;
function FDIV32(bv32, bv32) : bv32;
function FLT32(bv32, bv32) : bool;
function FMUL32(bv32, bv32) : bv32;
function FP32_TO_SI32(bv32) : bv32;
function FP32_TO_UI8(bv32) : bv8;
function FSUB32(bv32, bv32) : bv32;
function SI32_TO_FP32(bv32) : bv32;
function UI8_TO_FP32(bv8) : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvand"} BV8_AND(bv8, bv8) : bv8;
function {:bvbuiltin "bvashr"} BV8_ASHR(bv8, bv8) : bv8;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvor"} BV8_OR(bv8, bv8) : bv8;
function {:bvbuiltin "bvsdiv"} BV32_SDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvsge"} BV32_SGE(bv32, bv32) : bool;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "bvxor"} BV8_XOR(bv8, bv8) : bv8;
function {:bvbuiltin "sign_extend 31"} BV1_SEXT32(bv1) : bv32;
function {:bvbuiltin "zero_extend 31"} BV1_ZEXT32(bv1) : bv32;
procedure {:source_name "noise_uniform"} {:kernel} $noise_uniform($factor:bv32)
{
  var $j.i.0:bv32;
  var $idum.addr.i.0:bv32;
  var $idum.addr.i.1:bv32;
  var v7:bv32;
  var v5:bv32;
  var v0:bv32;
  var v6:bv32;
  var v1:bv8;
  var v4:bv8;
  var v2:bv8;
  var v3:bv8;
  var v8:bv32;
  var v9:bool;
  var v10:bv32;
  var v12:bool;
  var v13:bool;
  var v11:bv32;
  var v14:bv32;
  var v19:bv32;
  var v17:bool;
  var v18:bv32;
  var v15:bv32;
  var v16:bv32;
  var v20:bv32;
  var v24:bv32;
  var v21:bv32;
  var v22:bv32;
  var v23:bv32;
  var v26:bv8;
  var v25:bv8;
  var v27:bv8;
  var v28:bv8;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  v0 := BV32_ADD(BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x), BV32_MUL(BV32_ADD(BV32_MUL(group_id_y, group_size_y), local_id_y), BV32_MUL(group_size_x, num_groups_x)));
  assert {:sourceloc} {:sourceloc_num 1} true;
  v1 := $$inputImage[BV32_MUL(v0, 4bv32)];
  assert {:sourceloc} {:sourceloc_num 2} true;
  v2 := $$inputImage[BV32_ADD(BV32_MUL(v0, 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 3} true;
  v3 := $$inputImage[BV32_ADD(BV32_MUL(v0, 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 4} true;
  v4 := $$inputImage[BV32_ADD(BV32_MUL(v0, 4bv32), 3bv32)];
  v5 := UI8_TO_FP32(v1);
  v6 := UI8_TO_FP32(v2);
  v7 := UI8_TO_FP32(v3);
  v8 := local_id_x;
  $j.i.0, $idum.addr.i.0 := 4bv32, FP32_TO_SI32(FSUB32(2147483648bv32, FDIV32(FADD32(FADD32(FADD32(v5, v6), v7), v6), 1082130432bv32)));
  goto $for.cond.i;
$for.cond.i:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  v9 := BV32_SGE($j.i.0, 0bv32);
  goto $truebb, $falsebb;
$for.body.i:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  v10 := BV32_SDIV($idum.addr.i.0, 127773bv32);
  v11 := BV32_SUB(BV32_MUL(16807bv32, BV32_SUB($idum.addr.i.0, BV32_MUL(v10, 127773bv32))), BV32_MUL(2836bv32, v10));
  v12 := BV32_SLT(v11, 0bv32);
  goto $truebb0, $falsebb0;
$if.then.i:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  $idum.addr.i.1 := BV32_ADD(v11, 2147483647bv32);
  goto $if.end.i;
$if.end.i:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  v13 := BV32_SLT($j.i.0, 4bv32);
  goto $truebb1, $falsebb1;
$if.then.6.i:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  assert {:sourceloc} {:sourceloc_num 10} true;
  $$noise_uniform.iv[BV32_ADD(BV32_MUL(4bv32, v8), $j.i.0)] := $idum.addr.i.1;
  goto $if.end.9.i;
$if.end.9.i:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  $j.i.0, $idum.addr.i.0 := BV32_ADD($j.i.0, 4294967295bv32), $idum.addr.i.1;
  goto $for.cond.i;
$for.end.i:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  assert {:sourceloc} {:sourceloc_num 13} true;
  v14 := $$noise_uniform.iv[BV32_MUL(4bv32, v8)];
  v15 := BV32_SDIV($idum.addr.i.0, 127773bv32);
  v16 := BV32_SUB(BV32_MUL(16807bv32, BV32_SUB($idum.addr.i.0, BV32_MUL(v15, 127773bv32))), BV32_MUL(2836bv32, v15));
  v17 := BV32_SLT(v16, 0bv32);
  goto $truebb2, $falsebb2;
$if.then.19.i:
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  goto $ran1.exit;
$ran1.exit:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  v18 := BV32_SDIV(v14, 536870912bv32);
  assume BV1_ZEXT32((if BV32_SGE(v18, 0bv32) then 1bv1 else 0bv1)) != 0bv32;
  assert {:sourceloc} {:sourceloc_num 16} true;
  v19 := $$noise_uniform.iv[BV32_ADD(BV32_MUL(4bv32, v8), v18)];
  v20 := FMUL32(FSUB32(FMUL32(805306368bv32, SI32_TO_FP32(v19)), 1056964608bv32), SI32_TO_FP32($factor));
  v21 := FADD32(v5, v20);
  v22 := FADD32(v6, v20);
  v23 := FADD32(v7, v20);
  v24 := FADD32(UI8_TO_FP32(v4), v20);
  v25 := BV8_ASHR(BV1_SEXT32((if FLT32(1132396544bv32, v21) then 1bv1 else 0bv1))[8:0], 7bv8);
  v26 := BV8_ASHR(BV1_SEXT32((if FLT32(1132396544bv32, v22) then 1bv1 else 0bv1))[8:0], 7bv8);
  v27 := BV8_ASHR(BV1_SEXT32((if FLT32(1132396544bv32, v23) then 1bv1 else 0bv1))[8:0], 7bv8);
  v28 := BV8_ASHR(BV1_SEXT32((if FLT32(1132396544bv32, v24) then 1bv1 else 0bv1))[8:0], 7bv8);
  assert {:sourceloc} {:sourceloc_num 17} true;
  $$outputImage[BV32_MUL(v0, 4bv32)] := BV8_OR(BV8_AND(BV8_AND(FP32_TO_UI8(v21), BV8_XOR(BV8_ASHR(BV1_SEXT32((if FLT32(v21, 0bv32) then 1bv1 else 0bv1))[8:0], 7bv8), 255bv8)), BV8_XOR(v25, 255bv8)), v25);
  assert {:sourceloc} {:sourceloc_num 18} true;
  $$outputImage[BV32_ADD(BV32_MUL(v0, 4bv32), 1bv32)] := BV8_OR(BV8_AND(BV8_AND(FP32_TO_UI8(v22), BV8_XOR(BV8_ASHR(BV1_SEXT32((if FLT32(v22, 0bv32) then 1bv1 else 0bv1))[8:0], 7bv8), 255bv8)), BV8_XOR(v26, 255bv8)), v26);
  assert {:sourceloc} {:sourceloc_num 19} true;
  $$outputImage[BV32_ADD(BV32_MUL(v0, 4bv32), 2bv32)] := BV8_OR(BV8_AND(BV8_AND(FP32_TO_UI8(v23), BV8_XOR(BV8_ASHR(BV1_SEXT32((if FLT32(v23, 0bv32) then 1bv1 else 0bv1))[8:0], 7bv8), 255bv8)), BV8_XOR(v27, 255bv8)), v27);
  assert {:sourceloc} {:sourceloc_num 20} true;
  $$outputImage[BV32_ADD(BV32_MUL(v0, 4bv32), 3bv32)] := BV8_OR(BV8_AND(BV8_AND(FP32_TO_UI8(v24), BV8_XOR(BV8_ASHR(BV1_SEXT32((if FLT32(v24, 0bv32) then 1bv1 else 0bv1))[8:0], 7bv8), 255bv8)), BV8_XOR(v28, 255bv8)), v28);
  return;
$truebb:
  assume {:partition} v9;
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  goto $for.body.i;
$falsebb:
  assume {:partition} !v9;
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  goto $for.end.i;
$truebb0:
  assume {:partition} v12;
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  goto $if.then.i;
$falsebb0:
  assume {:partition} !v12;
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  $idum.addr.i.1 := v11;
  goto $if.end.i;
$truebb1:
  assume {:partition} v13;
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  goto $if.then.6.i;
$falsebb1:
  assume {:partition} !v13;
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  goto $if.end.9.i;
$truebb2:
  assume {:partition} v17;
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  goto $if.then.19.i;
$falsebb2:
  assume {:partition} !v17;
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  goto $ran1.exit;
}
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 64bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 8bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 512bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_x == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_y == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_z == 0bv32 then 1bv1 else 0bv1) != 0bv1;
