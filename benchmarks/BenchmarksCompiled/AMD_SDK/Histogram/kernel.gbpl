type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
procedure _ATOMIC_OP8(x : [bv32]bv8, y : bv32) returns (z : bv8, A : [bv32]bv8);
var {:source_name "data"} {:global} $$data : [bv32]bv32;
axiom {:array_info "$$data"} {:global} {:elem_width 32} {:source_name "data"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$data : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$data : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$data : bool;

var {:source_name "sharedArray"} {:group_shared} $$sharedArray : [bv32]bv8;
axiom {:array_info "$$sharedArray"} {:group_shared} {:elem_width 8} {:source_name "sharedArray"} {:source_elem_width 8} {:source_dimensions "*"} true;
var {:race_checking} {:group_shared} {:elem_width 8} {:source_elem_width 8} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$sharedArray : bool;
var {:race_checking} {:group_shared} {:elem_width 8} {:source_elem_width 8} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$sharedArray : bool;
var {:race_checking} {:group_shared} {:elem_width 8} {:source_elem_width 8} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$sharedArray : bool;

var {:source_name "binResult"} {:global} $$binResult : [bv32]bv32;
axiom {:array_info "$$binResult"} {:global} {:elem_width 32} {:source_name "binResult"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$binResult : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$binResult : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$binResult : bool;

const _WATCHED_OFFSET : bv32;
const {:global_offset_x} global_offset_x : bv32;
const {:global_offset_y} global_offset_y : bv32;
const {:global_offset_z} global_offset_z : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvadd"} BV8_ADD(bv8, bv8) : bv8;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvult"} BV32_ULT(bv32, bv32) : bool;
function {:bvbuiltin "zero_extend 24"} BV8_ZEXT32(bv8) : bv32;
procedure {:source_name "histogram256"} {:kernel} $histogram256()
{
  var $i.0:bv32;
  var $i4.0:bv32;
  var $i20.0:bv32;
  var $binCount.0:bv32;
  var $j.0:bv32;
  var v2:bv32;
  var v0:bv32;
  var v1:bv32;
  var v5:bv32;
  var v7:bv8;
  var v6:bv32;
  var v8:bool;
  var v4:bool;
  var v3:bool;
  var v10:bv8;
  var v9:bool;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  v0 := local_id_x;
  v1 := group_id_x;
  v2 := group_size_x;
  $i.0 := 0bv32;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  v3 := BV32_SLT($i.0, 256bv32);
  goto $truebb, $falsebb;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  assert {:sourceloc} {:sourceloc_num 3} true;
  $$sharedArray[BV32_ADD(BV32_MUL(v0, 256bv32), $i.0)] := 0bv8;
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  $i.0 := BV32_ADD($i.0, 1bv32);
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  call {:sourceloc_num 6} $bugle_barrier(1bv1, 0bv1);
  $i4.0 := 0bv32;
  goto $for.cond.5;
$for.cond.5:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  v4 := BV32_SLT($i4.0, 256bv32);
  goto $truebb0, $falsebb0;
$for.body.7:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  assert {:sourceloc} {:sourceloc_num 9} true;
  v5 := $$data[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v1, v2), 256bv32), BV32_MUL($i4.0, v2)), v0)];
  v6 := BV32_MUL(v0, 256bv32);
  assert {:sourceloc} {:sourceloc_num 10} true;
  v7 := $$sharedArray[v6];
  assert {:sourceloc} {:sourceloc_num 11} true;
  $$sharedArray[v6] := BV8_ADD(v7, 1bv8);
  goto $for.inc.17;
$for.inc.17:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  $i4.0 := BV32_ADD($i4.0, 1bv32);
  goto $for.cond.5;
$for.end.19:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  call {:sourceloc_num 14} $bugle_barrier(1bv1, 0bv1);
  $i20.0 := 0bv32;
  goto $for.cond.21;
$for.cond.21:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  v8 := BV32_ULT($i20.0, BV32_UDIV(256bv32, v2));
  goto $truebb1, $falsebb1;
$for.body.23:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  $binCount.0, $j.0 := 0bv32, 0bv32;
  goto $for.cond.24;
$for.cond.24:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  v9 := BV32_ULT($j.0, v2);
  goto $truebb2, $falsebb2;
$for.body.26:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  assert {:sourceloc} {:sourceloc_num 19} true;
  v10 := $$sharedArray[BV32_ADD(BV32_ADD(BV32_MUL($j.0, 256bv32), BV32_MUL($i20.0, v2)), v0)];
  goto $for.inc.33;
$for.inc.33:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  $binCount.0, $j.0 := BV32_ADD($binCount.0, BV8_ZEXT32(v10)), BV32_ADD($j.0, 1bv32);
  goto $for.cond.24;
$for.end.35:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  assert {:sourceloc} {:sourceloc_num 22} true;
  $$binResult[BV32_ADD(BV32_ADD(BV32_MUL(v1, 256bv32), BV32_MUL($i20.0, v2)), v0)] := $binCount.0;
  goto $for.inc.41;
$for.inc.41:
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  $i20.0 := BV32_ADD($i20.0, 1bv32);
  goto $for.cond.21;
$for.end.43:
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  return;
$truebb:
  assume {:partition} v3;
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  goto $for.body;
$falsebb:
  assume {:partition} !v3;
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  goto $for.end;
$truebb0:
  assume {:partition} v4;
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  goto $for.body.7;
$falsebb0:
  assume {:partition} !v4;
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  goto $for.end.19;
$truebb1:
  assume {:partition} v8;
  assert {:block_sourceloc} {:sourceloc_num 29} true;
  goto $for.body.23;
$falsebb1:
  assume {:partition} !v8;
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  goto $for.end.43;
$truebb2:
  assume {:partition} v9;
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  goto $for.body.26;
$falsebb2:
  assume {:partition} !v9;
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  goto $for.end.35;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 128bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 32bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_x == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_y == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_z == 0bv32 then 1bv1 else 0bv1) != 0bv1;
