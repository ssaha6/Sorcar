type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "inSignal"} {:global} $$inSignal : [bv32]bv32;
axiom {:array_info "$$inSignal"} {:global} {:elem_width 32} {:source_name "inSignal"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$inSignal : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$inSignal : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$inSignal : bool;

var {:source_name "coefsSignal"} {:global} $$coefsSignal : [bv32]bv32;
axiom {:array_info "$$coefsSignal"} {:global} {:elem_width 32} {:source_name "coefsSignal"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$coefsSignal : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$coefsSignal : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$coefsSignal : bool;

var {:source_name "AverageSignal"} {:global} $$AverageSignal : [bv32]bv32;
axiom {:array_info "$$AverageSignal"} {:global} {:elem_width 32} {:source_name "AverageSignal"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$AverageSignal : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$AverageSignal : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$AverageSignal : bool;

var {:source_name "sharedArray"} {:group_shared} $$sharedArray : [bv32]bv32;
axiom {:array_info "$$sharedArray"} {:group_shared} {:elem_width 32} {:source_name "sharedArray"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$sharedArray : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$sharedArray : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$sharedArray : bool;

const _WATCHED_OFFSET : bv32;
const {:global_offset_x} global_offset_x : bv32;
const {:global_offset_y} global_offset_y : bv32;
const {:global_offset_z} global_offset_z : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FADD32(bv32, bv32) : bv32;
function FDIV32(bv32, bv32) : bv32;
function FMUL32(bv32, bv32) : bv32;
function FSQRT32(bv32) : bv32;
function FSUB32(bv32, bv32) : bv32;
function UI32_TO_FP32(bv32) : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvand"} BV32_AND(bv32, bv32) : bv32;
function {:bvbuiltin "bvlshr"} BV32_LSHR(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvsdiv"} BV32_SDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvshl"} BV32_SHL(bv32, bv32) : bv32;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvuge"} BV32_UGE(bv32, bv32) : bool;
function {:bvbuiltin "bvugt"} BV32_UGT(bv32, bv32) : bool;
function {:bvbuiltin "bvult"} BV32_ULT(bv32, bv32) : bool;
function {:bvbuiltin "bvxor"} BV1_XOR(bv1, bv1) : bv1;
procedure {:source_name "dwtHaar1D"} {:kernel} $dwtHaar1D($tLevels:bv32, $signalLength:bv32, $levelsDone:bv32, $mLevels:bv32)
requires {:sourceloc_num 0} (if $signalLength == 1024bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 1} (if $tLevels == 6bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 2} (if $mLevels == 8bv32 then 1bv1 else 0bv1) != 0bv1;
{
  var $t0.0:bv32;
  var $t1.0:bv32;
  var $cond:bv32;
  var $activeThreads.0:bv32;
  var $midOutPos.0:bv32;
  var $i.0:bv32;
  var $data0.0:bv32;
  var $data1.0:bv32;
  var $data0.1:bv32;
  var $data1.1:bv32;
  var $midOutPos.1:bv32;
  var v0:bv32;
  var v1:bv32;
  var v2:bv32;
  var v3:bv32;
  var v4:bv32;
  var v5:bool;
  var v6:bv32;
  var v13:bv32;
  var v14:bv32;
  var v17:bv32;
  var v8:bv32;
  var v7:bool;
  var v9:bv32;
  var v10:bv32;
  var v11:bool;
  var v12:bool;
  var v15:bool;
  var v16:bool;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  v0 := local_id_x;
  v1 := group_id_x;
  v2 := group_size_x;
  assert {:sourceloc} {:sourceloc_num 4} true;
  v3 := $$inSignal[BV32_ADD(BV32_MUL(BV32_MUL(v1, v2), 2bv32), v0)];
  assert {:sourceloc} {:sourceloc_num 5} true;
  v4 := $$inSignal[BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(v1, v2), 2bv32), v2), v0)];
  v5 := 0bv32 == $levelsDone;
  goto $truebb, $falsebb;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  v6 := FDIV32(1065353216bv32, FSQRT32(UI32_TO_FP32($signalLength)));
  $t0.0, $t1.0 := FMUL32(v3, v6), FMUL32(v4, v6);
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  assert {:sourceloc} {:sourceloc_num 8} true;
  $$sharedArray[v0] := $t0.0;
  assert {:sourceloc} {:sourceloc_num 9} true;
  $$sharedArray[BV32_ADD(v2, v0)] := $t1.0;
  call {:sourceloc_num 10} $bugle_barrier(1bv1, 0bv1);
  v7 := BV32_UGT($tLevels, $mLevels);
  goto $truebb0, $falsebb0;
$cond.true:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  $cond := $mLevels;
  goto $cond.end;
$cond.false:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  $cond := $tLevels;
  goto $cond.end;
$cond.end:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  v8 := FDIV32(1065353216bv32, FSQRT32(1073741824bv32));
  havoc v9;
  havoc v10;
  $activeThreads.0, $midOutPos.0, $i.0, $data0.0, $data1.0 := BV32_SDIV(BV32_SHL(1bv32, BV32_AND($cond, 31bv32)), 2bv32), BV32_UDIV($signalLength, 2bv32), 0bv32, v9, v10;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  assert {:originated_from_invariant} {:sourceloc_num 15} (if $activeThreads.0 == BV32_SDIV(BV32_SHL(1bv32, BV32_AND(BV32_SUB($cond, $i.0), 31bv32)), 2bv32) then 1bv1 else 0bv1) != 0bv1;
  assert {:originated_from_invariant} {:sourceloc_num 16} (if (BV32_ULT(v0, $activeThreads.0) ==> $midOutPos.0 == BV32_LSHR(BV32_UDIV($signalLength, 2bv32), BV32_AND($i.0, 31bv32))) then 1bv1 else 0bv1) != 0bv1;
  assert {:originated_from_invariant} {:sourceloc_num 17} (if (_WRITE_HAS_OCCURRED_$$coefsSignal ==> BV32_UGE(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), BV32_ADD(BV32_ADD(BV32_SHL($midOutPos.0, 1bv32), BV32_MUL(v1, BV32_SHL($activeThreads.0, 1bv32))), v0))) then 1bv1 else 0bv1) != 0bv1;
  assert {:originated_from_invariant} {:sourceloc_num 18} (if (BV32_UGE(v0, 16bv32) ==> (_WRITE_HAS_OCCURRED_$$coefsSignal ==> BV32_UGE(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), BV32_ADD(BV32_ADD(512bv32, BV32_MUL(v1, 32bv32)), v0)))) then 1bv1 else 0bv1) != 0bv1;
  assert {:originated_from_invariant} {:sourceloc_num 19} (if (BV32_UGE(v0, 8bv32) ==> (_WRITE_HAS_OCCURRED_$$coefsSignal ==> BV32_UGE(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), BV32_ADD(BV32_ADD(256bv32, BV32_MUL(v1, 16bv32)), v0)))) then 1bv1 else 0bv1) != 0bv1;
  assert {:originated_from_invariant} {:sourceloc_num 20} (if (BV32_UGE(v0, 4bv32) ==> (_WRITE_HAS_OCCURRED_$$coefsSignal ==> BV32_UGE(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), BV32_ADD(BV32_ADD(128bv32, BV32_MUL(v1, 8bv32)), v0)))) then 1bv1 else 0bv1) != 0bv1;
  assert {:originated_from_invariant} {:sourceloc_num 21} (if (BV32_UGE(v0, 2bv32) ==> (_WRITE_HAS_OCCURRED_$$coefsSignal ==> BV32_UGE(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), BV32_ADD(BV32_ADD(64bv32, BV32_MUL(v1, 4bv32)), v0)))) then 1bv1 else 0bv1) != 0bv1;
  assert {:originated_from_invariant} {:sourceloc_num 22} (if (BV32_UGE(v0, 1bv32) ==> (_WRITE_HAS_OCCURRED_$$coefsSignal ==> BV32_UGE(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), BV32_ADD(BV32_ADD(32bv32, BV32_MUL(v1, 2bv32)), v0)))) then 1bv1 else 0bv1) != 0bv1;
  assert {:originated_from_invariant} {:sourceloc_num 23} (if (BV32_UGE(v0, BV32_SDIV(BV32_SHL(1bv32, BV32_AND($cond, 31bv32)), 2bv32)) ==> BV1_XOR((if _WRITE_HAS_OCCURRED_$$coefsSignal then 1bv1 else 0bv1), 1bv1) == 1bv1) then 1bv1 else 0bv1) != 0bv1;
  v11 := BV32_ULT($i.0, $cond);
  goto $truebb1, $falsebb1;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  v12 := BV32_ULT(v0, $activeThreads.0);
  goto $truebb2, $falsebb2;
$if.then.118:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  assert {:sourceloc} {:sourceloc_num 26} true;
  v13 := $$sharedArray[BV32_MUL(2bv32, v0)];
  assert {:sourceloc} {:sourceloc_num 27} true;
  v14 := $$sharedArray[BV32_ADD(BV32_MUL(2bv32, v0), 1bv32)];
  $data0.1, $data1.1 := v13, v14;
  goto $if.end.124;
$if.end.124:
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  call {:sourceloc_num 29} $bugle_barrier(1bv1, 0bv1);
  v15 := BV32_ULT(v0, $activeThreads.0);
  goto $truebb3, $falsebb3;
$if.then.127:
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  assert {:sourceloc} {:sourceloc_num 31} true;
  $$sharedArray[v0] := FMUL32(FADD32($data0.1, $data1.1), v8);
  assert {:sourceloc} {:sourceloc_num 32} true;
  $$coefsSignal[BV32_ADD(BV32_ADD($midOutPos.0, BV32_MUL(v1, $activeThreads.0)), v0)] := FMUL32(FSUB32($data0.1, $data1.1), v8);
  $midOutPos.1 := BV32_LSHR($midOutPos.0, 1bv32);
  goto $if.end.138;
$if.end.138:
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  call {:sourceloc_num 34} $bugle_barrier(1bv1, 0bv1);
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  $activeThreads.0, $midOutPos.0, $i.0, $data0.0, $data1.0 := BV32_LSHR($activeThreads.0, 1bv32), $midOutPos.1, BV32_ADD($i.0, 1bv32), $data0.1, $data1.1;
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  v16 := 0bv32 == v0;
  goto $truebb4, $falsebb4;
$if.then.142:
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  assert {:sourceloc} {:sourceloc_num 38} true;
  v17 := $$sharedArray[0bv32];
  assert {:sourceloc} {:sourceloc_num 39} true;
  $$AverageSignal[v1] := v17;
  goto $if.end.145;
$if.end.145:
  assert {:block_sourceloc} {:sourceloc_num 40} true;
  return;
$truebb:
  assume {:partition} v5;
  assert {:block_sourceloc} {:sourceloc_num 41} true;
  goto $if.then;
$falsebb:
  assume {:partition} !v5;
  assert {:block_sourceloc} {:sourceloc_num 42} true;
  $t0.0, $t1.0 := v3, v4;
  goto $if.end;
$truebb0:
  assume {:partition} v7;
  assert {:block_sourceloc} {:sourceloc_num 43} true;
  goto $cond.true;
$falsebb0:
  assume {:partition} !v7;
  assert {:block_sourceloc} {:sourceloc_num 44} true;
  goto $cond.false;
$truebb1:
  assume {:partition} v11;
  assert {:block_sourceloc} {:sourceloc_num 45} true;
  goto $for.body;
$falsebb1:
  assume {:partition} !v11;
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  goto $for.end;
$truebb2:
  assume {:partition} v12;
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  goto $if.then.118;
$falsebb2:
  assume {:partition} !v12;
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  $data0.1, $data1.1 := $data0.0, $data1.0;
  goto $if.end.124;
$truebb3:
  assume {:partition} v15;
  assert {:block_sourceloc} {:sourceloc_num 49} true;
  goto $if.then.127;
$falsebb3:
  assume {:partition} !v15;
  assert {:block_sourceloc} {:sourceloc_num 50} true;
  $midOutPos.1 := $midOutPos.0;
  goto $if.end.138;
$truebb4:
  assume {:partition} v16;
  assert {:block_sourceloc} {:sourceloc_num 51} true;
  goto $if.then.142;
$falsebb4:
  assume {:partition} !v16;
  assert {:block_sourceloc} {:sourceloc_num 52} true;
  goto $if.end.145;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 512bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 2bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_x == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_y == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_z == 0bv32 then 1bv1 else 0bv1) != 0bv1;
