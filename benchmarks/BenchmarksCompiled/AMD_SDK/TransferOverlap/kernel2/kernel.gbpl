type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "in"} {:global} $$in : [bv32]bv32;
axiom {:array_info "$$in"} {:global} {:elem_width 32} {:source_name "in"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$in : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$in : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$in : bool;

var {:source_name "out"} {:global} $$out : [bv32]bv32;
axiom {:array_info "$$out"} {:global} {:elem_width 32} {:source_name "out"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$out : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$out : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$out : bool;

var {:source_name "lval"} {:group_shared} $$writeKernel.lval : [bv32]bv32;
axiom {:array_info "$$writeKernel.lval"} {:group_shared} {:elem_width 32} {:source_name "lval"} {:source_elem_width 32} {:source_dimensions "1"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$writeKernel.lval : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$writeKernel.lval : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$writeKernel.lval : bool;

const _WATCHED_OFFSET : bv32;
const {:global_offset_x} global_offset_x : bv32;
const {:global_offset_y} global_offset_y : bv32;
const {:global_offset_z} global_offset_z : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvult"} BV32_ULT(bv32, bv32) : bool;
procedure {:source_name "writeKernel"} {:kernel} $writeKernel($ni:bv32, $val:bv32, $nk:bv32)
{
  var $n.0:bv32;
  var $i.0:bv32;
  var $idx.0:bv32;
  var v0:bool;
  var v3:bv32;
  var v4:bv32;
  var v1:bv32;
  var v5:bv32;
  var v2:bv32;
  var v6:bool;
  var v7:bool;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  v0 := local_id_x == 0bv32;
  goto $truebb, $falsebb;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  assert {:sourceloc} {:sourceloc_num 2} true;
  v1 := $$in[BV32_ADD(num_groups_x, 1bv32)];
  assert {:sourceloc} {:sourceloc_num 3} true;
  $$writeKernel.lval[0bv32] := v1;
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  call {:sourceloc_num 5} $bugle_barrier(1bv1, 0bv1);
  assert {:sourceloc} {:sourceloc_num 6} true;
  v2 := $$writeKernel.lval[0bv32];
  assert {:sourceloc} {:sourceloc_num 7} true;
  v3 := $$writeKernel.lval[0bv32];
  assert {:sourceloc} {:sourceloc_num 8} true;
  v4 := $$writeKernel.lval[0bv32];
  assert {:sourceloc} {:sourceloc_num 9} true;
  v5 := $$writeKernel.lval[0bv32];
  $n.0 := 0bv32;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  v6 := BV32_ULT($n.0, $nk);
  goto $truebb0, $falsebb0;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  $i.0, $idx.0 := 0bv32, BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  goto $for.cond.7;
$for.cond.7:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  v7 := BV32_ULT($i.0, $ni);
  goto $truebb1, $falsebb1;
$for.body.9:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  assert {:sourceloc} {:sourceloc_num 14} true;
  $$out[BV32_MUL($idx.0, 4bv32)] := v2;
  assert {:sourceloc} {:sourceloc_num 15} true;
  $$out[BV32_ADD(BV32_MUL($idx.0, 4bv32), 1bv32)] := v3;
  assert {:sourceloc} {:sourceloc_num 16} true;
  $$out[BV32_ADD(BV32_MUL($idx.0, 4bv32), 2bv32)] := v4;
  assert {:sourceloc} {:sourceloc_num 17} true;
  $$out[BV32_ADD(BV32_MUL($idx.0, 4bv32), 3bv32)] := v5;
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  $i.0, $idx.0 := BV32_ADD($i.0, 1bv32), BV32_ADD($idx.0, BV32_MUL(group_size_x, num_groups_x));
  goto $for.cond.7;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 19} true;
  goto $for.inc.13;
$for.inc.13:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  $n.0 := BV32_ADD($n.0, 1bv32);
  goto $for.cond;
$for.end.15:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  return;
$truebb:
  assume {:partition} v0;
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  goto $if.then;
$falsebb:
  assume {:partition} !v0;
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  goto $if.end;
$truebb0:
  assume {:partition} v6;
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  goto $for.body;
$falsebb0:
  assume {:partition} !v6;
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  goto $for.end.15;
$truebb1:
  assume {:partition} v7;
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  goto $for.body.9;
$falsebb1:
  assume {:partition} !v7;
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  goto $for.end;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 64bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 256bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_x == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_y == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_z == 0bv32 then 1bv1 else 0bv1) != 0bv1;
