type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "output"} {:global} $$output : [bv32]bv32;
axiom {:array_info "$$output"} {:global} {:elem_width 32} {:source_name "output"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$output : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$output : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$output : bool;

var {:source_name "input"} {:global} $$input : [bv32]bv32;
axiom {:array_info "$$input"} {:global} {:elem_width 32} {:source_name "input"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$input : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$input : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$input : bool;

var {:source_name "block"} {:group_shared} $$block : [bv32]bv32;
axiom {:array_info "$$block"} {:group_shared} {:elem_width 32} {:source_name "block"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$block : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$block : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$block : bool;

const _WATCHED_OFFSET : bv32;
const {:global_offset_x} global_offset_x : bv32;
const {:global_offset_y} global_offset_y : bv32;
const {:global_offset_z} global_offset_z : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FADD32(bv32, bv32) : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvand"} BV32_AND(bv32, bv32) : bv32;
function {:bvbuiltin "bvashr"} BV32_ASHR(bv32, bv32) : bv32;
function {:bvbuiltin "bvlshr"} BV32_LSHR(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvsgt"} BV32_SGT(bv32, bv32) : bool;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "bvult"} BV32_ULT(bv32, bv32) : bool;
function {:bvbuiltin "zero_extend 31"} BV1_ZEXT32(bv1) : bv32;
procedure {:source_name "prefixSum"} {:kernel} $prefixSum($__bugle_length:bv32)
requires {:sourceloc_num 0} (if $__bugle_length == 1024bv32 then 1bv1 else 0bv1) != 0bv1;
{
  var $offset.0:bv32;
  var $d.0:bv32;
  var $offset.1:bv32;
  var $d45.0:bv32;
  var v0:bv32;
  var v1:bv32;
  var v7:bv32;
  var v6:bv32;
  var v2:bv32;
  var v15:bv32;
  var v14:bv32;
  var v18:bv32;
  var v17:bv32;
  var v16:bv32;
  var v5:bv32;
  var v4:bool;
  var v8:bool;
  var v3:bool;
  var v12:bv32;
  var v13:bv32;
  var v11:bool;
  var v10:bv32;
  var v9:bool;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  v0 := local_id_x;
  assert {:sourceloc} {:sourceloc_num 2} true;
  v1 := $$input[BV32_MUL(2bv32, v0)];
  assert {:sourceloc} {:sourceloc_num 3} true;
  $$block[BV32_MUL(2bv32, v0)] := v1;
  assert {:sourceloc} {:sourceloc_num 4} true;
  v2 := $$input[BV32_ADD(BV32_MUL(2bv32, v0), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 5} true;
  $$block[BV32_ADD(BV32_MUL(2bv32, v0), 1bv32)] := v2;
  $offset.0, $d.0 := 1bv32, BV32_LSHR($__bugle_length, 1bv32);
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  assert {:originated_from_invariant} {:sourceloc_num 7} (if (BV32_AND(BV1_ZEXT32((if $d.0 == 0bv32 then 1bv1 else 0bv1)), BV1_ZEXT32((if _WRITE_HAS_OCCURRED_$$block then 1bv1 else 0bv1))) != 0bv32 ==> v0 == 0bv32) then 1bv1 else 0bv1) != 0bv1;
  assert {:originated_from_invariant} {:sourceloc_num 8} (if (BV32_AND(BV1_ZEXT32((if $d.0 == 0bv32 then 1bv1 else 0bv1)), BV1_ZEXT32((if _READ_HAS_OCCURRED_$$block then 1bv1 else 0bv1))) != 0bv32 ==> v0 == 0bv32) then 1bv1 else 0bv1) != 0bv1;
  v3 := BV32_SGT($d.0, 0bv32);
  goto $truebb, $falsebb;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  call {:sourceloc_num 10} $bugle_barrier(1bv1, 0bv1);
  v4 := BV32_SLT(v0, $d.0);
  goto $truebb0, $falsebb0;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  v5 := BV32_SUB(BV32_MUL($offset.0, BV32_ADD(BV32_MUL(2bv32, v0), 2bv32)), 1bv32);
  assert {:sourceloc} {:sourceloc_num 12} true;
  v6 := $$block[BV32_SUB(BV32_MUL($offset.0, BV32_ADD(BV32_MUL(2bv32, v0), 1bv32)), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 13} true;
  v7 := $$block[v5];
  assert {:sourceloc} {:sourceloc_num 14} true;
  $$block[v5] := FADD32(v7, v6);
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  $offset.0, $d.0 := BV32_MUL($offset.0, 2bv32), BV32_ASHR($d.0, 1bv32);
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  v8 := v0 == 0bv32;
  goto $truebb1, $falsebb1;
$if.then.41:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  assert {:sourceloc} {:sourceloc_num 19} true;
  $$block[BV32_SUB($__bugle_length, 1bv32)] := 0bv32;
  goto $if.end.44;
$if.end.44:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  $offset.1, $d45.0 := $offset.0, 1bv32;
  goto $for.cond.46;
$for.cond.46:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  v9 := BV32_ULT($d45.0, $__bugle_length);
  goto $truebb2, $falsebb2;
$for.body.49:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  v10 := BV32_ASHR($offset.1, 1bv32);
  call {:sourceloc_num 23} $bugle_barrier(1bv1, 0bv1);
  v11 := BV32_SLT(v0, $d45.0);
  goto $truebb3, $falsebb3;
$if.then.53:
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  v12 := BV32_SUB(BV32_MUL(v10, BV32_ADD(BV32_MUL(2bv32, v0), 1bv32)), 1bv32);
  v13 := BV32_SUB(BV32_MUL(v10, BV32_ADD(BV32_MUL(2bv32, v0), 2bv32)), 1bv32);
  assert {:sourceloc} {:sourceloc_num 25} true;
  v14 := $$block[v12];
  assert {:sourceloc} {:sourceloc_num 26} true;
  v15 := $$block[v13];
  assert {:sourceloc} {:sourceloc_num 27} true;
  $$block[v12] := v15;
  assert {:sourceloc} {:sourceloc_num 28} true;
  v16 := $$block[v13];
  assert {:sourceloc} {:sourceloc_num 29} true;
  $$block[v13] := FADD32(v16, v14);
  goto $if.end.69;
$if.end.69:
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  goto $for.inc.70;
$for.inc.70:
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  $offset.1, $d45.0 := v10, BV32_MUL($d45.0, 2bv32);
  goto $for.cond.46;
$for.end.72:
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  call {:sourceloc_num 33} $bugle_barrier(1bv1, 0bv1);
  assert {:sourceloc} {:sourceloc_num 34} true;
  v17 := $$block[BV32_MUL(2bv32, v0)];
  assert {:sourceloc} {:sourceloc_num 35} true;
  $$output[BV32_MUL(2bv32, v0)] := v17;
  assert {:sourceloc} {:sourceloc_num 36} true;
  v18 := $$block[BV32_ADD(BV32_MUL(2bv32, v0), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 37} true;
  $$output[BV32_ADD(BV32_MUL(2bv32, v0), 1bv32)] := v18;
  return;
$truebb:
  assume {:partition} v3;
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  goto $for.body;
$falsebb:
  assume {:partition} !v3;
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  goto $for.end;
$truebb0:
  assume {:partition} v4;
  assert {:block_sourceloc} {:sourceloc_num 40} true;
  goto $if.then;
$falsebb0:
  assume {:partition} !v4;
  assert {:block_sourceloc} {:sourceloc_num 41} true;
  goto $if.end;
$truebb1:
  assume {:partition} v8;
  assert {:block_sourceloc} {:sourceloc_num 42} true;
  goto $if.then.41;
$falsebb1:
  assume {:partition} !v8;
  assert {:block_sourceloc} {:sourceloc_num 43} true;
  goto $if.end.44;
$truebb2:
  assume {:partition} v9;
  assert {:block_sourceloc} {:sourceloc_num 44} true;
  goto $for.body.49;
$falsebb2:
  assume {:partition} !v9;
  assert {:block_sourceloc} {:sourceloc_num 45} true;
  goto $for.end.72;
$truebb3:
  assume {:partition} v11;
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  goto $if.then.53;
$falsebb3:
  assume {:partition} !v11;
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  goto $if.end.69;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 512bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_x == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_y == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_z == 0bv32 then 1bv1 else 0bv1) != 0bv1;
