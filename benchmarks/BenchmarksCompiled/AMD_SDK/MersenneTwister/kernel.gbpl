type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "seedArray"} {:global} $$seedArray : [bv32]bv32;
axiom {:array_info "$$seedArray"} {:global} {:elem_width 32} {:source_name "seedArray"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$seedArray : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$seedArray : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$seedArray : bool;

var {:source_name "gaussianRand"} {:global} $$gaussianRand : [bv32]bv32;
axiom {:array_info "$$gaussianRand"} {:global} {:elem_width 32} {:source_name "gaussianRand"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$gaussianRand : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$gaussianRand : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$gaussianRand : bool;

var {:source_name "temp"} $$temp : [bv32]bv32;
axiom {:array_info "$$temp"} {:elem_width 32} {:source_name "temp"} {:source_elem_width 128} {:source_dimensions "8"} true;

const _WATCHED_OFFSET : bv32;
const {:global_offset_x} global_offset_x : bv32;
const {:global_offset_y} global_offset_y : bv32;
const {:global_offset_z} global_offset_z : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_id_y} group_id_y : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:local_id_y} local_id_y : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FCOS32(bv32) : bv32;
function FDIV32(bv32, bv32) : bv32;
function FLOG32(bv32) : bv32;
function FMUL32(bv32, bv32) : bv32;
function FSIN32(bv32) : bv32;
function FSQRT32(bv32) : bv32;
function UI32_TO_FP32(bv32) : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvand"} BV32_AND(bv32, bv32) : bv32;
function {:bvbuiltin "bvlshr"} BV32_LSHR(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvor"} BV32_OR(bv32, bv32) : bv32;
function {:bvbuiltin "bvshl"} BV32_SHL(bv32, bv32) : bv32;
function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvuge"} BV32_UGE(bv32, bv32) : bool;
function {:bvbuiltin "bvult"} BV32_ULT(bv32, bv32) : bool;
function {:bvbuiltin "bvxor"} BV32_XOR(bv32, bv32) : bv32;
procedure {:source_name "gaussianRand"} {:kernel} $gaussianRand($width:bv32, $mulFactor:bv32)
requires {:sourceloc_num 0} (if $width == 512bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 1} (if $mulFactor == 1024bv32 then 1bv1 else 0bv1) != 0bv1;
{
  var $r1.0:bv128;
  var $r2.0:bv128;
  var $a.0:bv128;
  var $b.0:bv128;
  var $i.0:bv32;
  var $r1.1:bv128;
  var $r2.1:bv128;
  var $a.1:bv128;
  var $b.1:bv128;
  var $i.1:bv32;
  var v0:bv32;
  var v1:bv32;
  var v6:bv128;
  var v2:bv32;
  var v3:bv32;
  var v4:bv32;
  var v5:bv32;
  var v64:bv32;
  var v21:bv128;
  var v17:bv32;
  var v18:bv32;
  var v20:bv32;
  var v19:bv32;
  var v7:bv32;
  var v8:bv32;
  var v9:bv32;
  var v10:bv32;
  var v16:bv128;
  var v11:bv128;
  var v12:bv32;
  var v15:bv32;
  var v13:bv32;
  var v14:bv32;
  var v33:bv32;
  var v28:bv32;
  var v29:bv32;
  var v34:bv32;
  var v27:bv32;
  var v35:bv32;
  var v36:bv32;
  var v31:bv32;
  var v26:bv32;
  var v37:bv32;
  var v32:bv32;
  var v30:bv32;
  var v46:bv32;
  var v38:bv32;
  var v49:bv32;
  var v50:bv32;
  var v44:bv32;
  var v39:bv32;
  var v45:bv32;
  var v43:bv32;
  var v40:bv32;
  var v47:bv32;
  var v42:bv32;
  var v41:bv32;
  var v48:bv32;
  var v62:bv32;
  var v63:bv32;
  var v54:bv32;
  var v55:bv32;
  var v56:bv32;
  var v57:bv32;
  var v60:bv32;
  var v59:bv32;
  var v51:bv32;
  var v61:bv32;
  var v52:bv32;
  var v53:bv32;
  var v58:bv32;
  var v24:bv32;
  var v25:bv32;
  var v23:bool;
  var v22:bv128;
  var v67:bv32;
  var v68:bv32;
  var v69:bv32;
  var v73:bv32;
  var v70:bv32;
  var v66:bv32;
  var v71:bv32;
  var v74:bv32;
  var v75:bv32;
  var v65:bv32;
  var v72:bv32;
  var v76:bv32;
  var v78:bv32;
  var v79:bv32;
  var v77:bv32;
  var v80:bv32;
  var v81:bv32;
  var v84:bv32;
  var v86:bv32;
  var v85:bv32;
  var v83:bv32;
  var v87:bv32;
  var v82:bv32;
  var v95:bv32;
  var v90:bv32;
  var v91:bv32;
  var v94:bv32;
  var v88:bv32;
  var v89:bv32;
  var v97:bv32;
  var v98:bv32;
  var v99:bv32;
  var v101:bv32;
  var v96:bv32;
  var v100:bv32;
  var v105:bv32;
  var v109:bv32;
  var v107:bv32;
  var v103:bv32;
  var v104:bv32;
  var v108:bv32;
  var v106:bv32;
  var v102:bv32;
  var v92:bv32;
  var v93:bool;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  v1 := BV32_ADD(BV32_MUL(group_id_y, group_size_y), local_id_y);
  assert {:sourceloc} {:sourceloc_num 3} true;
  v2 := $$seedArray[BV32_MUL(BV32_ADD(BV32_MUL(v1, $width), v0), 4bv32)];
  assert {:sourceloc} {:sourceloc_num 4} true;
  v3 := $$seedArray[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(v1, $width), v0), 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 5} true;
  v4 := $$seedArray[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(v1, $width), v0), 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 6} true;
  v5 := $$seedArray[BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(v1, $width), v0), 4bv32), 3bv32)];
  v6 := v5 ++ v4 ++ v3 ++ v2;
  v7 := BV32_ADD(BV32_MUL(1812433253bv32, BV32_XOR(v2, BV32_LSHR(v2, 30bv32))), 1bv32);
  v8 := BV32_ADD(BV32_MUL(1812433253bv32, BV32_XOR(v3, BV32_LSHR(v3, 30bv32))), 1bv32);
  v9 := BV32_ADD(BV32_MUL(1812433253bv32, BV32_XOR(v4, BV32_LSHR(v4, 30bv32))), 1bv32);
  v10 := BV32_ADD(BV32_MUL(1812433253bv32, BV32_XOR(v5, BV32_LSHR(v5, 30bv32))), 1bv32);
  v11 := v10 ++ v9 ++ v8 ++ v7;
  v12 := BV32_ADD(BV32_MUL(1812433253bv32, BV32_XOR(v7, BV32_LSHR(v7, 30bv32))), 2bv32);
  v13 := BV32_ADD(BV32_MUL(1812433253bv32, BV32_XOR(v8, BV32_LSHR(v8, 30bv32))), 2bv32);
  v14 := BV32_ADD(BV32_MUL(1812433253bv32, BV32_XOR(v9, BV32_LSHR(v9, 30bv32))), 2bv32);
  v15 := BV32_ADD(BV32_MUL(1812433253bv32, BV32_XOR(v10, BV32_LSHR(v10, 30bv32))), 2bv32);
  v16 := v15 ++ v14 ++ v13 ++ v12;
  v17 := BV32_ADD(BV32_MUL(1812433253bv32, BV32_XOR(v12, BV32_LSHR(v12, 30bv32))), 3bv32);
  v18 := BV32_ADD(BV32_MUL(1812433253bv32, BV32_XOR(v13, BV32_LSHR(v13, 30bv32))), 3bv32);
  v19 := BV32_ADD(BV32_MUL(1812433253bv32, BV32_XOR(v14, BV32_LSHR(v14, 30bv32))), 3bv32);
  v20 := BV32_ADD(BV32_MUL(1812433253bv32, BV32_XOR(v15, BV32_LSHR(v15, 30bv32))), 3bv32);
  v21 := v20 ++ v19 ++ v18 ++ v17;
  v22 := BV32_ADD(BV32_MUL(1812433253bv32, BV32_XOR(v20, BV32_LSHR(v20, 30bv32))), 4bv32) ++ BV32_ADD(BV32_MUL(1812433253bv32, BV32_XOR(v19, BV32_LSHR(v19, 30bv32))), 4bv32) ++ BV32_ADD(BV32_MUL(1812433253bv32, BV32_XOR(v18, BV32_LSHR(v18, 30bv32))), 4bv32) ++ BV32_ADD(BV32_MUL(1812433253bv32, BV32_XOR(v17, BV32_LSHR(v17, 30bv32))), 4bv32);
  $r1.0, $r2.0, $a.0, $b.0, $i.0 := 0bv128, 0bv128, 0bv128, 0bv128, 0bv32;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  v23 := BV32_ULT($i.0, $mulFactor);
  goto $truebb, $falsebb;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  goto $casebb, $casebb0, $casebb1, $casebb2, $casebb3, $casebb4, $casebb5, $casebb6, $defaultbb;
$sw.bb:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  $r1.1, $r2.1, $a.1, $b.1 := v21, v22, v6, v16;
  goto $sw.epilog;
$sw.bb.23:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  assert {:sourceloc} {:sourceloc_num 11} true;
  v24 := $$temp[0bv32];
  assert {:sourceloc} {:sourceloc_num 12} true;
  v25 := $$temp[1bv32];
  assert {:sourceloc} {:sourceloc_num 13} true;
  v26 := $$temp[2bv32];
  assert {:sourceloc} {:sourceloc_num 14} true;
  v27 := $$temp[3bv32];
  $r1.1, $r2.1, $a.1, $b.1 := $r2.0, v27 ++ v26 ++ v25 ++ v24, v11, v21;
  goto $sw.epilog;
$sw.bb.25:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  assert {:sourceloc} {:sourceloc_num 16} true;
  v28 := $$temp[4bv32];
  assert {:sourceloc} {:sourceloc_num 17} true;
  v29 := $$temp[5bv32];
  assert {:sourceloc} {:sourceloc_num 18} true;
  v30 := $$temp[6bv32];
  assert {:sourceloc} {:sourceloc_num 19} true;
  v31 := $$temp[7bv32];
  $r1.1, $r2.1, $a.1, $b.1 := $r2.0, v31 ++ v30 ++ v29 ++ v28, v16, v22;
  goto $sw.epilog;
$sw.bb.27:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  assert {:sourceloc} {:sourceloc_num 21} true;
  v32 := $$temp[8bv32];
  assert {:sourceloc} {:sourceloc_num 22} true;
  v33 := $$temp[9bv32];
  assert {:sourceloc} {:sourceloc_num 23} true;
  v34 := $$temp[10bv32];
  assert {:sourceloc} {:sourceloc_num 24} true;
  v35 := $$temp[11bv32];
  $r1.1, $r2.1, $a.1, $b.1 := $r2.0, v35 ++ v34 ++ v33 ++ v32, v21, v6;
  goto $sw.epilog;
$sw.bb.29:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  assert {:sourceloc} {:sourceloc_num 26} true;
  v36 := $$temp[12bv32];
  assert {:sourceloc} {:sourceloc_num 27} true;
  v37 := $$temp[13bv32];
  assert {:sourceloc} {:sourceloc_num 28} true;
  v38 := $$temp[14bv32];
  assert {:sourceloc} {:sourceloc_num 29} true;
  v39 := $$temp[15bv32];
  $r1.1, $r2.1, $a.1, $b.1 := $r2.0, v39 ++ v38 ++ v37 ++ v36, v22, v11;
  goto $sw.epilog;
$sw.bb.31:
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  assert {:sourceloc} {:sourceloc_num 31} true;
  v40 := $$temp[16bv32];
  assert {:sourceloc} {:sourceloc_num 32} true;
  v41 := $$temp[17bv32];
  assert {:sourceloc} {:sourceloc_num 33} true;
  v42 := $$temp[18bv32];
  assert {:sourceloc} {:sourceloc_num 34} true;
  v43 := $$temp[19bv32];
  assert {:sourceloc} {:sourceloc_num 35} true;
  v44 := $$temp[0bv32];
  assert {:sourceloc} {:sourceloc_num 36} true;
  v45 := $$temp[1bv32];
  assert {:sourceloc} {:sourceloc_num 37} true;
  v46 := $$temp[2bv32];
  assert {:sourceloc} {:sourceloc_num 38} true;
  v47 := $$temp[3bv32];
  assert {:sourceloc} {:sourceloc_num 39} true;
  v48 := $$temp[8bv32];
  assert {:sourceloc} {:sourceloc_num 40} true;
  v49 := $$temp[9bv32];
  assert {:sourceloc} {:sourceloc_num 41} true;
  v50 := $$temp[10bv32];
  assert {:sourceloc} {:sourceloc_num 42} true;
  v51 := $$temp[11bv32];
  $r1.1, $r2.1, $a.1, $b.1 := $r2.0, v43 ++ v42 ++ v41 ++ v40, v47 ++ v46 ++ v45 ++ v44, v51 ++ v50 ++ v49 ++ v48;
  goto $sw.epilog;
$sw.bb.35:
  assert {:block_sourceloc} {:sourceloc_num 43} true;
  assert {:sourceloc} {:sourceloc_num 44} true;
  v52 := $$temp[20bv32];
  assert {:sourceloc} {:sourceloc_num 45} true;
  v53 := $$temp[21bv32];
  assert {:sourceloc} {:sourceloc_num 46} true;
  v54 := $$temp[22bv32];
  assert {:sourceloc} {:sourceloc_num 47} true;
  v55 := $$temp[23bv32];
  assert {:sourceloc} {:sourceloc_num 48} true;
  v56 := $$temp[4bv32];
  assert {:sourceloc} {:sourceloc_num 49} true;
  v57 := $$temp[5bv32];
  assert {:sourceloc} {:sourceloc_num 50} true;
  v58 := $$temp[6bv32];
  assert {:sourceloc} {:sourceloc_num 51} true;
  v59 := $$temp[7bv32];
  assert {:sourceloc} {:sourceloc_num 52} true;
  v60 := $$temp[12bv32];
  assert {:sourceloc} {:sourceloc_num 53} true;
  v61 := $$temp[13bv32];
  assert {:sourceloc} {:sourceloc_num 54} true;
  v62 := $$temp[14bv32];
  assert {:sourceloc} {:sourceloc_num 55} true;
  v63 := $$temp[15bv32];
  $r1.1, $r2.1, $a.1, $b.1 := $r2.0, v55 ++ v54 ++ v53 ++ v52, v59 ++ v58 ++ v57 ++ v56, v63 ++ v62 ++ v61 ++ v60;
  goto $sw.epilog;
$sw.bb.39:
  assert {:block_sourceloc} {:sourceloc_num 56} true;
  assert {:sourceloc} {:sourceloc_num 57} true;
  v64 := $$temp[24bv32];
  assert {:sourceloc} {:sourceloc_num 58} true;
  v65 := $$temp[25bv32];
  assert {:sourceloc} {:sourceloc_num 59} true;
  v66 := $$temp[26bv32];
  assert {:sourceloc} {:sourceloc_num 60} true;
  v67 := $$temp[27bv32];
  assert {:sourceloc} {:sourceloc_num 61} true;
  v68 := $$temp[8bv32];
  assert {:sourceloc} {:sourceloc_num 62} true;
  v69 := $$temp[9bv32];
  assert {:sourceloc} {:sourceloc_num 63} true;
  v70 := $$temp[10bv32];
  assert {:sourceloc} {:sourceloc_num 64} true;
  v71 := $$temp[11bv32];
  assert {:sourceloc} {:sourceloc_num 65} true;
  v72 := $$temp[16bv32];
  assert {:sourceloc} {:sourceloc_num 66} true;
  v73 := $$temp[17bv32];
  assert {:sourceloc} {:sourceloc_num 67} true;
  v74 := $$temp[18bv32];
  assert {:sourceloc} {:sourceloc_num 68} true;
  v75 := $$temp[19bv32];
  $r1.1, $r2.1, $a.1, $b.1 := $r2.0, v67 ++ v66 ++ v65 ++ v64, v71 ++ v70 ++ v69 ++ v68, v75 ++ v74 ++ v73 ++ v72;
  goto $sw.epilog;
$sw.default:
  assert {:block_sourceloc} {:sourceloc_num 69} true;
  $r1.1, $r2.1, $a.1, $b.1 := $r1.0, $r2.0, $a.0, $b.0;
  goto $sw.epilog;
$sw.epilog:
  assert {:block_sourceloc} {:sourceloc_num 70} true;
  assert {:sourceloc} {:sourceloc_num 71} true;
  v76 := $$temp[BV32_MUL($i.0, 4bv32)];
  assert {:sourceloc} {:sourceloc_num 72} true;
  v77 := $$temp[BV32_ADD(BV32_MUL($i.0, 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 73} true;
  v78 := $$temp[BV32_ADD(BV32_MUL($i.0, 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 74} true;
  v79 := $$temp[BV32_ADD(BV32_MUL($i.0, 4bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 75} true;
  $$temp[BV32_MUL($i.0, 4bv32)] := BV32_XOR(BV32_XOR(BV32_XOR(BV32_XOR($a.1[32:0], BV32_SHL($a.1[32:0], 24bv32)), BV32_AND(BV32_LSHR($b.1[32:0], 13bv32), 4261361663bv32)), BV32_OR(BV32_LSHR($r1.1[32:0], 24bv32), BV32_SHL($r1.1[64:32], 8bv32))), BV32_SHL($r2.1[32:0], 15bv32));
  assert {:sourceloc} {:sourceloc_num 76} true;
  $$temp[BV32_ADD(BV32_MUL($i.0, 4bv32), 1bv32)] := v77;
  assert {:sourceloc} {:sourceloc_num 77} true;
  $$temp[BV32_ADD(BV32_MUL($i.0, 4bv32), 2bv32)] := v78;
  assert {:sourceloc} {:sourceloc_num 78} true;
  $$temp[BV32_ADD(BV32_MUL($i.0, 4bv32), 3bv32)] := v79;
  assert {:sourceloc} {:sourceloc_num 79} true;
  v80 := $$temp[BV32_MUL($i.0, 4bv32)];
  assert {:sourceloc} {:sourceloc_num 80} true;
  v81 := $$temp[BV32_ADD(BV32_MUL($i.0, 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 81} true;
  v82 := $$temp[BV32_ADD(BV32_MUL($i.0, 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 82} true;
  v83 := $$temp[BV32_ADD(BV32_MUL($i.0, 4bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 83} true;
  $$temp[BV32_MUL($i.0, 4bv32)] := v80;
  assert {:sourceloc} {:sourceloc_num 84} true;
  $$temp[BV32_ADD(BV32_MUL($i.0, 4bv32), 1bv32)] := BV32_XOR(BV32_XOR(BV32_XOR(BV32_XOR($a.1[64:32], BV32_OR(BV32_SHL($a.1[64:32], 24bv32), BV32_LSHR($a.1[32:0], 8bv32))), BV32_AND(BV32_LSHR($b.1[64:32], 13bv32), 4018093949bv32)), BV32_OR(BV32_LSHR($r1.1[64:32], 24bv32), BV32_SHL($r1.1[96:64], 8bv32))), BV32_SHL($r2.1[64:32], 15bv32));
  assert {:sourceloc} {:sourceloc_num 85} true;
  $$temp[BV32_ADD(BV32_MUL($i.0, 4bv32), 2bv32)] := v82;
  assert {:sourceloc} {:sourceloc_num 86} true;
  $$temp[BV32_ADD(BV32_MUL($i.0, 4bv32), 3bv32)] := v83;
  assert {:sourceloc} {:sourceloc_num 87} true;
  v84 := $$temp[BV32_MUL($i.0, 4bv32)];
  assert {:sourceloc} {:sourceloc_num 88} true;
  v85 := $$temp[BV32_ADD(BV32_MUL($i.0, 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 89} true;
  v86 := $$temp[BV32_ADD(BV32_MUL($i.0, 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 90} true;
  v87 := $$temp[BV32_ADD(BV32_MUL($i.0, 4bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 91} true;
  $$temp[BV32_MUL($i.0, 4bv32)] := v84;
  assert {:sourceloc} {:sourceloc_num 92} true;
  $$temp[BV32_ADD(BV32_MUL($i.0, 4bv32), 1bv32)] := v85;
  assert {:sourceloc} {:sourceloc_num 93} true;
  $$temp[BV32_ADD(BV32_MUL($i.0, 4bv32), 2bv32)] := BV32_XOR(BV32_XOR(BV32_XOR(BV32_XOR($a.1[96:64], BV32_OR(BV32_SHL($a.1[96:64], 24bv32), BV32_LSHR($a.1[64:32], 8bv32))), BV32_AND(BV32_LSHR($b.1[96:64], 13bv32), 4286020477bv32)), BV32_OR(BV32_LSHR($r1.1[96:64], 24bv32), BV32_SHL($r1.1[128:96], 8bv32))), BV32_SHL($r2.1[96:64], 15bv32));
  assert {:sourceloc} {:sourceloc_num 94} true;
  $$temp[BV32_ADD(BV32_MUL($i.0, 4bv32), 3bv32)] := v87;
  assert {:sourceloc} {:sourceloc_num 95} true;
  v88 := $$temp[BV32_MUL($i.0, 4bv32)];
  assert {:sourceloc} {:sourceloc_num 96} true;
  v89 := $$temp[BV32_ADD(BV32_MUL($i.0, 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 97} true;
  v90 := $$temp[BV32_ADD(BV32_MUL($i.0, 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 98} true;
  v91 := $$temp[BV32_ADD(BV32_MUL($i.0, 4bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 99} true;
  $$temp[BV32_MUL($i.0, 4bv32)] := v88;
  assert {:sourceloc} {:sourceloc_num 100} true;
  $$temp[BV32_ADD(BV32_MUL($i.0, 4bv32), 1bv32)] := v89;
  assert {:sourceloc} {:sourceloc_num 101} true;
  $$temp[BV32_ADD(BV32_MUL($i.0, 4bv32), 2bv32)] := v90;
  assert {:sourceloc} {:sourceloc_num 102} true;
  $$temp[BV32_ADD(BV32_MUL($i.0, 4bv32), 3bv32)] := BV32_XOR(BV32_XOR(BV32_XOR(BV32_XOR($a.1[128:96], BV32_OR(BV32_SHL($a.1[128:96], 24bv32), BV32_LSHR($a.1[96:64], 8bv32))), BV32_AND(BV32_LSHR($b.1[128:96], 13bv32), 2146958127bv32)), BV32_LSHR($r1.1[128:96], 24bv32)), BV32_SHL($r2.1[128:96], 15bv32));
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 103} true;
  $r1.0, $r2.0, $a.0, $b.0, $i.0 := $r1.1, $r2.1, $a.1, $b.1, BV32_ADD($i.0, 1bv32);
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 104} true;
  v92 := BV32_MUL(BV32_ADD(BV32_MUL(v1, $width), v0), $mulFactor);
  $i.1 := 0bv32;
  goto $for.cond.83;
$for.cond.83:
  assert {:block_sourceloc} {:sourceloc_num 105} true;
  assert {:originated_from_invariant} {:sourceloc_num 106} (if (_WRITE_HAS_OCCURRED_$$gaussianRand ==> BV32_UGE(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 16bv32), v92)) then 1bv1 else 0bv1) != 0bv1;
  assert {:originated_from_invariant} {:sourceloc_num 107} (if (_WRITE_HAS_OCCURRED_$$gaussianRand ==> BV32_ULT(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 16bv32), BV32_ADD(v92, $mulFactor))) then 1bv1 else 0bv1) != 0bv1;
  v93 := BV32_ULT($i.1, BV32_UDIV($mulFactor, 2bv32));
  goto $truebb0, $falsebb0;
$for.body.96:
  assert {:block_sourceloc} {:sourceloc_num 108} true;
  assert {:sourceloc} {:sourceloc_num 109} true;
  v94 := $$temp[BV32_MUL($i.1, 4bv32)];
  assert {:sourceloc} {:sourceloc_num 110} true;
  v95 := $$temp[BV32_ADD(BV32_MUL($i.1, 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 111} true;
  v96 := $$temp[BV32_ADD(BV32_MUL($i.1, 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 112} true;
  v97 := $$temp[BV32_ADD(BV32_MUL($i.1, 4bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 113} true;
  v98 := $$temp[BV32_MUL(BV32_ADD($i.1, 1bv32), 4bv32)];
  assert {:sourceloc} {:sourceloc_num 114} true;
  v99 := $$temp[BV32_ADD(BV32_MUL(BV32_ADD($i.1, 1bv32), 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 115} true;
  v100 := $$temp[BV32_ADD(BV32_MUL(BV32_ADD($i.1, 1bv32), 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 116} true;
  v101 := $$temp[BV32_ADD(BV32_MUL(BV32_ADD($i.1, 1bv32), 4bv32), 3bv32)];
  v102 := FSQRT32(FMUL32(3221225472bv32, FLOG32(FDIV32(FMUL32(UI32_TO_FP32(v94), 1065353216bv32), 1333788672bv32))));
  v103 := FSQRT32(FMUL32(3221225472bv32, FLOG32(FDIV32(FMUL32(UI32_TO_FP32(v95), 1065353216bv32), 1333788672bv32))));
  v104 := FSQRT32(FMUL32(3221225472bv32, FLOG32(FDIV32(FMUL32(UI32_TO_FP32(v96), 1065353216bv32), 1333788672bv32))));
  v105 := FSQRT32(FMUL32(3221225472bv32, FLOG32(FDIV32(FMUL32(UI32_TO_FP32(v97), 1065353216bv32), 1333788672bv32))));
  v106 := FMUL32(1086918619bv32, FDIV32(FMUL32(UI32_TO_FP32(v98), 1065353216bv32), 1333788672bv32));
  v107 := FMUL32(1086918619bv32, FDIV32(FMUL32(UI32_TO_FP32(v99), 1065353216bv32), 1333788672bv32));
  v108 := FMUL32(1086918619bv32, FDIV32(FMUL32(UI32_TO_FP32(v100), 1065353216bv32), 1333788672bv32));
  v109 := FMUL32(1086918619bv32, FDIV32(FMUL32(UI32_TO_FP32(v101), 1065353216bv32), 1333788672bv32));
  assert {:sourceloc} {:sourceloc_num 117} true;
  $$gaussianRand[BV32_MUL(BV32_ADD(v92, BV32_MUL($i.1, 2bv32)), 4bv32)] := FMUL32(v102, FCOS32(v106));
  assert {:sourceloc} {:sourceloc_num 118} true;
  $$gaussianRand[BV32_ADD(BV32_MUL(BV32_ADD(v92, BV32_MUL($i.1, 2bv32)), 4bv32), 1bv32)] := FMUL32(v103, FCOS32(v107));
  assert {:sourceloc} {:sourceloc_num 119} true;
  $$gaussianRand[BV32_ADD(BV32_MUL(BV32_ADD(v92, BV32_MUL($i.1, 2bv32)), 4bv32), 2bv32)] := FMUL32(v104, FCOS32(v108));
  assert {:sourceloc} {:sourceloc_num 120} true;
  $$gaussianRand[BV32_ADD(BV32_MUL(BV32_ADD(v92, BV32_MUL($i.1, 2bv32)), 4bv32), 3bv32)] := FMUL32(v105, FCOS32(v109));
  assert {:sourceloc} {:sourceloc_num 121} true;
  $$gaussianRand[BV32_MUL(BV32_ADD(BV32_ADD(v92, BV32_MUL($i.1, 2bv32)), 1bv32), 4bv32)] := FMUL32(v102, FSIN32(v106));
  assert {:sourceloc} {:sourceloc_num 122} true;
  $$gaussianRand[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(v92, BV32_MUL($i.1, 2bv32)), 1bv32), 4bv32), 1bv32)] := FMUL32(v103, FSIN32(v107));
  assert {:sourceloc} {:sourceloc_num 123} true;
  $$gaussianRand[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(v92, BV32_MUL($i.1, 2bv32)), 1bv32), 4bv32), 2bv32)] := FMUL32(v104, FSIN32(v108));
  assert {:sourceloc} {:sourceloc_num 124} true;
  $$gaussianRand[BV32_ADD(BV32_MUL(BV32_ADD(BV32_ADD(v92, BV32_MUL($i.1, 2bv32)), 1bv32), 4bv32), 3bv32)] := FMUL32(v105, FSIN32(v109));
  goto $for.inc.122;
$for.inc.122:
  assert {:block_sourceloc} {:sourceloc_num 125} true;
  $i.1 := BV32_ADD($i.1, 1bv32);
  goto $for.cond.83;
$for.end.124:
  assert {:block_sourceloc} {:sourceloc_num 126} true;
  return;
$truebb:
  assume {:partition} v23;
  assert {:block_sourceloc} {:sourceloc_num 127} true;
  goto $for.body;
$falsebb:
  assume {:partition} !v23;
  assert {:block_sourceloc} {:sourceloc_num 128} true;
  goto $for.end;
$casebb:
  assume {:partition} $i.0 == 0bv32;
  assert {:block_sourceloc} {:sourceloc_num 129} true;
  goto $sw.bb;
$casebb0:
  assume {:partition} $i.0 == 1bv32;
  assert {:block_sourceloc} {:sourceloc_num 130} true;
  goto $sw.bb.23;
$casebb1:
  assume {:partition} $i.0 == 2bv32;
  assert {:block_sourceloc} {:sourceloc_num 131} true;
  goto $sw.bb.25;
$casebb2:
  assume {:partition} $i.0 == 3bv32;
  assert {:block_sourceloc} {:sourceloc_num 132} true;
  goto $sw.bb.27;
$casebb3:
  assume {:partition} $i.0 == 4bv32;
  assert {:block_sourceloc} {:sourceloc_num 133} true;
  goto $sw.bb.29;
$casebb4:
  assume {:partition} $i.0 == 5bv32;
  assert {:block_sourceloc} {:sourceloc_num 134} true;
  goto $sw.bb.31;
$casebb5:
  assume {:partition} $i.0 == 6bv32;
  assert {:block_sourceloc} {:sourceloc_num 135} true;
  goto $sw.bb.35;
$casebb6:
  assume {:partition} $i.0 == 7bv32;
  assert {:block_sourceloc} {:sourceloc_num 136} true;
  goto $sw.bb.39;
$defaultbb:
  assert {:block_sourceloc} {:sourceloc_num 137} true;
  assume {:partition} (((((($i.0 != 0bv32 && $i.0 != 1bv32) && $i.0 != 2bv32) && $i.0 != 3bv32) && $i.0 != 4bv32) && $i.0 != 5bv32) && $i.0 != 6bv32) && $i.0 != 7bv32;
  goto $sw.default;
$truebb0:
  assume {:partition} v93;
  assert {:block_sourceloc} {:sourceloc_num 138} true;
  goto $for.body.96;
$falsebb0:
  assume {:partition} !v93;
  assert {:block_sourceloc} {:sourceloc_num 139} true;
  goto $for.end.124;
}
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 64bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_y == 64bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 8bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 8bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_x == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_y == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_z == 0bv32 then 1bv1 else 0bv1) != 0bv1;
