type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP8(x : [bv32]bv8, y : bv32) returns (z : bv8, A : [bv32]bv8);
var {:source_name "input"} {:global} $$input : [bv32]bv8;
axiom {:array_info "$$input"} {:global} {:elem_width 8} {:source_name "input"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$input : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$input : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$input : bool;

var {:source_name "output"} {:global} $$output : [bv32]bv8;
axiom {:array_info "$$output"} {:global} {:elem_width 8} {:source_name "output"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$output : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$output : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$output : bool;

const _WATCHED_OFFSET : bv32;
const {:global_offset_x} global_offset_x : bv32;
const {:global_offset_y} global_offset_y : bv32;
const {:global_offset_z} global_offset_z : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FADD32(bv32, bv32) : bv32;
function FMUL32(bv32, bv32) : bv32;
function FP32_TO_UI8(bv32) : bv8;
function FSUB32(bv32, bv32) : bv32;
function UI8_TO_FP32(bv8) : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvsgt"} BV32_SGT(bv32, bv32) : bool;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvuge"} BV32_UGE(bv32, bv32) : bool;
function {:bvbuiltin "bvurem"} BV32_UREM(bv32, bv32) : bv32;
procedure {:source_name "RecursiveGaussian_kernel"} {:kernel} $RecursiveGaussian_kernel($width:bv32, $height:bv32, $a0:bv32, $a1:bv32, $a2:bv32, $a3:bv32, $b1:bv32, $b2:bv32, $coefp:bv32, $coefn:bv32)
requires {:sourceloc_num 0} (if $width == 512bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 1} (if $height == 512bv32 then 1bv1 else 0bv1) != 0bv1;
{
  var $xp.0:bv128;
  var $yp.0:bv128;
  var $yb.0:bv128;
  var $y.0:bv32;
  var $xn.0:bv128;
  var $xa.0:bv128;
  var $yn.0:bv128;
  var $ya.0:bv128;
  var $y34.0:bv32;
  var v56:bv8;
  var v57:bv8;
  var v9:bv8;
  var v12:bv8;
  var v7:bv8;
  var v15:bv8;
  var v17:bv8;
  var v14:bv8;
  var v19:bv8;
  var v21:bv8;
  var v5:bv8;
  var v16:bv8;
  var v10:bv8;
  var v22:bv8;
  var v6:bv8;
  var v20:bv8;
  var v11:bv8;
  var v4:bv8;
  var v3:bv32;
  var v0:bv32;
  var v1:bool;
  var v2:bool;
  var v8:bv32;
  var v23:bv32;
  var v18:bv32;
  var v13:bv32;
  var v27:bv32;
  var v25:bv32;
  var v26:bv32;
  var v24:bv32;
  var v33:bv8;
  var v31:bv8;
  var v34:bv8;
  var v35:bv8;
  var v30:bv8;
  var v39:bv8;
  var v37:bv8;
  var v41:bv8;
  var v43:bv8;
  var v44:bv8;
  var v45:bv8;
  var v32:bv8;
  var v36:bv8;
  var v42:bv8;
  var v38:bv8;
  var v40:bv8;
  var v54:bv8;
  var v53:bv8;
  var v55:bv8;
  var v51:bv8;
  var v50:bv8;
  var v52:bv8;
  var v29:bv32;
  var v28:bool;
  var v46:bv32;
  var v47:bv32;
  var v48:bv32;
  var v49:bv32;
  var v63:bv8;
  var v58:bv8;
  var v60:bv8;
  var v64:bv8;
  var v65:bv8;
  var v61:bv8;
  var v62:bv8;
  var v59:bv8;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  v1 := BV32_UGE(v0, $width);
  goto $truebb, $falsebb;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  goto $for.end.108;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  $xp.0, $yp.0, $yb.0, $y.0 := 0bv128, 0bv128, 0bv128, 0bv32;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  v2 := BV32_SLT($y.0, $height);
  goto $truebb0, $falsebb0;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  v3 := BV32_ADD(v0, BV32_MUL($y.0, $width));
  assert {:sourceloc} {:sourceloc_num 7} true;
  v4 := $$input[BV32_MUL(v3, 4bv32)];
  assert {:sourceloc} {:sourceloc_num 8} true;
  v5 := $$input[BV32_ADD(BV32_MUL(v3, 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 9} true;
  v6 := $$input[BV32_ADD(BV32_MUL(v3, 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 10} true;
  v7 := $$input[BV32_ADD(BV32_MUL(v3, 4bv32), 3bv32)];
  v8 := UI8_TO_FP32(v4);
  assert {:sourceloc} {:sourceloc_num 11} true;
  v9 := $$input[BV32_MUL(v3, 4bv32)];
  assert {:sourceloc} {:sourceloc_num 12} true;
  v10 := $$input[BV32_ADD(BV32_MUL(v3, 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 13} true;
  v11 := $$input[BV32_ADD(BV32_MUL(v3, 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 14} true;
  v12 := $$input[BV32_ADD(BV32_MUL(v3, 4bv32), 3bv32)];
  v13 := UI8_TO_FP32(v10);
  assert {:sourceloc} {:sourceloc_num 15} true;
  v14 := $$input[BV32_MUL(v3, 4bv32)];
  assert {:sourceloc} {:sourceloc_num 16} true;
  v15 := $$input[BV32_ADD(BV32_MUL(v3, 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 17} true;
  v16 := $$input[BV32_ADD(BV32_MUL(v3, 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 18} true;
  v17 := $$input[BV32_ADD(BV32_MUL(v3, 4bv32), 3bv32)];
  v18 := UI8_TO_FP32(v16);
  assert {:sourceloc} {:sourceloc_num 19} true;
  v19 := $$input[BV32_MUL(v3, 4bv32)];
  assert {:sourceloc} {:sourceloc_num 20} true;
  v20 := $$input[BV32_ADD(BV32_MUL(v3, 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 21} true;
  v21 := $$input[BV32_ADD(BV32_MUL(v3, 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 22} true;
  v22 := $$input[BV32_ADD(BV32_MUL(v3, 4bv32), 3bv32)];
  v23 := UI8_TO_FP32(v22);
  v24 := FADD32(FMUL32(FSUB32(2147483648bv32, $b2), $yb.0[32:0]), FADD32(FMUL32(FSUB32(2147483648bv32, $b1), $yp.0[32:0]), FADD32(FMUL32($a0, v8), FMUL32($a1, $xp.0[32:0]))));
  v25 := FADD32(FMUL32(FSUB32(2147483648bv32, $b2), $yb.0[64:32]), FADD32(FMUL32(FSUB32(2147483648bv32, $b1), $yp.0[64:32]), FADD32(FMUL32($a0, v13), FMUL32($a1, $xp.0[64:32]))));
  v26 := FADD32(FMUL32(FSUB32(2147483648bv32, $b2), $yb.0[96:64]), FADD32(FMUL32(FSUB32(2147483648bv32, $b1), $yp.0[96:64]), FADD32(FMUL32($a0, v18), FMUL32($a1, $xp.0[96:64]))));
  v27 := FADD32(FMUL32(FSUB32(2147483648bv32, $b2), $yb.0[128:96]), FADD32(FMUL32(FSUB32(2147483648bv32, $b1), $yp.0[128:96]), FADD32(FMUL32($a0, v23), FMUL32($a1, $xp.0[128:96]))));
  assert {:sourceloc} {:sourceloc_num 23} true;
  $$output[BV32_MUL(v3, 4bv32)] := FP32_TO_UI8(v24);
  assert {:sourceloc} {:sourceloc_num 24} true;
  $$output[BV32_ADD(BV32_MUL(v3, 4bv32), 1bv32)] := FP32_TO_UI8(v25);
  assert {:sourceloc} {:sourceloc_num 25} true;
  $$output[BV32_ADD(BV32_MUL(v3, 4bv32), 2bv32)] := FP32_TO_UI8(v26);
  assert {:sourceloc} {:sourceloc_num 26} true;
  $$output[BV32_ADD(BV32_MUL(v3, 4bv32), 3bv32)] := FP32_TO_UI8(v27);
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  $xp.0, $yp.0, $yb.0, $y.0 := v23 ++ v18 ++ v13 ++ v8, v27 ++ v26 ++ v25 ++ v24, $yp.0, BV32_ADD($y.0, 1bv32);
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  call {:sourceloc_num 29} $bugle_barrier(0bv1, 1bv1);
  $xn.0, $xa.0, $yn.0, $ya.0, $y34.0 := 0bv128, 0bv128, 0bv128, 0bv128, BV32_SUB($height, 1bv32);
  goto $for.cond.35;
$for.cond.35:
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 31} (if (_WRITE_HAS_OCCURRED_$$output ==> BV32_UREM(BV32_UDIV(_WATCHED_OFFSET, 4bv32), $width) == v0) then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 32} (if (_READ_HAS_OCCURRED_$$output ==> BV32_UREM(BV32_UDIV(_WATCHED_OFFSET, 4bv32), $width) == v0) then 1bv1 else 0bv1) != 0bv1;
  v28 := BV32_SGT($y34.0, 4294967295bv32);
  goto $truebb1, $falsebb1;
$for.body.50:
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  v29 := BV32_ADD(v0, BV32_MUL($y34.0, $width));
  assert {:sourceloc} {:sourceloc_num 34} true;
  v30 := $$input[BV32_MUL(v29, 4bv32)];
  assert {:sourceloc} {:sourceloc_num 35} true;
  v31 := $$input[BV32_ADD(BV32_MUL(v29, 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 36} true;
  v32 := $$input[BV32_ADD(BV32_MUL(v29, 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 37} true;
  v33 := $$input[BV32_ADD(BV32_MUL(v29, 4bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 38} true;
  v34 := $$input[BV32_MUL(v29, 4bv32)];
  assert {:sourceloc} {:sourceloc_num 39} true;
  v35 := $$input[BV32_ADD(BV32_MUL(v29, 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 40} true;
  v36 := $$input[BV32_ADD(BV32_MUL(v29, 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 41} true;
  v37 := $$input[BV32_ADD(BV32_MUL(v29, 4bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 42} true;
  v38 := $$input[BV32_MUL(v29, 4bv32)];
  assert {:sourceloc} {:sourceloc_num 43} true;
  v39 := $$input[BV32_ADD(BV32_MUL(v29, 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 44} true;
  v40 := $$input[BV32_ADD(BV32_MUL(v29, 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 45} true;
  v41 := $$input[BV32_ADD(BV32_MUL(v29, 4bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 46} true;
  v42 := $$input[BV32_MUL(v29, 4bv32)];
  assert {:sourceloc} {:sourceloc_num 47} true;
  v43 := $$input[BV32_ADD(BV32_MUL(v29, 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 48} true;
  v44 := $$input[BV32_ADD(BV32_MUL(v29, 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 49} true;
  v45 := $$input[BV32_ADD(BV32_MUL(v29, 4bv32), 3bv32)];
  v46 := FADD32(FMUL32(FSUB32(2147483648bv32, $b2), $ya.0[32:0]), FADD32(FMUL32(FSUB32(2147483648bv32, $b1), $yn.0[32:0]), FADD32(FMUL32($a2, $xn.0[32:0]), FMUL32($a3, $xa.0[32:0]))));
  v47 := FADD32(FMUL32(FSUB32(2147483648bv32, $b2), $ya.0[64:32]), FADD32(FMUL32(FSUB32(2147483648bv32, $b1), $yn.0[64:32]), FADD32(FMUL32($a2, $xn.0[64:32]), FMUL32($a3, $xa.0[64:32]))));
  v48 := FADD32(FMUL32(FSUB32(2147483648bv32, $b2), $ya.0[96:64]), FADD32(FMUL32(FSUB32(2147483648bv32, $b1), $yn.0[96:64]), FADD32(FMUL32($a2, $xn.0[96:64]), FMUL32($a3, $xa.0[96:64]))));
  v49 := FADD32(FMUL32(FSUB32(2147483648bv32, $b2), $ya.0[128:96]), FADD32(FMUL32(FSUB32(2147483648bv32, $b1), $yn.0[128:96]), FADD32(FMUL32($a2, $xn.0[128:96]), FMUL32($a3, $xa.0[128:96]))));
  assert {:sourceloc} {:sourceloc_num 50} true;
  v50 := $$output[BV32_MUL(v29, 4bv32)];
  assert {:sourceloc} {:sourceloc_num 51} true;
  v51 := $$output[BV32_ADD(BV32_MUL(v29, 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 52} true;
  v52 := $$output[BV32_ADD(BV32_MUL(v29, 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 53} true;
  v53 := $$output[BV32_ADD(BV32_MUL(v29, 4bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 54} true;
  v54 := $$output[BV32_MUL(v29, 4bv32)];
  assert {:sourceloc} {:sourceloc_num 55} true;
  v55 := $$output[BV32_ADD(BV32_MUL(v29, 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 56} true;
  v56 := $$output[BV32_ADD(BV32_MUL(v29, 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 57} true;
  v57 := $$output[BV32_ADD(BV32_MUL(v29, 4bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 58} true;
  v58 := $$output[BV32_MUL(v29, 4bv32)];
  assert {:sourceloc} {:sourceloc_num 59} true;
  v59 := $$output[BV32_ADD(BV32_MUL(v29, 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 60} true;
  v60 := $$output[BV32_ADD(BV32_MUL(v29, 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 61} true;
  v61 := $$output[BV32_ADD(BV32_MUL(v29, 4bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 62} true;
  v62 := $$output[BV32_MUL(v29, 4bv32)];
  assert {:sourceloc} {:sourceloc_num 63} true;
  v63 := $$output[BV32_ADD(BV32_MUL(v29, 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 64} true;
  v64 := $$output[BV32_ADD(BV32_MUL(v29, 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 65} true;
  v65 := $$output[BV32_ADD(BV32_MUL(v29, 4bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 66} true;
  $$output[BV32_MUL(v29, 4bv32)] := FP32_TO_UI8(FADD32(UI8_TO_FP32(v50), v46));
  assert {:sourceloc} {:sourceloc_num 67} true;
  $$output[BV32_ADD(BV32_MUL(v29, 4bv32), 1bv32)] := FP32_TO_UI8(FADD32(UI8_TO_FP32(v55), v47));
  assert {:sourceloc} {:sourceloc_num 68} true;
  $$output[BV32_ADD(BV32_MUL(v29, 4bv32), 2bv32)] := FP32_TO_UI8(FADD32(UI8_TO_FP32(v60), v48));
  assert {:sourceloc} {:sourceloc_num 69} true;
  $$output[BV32_ADD(BV32_MUL(v29, 4bv32), 3bv32)] := FP32_TO_UI8(FADD32(UI8_TO_FP32(v65), v49));
  goto $for.inc.107;
$for.inc.107:
  assert {:block_sourceloc} {:sourceloc_num 70} true;
  $xn.0, $xa.0, $yn.0, $ya.0, $y34.0 := UI8_TO_FP32(v45) ++ UI8_TO_FP32(v40) ++ UI8_TO_FP32(v35) ++ UI8_TO_FP32(v30), $xn.0, v49 ++ v48 ++ v47 ++ v46, $yn.0, BV32_ADD($y34.0, 4294967295bv32);
  goto $for.cond.35;
$for.end.108:
  assert {:block_sourceloc} {:sourceloc_num 71} true;
  return;
$truebb:
  assume {:partition} v1;
  assert {:block_sourceloc} {:sourceloc_num 72} true;
  goto $if.then;
$falsebb:
  assume {:partition} !v1;
  assert {:block_sourceloc} {:sourceloc_num 73} true;
  goto $if.end;
$truebb0:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 74} true;
  goto $for.body;
$falsebb0:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 75} true;
  goto $for.end;
$truebb1:
  assume {:partition} v28;
  assert {:block_sourceloc} {:sourceloc_num 76} true;
  goto $for.body.50;
$falsebb1:
  assume {:partition} !v28;
  assert {:block_sourceloc} {:sourceloc_num 77} true;
  goto $for.end.108;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 256bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 2bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_x == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_y == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_z == 0bv32 then 1bv1 else 0bv1) != 0bv1;
