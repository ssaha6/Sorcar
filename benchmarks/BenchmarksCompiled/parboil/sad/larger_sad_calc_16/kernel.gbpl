type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP16(x : [bv32]bv16, y : bv32) returns (z : bv16, A : [bv32]bv16);
var {:source_name "blk_sad"} {:global} $$blk_sad : [bv32]bv16;
axiom {:array_info "$$blk_sad"} {:global} {:elem_width 16} {:source_name "blk_sad"} {:source_elem_width 16} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 16} {:source_elem_width 16} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$blk_sad : bool;
var {:race_checking} {:global} {:elem_width 16} {:source_elem_width 16} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$blk_sad : bool;
var {:race_checking} {:global} {:elem_width 16} {:source_elem_width 16} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$blk_sad : bool;

const _WATCHED_OFFSET : bv32;
const {:global_offset_x} global_offset_x : bv32;
const {:global_offset_y} global_offset_y : bv32;
const {:global_offset_z} global_offset_z : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_id_y} group_id_y : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function {:bvbuiltin "bvadd"} BV16_ADD(bv16, bv16) : bv16;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvand"} BV32_AND(bv32, bv32) : bv32;
function {:bvbuiltin "bvashr"} BV32_ASHR(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvor"} BV32_OR(bv32, bv32) : bv32;
function {:bvbuiltin "bvshl"} BV32_SHL(bv32, bv32) : bv32;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvult"} BV32_ULT(bv32, bv32) : bool;
function {:bvbuiltin "bvurem"} BV32_UREM(bv32, bv32) : bv32;
function {:bvbuiltin "zero_extend 31"} BV1_ZEXT32(bv1) : bv32;
procedure {:source_name "larger_sad_calc_16"} {:kernel} $larger_sad_calc_16($mb_width:bv32, $mb_height:bv32)
requires {:sourceloc_num 0} (if $mb_width == 11bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 1} (if $mb_height == 9bv32 then 1bv1 else 0bv1) != 0bv1;
{
  var $search_pos.0:bv32;
  var v0:bv32;
  var v1:bv32;
  var v2:bv32;
  var v3:bv32;
  var v4:bv32;
  var v5:bool;
  var v8:bv16;
  var v7:bv16;
  var v11:bv16;
  var v9:bv16;
  var v6:bv16;
  var v12:bv16;
  var v13:bv16;
  var v10:bv16;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v0 := BV32_MUL(BV32_MUL(BV32_ASHR(BV32_SHL($mb_height, 8bv32), 8bv32), BV32_ASHR(BV32_SHL($mb_width, 8bv32), 8bv32)), 1096bv32);
  v1 := BV32_MUL(BV32_ADD(BV32_MUL(BV32_ASHR(BV32_SHL($mb_width, 8bv32), 8bv32), BV32_ASHR(BV32_SHL(group_id_y, 8bv32), 8bv32)), group_id_x), 1096bv32);
  v2 := BV32_SHL(BV32_ADD(v0, v1), 2bv32);
  v3 := BV32_SHL(BV32_ADD(v0, v1), 1bv32);
  v4 := BV32_MUL(v1, 2bv32);
  $search_pos.0 := local_id_x;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 4} (if (_READ_HAS_OCCURRED_$$blk_sad ==> BV32_OR(BV32_OR(BV32_OR(BV1_ZEXT32((if BV32_ULT(BV32_UDIV(BV32_SUB(BV32_MUL(2bv32, _WATCHED_OFFSET), BV32_ADD(BV32_MUL(v2, 2bv32), BV32_MUL(v0, 2bv32))), 4bv32), 545bv32) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_ULT(BV32_SUB(BV32_UDIV(BV32_SUB(BV32_MUL(2bv32, _WATCHED_OFFSET), BV32_ADD(BV32_MUL(v2, 2bv32), BV32_MUL(v0, 2bv32))), 4bv32), 548bv32), 545bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_ULT(BV32_SUB(BV32_UDIV(BV32_SUB(BV32_MUL(2bv32, _WATCHED_OFFSET), BV32_ADD(BV32_MUL(v2, 2bv32), BV32_MUL(v0, 2bv32))), 4bv32), 1096bv32), 545bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_ULT(BV32_SUB(BV32_UDIV(BV32_SUB(BV32_MUL(2bv32, _WATCHED_OFFSET), BV32_ADD(BV32_MUL(v2, 2bv32), BV32_MUL(v0, 2bv32))), 4bv32), 1644bv32), 545bv32) then 1bv1 else 0bv1))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 5} (if (_WRITE_HAS_OCCURRED_$$blk_sad ==> BV32_OR(BV32_OR(BV32_OR(BV32_OR(BV32_AND(BV1_ZEXT32((if BV32_ULT(BV32_UDIV(BV32_SUB(BV32_MUL(2bv32, _WATCHED_OFFSET), BV32_ADD(BV32_MUL(v3, 2bv32), BV32_MUL(v0, 2bv32))), 4bv32), 545bv32) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_UREM(BV32_UDIV(BV32_SUB(BV32_MUL(2bv32, _WATCHED_OFFSET), BV32_ADD(BV32_MUL(v3, 2bv32), BV32_MUL(v0, 2bv32))), 4bv32), 32bv32) == local_id_x then 1bv1 else 0bv1))), BV32_AND(BV1_ZEXT32((if BV32_ULT(BV32_SUB(BV32_UDIV(BV32_SUB(BV32_MUL(2bv32, _WATCHED_OFFSET), BV32_ADD(BV32_MUL(v3, 2bv32), BV32_MUL(v0, 2bv32))), 4bv32), 548bv32), 545bv32) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_UREM(BV32_SUB(BV32_UDIV(BV32_SUB(BV32_MUL(2bv32, _WATCHED_OFFSET), BV32_ADD(BV32_MUL(v3, 2bv32), BV32_MUL(v0, 2bv32))), 4bv32), 548bv32), 32bv32) == local_id_x then 1bv1 else 0bv1)))), BV32_AND(BV1_ZEXT32((if BV32_ULT(BV32_UDIV(BV32_SUB(BV32_MUL(2bv32, _WATCHED_OFFSET), BV32_ADD(BV32_MUL(v0, 2bv32), BV32_MUL(v4, 2bv32))), 4bv32), 545bv32) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_UREM(BV32_UDIV(BV32_SUB(BV32_MUL(2bv32, _WATCHED_OFFSET), BV32_ADD(BV32_MUL(v0, 2bv32), BV32_MUL(v4, 2bv32))), 4bv32), 32bv32) == local_id_x then 1bv1 else 0bv1)))), BV32_AND(BV1_ZEXT32((if BV32_ULT(BV32_SUB(BV32_UDIV(BV32_SUB(BV32_MUL(2bv32, _WATCHED_OFFSET), BV32_ADD(BV32_MUL(v0, 2bv32), BV32_MUL(v4, 2bv32))), 4bv32), 548bv32), 545bv32) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_UREM(BV32_SUB(BV32_UDIV(BV32_SUB(BV32_MUL(2bv32, _WATCHED_OFFSET), BV32_ADD(BV32_MUL(v0, 2bv32), BV32_MUL(v4, 2bv32))), 4bv32), 548bv32), 32bv32) == local_id_x then 1bv1 else 0bv1)))), BV32_AND(BV1_ZEXT32((if BV32_ULT(BV32_UDIV(BV32_SUB(BV32_MUL(2bv32, _WATCHED_OFFSET), BV32_MUL(v1, 2bv32)), 4bv32), 545bv32) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_UREM(BV32_UDIV(BV32_SUB(BV32_MUL(2bv32, _WATCHED_OFFSET), BV32_MUL(v1, 2bv32)), 4bv32), 32bv32) == local_id_x then 1bv1 else 0bv1)))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
  v5 := BV32_SLT($search_pos.0, 545bv32);
  goto $truebb, $falsebb;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  assert {:sourceloc} {:sourceloc_num 7} true;
  v6 := $$blk_sad[BV32_ADD(BV32_ADD(v2, v0), BV32_MUL($search_pos.0, 2bv32))];
  assert {:sourceloc} {:sourceloc_num 8} true;
  v7 := $$blk_sad[BV32_ADD(BV32_ADD(v2, v0), BV32_ADD(BV32_MUL($search_pos.0, 2bv32), 1bv32))];
  assert {:sourceloc} {:sourceloc_num 9} true;
  v8 := $$blk_sad[BV32_ADD(BV32_ADD(v2, v0), BV32_MUL(BV32_ADD($search_pos.0, 548bv32), 2bv32))];
  assert {:sourceloc} {:sourceloc_num 10} true;
  v9 := $$blk_sad[BV32_ADD(BV32_ADD(v2, v0), BV32_ADD(BV32_MUL(BV32_ADD($search_pos.0, 548bv32), 2bv32), 1bv32))];
  assert {:sourceloc} {:sourceloc_num 11} true;
  v10 := $$blk_sad[BV32_ADD(BV32_ADD(v2, v0), BV32_MUL(BV32_ADD($search_pos.0, 1096bv32), 2bv32))];
  assert {:sourceloc} {:sourceloc_num 12} true;
  v11 := $$blk_sad[BV32_ADD(BV32_ADD(v2, v0), BV32_ADD(BV32_MUL(BV32_ADD($search_pos.0, 1096bv32), 2bv32), 1bv32))];
  assert {:sourceloc} {:sourceloc_num 13} true;
  v12 := $$blk_sad[BV32_ADD(BV32_ADD(v2, v0), BV32_MUL(BV32_ADD($search_pos.0, 1644bv32), 2bv32))];
  assert {:sourceloc} {:sourceloc_num 14} true;
  v13 := $$blk_sad[BV32_ADD(BV32_ADD(v2, v0), BV32_ADD(BV32_MUL(BV32_ADD($search_pos.0, 1644bv32), 2bv32), 1bv32))];
  assert {:sourceloc} {:sourceloc_num 15} true;
  $$blk_sad[BV32_ADD(BV32_ADD(v3, v0), BV32_MUL($search_pos.0, 2bv32))] := BV16_ADD(v6, v10);
  assert {:sourceloc} {:sourceloc_num 16} true;
  $$blk_sad[BV32_ADD(BV32_ADD(BV32_ADD(v3, v0), BV32_MUL($search_pos.0, 2bv32)), 1bv32)] := BV16_ADD(v7, v11);
  assert {:sourceloc} {:sourceloc_num 17} true;
  $$blk_sad[BV32_ADD(BV32_ADD(v3, v0), BV32_MUL(BV32_ADD($search_pos.0, 548bv32), 2bv32))] := BV16_ADD(v8, v12);
  assert {:sourceloc} {:sourceloc_num 18} true;
  $$blk_sad[BV32_ADD(BV32_ADD(BV32_ADD(v3, v0), BV32_MUL(BV32_ADD($search_pos.0, 548bv32), 2bv32)), 1bv32)] := BV16_ADD(v9, v13);
  assert {:sourceloc} {:sourceloc_num 19} true;
  $$blk_sad[BV32_ADD(BV32_ADD(v0, v4), BV32_MUL($search_pos.0, 2bv32))] := BV16_ADD(v6, v8);
  assert {:sourceloc} {:sourceloc_num 20} true;
  $$blk_sad[BV32_ADD(BV32_ADD(BV32_ADD(v0, v4), BV32_MUL($search_pos.0, 2bv32)), 1bv32)] := BV16_ADD(v7, v9);
  assert {:sourceloc} {:sourceloc_num 21} true;
  $$blk_sad[BV32_ADD(BV32_ADD(v0, v4), BV32_MUL(BV32_ADD($search_pos.0, 548bv32), 2bv32))] := BV16_ADD(v10, v12);
  assert {:sourceloc} {:sourceloc_num 22} true;
  $$blk_sad[BV32_ADD(BV32_ADD(BV32_ADD(v0, v4), BV32_MUL(BV32_ADD($search_pos.0, 548bv32), 2bv32)), 1bv32)] := BV16_ADD(v11, v13);
  assert {:sourceloc} {:sourceloc_num 23} true;
  $$blk_sad[BV32_ADD(v1, BV32_MUL($search_pos.0, 2bv32))] := BV16_ADD(BV16_ADD(v6, v8), BV16_ADD(v10, v12));
  assert {:sourceloc} {:sourceloc_num 24} true;
  $$blk_sad[BV32_ADD(BV32_ADD(v1, BV32_MUL($search_pos.0, 2bv32)), 1bv32)] := BV16_ADD(BV16_ADD(v7, v9), BV16_ADD(v11, v13));
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  $search_pos.0 := BV32_ADD($search_pos.0, 32bv32);
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  return;
$truebb:
  assume {:partition} v5;
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  goto $for.body;
$falsebb:
  assume {:partition} !v5;
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  goto $for.end;
}
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 32bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 11bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 9bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_x == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_y == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_z == 0bv32 then 1bv1 else 0bv1) != 0bv1;
