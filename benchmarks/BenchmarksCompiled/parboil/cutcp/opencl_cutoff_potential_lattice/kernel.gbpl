type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "binBaseAddr"} {:global} $$binBaseAddr : [bv32]bv32;
axiom {:array_info "$$binBaseAddr"} {:global} {:elem_width 32} {:source_name "binBaseAddr"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$binBaseAddr : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$binBaseAddr : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$binBaseAddr : bool;

var {:source_name "regionZeroAddr"} {:global} $$regionZeroAddr : [bv32]bv32;
axiom {:array_info "$$regionZeroAddr"} {:global} {:elem_width 32} {:source_name "regionZeroAddr"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$regionZeroAddr : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$regionZeroAddr : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$regionZeroAddr : bool;

var {:source_name "NbrListLen"} {:constant} $$NbrListLen : [bv32]bv32;
axiom {:array_info "$$NbrListLen"} {:constant} {:elem_width 32} {:source_name "NbrListLen"} {:source_elem_width 32} {:source_dimensions "*"} true;

var {:source_name "NbrList"} {:constant} $$NbrList : [bv32]bv32;
axiom {:array_info "$$NbrList"} {:constant} {:elem_width 32} {:source_name "NbrList"} {:source_elem_width 128} {:source_dimensions "*"} true;

var {:source_name "myBinIndex"} {:group_shared} $$opencl_cutoff_potential_lattice.myBinIndex : [bv32]bv32;
axiom {:array_info "$$opencl_cutoff_potential_lattice.myBinIndex"} {:group_shared} {:elem_width 32} {:source_name "myBinIndex"} {:source_elem_width 128} {:source_dimensions "1"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$opencl_cutoff_potential_lattice.myBinIndex : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$opencl_cutoff_potential_lattice.myBinIndex : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$opencl_cutoff_potential_lattice.myBinIndex : bool;

var {:source_name "AtomBinCache"} {:group_shared} $$opencl_cutoff_potential_lattice.AtomBinCache : [bv32]bv32;
axiom {:array_info "$$opencl_cutoff_potential_lattice.AtomBinCache"} {:group_shared} {:elem_width 32} {:source_name "AtomBinCache"} {:source_elem_width 32} {:source_dimensions "1024"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$opencl_cutoff_potential_lattice.AtomBinCache : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$opencl_cutoff_potential_lattice.AtomBinCache : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$opencl_cutoff_potential_lattice.AtomBinCache : bool;

const _WATCHED_OFFSET : bv32;
const {:global_offset_x} global_offset_x : bv32;
const {:global_offset_y} global_offset_y : bv32;
const {:global_offset_z} global_offset_z : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_id_y} group_id_y : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:local_id_y} local_id_y : bv32;
const {:local_id_z} local_id_z : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FADD32(bv32, bv32) : bv32;
function FDIV32(bv32, bv32) : bv32;
function FEQ32(bv32, bv32) : bool;
function FFLOOR32(bv32) : bv32;
function FLT32(bv32, bv32) : bool;
function FMUL32(bv32, bv32) : bv32;
function FP32_TO_SI32(bv32) : bv32;
function FSQRT32(bv32) : bv32;
function FSUB32(bv32, bv32) : bv32;
function SI32_TO_FP32(bv32) : bv32;
function UI32_TO_FP32(bv32) : bv32;
function __other_bv32(bv32) : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvand"} BV32_AND(bv32, bv32) : bv32;
function {:bvbuiltin "bvashr"} BV32_ASHR(bv32, bv32) : bv32;
function {:bvbuiltin "bvlshr"} BV32_LSHR(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvor"} BV32_OR(bv32, bv32) : bv32;
function {:bvbuiltin "bvsgt"} BV32_SGT(bv32, bv32) : bool;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvurem"} BV32_UREM(bv32, bv32) : bv32;
function {:bvbuiltin "zero_extend 31"} BV1_ZEXT32(bv1) : bv32;
procedure {:source_name "opencl_cutoff_potential_lattice"} {:kernel} $opencl_cutoff_potential_lattice($binDim_x:bv32, $binDim_y:bv32, $offset:bv32, $h:bv32, $cutoff2:bv32, $inv_cutoff2:bv32, $zRegionIndex:bv32)
requires {:sourceloc_num 0} (if $$NbrListLen[0bv32] == __other_bv32($$NbrListLen[0bv32]) then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 1} (if FEQ32($h, 1056964608bv32) then 1bv1 else 0bv1) != 0bv1;
{
  var $nbrid.0:bv32;
  var $totalbins.0:bv32;
  var $numbins.0:bv32;
  var $energy.0:bv32;
  var $nbrid.1:bv32;
  var $bincnt.0:bv32;
  var $0:bv1;
  var $numbins.1:bv32;
  var $energy.1:bv32;
  var $bincnt.1:bv32;
  var $energy.2:bv32;
  var $i128.0:bv32;
  var $energy.3:bv32;
  var v0:bv32;
  var v1:bv32;
  var v2:bv32;
  var v12:bv32;
  var v17:bv32;
  var v19:bv32;
  var v24:bv32;
  var v22:bv32;
  var v16:bv32;
  var v21:bv32;
  var v23:bv32;
  var v15:bv32;
  var v25:bv32;
  var v18:bv32;
  var v26:bv32;
  var v14:bv32;
  var v20:bv32;
  var v13:bv32;
  var v32:bv32;
  var v40:bv32;
  var v28:bv32;
  var v31:bv32;
  var v27:bv32;
  var v30:bv32;
  var v29:bv32;
  var v34:bv32;
  var v33:bv32;
  var v35:bv32;
  var v39:bv32;
  var v41:bv32;
  var v46:bv32;
  var v48:bv32;
  var v49:bv32;
  var v47:bv32;
  var v43:bv32;
  var v10:bv32;
  var v6:bv32;
  var v5:bv32;
  var v3:bv32;
  var v4:bv32;
  var v8:bv32;
  var v7:bool;
  var v11:bool;
  var v9:bool;
  var v38:bv32;
  var v37:bv32;
  var v36:bv32;
  var v53:bv32;
  var v52:bool;
  var v51:bv32;
  var v45:bool;
  var v42:bool;
  var v44:bool;
  var v50:bool;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v0 := BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(local_id_z, 8bv32), local_id_y), 8bv32), local_id_x);
  v1 := BV32_MUL(BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL($zRegionIndex, num_groups_y), group_id_y), BV32_LSHR(num_groups_x, 2bv32)), BV32_LSHR(group_id_x, 2bv32)), 512bv32);
  v2 := BV32_MUL(BV32_AND(group_id_x, 3bv32), 128bv32);
  v3 := FMUL32(UI32_TO_FP32(BV32_ADD(BV32_MUL(8bv32, BV32_LSHR(group_id_x, 2bv32)), local_id_x)), $h);
  v4 := FMUL32(UI32_TO_FP32(BV32_ADD(BV32_MUL(8bv32, group_id_y), local_id_y)), $h);
  v5 := FMUL32(UI32_TO_FP32(BV32_ADD(BV32_ADD(BV32_MUL(8bv32, $zRegionIndex), BV32_MUL(2bv32, BV32_AND(group_id_x, 3bv32))), local_id_z)), $h);
  assert {:sourceloc} {:sourceloc_num 3} true;
  $$opencl_cutoff_potential_lattice.myBinIndex[0bv32] := FP32_TO_SI32(FFLOOR32(FMUL32(FMUL32(UI32_TO_FP32(BV32_ADD(BV32_MUL(8bv32, BV32_LSHR(group_id_x, 2bv32)), 4bv32)), $h), 1048576000bv32)));
  assert {:sourceloc} {:sourceloc_num 4} true;
  $$opencl_cutoff_potential_lattice.myBinIndex[1bv32] := FP32_TO_SI32(FFLOOR32(FMUL32(FMUL32(UI32_TO_FP32(BV32_ADD(BV32_MUL(8bv32, group_id_y), 4bv32)), $h), 1048576000bv32)));
  assert {:sourceloc} {:sourceloc_num 5} true;
  $$opencl_cutoff_potential_lattice.myBinIndex[2bv32] := FP32_TO_SI32(FFLOOR32(FMUL32(FMUL32(SI32_TO_FP32(BV32_ADD(BV32_MUL(8bv32, $zRegionIndex), 4bv32)), $h), 1048576000bv32)));
  assert {:sourceloc} {:sourceloc_num 6} true;
  $$opencl_cutoff_potential_lattice.myBinIndex[3bv32] := 0bv32;
  $nbrid.0, $totalbins.0, $numbins.0, $energy.0 := BV32_ASHR(v0, 4bv32), 0bv32, 32bv32, 0bv32;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  assert {:sourceloc} {:sourceloc_num 8} true;
  v6 := $$NbrListLen[0bv32];
  v7 := BV32_SLT($totalbins.0, v6);
  goto $truebb, $falsebb;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  v8 := BV32_MUL(32bv32, BV32_ASHR(v0, 4bv32));
  $nbrid.1, $bincnt.0 := $nbrid.0, 0bv32;
  goto $for.cond.74;
$for.cond.74:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 11} (if (_WRITE_HAS_OCCURRED_$$opencl_cutoff_potential_lattice.AtomBinCache ==> BV32_OR(BV1_ZEXT32((if BV32_UREM(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), BV32_ADD(v8, BV32_AND(v0, 15bv32))), 256bv32) == 0bv32 then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_UREM(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), BV32_ADD(BV32_ADD(v8, BV32_AND(v0, 15bv32)), 16bv32)), 256bv32) == 0bv32 then 1bv1 else 0bv1))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
  v9 := BV32_SLT($bincnt.0, 4bv32);
  goto $truebb0, $falsebb0;
$land.rhs:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  assert {:sourceloc} {:sourceloc_num 13} true;
  v10 := $$NbrListLen[0bv32];
  $0 := (if BV32_SLT($nbrid.1, v10) then 1bv1 else 0bv1);
  goto $land.end;
$land.end:
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  v11 := $0 == 1bv1;
  goto $truebb1, $falsebb1;
$for.body.95:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  assert {:sourceloc} {:sourceloc_num 16} true;
  v12 := $$opencl_cutoff_potential_lattice.myBinIndex[0bv32];
  assert {:sourceloc} {:sourceloc_num 17} true;
  v13 := $$opencl_cutoff_potential_lattice.myBinIndex[1bv32];
  assert {:sourceloc} {:sourceloc_num 18} true;
  v14 := $$opencl_cutoff_potential_lattice.myBinIndex[2bv32];
  assert {:sourceloc} {:sourceloc_num 19} true;
  v15 := $$opencl_cutoff_potential_lattice.myBinIndex[3bv32];
  assert {:sourceloc} {:sourceloc_num 20} true;
  v16 := $$NbrList[BV32_MUL($nbrid.1, 4bv32)];
  assert {:sourceloc} {:sourceloc_num 21} true;
  v17 := $$NbrList[BV32_ADD(BV32_MUL($nbrid.1, 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 22} true;
  v18 := $$NbrList[BV32_ADD(BV32_MUL($nbrid.1, 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 23} true;
  v19 := $$NbrList[BV32_ADD(BV32_MUL($nbrid.1, 4bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 24} true;
  v20 := $$opencl_cutoff_potential_lattice.myBinIndex[0bv32];
  assert {:sourceloc} {:sourceloc_num 25} true;
  v21 := $$opencl_cutoff_potential_lattice.myBinIndex[1bv32];
  assert {:sourceloc} {:sourceloc_num 26} true;
  v22 := $$opencl_cutoff_potential_lattice.myBinIndex[2bv32];
  assert {:sourceloc} {:sourceloc_num 27} true;
  v23 := $$opencl_cutoff_potential_lattice.myBinIndex[3bv32];
  assert {:sourceloc} {:sourceloc_num 28} true;
  v24 := $$NbrList[BV32_MUL($nbrid.1, 4bv32)];
  assert {:sourceloc} {:sourceloc_num 29} true;
  v25 := $$NbrList[BV32_ADD(BV32_MUL($nbrid.1, 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 30} true;
  v26 := $$NbrList[BV32_ADD(BV32_MUL($nbrid.1, 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 31} true;
  v27 := $$NbrList[BV32_ADD(BV32_MUL($nbrid.1, 4bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 32} true;
  v28 := $$opencl_cutoff_potential_lattice.myBinIndex[0bv32];
  assert {:sourceloc} {:sourceloc_num 33} true;
  v29 := $$opencl_cutoff_potential_lattice.myBinIndex[1bv32];
  assert {:sourceloc} {:sourceloc_num 34} true;
  v30 := $$opencl_cutoff_potential_lattice.myBinIndex[2bv32];
  assert {:sourceloc} {:sourceloc_num 35} true;
  v31 := $$opencl_cutoff_potential_lattice.myBinIndex[3bv32];
  assert {:sourceloc} {:sourceloc_num 36} true;
  v32 := $$NbrList[BV32_MUL($nbrid.1, 4bv32)];
  assert {:sourceloc} {:sourceloc_num 37} true;
  v33 := $$NbrList[BV32_ADD(BV32_MUL($nbrid.1, 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 38} true;
  v34 := $$NbrList[BV32_ADD(BV32_MUL($nbrid.1, 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 39} true;
  v35 := $$NbrList[BV32_ADD(BV32_MUL($nbrid.1, 4bv32), 3bv32)];
  v36 := BV32_MUL(BV32_ADD(BV32_MUL(BV32_ADD(BV32_MUL(BV32_ADD(v30, v34), $binDim_y), BV32_ADD(v21, v25)), $binDim_x), BV32_ADD(v12, v16)), 32bv32);
  v37 := BV32_AND(v0, 15bv32);
  v38 := BV32_ADD(v8, BV32_MUL(BV32_MUL($bincnt.0, 8bv32), 32bv32));
  assert {:sourceloc} {:sourceloc_num 40} true;
  v39 := $$binBaseAddr[BV32_ADD(BV32_ADD(BV32_MUL($offset, 4bv32), v36), v37)];
  assert {:sourceloc} {:sourceloc_num 41} true;
  $$opencl_cutoff_potential_lattice.AtomBinCache[BV32_ADD(v38, v37)] := v39;
  assert {:sourceloc} {:sourceloc_num 42} true;
  v40 := $$binBaseAddr[BV32_ADD(BV32_ADD(BV32_MUL($offset, 4bv32), v36), BV32_ADD(v37, 16bv32))];
  assert {:sourceloc} {:sourceloc_num 43} true;
  $$opencl_cutoff_potential_lattice.AtomBinCache[BV32_ADD(BV32_ADD(v38, v37), 16bv32)] := v40;
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 44} true;
  $nbrid.1, $bincnt.0 := BV32_ADD($nbrid.1, 8bv32), BV32_ADD($bincnt.0, 1bv32);
  goto $for.cond.74;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 45} true;
  call {:sourceloc_num 46} $bugle_barrier(1bv1, 1bv1);
  assert {:sourceloc} {:sourceloc_num 47} true;
  v41 := $$NbrListLen[0bv32];
  v42 := BV32_SGT(BV32_ADD($totalbins.0, 32bv32), v41);
  goto $truebb2, $falsebb2;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  assert {:sourceloc} {:sourceloc_num 49} true;
  v43 := $$NbrListLen[0bv32];
  $numbins.1 := BV32_SUB(v43, $totalbins.0);
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 50} true;
  $energy.1, $bincnt.1 := $energy.0, 0bv32;
  goto $for.cond.124;
$for.cond.124:
  assert {:block_sourceloc} {:sourceloc_num 51} true;
  v44 := BV32_SLT($bincnt.1, $numbins.1);
  goto $truebb3, $falsebb3;
$for.body.127:
  assert {:block_sourceloc} {:sourceloc_num 52} true;
  $energy.2, $i128.0 := $energy.1, 0bv32;
  goto $for.cond.129;
$for.cond.129:
  assert {:block_sourceloc} {:sourceloc_num 53} true;
  v45 := BV32_SLT($i128.0, 8bv32);
  goto $truebb4, $falsebb4;
$for.body.132:
  assert {:block_sourceloc} {:sourceloc_num 54} true;
  assert {:sourceloc} {:sourceloc_num 55} true;
  v46 := $$opencl_cutoff_potential_lattice.AtomBinCache[BV32_ADD(BV32_MUL($bincnt.1, 32bv32), BV32_MUL($i128.0, 4bv32))];
  assert {:sourceloc} {:sourceloc_num 56} true;
  v47 := $$opencl_cutoff_potential_lattice.AtomBinCache[BV32_ADD(BV32_ADD(BV32_MUL($bincnt.1, 32bv32), BV32_MUL($i128.0, 4bv32)), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 57} true;
  v48 := $$opencl_cutoff_potential_lattice.AtomBinCache[BV32_ADD(BV32_ADD(BV32_MUL($bincnt.1, 32bv32), BV32_MUL($i128.0, 4bv32)), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 58} true;
  v49 := $$opencl_cutoff_potential_lattice.AtomBinCache[BV32_ADD(BV32_ADD(BV32_MUL($bincnt.1, 32bv32), BV32_MUL($i128.0, 4bv32)), 3bv32)];
  v50 := FEQ32(0bv32, v49);
  goto $truebb5, $falsebb5;
$if.then.154:
  assert {:block_sourceloc} {:sourceloc_num 59} true;
  goto $for.end.178;
$if.end.155:
  assert {:block_sourceloc} {:sourceloc_num 60} true;
  v51 := FADD32(FMUL32(FSUB32(v48, v5), FSUB32(v48, v5)), FADD32(FMUL32(FSUB32(v46, v3), FSUB32(v46, v3)), FMUL32(FSUB32(v47, v4), FSUB32(v47, v4))));
  v52 := FLT32(v51, $cutoff2);
  goto $truebb6, $falsebb6;
$if.then.167:
  assert {:block_sourceloc} {:sourceloc_num 61} true;
  v53 := FADD32(FMUL32(FSUB32(2147483648bv32, v51), $inv_cutoff2), 1065353216bv32);
  $energy.3 := FADD32($energy.2, FMUL32(FMUL32(FMUL32(v49, FDIV32(1065353216bv32, FSQRT32(v51))), v53), v53));
  goto $if.end.175;
$if.end.175:
  assert {:block_sourceloc} {:sourceloc_num 62} true;
  goto $for.inc.176;
$for.inc.176:
  assert {:block_sourceloc} {:sourceloc_num 63} true;
  $energy.2, $i128.0 := $energy.3, BV32_ADD($i128.0, 1bv32);
  goto $for.cond.129;
$for.end.178:
  assert {:block_sourceloc} {:sourceloc_num 64} true;
  goto $for.inc.179;
$for.inc.179:
  assert {:block_sourceloc} {:sourceloc_num 65} true;
  $energy.1, $bincnt.1 := $energy.2, BV32_ADD($bincnt.1, 1bv32);
  goto $for.cond.124;
$for.end.181:
  assert {:block_sourceloc} {:sourceloc_num 66} true;
  call {:sourceloc_num 67} $bugle_barrier(1bv1, 1bv1);
  goto $for.inc.182;
$for.inc.182:
  assert {:block_sourceloc} {:sourceloc_num 68} true;
  $nbrid.0, $totalbins.0, $numbins.0, $energy.0 := $nbrid.1, BV32_ADD($totalbins.0, $numbins.1), $numbins.1, $energy.1;
  goto $for.cond;
$for.end.184:
  assert {:block_sourceloc} {:sourceloc_num 69} true;
  assert {:sourceloc} {:sourceloc_num 70} true;
  $$regionZeroAddr[BV32_ADD(BV32_ADD(v1, v2), v0)] := $energy.0;
  return;
$truebb:
  assume {:partition} v7;
  assert {:block_sourceloc} {:sourceloc_num 71} true;
  goto $for.body;
$falsebb:
  assume {:partition} !v7;
  assert {:block_sourceloc} {:sourceloc_num 72} true;
  goto $for.end.184;
$truebb0:
  assume {:partition} v9;
  assert {:block_sourceloc} {:sourceloc_num 73} true;
  goto $land.rhs;
$falsebb0:
  assume {:partition} !v9;
  assert {:block_sourceloc} {:sourceloc_num 74} true;
  $0 := 0bv1;
  goto $land.end;
$truebb1:
  assume {:partition} v11;
  assert {:block_sourceloc} {:sourceloc_num 75} true;
  goto $for.body.95;
$falsebb1:
  assume {:partition} !v11;
  assert {:block_sourceloc} {:sourceloc_num 76} true;
  goto $for.end;
$truebb2:
  assume {:partition} v42;
  assert {:block_sourceloc} {:sourceloc_num 77} true;
  goto $if.then;
$falsebb2:
  assume {:partition} !v42;
  assert {:block_sourceloc} {:sourceloc_num 78} true;
  $numbins.1 := $numbins.0;
  goto $if.end;
$truebb3:
  assume {:partition} v44;
  assert {:block_sourceloc} {:sourceloc_num 79} true;
  goto $for.body.127;
$falsebb3:
  assume {:partition} !v44;
  assert {:block_sourceloc} {:sourceloc_num 80} true;
  goto $for.end.181;
$truebb4:
  assume {:partition} v45;
  assert {:block_sourceloc} {:sourceloc_num 81} true;
  goto $for.body.132;
$falsebb4:
  assume {:partition} !v45;
  assert {:block_sourceloc} {:sourceloc_num 82} true;
  goto $for.end.178;
$truebb5:
  assume {:partition} v50;
  assert {:block_sourceloc} {:sourceloc_num 83} true;
  goto $if.then.154;
$falsebb5:
  assume {:partition} !v50;
  assert {:block_sourceloc} {:sourceloc_num 84} true;
  goto $if.end.155;
$truebb6:
  assume {:partition} v52;
  assert {:block_sourceloc} {:sourceloc_num 85} true;
  goto $if.then.167;
$falsebb6:
  assume {:partition} !v52;
  assert {:block_sourceloc} {:sourceloc_num 86} true;
  $energy.3 := $energy.2;
  goto $if.end.175;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_x == 8bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_y == 8bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 2bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 44bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 11bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_x == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_y == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_z == 0bv32 then 1bv1 else 0bv1) != 0bv1;
