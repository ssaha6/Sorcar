type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "x"} {:global} $$x : [bv32]bv32;
axiom {:array_info "$$x"} {:global} {:elem_width 32} {:source_name "x"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$x : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$x : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$x : bool;

var {:source_name "y"} {:global} $$y : [bv32]bv32;
axiom {:array_info "$$y"} {:global} {:elem_width 32} {:source_name "y"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$y : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$y : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$y : bool;

var {:source_name "z"} {:global} $$z : [bv32]bv32;
axiom {:array_info "$$z"} {:global} {:elem_width 32} {:source_name "z"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$z : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$z : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$z : bool;

var {:source_name "Qr"} {:global} $$Qr : [bv32]bv32;
axiom {:array_info "$$Qr"} {:global} {:elem_width 32} {:source_name "Qr"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$Qr : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$Qr : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$Qr : bool;

var {:source_name "Qi"} {:global} $$Qi : [bv32]bv32;
axiom {:array_info "$$Qi"} {:global} {:elem_width 32} {:source_name "Qi"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$Qi : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$Qi : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$Qi : bool;

var {:source_name "ck"} {:global} $$ck : [bv32]bv32;
axiom {:array_info "$$ck"} {:global} {:elem_width 32} {:source_name "ck"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$ck : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$ck : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$ck : bool;

var {:source_name "sX"} $$sX : [bv32]bv32;
axiom {:array_info "$$sX"} {:elem_width 32} {:source_name "sX"} {:source_elem_width 32} {:source_dimensions "4"} true;

var {:source_name "sY"} $$sY : [bv32]bv32;
axiom {:array_info "$$sY"} {:elem_width 32} {:source_name "sY"} {:source_elem_width 32} {:source_dimensions "4"} true;

var {:source_name "sZ"} $$sZ : [bv32]bv32;
axiom {:array_info "$$sZ"} {:elem_width 32} {:source_name "sZ"} {:source_elem_width 32} {:source_dimensions "4"} true;

var {:source_name "sQr"} $$sQr : [bv32]bv32;
axiom {:array_info "$$sQr"} {:elem_width 32} {:source_name "sQr"} {:source_elem_width 32} {:source_dimensions "4"} true;

var {:source_name "sQi"} $$sQi : [bv32]bv32;
axiom {:array_info "$$sQi"} {:elem_width 32} {:source_name "sQi"} {:source_elem_width 32} {:source_dimensions "4"} true;

const _WATCHED_OFFSET : bv32;
const {:global_offset_x} global_offset_x : bv32;
const {:global_offset_y} global_offset_y : bv32;
const {:global_offset_z} global_offset_z : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FADD32(bv32, bv32) : bv32;
function FCOS32(bv32) : bv32;
function FMUL32(bv32, bv32) : bv32;
function FSIN32(bv32) : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
procedure {:source_name "ComputeQ_GPU"} {:kernel} $ComputeQ_GPU($numK:bv32, $kGlobalIndex:bv32)
{
  var $tx.0:bv32;
  var $kIndex.0:bv32;
  var $kGlobalIndex.addr.0:bv32;
  var $0:bv1;
  var $tx21.0:bv32;
  var $tx47.0:bv32;
  var v4:bv32;
  var v2:bv32;
  var v5:bv32;
  var v3:bv32;
  var v6:bv32;
  var v9:bv32;
  var v10:bv32;
  var v11:bv32;
  var v1:bv32;
  var v0:bool;
  var v7:bool;
  var v8:bool;
  var v13:bool;
  var v16:bv32;
  var v22:bv32;
  var v23:bv32;
  var v12:bv32;
  var v19:bv32;
  var v14:bv32;
  var v18:bv32;
  var v15:bv32;
  var v17:bv32;
  var v20:bool;
  var v21:bv32;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  $tx.0 := 0bv32;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  v0 := BV32_SLT($tx.0, 4bv32);
  goto $truebb, $falsebb;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v1 := BV32_ADD(BV32_ADD(BV32_MUL(group_id_x, 256bv32), BV32_MUL(4bv32, local_id_x)), $tx.0);
  assert {:sourceloc} {:sourceloc_num 3} true;
  v2 := $$x[v1];
  assert {:sourceloc} {:sourceloc_num 4} true;
  $$sX[$tx.0] := v2;
  assert {:sourceloc} {:sourceloc_num 5} true;
  v3 := $$y[v1];
  assert {:sourceloc} {:sourceloc_num 6} true;
  $$sY[$tx.0] := v3;
  assert {:sourceloc} {:sourceloc_num 7} true;
  v4 := $$z[v1];
  assert {:sourceloc} {:sourceloc_num 8} true;
  $$sZ[$tx.0] := v4;
  assert {:sourceloc} {:sourceloc_num 9} true;
  v5 := $$Qr[v1];
  assert {:sourceloc} {:sourceloc_num 10} true;
  $$sQr[$tx.0] := v5;
  assert {:sourceloc} {:sourceloc_num 11} true;
  v6 := $$Qi[v1];
  assert {:sourceloc} {:sourceloc_num 12} true;
  $$sQi[$tx.0] := v6;
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  $tx.0 := BV32_ADD($tx.0, 1bv32);
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  $kIndex.0, $kGlobalIndex.addr.0 := 0bv32, $kGlobalIndex;
  goto $for.cond.13;
$for.cond.13:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  v7 := BV32_SLT($kIndex.0, 1024bv32);
  goto $truebb0, $falsebb0;
$land.rhs:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  $0 := (if BV32_SLT($kGlobalIndex.addr.0, $numK) then 1bv1 else 0bv1);
  goto $land.end;
$land.end:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  v8 := $0 == 1bv1;
  goto $truebb1, $falsebb1;
$for.body.16:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  assert {:sourceloc} {:sourceloc_num 19} true;
  v9 := $$ck[BV32_MUL($kIndex.0, 4bv32)];
  assert {:sourceloc} {:sourceloc_num 20} true;
  v10 := $$ck[BV32_ADD(BV32_MUL($kIndex.0, 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 21} true;
  v11 := $$ck[BV32_ADD(BV32_MUL($kIndex.0, 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 22} true;
  v12 := $$ck[BV32_ADD(BV32_MUL($kIndex.0, 4bv32), 3bv32)];
  $tx21.0 := 0bv32;
  goto $for.cond.22;
$for.cond.22:
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  v13 := BV32_SLT($tx21.0, 4bv32);
  goto $truebb2, $falsebb2;
$for.body.24:
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  assert {:sourceloc} {:sourceloc_num 25} true;
  v14 := $$sX[$tx21.0];
  assert {:sourceloc} {:sourceloc_num 26} true;
  v15 := $$sY[$tx21.0];
  assert {:sourceloc} {:sourceloc_num 27} true;
  v16 := $$sZ[$tx21.0];
  v17 := FMUL32(1086918619bv32, FADD32(FMUL32(v11, v16), FADD32(FMUL32(v9, v14), FMUL32(v10, v15))));
  assert {:sourceloc} {:sourceloc_num 28} true;
  v18 := $$sQr[$tx21.0];
  assert {:sourceloc} {:sourceloc_num 29} true;
  $$sQr[$tx21.0] := FADD32(v18, FMUL32(v12, FCOS32(v17)));
  assert {:sourceloc} {:sourceloc_num 30} true;
  v19 := $$sQi[$tx21.0];
  assert {:sourceloc} {:sourceloc_num 31} true;
  $$sQi[$tx21.0] := FADD32(v19, FMUL32(v12, FSIN32(v17)));
  goto $for.inc.40;
$for.inc.40:
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  $tx21.0 := BV32_ADD($tx21.0, 1bv32);
  goto $for.cond.22;
$for.end.42:
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  goto $for.inc.43;
$for.inc.43:
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  $kIndex.0, $kGlobalIndex.addr.0 := BV32_ADD($kIndex.0, 1bv32), BV32_ADD($kGlobalIndex.addr.0, 1bv32);
  goto $for.cond.13;
$for.end.46:
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  $tx47.0 := 0bv32;
  goto $for.cond.48;
$for.cond.48:
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  v20 := BV32_SLT($tx47.0, 4bv32);
  goto $truebb3, $falsebb3;
$for.body.50:
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  v21 := BV32_ADD(BV32_ADD(BV32_MUL(group_id_x, 256bv32), BV32_MUL(4bv32, local_id_x)), $tx47.0);
  assert {:sourceloc} {:sourceloc_num 38} true;
  v22 := $$sQr[$tx47.0];
  assert {:sourceloc} {:sourceloc_num 39} true;
  $$Qr[v21] := v22;
  assert {:sourceloc} {:sourceloc_num 40} true;
  v23 := $$sQi[$tx47.0];
  assert {:sourceloc} {:sourceloc_num 41} true;
  $$Qi[v21] := v23;
  goto $for.inc.62;
$for.inc.62:
  assert {:block_sourceloc} {:sourceloc_num 42} true;
  $tx47.0 := BV32_ADD($tx47.0, 1bv32);
  goto $for.cond.48;
$for.end.64:
  assert {:block_sourceloc} {:sourceloc_num 43} true;
  return;
$truebb:
  assume {:partition} v0;
  assert {:block_sourceloc} {:sourceloc_num 44} true;
  goto $for.body;
$falsebb:
  assume {:partition} !v0;
  assert {:block_sourceloc} {:sourceloc_num 45} true;
  goto $for.end;
$truebb0:
  assume {:partition} v7;
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  goto $land.rhs;
$falsebb0:
  assume {:partition} !v7;
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  $0 := 0bv1;
  goto $land.end;
$truebb1:
  assume {:partition} v8;
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  goto $for.body.16;
$falsebb1:
  assume {:partition} !v8;
  assert {:block_sourceloc} {:sourceloc_num 49} true;
  goto $for.end.46;
$truebb2:
  assume {:partition} v13;
  assert {:block_sourceloc} {:sourceloc_num 50} true;
  goto $for.body.24;
$falsebb2:
  assume {:partition} !v13;
  assert {:block_sourceloc} {:sourceloc_num 51} true;
  goto $for.end.42;
$truebb3:
  assume {:partition} v20;
  assert {:block_sourceloc} {:sourceloc_num 52} true;
  goto $for.body.50;
$falsebb3:
  assume {:partition} !v20;
  assert {:block_sourceloc} {:sourceloc_num 53} true;
  goto $for.end.64;
}
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 64bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 128bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_x == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_y == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_z == 0bv32 then 1bv1 else 0bv1) != 0bv1;
