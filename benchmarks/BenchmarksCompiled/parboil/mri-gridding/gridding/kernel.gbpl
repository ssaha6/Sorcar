type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "sample_g"} {:global} $$sample_g : [bv32]bv32;
axiom {:array_info "$$sample_g"} {:global} {:elem_width 32} {:source_name "sample_g"} {:source_elem_width 192} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 192} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$sample_g : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 192} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$sample_g : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 192} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$sample_g : bool;

var {:source_name "binStartAddr_g"} {:global} $$binStartAddr_g : [bv32]bv32;
axiom {:array_info "$$binStartAddr_g"} {:global} {:elem_width 32} {:source_name "binStartAddr_g"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$binStartAddr_g : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$binStartAddr_g : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$binStartAddr_g : bool;

var {:source_name "gridData_g"} {:global} $$gridData_g : [bv32]bv32;
axiom {:array_info "$$gridData_g"} {:global} {:elem_width 32} {:source_name "gridData_g"} {:source_elem_width 64} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 64} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$gridData_g : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 64} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$gridData_g : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 64} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$gridData_g : bool;

var {:source_name "sampleDensity_g"} {:global} $$sampleDensity_g : [bv32]bv32;
axiom {:array_info "$$sampleDensity_g"} {:global} {:elem_width 32} {:source_name "sampleDensity_g"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$sampleDensity_g : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$sampleDensity_g : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$sampleDensity_g : bool;

var {:source_name "sharedBin"} {:group_shared} $$gridding_GPU.sharedBin : [bv32]bv32;
axiom {:array_info "$$gridding_GPU.sharedBin"} {:group_shared} {:elem_width 32} {:source_name "sharedBin"} {:source_elem_width 192} {:source_dimensions "64"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 192} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$gridding_GPU.sharedBin : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 192} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$gridding_GPU.sharedBin : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 192} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$gridding_GPU.sharedBin : bool;

const _WATCHED_OFFSET : bv32;
const {:global_offset_x} global_offset_x : bv32;
const {:global_offset_y} global_offset_y : bv32;
const {:global_offset_z} global_offset_z : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_id_y} group_id_y : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:local_id_y} local_id_y : bv32;
const {:local_id_z} local_id_z : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FADD32(bv32, bv32) : bv32;
function FADD64(bv64, bv64) : bv64;
function FDIV32(bv32, bv32) : bv32;
function FLT32(bv32, bv32) : bool;
function FLT64(bv64, bv64) : bool;
function FMUL32(bv32, bv32) : bv32;
function FMUL64(bv64, bv64) : bv64;
function FP32_CONV64(bv32) : bv64;
function FP64_CONV32(bv64) : bv32;
function FP64_TO_SI32(bv64) : bv32;
function FSQRT64(bv64) : bv64;
function FSUB32(bv32, bv32) : bv32;
function FSUB64(bv64, bv64) : bv64;
function FUNO32(bv32, bv32) : bool;
function SI32_TO_FP32(bv32) : bv32;
function SI32_TO_FP64(bv32) : bv64;
function UI32_TO_FP64(bv32) : bv64;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvlshr"} BV32_LSHR(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvsge"} BV32_SGE(bv32, bv32) : bool;
function {:bvbuiltin "bvshl"} BV32_SHL(bv32, bv32) : bv32;
function {:bvbuiltin "bvsle"} BV32_SLE(bv32, bv32) : bool;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvugt"} BV32_UGT(bv32, bv32) : bool;
function {:bvbuiltin "bvult"} BV32_ULT(bv32, bv32) : bool;
function {:bvbuiltin "bvurem"} BV32_UREM(bv32, bv32) : bv32;
procedure {:source_name "gridding_GPU"} {:kernel} $gridding_GPU($beta:bv32)
{
  var $cond:bv32;
  var $cond40:bv32;
  var $cond49:bv32;
  var $cond60:bv32;
  var $cond69:bv32;
  var $cond80:bv32;
  var $pt.0:bv64;
  var $density.0:bv32;
  var $z.0:bv32;
  var $pt.1:bv64;
  var $density.1:bv32;
  var $y.0:bv32;
  var $pt.2:bv64;
  var $density.2:bv32;
  var $x.0:bv32;
  var $cond112:bv32;
  var $pt.3:bv64;
  var $density.3:bv32;
  var $j.0:bv32;
  var $pt.5:bv64;
  var $density.5:bv32;
  var $pt.4:bv64;
  var $density.4:bv32;
  var v37:bv32;
  var v38:bv32;
  var v33:bv32;
  var v39:bv32;
  var v35:bv32;
  var v34:bv32;
  var v47:bv32;
  var v44:bv32;
  var v45:bv32;
  var v46:bv32;
  var v43:bv32;
  var v48:bv32;
  var v24:bv32;
  var v25:bv32;
  var v30:bv32;
  var v32:bv32;
  var v31:bv32;
  var v0:bv32;
  var v2:bv32;
  var v4:bv32;
  var v6:bv32;
  var v3:bv32;
  var v5:bv32;
  var v1:bv32;
  var v7:bv32;
  var v8:bool;
  var v10:bool;
  var v9:bv32;
  var v15:bv32;
  var v14:bool;
  var v16:bool;
  var v17:bv32;
  var v18:bool;
  var v13:bv32;
  var v11:bv32;
  var v12:bool;
  var v19:bv32;
  var v20:bool;
  var v22:bv32;
  var v23:bv32;
  var v26:bv32;
  var v21:bool;
  var v29:bool;
  var v28:bool;
  var v27:bool;
  var v36:bool;
  var v40:bool;
  var v41:bool;
  var v42:bool;
  var v52:bv32;
  var v49:bv32;
  var v50:bool;
  var v51:bv32;
  var v53:bv32;
  var v54:bv32;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  v0 := BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(local_id_z, group_size_y), group_size_x), BV32_MUL(local_id_y, group_size_x)), local_id_x);
  v1 := BV32_MUL(group_size_z, BV32_UDIV(group_id_y, BV32_UDIV(256bv32, group_size_y)));
  v2 := BV32_MUL(group_size_y, BV32_UREM(group_id_y, BV32_UDIV(256bv32, group_size_y)));
  v3 := BV32_MUL(group_id_x, group_size_x);
  v4 := BV32_ADD(v3, local_id_x);
  v5 := BV32_ADD(v2, local_id_y);
  v6 := BV32_ADD(v1, local_id_z);
  v7 := FP64_TO_SI32(FSUB64(SI32_TO_FP64(v3), 4613937818241073152bv64));
  v8 := BV32_SLT(v7, 0bv32);
  goto $truebb, $falsebb;
$cond.true:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  $cond := 0bv32;
  goto $cond.end;
$cond.false:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  $cond := v7;
  goto $cond.end;
$cond.end:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  v9 := FP64_TO_SI32(FADD64(UI32_TO_FP64(BV32_ADD(v3, group_size_x)), 4612811918334230528bv64));
  v10 := BV32_SGE(v9, 256bv32);
  goto $truebb0, $falsebb0;
$cond.true.37:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  $cond40 := 255bv32;
  goto $cond.end.39;
$cond.false.38:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  $cond40 := v9;
  goto $cond.end.39;
$cond.end.39:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  v11 := FP64_TO_SI32(FSUB64(SI32_TO_FP64(v2), 4613937818241073152bv64));
  v12 := BV32_SLT(v11, 0bv32);
  goto $truebb1, $falsebb1;
$cond.true.46:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  $cond49 := 0bv32;
  goto $cond.end.48;
$cond.false.47:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  $cond49 := v11;
  goto $cond.end.48;
$cond.end.48:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  v13 := FP64_TO_SI32(FADD64(UI32_TO_FP64(BV32_ADD(v2, group_size_y)), 4612811918334230528bv64));
  v14 := BV32_SGE(v13, 256bv32);
  goto $truebb2, $falsebb2;
$cond.true.57:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  $cond60 := 255bv32;
  goto $cond.end.59;
$cond.false.58:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  $cond60 := v13;
  goto $cond.end.59;
$cond.end.59:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  v15 := FP64_TO_SI32(FSUB64(SI32_TO_FP64(v1), 4613937818241073152bv64));
  v16 := BV32_SLT(v15, 0bv32);
  goto $truebb3, $falsebb3;
$cond.true.66:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  $cond69 := 0bv32;
  goto $cond.end.68;
$cond.false.67:
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  $cond69 := v15;
  goto $cond.end.68;
$cond.end.68:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  v17 := FP64_TO_SI32(FADD64(UI32_TO_FP64(BV32_ADD(v1, group_size_z)), 4612811918334230528bv64));
  v18 := BV32_SGE(v17, 256bv32);
  goto $truebb4, $falsebb4;
$cond.true.77:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  $cond80 := 255bv32;
  goto $cond.end.79;
$cond.false.78:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  $cond80 := v17;
  goto $cond.end.79;
$cond.end.79:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  v19 := BV32_ADD(BV32_ADD(BV32_MUL(v6, 65536bv32), BV32_MUL(v5, 256bv32)), v4);
  $pt.0, $density.0, $z.0 := 0bv64, 0bv32, $cond69;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 19} true;
  v20 := BV32_SLE($z.0, $cond80);
  goto $truebb5, $falsebb5;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  $pt.1, $density.1, $y.0 := $pt.0, $density.0, $cond49;
  goto $for.cond.87;
$for.cond.87:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  v21 := BV32_SLE($y.0, $cond60);
  goto $truebb6, $falsebb6;
$for.body.90:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  v22 := BV32_MUL($z.0, 65536bv32);
  v23 := BV32_MUL($y.0, 256bv32);
  assert {:sourceloc} {:sourceloc_num 23} true;
  v24 := $$binStartAddr_g[BV32_ADD(BV32_ADD(v22, v23), $cond)];
  assert {:sourceloc} {:sourceloc_num 24} true;
  v25 := $$binStartAddr_g[BV32_ADD(BV32_ADD(BV32_ADD(v22, v23), $cond40), 1bv32)];
  v26 := BV32_SUB(v25, v24);
  $pt.2, $density.2, $x.0 := $pt.1, $density.1, 0bv32;
  goto $for.cond.98;
$for.cond.98:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  v27 := BV32_ULT($x.0, BV32_LSHR(BV32_SUB(BV32_ADD(v26, 64bv32), 1bv32), 6bv32));
  goto $truebb7, $falsebb7;
$for.body.103:
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  v28 := BV32_UGT(BV32_SUB(v26, BV32_SHL($x.0, 6bv32)), 64bv32);
  goto $truebb8, $falsebb8;
$cond.true.107:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  $cond112 := 64bv32;
  goto $cond.end.111;
$cond.false.108:
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  $cond112 := BV32_SUB(v26, BV32_SHL($x.0, 6bv32));
  goto $cond.end.111;
$cond.end.111:
  assert {:block_sourceloc} {:sourceloc_num 29} true;
  call {:sourceloc_num 30} $bugle_barrier(1bv1, 0bv1);
  v29 := BV32_SLT(v0, $cond112);
  goto $truebb9, $falsebb9;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  assert {:sourceloc} {:sourceloc_num 32} true;
  v30 := $$sample_g[BV32_MUL(BV32_ADD(v24, BV32_ADD(v0, BV32_SHL($x.0, 6bv32))), 6bv32)];
  assert {:sourceloc} {:sourceloc_num 33} true;
  $$gridding_GPU.sharedBin[BV32_MUL(v0, 6bv32)] := v30;
  assert {:sourceloc} {:sourceloc_num 34} true;
  v31 := $$sample_g[BV32_ADD(BV32_MUL(BV32_ADD(v24, BV32_ADD(v0, BV32_SHL($x.0, 6bv32))), 6bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 35} true;
  $$gridding_GPU.sharedBin[BV32_ADD(BV32_MUL(v0, 6bv32), 1bv32)] := v31;
  assert {:sourceloc} {:sourceloc_num 36} true;
  v32 := $$sample_g[BV32_ADD(BV32_MUL(BV32_ADD(v24, BV32_ADD(v0, BV32_SHL($x.0, 6bv32))), 6bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 37} true;
  $$gridding_GPU.sharedBin[BV32_ADD(BV32_MUL(v0, 6bv32), 2bv32)] := v32;
  assert {:sourceloc} {:sourceloc_num 38} true;
  v33 := $$sample_g[BV32_ADD(BV32_MUL(BV32_ADD(v24, BV32_ADD(v0, BV32_SHL($x.0, 6bv32))), 6bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 39} true;
  $$gridding_GPU.sharedBin[BV32_ADD(BV32_MUL(v0, 6bv32), 3bv32)] := v33;
  assert {:sourceloc} {:sourceloc_num 40} true;
  v34 := $$sample_g[BV32_ADD(BV32_MUL(BV32_ADD(v24, BV32_ADD(v0, BV32_SHL($x.0, 6bv32))), 6bv32), 4bv32)];
  assert {:sourceloc} {:sourceloc_num 41} true;
  $$gridding_GPU.sharedBin[BV32_ADD(BV32_MUL(v0, 6bv32), 4bv32)] := v34;
  assert {:sourceloc} {:sourceloc_num 42} true;
  v35 := $$sample_g[BV32_ADD(BV32_MUL(BV32_ADD(v24, BV32_ADD(v0, BV32_SHL($x.0, 6bv32))), 6bv32), 5bv32)];
  assert {:sourceloc} {:sourceloc_num 43} true;
  $$gridding_GPU.sharedBin[BV32_ADD(BV32_MUL(v0, 6bv32), 5bv32)] := v35;
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 44} true;
  call {:sourceloc_num 45} $bugle_barrier(1bv1, 0bv1);
  $pt.3, $density.3, $j.0 := $pt.2, $density.2, 0bv32;
  goto $for.cond.119;
$for.cond.119:
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  v36 := BV32_SLT($j.0, $cond112);
  goto $truebb10, $falsebb10;
$for.body.122:
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  assert {:sourceloc} {:sourceloc_num 48} true;
  v37 := $$gridding_GPU.sharedBin[BV32_MUL($j.0, 6bv32)];
  assert {:sourceloc} {:sourceloc_num 49} true;
  v38 := $$gridding_GPU.sharedBin[BV32_ADD(BV32_MUL($j.0, 6bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 50} true;
  v39 := $$gridding_GPU.sharedBin[BV32_ADD(BV32_MUL($j.0, 6bv32), 5bv32)];
  v40 := (FLT32(0bv32, v37) || FLT32(v37, 0bv32)) || FUNO32(v37, 0bv32);
  goto $truebb11, $falsebb11;
$lor.lhs.false:
  assert {:block_sourceloc} {:sourceloc_num 51} true;
  v41 := (FLT32(0bv32, v38) || FLT32(v38, 0bv32)) || FUNO32(v38, 0bv32);
  goto $truebb12, $falsebb12;
$land.lhs.true:
  assert {:block_sourceloc} {:sourceloc_num 52} true;
  v42 := (FLT32(0bv32, v39) || FLT32(v39, 0bv32)) || FUNO32(v39, 0bv32);
  goto $truebb13, $falsebb13;
$if.then.135:
  assert {:block_sourceloc} {:sourceloc_num 53} true;
  assert {:sourceloc} {:sourceloc_num 54} true;
  v43 := $$gridding_GPU.sharedBin[BV32_ADD(BV32_MUL($j.0, 6bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 55} true;
  v44 := $$gridding_GPU.sharedBin[BV32_ADD(BV32_MUL($j.0, 6bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 56} true;
  v45 := $$gridding_GPU.sharedBin[BV32_ADD(BV32_MUL($j.0, 6bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 57} true;
  v46 := $$gridding_GPU.sharedBin[BV32_ADD(BV32_MUL($j.0, 6bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 58} true;
  v47 := $$gridding_GPU.sharedBin[BV32_ADD(BV32_MUL($j.0, 6bv32), 4bv32)];
  assert {:sourceloc} {:sourceloc_num 59} true;
  v48 := $$gridding_GPU.sharedBin[BV32_ADD(BV32_MUL($j.0, 6bv32), 4bv32)];
  v49 := FADD32(FADD32(FMUL32(FSUB32(v43, SI32_TO_FP32(v4)), FSUB32(v44, SI32_TO_FP32(v4))), FMUL32(FSUB32(v45, SI32_TO_FP32(v5)), FSUB32(v46, SI32_TO_FP32(v5)))), FMUL32(FSUB32(v47, SI32_TO_FP32(v6)), FSUB32(v48, SI32_TO_FP32(v6))));
  v50 := FLT64(FP32_CONV64(v49), 4618722892845154304bv64);
  goto $truebb14, $falsebb14;
$if.then.165:
  assert {:block_sourceloc} {:sourceloc_num 60} true;
  v51 := FP64_CONV32(FMUL64(FP32_CONV64($beta), FSQRT64(FADD64(FMUL64(FSUB64(9223372036854775808bv64, FP32_CONV64(v49)), 4594932627813569659bv64), 4607182418800017408bv64))));
  v52 := FMUL32(v51, v51);
  v53 := FMUL32(FDIV32(FSUB32(2147483648bv32, FADD32(FMUL32(v52, FADD32(FMUL32(v52, FADD32(FMUL32(v52, FADD32(FMUL32(v52, FADD32(FMUL32(v52, FADD32(FMUL32(v52, FADD32(FMUL32(v52, FADD32(FMUL32(v52, FADD32(FMUL32(v52, FADD32(FMUL32(v52, FADD32(FMUL32(v52, FADD32(FMUL32(v52, FADD32(FMUL32(v52, FADD32(FMUL32(v52, 432777539bv32), 523487654bv32)), 610081361bv32)), 692319900bv32)), 772037077bv32)), 847880648bv32)), 920370152bv32)), 990168357bv32)), 1055725654bv32)), 1117183506bv32)), 1174523828bv32)), 1225494738bv32)), 1269111979bv32)), 1302990772bv32)), 1319876621bv32)), FADD32(FMUL32(v52, FADD32(FMUL32(v52, FSUB32(v52, 1161840514bv32)), 1247030429bv32)), 3467360269bv32)), v39);
  v54 := $pt.3[64:32];
  $pt.4, $density.4 := FADD32(v54, FMUL32(v53, v38)) ++ FADD32($pt.3[32:0], FMUL32(v53, v37)), FADD32($density.3, 1065353216bv32);
  goto $if.end.179;
$if.end.179:
  assert {:block_sourceloc} {:sourceloc_num 61} true;
  $pt.5, $density.5 := $pt.4, $density.4;
  goto $if.end.180;
$if.end.180:
  assert {:block_sourceloc} {:sourceloc_num 62} true;
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 63} true;
  $pt.3, $density.3, $j.0 := $pt.5, $density.5, BV32_ADD($j.0, 1bv32);
  goto $for.cond.119;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 64} true;
  goto $for.inc.181;
$for.inc.181:
  assert {:block_sourceloc} {:sourceloc_num 65} true;
  $pt.2, $density.2, $x.0 := $pt.3, $density.3, BV32_ADD($x.0, 1bv32);
  goto $for.cond.98;
$for.end.183:
  assert {:block_sourceloc} {:sourceloc_num 66} true;
  goto $for.inc.184;
$for.inc.184:
  assert {:block_sourceloc} {:sourceloc_num 67} true;
  $pt.1, $density.1, $y.0 := $pt.2, $density.2, BV32_ADD($y.0, 1bv32);
  goto $for.cond.87;
$for.end.186:
  assert {:block_sourceloc} {:sourceloc_num 68} true;
  goto $for.inc.187;
$for.inc.187:
  assert {:block_sourceloc} {:sourceloc_num 69} true;
  $pt.0, $density.0, $z.0 := $pt.1, $density.1, BV32_ADD($z.0, 1bv32);
  goto $for.cond;
$for.end.189:
  assert {:block_sourceloc} {:sourceloc_num 70} true;
  assert {:sourceloc} {:sourceloc_num 71} true;
  $$gridData_g[BV32_MUL(v19, 2bv32)] := $pt.0[32:0];
  assert {:sourceloc} {:sourceloc_num 72} true;
  $$gridData_g[BV32_ADD(BV32_MUL(v19, 2bv32), 1bv32)] := $pt.0[64:32];
  assert {:sourceloc} {:sourceloc_num 73} true;
  $$sampleDensity_g[v19] := $density.0;
  return;
$truebb:
  assume {:partition} v8;
  assert {:block_sourceloc} {:sourceloc_num 74} true;
  goto $cond.true;
$falsebb:
  assume {:partition} !v8;
  assert {:block_sourceloc} {:sourceloc_num 75} true;
  goto $cond.false;
$truebb0:
  assume {:partition} v10;
  assert {:block_sourceloc} {:sourceloc_num 76} true;
  goto $cond.true.37;
$falsebb0:
  assume {:partition} !v10;
  assert {:block_sourceloc} {:sourceloc_num 77} true;
  goto $cond.false.38;
$truebb1:
  assume {:partition} v12;
  assert {:block_sourceloc} {:sourceloc_num 78} true;
  goto $cond.true.46;
$falsebb1:
  assume {:partition} !v12;
  assert {:block_sourceloc} {:sourceloc_num 79} true;
  goto $cond.false.47;
$truebb2:
  assume {:partition} v14;
  assert {:block_sourceloc} {:sourceloc_num 80} true;
  goto $cond.true.57;
$falsebb2:
  assume {:partition} !v14;
  assert {:block_sourceloc} {:sourceloc_num 81} true;
  goto $cond.false.58;
$truebb3:
  assume {:partition} v16;
  assert {:block_sourceloc} {:sourceloc_num 82} true;
  goto $cond.true.66;
$falsebb3:
  assume {:partition} !v16;
  assert {:block_sourceloc} {:sourceloc_num 83} true;
  goto $cond.false.67;
$truebb4:
  assume {:partition} v18;
  assert {:block_sourceloc} {:sourceloc_num 84} true;
  goto $cond.true.77;
$falsebb4:
  assume {:partition} !v18;
  assert {:block_sourceloc} {:sourceloc_num 85} true;
  goto $cond.false.78;
$truebb5:
  assume {:partition} v20;
  assert {:block_sourceloc} {:sourceloc_num 86} true;
  goto $for.body;
$falsebb5:
  assume {:partition} !v20;
  assert {:block_sourceloc} {:sourceloc_num 87} true;
  goto $for.end.189;
$truebb6:
  assume {:partition} v21;
  assert {:block_sourceloc} {:sourceloc_num 88} true;
  goto $for.body.90;
$falsebb6:
  assume {:partition} !v21;
  assert {:block_sourceloc} {:sourceloc_num 89} true;
  goto $for.end.186;
$truebb7:
  assume {:partition} v27;
  assert {:block_sourceloc} {:sourceloc_num 90} true;
  goto $for.body.103;
$falsebb7:
  assume {:partition} !v27;
  assert {:block_sourceloc} {:sourceloc_num 91} true;
  goto $for.end.183;
$truebb8:
  assume {:partition} v28;
  assert {:block_sourceloc} {:sourceloc_num 92} true;
  goto $cond.true.107;
$falsebb8:
  assume {:partition} !v28;
  assert {:block_sourceloc} {:sourceloc_num 93} true;
  goto $cond.false.108;
$truebb9:
  assume {:partition} v29;
  assert {:block_sourceloc} {:sourceloc_num 94} true;
  goto $if.then;
$falsebb9:
  assume {:partition} !v29;
  assert {:block_sourceloc} {:sourceloc_num 95} true;
  goto $if.end;
$truebb10:
  assume {:partition} v36;
  assert {:block_sourceloc} {:sourceloc_num 96} true;
  goto $for.body.122;
$falsebb10:
  assume {:partition} !v36;
  assert {:block_sourceloc} {:sourceloc_num 97} true;
  goto $for.end;
$truebb11:
  assume {:partition} v40;
  assert {:block_sourceloc} {:sourceloc_num 98} true;
  goto $land.lhs.true;
$falsebb11:
  assume {:partition} !v40;
  assert {:block_sourceloc} {:sourceloc_num 99} true;
  goto $lor.lhs.false;
$truebb12:
  assume {:partition} v41;
  assert {:block_sourceloc} {:sourceloc_num 100} true;
  goto $land.lhs.true;
$falsebb12:
  assume {:partition} !v41;
  assert {:block_sourceloc} {:sourceloc_num 101} true;
  $pt.5, $density.5 := $pt.3, $density.3;
  goto $if.end.180;
$truebb13:
  assume {:partition} v42;
  assert {:block_sourceloc} {:sourceloc_num 102} true;
  goto $if.then.135;
$falsebb13:
  assume {:partition} !v42;
  assert {:block_sourceloc} {:sourceloc_num 103} true;
  $pt.5, $density.5 := $pt.3, $density.3;
  goto $if.end.180;
$truebb14:
  assume {:partition} v50;
  assert {:block_sourceloc} {:sourceloc_num 104} true;
  goto $if.then.165;
$falsebb14:
  assume {:partition} !v50;
  assert {:block_sourceloc} {:sourceloc_num 105} true;
  $pt.4, $density.4 := $pt.3, $density.3;
  goto $if.end.179;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_x == 8bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_y == 4bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 2bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 32bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 8192bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_x == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_y == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_z == 0bv32 then 1bv1 else 0bv1) != 0bv1;
