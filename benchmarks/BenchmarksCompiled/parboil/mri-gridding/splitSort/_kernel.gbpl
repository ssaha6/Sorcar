type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "keys"} {:global} $$keys : [bv32]bv32;
axiom {:array_info "$$keys"} {:global} {:elem_width 32} {:source_name "keys"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$keys : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$keys : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$keys : bool;

var {:source_name "values"} {:global} $$values : [bv32]bv32;
axiom {:array_info "$$values"} {:global} {:elem_width 32} {:source_name "values"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$values : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$values : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$values : bool;

var {:source_name "histo"} {:global} $$histo : [bv32]bv32;
axiom {:array_info "$$histo"} {:global} {:elem_width 32} {:source_name "histo"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$histo : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$histo : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$histo : bool;

var {:source_name "histo_s"} {:group_shared} $$splitSort.histo_s : [bv32]bv32;
axiom {:array_info "$$splitSort.histo_s"} {:group_shared} {:elem_width 32} {:source_name "histo_s"} {:source_elem_width 32} {:source_dimensions "16"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$splitSort.histo_s : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$splitSort.histo_s : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$splitSort.histo_s : bool;

var {:source_name "flags"} {:group_shared} $$splitSort.flags : [bv32]bv32;
axiom {:array_info "$$splitSort.flags"} {:group_shared} {:elem_width 32} {:source_name "flags"} {:source_elem_width 32} {:source_dimensions "1105"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$splitSort.flags : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$splitSort.flags : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$splitSort.flags : bool;

const _WATCHED_OFFSET : bv32;
const {:global_offset_x} global_offset_x : bv32;
const {:global_offset_y} global_offset_y : bv32;
const {:global_offset_z} global_offset_z : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvand"} BV32_AND(bv32, bv32) : bv32;
function {:bvbuiltin "bvlshr"} BV32_LSHR(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvsdiv"} BV32_SDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvshl"} BV32_SHL(bv32, bv32) : bv32;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "bvugt"} BV32_UGT(bv32, bv32) : bool;
function {:bvbuiltin "bvule"} BV32_ULE(bv32, bv32) : bool;
function {:bvbuiltin "bvult"} BV32_ULT(bv32, bv32) : bool;
function {:bvbuiltin "zero_extend 16"} BV16_ZEXT32(bv16) : bv32;
procedure {:source_name "splitSort"} {:kernel} $splitSort($numElems:bv32, $iter:bv32)
{
  var $lkey.0:bv128;
  var $lvalue.0:bv128;
  var $index.0:bv128;
  var $i.0:bv32;
  var $d.i.0:bv32;
  var $stride.i.0:bv32;
  var $d106.i.0:bv32;
  var $stride.i.1:bv32;
  var $cond:bv32;
  var $cond183:bv32;
  var $cond190:bv32;
  var $cond197:bv32;
  var v6:bv32;
  var v3:bv32;
  var v5:bv32;
  var v8:bv32;
  var v10:bv32;
  var v7:bv32;
  var v4:bv32;
  var v9:bv32;
  var v105:bv128;
  var v12:bv32;
  var v13:bv32;
  var v11:bool;
  var v1:bv32;
  var v2:bool;
  var v0:bv32;
  var v25:bv32;
  var v27:bv32;
  var v43:bv32;
  var v30:bv32;
  var v32:bv32;
  var v35:bv32;
  var v44:bv32;
  var v49:bv32;
  var v61:bv32;
  var v64:bv32;
  var v60:bv32;
  var v66:bv32;
  var v70:bv32;
  var v62:bv32;
  var v80:bv32;
  var v87:bv32;
  var v74:bv32;
  var v83:bv32;
  var v94:bv32;
  var v91:bv32;
  var v78:bv32;
  var v72:bv32;
  var v104:bv32;
  var v15:bv32;
  var v14:bv32;
  var v16:bool;
  var v17:bv32;
  var v18:bv32;
  var v21:bv32;
  var v19:bv32;
  var v20:bv32;
  var v23:bv32;
  var v22:bv32;
  var v24:bv32;
  var v26:bv32;
  var v28:bv32;
  var v29:bv32;
  var v33:bv32;
  var v31:bv32;
  var v34:bv32;
  var v36:bool;
  var v37:bool;
  var v38:bv32;
  var v39:bv32;
  var v40:bv32;
  var v41:bv32;
  var v58:bv32;
  var v57:bv32;
  var v59:bv32;
  var v63:bv32;
  var v56:bv32;
  var v47:bv32;
  var v48:bv32;
  var v45:bool;
  var v46:bv32;
  var v42:bv32;
  var v50:bv32;
  var v52:bv32;
  var v51:bool;
  var v53:bool;
  var v54:bv32;
  var v55:bv32;
  var v65:bv32;
  var v67:bv32;
  var v68:bv32;
  var v69:bv32;
  var v71:bv32;
  var v75:bv32;
  var v73:bv32;
  var v98:bool;
  var v100:bool;
  var v97:bv32;
  var v99:bv32;
  var v102:bool;
  var v101:bool;
  var v77:bv32;
  var v79:bv32;
  var v76:bv32;
  var v82:bv32;
  var v86:bv32;
  var v89:bv32;
  var v81:bv32;
  var v85:bv32;
  var v84:bv32;
  var v90:bv32;
  var v92:bv32;
  var v88:bv32;
  var v93:bv32;
  var v96:bool;
  var v95:bv16;
  var v103:bool;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  v0 := local_id_x;
  v1 := BV32_ADD(BV32_MUL(BV32_MUL(group_id_x, 4bv32), 256bv32), BV32_MUL(4bv32, local_id_x));
  v2 := BV32_ULT(v1, $numElems);
  goto $truebb, $falsebb;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  assert {:sourceloc} {:sourceloc_num 2} true;
  v3 := $$keys[v1];
  assert {:sourceloc} {:sourceloc_num 3} true;
  v4 := $$keys[BV32_ADD(v1, 1bv32)];
  assert {:sourceloc} {:sourceloc_num 4} true;
  v5 := $$keys[BV32_ADD(v1, 2bv32)];
  assert {:sourceloc} {:sourceloc_num 5} true;
  v6 := $$keys[BV32_ADD(v1, 3bv32)];
  assert {:sourceloc} {:sourceloc_num 6} true;
  v7 := $$values[v1];
  assert {:sourceloc} {:sourceloc_num 7} true;
  v8 := $$values[BV32_ADD(v1, 1bv32)];
  assert {:sourceloc} {:sourceloc_num 8} true;
  v9 := $$values[BV32_ADD(v1, 2bv32)];
  assert {:sourceloc} {:sourceloc_num 9} true;
  v10 := $$values[BV32_ADD(v1, 3bv32)];
  $lkey.0, $lvalue.0 := v6 ++ v5 ++ v4 ++ v3, v10 ++ v9 ++ v8 ++ v7;
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  v11 := BV32_ULT(v0, 16bv32);
  goto $truebb0, $falsebb0;
$if.then.7:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  assert {:sourceloc} {:sourceloc_num 12} true;
  $$splitSort.histo_s[v0] := 0bv32;
  goto $if.end.8;
$if.end.8:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  call {:sourceloc_num 14} $bugle_barrier(1bv1, 0bv1);
  assert {:sourceloc} {:sourceloc_num 15} true;
  call {:atomic} {:atomic_function "__bugle_atomic_add_local_uint"} {:arg1 1bv32} {:parts 1} {:part 1} v12, $$splitSort.histo_s := _ATOMIC_OP32($$splitSort.histo_s, BV32_SDIV(BV32_MUL(BV32_LSHR(BV32_AND($lkey.0[32:0], BV32_SUB(BV32_SHL(1bv32, BV32_AND(BV32_MUL(4bv32, BV32_ADD($iter, 1bv32)), 31bv32)), 1bv32)), BV32_AND(BV32_MUL(4bv32, $iter), 31bv32)), 4bv32), 4bv32));
  assert {:sourceloc} {:sourceloc_num 16} true;
  call {:atomic} {:atomic_function "__bugle_atomic_add_local_uint"} {:arg1 1bv32} {:parts 1} {:part 1} v13, $$splitSort.histo_s := _ATOMIC_OP32($$splitSort.histo_s, BV32_SDIV(BV32_MUL(BV32_LSHR(BV32_AND($lkey.0[64:32], BV32_SUB(BV32_SHL(1bv32, BV32_AND(BV32_MUL(4bv32, BV32_ADD($iter, 1bv32)), 31bv32)), 1bv32)), BV32_AND(BV32_MUL(4bv32, $iter), 31bv32)), 4bv32), 4bv32));
  assert {:sourceloc} {:sourceloc_num 17} true;
  call {:atomic} {:atomic_function "__bugle_atomic_add_local_uint"} {:arg1 1bv32} {:parts 1} {:part 1} v14, $$splitSort.histo_s := _ATOMIC_OP32($$splitSort.histo_s, BV32_SDIV(BV32_MUL(BV32_LSHR(BV32_AND($lkey.0[96:64], BV32_SUB(BV32_SHL(1bv32, BV32_AND(BV32_MUL(4bv32, BV32_ADD($iter, 1bv32)), 31bv32)), 1bv32)), BV32_AND(BV32_MUL(4bv32, $iter), 31bv32)), 4bv32), 4bv32));
  assert {:sourceloc} {:sourceloc_num 18} true;
  call {:atomic} {:atomic_function "__bugle_atomic_add_local_uint"} {:arg1 1bv32} {:parts 1} {:part 1} v15, $$splitSort.histo_s := _ATOMIC_OP32($$splitSort.histo_s, BV32_SDIV(BV32_MUL(BV32_LSHR(BV32_AND($lkey.0[128:96], BV32_SUB(BV32_SHL(1bv32, BV32_AND(BV32_MUL(4bv32, BV32_ADD($iter, 1bv32)), 31bv32)), 1bv32)), BV32_AND(BV32_MUL(4bv32, $iter), 31bv32)), 4bv32), 4bv32));
  $index.0, $i.0 := BV32_ADD(BV32_MUL(4bv32, v0), 3bv32) ++ BV32_ADD(BV32_MUL(4bv32, v0), 2bv32) ++ BV32_ADD(BV32_MUL(4bv32, v0), 1bv32) ++ BV32_MUL(4bv32, v0), BV32_MUL(4bv32, $iter);
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 19} true;
  v16 := BV32_SLT($i.0, BV32_MUL(4bv32, BV32_ADD($iter, 1bv32)));
  goto $truebb1, $falsebb1;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  v17 := BV32_AND(BV32_LSHR($lkey.0[32:0], BV32_AND($i.0, 31bv32)), 1bv32);
  v18 := BV32_AND(BV32_LSHR($lkey.0[64:32], BV32_AND($i.0, 31bv32)), 1bv32);
  v19 := BV32_AND(BV32_LSHR($lkey.0[96:64], BV32_AND($i.0, 31bv32)), 1bv32);
  v20 := BV32_AND(BV32_LSHR($lkey.0[128:96], BV32_AND($i.0, 31bv32)), 1bv32);
  v21 := BV32_ADD(4bv32, $index.0[32:0]);
  assert {:sourceloc} {:sourceloc_num 21} true;
  $$splitSort.flags[BV32_ADD($index.0[32:0], BV32_LSHR(BV32_LSHR($index.0[32:0], BV32_AND((if BV32_ULT(v21, 24bv32) then v21 else 24bv32), 31bv32)), 8bv32))] := BV32_SHL(1bv32, BV32_AND(BV32_MUL(16bv32, v17), 31bv32));
  v22 := BV32_ADD(4bv32, $index.0[64:32]);
  assert {:sourceloc} {:sourceloc_num 22} true;
  $$splitSort.flags[BV32_ADD($index.0[64:32], BV32_LSHR(BV32_LSHR($index.0[64:32], BV32_AND((if BV32_ULT(v22, 24bv32) then v22 else 24bv32), 31bv32)), 8bv32))] := BV32_SHL(1bv32, BV32_AND(BV32_MUL(16bv32, v18), 31bv32));
  v23 := BV32_ADD(4bv32, $index.0[96:64]);
  assert {:sourceloc} {:sourceloc_num 23} true;
  $$splitSort.flags[BV32_ADD($index.0[96:64], BV32_LSHR(BV32_LSHR($index.0[96:64], BV32_AND((if BV32_ULT(v23, 24bv32) then v23 else 24bv32), 31bv32)), 8bv32))] := BV32_SHL(1bv32, BV32_AND(BV32_MUL(16bv32, v19), 31bv32));
  v24 := BV32_ADD(4bv32, $index.0[128:96]);
  assert {:sourceloc} {:sourceloc_num 24} true;
  $$splitSort.flags[BV32_ADD($index.0[128:96], BV32_LSHR(BV32_LSHR($index.0[128:96], BV32_AND((if BV32_ULT(v24, 24bv32) then v24 else 24bv32), 31bv32)), 8bv32))] := BV32_SHL(1bv32, BV32_AND(BV32_MUL(16bv32, v20), 31bv32));
  v25 := local_id_x;
  call {:sourceloc_num 25} $bugle_barrier(1bv1, 0bv1);
  v26 := BV32_ADD(4bv32, BV32_MUL(2bv32, v25));
  assert {:sourceloc} {:sourceloc_num 26} true;
  v27 := $$splitSort.flags[BV32_ADD(BV32_MUL(2bv32, v25), BV32_LSHR(BV32_LSHR(BV32_MUL(2bv32, v25), BV32_AND((if BV32_ULT(v26, 24bv32) then v26 else 24bv32), 31bv32)), 8bv32))];
  v28 := BV32_ADD(BV32_MUL(2bv32, v25), 5bv32);
  v29 := BV32_ADD(BV32_ADD(BV32_MUL(2bv32, v25), 1bv32), BV32_LSHR(BV32_LSHR(BV32_ADD(BV32_MUL(2bv32, v25), 1bv32), BV32_AND((if BV32_ULT(v28, 24bv32) then v28 else 24bv32), 31bv32)), 8bv32));
  assert {:sourceloc} {:sourceloc_num 27} true;
  v30 := $$splitSort.flags[v29];
  assert {:sourceloc} {:sourceloc_num 28} true;
  $$splitSort.flags[v29] := BV32_ADD(v30, v27);
  v31 := BV32_ADD(4bv32, BV32_MUL(2bv32, BV32_ADD(group_size_x, v25)));
  assert {:sourceloc} {:sourceloc_num 29} true;
  v32 := $$splitSort.flags[BV32_ADD(BV32_MUL(2bv32, BV32_ADD(group_size_x, v25)), BV32_LSHR(BV32_LSHR(BV32_MUL(2bv32, BV32_ADD(group_size_x, v25)), BV32_AND((if BV32_ULT(v31, 24bv32) then v31 else 24bv32), 31bv32)), 8bv32))];
  v33 := BV32_ADD(BV32_MUL(2bv32, BV32_ADD(group_size_x, v25)), 5bv32);
  v34 := BV32_ADD(BV32_ADD(BV32_MUL(2bv32, BV32_ADD(group_size_x, v25)), 1bv32), BV32_LSHR(BV32_LSHR(BV32_ADD(BV32_MUL(2bv32, BV32_ADD(group_size_x, v25)), 1bv32), BV32_AND((if BV32_ULT(v33, 24bv32) then v33 else 24bv32), 31bv32)), 8bv32));
  assert {:sourceloc} {:sourceloc_num 30} true;
  v35 := $$splitSort.flags[v34];
  assert {:sourceloc} {:sourceloc_num 31} true;
  $$splitSort.flags[v34] := BV32_ADD(v35, v32);
  $d.i.0, $stride.i.0 := group_size_x, 2bv32;
  goto $for.cond.i;
$for.cond.i:
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  v36 := BV32_UGT($d.i.0, 0bv32);
  goto $truebb2, $falsebb2;
$for.body.i:
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  call {:sourceloc_num 34} $bugle_barrier(1bv1, 0bv1);
  v37 := BV32_ULT(v25, $d.i.0);
  goto $truebb3, $falsebb3;
$if.then.i:
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  v38 := BV32_SUB(BV32_ADD(BV32_MUL(BV32_MUL(2bv32, $stride.i.0), v25), $stride.i.0), 1bv32);
  v39 := BV32_ADD(v38, $stride.i.0);
  v40 := BV32_ADD(4bv32, v38);
  v41 := BV32_ADD(4bv32, v39);
  v42 := BV32_ADD(v39, BV32_LSHR(BV32_LSHR(v39, BV32_AND((if BV32_ULT(v41, 24bv32) then v41 else 24bv32), 31bv32)), 8bv32));
  assert {:sourceloc} {:sourceloc_num 36} true;
  v43 := $$splitSort.flags[BV32_ADD(v38, BV32_LSHR(BV32_LSHR(v38, BV32_AND((if BV32_ULT(v40, 24bv32) then v40 else 24bv32), 31bv32)), 8bv32))];
  assert {:sourceloc} {:sourceloc_num 37} true;
  v44 := $$splitSort.flags[v42];
  assert {:sourceloc} {:sourceloc_num 38} true;
  $$splitSort.flags[v42] := BV32_ADD(v44, v43);
  goto $if.end.i;
$if.end.i:
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  $d.i.0, $stride.i.0 := BV32_LSHR($d.i.0, 1bv32), BV32_MUL($stride.i.0, 2bv32);
  goto $for.cond.i;
$for.end.i:
  assert {:block_sourceloc} {:sourceloc_num 40} true;
  v45 := v25 == 0bv32;
  goto $truebb4, $falsebb4;
$if.then.80.i:
  assert {:block_sourceloc} {:sourceloc_num 41} true;
  v46 := BV32_SUB(BV32_MUL(4bv32, group_size_x), 1bv32);
  v47 := BV32_ADD(4bv32, v46);
  v48 := BV32_ADD(v46, BV32_LSHR(BV32_LSHR(v46, BV32_AND((if BV32_ULT(v47, 24bv32) then v47 else 24bv32), 31bv32)), 8bv32));
  assert {:sourceloc} {:sourceloc_num 42} true;
  v49 := $$splitSort.flags[v48];
  v50 := BV32_ADD(4bv32, BV32_MUL(4bv32, group_size_x));
  assert {:sourceloc} {:sourceloc_num 43} true;
  $$splitSort.flags[BV32_ADD(BV32_MUL(4bv32, group_size_x), BV32_LSHR(BV32_LSHR(BV32_MUL(4bv32, group_size_x), BV32_AND((if BV32_ULT(v50, 24bv32) then v50 else 24bv32), 31bv32)), 8bv32))] := v49;
  assert {:sourceloc} {:sourceloc_num 44} true;
  $$splitSort.flags[v48] := 0bv32;
  goto $if.end.105.i;
$if.end.105.i:
  assert {:block_sourceloc} {:sourceloc_num 45} true;
  $d106.i.0, $stride.i.1 := 1bv32, $stride.i.0;
  goto $for.cond.107.i;
$for.cond.107.i:
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  v51 := BV32_ULE($d106.i.0, group_size_x);
  goto $truebb5, $falsebb5;
$for.body.110.i:
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  v52 := BV32_LSHR($stride.i.1, 1bv32);
  call {:sourceloc_num 48} $bugle_barrier(1bv1, 0bv1);
  v53 := BV32_ULT(v25, $d106.i.0);
  goto $truebb6, $falsebb6;
$if.then.113.i:
  assert {:block_sourceloc} {:sourceloc_num 49} true;
  v54 := BV32_SUB(BV32_ADD(BV32_MUL(BV32_MUL(2bv32, v52), v25), v52), 1bv32);
  v55 := BV32_ADD(v54, v52);
  v56 := BV32_ADD(4bv32, v54);
  v57 := BV32_ADD(v54, BV32_LSHR(BV32_LSHR(v54, BV32_AND((if BV32_ULT(v56, 24bv32) then v56 else 24bv32), 31bv32)), 8bv32));
  v58 := BV32_ADD(4bv32, v55);
  v59 := BV32_ADD(v55, BV32_LSHR(BV32_LSHR(v55, BV32_AND((if BV32_ULT(v58, 24bv32) then v58 else 24bv32), 31bv32)), 8bv32));
  assert {:sourceloc} {:sourceloc_num 50} true;
  v60 := $$splitSort.flags[v57];
  assert {:sourceloc} {:sourceloc_num 51} true;
  v61 := $$splitSort.flags[v59];
  assert {:sourceloc} {:sourceloc_num 52} true;
  $$splitSort.flags[v57] := v61;
  assert {:sourceloc} {:sourceloc_num 53} true;
  v62 := $$splitSort.flags[v59];
  assert {:sourceloc} {:sourceloc_num 54} true;
  $$splitSort.flags[v59] := BV32_ADD(v62, v60);
  goto $if.end.139.i;
$if.end.139.i:
  assert {:block_sourceloc} {:sourceloc_num 55} true;
  $d106.i.0, $stride.i.1 := BV32_MUL($d106.i.0, 2bv32), v52;
  goto $for.cond.107.i;
$scan.exit:
  assert {:block_sourceloc} {:sourceloc_num 56} true;
  call {:sourceloc_num 57} $bugle_barrier(1bv1, 0bv1);
  v63 := BV32_ADD(4bv32, BV32_MUL(2bv32, v25));
  assert {:sourceloc} {:sourceloc_num 58} true;
  v64 := $$splitSort.flags[BV32_ADD(BV32_MUL(2bv32, v25), BV32_LSHR(BV32_LSHR(BV32_MUL(2bv32, v25), BV32_AND((if BV32_ULT(v63, 24bv32) then v63 else 24bv32), 31bv32)), 8bv32))];
  v65 := BV32_ADD(BV32_MUL(2bv32, v25), 5bv32);
  assert {:sourceloc} {:sourceloc_num 59} true;
  v66 := $$splitSort.flags[BV32_ADD(BV32_ADD(BV32_MUL(2bv32, v25), 1bv32), BV32_LSHR(BV32_LSHR(BV32_ADD(BV32_MUL(2bv32, v25), 1bv32), BV32_AND((if BV32_ULT(v65, 24bv32) then v65 else 24bv32), 31bv32)), 8bv32))];
  v67 := BV32_ADD(4bv32, BV32_MUL(2bv32, v25));
  assert {:sourceloc} {:sourceloc_num 60} true;
  $$splitSort.flags[BV32_ADD(BV32_MUL(2bv32, v25), BV32_LSHR(BV32_LSHR(BV32_MUL(2bv32, v25), BV32_AND((if BV32_ULT(v67, 24bv32) then v67 else 24bv32), 31bv32)), 8bv32))] := v66;
  v68 := BV32_ADD(BV32_MUL(2bv32, v25), 5bv32);
  v69 := BV32_ADD(BV32_ADD(BV32_MUL(2bv32, v25), 1bv32), BV32_LSHR(BV32_LSHR(BV32_ADD(BV32_MUL(2bv32, v25), 1bv32), BV32_AND((if BV32_ULT(v68, 24bv32) then v68 else 24bv32), 31bv32)), 8bv32));
  assert {:sourceloc} {:sourceloc_num 61} true;
  v70 := $$splitSort.flags[v69];
  assert {:sourceloc} {:sourceloc_num 62} true;
  $$splitSort.flags[v69] := BV32_ADD(v70, v64);
  v71 := BV32_ADD(4bv32, BV32_MUL(2bv32, BV32_ADD(group_size_x, v25)));
  assert {:sourceloc} {:sourceloc_num 63} true;
  v72 := $$splitSort.flags[BV32_ADD(BV32_MUL(2bv32, BV32_ADD(group_size_x, v25)), BV32_LSHR(BV32_LSHR(BV32_MUL(2bv32, BV32_ADD(group_size_x, v25)), BV32_AND((if BV32_ULT(v71, 24bv32) then v71 else 24bv32), 31bv32)), 8bv32))];
  v73 := BV32_ADD(BV32_MUL(2bv32, BV32_ADD(group_size_x, v25)), 5bv32);
  assert {:sourceloc} {:sourceloc_num 64} true;
  v74 := $$splitSort.flags[BV32_ADD(BV32_ADD(BV32_MUL(2bv32, BV32_ADD(group_size_x, v25)), 1bv32), BV32_LSHR(BV32_LSHR(BV32_ADD(BV32_MUL(2bv32, BV32_ADD(group_size_x, v25)), 1bv32), BV32_AND((if BV32_ULT(v73, 24bv32) then v73 else 24bv32), 31bv32)), 8bv32))];
  v75 := BV32_ADD(4bv32, BV32_MUL(2bv32, BV32_ADD(group_size_x, v25)));
  assert {:sourceloc} {:sourceloc_num 65} true;
  $$splitSort.flags[BV32_ADD(BV32_MUL(2bv32, BV32_ADD(group_size_x, v25)), BV32_LSHR(BV32_LSHR(BV32_MUL(2bv32, BV32_ADD(group_size_x, v25)), BV32_AND((if BV32_ULT(v75, 24bv32) then v75 else 24bv32), 31bv32)), 8bv32))] := v74;
  v76 := BV32_ADD(BV32_MUL(2bv32, BV32_ADD(group_size_x, v25)), 5bv32);
  v77 := BV32_ADD(BV32_ADD(BV32_MUL(2bv32, BV32_ADD(group_size_x, v25)), 1bv32), BV32_LSHR(BV32_LSHR(BV32_ADD(BV32_MUL(2bv32, BV32_ADD(group_size_x, v25)), 1bv32), BV32_AND((if BV32_ULT(v76, 24bv32) then v76 else 24bv32), 31bv32)), 8bv32));
  assert {:sourceloc} {:sourceloc_num 66} true;
  v78 := $$splitSort.flags[v77];
  assert {:sourceloc} {:sourceloc_num 67} true;
  $$splitSort.flags[v77] := BV32_ADD(v78, v72);
  call {:sourceloc_num 68} $bugle_barrier(1bv1, 0bv1);
  v79 := BV32_ADD(4bv32, $index.0[32:0]);
  assert {:sourceloc} {:sourceloc_num 69} true;
  v80 := $$splitSort.flags[BV32_ADD($index.0[32:0], BV32_LSHR(BV32_LSHR($index.0[32:0], BV32_AND((if BV32_ULT(v79, 24bv32) then v79 else 24bv32), 31bv32)), 8bv32))];
  v81 := $index.0[64:32];
  v82 := BV32_ADD(4bv32, v81);
  assert {:sourceloc} {:sourceloc_num 70} true;
  v83 := $$splitSort.flags[BV32_ADD(v81, BV32_LSHR(BV32_LSHR(v81, BV32_AND((if BV32_ULT(v82, 24bv32) then v82 else 24bv32), 31bv32)), 8bv32))];
  v84 := BV32_AND(BV32_LSHR(v83, BV32_AND(BV32_MUL(16bv32, v18), 31bv32)), 65535bv32);
  v85 := $index.0[96:64];
  v86 := BV32_ADD(4bv32, v85);
  assert {:sourceloc} {:sourceloc_num 71} true;
  v87 := $$splitSort.flags[BV32_ADD(v85, BV32_LSHR(BV32_LSHR(v85, BV32_AND((if BV32_ULT(v86, 24bv32) then v86 else 24bv32), 31bv32)), 8bv32))];
  v88 := BV32_AND(BV32_LSHR(v87, BV32_AND(BV32_MUL(16bv32, v19), 31bv32)), 65535bv32);
  v89 := $index.0[128:96];
  v90 := BV32_ADD(4bv32, v89);
  assert {:sourceloc} {:sourceloc_num 72} true;
  v91 := $$splitSort.flags[BV32_ADD(v89, BV32_LSHR(BV32_LSHR(v89, BV32_AND((if BV32_ULT(v90, 24bv32) then v90 else 24bv32), 31bv32)), 8bv32))];
  v92 := BV32_AND(BV32_LSHR(v91, BV32_AND(BV32_MUL(16bv32, v20), 31bv32)), 65535bv32);
  v93 := BV32_ADD(4bv32, BV32_MUL(4bv32, group_size_x));
  assert {:sourceloc} {:sourceloc_num 73} true;
  v94 := $$splitSort.flags[BV32_ADD(BV32_MUL(4bv32, group_size_x), BV32_LSHR(BV32_LSHR(BV32_MUL(4bv32, group_size_x), BV32_AND((if BV32_ULT(v93, 24bv32) then v93 else 24bv32), 31bv32)), 8bv32))];
  v95 := BV32_AND(v94, 65535bv32)[16:0];
  v96 := v17 != 0bv32;
  goto $truebb7, $falsebb7;
$cond.true:
  assert {:block_sourceloc} {:sourceloc_num 74} true;
  $cond := BV16_ZEXT32(v95);
  goto $cond.end;
$cond.false:
  assert {:block_sourceloc} {:sourceloc_num 75} true;
  $cond := 0bv32;
  goto $cond.end;
$cond.end:
  assert {:block_sourceloc} {:sourceloc_num 76} true;
  v97 := BV32_ADD(BV32_AND(BV32_LSHR(v80, BV32_AND(BV32_MUL(16bv32, v17), 31bv32)), 65535bv32), $cond);
  v98 := v18 != 0bv32;
  goto $truebb8, $falsebb8;
$cond.true.179:
  assert {:block_sourceloc} {:sourceloc_num 77} true;
  $cond183 := BV16_ZEXT32(v95);
  goto $cond.end.182;
$cond.false.181:
  assert {:block_sourceloc} {:sourceloc_num 78} true;
  $cond183 := 0bv32;
  goto $cond.end.182;
$cond.end.182:
  assert {:block_sourceloc} {:sourceloc_num 79} true;
  v99 := BV32_ADD(v84, $cond183);
  v100 := v19 != 0bv32;
  goto $truebb9, $falsebb9;
$cond.true.186:
  assert {:block_sourceloc} {:sourceloc_num 80} true;
  $cond190 := BV16_ZEXT32(v95);
  goto $cond.end.189;
$cond.false.188:
  assert {:block_sourceloc} {:sourceloc_num 81} true;
  $cond190 := 0bv32;
  goto $cond.end.189;
$cond.end.189:
  assert {:block_sourceloc} {:sourceloc_num 82} true;
  v101 := v20 != 0bv32;
  goto $truebb10, $falsebb10;
$cond.true.193:
  assert {:block_sourceloc} {:sourceloc_num 83} true;
  $cond197 := BV16_ZEXT32(v95);
  goto $cond.end.196;
$cond.false.195:
  assert {:block_sourceloc} {:sourceloc_num 84} true;
  $cond197 := 0bv32;
  goto $cond.end.196;
$cond.end.196:
  assert {:block_sourceloc} {:sourceloc_num 85} true;
  call {:sourceloc_num 86} $bugle_barrier(1bv1, 0bv1);
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 87} true;
  $index.0, $i.0 := BV32_ADD(v92, $cond197) ++ BV32_ADD(v88, $cond190) ++ v99 ++ v97, BV32_ADD($i.0, 1bv32);
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 88} true;
  v102 := BV32_ULT(v1, $numElems);
  goto $truebb11, $falsebb11;
$if.then.201:
  assert {:block_sourceloc} {:sourceloc_num 89} true;
  assert {:sourceloc} {:sourceloc_num 90} true;
  $$keys[BV32_ADD(BV32_MUL(BV32_MUL(group_id_x, 4bv32), 256bv32), $index.0[32:0])] := $lkey.0[32:0];
  assert {:sourceloc} {:sourceloc_num 91} true;
  $$keys[BV32_ADD(BV32_MUL(BV32_MUL(group_id_x, 4bv32), 256bv32), $index.0[64:32])] := $lkey.0[64:32];
  assert {:sourceloc} {:sourceloc_num 92} true;
  $$keys[BV32_ADD(BV32_MUL(BV32_MUL(group_id_x, 4bv32), 256bv32), $index.0[96:64])] := $lkey.0[96:64];
  assert {:sourceloc} {:sourceloc_num 93} true;
  $$keys[BV32_ADD(BV32_MUL(BV32_MUL(group_id_x, 4bv32), 256bv32), $index.0[128:96])] := $lkey.0[128:96];
  assert {:sourceloc} {:sourceloc_num 94} true;
  $$values[BV32_ADD(BV32_MUL(BV32_MUL(group_id_x, 4bv32), 256bv32), $index.0[32:0])] := $lvalue.0[32:0];
  assert {:sourceloc} {:sourceloc_num 95} true;
  $$values[BV32_ADD(BV32_MUL(BV32_MUL(group_id_x, 4bv32), 256bv32), $index.0[64:32])] := $lvalue.0[64:32];
  assert {:sourceloc} {:sourceloc_num 96} true;
  $$values[BV32_ADD(BV32_MUL(BV32_MUL(group_id_x, 4bv32), 256bv32), $index.0[96:64])] := $lvalue.0[96:64];
  assert {:sourceloc} {:sourceloc_num 97} true;
  $$values[BV32_ADD(BV32_MUL(BV32_MUL(group_id_x, 4bv32), 256bv32), $index.0[128:96])] := $lvalue.0[128:96];
  goto $if.end.242;
$if.end.242:
  assert {:block_sourceloc} {:sourceloc_num 98} true;
  v103 := BV32_ULT(v0, 16bv32);
  goto $truebb12, $falsebb12;
$if.then.245:
  assert {:block_sourceloc} {:sourceloc_num 99} true;
  assert {:sourceloc} {:sourceloc_num 100} true;
  v104 := $$splitSort.histo_s[v0];
  assert {:sourceloc} {:sourceloc_num 101} true;
  $$histo[BV32_ADD(BV32_MUL(num_groups_x, local_id_x), group_id_x)] := v104;
  goto $if.end.253;
$if.end.253:
  assert {:block_sourceloc} {:sourceloc_num 102} true;
  return;
$truebb:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 103} true;
  goto $if.then;
$falsebb:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 104} true;
  havoc v105;
  $lkey.0, $lvalue.0 := 340282366920938463463374607431768211455bv128, v105;
  goto $if.end;
$truebb0:
  assume {:partition} v11;
  assert {:block_sourceloc} {:sourceloc_num 105} true;
  goto $if.then.7;
$falsebb0:
  assume {:partition} !v11;
  assert {:block_sourceloc} {:sourceloc_num 106} true;
  goto $if.end.8;
$truebb1:
  assume {:partition} v16;
  assert {:block_sourceloc} {:sourceloc_num 107} true;
  goto $for.body;
$falsebb1:
  assume {:partition} !v16;
  assert {:block_sourceloc} {:sourceloc_num 108} true;
  goto $for.end;
$truebb2:
  assume {:partition} v36;
  assert {:block_sourceloc} {:sourceloc_num 109} true;
  goto $for.body.i;
$falsebb2:
  assume {:partition} !v36;
  assert {:block_sourceloc} {:sourceloc_num 110} true;
  goto $for.end.i;
$truebb3:
  assume {:partition} v37;
  assert {:block_sourceloc} {:sourceloc_num 111} true;
  goto $if.then.i;
$falsebb3:
  assume {:partition} !v37;
  assert {:block_sourceloc} {:sourceloc_num 112} true;
  goto $if.end.i;
$truebb4:
  assume {:partition} v45;
  assert {:block_sourceloc} {:sourceloc_num 113} true;
  goto $if.then.80.i;
$falsebb4:
  assume {:partition} !v45;
  assert {:block_sourceloc} {:sourceloc_num 114} true;
  goto $if.end.105.i;
$truebb5:
  assume {:partition} v51;
  assert {:block_sourceloc} {:sourceloc_num 115} true;
  goto $for.body.110.i;
$falsebb5:
  assume {:partition} !v51;
  assert {:block_sourceloc} {:sourceloc_num 116} true;
  goto $scan.exit;
$truebb6:
  assume {:partition} v53;
  assert {:block_sourceloc} {:sourceloc_num 117} true;
  goto $if.then.113.i;
$falsebb6:
  assume {:partition} !v53;
  assert {:block_sourceloc} {:sourceloc_num 118} true;
  goto $if.end.139.i;
$truebb7:
  assume {:partition} v96;
  assert {:block_sourceloc} {:sourceloc_num 119} true;
  goto $cond.true;
$falsebb7:
  assume {:partition} !v96;
  assert {:block_sourceloc} {:sourceloc_num 120} true;
  goto $cond.false;
$truebb8:
  assume {:partition} v98;
  assert {:block_sourceloc} {:sourceloc_num 121} true;
  goto $cond.true.179;
$falsebb8:
  assume {:partition} !v98;
  assert {:block_sourceloc} {:sourceloc_num 122} true;
  goto $cond.false.181;
$truebb9:
  assume {:partition} v100;
  assert {:block_sourceloc} {:sourceloc_num 123} true;
  goto $cond.true.186;
$falsebb9:
  assume {:partition} !v100;
  assert {:block_sourceloc} {:sourceloc_num 124} true;
  goto $cond.false.188;
$truebb10:
  assume {:partition} v101;
  assert {:block_sourceloc} {:sourceloc_num 125} true;
  goto $cond.true.193;
$falsebb10:
  assume {:partition} !v101;
  assert {:block_sourceloc} {:sourceloc_num 126} true;
  goto $cond.false.195;
$truebb11:
  assume {:partition} v102;
  assert {:block_sourceloc} {:sourceloc_num 127} true;
  goto $if.then.201;
$falsebb11:
  assume {:partition} !v102;
  assert {:block_sourceloc} {:sourceloc_num 128} true;
  goto $if.end.242;
$truebb12:
  assume {:partition} v103;
  assert {:block_sourceloc} {:sourceloc_num 129} true;
  goto $if.then.245;
$falsebb12:
  assume {:partition} !v103;
  assert {:block_sourceloc} {:sourceloc_num 130} true;
  goto $if.end.253;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 256bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 2594bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_x == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_y == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_z == 0bv32 then 1bv1 else 0bv1) != 0bv1;
