type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
procedure _ATOMIC_OP8(x : [bv32]bv8, y : bv32) returns (z : bv8, A : [bv32]bv8);
var {:source_name "global_subhisto"} {:global} $$global_subhisto : [bv32]bv32;
axiom {:array_info "$$global_subhisto"} {:global} {:elem_width 32} {:source_name "global_subhisto"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$global_subhisto : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$global_subhisto : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$global_subhisto : bool;

var {:source_name "global_histo"} {:global} $$global_histo : [bv32]bv8;
axiom {:array_info "$$global_histo"} {:global} {:elem_width 8} {:source_name "global_histo"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$global_histo : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$global_histo : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$global_histo : bool;

var {:source_name "global_overflow"} {:global} $$global_overflow : [bv32]bv32;
axiom {:array_info "$$global_overflow"} {:global} {:elem_width 32} {:source_name "global_overflow"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$global_overflow : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$global_overflow : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$global_overflow : bool;

var {:source_name "final_histo"} {:global} $$final_histo : [bv32]bv8;
axiom {:array_info "$$final_histo"} {:global} {:elem_width 8} {:source_name "final_histo"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$final_histo : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$final_histo : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$final_histo : bool;

const _WATCHED_OFFSET : bv32;
const {:global_offset_x} global_offset_x : bv32;
const {:global_offset_y} global_offset_y : bv32;
const {:global_offset_z} global_offset_z : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvand"} BV32_AND(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvor"} BV32_OR(bv32, bv32) : bv32;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvule"} BV32_ULE(bv32, bv32) : bool;
function {:bvbuiltin "bvult"} BV16_ULT(bv16, bv16) : bool;
function {:bvbuiltin "bvult"} BV32_ULT(bv32, bv32) : bool;
function {:bvbuiltin "bvurem"} BV32_UREM(bv32, bv32) : bv32;
function {:bvbuiltin "zero_extend 31"} BV1_ZEXT32(bv1) : bv32;
procedure {:source_name "histo_final_kernel"} {:kernel} $histo_final_kernel($sm_range_min:bv32, $sm_range_max:bv32, $histo_height:bv32, $histo_width:bv32)
requires {:sourceloc_num 0} (if $sm_range_min == 1bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 1} (if $sm_range_max == 2bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 2} (if $histo_height == 4096bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 3} (if $histo_width == 256bv32 then 1bv1 else 0bv1) != 0bv1;
{
  var $i.0:bv32;
  var $i105.0:bv32;
  var $i240.0:bv32;
  var v19:bv32;
  var v20:bv32;
  var v21:bv32;
  var v6:bv8;
  var v10:bv8;
  var v7:bv8;
  var v9:bv8;
  var v22:bv32;
  var v8:bv8;
  var v12:bv8;
  var v13:bv8;
  var v11:bv8;
  var v5:bool;
  var v17:bv16;
  var v14:bv16;
  var v16:bv16;
  var v15:bv16;
  var v1:bv32;
  var v0:bv32;
  var v3:bv32;
  var v2:bv32;
  var v4:bv32;
  var v18:bool;
  var v23:bv32;
  var v25:bv32;
  var v24:bv32;
  var v26:bv32;
  var v30:bv8;
  var v34:bv8;
  var v35:bv8;
  var v31:bv8;
  var v32:bv8;
  var v28:bv8;
  var v29:bv8;
  var v33:bv8;
  var v38:bv16;
  var v36:bv16;
  var v37:bv16;
  var v27:bool;
  var v39:bv16;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  v0 := group_size_x;
  v1 := num_groups_x;
  v2 := BV32_ADD(local_id_x, BV32_MUL(group_id_x, v0));
  v3 := BV32_MUL($sm_range_min, 24576bv32);
  v4 := BV32_MUL(BV32_ADD(BV32_SUB($sm_range_max, $sm_range_min), 1bv32), 24576bv32);
  $i.0 := v2;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  assert {:originated_from_invariant} {:sourceloc_num 6} (if BV32_UREM(BV32_SUB($i.0, v2), BV32_MUL(v1, v0)) == 0bv32 then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 7} (if (_READ_HAS_OCCURRED_$$global_histo ==> BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_ULT(v2, BV32_UDIV(v3, 4bv32)) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_UREM(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 8bv32), v2), BV32_MUL(v1, v0)) == 0bv32 then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_ULE(BV32_UDIV(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 8bv32), v2), BV32_MUL(v1, v0)), BV32_UDIV(BV32_SUB(BV32_UDIV(v3, 4bv32), v2), BV32_MUL(v1, v0))) then 1bv1 else 0bv1))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 8} (if (_WRITE_HAS_OCCURRED_$$global_histo ==> BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_ULT(v2, BV32_UDIV(v3, 4bv32)) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_UREM(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 8bv32), v2), BV32_MUL(v1, v0)) == 0bv32 then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_ULE(BV32_UDIV(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 8bv32), v2), BV32_MUL(v1, v0)), BV32_UDIV(BV32_SUB(BV32_UDIV(v3, 4bv32), v2), BV32_MUL(v1, v0))) then 1bv1 else 0bv1))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 9} (if (_WRITE_HAS_OCCURRED_$$final_histo ==> BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_ULT(v2, BV32_UDIV(v3, 4bv32)) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_UREM(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 4bv32), v2), BV32_MUL(v1, v0)) == 0bv32 then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_ULE(BV32_UDIV(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 4bv32), v2), BV32_MUL(v1, v0)), BV32_UDIV(BV32_SUB(BV32_UDIV(v3, 4bv32), v2), BV32_MUL(v1, v0))) then 1bv1 else 0bv1))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
  v5 := BV32_ULT($i.0, BV32_UDIV(v3, 4bv32));
  goto $truebb, $falsebb;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  assert {:sourceloc} {:sourceloc_num 11} true;
  v6 := $$global_histo[BV32_MUL($i.0, 8bv32)];
  assert {:sourceloc} {:sourceloc_num 12} true;
  v7 := $$global_histo[BV32_ADD(BV32_MUL($i.0, 8bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 13} true;
  v8 := $$global_histo[BV32_ADD(BV32_MUL($i.0, 8bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 14} true;
  v9 := $$global_histo[BV32_ADD(BV32_MUL($i.0, 8bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 15} true;
  v10 := $$global_histo[BV32_ADD(BV32_MUL($i.0, 8bv32), 4bv32)];
  assert {:sourceloc} {:sourceloc_num 16} true;
  v11 := $$global_histo[BV32_ADD(BV32_MUL($i.0, 8bv32), 5bv32)];
  assert {:sourceloc} {:sourceloc_num 17} true;
  v12 := $$global_histo[BV32_ADD(BV32_MUL($i.0, 8bv32), 6bv32)];
  assert {:sourceloc} {:sourceloc_num 18} true;
  v13 := $$global_histo[BV32_ADD(BV32_MUL($i.0, 8bv32), 7bv32)];
  assert {:sourceloc} {:sourceloc_num 19} true;
  $$global_histo[BV32_MUL($i.0, 8bv32)] := 0bv8;
  assert {:sourceloc} {:sourceloc_num 20} true;
  $$global_histo[BV32_ADD(BV32_MUL($i.0, 8bv32), 1bv32)] := 0bv8;
  assert {:sourceloc} {:sourceloc_num 21} true;
  $$global_histo[BV32_ADD(BV32_MUL($i.0, 8bv32), 2bv32)] := 0bv8;
  assert {:sourceloc} {:sourceloc_num 22} true;
  $$global_histo[BV32_ADD(BV32_MUL($i.0, 8bv32), 3bv32)] := 0bv8;
  assert {:sourceloc} {:sourceloc_num 23} true;
  $$global_histo[BV32_ADD(BV32_MUL($i.0, 8bv32), 4bv32)] := 0bv8;
  assert {:sourceloc} {:sourceloc_num 24} true;
  $$global_histo[BV32_ADD(BV32_MUL($i.0, 8bv32), 5bv32)] := 0bv8;
  assert {:sourceloc} {:sourceloc_num 25} true;
  $$global_histo[BV32_ADD(BV32_MUL($i.0, 8bv32), 6bv32)] := 0bv8;
  assert {:sourceloc} {:sourceloc_num 26} true;
  $$global_histo[BV32_ADD(BV32_MUL($i.0, 8bv32), 7bv32)] := 0bv8;
  v14 := v7 ++ v6;
  v15 := v9 ++ v8;
  v16 := v11 ++ v10;
  v17 := v13 ++ v12;
  assert {:sourceloc} {:sourceloc_num 27} true;
  $$final_histo[BV32_MUL($i.0, 4bv32)] := (if BV16_ULT(v14, 255bv16) then v14 else 255bv16)[8:0];
  assert {:sourceloc} {:sourceloc_num 28} true;
  $$final_histo[BV32_ADD(BV32_MUL($i.0, 4bv32), 1bv32)] := (if BV16_ULT(v15, 255bv16) then v15 else 255bv16)[8:0];
  assert {:sourceloc} {:sourceloc_num 29} true;
  $$final_histo[BV32_ADD(BV32_MUL($i.0, 4bv32), 2bv32)] := (if BV16_ULT(v16, 255bv16) then v16 else 255bv16)[8:0];
  assert {:sourceloc} {:sourceloc_num 30} true;
  $$final_histo[BV32_ADD(BV32_MUL($i.0, 4bv32), 3bv32)] := (if BV16_ULT(v17, 255bv16) then v17 else 255bv16)[8:0];
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  $i.0 := BV32_ADD($i.0, BV32_MUL(v1, v0));
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  $i105.0 := BV32_ADD(BV32_UDIV(v3, 4bv32), v2);
  goto $for.cond.108;
$for.cond.108:
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  assert {:originated_from_invariant} {:sourceloc_num 34} (if BV32_UREM(BV32_SUB($i105.0, BV32_ADD(BV32_UDIV(v3, 4bv32), v2)), BV32_MUL(v1, v0)) == 0bv32 then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 35} (if (_READ_HAS_OCCURRED_$$global_overflow ==> BV32_UREM(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 16bv32), BV32_ADD(BV32_UDIV(v3, 4bv32), v2)), BV32_MUL(v1, v0)) == 0bv32) then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 36} (if (_WRITE_HAS_OCCURRED_$$global_overflow ==> BV32_UREM(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 16bv32), BV32_ADD(BV32_UDIV(v3, 4bv32), v2)), BV32_MUL(v1, v0)) == 0bv32) then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 37} (if (_WRITE_HAS_OCCURRED_$$final_histo ==> BV32_OR(BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_ULT(v2, BV32_UDIV(v3, 4bv32)) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_UREM(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 4bv32), v2), BV32_MUL(v1, v0)) == 0bv32 then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_ULE(BV32_UDIV(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 4bv32), v2), BV32_MUL(v1, v0)), BV32_UDIV(BV32_SUB(BV32_UDIV(v3, 4bv32), v2), BV32_MUL(v1, v0))) then 1bv1 else 0bv1))), BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_ULT(BV32_ADD(BV32_UDIV(v3, 4bv32), v2), BV32_UDIV(BV32_ADD(v3, v4), 4bv32)) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_UREM(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 4bv32), BV32_ADD(BV32_UDIV(v3, 4bv32), v2)), BV32_MUL(v1, v0)) == 0bv32 then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_ULE(BV32_UDIV(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 4bv32), BV32_ADD(BV32_UDIV(v3, 4bv32), v2)), BV32_MUL(v1, v0)), BV32_UDIV(BV32_SUB(BV32_UDIV(BV32_ADD(v3, v4), 4bv32), BV32_ADD(BV32_UDIV(v3, 4bv32), v2)), BV32_MUL(v1, v0))) then 1bv1 else 0bv1)))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
  v18 := BV32_ULT($i105.0, BV32_UDIV(BV32_ADD(v3, v4), 4bv32));
  goto $truebb0, $falsebb0;
$for.body.201:
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  assert {:sourceloc} {:sourceloc_num 39} true;
  v19 := $$global_overflow[BV32_MUL($i105.0, 4bv32)];
  assert {:sourceloc} {:sourceloc_num 40} true;
  v20 := $$global_overflow[BV32_ADD(BV32_MUL($i105.0, 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 41} true;
  v21 := $$global_overflow[BV32_ADD(BV32_MUL($i105.0, 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 42} true;
  v22 := $$global_overflow[BV32_ADD(BV32_MUL($i105.0, 4bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 43} true;
  $$global_overflow[BV32_MUL($i105.0, 4bv32)] := 0bv32;
  assert {:sourceloc} {:sourceloc_num 44} true;
  $$global_overflow[BV32_ADD(BV32_MUL($i105.0, 4bv32), 1bv32)] := 0bv32;
  assert {:sourceloc} {:sourceloc_num 45} true;
  $$global_overflow[BV32_ADD(BV32_MUL($i105.0, 4bv32), 2bv32)] := 0bv32;
  assert {:sourceloc} {:sourceloc_num 46} true;
  $$global_overflow[BV32_ADD(BV32_MUL($i105.0, 4bv32), 3bv32)] := 0bv32;
  assert {:sourceloc} {:sourceloc_num 47} true;
  v23 := $$global_subhisto[BV32_MUL($i105.0, 4bv32)];
  assert {:sourceloc} {:sourceloc_num 48} true;
  v24 := $$global_subhisto[BV32_ADD(BV32_MUL($i105.0, 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 49} true;
  v25 := $$global_subhisto[BV32_ADD(BV32_MUL($i105.0, 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 50} true;
  v26 := $$global_subhisto[BV32_ADD(BV32_MUL($i105.0, 4bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 51} true;
  $$final_histo[BV32_MUL($i105.0, 4bv32)] := (if BV32_ULT(v23, 255bv32) then v23 else 255bv32)[8:0];
  assert {:sourceloc} {:sourceloc_num 52} true;
  $$final_histo[BV32_ADD(BV32_MUL($i105.0, 4bv32), 1bv32)] := (if BV32_ULT(v24, 255bv32) then v24 else 255bv32)[8:0];
  assert {:sourceloc} {:sourceloc_num 53} true;
  $$final_histo[BV32_ADD(BV32_MUL($i105.0, 4bv32), 2bv32)] := (if BV32_ULT(v25, 255bv32) then v25 else 255bv32)[8:0];
  assert {:sourceloc} {:sourceloc_num 54} true;
  $$final_histo[BV32_ADD(BV32_MUL($i105.0, 4bv32), 3bv32)] := (if BV32_ULT(v26, 255bv32) then v26 else 255bv32)[8:0];
  goto $for.inc.236;
$for.inc.236:
  assert {:block_sourceloc} {:sourceloc_num 55} true;
  $i105.0 := BV32_ADD($i105.0, BV32_MUL(v1, v0));
  goto $for.cond.108;
$for.end.239:
  assert {:block_sourceloc} {:sourceloc_num 56} true;
  $i240.0 := BV32_ADD(BV32_UDIV(BV32_ADD(v3, v4), 4bv32), v2);
  goto $for.cond.244;
$for.cond.244:
  assert {:block_sourceloc} {:sourceloc_num 57} true;
  assert {:originated_from_invariant} {:sourceloc_num 58} (if BV32_UREM(BV32_SUB($i240.0, BV32_ADD(BV32_UDIV(BV32_ADD(v3, v4), 4bv32), v2)), BV32_MUL(v1, v0)) == 0bv32 then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 59} (if (_READ_HAS_OCCURRED_$$global_histo ==> BV32_OR(BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_ULT(v2, BV32_UDIV(v3, 4bv32)) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_UREM(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 8bv32), v2), BV32_MUL(v1, v0)) == 0bv32 then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_ULE(BV32_UDIV(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 8bv32), v2), BV32_MUL(v1, v0)), BV32_UDIV(BV32_SUB(BV32_UDIV(v3, 4bv32), v2), BV32_MUL(v1, v0))) then 1bv1 else 0bv1))), BV32_AND(BV1_ZEXT32((if BV32_UREM(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 8bv32), BV32_ADD(BV32_UDIV(BV32_ADD(v3, v4), 4bv32), v2)), BV32_MUL(v1, v0)) == 0bv32 then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_ULE(BV32_UDIV(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 8bv32), BV32_ADD(BV32_UDIV(BV32_ADD(v3, v4), 4bv32), v2)), BV32_MUL(v1, v0)), BV32_UDIV(BV32_SUB(BV32_UDIV(BV32_MUL($histo_height, $histo_width), 4bv32), BV32_ADD(BV32_UDIV(BV32_ADD(v3, v4), 4bv32), v2)), BV32_MUL(v1, v0))) then 1bv1 else 0bv1)))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 60} (if (_WRITE_HAS_OCCURRED_$$global_histo ==> BV32_OR(BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_ULT(v2, BV32_UDIV(v3, 4bv32)) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_UREM(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 8bv32), v2), BV32_MUL(v1, v0)) == 0bv32 then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_ULE(BV32_UDIV(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 8bv32), v2), BV32_MUL(v1, v0)), BV32_UDIV(BV32_SUB(BV32_UDIV(v3, 4bv32), v2), BV32_MUL(v1, v0))) then 1bv1 else 0bv1))), BV32_AND(BV1_ZEXT32((if BV32_UREM(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 8bv32), BV32_ADD(BV32_UDIV(BV32_ADD(v3, v4), 4bv32), v2)), BV32_MUL(v1, v0)) == 0bv32 then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_ULE(BV32_UDIV(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 8bv32), BV32_ADD(BV32_UDIV(BV32_ADD(v3, v4), 4bv32), v2)), BV32_MUL(v1, v0)), BV32_UDIV(BV32_SUB(BV32_UDIV(BV32_MUL($histo_height, $histo_width), 4bv32), BV32_ADD(BV32_UDIV(BV32_ADD(v3, v4), 4bv32), v2)), BV32_MUL(v1, v0))) then 1bv1 else 0bv1)))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 61} (if (_WRITE_HAS_OCCURRED_$$final_histo ==> BV32_OR(BV32_OR(BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_ULT(v2, BV32_UDIV(v3, 4bv32)) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_UREM(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 4bv32), v2), BV32_MUL(v1, v0)) == 0bv32 then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_ULE(BV32_UDIV(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 4bv32), v2), BV32_MUL(v1, v0)), BV32_UDIV(BV32_SUB(BV32_UDIV(v3, 4bv32), v2), BV32_MUL(v1, v0))) then 1bv1 else 0bv1))), BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_ULT(BV32_ADD(BV32_UDIV(v3, 4bv32), v2), BV32_UDIV(BV32_ADD(v3, v4), 4bv32)) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_UREM(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 4bv32), BV32_ADD(BV32_UDIV(v3, 4bv32), v2)), BV32_MUL(v1, v0)) == 0bv32 then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_ULE(BV32_UDIV(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 4bv32), BV32_ADD(BV32_UDIV(v3, 4bv32), v2)), BV32_MUL(v1, v0)), BV32_UDIV(BV32_SUB(BV32_UDIV(BV32_ADD(v3, v4), 4bv32), BV32_ADD(BV32_UDIV(v3, 4bv32), v2)), BV32_MUL(v1, v0))) then 1bv1 else 0bv1)))), BV32_AND(BV1_ZEXT32((if BV32_UREM(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 4bv32), BV32_ADD(BV32_UDIV(BV32_ADD(v3, v4), 4bv32), v2)), BV32_MUL(v1, v0)) == 0bv32 then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_ULE(BV32_UDIV(BV32_SUB(BV32_UDIV(_WATCHED_OFFSET, 4bv32), BV32_ADD(BV32_UDIV(BV32_ADD(v3, v4), 4bv32), v2)), BV32_MUL(v1, v0)), BV32_UDIV(BV32_SUB(BV32_UDIV(BV32_MUL($histo_height, $histo_width), 4bv32), BV32_ADD(BV32_UDIV(BV32_ADD(v3, v4), 4bv32), v2)), BV32_MUL(v1, v0))) then 1bv1 else 0bv1)))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
  v27 := BV32_ULT($i240.0, BV32_UDIV(BV32_MUL($histo_height, $histo_width), 4bv32));
  goto $truebb1, $falsebb1;
$for.body.459:
  assert {:block_sourceloc} {:sourceloc_num 62} true;
  assert {:sourceloc} {:sourceloc_num 63} true;
  v28 := $$global_histo[BV32_MUL($i240.0, 8bv32)];
  assert {:sourceloc} {:sourceloc_num 64} true;
  v29 := $$global_histo[BV32_ADD(BV32_MUL($i240.0, 8bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 65} true;
  v30 := $$global_histo[BV32_ADD(BV32_MUL($i240.0, 8bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 66} true;
  v31 := $$global_histo[BV32_ADD(BV32_MUL($i240.0, 8bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 67} true;
  v32 := $$global_histo[BV32_ADD(BV32_MUL($i240.0, 8bv32), 4bv32)];
  assert {:sourceloc} {:sourceloc_num 68} true;
  v33 := $$global_histo[BV32_ADD(BV32_MUL($i240.0, 8bv32), 5bv32)];
  assert {:sourceloc} {:sourceloc_num 69} true;
  v34 := $$global_histo[BV32_ADD(BV32_MUL($i240.0, 8bv32), 6bv32)];
  assert {:sourceloc} {:sourceloc_num 70} true;
  v35 := $$global_histo[BV32_ADD(BV32_MUL($i240.0, 8bv32), 7bv32)];
  assert {:sourceloc} {:sourceloc_num 71} true;
  $$global_histo[BV32_MUL($i240.0, 8bv32)] := 0bv8;
  assert {:sourceloc} {:sourceloc_num 72} true;
  $$global_histo[BV32_ADD(BV32_MUL($i240.0, 8bv32), 1bv32)] := 0bv8;
  assert {:sourceloc} {:sourceloc_num 73} true;
  $$global_histo[BV32_ADD(BV32_MUL($i240.0, 8bv32), 2bv32)] := 0bv8;
  assert {:sourceloc} {:sourceloc_num 74} true;
  $$global_histo[BV32_ADD(BV32_MUL($i240.0, 8bv32), 3bv32)] := 0bv8;
  assert {:sourceloc} {:sourceloc_num 75} true;
  $$global_histo[BV32_ADD(BV32_MUL($i240.0, 8bv32), 4bv32)] := 0bv8;
  assert {:sourceloc} {:sourceloc_num 76} true;
  $$global_histo[BV32_ADD(BV32_MUL($i240.0, 8bv32), 5bv32)] := 0bv8;
  assert {:sourceloc} {:sourceloc_num 77} true;
  $$global_histo[BV32_ADD(BV32_MUL($i240.0, 8bv32), 6bv32)] := 0bv8;
  assert {:sourceloc} {:sourceloc_num 78} true;
  $$global_histo[BV32_ADD(BV32_MUL($i240.0, 8bv32), 7bv32)] := 0bv8;
  v36 := v29 ++ v28;
  v37 := v31 ++ v30;
  v38 := v33 ++ v32;
  v39 := v35 ++ v34;
  assert {:sourceloc} {:sourceloc_num 79} true;
  $$final_histo[BV32_MUL($i240.0, 4bv32)] := (if BV16_ULT(v36, 255bv16) then v36 else 255bv16)[8:0];
  assert {:sourceloc} {:sourceloc_num 80} true;
  $$final_histo[BV32_ADD(BV32_MUL($i240.0, 4bv32), 1bv32)] := (if BV16_ULT(v37, 255bv16) then v37 else 255bv16)[8:0];
  assert {:sourceloc} {:sourceloc_num 81} true;
  $$final_histo[BV32_ADD(BV32_MUL($i240.0, 4bv32), 2bv32)] := (if BV16_ULT(v38, 255bv16) then v38 else 255bv16)[8:0];
  assert {:sourceloc} {:sourceloc_num 82} true;
  $$final_histo[BV32_ADD(BV32_MUL($i240.0, 4bv32), 3bv32)] := (if BV16_ULT(v39, 255bv16) then v39 else 255bv16)[8:0];
  goto $for.inc.478;
$for.inc.478:
  assert {:block_sourceloc} {:sourceloc_num 83} true;
  $i240.0 := BV32_ADD($i240.0, BV32_MUL(v1, v0));
  goto $for.cond.244;
$for.end.481:
  assert {:block_sourceloc} {:sourceloc_num 84} true;
  return;
$truebb:
  assume {:partition} v5;
  assert {:block_sourceloc} {:sourceloc_num 85} true;
  goto $for.body;
$falsebb:
  assume {:partition} !v5;
  assert {:block_sourceloc} {:sourceloc_num 86} true;
  goto $for.end;
$truebb0:
  assume {:partition} v18;
  assert {:block_sourceloc} {:sourceloc_num 87} true;
  goto $for.body.201;
$falsebb0:
  assume {:partition} !v18;
  assert {:block_sourceloc} {:sourceloc_num 88} true;
  goto $for.end.239;
$truebb1:
  assume {:partition} v27;
  assert {:block_sourceloc} {:sourceloc_num 89} true;
  goto $for.body.459;
$falsebb1:
  assume {:partition} !v27;
  assert {:block_sourceloc} {:sourceloc_num 90} true;
  goto $for.end.481;
}
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 512bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 42bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_x == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_y == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_z == 0bv32 then 1bv1 else 0bv1) != 0bv1;
