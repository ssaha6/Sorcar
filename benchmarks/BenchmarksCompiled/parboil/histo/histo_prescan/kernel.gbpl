type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "input"} {:global} $$input : [bv32]bv32;
axiom {:array_info "$$input"} {:global} {:elem_width 32} {:source_name "input"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$input : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$input : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$input : bool;

var {:source_name "minmax"} {:global} $$minmax : [bv32]bv32;
axiom {:array_info "$$minmax"} {:global} {:elem_width 32} {:source_name "minmax"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$minmax : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$minmax : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$minmax : bool;

var {:source_name "Avg"} {:group_shared} $$histo_prescan_kernel.Avg : [bv32]bv32;
axiom {:array_info "$$histo_prescan_kernel.Avg"} {:group_shared} {:elem_width 32} {:source_name "Avg"} {:source_elem_width 32} {:source_dimensions "512"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$histo_prescan_kernel.Avg : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$histo_prescan_kernel.Avg : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$histo_prescan_kernel.Avg : bool;

var {:source_name "StdDev"} {:group_shared} $$histo_prescan_kernel.StdDev : [bv32]bv32;
axiom {:array_info "$$histo_prescan_kernel.StdDev"} {:group_shared} {:elem_width 32} {:source_name "StdDev"} {:source_elem_width 32} {:source_dimensions "512"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$histo_prescan_kernel.StdDev : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$histo_prescan_kernel.StdDev : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$histo_prescan_kernel.StdDev : bool;

const _WATCHED_OFFSET : bv32;
const {:global_offset_x} global_offset_x : bv32;
const {:global_offset_y} global_offset_y : bv32;
const {:global_offset_z} global_offset_z : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FADD32(bv32, bv32) : bv32;
function FDIV32(bv32, bv32) : bv32;
function FMUL32(bv32, bv32) : bv32;
function FP32_TO_UI32(bv32) : bv32;
function FSQRT32(bv32) : bv32;
function FSUB32(bv32, bv32) : bv32;
function UI32_TO_FP32(bv32) : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvand"} BV32_AND(bv32, bv32) : bv32;
function {:bvbuiltin "bvashr"} BV32_ASHR(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvor"} BV32_OR(bv32, bv32) : bv32;
function {:bvbuiltin "bvsdiv"} BV32_SDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvsge"} BV32_SGE(bv32, bv32) : bool;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;
function {:bvbuiltin "zero_extend 31"} BV1_ZEXT32(bv1) : bv32;
procedure {:source_name "histo_prescan_kernel"} {:kernel} $histo_prescan_kernel($size:bv32)
{
  var $addr.0:bv32;
  var $avg.0:bv32;
  var $count.0:bv32;
  var $addr2.0:bv32;
  var $stddev.0:bv32;
  var $stride31.0:bv32;
  var v3:bv32;
  var v10:bv32;
  var v9:bv32;
  var v6:bv32;
  var v0:bv32;
  var v2:bv32;
  var v1:bv32;
  var v4:bv32;
  var v5:bool;
  var v7:bv32;
  var v8:bool;
  var v11:bool;
  var v12:bool;
  var v39:bv32;
  var v35:bv32;
  var v41:bv32;
  var v34:bv32;
  var v42:bv32;
  var v38:bv32;
  var v36:bv32;
  var v14:bv32;
  var v18:bv32;
  var v23:bv32;
  var v16:bv32;
  var v19:bv32;
  var v13:bv32;
  var v20:bv32;
  var v15:bv32;
  var v21:bv32;
  var v25:bv32;
  var v24:bv32;
  var v29:bv32;
  var v33:bv32;
  var v26:bv32;
  var v28:bv32;
  var v30:bv32;
  var v31:bv32;
  var v22:bool;
  var v17:bool;
  var v32:bool;
  var v27:bool;
  var v43:bv32;
  var v40:bv32;
  var v37:bool;
  var v44:bv32;
  var v45:bv32;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  v0 := local_id_x;
  v1 := group_size_x;
  v2 := group_id_x;
  v3 := BV32_UDIV($size, num_groups_x);
  v4 := BV32_ADD(BV32_MUL(v2, v3), BV32_SDIV(v3, 8bv32));
  $addr.0, $avg.0, $count.0 := BV32_ADD(BV32_MUL(v2, v3), v0), 0bv32, 0bv32;
  goto $while.cond;
$while.cond:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  v5 := BV32_SLT($addr.0, v4);
  goto $truebb, $falsebb;
$while.body:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  assert {:sourceloc} {:sourceloc_num 3} true;
  v6 := $$input[$addr.0];
  $addr.0, $avg.0, $count.0 := BV32_ADD($addr.0, v1), FADD32($avg.0, UI32_TO_FP32(v6)), BV32_ADD($count.0, 1bv32);
  goto $while.cond;
$while.end:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  v7 := FDIV32($avg.0, UI32_TO_FP32($count.0));
  assert {:sourceloc} {:sourceloc_num 5} true;
  $$histo_prescan_kernel.Avg[v0] := v7;
  $addr2.0, $stddev.0 := BV32_ADD(BV32_MUL(v2, v3), v0), 0bv32;
  goto $while.cond.14;
$while.cond.14:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  v8 := BV32_SLT($addr2.0, v4);
  goto $truebb0, $falsebb0;
$while.body.17:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  assert {:sourceloc} {:sourceloc_num 8} true;
  v9 := $$input[$addr2.0];
  assert {:sourceloc} {:sourceloc_num 9} true;
  v10 := $$input[$addr2.0];
  $addr2.0, $stddev.0 := BV32_ADD($addr2.0, v1), FADD32($stddev.0, FMUL32(FSUB32(UI32_TO_FP32(v9), v7), FSUB32(UI32_TO_FP32(v10), v7)));
  goto $while.cond.14;
$while.end.26:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  assert {:sourceloc} {:sourceloc_num 11} true;
  $$histo_prescan_kernel.StdDev[v0] := FSQRT32(FDIV32($stddev.0, UI32_TO_FP32($count.0)));
  $stride31.0 := 256bv32;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  assert {:originated_from_invariant} {:sourceloc_num 13} (if BV32_SGE($stride31.0, 16bv32) then 1bv1 else 0bv1) != 0bv1;
  assert {:originated_from_invariant} {:sourceloc_num 14} (if (BV32_AND(BV1_ZEXT32((if $stride31.0 == 16bv32 then 1bv1 else 0bv1)), BV1_ZEXT32((if _READ_HAS_OCCURRED_$$histo_prescan_kernel.StdDev then 1bv1 else 0bv1))) != 0bv32 ==> BV32_OR(BV1_ZEXT32((if BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32) == v0 then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32) == BV32_ADD(v0, 32bv32) then 1bv1 else 0bv1))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
  assert {:originated_from_invariant} {:sourceloc_num 15} (if (BV32_AND(BV1_ZEXT32((if $stride31.0 == 16bv32 then 1bv1 else 0bv1)), BV1_ZEXT32((if _READ_HAS_OCCURRED_$$histo_prescan_kernel.Avg then 1bv1 else 0bv1))) != 0bv32 ==> BV32_OR(BV1_ZEXT32((if BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32) == v0 then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32) == BV32_ADD(v0, 32bv32) then 1bv1 else 0bv1))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
  v11 := BV32_SGE($stride31.0, 32bv32);
  goto $truebb1, $falsebb1;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  call {:sourceloc_num 17} $bugle_barrier(1bv1, 0bv1);
  v12 := BV32_SLT(v0, $stride31.0);
  goto $truebb2, $falsebb2;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  assert {:sourceloc} {:sourceloc_num 19} true;
  v13 := $$histo_prescan_kernel.Avg[BV32_ADD(v0, $stride31.0)];
  assert {:sourceloc} {:sourceloc_num 20} true;
  v14 := $$histo_prescan_kernel.Avg[v0];
  assert {:sourceloc} {:sourceloc_num 21} true;
  $$histo_prescan_kernel.Avg[v0] := FADD32(v14, v13);
  assert {:sourceloc} {:sourceloc_num 22} true;
  v15 := $$histo_prescan_kernel.StdDev[BV32_ADD(v0, $stride31.0)];
  assert {:sourceloc} {:sourceloc_num 23} true;
  v16 := $$histo_prescan_kernel.StdDev[v0];
  assert {:sourceloc} {:sourceloc_num 24} true;
  $$histo_prescan_kernel.StdDev[v0] := FADD32(v16, v15);
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  $stride31.0 := BV32_ASHR($stride31.0, 1bv32);
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  v17 := BV32_SLT(v0, 16bv32);
  goto $truebb3, $falsebb3;
$if.then.81:
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  assert {:sourceloc} {:sourceloc_num 29} true;
  v18 := $$histo_prescan_kernel.Avg[BV32_ADD(v0, 16bv32)];
  assert {:sourceloc} {:sourceloc_num 30} true;
  v19 := $$histo_prescan_kernel.Avg[v0];
  assert {:sourceloc} {:sourceloc_num 31} true;
  $$histo_prescan_kernel.Avg[v0] := FADD32(v19, v18);
  assert {:sourceloc} {:sourceloc_num 32} true;
  v20 := $$histo_prescan_kernel.StdDev[BV32_ADD(v0, 16bv32)];
  assert {:sourceloc} {:sourceloc_num 33} true;
  v21 := $$histo_prescan_kernel.StdDev[v0];
  assert {:sourceloc} {:sourceloc_num 34} true;
  $$histo_prescan_kernel.StdDev[v0] := FADD32(v21, v20);
  goto $if.end.90;
$if.end.90:
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  v22 := BV32_SLT(v0, 8bv32);
  goto $truebb4, $falsebb4;
$if.then.93:
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  assert {:sourceloc} {:sourceloc_num 37} true;
  v23 := $$histo_prescan_kernel.Avg[BV32_ADD(v0, 8bv32)];
  assert {:sourceloc} {:sourceloc_num 38} true;
  v24 := $$histo_prescan_kernel.Avg[v0];
  assert {:sourceloc} {:sourceloc_num 39} true;
  $$histo_prescan_kernel.Avg[v0] := FADD32(v24, v23);
  assert {:sourceloc} {:sourceloc_num 40} true;
  v25 := $$histo_prescan_kernel.StdDev[BV32_ADD(v0, 8bv32)];
  assert {:sourceloc} {:sourceloc_num 41} true;
  v26 := $$histo_prescan_kernel.StdDev[v0];
  assert {:sourceloc} {:sourceloc_num 42} true;
  $$histo_prescan_kernel.StdDev[v0] := FADD32(v26, v25);
  goto $if.end.102;
$if.end.102:
  assert {:block_sourceloc} {:sourceloc_num 43} true;
  v27 := BV32_SLT(v0, 4bv32);
  goto $truebb5, $falsebb5;
$if.then.105:
  assert {:block_sourceloc} {:sourceloc_num 44} true;
  assert {:sourceloc} {:sourceloc_num 45} true;
  v28 := $$histo_prescan_kernel.Avg[BV32_ADD(v0, 4bv32)];
  assert {:sourceloc} {:sourceloc_num 46} true;
  v29 := $$histo_prescan_kernel.Avg[v0];
  assert {:sourceloc} {:sourceloc_num 47} true;
  $$histo_prescan_kernel.Avg[v0] := FADD32(v29, v28);
  assert {:sourceloc} {:sourceloc_num 48} true;
  v30 := $$histo_prescan_kernel.StdDev[BV32_ADD(v0, 4bv32)];
  assert {:sourceloc} {:sourceloc_num 49} true;
  v31 := $$histo_prescan_kernel.StdDev[v0];
  assert {:sourceloc} {:sourceloc_num 50} true;
  $$histo_prescan_kernel.StdDev[v0] := FADD32(v31, v30);
  goto $if.end.114;
$if.end.114:
  assert {:block_sourceloc} {:sourceloc_num 51} true;
  v32 := BV32_SLT(v0, 2bv32);
  goto $truebb6, $falsebb6;
$if.then.117:
  assert {:block_sourceloc} {:sourceloc_num 52} true;
  assert {:sourceloc} {:sourceloc_num 53} true;
  v33 := $$histo_prescan_kernel.Avg[BV32_ADD(v0, 2bv32)];
  assert {:sourceloc} {:sourceloc_num 54} true;
  v34 := $$histo_prescan_kernel.Avg[v0];
  assert {:sourceloc} {:sourceloc_num 55} true;
  $$histo_prescan_kernel.Avg[v0] := FADD32(v34, v33);
  assert {:sourceloc} {:sourceloc_num 56} true;
  v35 := $$histo_prescan_kernel.StdDev[BV32_ADD(v0, 2bv32)];
  assert {:sourceloc} {:sourceloc_num 57} true;
  v36 := $$histo_prescan_kernel.StdDev[v0];
  assert {:sourceloc} {:sourceloc_num 58} true;
  $$histo_prescan_kernel.StdDev[v0] := FADD32(v36, v35);
  goto $if.end.126;
$if.end.126:
  assert {:block_sourceloc} {:sourceloc_num 59} true;
  v37 := v0 == 0bv32;
  goto $truebb7, $falsebb7;
$if.then.129:
  assert {:block_sourceloc} {:sourceloc_num 60} true;
  assert {:sourceloc} {:sourceloc_num 61} true;
  v38 := $$histo_prescan_kernel.Avg[0bv32];
  assert {:sourceloc} {:sourceloc_num 62} true;
  v39 := $$histo_prescan_kernel.Avg[1bv32];
  v40 := FDIV32(FADD32(v38, v39), 1140850688bv32);
  assert {:sourceloc} {:sourceloc_num 63} true;
  v41 := $$histo_prescan_kernel.StdDev[0bv32];
  assert {:sourceloc} {:sourceloc_num 64} true;
  v42 := $$histo_prescan_kernel.StdDev[1bv32];
  v43 := FDIV32(FADD32(v41, v42), 1140850688bv32);
  assert {:sourceloc} {:sourceloc_num 65} true;
  call {:atomic} {:atomic_function "__bugle_atomic_min_global_uint"} {:arg1 BV32_UDIV(FP32_TO_UI32(FADD32(FMUL32(3240099840bv32, v43), v40)), 24576bv32)} {:parts 1} {:part 1} v44, $$minmax := _ATOMIC_OP32($$minmax, 0bv32);
  assert {:sourceloc} {:sourceloc_num 66} true;
  call {:atomic} {:atomic_function "__bugle_atomic_max_global_uint"} {:arg1 BV32_UDIV(FP32_TO_UI32(FADD32(FMUL32(1092616192bv32, v43), v40)), 24576bv32)} {:parts 1} {:part 1} v45, $$minmax := _ATOMIC_OP32($$minmax, 1bv32);
  goto $if.end.144;
$if.end.144:
  assert {:block_sourceloc} {:sourceloc_num 67} true;
  return;
$truebb:
  assume {:partition} v5;
  assert {:block_sourceloc} {:sourceloc_num 68} true;
  goto $while.body;
$falsebb:
  assume {:partition} !v5;
  assert {:block_sourceloc} {:sourceloc_num 69} true;
  goto $while.end;
$truebb0:
  assume {:partition} v8;
  assert {:block_sourceloc} {:sourceloc_num 70} true;
  goto $while.body.17;
$falsebb0:
  assume {:partition} !v8;
  assert {:block_sourceloc} {:sourceloc_num 71} true;
  goto $while.end.26;
$truebb1:
  assume {:partition} v11;
  assert {:block_sourceloc} {:sourceloc_num 72} true;
  goto $for.body;
$falsebb1:
  assume {:partition} !v11;
  assert {:block_sourceloc} {:sourceloc_num 73} true;
  goto $for.end;
$truebb2:
  assume {:partition} v12;
  assert {:block_sourceloc} {:sourceloc_num 74} true;
  goto $if.then;
$falsebb2:
  assume {:partition} !v12;
  assert {:block_sourceloc} {:sourceloc_num 75} true;
  goto $if.end;
$truebb3:
  assume {:partition} v17;
  assert {:block_sourceloc} {:sourceloc_num 76} true;
  goto $if.then.81;
$falsebb3:
  assume {:partition} !v17;
  assert {:block_sourceloc} {:sourceloc_num 77} true;
  goto $if.end.90;
$truebb4:
  assume {:partition} v22;
  assert {:block_sourceloc} {:sourceloc_num 78} true;
  goto $if.then.93;
$falsebb4:
  assume {:partition} !v22;
  assert {:block_sourceloc} {:sourceloc_num 79} true;
  goto $if.end.102;
$truebb5:
  assume {:partition} v27;
  assert {:block_sourceloc} {:sourceloc_num 80} true;
  goto $if.then.105;
$falsebb5:
  assume {:partition} !v27;
  assert {:block_sourceloc} {:sourceloc_num 81} true;
  goto $if.end.114;
$truebb6:
  assume {:partition} v32;
  assert {:block_sourceloc} {:sourceloc_num 82} true;
  goto $if.then.117;
$falsebb6:
  assume {:partition} !v32;
  assert {:block_sourceloc} {:sourceloc_num 83} true;
  goto $if.end.126;
$truebb7:
  assume {:partition} v37;
  assert {:block_sourceloc} {:sourceloc_num 84} true;
  goto $if.then.129;
$falsebb7:
  assume {:partition} !v37;
  assert {:block_sourceloc} {:sourceloc_num 85} true;
  goto $if.end.144;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 512bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 64bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_x == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_y == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_z == 0bv32 then 1bv1 else 0bv1) != 0bv1;
