type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP8(x : [bv32]bv8, y : bv32) returns (z : bv8, A : [bv32]bv8);
procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "d_box_gpu"} {:global} $$d_box_gpu : [bv32]bv8;
axiom {:array_info "$$d_box_gpu"} {:global} {:elem_width 8} {:source_name "d_box_gpu"} {:source_elem_width 5248} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 5248} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_box_gpu : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 5248} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_box_gpu : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 5248} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_box_gpu : bool;

var {:source_name "d_rv_gpu"} {:global} $$d_rv_gpu : [bv32]bv32;
axiom {:array_info "$$d_rv_gpu"} {:global} {:elem_width 32} {:source_name "d_rv_gpu"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_rv_gpu : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_rv_gpu : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_rv_gpu : bool;

var {:source_name "d_qv_gpu"} {:global} $$d_qv_gpu : [bv32]bv32;
axiom {:array_info "$$d_qv_gpu"} {:global} {:elem_width 32} {:source_name "d_qv_gpu"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_qv_gpu : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_qv_gpu : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_qv_gpu : bool;

var {:source_name "d_fv_gpu"} {:global} $$d_fv_gpu : [bv32]bv32;
axiom {:array_info "$$d_fv_gpu"} {:global} {:elem_width 32} {:source_name "d_fv_gpu"} {:source_elem_width 128} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_fv_gpu : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_fv_gpu : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_fv_gpu : bool;

var {:source_name "d_dim_gpu.val"} $$d_dim_gpu.val : [bv32]bv8;
axiom {:array_info "$$d_dim_gpu.val"} {:elem_width 8} {:source_name "d_dim_gpu.val"} {:source_elem_width 448} {:source_dimensions "1"} true;

var {:source_name "d_par_gpu.val"} $$d_par_gpu.val : [bv32]bv32;
axiom {:array_info "$$d_par_gpu.val"} {:elem_width 32} {:source_name "d_par_gpu.val"} {:source_elem_width 32} {:source_dimensions "1"} true;

var {:source_name "d"} $$d : [bv32]bv32;
axiom {:array_info "$$d"} {:elem_width 32} {:source_name "d"} {:source_elem_width 96} {:source_dimensions "1"} true;

var {:source_name "rA_shared"} {:group_shared} $$kernel_gpu_opencl.rA_shared : [bv32]bv32;
axiom {:array_info "$$kernel_gpu_opencl.rA_shared"} {:group_shared} {:elem_width 32} {:source_name "rA_shared"} {:source_elem_width 128} {:source_dimensions "100"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$kernel_gpu_opencl.rA_shared : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$kernel_gpu_opencl.rA_shared : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$kernel_gpu_opencl.rA_shared : bool;

var {:source_name "rB_shared"} {:group_shared} $$kernel_gpu_opencl.rB_shared : [bv32]bv32;
axiom {:array_info "$$kernel_gpu_opencl.rB_shared"} {:group_shared} {:elem_width 32} {:source_name "rB_shared"} {:source_elem_width 128} {:source_dimensions "100"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$kernel_gpu_opencl.rB_shared : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$kernel_gpu_opencl.rB_shared : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 128} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$kernel_gpu_opencl.rB_shared : bool;

var {:source_name "qB_shared"} {:group_shared} $$kernel_gpu_opencl.qB_shared : [bv32]bv32;
axiom {:array_info "$$kernel_gpu_opencl.qB_shared"} {:group_shared} {:elem_width 32} {:source_name "qB_shared"} {:source_elem_width 32} {:source_dimensions "100"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$kernel_gpu_opencl.qB_shared : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$kernel_gpu_opencl.qB_shared : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$kernel_gpu_opencl.qB_shared : bool;

const _WATCHED_OFFSET : bv32;
const {:global_offset_x} global_offset_x : bv32;
const {:global_offset_y} global_offset_y : bv32;
const {:global_offset_z} global_offset_z : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FADD32(bv32, bv32) : bv32;
function FEXP32(bv32) : bv32;
function FMUL32(bv32, bv32) : bv32;
function FSUB32(bv32, bv32) : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
function {:bvbuiltin "bvslt"} BV64_SLT(bv64, bv64) : bool;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "sign_extend 32"} BV32_SEXT64(bv32) : bv64;
procedure {:source_name "kernel_gpu_opencl"} {:kernel} $kernel_gpu_opencl($d_par_gpu:bv32, $d_dim_gpu:bv448)
{
  var $wtx.0:bv32;
  var $k.0:bv32;
  var $pointer.0:bv32;
  var $wtx.2:bv32;
  var $wtx.3:bv32;
  var $j.0:bv32;
  var v2:bv8;
  var v3:bv8;
  var v4:bv8;
  var v5:bv8;
  var v79:bv32;
  var v76:bv32;
  var v81:bv32;
  var v72:bv32;
  var v78:bv32;
  var v75:bv32;
  var v71:bv32;
  var v73:bv32;
  var v34:bv8;
  var v35:bv8;
  var v43:bv8;
  var v33:bv8;
  var v41:bv8;
  var v36:bv8;
  var v44:bv8;
  var v37:bv8;
  var v38:bv8;
  var v39:bv8;
  var v42:bv8;
  var v40:bv8;
  var v51:bv32;
  var v49:bv32;
  var v50:bv32;
  var v48:bv32;
  var v47:bv32;
  var v55:bv32;
  var v54:bv32;
  var v57:bv32;
  var v58:bv32;
  var v56:bv32;
  var v59:bv32;
  var v60:bv32;
  var v68:bv32;
  var v65:bv32;
  var v66:bv32;
  var v67:bv32;
  var v61:bv32;
  var v64:bv32;
  var v69:bv32;
  var v70:bv32;
  var v0:bv32;
  var v1:bv32;
  var v10:bool;
  var v14:bv8;
  var v19:bv8;
  var v13:bv8;
  var v8:bv8;
  var v6:bv8;
  var v16:bv8;
  var v18:bv8;
  var v7:bv8;
  var v9:bv8;
  var v15:bv8;
  var v12:bv32;
  var v11:bv32;
  var v17:bv8;
  var v20:bv8;
  var v25:bv32;
  var v26:bv32;
  var v23:bv32;
  var v24:bv32;
  var v30:bv8;
  var v28:bv8;
  var v27:bv8;
  var v29:bv8;
  var v21:bv32;
  var v22:bool;
  var v31:bool;
  var v32:bool;
  var v46:bool;
  var v45:bv32;
  var v62:bv32;
  var v63:bv32;
  var v52:bool;
  var v53:bool;
  var v74:bv32;
  var v80:bv32;
  var v77:bv32;
  var v83:bv32;
  var v84:bv32;
  var v82:bv32;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  $$d_dim_gpu.val[0bv32] := $d_dim_gpu[8:0];
  $$d_dim_gpu.val[1bv32] := $d_dim_gpu[16:8];
  $$d_dim_gpu.val[2bv32] := $d_dim_gpu[24:16];
  $$d_dim_gpu.val[3bv32] := $d_dim_gpu[32:24];
  $$d_dim_gpu.val[4bv32] := $d_dim_gpu[40:32];
  $$d_dim_gpu.val[5bv32] := $d_dim_gpu[48:40];
  $$d_dim_gpu.val[6bv32] := $d_dim_gpu[56:48];
  $$d_dim_gpu.val[7bv32] := $d_dim_gpu[64:56];
  $$d_dim_gpu.val[8bv32] := $d_dim_gpu[72:64];
  $$d_dim_gpu.val[9bv32] := $d_dim_gpu[80:72];
  $$d_dim_gpu.val[10bv32] := $d_dim_gpu[88:80];
  $$d_dim_gpu.val[11bv32] := $d_dim_gpu[96:88];
  $$d_dim_gpu.val[12bv32] := $d_dim_gpu[104:96];
  $$d_dim_gpu.val[13bv32] := $d_dim_gpu[112:104];
  $$d_dim_gpu.val[14bv32] := $d_dim_gpu[120:112];
  $$d_dim_gpu.val[15bv32] := $d_dim_gpu[128:120];
  $$d_dim_gpu.val[16bv32] := $d_dim_gpu[136:128];
  $$d_dim_gpu.val[17bv32] := $d_dim_gpu[144:136];
  $$d_dim_gpu.val[18bv32] := $d_dim_gpu[152:144];
  $$d_dim_gpu.val[19bv32] := $d_dim_gpu[160:152];
  $$d_dim_gpu.val[20bv32] := $d_dim_gpu[168:160];
  $$d_dim_gpu.val[21bv32] := $d_dim_gpu[176:168];
  $$d_dim_gpu.val[22bv32] := $d_dim_gpu[184:176];
  $$d_dim_gpu.val[23bv32] := $d_dim_gpu[192:184];
  $$d_dim_gpu.val[24bv32] := $d_dim_gpu[200:192];
  $$d_dim_gpu.val[25bv32] := $d_dim_gpu[208:200];
  $$d_dim_gpu.val[26bv32] := $d_dim_gpu[216:208];
  $$d_dim_gpu.val[27bv32] := $d_dim_gpu[224:216];
  $$d_dim_gpu.val[28bv32] := $d_dim_gpu[232:224];
  $$d_dim_gpu.val[29bv32] := $d_dim_gpu[240:232];
  $$d_dim_gpu.val[30bv32] := $d_dim_gpu[248:240];
  $$d_dim_gpu.val[31bv32] := $d_dim_gpu[256:248];
  $$d_dim_gpu.val[32bv32] := $d_dim_gpu[264:256];
  $$d_dim_gpu.val[33bv32] := $d_dim_gpu[272:264];
  $$d_dim_gpu.val[34bv32] := $d_dim_gpu[280:272];
  $$d_dim_gpu.val[35bv32] := $d_dim_gpu[288:280];
  $$d_dim_gpu.val[36bv32] := $d_dim_gpu[296:288];
  $$d_dim_gpu.val[37bv32] := $d_dim_gpu[304:296];
  $$d_dim_gpu.val[38bv32] := $d_dim_gpu[312:304];
  $$d_dim_gpu.val[39bv32] := $d_dim_gpu[320:312];
  $$d_dim_gpu.val[40bv32] := $d_dim_gpu[328:320];
  $$d_dim_gpu.val[41bv32] := $d_dim_gpu[336:328];
  $$d_dim_gpu.val[42bv32] := $d_dim_gpu[344:336];
  $$d_dim_gpu.val[43bv32] := $d_dim_gpu[352:344];
  $$d_dim_gpu.val[44bv32] := $d_dim_gpu[360:352];
  $$d_dim_gpu.val[45bv32] := $d_dim_gpu[368:360];
  $$d_dim_gpu.val[46bv32] := $d_dim_gpu[376:368];
  $$d_dim_gpu.val[47bv32] := $d_dim_gpu[384:376];
  $$d_dim_gpu.val[48bv32] := $d_dim_gpu[392:384];
  $$d_dim_gpu.val[49bv32] := $d_dim_gpu[400:392];
  $$d_dim_gpu.val[50bv32] := $d_dim_gpu[408:400];
  $$d_dim_gpu.val[51bv32] := $d_dim_gpu[416:408];
  $$d_dim_gpu.val[52bv32] := $d_dim_gpu[424:416];
  $$d_dim_gpu.val[53bv32] := $d_dim_gpu[432:424];
  $$d_dim_gpu.val[54bv32] := $d_dim_gpu[440:432];
  $$d_dim_gpu.val[55bv32] := $d_dim_gpu[448:440];
  $$d_par_gpu.val[0bv32] := $d_par_gpu;
  v0 := group_id_x;
  v1 := local_id_x;
  assert {:sourceloc} {:sourceloc_num 1} true;
  v2 := $$d_dim_gpu.val[16bv32];
  assert {:sourceloc} {:sourceloc_num 2} true;
  v3 := $$d_dim_gpu.val[17bv32];
  assert {:sourceloc} {:sourceloc_num 3} true;
  v4 := $$d_dim_gpu.val[18bv32];
  assert {:sourceloc} {:sourceloc_num 4} true;
  v5 := $$d_dim_gpu.val[19bv32];
  assert {:sourceloc} {:sourceloc_num 5} true;
  v6 := $$d_dim_gpu.val[20bv32];
  assert {:sourceloc} {:sourceloc_num 6} true;
  v7 := $$d_dim_gpu.val[21bv32];
  assert {:sourceloc} {:sourceloc_num 7} true;
  v8 := $$d_dim_gpu.val[22bv32];
  assert {:sourceloc} {:sourceloc_num 8} true;
  v9 := $$d_dim_gpu.val[23bv32];
  v10 := BV64_SLT(BV32_SEXT64(v0), v9 ++ v8 ++ v7 ++ v6 ++ v5 ++ v4 ++ v3 ++ v2);
  goto $truebb, $falsebb;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  assert {:sourceloc} {:sourceloc_num 10} true;
  v11 := $$d_par_gpu.val[0bv32];
  assert {:sourceloc} {:sourceloc_num 11} true;
  v12 := $$d_par_gpu.val[0bv32];
  assert {:sourceloc} {:sourceloc_num 12} true;
  v13 := $$d_box_gpu[BV32_ADD(BV32_MUL(v0, 656bv32), 16bv32)];
  assert {:sourceloc} {:sourceloc_num 13} true;
  v14 := $$d_box_gpu[BV32_ADD(BV32_MUL(v0, 656bv32), 17bv32)];
  assert {:sourceloc} {:sourceloc_num 14} true;
  v15 := $$d_box_gpu[BV32_ADD(BV32_MUL(v0, 656bv32), 18bv32)];
  assert {:sourceloc} {:sourceloc_num 15} true;
  v16 := $$d_box_gpu[BV32_ADD(BV32_MUL(v0, 656bv32), 19bv32)];
  assert {:sourceloc} {:sourceloc_num 16} true;
  v17 := $$d_box_gpu[BV32_ADD(BV32_MUL(v0, 656bv32), 20bv32)];
  assert {:sourceloc} {:sourceloc_num 17} true;
  v18 := $$d_box_gpu[BV32_ADD(BV32_MUL(v0, 656bv32), 21bv32)];
  assert {:sourceloc} {:sourceloc_num 18} true;
  v19 := $$d_box_gpu[BV32_ADD(BV32_MUL(v0, 656bv32), 22bv32)];
  assert {:sourceloc} {:sourceloc_num 19} true;
  v20 := $$d_box_gpu[BV32_ADD(BV32_MUL(v0, 656bv32), 23bv32)];
  v21 := v16 ++ v15 ++ v14 ++ v13;
  $wtx.0 := v1;
  goto $while.cond;
$while.cond:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  v22 := BV32_SLT($wtx.0, 100bv32);
  goto $truebb0, $falsebb0;
$while.body:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  assert {:sourceloc} {:sourceloc_num 22} true;
  v23 := $$d_rv_gpu[BV32_MUL(BV32_ADD(v21, $wtx.0), 4bv32)];
  assert {:sourceloc} {:sourceloc_num 23} true;
  $$kernel_gpu_opencl.rA_shared[BV32_MUL($wtx.0, 4bv32)] := v23;
  assert {:sourceloc} {:sourceloc_num 24} true;
  v24 := $$d_rv_gpu[BV32_ADD(BV32_MUL(BV32_ADD(v21, $wtx.0), 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 25} true;
  $$kernel_gpu_opencl.rA_shared[BV32_ADD(BV32_MUL($wtx.0, 4bv32), 1bv32)] := v24;
  assert {:sourceloc} {:sourceloc_num 26} true;
  v25 := $$d_rv_gpu[BV32_ADD(BV32_MUL(BV32_ADD(v21, $wtx.0), 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 27} true;
  $$kernel_gpu_opencl.rA_shared[BV32_ADD(BV32_MUL($wtx.0, 4bv32), 2bv32)] := v25;
  assert {:sourceloc} {:sourceloc_num 28} true;
  v26 := $$d_rv_gpu[BV32_ADD(BV32_MUL(BV32_ADD(v21, $wtx.0), 4bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 29} true;
  $$kernel_gpu_opencl.rA_shared[BV32_ADD(BV32_MUL($wtx.0, 4bv32), 3bv32)] := v26;
  $wtx.0 := BV32_ADD($wtx.0, 128bv32);
  goto $while.cond;
$while.end:
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  call {:sourceloc_num 31} $bugle_barrier(1bv1, 0bv1);
  $k.0 := 0bv32;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  assert {:sourceloc} {:sourceloc_num 33} true;
  v27 := $$d_box_gpu[BV32_ADD(BV32_MUL(v0, 656bv32), 24bv32)];
  assert {:sourceloc} {:sourceloc_num 34} true;
  v28 := $$d_box_gpu[BV32_ADD(BV32_MUL(v0, 656bv32), 25bv32)];
  assert {:sourceloc} {:sourceloc_num 35} true;
  v29 := $$d_box_gpu[BV32_ADD(BV32_MUL(v0, 656bv32), 26bv32)];
  assert {:sourceloc} {:sourceloc_num 36} true;
  v30 := $$d_box_gpu[BV32_ADD(BV32_MUL(v0, 656bv32), 27bv32)];
  v31 := BV32_SLT($k.0, BV32_ADD(1bv32, v30 ++ v29 ++ v28 ++ v27));
  goto $truebb1, $falsebb1;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  v32 := $k.0 == 0bv32;
  goto $truebb2, $falsebb2;
$if.then.17:
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  $pointer.0 := v0;
  goto $if.end;
$if.else:
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  assert {:sourceloc} {:sourceloc_num 40} true;
  v33 := $$d_box_gpu[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(v0, 656bv32), 32bv32), BV32_MUL(BV32_SUB($k.0, 1bv32), 24bv32)), 12bv32)];
  assert {:sourceloc} {:sourceloc_num 41} true;
  v34 := $$d_box_gpu[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(v0, 656bv32), 32bv32), BV32_MUL(BV32_SUB($k.0, 1bv32), 24bv32)), 13bv32)];
  assert {:sourceloc} {:sourceloc_num 42} true;
  v35 := $$d_box_gpu[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(v0, 656bv32), 32bv32), BV32_MUL(BV32_SUB($k.0, 1bv32), 24bv32)), 14bv32)];
  assert {:sourceloc} {:sourceloc_num 43} true;
  v36 := $$d_box_gpu[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(v0, 656bv32), 32bv32), BV32_MUL(BV32_SUB($k.0, 1bv32), 24bv32)), 15bv32)];
  $pointer.0 := v36 ++ v35 ++ v34 ++ v33;
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 44} true;
  assert {:sourceloc} {:sourceloc_num 45} true;
  v37 := $$d_box_gpu[BV32_ADD(BV32_MUL($pointer.0, 656bv32), 16bv32)];
  assert {:sourceloc} {:sourceloc_num 46} true;
  v38 := $$d_box_gpu[BV32_ADD(BV32_MUL($pointer.0, 656bv32), 17bv32)];
  assert {:sourceloc} {:sourceloc_num 47} true;
  v39 := $$d_box_gpu[BV32_ADD(BV32_MUL($pointer.0, 656bv32), 18bv32)];
  assert {:sourceloc} {:sourceloc_num 48} true;
  v40 := $$d_box_gpu[BV32_ADD(BV32_MUL($pointer.0, 656bv32), 19bv32)];
  assert {:sourceloc} {:sourceloc_num 49} true;
  v41 := $$d_box_gpu[BV32_ADD(BV32_MUL($pointer.0, 656bv32), 20bv32)];
  assert {:sourceloc} {:sourceloc_num 50} true;
  v42 := $$d_box_gpu[BV32_ADD(BV32_MUL($pointer.0, 656bv32), 21bv32)];
  assert {:sourceloc} {:sourceloc_num 51} true;
  v43 := $$d_box_gpu[BV32_ADD(BV32_MUL($pointer.0, 656bv32), 22bv32)];
  assert {:sourceloc} {:sourceloc_num 52} true;
  v44 := $$d_box_gpu[BV32_ADD(BV32_MUL($pointer.0, 656bv32), 23bv32)];
  v45 := v40 ++ v39 ++ v38 ++ v37;
  $wtx.2 := v1;
  goto $while.cond.23;
$while.cond.23:
  assert {:block_sourceloc} {:sourceloc_num 53} true;
  v46 := BV32_SLT($wtx.2, 100bv32);
  goto $truebb3, $falsebb3;
$while.body.26:
  assert {:block_sourceloc} {:sourceloc_num 54} true;
  assert {:sourceloc} {:sourceloc_num 55} true;
  v47 := $$d_rv_gpu[BV32_MUL(BV32_ADD(v45, $wtx.2), 4bv32)];
  assert {:sourceloc} {:sourceloc_num 56} true;
  $$kernel_gpu_opencl.rB_shared[BV32_MUL($wtx.2, 4bv32)] := v47;
  assert {:sourceloc} {:sourceloc_num 57} true;
  v48 := $$d_rv_gpu[BV32_ADD(BV32_MUL(BV32_ADD(v45, $wtx.2), 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 58} true;
  $$kernel_gpu_opencl.rB_shared[BV32_ADD(BV32_MUL($wtx.2, 4bv32), 1bv32)] := v48;
  assert {:sourceloc} {:sourceloc_num 59} true;
  v49 := $$d_rv_gpu[BV32_ADD(BV32_MUL(BV32_ADD(v45, $wtx.2), 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 60} true;
  $$kernel_gpu_opencl.rB_shared[BV32_ADD(BV32_MUL($wtx.2, 4bv32), 2bv32)] := v49;
  assert {:sourceloc} {:sourceloc_num 61} true;
  v50 := $$d_rv_gpu[BV32_ADD(BV32_MUL(BV32_ADD(v45, $wtx.2), 4bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 62} true;
  $$kernel_gpu_opencl.rB_shared[BV32_ADD(BV32_MUL($wtx.2, 4bv32), 3bv32)] := v50;
  assert {:sourceloc} {:sourceloc_num 63} true;
  v51 := $$d_qv_gpu[BV32_ADD(v45, $wtx.2)];
  assert {:sourceloc} {:sourceloc_num 64} true;
  $$kernel_gpu_opencl.qB_shared[$wtx.2] := v51;
  $wtx.2 := BV32_ADD($wtx.2, 128bv32);
  goto $while.cond.23;
$while.end.34:
  assert {:block_sourceloc} {:sourceloc_num 65} true;
  call {:sourceloc_num 66} $bugle_barrier(1bv1, 0bv1);
  $wtx.3 := v1;
  goto $while.cond.35;
$while.cond.35:
  assert {:block_sourceloc} {:sourceloc_num 67} true;
  v52 := BV32_SLT($wtx.3, 100bv32);
  goto $truebb4, $falsebb4;
$while.body.38:
  assert {:block_sourceloc} {:sourceloc_num 68} true;
  $j.0 := 0bv32;
  goto $for.cond.39;
$for.cond.39:
  assert {:block_sourceloc} {:sourceloc_num 69} true;
  v53 := BV32_SLT($j.0, 100bv32);
  goto $truebb5, $falsebb5;
$for.body.42:
  assert {:block_sourceloc} {:sourceloc_num 70} true;
  assert {:sourceloc} {:sourceloc_num 71} true;
  v54 := $$kernel_gpu_opencl.rA_shared[BV32_MUL($wtx.3, 4bv32)];
  assert {:sourceloc} {:sourceloc_num 72} true;
  v55 := $$kernel_gpu_opencl.rB_shared[BV32_MUL($j.0, 4bv32)];
  assert {:sourceloc} {:sourceloc_num 73} true;
  v56 := $$kernel_gpu_opencl.rA_shared[BV32_ADD(BV32_MUL($wtx.3, 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 74} true;
  v57 := $$kernel_gpu_opencl.rB_shared[BV32_ADD(BV32_MUL($j.0, 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 75} true;
  v58 := $$kernel_gpu_opencl.rA_shared[BV32_ADD(BV32_MUL($wtx.3, 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 76} true;
  v59 := $$kernel_gpu_opencl.rB_shared[BV32_ADD(BV32_MUL($j.0, 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 77} true;
  v60 := $$kernel_gpu_opencl.rA_shared[BV32_ADD(BV32_MUL($wtx.3, 4bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 78} true;
  v61 := $$kernel_gpu_opencl.rB_shared[BV32_ADD(BV32_MUL($j.0, 4bv32), 3bv32)];
  v62 := FEXP32(FMUL32(FSUB32(2147483648bv32, FMUL32(FMUL32(FMUL32(1073741824bv32, v11), v12), FSUB32(FADD32(v54, v55), FADD32(FMUL32(v60, v61), FADD32(FMUL32(v56, v57), FMUL32(v58, v59)))))), 1069066811bv32));
  v63 := FMUL32(1073741824bv32, v62);
  assert {:sourceloc} {:sourceloc_num 79} true;
  v64 := $$kernel_gpu_opencl.rA_shared[BV32_ADD(BV32_MUL($wtx.3, 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 80} true;
  v65 := $$kernel_gpu_opencl.rB_shared[BV32_ADD(BV32_MUL($j.0, 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 81} true;
  $$d[0bv32] := FSUB32(v64, v65);
  assert {:sourceloc} {:sourceloc_num 82} true;
  v66 := $$d[0bv32];
  assert {:sourceloc} {:sourceloc_num 83} true;
  v67 := $$kernel_gpu_opencl.rA_shared[BV32_ADD(BV32_MUL($wtx.3, 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 84} true;
  v68 := $$kernel_gpu_opencl.rB_shared[BV32_ADD(BV32_MUL($j.0, 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 85} true;
  $$d[1bv32] := FSUB32(v67, v68);
  assert {:sourceloc} {:sourceloc_num 86} true;
  v69 := $$d[1bv32];
  assert {:sourceloc} {:sourceloc_num 87} true;
  v70 := $$kernel_gpu_opencl.rA_shared[BV32_ADD(BV32_MUL($wtx.3, 4bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 88} true;
  v71 := $$kernel_gpu_opencl.rB_shared[BV32_ADD(BV32_MUL($j.0, 4bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 89} true;
  $$d[2bv32] := FSUB32(v70, v71);
  assert {:sourceloc} {:sourceloc_num 90} true;
  v72 := $$d[2bv32];
  assert {:sourceloc} {:sourceloc_num 91} true;
  v73 := $$kernel_gpu_opencl.qB_shared[$j.0];
  v74 := BV32_ADD(v21, $wtx.3);
  assert {:sourceloc} {:sourceloc_num 92} true;
  v75 := $$d_fv_gpu[BV32_MUL(v74, 4bv32)];
  assert {:sourceloc} {:sourceloc_num 93} true;
  $$d_fv_gpu[BV32_MUL(v74, 4bv32)] := FADD32(v75, FMUL32(v73, v62));
  assert {:sourceloc} {:sourceloc_num 94} true;
  v76 := $$kernel_gpu_opencl.qB_shared[$j.0];
  v77 := BV32_ADD(v21, $wtx.3);
  assert {:sourceloc} {:sourceloc_num 95} true;
  v78 := $$d_fv_gpu[BV32_ADD(BV32_MUL(v77, 4bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 96} true;
  $$d_fv_gpu[BV32_ADD(BV32_MUL(v77, 4bv32), 1bv32)] := FADD32(v78, FMUL32(v76, FMUL32(v63, v66)));
  assert {:sourceloc} {:sourceloc_num 97} true;
  v79 := $$kernel_gpu_opencl.qB_shared[$j.0];
  v80 := BV32_ADD(v21, $wtx.3);
  assert {:sourceloc} {:sourceloc_num 98} true;
  v81 := $$d_fv_gpu[BV32_ADD(BV32_MUL(v80, 4bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 99} true;
  $$d_fv_gpu[BV32_ADD(BV32_MUL(v80, 4bv32), 2bv32)] := FADD32(v81, FMUL32(v79, FMUL32(v63, v69)));
  assert {:sourceloc} {:sourceloc_num 100} true;
  v82 := $$kernel_gpu_opencl.qB_shared[$j.0];
  v83 := BV32_ADD(v21, $wtx.3);
  assert {:sourceloc} {:sourceloc_num 101} true;
  v84 := $$d_fv_gpu[BV32_ADD(BV32_MUL(v83, 4bv32), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 102} true;
  $$d_fv_gpu[BV32_ADD(BV32_MUL(v83, 4bv32), 3bv32)] := FADD32(v84, FMUL32(v82, FMUL32(v63, v72)));
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 103} true;
  $j.0 := BV32_ADD($j.0, 1bv32);
  goto $for.cond.39;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 104} true;
  $wtx.3 := BV32_ADD($wtx.3, 128bv32);
  goto $while.cond.35;
$while.end.113:
  assert {:block_sourceloc} {:sourceloc_num 105} true;
  call {:sourceloc_num 106} $bugle_barrier(1bv1, 0bv1);
  goto $for.inc.114;
$for.inc.114:
  assert {:block_sourceloc} {:sourceloc_num 107} true;
  $k.0 := BV32_ADD($k.0, 1bv32);
  goto $for.cond;
$for.end.116:
  assert {:block_sourceloc} {:sourceloc_num 108} true;
  goto $if.end.117;
$if.end.117:
  assert {:block_sourceloc} {:sourceloc_num 109} true;
  return;
$truebb:
  assume {:partition} v10;
  assert {:block_sourceloc} {:sourceloc_num 110} true;
  goto $if.then;
$falsebb:
  assume {:partition} !v10;
  assert {:block_sourceloc} {:sourceloc_num 111} true;
  goto $if.end.117;
$truebb0:
  assume {:partition} v22;
  assert {:block_sourceloc} {:sourceloc_num 112} true;
  goto $while.body;
$falsebb0:
  assume {:partition} !v22;
  assert {:block_sourceloc} {:sourceloc_num 113} true;
  goto $while.end;
$truebb1:
  assume {:partition} v31;
  assert {:block_sourceloc} {:sourceloc_num 114} true;
  goto $for.body;
$falsebb1:
  assume {:partition} !v31;
  assert {:block_sourceloc} {:sourceloc_num 115} true;
  goto $for.end.116;
$truebb2:
  assume {:partition} v32;
  assert {:block_sourceloc} {:sourceloc_num 116} true;
  goto $if.then.17;
$falsebb2:
  assume {:partition} !v32;
  assert {:block_sourceloc} {:sourceloc_num 117} true;
  goto $if.else;
$truebb3:
  assume {:partition} v46;
  assert {:block_sourceloc} {:sourceloc_num 118} true;
  goto $while.body.26;
$falsebb3:
  assume {:partition} !v46;
  assert {:block_sourceloc} {:sourceloc_num 119} true;
  goto $while.end.34;
$truebb4:
  assume {:partition} v52;
  assert {:block_sourceloc} {:sourceloc_num 120} true;
  goto $while.body.38;
$falsebb4:
  assume {:partition} !v52;
  assert {:block_sourceloc} {:sourceloc_num 121} true;
  goto $while.end.113;
$truebb5:
  assume {:partition} v53;
  assert {:block_sourceloc} {:sourceloc_num 122} true;
  goto $for.body.42;
$falsebb5:
  assume {:partition} !v53;
  assert {:block_sourceloc} {:sourceloc_num 123} true;
  goto $for.end;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 128bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 1000bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_x == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_y == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_z == 0bv32 then 1bv1 else 0bv1) != 0bv1;
