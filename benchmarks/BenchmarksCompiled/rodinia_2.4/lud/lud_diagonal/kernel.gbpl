type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "m"} {:global} $$m : [bv32]bv32;
axiom {:array_info "$$m"} {:global} {:elem_width 32} {:source_name "m"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$m : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$m : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$m : bool;

var {:source_name "shadow"} {:group_shared} $$shadow : [bv32]bv32;
axiom {:array_info "$$shadow"} {:group_shared} {:elem_width 32} {:source_name "shadow"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$shadow : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$shadow : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$shadow : bool;

const _WATCHED_OFFSET : bv32;
const {:global_offset_x} global_offset_x : bv32;
const {:global_offset_y} global_offset_y : bv32;
const {:global_offset_z} global_offset_z : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FDIV32(bv32, bv32) : bv32;
function FMUL32(bv32, bv32) : bv32;
function FSUB32(bv32, bv32) : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvor"} BV32_OR(bv32, bv32) : bv32;
function {:bvbuiltin "bvsgt"} BV32_SGT(bv32, bv32) : bool;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvule"} BV32_ULE(bv32, bv32) : bool;
function {:bvbuiltin "bvult"} BV32_ULT(bv32, bv32) : bool;
function {:bvbuiltin "bvurem"} BV32_UREM(bv32, bv32) : bv32;
function {:bvbuiltin "zero_extend 31"} BV1_ZEXT32(bv1) : bv32;
procedure {:source_name "lud_diagonal"} {:kernel} $lud_diagonal($matrix_dim:bv32, $offset:bv32)
requires {:sourceloc_num 0} (if $matrix_dim == 1024bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 1} (if $offset == 0bv32 then 1bv1 else 0bv1) != 0bv1;
{
  var $i.0:bv32;
  var $array_offset.0:bv32;
  var $i.1:bv32;
  var $j.0:bv32;
  var $j.1:bv32;
  var $i.2:bv32;
  var $array_offset.1:bv32;
  var v0:bv32;
  var v1:bool;
  var v9:bv32;
  var v6:bv32;
  var v7:bv32;
  var v2:bv32;
  var v16:bv32;
  var v18:bv32;
  var v10:bv32;
  var v12:bv32;
  var v15:bv32;
  var v4:bool;
  var v3:bool;
  var v5:bool;
  var v8:bv32;
  var v13:bool;
  var v11:bv32;
  var v17:bv32;
  var v14:bool;
  var v19:bool;
  var v20:bv32;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v0 := local_id_x;
  $i.0, $array_offset.0 := 0bv32, BV32_ADD(BV32_MUL($offset, $matrix_dim), $offset);
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  v1 := BV32_SLT($i.0, 16bv32);
  goto $truebb, $falsebb;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  assert {:sourceloc} {:sourceloc_num 5} true;
  v2 := $$m[BV32_ADD($array_offset.0, v0)];
  assert {:sourceloc} {:sourceloc_num 6} true;
  $$shadow[BV32_ADD(BV32_MUL($i.0, 16bv32), v0)] := v2;
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  $i.0, $array_offset.0 := BV32_ADD($i.0, 1bv32), BV32_ADD($array_offset.0, $matrix_dim);
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  call {:sourceloc_num 9} $bugle_barrier(1bv1, 0bv1);
  $i.1 := 0bv32;
  goto $for.cond.8;
$for.cond.8:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  v3 := BV32_SLT($i.1, 15bv32);
  goto $truebb0, $falsebb0;
$for.body.10:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  v4 := BV32_SGT(v0, $i.1);
  goto $truebb1, $falsebb1;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  $j.0 := 0bv32;
  goto $for.cond.12;
$for.cond.12:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 14} (if (_READ_HAS_OCCURRED_$$shadow ==> BV32_OR(BV1_ZEXT32((if BV32_ULE(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), BV32_MUL(v0, 16bv32)), $i.1) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_ULT(BV32_UDIV(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), $i.1), 16bv32), $i.1) then 1bv1 else 0bv1))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
  v5 := BV32_SLT($j.0, $i.1);
  goto $truebb2, $falsebb2;
$for.body.26:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  assert {:sourceloc} {:sourceloc_num 16} true;
  v6 := $$shadow[BV32_ADD(BV32_MUL(v0, 16bv32), $j.0)];
  assert {:sourceloc} {:sourceloc_num 17} true;
  v7 := $$shadow[BV32_ADD(BV32_MUL($j.0, 16bv32), $i.1)];
  v8 := BV32_ADD(BV32_MUL(v0, 16bv32), $i.1);
  assert {:sourceloc} {:sourceloc_num 18} true;
  v9 := $$shadow[v8];
  assert {:sourceloc} {:sourceloc_num 19} true;
  $$shadow[v8] := FSUB32(v9, FMUL32(v6, v7));
  goto $for.inc.38;
$for.inc.38:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  $j.0 := BV32_ADD($j.0, 1bv32);
  goto $for.cond.12;
$for.end.40:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  assert {:sourceloc} {:sourceloc_num 22} true;
  v10 := $$shadow[BV32_ADD(BV32_MUL($i.1, 16bv32), $i.1)];
  v11 := BV32_ADD(BV32_MUL(v0, 16bv32), $i.1);
  assert {:sourceloc} {:sourceloc_num 23} true;
  v12 := $$shadow[v11];
  assert {:sourceloc} {:sourceloc_num 24} true;
  $$shadow[v11] := FDIV32(v12, v10);
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  call {:sourceloc_num 26} $bugle_barrier(1bv1, 0bv1);
  v13 := BV32_SGT(v0, $i.1);
  goto $truebb3, $falsebb3;
$if.then.50:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  $j.1 := 0bv32;
  goto $for.cond.51;
$for.cond.51:
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 29} (if (_READ_HAS_OCCURRED_$$shadow ==> BV32_OR(BV1_ZEXT32((if BV32_UREM(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), v0), 16bv32) == 0bv32 then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_ULT(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), BV32_MUL(16bv32, BV32_ADD($i.1, 1bv32))), BV32_ADD($i.1, 1bv32)) then 1bv1 else 0bv1))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
  v14 := BV32_SLT($j.1, BV32_ADD($i.1, 1bv32));
  goto $truebb4, $falsebb4;
$for.body.72:
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  assert {:sourceloc} {:sourceloc_num 31} true;
  v15 := $$shadow[BV32_ADD(BV32_MUL(BV32_ADD($i.1, 1bv32), 16bv32), $j.1)];
  assert {:sourceloc} {:sourceloc_num 32} true;
  v16 := $$shadow[BV32_ADD(BV32_MUL($j.1, 16bv32), v0)];
  v17 := BV32_ADD(BV32_MUL(BV32_ADD($i.1, 1bv32), 16bv32), v0);
  assert {:sourceloc} {:sourceloc_num 33} true;
  v18 := $$shadow[v17];
  assert {:sourceloc} {:sourceloc_num 34} true;
  $$shadow[v17] := FSUB32(v18, FMUL32(v15, v16));
  goto $for.inc.86;
$for.inc.86:
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  $j.1 := BV32_ADD($j.1, 1bv32);
  goto $for.cond.51;
$for.end.88:
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  goto $if.end.89;
$if.end.89:
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  call {:sourceloc_num 38} $bugle_barrier(1bv1, 0bv1);
  goto $for.inc.90;
$for.inc.90:
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  $i.1 := BV32_ADD($i.1, 1bv32);
  goto $for.cond.8;
$for.end.92:
  assert {:block_sourceloc} {:sourceloc_num 40} true;
  $i.2, $array_offset.1 := 1bv32, BV32_ADD(BV32_MUL(BV32_ADD($offset, 1bv32), $matrix_dim), $offset);
  goto $for.cond.96;
$for.cond.96:
  assert {:block_sourceloc} {:sourceloc_num 41} true;
  v19 := BV32_SLT($i.2, 16bv32);
  goto $truebb5, $falsebb5;
$for.body.99:
  assert {:block_sourceloc} {:sourceloc_num 42} true;
  assert {:sourceloc} {:sourceloc_num 43} true;
  v20 := $$shadow[BV32_ADD(BV32_MUL($i.2, 16bv32), v0)];
  assert {:sourceloc} {:sourceloc_num 44} true;
  $$m[BV32_ADD($array_offset.1, v0)] := v20;
  goto $for.inc.106;
$for.inc.106:
  assert {:block_sourceloc} {:sourceloc_num 45} true;
  $i.2, $array_offset.1 := BV32_ADD($i.2, 1bv32), BV32_ADD($array_offset.1, $matrix_dim);
  goto $for.cond.96;
$for.end.108:
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  return;
$truebb:
  assume {:partition} v1;
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  goto $for.body;
$falsebb:
  assume {:partition} !v1;
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  goto $for.end;
$truebb0:
  assume {:partition} v3;
  assert {:block_sourceloc} {:sourceloc_num 49} true;
  goto $for.body.10;
$falsebb0:
  assume {:partition} !v3;
  assert {:block_sourceloc} {:sourceloc_num 50} true;
  goto $for.end.92;
$truebb1:
  assume {:partition} v4;
  assert {:block_sourceloc} {:sourceloc_num 51} true;
  goto $if.then;
$falsebb1:
  assume {:partition} !v4;
  assert {:block_sourceloc} {:sourceloc_num 52} true;
  goto $if.end;
$truebb2:
  assume {:partition} v5;
  assert {:block_sourceloc} {:sourceloc_num 53} true;
  goto $for.body.26;
$falsebb2:
  assume {:partition} !v5;
  assert {:block_sourceloc} {:sourceloc_num 54} true;
  goto $for.end.40;
$truebb3:
  assume {:partition} v13;
  assert {:block_sourceloc} {:sourceloc_num 55} true;
  goto $if.then.50;
$falsebb3:
  assume {:partition} !v13;
  assert {:block_sourceloc} {:sourceloc_num 56} true;
  goto $if.end.89;
$truebb4:
  assume {:partition} v14;
  assert {:block_sourceloc} {:sourceloc_num 57} true;
  goto $for.body.72;
$falsebb4:
  assume {:partition} !v14;
  assert {:block_sourceloc} {:sourceloc_num 58} true;
  goto $for.end.88;
$truebb5:
  assume {:partition} v19;
  assert {:block_sourceloc} {:sourceloc_num 59} true;
  goto $for.body.99;
$falsebb5:
  assume {:partition} !v19;
  assert {:block_sourceloc} {:sourceloc_num 60} true;
  goto $for.end.108;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 16bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_x == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_y == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_z == 0bv32 then 1bv1 else 0bv1) != 0bv1;
