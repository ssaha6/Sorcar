type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "m"} {:global} $$m : [bv32]bv32;
axiom {:array_info "$$m"} {:global} {:elem_width 32} {:source_name "m"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$m : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$m : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$m : bool;

var {:source_name "dia"} {:group_shared} $$dia : [bv32]bv32;
axiom {:array_info "$$dia"} {:group_shared} {:elem_width 32} {:source_name "dia"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$dia : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$dia : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$dia : bool;

var {:source_name "peri_row"} {:group_shared} $$peri_row : [bv32]bv32;
axiom {:array_info "$$peri_row"} {:group_shared} {:elem_width 32} {:source_name "peri_row"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$peri_row : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$peri_row : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$peri_row : bool;

var {:source_name "peri_col"} {:group_shared} $$peri_col : [bv32]bv32;
axiom {:array_info "$$peri_col"} {:group_shared} {:elem_width 32} {:source_name "peri_col"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$peri_col : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$peri_col : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$peri_col : bool;

const _WATCHED_OFFSET : bv32;
const {:global_offset_x} global_offset_x : bv32;
const {:global_offset_y} global_offset_y : bv32;
const {:global_offset_z} global_offset_z : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FDIV32(bv32, bv32) : bv32;
function FMUL32(bv32, bv32) : bv32;
function FSUB32(bv32, bv32) : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvand"} BV32_AND(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvor"} BV32_OR(bv32, bv32) : bv32;
function {:bvbuiltin "bvsge"} BV32_SGE(bv32, bv32) : bool;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvult"} BV32_ULT(bv32, bv32) : bool;
function {:bvbuiltin "bvurem"} BV32_UREM(bv32, bv32) : bv32;
function {:bvbuiltin "zero_extend 31"} BV1_ZEXT32(bv1) : bv32;
procedure {:source_name "lud_perimeter"} {:kernel} $lud_perimeter($matrix_dim:bv32, $offset:bv32)
requires {:sourceloc_num 0} (if $matrix_dim == 1024bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 1} (if $offset == 0bv32 then 1bv1 else 0bv1) != 0bv1;
{
  var $i.0:bv32;
  var $array_offset.0:bv32;
  var $i.1:bv32;
  var $array_offset.1:bv32;
  var $i.2:bv32;
  var $array_offset.2:bv32;
  var $i.3:bv32;
  var $array_offset.3:bv32;
  var $i.4:bv32;
  var $j.0:bv32;
  var $i.5:bv32;
  var $j.1:bv32;
  var $i.6:bv32;
  var $array_offset.4:bv32;
  var $i.7:bv32;
  var $array_offset.5:bv32;
  var v2:bool;
  var v1:bv32;
  var v0:bv32;
  var v3:bool;
  var v22:bv32;
  var v15:bv32;
  var v18:bv32;
  var v16:bv32;
  var v23:bv32;
  var v25:bv32;
  var v26:bv32;
  var v31:bv32;
  var v28:bv32;
  var v34:bv32;
  var v6:bv32;
  var v4:bv32;
  var v9:bv32;
  var v11:bv32;
  var v5:bool;
  var v7:bv32;
  var v8:bool;
  var v12:bool;
  var v10:bool;
  var v13:bool;
  var v17:bv32;
  var v14:bool;
  var v21:bool;
  var v27:bv32;
  var v24:bv32;
  var v20:bool;
  var v19:bv32;
  var v29:bool;
  var v30:bool;
  var v32:bv32;
  var v33:bool;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v0 := group_id_x;
  v1 := local_id_x;
  v2 := BV32_SLT(v1, 16bv32);
  goto $truebb, $falsebb;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  $i.0, $array_offset.0 := 0bv32, BV32_ADD(BV32_MUL($offset, $matrix_dim), $offset);
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 5} (if (_READ_HAS_OCCURRED_$$m ==> BV32_ULT(BV32_UDIV(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), v1), $matrix_dim), 8bv32)) then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 6} (if (_WRITE_HAS_OCCURRED_$$dia ==> BV32_ULT(BV32_UDIV(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), v1), 16bv32), 8bv32)) then 1bv1 else 0bv1) != 0bv1;
  assert {:originated_from_invariant} {:sourceloc_num 7} (if $array_offset.0 == BV32_MUL($matrix_dim, $i.0) then 1bv1 else 0bv1) != 0bv1;
  v3 := BV32_SLT($i.0, 8bv32);
  goto $truebb0, $falsebb0;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  assert {:sourceloc} {:sourceloc_num 9} true;
  v4 := $$m[BV32_ADD($array_offset.0, v1)];
  assert {:sourceloc} {:sourceloc_num 10} true;
  $$dia[BV32_ADD(BV32_MUL($i.0, 16bv32), v1)] := v4;
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  $i.0, $array_offset.0 := BV32_ADD($i.0, 1bv32), BV32_ADD($array_offset.0, $matrix_dim);
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  $i.1, $array_offset.1 := 0bv32, BV32_ADD(BV32_MUL($offset, $matrix_dim), $offset);
  goto $for.cond.26;
$for.cond.26:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 14} (if (_READ_HAS_OCCURRED_$$m ==> BV32_OR(BV1_ZEXT32((if BV32_UREM(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), BV32_ADD(v1, BV32_MUL(BV32_ADD(v0, 1bv32), 16bv32))), $matrix_dim) == 0bv32 then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_UREM(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), v1), $matrix_dim) == 0bv32 then 1bv1 else 0bv1))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 15} (if (_READ_HAS_OCCURRED_$$m ==> BV32_OR(BV1_ZEXT32((if BV32_ULT(BV32_UDIV(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), BV32_ADD(v1, BV32_MUL(BV32_ADD(v0, 1bv32), 16bv32))), $matrix_dim), 8bv32) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_ULT(BV32_UDIV(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), v1), $matrix_dim), 16bv32) then 1bv1 else 0bv1))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
  assert {:originated_from_invariant} {:sourceloc_num 16} (if $array_offset.1 == BV32_MUL($matrix_dim, $i.1) then 1bv1 else 0bv1) != 0bv1;
  v5 := BV32_SLT($i.1, 16bv32);
  goto $truebb1, $falsebb1;
$for.body.66:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  assert {:sourceloc} {:sourceloc_num 18} true;
  v6 := $$m[BV32_ADD(BV32_ADD($array_offset.1, BV32_MUL(BV32_ADD(v0, 1bv32), 16bv32)), v1)];
  assert {:sourceloc} {:sourceloc_num 19} true;
  $$peri_row[BV32_ADD(BV32_MUL($i.1, 16bv32), v1)] := v6;
  goto $for.inc.76;
$for.inc.76:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  $i.1, $array_offset.1 := BV32_ADD($i.1, 1bv32), BV32_ADD($array_offset.1, $matrix_dim);
  goto $for.cond.26;
$for.end.78:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  goto $if.end;
$if.else:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  v7 := BV32_SUB(v1, 16bv32);
  $i.2, $array_offset.2 := 8bv32, BV32_ADD(BV32_MUL(BV32_ADD($offset, 8bv32), $matrix_dim), $offset);
  goto $for.cond.83;
$for.cond.83:
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 24} (if (BV32_AND(BV1_ZEXT32((if _READ_HAS_OCCURRED_$$m then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_SGE(v1, 16bv32) then 1bv1 else 0bv1))) != 0bv32 ==> BV32_UREM(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), BV32_ADD(BV32_SUB(v1, 16bv32), BV32_MUL(8bv32, $matrix_dim))), $matrix_dim) == 0bv32) then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 25} (if (BV32_AND(BV1_ZEXT32((if _READ_HAS_OCCURRED_$$m then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_SGE(v1, 16bv32) then 1bv1 else 0bv1))) != 0bv32 ==> BV32_ULT(BV32_UDIV(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), BV32_ADD(BV32_SUB(v1, 16bv32), BV32_MUL(8bv32, $matrix_dim))), $matrix_dim), 8bv32)) then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 26} (if (BV32_AND(BV1_ZEXT32((if _WRITE_HAS_OCCURRED_$$dia then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_SGE(v1, 16bv32) then 1bv1 else 0bv1))) != 0bv32 ==> BV32_UREM(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), BV32_SUB(v1, 16bv32)), 16bv32) == 0bv32) then 1bv1 else 0bv1) != 0bv1;
  assert {:originated_from_invariant} {:sourceloc_num 27} (if $array_offset.2 == BV32_ADD(BV32_MUL($matrix_dim, BV32_SUB($i.2, 8bv32)), BV32_MUL(8bv32, $matrix_dim)) then 1bv1 else 0bv1) != 0bv1;
  v8 := BV32_SLT($i.2, 16bv32);
  goto $truebb2, $falsebb2;
$for.body.137:
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  assert {:sourceloc} {:sourceloc_num 29} true;
  v9 := $$m[BV32_ADD($array_offset.2, v7)];
  assert {:sourceloc} {:sourceloc_num 30} true;
  $$dia[BV32_ADD(BV32_MUL($i.2, 16bv32), v7)] := v9;
  goto $for.inc.144;
$for.inc.144:
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  $i.2, $array_offset.2 := BV32_ADD($i.2, 1bv32), BV32_ADD($array_offset.2, $matrix_dim);
  goto $for.cond.83;
$for.end.146:
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  $i.3, $array_offset.3 := 0bv32, BV32_ADD(BV32_MUL(BV32_ADD($offset, BV32_MUL(BV32_ADD(v0, 1bv32), 16bv32)), $matrix_dim), $offset);
  goto $for.cond.152;
$for.cond.152:
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 34} (if (BV32_AND(BV1_ZEXT32((if _READ_HAS_OCCURRED_$$m then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_SGE(v1, 16bv32) then 1bv1 else 0bv1))) != 0bv32 ==> BV32_OR(BV1_ZEXT32((if BV32_UREM(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), BV32_ADD(BV32_SUB(v1, 16bv32), BV32_MUL(8bv32, $matrix_dim))), $matrix_dim) == 0bv32 then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_UREM(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), BV32_ADD(BV32_SUB(v1, 16bv32), BV32_MUL(BV32_MUL(BV32_ADD(v0, 1bv32), 16bv32), $matrix_dim))), $matrix_dim) == 0bv32 then 1bv1 else 0bv1))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 35} (if (BV32_AND(BV1_ZEXT32((if _READ_HAS_OCCURRED_$$m then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_SGE(v1, 16bv32) then 1bv1 else 0bv1))) != 0bv32 ==> BV32_OR(BV1_ZEXT32((if BV32_ULT(BV32_UDIV(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), BV32_ADD(BV32_SUB(v1, 16bv32), BV32_MUL(8bv32, $matrix_dim))), $matrix_dim), 8bv32) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_ULT(BV32_UDIV(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), BV32_ADD(BV32_SUB(v1, 16bv32), BV32_MUL(BV32_MUL(BV32_ADD(v0, 1bv32), 16bv32), $matrix_dim))), $matrix_dim), 16bv32) then 1bv1 else 0bv1))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 36} (if (_WRITE_HAS_OCCURRED_$$peri_col ==> BV32_UREM(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), BV32_SUB(v1, 16bv32)), 16bv32) == 0bv32) then 1bv1 else 0bv1) != 0bv1;
  assert {:originated_from_invariant} {:sourceloc_num 37} (if $array_offset.3 == BV32_ADD(BV32_MUL($matrix_dim, $i.3), BV32_MUL(BV32_MUL(BV32_ADD(v0, 1bv32), 16bv32), $matrix_dim)) then 1bv1 else 0bv1) != 0bv1;
  v10 := BV32_SLT($i.3, 16bv32);
  goto $truebb3, $falsebb3;
$for.body.229:
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  assert {:sourceloc} {:sourceloc_num 39} true;
  v11 := $$m[BV32_ADD($array_offset.3, v7)];
  assert {:sourceloc} {:sourceloc_num 40} true;
  $$peri_col[BV32_ADD(BV32_MUL($i.3, 16bv32), v7)] := v11;
  goto $for.inc.236;
$for.inc.236:
  assert {:block_sourceloc} {:sourceloc_num 41} true;
  $i.3, $array_offset.3 := BV32_ADD($i.3, 1bv32), BV32_ADD($array_offset.3, $matrix_dim);
  goto $for.cond.152;
$for.end.238:
  assert {:block_sourceloc} true;
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 42} true;
  call {:sourceloc_num 43} $bugle_barrier(1bv1, 0bv1);
  v12 := BV32_SLT(v1, 16bv32);
  goto $truebb4, $falsebb4;
$if.then.241:
  assert {:block_sourceloc} {:sourceloc_num 44} true;
  $i.4 := 1bv32;
  goto $for.cond.242;
$for.cond.242:
  assert {:block_sourceloc} {:sourceloc_num 45} true;
  v13 := BV32_SLT($i.4, 16bv32);
  goto $truebb5, $falsebb5;
$for.body.245:
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  $j.0 := 0bv32;
  goto $for.cond.246;
$for.cond.246:
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  v14 := BV32_SLT($j.0, $i.4);
  goto $truebb6, $falsebb6;
$for.body.249:
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  assert {:sourceloc} {:sourceloc_num 49} true;
  v15 := $$dia[BV32_ADD(BV32_MUL($i.4, 16bv32), $j.0)];
  assert {:sourceloc} {:sourceloc_num 50} true;
  v16 := $$peri_row[BV32_ADD(BV32_MUL($j.0, 16bv32), v1)];
  v17 := BV32_ADD(BV32_MUL($i.4, 16bv32), v1);
  assert {:sourceloc} {:sourceloc_num 51} true;
  v18 := $$peri_row[v17];
  assert {:sourceloc} {:sourceloc_num 52} true;
  $$peri_row[v17] := FSUB32(v18, FMUL32(v15, v16));
  goto $for.inc.261;
$for.inc.261:
  assert {:block_sourceloc} {:sourceloc_num 53} true;
  $j.0 := BV32_ADD($j.0, 1bv32);
  goto $for.cond.246;
$for.end.263:
  assert {:block_sourceloc} {:sourceloc_num 54} true;
  goto $for.inc.264;
$for.inc.264:
  assert {:block_sourceloc} {:sourceloc_num 55} true;
  $i.4 := BV32_ADD($i.4, 1bv32);
  goto $for.cond.242;
$for.end.266:
  assert {:block_sourceloc} {:sourceloc_num 56} true;
  goto $if.end.333;
$if.else.267:
  assert {:block_sourceloc} {:sourceloc_num 57} true;
  v19 := BV32_SUB(v1, 16bv32);
  $i.5 := 0bv32;
  goto $for.cond.269;
$for.cond.269:
  assert {:block_sourceloc} {:sourceloc_num 58} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 59} (if (_WRITE_HAS_OCCURRED_$$peri_col ==> BV32_ULT(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), BV32_MUL(v19, 16bv32)), 16bv32)) then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 60} (if (_READ_HAS_OCCURRED_$$peri_col ==> BV32_ULT(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), BV32_MUL(v19, 16bv32)), 16bv32)) then 1bv1 else 0bv1) != 0bv1;
  v20 := BV32_SLT($i.5, 16bv32);
  goto $truebb7, $falsebb7;
$for.body.288:
  assert {:block_sourceloc} {:sourceloc_num 61} true;
  $j.1 := 0bv32;
  goto $for.cond.289;
$for.cond.289:
  assert {:block_sourceloc} {:sourceloc_num 62} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 63} (if (_WRITE_HAS_OCCURRED_$$peri_col ==> BV32_ULT(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), BV32_MUL(v19, 16bv32)), 16bv32)) then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 64} (if (_READ_HAS_OCCURRED_$$peri_col ==> BV32_ULT(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), BV32_MUL(v19, 16bv32)), 16bv32)) then 1bv1 else 0bv1) != 0bv1;
  v21 := BV32_SLT($j.1, $i.5);
  goto $truebb8, $falsebb8;
$for.body.308:
  assert {:block_sourceloc} {:sourceloc_num 65} true;
  assert {:sourceloc} {:sourceloc_num 66} true;
  v22 := $$peri_col[BV32_ADD(BV32_MUL(v19, 16bv32), $j.1)];
  assert {:sourceloc} {:sourceloc_num 67} true;
  v23 := $$dia[BV32_ADD(BV32_MUL($j.1, 16bv32), $i.5)];
  v24 := BV32_ADD(BV32_MUL(v19, 16bv32), $i.5);
  assert {:sourceloc} {:sourceloc_num 68} true;
  v25 := $$peri_col[v24];
  assert {:sourceloc} {:sourceloc_num 69} true;
  $$peri_col[v24] := FSUB32(v25, FMUL32(v22, v23));
  goto $for.inc.320;
$for.inc.320:
  assert {:block_sourceloc} {:sourceloc_num 70} true;
  $j.1 := BV32_ADD($j.1, 1bv32);
  goto $for.cond.289;
$for.end.322:
  assert {:block_sourceloc} {:sourceloc_num 71} true;
  assert {:sourceloc} {:sourceloc_num 72} true;
  v26 := $$dia[BV32_ADD(BV32_MUL($i.5, 16bv32), $i.5)];
  v27 := BV32_ADD(BV32_MUL(v19, 16bv32), $i.5);
  assert {:sourceloc} {:sourceloc_num 73} true;
  v28 := $$peri_col[v27];
  assert {:sourceloc} {:sourceloc_num 74} true;
  $$peri_col[v27] := FDIV32(v28, v26);
  goto $for.inc.330;
$for.inc.330:
  assert {:block_sourceloc} {:sourceloc_num 75} true;
  $i.5 := BV32_ADD($i.5, 1bv32);
  goto $for.cond.269;
$for.end.332:
  assert {:block_sourceloc} true;
  goto $if.end.333;
$if.end.333:
  assert {:block_sourceloc} {:sourceloc_num 76} true;
  call {:sourceloc_num 77} $bugle_barrier(1bv1, 0bv1);
  v29 := BV32_SLT(v1, 16bv32);
  goto $truebb9, $falsebb9;
$if.then.336:
  assert {:block_sourceloc} {:sourceloc_num 78} true;
  $i.6, $array_offset.4 := 1bv32, BV32_ADD(BV32_MUL(BV32_ADD($offset, 1bv32), $matrix_dim), $offset);
  goto $for.cond.340;
$for.cond.340:
  assert {:block_sourceloc} {:sourceloc_num 79} true;
  v30 := BV32_SLT($i.6, 16bv32);
  goto $truebb10, $falsebb10;
$for.body.343:
  assert {:block_sourceloc} {:sourceloc_num 80} true;
  assert {:sourceloc} {:sourceloc_num 81} true;
  v31 := $$peri_row[BV32_ADD(BV32_MUL($i.6, 16bv32), v1)];
  assert {:sourceloc} {:sourceloc_num 82} true;
  $$m[BV32_ADD(BV32_ADD($array_offset.4, BV32_MUL(BV32_ADD(v0, 1bv32), 16bv32)), v1)] := v31;
  goto $for.inc.353;
$for.inc.353:
  assert {:block_sourceloc} {:sourceloc_num 83} true;
  $i.6, $array_offset.4 := BV32_ADD($i.6, 1bv32), BV32_ADD($array_offset.4, $matrix_dim);
  goto $for.cond.340;
$for.end.355:
  assert {:block_sourceloc} {:sourceloc_num 84} true;
  goto $if.end.419;
$if.else.356:
  assert {:block_sourceloc} {:sourceloc_num 85} true;
  v32 := BV32_SUB(v1, 16bv32);
  $i.7, $array_offset.5 := 0bv32, BV32_ADD(BV32_MUL(BV32_ADD($offset, BV32_MUL(BV32_ADD(v0, 1bv32), 16bv32)), $matrix_dim), $offset);
  goto $for.cond.363;
$for.cond.363:
  assert {:block_sourceloc} {:sourceloc_num 86} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 87} (if (BV32_AND(BV1_ZEXT32((if _WRITE_HAS_OCCURRED_$$m then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_SGE(v1, 16bv32) then 1bv1 else 0bv1))) != 0bv32 ==> BV32_UREM(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), BV32_ADD(BV32_SUB(v1, 16bv32), BV32_MUL(BV32_MUL(BV32_ADD(v0, 1bv32), 16bv32), $matrix_dim))), $matrix_dim) == 0bv32) then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 88} (if (BV32_AND(BV1_ZEXT32((if _WRITE_HAS_OCCURRED_$$m then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_SGE(v1, 16bv32) then 1bv1 else 0bv1))) != 0bv32 ==> BV32_ULT(BV32_UDIV(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), BV32_ADD(BV32_SUB(v1, 16bv32), BV32_MUL(BV32_MUL(BV32_ADD(v0, 1bv32), 16bv32), $matrix_dim))), $matrix_dim), 16bv32)) then 1bv1 else 0bv1) != 0bv1;
  assert {:originated_from_invariant} {:sourceloc_num 89} (if $array_offset.5 == BV32_ADD(BV32_MUL($matrix_dim, $i.7), BV32_MUL(BV32_MUL(BV32_ADD(v0, 1bv32), 16bv32), $matrix_dim)) then 1bv1 else 0bv1) != 0bv1;
  v33 := BV32_SLT($i.7, 16bv32);
  goto $truebb11, $falsebb11;
$for.body.409:
  assert {:block_sourceloc} {:sourceloc_num 90} true;
  assert {:sourceloc} {:sourceloc_num 91} true;
  v34 := $$peri_col[BV32_ADD(BV32_MUL($i.7, 16bv32), v32)];
  assert {:sourceloc} {:sourceloc_num 92} true;
  $$m[BV32_ADD($array_offset.5, v32)] := v34;
  goto $for.inc.416;
$for.inc.416:
  assert {:block_sourceloc} {:sourceloc_num 93} true;
  $i.7, $array_offset.5 := BV32_ADD($i.7, 1bv32), BV32_ADD($array_offset.5, $matrix_dim);
  goto $for.cond.363;
$for.end.418:
  assert {:block_sourceloc} true;
  goto $if.end.419;
$if.end.419:
  assert {:block_sourceloc} {:sourceloc_num 94} true;
  return;
$truebb:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 95} true;
  goto $if.then;
$falsebb:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 96} true;
  goto $if.else;
$truebb0:
  assume {:partition} v3;
  assert {:block_sourceloc} {:sourceloc_num 97} true;
  goto $for.body;
$falsebb0:
  assume {:partition} !v3;
  assert {:block_sourceloc} {:sourceloc_num 98} true;
  goto $for.end;
$truebb1:
  assume {:partition} v5;
  assert {:block_sourceloc} {:sourceloc_num 99} true;
  goto $for.body.66;
$falsebb1:
  assume {:partition} !v5;
  assert {:block_sourceloc} {:sourceloc_num 100} true;
  goto $for.end.78;
$truebb2:
  assume {:partition} v8;
  assert {:block_sourceloc} {:sourceloc_num 101} true;
  goto $for.body.137;
$falsebb2:
  assume {:partition} !v8;
  assert {:block_sourceloc} {:sourceloc_num 102} true;
  goto $for.end.146;
$truebb3:
  assume {:partition} v10;
  assert {:block_sourceloc} {:sourceloc_num 103} true;
  goto $for.body.229;
$falsebb3:
  assume {:partition} !v10;
  assert {:block_sourceloc} {:sourceloc_num 104} true;
  goto $for.end.238;
$truebb4:
  assume {:partition} v12;
  assert {:block_sourceloc} {:sourceloc_num 105} true;
  goto $if.then.241;
$falsebb4:
  assume {:partition} !v12;
  assert {:block_sourceloc} {:sourceloc_num 106} true;
  goto $if.else.267;
$truebb5:
  assume {:partition} v13;
  assert {:block_sourceloc} {:sourceloc_num 107} true;
  goto $for.body.245;
$falsebb5:
  assume {:partition} !v13;
  assert {:block_sourceloc} {:sourceloc_num 108} true;
  goto $for.end.266;
$truebb6:
  assume {:partition} v14;
  assert {:block_sourceloc} {:sourceloc_num 109} true;
  goto $for.body.249;
$falsebb6:
  assume {:partition} !v14;
  assert {:block_sourceloc} {:sourceloc_num 110} true;
  goto $for.end.263;
$truebb7:
  assume {:partition} v20;
  assert {:block_sourceloc} {:sourceloc_num 111} true;
  goto $for.body.288;
$falsebb7:
  assume {:partition} !v20;
  assert {:block_sourceloc} {:sourceloc_num 112} true;
  goto $for.end.332;
$truebb8:
  assume {:partition} v21;
  assert {:block_sourceloc} {:sourceloc_num 113} true;
  goto $for.body.308;
$falsebb8:
  assume {:partition} !v21;
  assert {:block_sourceloc} {:sourceloc_num 114} true;
  goto $for.end.322;
$truebb9:
  assume {:partition} v29;
  assert {:block_sourceloc} {:sourceloc_num 115} true;
  goto $if.then.336;
$falsebb9:
  assume {:partition} !v29;
  assert {:block_sourceloc} {:sourceloc_num 116} true;
  goto $if.else.356;
$truebb10:
  assume {:partition} v30;
  assert {:block_sourceloc} {:sourceloc_num 117} true;
  goto $for.body.343;
$falsebb10:
  assume {:partition} !v30;
  assert {:block_sourceloc} {:sourceloc_num 118} true;
  goto $for.end.355;
$truebb11:
  assume {:partition} v33;
  assert {:block_sourceloc} {:sourceloc_num 119} true;
  goto $for.body.409;
$falsebb11:
  assume {:partition} !v33;
  assert {:block_sourceloc} {:sourceloc_num 120} true;
  goto $for.end.418;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 32bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 63bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_x == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_y == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_z == 0bv32 then 1bv1 else 0bv1) != 0bv1;
