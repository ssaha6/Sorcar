type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "reference_d"} {:global} $$reference_d : [bv32]bv32;
axiom {:array_info "$$reference_d"} {:global} {:elem_width 32} {:source_name "reference_d"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$reference_d : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$reference_d : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$reference_d : bool;

var {:source_name "input_itemsets_d"} {:global} $$input_itemsets_d : [bv32]bv32;
axiom {:array_info "$$input_itemsets_d"} {:global} {:elem_width 32} {:source_name "input_itemsets_d"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$input_itemsets_d : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$input_itemsets_d : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$input_itemsets_d : bool;

var {:source_name "output_itemsets_d"} {:global} $$output_itemsets_d : [bv32]bv32;
axiom {:array_info "$$output_itemsets_d"} {:global} {:elem_width 32} {:source_name "output_itemsets_d"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$output_itemsets_d : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$output_itemsets_d : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$output_itemsets_d : bool;

var {:source_name "input_itemsets_l"} {:group_shared} $$input_itemsets_l : [bv32]bv32;
axiom {:array_info "$$input_itemsets_l"} {:group_shared} {:elem_width 32} {:source_name "input_itemsets_l"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$input_itemsets_l : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$input_itemsets_l : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$input_itemsets_l : bool;

var {:source_name "reference_l"} {:group_shared} $$reference_l : [bv32]bv32;
axiom {:array_info "$$reference_l"} {:group_shared} {:elem_width 32} {:source_name "reference_l"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$reference_l : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$reference_l : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$reference_l : bool;

const _WATCHED_OFFSET : bv32;
const {:global_offset_x} global_offset_x : bv32;
const {:global_offset_y} global_offset_y : bv32;
const {:global_offset_z} global_offset_z : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvsge"} BV32_SGE(bv32, bv32) : bool;
function {:bvbuiltin "bvsle"} BV32_SLE(bv32, bv32) : bool;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvult"} BV32_ULT(bv32, bv32) : bool;
function {:bvbuiltin "bvurem"} BV32_UREM(bv32, bv32) : bv32;
procedure {:source_name "nw_kernel2"} {:kernel} $nw_kernel2($cols:bv32, $penalty:bv32, $blk:bv32, $block_width:bv32, $worksize:bv32, $offset_r:bv32, $offset_c:bv32)
requires {:sourceloc_num 0} (if $cols == 2049bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 1} (if $penalty == 10bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 2} (if $blk == 127bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 3} (if $block_width == 128bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 4} (if $worksize == 2048bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 5} (if $offset_r == 0bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 6} (if $offset_c == 0bv32 then 1bv1 else 0bv1) != 0bv1;
{
  var $ty.0:bv32;
  var $m.0:bv32;
  var $k.i.0:bv32;
  var $retval.i.0:bv32;
  var $m96.0:bv32;
  var $k.i.166.0:bv32;
  var $retval.i.162.0:bv32;
  var $ty135.0:bv32;
  var v1:bv32;
  var v0:bv32;
  var v9:bv32;
  var v5:bv32;
  var v6:bv32;
  var v7:bv32;
  var v8:bool;
  var v2:bv32;
  var v4:bv32;
  var v3:bv32;
  var v14:bool;
  var v15:bool;
  var v10:bool;
  var v23:bv32;
  var v18:bv32;
  var v31:bv32;
  var v21:bv32;
  var v19:bv32;
  var v36:bv32;
  var v34:bv32;
  var v32:bv32;
  var v41:bv32;
  var v13:bv32;
  var v12:bv32;
  var v11:bv32;
  var v26:bool;
  var v27:bool;
  var v28:bool;
  var v29:bv32;
  var v30:bv32;
  var v33:bv32;
  var v35:bv32;
  var v20:bv32;
  var v22:bv32;
  var v24:bv32;
  var v16:bv32;
  var v17:bv32;
  var v25:bool;
  var v39:bool;
  var v40:bool;
  var v38:bool;
  var v37:bv32;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  v0 := group_id_x;
  v1 := local_id_x;
  v2 := BV32_ADD(BV32_MUL($offset_r, $cols), $offset_c);
  v3 := BV32_SUB(BV32_ADD(v0, $block_width), $blk);
  v4 := BV32_SUB(BV32_SUB($block_width, v0), 1bv32);
  v5 := BV32_ADD(BV32_ADD(BV32_ADD(BV32_ADD(v2, BV32_MUL(BV32_MUL($cols, 16bv32), v4)), BV32_MUL(16bv32, v3)), v1), BV32_ADD($cols, 1bv32));
  v6 := BV32_ADD(BV32_ADD(BV32_ADD(BV32_ADD(v2, BV32_MUL(BV32_MUL($cols, 16bv32), v4)), BV32_MUL(16bv32, v3)), v1), 1bv32);
  v7 := BV32_ADD(BV32_ADD(v2, BV32_MUL(BV32_MUL($cols, 16bv32), v4)), BV32_MUL(16bv32, v3));
  v8 := v1 == 0bv32;
  goto $truebb, $falsebb;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  assert {:sourceloc} {:sourceloc_num 9} true;
  v9 := $$input_itemsets_d[v7];
  assert {:sourceloc} {:sourceloc_num 10} true;
  $$input_itemsets_l[BV32_MUL(v1, 17bv32)] := v9;
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  $ty.0 := 0bv32;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  v10 := BV32_SLT($ty.0, 16bv32);
  goto $truebb0, $falsebb0;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  assert {:sourceloc} {:sourceloc_num 14} true;
  v11 := $$reference_d[BV32_ADD(v5, BV32_MUL($cols, $ty.0))];
  assert {:sourceloc} {:sourceloc_num 15} true;
  $$reference_l[BV32_ADD(v1, BV32_MUL($ty.0, 16bv32))] := v11;
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  $ty.0 := BV32_ADD($ty.0, 1bv32);
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  call {:sourceloc_num 18} $bugle_barrier(1bv1, 0bv1);
  assert {:sourceloc} {:sourceloc_num 19} true;
  v12 := $$input_itemsets_d[BV32_ADD(BV32_ADD(BV32_ADD(BV32_ADD(v2, BV32_MUL(BV32_MUL($cols, 16bv32), v4)), BV32_MUL(16bv32, v3)), $cols), BV32_MUL($cols, v1))];
  assert {:sourceloc} {:sourceloc_num 20} true;
  $$input_itemsets_l[BV32_MUL(BV32_ADD(v1, 1bv32), 17bv32)] := v12;
  call {:sourceloc_num 21} $bugle_barrier(1bv1, 0bv1);
  assert {:sourceloc} {:sourceloc_num 22} true;
  v13 := $$input_itemsets_d[v6];
  assert {:sourceloc} {:sourceloc_num 23} true;
  $$input_itemsets_l[BV32_ADD(v1, 1bv32)] := v13;
  call {:sourceloc_num 24} $bugle_barrier(1bv1, 0bv1);
  $m.0 := 0bv32;
  goto $for.cond.59;
$for.cond.59:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  v14 := BV32_SLT($m.0, 16bv32);
  goto $truebb1, $falsebb1;
$for.body.61:
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  v15 := BV32_SLE(v1, $m.0);
  goto $truebb2, $falsebb2;
$if.then.63:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  v16 := BV32_ADD(v1, 1bv32);
  v17 := BV32_ADD(BV32_SUB($m.0, v1), 1bv32);
  assert {:sourceloc} {:sourceloc_num 28} true;
  v18 := $$input_itemsets_l[BV32_ADD(BV32_SUB(v16, 1bv32), BV32_MUL(BV32_SUB(v17, 1bv32), 17bv32))];
  assert {:sourceloc} {:sourceloc_num 29} true;
  v19 := $$reference_l[BV32_ADD(BV32_SUB(v16, 1bv32), BV32_MUL(BV32_SUB(v17, 1bv32), 16bv32))];
  v20 := BV32_ADD(v18, v19);
  assert {:sourceloc} {:sourceloc_num 30} true;
  v21 := $$input_itemsets_l[BV32_ADD(BV32_SUB(v16, 1bv32), BV32_MUL(v17, 17bv32))];
  v22 := BV32_SUB(v21, $penalty);
  assert {:sourceloc} {:sourceloc_num 31} true;
  v23 := $$input_itemsets_l[BV32_ADD(v16, BV32_MUL(BV32_SUB(v17, 1bv32), 17bv32))];
  v24 := BV32_SUB(v23, $penalty);
  v25 := BV32_SLE(v20, v22);
  goto $truebb3, $falsebb3;
$if.then.i:
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  $k.i.0 := v22;
  goto $if.end.i;
$if.else.i:
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  $k.i.0 := v20;
  goto $if.end.i;
$if.end.i:
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  v26 := BV32_SLE($k.i.0, v24);
  goto $truebb4, $falsebb4;
$if.then.2.i:
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  $retval.i.0 := v24;
  goto $maximum.exit;
$if.else.3.i:
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  $retval.i.0 := $k.i.0;
  goto $maximum.exit;
$maximum.exit:
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  assert {:sourceloc} {:sourceloc_num 38} true;
  $$input_itemsets_l[BV32_ADD(v16, BV32_MUL(v17, 17bv32))] := $retval.i.0;
  goto $if.end.92;
$if.end.92:
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  call {:sourceloc_num 40} $bugle_barrier(1bv1, 0bv1);
  goto $for.inc.93;
$for.inc.93:
  assert {:block_sourceloc} {:sourceloc_num 41} true;
  $m.0 := BV32_ADD($m.0, 1bv32);
  goto $for.cond.59;
$for.end.95:
  assert {:block_sourceloc} {:sourceloc_num 42} true;
  $m96.0 := 14bv32;
  goto $for.cond.97;
$for.cond.97:
  assert {:block_sourceloc} {:sourceloc_num 43} true;
  v27 := BV32_SGE($m96.0, 0bv32);
  goto $truebb5, $falsebb5;
$for.body.99:
  assert {:block_sourceloc} {:sourceloc_num 44} true;
  v28 := BV32_SLE(v1, $m96.0);
  goto $truebb6, $falsebb6;
$if.then.101:
  assert {:block_sourceloc} {:sourceloc_num 45} true;
  v29 := BV32_SUB(BV32_ADD(v1, 16bv32), $m96.0);
  v30 := BV32_SUB(16bv32, v1);
  assert {:sourceloc} {:sourceloc_num 46} true;
  v31 := $$input_itemsets_l[BV32_ADD(BV32_SUB(v29, 1bv32), BV32_MUL(BV32_SUB(v30, 1bv32), 17bv32))];
  assert {:sourceloc} {:sourceloc_num 47} true;
  v32 := $$reference_l[BV32_ADD(BV32_SUB(v29, 1bv32), BV32_MUL(BV32_SUB(v30, 1bv32), 16bv32))];
  v33 := BV32_ADD(v31, v32);
  assert {:sourceloc} {:sourceloc_num 48} true;
  v34 := $$input_itemsets_l[BV32_ADD(BV32_SUB(v29, 1bv32), BV32_MUL(v30, 17bv32))];
  v35 := BV32_SUB(v34, $penalty);
  assert {:sourceloc} {:sourceloc_num 49} true;
  v36 := $$input_itemsets_l[BV32_ADD(v29, BV32_MUL(BV32_SUB(v30, 1bv32), 17bv32))];
  v37 := BV32_SUB(v36, $penalty);
  v38 := BV32_SLE(v33, v35);
  goto $truebb7, $falsebb7;
$if.then.i.168:
  assert {:block_sourceloc} {:sourceloc_num 50} true;
  $k.i.166.0 := v35;
  goto $if.end.i.171;
$if.else.i.169:
  assert {:block_sourceloc} {:sourceloc_num 51} true;
  $k.i.166.0 := v33;
  goto $if.end.i.171;
$if.end.i.171:
  assert {:block_sourceloc} {:sourceloc_num 52} true;
  v39 := BV32_SLE($k.i.166.0, v37);
  goto $truebb8, $falsebb8;
$if.then.2.i.172:
  assert {:block_sourceloc} {:sourceloc_num 53} true;
  $retval.i.162.0 := v37;
  goto $maximum.exit174;
$if.else.3.i.173:
  assert {:block_sourceloc} {:sourceloc_num 54} true;
  $retval.i.162.0 := $k.i.166.0;
  goto $maximum.exit174;
$maximum.exit174:
  assert {:block_sourceloc} {:sourceloc_num 55} true;
  assert {:sourceloc} {:sourceloc_num 56} true;
  $$input_itemsets_l[BV32_ADD(v29, BV32_MUL(v30, 17bv32))] := $retval.i.162.0;
  goto $if.end.132;
$if.end.132:
  assert {:block_sourceloc} {:sourceloc_num 57} true;
  call {:sourceloc_num 58} $bugle_barrier(1bv1, 0bv1);
  goto $for.inc.133;
$for.inc.133:
  assert {:block_sourceloc} {:sourceloc_num 59} true;
  $m96.0 := BV32_ADD($m96.0, 4294967295bv32);
  goto $for.cond.97;
$for.end.134:
  assert {:block_sourceloc} {:sourceloc_num 60} true;
  $ty135.0 := 0bv32;
  goto $for.cond.136;
$for.cond.136:
  assert {:block_sourceloc} {:sourceloc_num 61} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 62} (if (_WRITE_HAS_OCCURRED_$$input_itemsets_d ==> BV32_UREM(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), v5), $cols) == 0bv32) then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 63} (if (_WRITE_HAS_OCCURRED_$$input_itemsets_d ==> BV32_ULT(BV32_UDIV(BV32_SUB(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), v5), $cols), 16bv32)) then 1bv1 else 0bv1) != 0bv1;
  v40 := BV32_SLT($ty135.0, 16bv32);
  goto $truebb9, $falsebb9;
$for.body.150:
  assert {:block_sourceloc} {:sourceloc_num 64} true;
  assert {:sourceloc} {:sourceloc_num 65} true;
  v41 := $$input_itemsets_l[BV32_ADD(BV32_ADD(v1, 1bv32), BV32_MUL(BV32_ADD($ty135.0, 1bv32), 17bv32))];
  assert {:sourceloc} {:sourceloc_num 66} true;
  $$input_itemsets_d[BV32_ADD(v5, BV32_MUL($ty135.0, $cols))] := v41;
  goto $for.inc.159;
$for.inc.159:
  assert {:block_sourceloc} {:sourceloc_num 67} true;
  $ty135.0 := BV32_ADD($ty135.0, 1bv32);
  goto $for.cond.136;
$for.end.161:
  assert {:block_sourceloc} {:sourceloc_num 68} true;
  return;
$truebb:
  assume {:partition} v8;
  assert {:block_sourceloc} {:sourceloc_num 69} true;
  goto $if.then;
$falsebb:
  assume {:partition} !v8;
  assert {:block_sourceloc} {:sourceloc_num 70} true;
  goto $if.end;
$truebb0:
  assume {:partition} v10;
  assert {:block_sourceloc} {:sourceloc_num 71} true;
  goto $for.body;
$falsebb0:
  assume {:partition} !v10;
  assert {:block_sourceloc} {:sourceloc_num 72} true;
  goto $for.end;
$truebb1:
  assume {:partition} v14;
  assert {:block_sourceloc} {:sourceloc_num 73} true;
  goto $for.body.61;
$falsebb1:
  assume {:partition} !v14;
  assert {:block_sourceloc} {:sourceloc_num 74} true;
  goto $for.end.95;
$truebb2:
  assume {:partition} v15;
  assert {:block_sourceloc} {:sourceloc_num 75} true;
  goto $if.then.63;
$falsebb2:
  assume {:partition} !v15;
  assert {:block_sourceloc} {:sourceloc_num 76} true;
  goto $if.end.92;
$truebb3:
  assume {:partition} v25;
  assert {:block_sourceloc} {:sourceloc_num 77} true;
  goto $if.then.i;
$falsebb3:
  assume {:partition} !v25;
  assert {:block_sourceloc} {:sourceloc_num 78} true;
  goto $if.else.i;
$truebb4:
  assume {:partition} v26;
  assert {:block_sourceloc} {:sourceloc_num 79} true;
  goto $if.then.2.i;
$falsebb4:
  assume {:partition} !v26;
  assert {:block_sourceloc} {:sourceloc_num 80} true;
  goto $if.else.3.i;
$truebb5:
  assume {:partition} v27;
  assert {:block_sourceloc} {:sourceloc_num 81} true;
  goto $for.body.99;
$falsebb5:
  assume {:partition} !v27;
  assert {:block_sourceloc} {:sourceloc_num 82} true;
  goto $for.end.134;
$truebb6:
  assume {:partition} v28;
  assert {:block_sourceloc} {:sourceloc_num 83} true;
  goto $if.then.101;
$falsebb6:
  assume {:partition} !v28;
  assert {:block_sourceloc} {:sourceloc_num 84} true;
  goto $if.end.132;
$truebb7:
  assume {:partition} v38;
  assert {:block_sourceloc} {:sourceloc_num 85} true;
  goto $if.then.i.168;
$falsebb7:
  assume {:partition} !v38;
  assert {:block_sourceloc} {:sourceloc_num 86} true;
  goto $if.else.i.169;
$truebb8:
  assume {:partition} v39;
  assert {:block_sourceloc} {:sourceloc_num 87} true;
  goto $if.then.2.i.172;
$falsebb8:
  assume {:partition} !v39;
  assert {:block_sourceloc} {:sourceloc_num 88} true;
  goto $if.else.3.i.173;
$truebb9:
  assume {:partition} v40;
  assert {:block_sourceloc} {:sourceloc_num 89} true;
  goto $for.body.150;
$falsebb9:
  assume {:partition} !v40;
  assert {:block_sourceloc} {:sourceloc_num 90} true;
  goto $for.end.161;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 16bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 127bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_x == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_y == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_z == 0bv32 then 1bv1 else 0bv1) != 0bv1;
