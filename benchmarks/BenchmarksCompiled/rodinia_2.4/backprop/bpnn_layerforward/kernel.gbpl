type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "input_cuda"} {:global} $$input_cuda : [bv32]bv32;
axiom {:array_info "$$input_cuda"} {:global} {:elem_width 32} {:source_name "input_cuda"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$input_cuda : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$input_cuda : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$input_cuda : bool;

var {:source_name "output_hidden_cuda"} {:global} $$output_hidden_cuda : [bv32]bv32;
axiom {:array_info "$$output_hidden_cuda"} {:global} {:elem_width 32} {:source_name "output_hidden_cuda"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$output_hidden_cuda : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$output_hidden_cuda : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$output_hidden_cuda : bool;

var {:source_name "input_hidden_cuda"} {:global} $$input_hidden_cuda : [bv32]bv32;
axiom {:array_info "$$input_hidden_cuda"} {:global} {:elem_width 32} {:source_name "input_hidden_cuda"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$input_hidden_cuda : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$input_hidden_cuda : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$input_hidden_cuda : bool;

var {:source_name "hidden_partial_sum"} {:global} $$hidden_partial_sum : [bv32]bv32;
axiom {:array_info "$$hidden_partial_sum"} {:global} {:elem_width 32} {:source_name "hidden_partial_sum"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$hidden_partial_sum : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$hidden_partial_sum : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$hidden_partial_sum : bool;

var {:source_name "input_node"} {:group_shared} $$input_node : [bv32]bv32;
axiom {:array_info "$$input_node"} {:group_shared} {:elem_width 32} {:source_name "input_node"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$input_node : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$input_node : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$input_node : bool;

var {:source_name "weight_matrix"} {:group_shared} $$weight_matrix : [bv32]bv32;
axiom {:array_info "$$weight_matrix"} {:group_shared} {:elem_width 32} {:source_name "weight_matrix"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$weight_matrix : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$weight_matrix : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$weight_matrix : bool;

const _WATCHED_OFFSET : bv32;
const {:global_offset_x} global_offset_x : bv32;
const {:global_offset_y} global_offset_y : bv32;
const {:global_offset_z} global_offset_z : bv32;
const {:group_id_y} group_id_y : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:local_id_y} local_id_y : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FADD32(bv32, bv32) : bv32;
function FMUL32(bv32, bv32) : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvsdiv"} BV32_SDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvsle"} BV32_SLE(bv32, bv32) : bool;
function {:bvbuiltin "bvsrem"} BV32_SREM(bv32, bv32) : bv32;
procedure {:source_name "bpnn_layerforward_ocl"} {:kernel} $bpnn_layerforward_ocl($in:bv32, $hid:bv32)
requires {:sourceloc_num 0} (if $in == 65536bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 1} (if $hid == 16bv32 then 1bv1 else 0bv1) != 0bv1;
{
  var $i.0:bv32;
  var v0:bv32;
  var v1:bv32;
  var v4:bv32;
  var v5:bool;
  var v3:bv32;
  var v2:bv32;
  var v7:bv32;
  var v13:bv32;
  var v6:bv32;
  var v8:bv32;
  var v9:bv32;
  var v12:bv32;
  var v14:bv32;
  var v16:bv32;
  var v15:bool;
  var v11:bool;
  var v10:bool;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v0 := group_id_y;
  v1 := local_id_x;
  v2 := local_id_y;
  v3 := BV32_ADD(BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(BV32_MUL(BV32_ADD($hid, 1bv32), 16bv32), v0), BV32_MUL(BV32_ADD($hid, 1bv32), v2)), v1), 1bv32), BV32_ADD($hid, 1bv32));
  v4 := BV32_ADD(BV32_ADD(BV32_MUL(16bv32, v0), v2), 1bv32);
  v5 := v1 == 0bv32;
  goto $truebb, $falsebb;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  assert {:sourceloc} {:sourceloc_num 4} true;
  v6 := $$input_cuda[v4];
  assert {:sourceloc} {:sourceloc_num 5} true;
  $$input_node[v2] := v6;
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  call {:sourceloc_num 7} $bugle_barrier(1bv1, 0bv1);
  assert {:sourceloc} {:sourceloc_num 8} true;
  v7 := $$input_hidden_cuda[v3];
  assert {:sourceloc} {:sourceloc_num 9} true;
  $$weight_matrix[BV32_ADD(BV32_MUL(v2, 16bv32), v1)] := v7;
  call {:sourceloc_num 10} $bugle_barrier(1bv1, 0bv1);
  assert {:sourceloc} {:sourceloc_num 11} true;
  v8 := $$weight_matrix[BV32_ADD(BV32_MUL(v2, 16bv32), v1)];
  assert {:sourceloc} {:sourceloc_num 12} true;
  v9 := $$input_node[v2];
  assert {:sourceloc} {:sourceloc_num 13} true;
  $$weight_matrix[BV32_ADD(BV32_MUL(v2, 16bv32), v1)] := FMUL32(v8, v9);
  call {:sourceloc_num 14} $bugle_barrier(1bv1, 0bv1);
  $i.0 := 1bv32;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  v10 := BV32_SLE($i.0, 16bv32);
  goto $truebb0, $falsebb0;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  v11 := BV32_SREM(v2, $i.0) == 0bv32;
  goto $truebb1, $falsebb1;
$if.then.31:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  assert {:sourceloc} {:sourceloc_num 18} true;
  v12 := $$weight_matrix[BV32_ADD(BV32_MUL(v2, 16bv32), v1)];
  assert {:sourceloc} {:sourceloc_num 19} true;
  v13 := $$weight_matrix[BV32_ADD(BV32_MUL(BV32_ADD(v2, BV32_SDIV($i.0, 2bv32)), 16bv32), v1)];
  assert {:sourceloc} {:sourceloc_num 20} true;
  $$weight_matrix[BV32_ADD(BV32_MUL(v2, 16bv32), v1)] := FADD32(v12, v13);
  goto $if.end.43;
$if.end.43:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  call {:sourceloc_num 22} $bugle_barrier(1bv1, 0bv1);
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  $i.0 := BV32_MUL($i.0, 2bv32);
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  assert {:sourceloc} {:sourceloc_num 25} true;
  v14 := $$weight_matrix[BV32_ADD(BV32_MUL(v2, 16bv32), v1)];
  assert {:sourceloc} {:sourceloc_num 26} true;
  $$input_hidden_cuda[v3] := v14;
  call {:sourceloc_num 27} $bugle_barrier(1bv1, 0bv1);
  v15 := v1 == 0bv32;
  goto $truebb2, $falsebb2;
$if.then.50:
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  assert {:sourceloc} {:sourceloc_num 29} true;
  v16 := $$weight_matrix[BV32_ADD(BV32_MUL(v1, 16bv32), v2)];
  assert {:sourceloc} {:sourceloc_num 30} true;
  $$hidden_partial_sum[BV32_ADD(BV32_MUL(v0, $hid), v2)] := v16;
  goto $if.end.57;
$if.end.57:
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  return;
$truebb:
  assume {:partition} v5;
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  goto $if.then;
$falsebb:
  assume {:partition} !v5;
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  goto $if.end;
$truebb0:
  assume {:partition} v10;
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  goto $for.body;
$falsebb0:
  assume {:partition} !v10;
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  goto $for.end;
$truebb1:
  assume {:partition} v11;
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  goto $if.then.31;
$falsebb1:
  assume {:partition} !v11;
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  goto $if.end.43;
$truebb2:
  assume {:partition} v15;
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  goto $if.then.50;
$falsebb2:
  assume {:partition} !v15;
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  goto $if.end.57;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 16bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_y == 16bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 4096bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_x == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_y == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_z == 0bv32 then 1bv1 else 0bv1) != 0bv1;
