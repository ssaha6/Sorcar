type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "feature"} {:global} $$feature : [bv32]bv32;
axiom {:array_info "$$feature"} {:global} {:elem_width 32} {:source_name "feature"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$feature : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$feature : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$feature : bool;

var {:source_name "feature_swap"} {:global} $$feature_swap : [bv32]bv32;
axiom {:array_info "$$feature_swap"} {:global} {:elem_width 32} {:source_name "feature_swap"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$feature_swap : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$feature_swap : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$feature_swap : bool;

const _WATCHED_OFFSET : bv32;
const {:global_offset_x} global_offset_x : bv32;
const {:global_offset_y} global_offset_y : bv32;
const {:global_offset_z} global_offset_z : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvult"} BV32_ULT(bv32, bv32) : bool;
function {:bvbuiltin "bvurem"} BV32_UREM(bv32, bv32) : bv32;
procedure {:source_name "kmeans_swap"} {:kernel} $kmeans_swap($npoints:bv32, $nfeatures:bv32)
requires {:sourceloc_num 0} (if $npoints == 494020bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 1} (if $nfeatures == 34bv32 then 1bv1 else 0bv1) != 0bv1;
{
  var $i.0:bv32;
  var v3:bv32;
  var v2:bool;
  var v1:bool;
  var v0:bv32;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  v1 := BV32_ULT(v0, $npoints);
  goto $truebb, $falsebb;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  $i.0 := 0bv32;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 5} (if (_WRITE_HAS_OCCURRED_$$feature_swap ==> BV32_UREM(BV32_UDIV(BV32_MUL(4bv32, _WATCHED_OFFSET), 4bv32), $npoints) == v0) then 1bv1 else 0bv1) != 0bv1;
  v2 := BV32_SLT($i.0, $nfeatures);
  goto $truebb0, $falsebb0;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  assert {:sourceloc} {:sourceloc_num 7} true;
  v3 := $$feature[BV32_ADD(BV32_MUL(v0, $nfeatures), $i.0)];
  assert {:sourceloc} {:sourceloc_num 8} true;
  $$feature_swap[BV32_ADD(BV32_MUL($i.0, $npoints), v0)] := v3;
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  $i.0 := BV32_ADD($i.0, 1bv32);
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  return;
$truebb:
  assume {:partition} v1;
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  goto $if.then;
$falsebb:
  assume {:partition} !v1;
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  goto $if.end;
$truebb0:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  goto $for.body;
$falsebb0:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  goto $for.end;
}
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 256bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 1930bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_x == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_y == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_z == 0bv32 then 1bv1 else 0bv1) != 0bv1;
