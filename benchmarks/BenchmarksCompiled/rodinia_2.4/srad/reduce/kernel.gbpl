type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "d_sums"} {:global} $$d_sums : [bv32]bv32;
axiom {:array_info "$$d_sums"} {:global} {:elem_width 32} {:source_name "d_sums"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_sums : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_sums : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_sums : bool;

var {:source_name "d_sums2"} {:global} $$d_sums2 : [bv32]bv32;
axiom {:array_info "$$d_sums2"} {:global} {:elem_width 32} {:source_name "d_sums2"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_sums2 : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_sums2 : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_sums2 : bool;

var {:source_name "d_psum"} {:group_shared} $$reduce_kernel.d_psum : [bv32]bv32;
axiom {:array_info "$$reduce_kernel.d_psum"} {:group_shared} {:elem_width 32} {:source_name "d_psum"} {:source_elem_width 32} {:source_dimensions "512"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$reduce_kernel.d_psum : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$reduce_kernel.d_psum : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$reduce_kernel.d_psum : bool;

var {:source_name "d_psum2"} {:group_shared} $$reduce_kernel.d_psum2 : [bv32]bv32;
axiom {:array_info "$$reduce_kernel.d_psum2"} {:group_shared} {:elem_width 32} {:source_name "d_psum2"} {:source_elem_width 32} {:source_dimensions "512"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$reduce_kernel.d_psum2 : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$reduce_kernel.d_psum2 : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$reduce_kernel.d_psum2 : bool;

const _WATCHED_OFFSET : bv32;
const {:global_offset_x} global_offset_x : bv32;
const {:global_offset_y} global_offset_y : bv32;
const {:global_offset_z} global_offset_z : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FADD32(bv32, bv32) : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvsdiv"} BV32_SDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvsge"} BV32_SGE(bv32, bv32) : bool;
function {:bvbuiltin "bvsle"} BV32_SLE(bv32, bv32) : bool;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
function {:bvbuiltin "bvslt"} BV64_SLT(bv64, bv64) : bool;
function {:bvbuiltin "bvsrem"} BV32_SREM(bv32, bv32) : bv32;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "bvsub"} BV64_SUB(bv64, bv64) : bv64;
function {:bvbuiltin "sign_extend 32"} BV32_SEXT64(bv32) : bv64;
procedure {:source_name "reduce_kernel"} {:kernel} $reduce_kernel($d_Ne:bv64, $d_no:bv64, $d_mul:bv32, $gridDim:bv32)
requires {:sourceloc_num 0} (if $d_Ne == 229916bv64 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 1} (if $d_no == 229916bv64 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 2} (if $d_mul == 1bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 3} (if $gridDim == 450bv32 then 1bv1 else 0bv1) != 0bv1;
{
  var $i.0:bv32;
  var $i.1:bv32;
  var $df.0:bv32;
  var $i.2:bv32;
  var $df.1:bv32;
  var $i.3:bv32;
  var $i.4:bv32;
  var v0:bv32;
  var v1:bv32;
  var v2:bv32;
  var v4:bool;
  var v3:bv32;
  var v5:bv32;
  var v6:bv32;
  var v11:bv32;
  var v13:bv32;
  var v10:bv32;
  var v12:bv32;
  var v7:bool;
  var v8:bool;
  var v9:bool;
  var v14:bool;
  var v17:bool;
  var v19:bool;
  var v18:bool;
  var v20:bv32;
  var v25:bv32;
  var v15:bv32;
  var v16:bv32;
  var v21:bv32;
  var v22:bv32;
  var v23:bv32;
  var v26:bv32;
  var v32:bv32;
  var v33:bv32;
  var v34:bv32;
  var v35:bv32;
  var v40:bv32;
  var v41:bv32;
  var v38:bv32;
  var v39:bv32;
  var v24:bool;
  var v27:bool;
  var v37:bool;
  var v28:bool;
  var v30:bool;
  var v29:bool;
  var v36:bool;
  var v31:bool;
  var v42:bv32;
  var v43:bv32;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  v0 := group_id_x;
  v1 := local_id_x;
  v2 := BV32_ADD(BV32_MUL(v0, 512bv32), v1);
  v3 := BV64_SUB(512bv64, BV64_SUB(BV32_SEXT64(BV32_MUL($gridDim, 512bv32)), $d_no))[32:0];
  v4 := BV64_SLT(BV32_SEXT64(v2), $d_no);
  goto $truebb, $falsebb;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  assert {:sourceloc} {:sourceloc_num 6} true;
  v5 := $$d_sums[BV32_MUL(v2, $d_mul)];
  assert {:sourceloc} {:sourceloc_num 7} true;
  $$reduce_kernel.d_psum[v1] := v5;
  assert {:sourceloc} {:sourceloc_num 8} true;
  v6 := $$d_sums2[BV32_MUL(v2, $d_mul)];
  assert {:sourceloc} {:sourceloc_num 9} true;
  $$reduce_kernel.d_psum2[v1] := v6;
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  call {:sourceloc_num 11} $bugle_barrier(1bv1, 1bv1);
  v7 := v3 == 512bv32;
  goto $truebb0, $falsebb0;
$if.then.18:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  $i.0 := 2bv32;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  v8 := BV32_SLE($i.0, 512bv32);
  goto $truebb1, $falsebb1;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  v9 := BV32_SREM(BV32_ADD(v1, 1bv32), $i.0) == 0bv32;
  goto $truebb2, $falsebb2;
$if.then.24:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  assert {:sourceloc} {:sourceloc_num 16} true;
  v10 := $$reduce_kernel.d_psum[v1];
  assert {:sourceloc} {:sourceloc_num 17} true;
  v11 := $$reduce_kernel.d_psum[BV32_SUB(v1, BV32_SDIV($i.0, 2bv32))];
  assert {:sourceloc} {:sourceloc_num 18} true;
  $$reduce_kernel.d_psum[v1] := FADD32(v10, v11);
  assert {:sourceloc} {:sourceloc_num 19} true;
  v12 := $$reduce_kernel.d_psum2[v1];
  assert {:sourceloc} {:sourceloc_num 20} true;
  v13 := $$reduce_kernel.d_psum2[BV32_SUB(v1, BV32_SDIV($i.0, 2bv32))];
  assert {:sourceloc} {:sourceloc_num 21} true;
  $$reduce_kernel.d_psum2[v1] := FADD32(v12, v13);
  goto $if.end.36;
$if.end.36:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  call {:sourceloc_num 23} $bugle_barrier(1bv1, 0bv1);
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  $i.0 := BV32_MUL(2bv32, $i.0);
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  v14 := v1 == 511bv32;
  goto $truebb3, $falsebb3;
$if.then.40:
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  assert {:sourceloc} {:sourceloc_num 27} true;
  v15 := $$reduce_kernel.d_psum[v1];
  assert {:sourceloc} {:sourceloc_num 28} true;
  $$d_sums[BV32_MUL(BV32_MUL(v0, $d_mul), 512bv32)] := v15;
  assert {:sourceloc} {:sourceloc_num 29} true;
  v16 := $$reduce_kernel.d_psum2[v1];
  assert {:sourceloc} {:sourceloc_num 30} true;
  $$d_sums2[BV32_MUL(BV32_MUL(v0, $d_mul), 512bv32)] := v16;
  goto $if.end.49;
$if.end.49:
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  goto $if.end.162;
$if.else:
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  v17 := v0 != BV32_SUB($gridDim, 1bv32);
  goto $truebb4, $falsebb4;
$if.then.53:
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  $i.1 := 2bv32;
  goto $for.cond.54;
$for.cond.54:
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  v18 := BV32_SLE($i.1, 512bv32);
  goto $truebb5, $falsebb5;
$for.body.57:
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  v19 := BV32_SREM(BV32_ADD(v1, 1bv32), $i.1) == 0bv32;
  goto $truebb6, $falsebb6;
$if.then.62:
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  assert {:sourceloc} {:sourceloc_num 37} true;
  v20 := $$reduce_kernel.d_psum[v1];
  assert {:sourceloc} {:sourceloc_num 38} true;
  v21 := $$reduce_kernel.d_psum[BV32_SUB(v1, BV32_SDIV($i.1, 2bv32))];
  assert {:sourceloc} {:sourceloc_num 39} true;
  $$reduce_kernel.d_psum[v1] := FADD32(v20, v21);
  assert {:sourceloc} {:sourceloc_num 40} true;
  v22 := $$reduce_kernel.d_psum2[v1];
  assert {:sourceloc} {:sourceloc_num 41} true;
  v23 := $$reduce_kernel.d_psum2[BV32_SUB(v1, BV32_SDIV($i.1, 2bv32))];
  assert {:sourceloc} {:sourceloc_num 42} true;
  $$reduce_kernel.d_psum2[v1] := FADD32(v22, v23);
  goto $if.end.75;
$if.end.75:
  assert {:block_sourceloc} {:sourceloc_num 43} true;
  call {:sourceloc_num 44} $bugle_barrier(1bv1, 0bv1);
  goto $for.inc.76;
$for.inc.76:
  assert {:block_sourceloc} {:sourceloc_num 45} true;
  $i.1 := BV32_MUL(2bv32, $i.1);
  goto $for.cond.54;
$for.end.78:
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  v24 := v1 == 511bv32;
  goto $truebb7, $falsebb7;
$if.then.81:
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  assert {:sourceloc} {:sourceloc_num 48} true;
  v25 := $$reduce_kernel.d_psum[v1];
  assert {:sourceloc} {:sourceloc_num 49} true;
  $$d_sums[BV32_MUL(BV32_MUL(v0, $d_mul), 512bv32)] := v25;
  assert {:sourceloc} {:sourceloc_num 50} true;
  v26 := $$reduce_kernel.d_psum2[v1];
  assert {:sourceloc} {:sourceloc_num 51} true;
  $$d_sums2[BV32_MUL(BV32_MUL(v0, $d_mul), 512bv32)] := v26;
  goto $if.end.90;
$if.end.90:
  assert {:block_sourceloc} {:sourceloc_num 52} true;
  goto $if.end.161;
$if.else.91:
  assert {:block_sourceloc} {:sourceloc_num 53} true;
  $df.0, $i.2 := 0bv32, 2bv32;
  goto $for.cond.92;
$for.cond.92:
  assert {:block_sourceloc} {:sourceloc_num 54} true;
  v27 := BV32_SLE($i.2, 512bv32);
  goto $truebb8, $falsebb8;
$for.body.95:
  assert {:block_sourceloc} {:sourceloc_num 55} true;
  v28 := BV32_SGE(v3, $i.2);
  goto $truebb9, $falsebb9;
$if.then.98:
  assert {:block_sourceloc} {:sourceloc_num 56} true;
  $df.1 := $i.2;
  goto $if.end.99;
$if.end.99:
  assert {:block_sourceloc} {:sourceloc_num 57} true;
  goto $for.inc.100;
$for.inc.100:
  assert {:block_sourceloc} {:sourceloc_num 58} true;
  $df.0, $i.2 := $df.1, BV32_MUL(2bv32, $i.2);
  goto $for.cond.92;
$for.end.102:
  assert {:block_sourceloc} {:sourceloc_num 59} true;
  $i.3 := 2bv32;
  goto $for.cond.103;
$for.cond.103:
  assert {:block_sourceloc} {:sourceloc_num 60} true;
  v29 := BV32_SLE($i.3, $df.0);
  goto $truebb10, $falsebb10;
$for.body.106:
  assert {:block_sourceloc} {:sourceloc_num 61} true;
  v30 := BV32_SREM(BV32_ADD(v1, 1bv32), $i.3) == 0bv32;
  goto $truebb11, $falsebb11;
$land.lhs.true:
  assert {:block_sourceloc} {:sourceloc_num 62} true;
  v31 := BV32_SLT(v1, $df.0);
  goto $truebb12, $falsebb12;
$if.then.113:
  assert {:block_sourceloc} {:sourceloc_num 63} true;
  assert {:sourceloc} {:sourceloc_num 64} true;
  v32 := $$reduce_kernel.d_psum[v1];
  assert {:sourceloc} {:sourceloc_num 65} true;
  v33 := $$reduce_kernel.d_psum[BV32_SUB(v1, BV32_SDIV($i.3, 2bv32))];
  assert {:sourceloc} {:sourceloc_num 66} true;
  $$reduce_kernel.d_psum[v1] := FADD32(v32, v33);
  assert {:sourceloc} {:sourceloc_num 67} true;
  v34 := $$reduce_kernel.d_psum2[v1];
  assert {:sourceloc} {:sourceloc_num 68} true;
  v35 := $$reduce_kernel.d_psum2[BV32_SUB(v1, BV32_SDIV($i.3, 2bv32))];
  assert {:sourceloc} {:sourceloc_num 69} true;
  $$reduce_kernel.d_psum2[v1] := FADD32(v34, v35);
  goto $if.end.126;
$if.end.126:
  assert {:block_sourceloc} {:sourceloc_num 70} true;
  call {:sourceloc_num 71} $bugle_barrier(1bv1, 0bv1);
  goto $for.inc.127;
$for.inc.127:
  assert {:block_sourceloc} {:sourceloc_num 72} true;
  $i.3 := BV32_MUL(2bv32, $i.3);
  goto $for.cond.103;
$for.end.129:
  assert {:block_sourceloc} {:sourceloc_num 73} true;
  v36 := v1 == BV32_SUB($df.0, 1bv32);
  goto $truebb13, $falsebb13;
$if.then.133:
  assert {:block_sourceloc} {:sourceloc_num 74} true;
  $i.4 := BV32_ADD(BV32_MUL(v0, 512bv32), $df.0);
  goto $for.cond.136;
$for.cond.136:
  assert {:block_sourceloc} {:sourceloc_num 75} true;
  v37 := BV32_SLT($i.4, BV32_ADD(BV32_MUL(v0, 512bv32), v3));
  goto $truebb14, $falsebb14;
$for.body.141:
  assert {:block_sourceloc} {:sourceloc_num 76} true;
  assert {:sourceloc} {:sourceloc_num 77} true;
  v38 := $$reduce_kernel.d_psum[v1];
  assert {:sourceloc} {:sourceloc_num 78} true;
  v39 := $$d_sums[$i.4];
  assert {:sourceloc} {:sourceloc_num 79} true;
  $$reduce_kernel.d_psum[v1] := FADD32(v38, v39);
  assert {:sourceloc} {:sourceloc_num 80} true;
  v40 := $$reduce_kernel.d_psum2[v1];
  assert {:sourceloc} {:sourceloc_num 81} true;
  v41 := $$d_sums2[$i.4];
  assert {:sourceloc} {:sourceloc_num 82} true;
  $$reduce_kernel.d_psum2[v1] := FADD32(v40, v41);
  goto $for.inc.150;
$for.inc.150:
  assert {:block_sourceloc} {:sourceloc_num 83} true;
  $i.4 := BV32_ADD($i.4, 1bv32);
  goto $for.cond.136;
$for.end.151:
  assert {:block_sourceloc} {:sourceloc_num 84} true;
  assert {:sourceloc} {:sourceloc_num 85} true;
  v42 := $$reduce_kernel.d_psum[v1];
  assert {:sourceloc} {:sourceloc_num 86} true;
  $$d_sums[BV32_MUL(BV32_MUL(v0, $d_mul), 512bv32)] := v42;
  assert {:sourceloc} {:sourceloc_num 87} true;
  v43 := $$reduce_kernel.d_psum2[v1];
  assert {:sourceloc} {:sourceloc_num 88} true;
  $$d_sums2[BV32_MUL(BV32_MUL(v0, $d_mul), 512bv32)] := v43;
  goto $if.end.160;
$if.end.160:
  assert {:block_sourceloc} true;
  goto $if.end.161;
$if.end.161:
  assert {:block_sourceloc} true;
  goto $if.end.162;
$if.end.162:
  assert {:block_sourceloc} {:sourceloc_num 89} true;
  return;
$truebb:
  assume {:partition} v4;
  assert {:block_sourceloc} {:sourceloc_num 90} true;
  goto $if.then;
$falsebb:
  assume {:partition} !v4;
  assert {:block_sourceloc} {:sourceloc_num 91} true;
  goto $if.end;
$truebb0:
  assume {:partition} v7;
  assert {:block_sourceloc} {:sourceloc_num 92} true;
  goto $if.then.18;
$falsebb0:
  assume {:partition} !v7;
  assert {:block_sourceloc} {:sourceloc_num 93} true;
  goto $if.else;
$truebb1:
  assume {:partition} v8;
  assert {:block_sourceloc} {:sourceloc_num 94} true;
  goto $for.body;
$falsebb1:
  assume {:partition} !v8;
  assert {:block_sourceloc} {:sourceloc_num 95} true;
  goto $for.end;
$truebb2:
  assume {:partition} v9;
  assert {:block_sourceloc} {:sourceloc_num 96} true;
  goto $if.then.24;
$falsebb2:
  assume {:partition} !v9;
  assert {:block_sourceloc} {:sourceloc_num 97} true;
  goto $if.end.36;
$truebb3:
  assume {:partition} v14;
  assert {:block_sourceloc} {:sourceloc_num 98} true;
  goto $if.then.40;
$falsebb3:
  assume {:partition} !v14;
  assert {:block_sourceloc} {:sourceloc_num 99} true;
  goto $if.end.49;
$truebb4:
  assume {:partition} v17;
  assert {:block_sourceloc} {:sourceloc_num 100} true;
  goto $if.then.53;
$falsebb4:
  assume {:partition} !v17;
  assert {:block_sourceloc} {:sourceloc_num 101} true;
  goto $if.else.91;
$truebb5:
  assume {:partition} v18;
  assert {:block_sourceloc} {:sourceloc_num 102} true;
  goto $for.body.57;
$falsebb5:
  assume {:partition} !v18;
  assert {:block_sourceloc} {:sourceloc_num 103} true;
  goto $for.end.78;
$truebb6:
  assume {:partition} v19;
  assert {:block_sourceloc} {:sourceloc_num 104} true;
  goto $if.then.62;
$falsebb6:
  assume {:partition} !v19;
  assert {:block_sourceloc} {:sourceloc_num 105} true;
  goto $if.end.75;
$truebb7:
  assume {:partition} v24;
  assert {:block_sourceloc} {:sourceloc_num 106} true;
  goto $if.then.81;
$falsebb7:
  assume {:partition} !v24;
  assert {:block_sourceloc} {:sourceloc_num 107} true;
  goto $if.end.90;
$truebb8:
  assume {:partition} v27;
  assert {:block_sourceloc} {:sourceloc_num 108} true;
  goto $for.body.95;
$falsebb8:
  assume {:partition} !v27;
  assert {:block_sourceloc} {:sourceloc_num 109} true;
  goto $for.end.102;
$truebb9:
  assume {:partition} v28;
  assert {:block_sourceloc} {:sourceloc_num 110} true;
  goto $if.then.98;
$falsebb9:
  assume {:partition} !v28;
  assert {:block_sourceloc} {:sourceloc_num 111} true;
  $df.1 := $df.0;
  goto $if.end.99;
$truebb10:
  assume {:partition} v29;
  assert {:block_sourceloc} {:sourceloc_num 112} true;
  goto $for.body.106;
$falsebb10:
  assume {:partition} !v29;
  assert {:block_sourceloc} {:sourceloc_num 113} true;
  goto $for.end.129;
$truebb11:
  assume {:partition} v30;
  assert {:block_sourceloc} {:sourceloc_num 114} true;
  goto $land.lhs.true;
$falsebb11:
  assume {:partition} !v30;
  assert {:block_sourceloc} {:sourceloc_num 115} true;
  goto $if.end.126;
$truebb12:
  assume {:partition} v31;
  assert {:block_sourceloc} {:sourceloc_num 116} true;
  goto $if.then.113;
$falsebb12:
  assume {:partition} !v31;
  assert {:block_sourceloc} {:sourceloc_num 117} true;
  goto $if.end.126;
$truebb13:
  assume {:partition} v36;
  assert {:block_sourceloc} {:sourceloc_num 118} true;
  goto $if.then.133;
$falsebb13:
  assume {:partition} !v36;
  assert {:block_sourceloc} {:sourceloc_num 119} true;
  goto $if.end.160;
$truebb14:
  assume {:partition} v37;
  assert {:block_sourceloc} {:sourceloc_num 120} true;
  goto $for.body.141;
$falsebb14:
  assume {:partition} !v37;
  assert {:block_sourceloc} {:sourceloc_num 121} true;
  goto $for.end.151;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 512bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_x == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_y == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_z == 0bv32 then 1bv1 else 0bv1) != 0bv1;
