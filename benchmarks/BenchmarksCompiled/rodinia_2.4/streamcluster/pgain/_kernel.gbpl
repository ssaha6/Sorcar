type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP8(x : [bv32]bv8, y : bv32) returns (z : bv8, A : [bv32]bv8);
procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "p"} {:global} $$p : [bv32]bv8;
axiom {:array_info "$$p"} {:global} {:elem_width 8} {:source_name "p"} {:source_elem_width 192} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 192} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$p : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 192} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$p : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 192} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$p : bool;

var {:source_name "coord_d"} {:global} $$coord_d : [bv32]bv32;
axiom {:array_info "$$coord_d"} {:global} {:elem_width 32} {:source_name "coord_d"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$coord_d : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$coord_d : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$coord_d : bool;

var {:source_name "work_mem_d"} {:global} $$work_mem_d : [bv32]bv32;
axiom {:array_info "$$work_mem_d"} {:global} {:elem_width 32} {:source_name "work_mem_d"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$work_mem_d : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$work_mem_d : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$work_mem_d : bool;

var {:source_name "center_table_d"} {:global} $$center_table_d : [bv32]bv32;
axiom {:array_info "$$center_table_d"} {:global} {:elem_width 32} {:source_name "center_table_d"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$center_table_d : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$center_table_d : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$center_table_d : bool;

var {:source_name "switch_membership_d"} {:global} $$switch_membership_d : [bv32]bv8;
axiom {:array_info "$$switch_membership_d"} {:global} {:elem_width 8} {:source_name "switch_membership_d"} {:source_elem_width 8} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 8} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$switch_membership_d : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 8} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$switch_membership_d : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 8} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$switch_membership_d : bool;

var {:source_name "coord_s"} {:group_shared} $$coord_s : [bv32]bv32;
axiom {:array_info "$$coord_s"} {:group_shared} {:elem_width 32} {:source_name "coord_s"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$coord_s : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$coord_s : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$coord_s : bool;

const _WATCHED_OFFSET : bv32;
const {:global_offset_x} global_offset_x : bv32;
const {:global_offset_y} global_offset_y : bv32;
const {:global_offset_z} global_offset_z : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FADD32(bv32, bv32) : bv32;
function FLT32(bv32, bv32) : bool;
function FMUL32(bv32, bv32) : bv32;
function FSUB32(bv32, bv32) : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvadd"} BV64_ADD(bv64, bv64) : bv64;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
function {:bvbuiltin "sign_extend 32"} BV32_SEXT64(bv32) : bv64;
procedure {:source_name "pgain_kernel"} {:kernel} $pgain_kernel($num:bv32, $dim:bv32, $x:bv64, $K:bv32)
requires {:sourceloc_num 0} (if $num == 65536bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 1} (if $dim == 256bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 2} (if $x == 64563bv64 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 3} (if $K == 1bv32 then 1bv1 else 0bv1) != 0bv1;
{
  var $i.0:bv32;
  var $x_cost.0:bv32;
  var $i10.0:bv32;
  var v13:bv8;
  var v10:bv8;
  var v9:bv32;
  var v8:bv32;
  var v6:bv32;
  var v7:bv32;
  var v4:bv32;
  var v11:bv8;
  var v12:bv8;
  var v17:bv8;
  var v22:bv8;
  var v23:bv8;
  var v16:bv8;
  var v18:bv8;
  var v24:bv8;
  var v15:bv8;
  var v2:bool;
  var v0:bv32;
  var v1:bool;
  var v5:bool;
  var v3:bool;
  var v31:bv32;
  var v19:bv32;
  var v21:bool;
  var v14:bv32;
  var v20:bv32;
  var v26:bv8;
  var v27:bv8;
  var v30:bv32;
  var v32:bv32;
  var v25:bv8;
  var v28:bv8;
  var v29:bv8;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  v1 := BV32_SLT(v0, $num);
  goto $truebb, $falsebb;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  v2 := local_id_x == 0bv32;
  goto $truebb0, $falsebb0;
$if.then.7:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  $i.0 := 0bv32;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  v3 := BV32_SLT($i.0, $dim);
  goto $truebb1, $falsebb1;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  assert {:sourceloc} {:sourceloc_num 9} true;
  v4 := $$coord_d[BV64_ADD(BV32_SEXT64(BV32_MUL($i.0, $num)), $x)[32:0]];
  assert {:sourceloc} {:sourceloc_num 10} true;
  $$coord_s[$i.0] := v4;
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  $i.0 := BV32_ADD($i.0, 1bv32);
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  call {:sourceloc_num 14} $bugle_barrier(1bv1, 0bv1);
  $x_cost.0, $i10.0 := 0bv32, 0bv32;
  goto $for.cond.11;
$for.cond.11:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  v5 := BV32_SLT($i10.0, $dim);
  goto $truebb2, $falsebb2;
$for.body.14:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  assert {:sourceloc} {:sourceloc_num 17} true;
  v6 := $$coord_d[BV32_ADD(BV32_MUL($i10.0, $num), v0)];
  assert {:sourceloc} {:sourceloc_num 18} true;
  v7 := $$coord_s[$i10.0];
  assert {:sourceloc} {:sourceloc_num 19} true;
  v8 := $$coord_d[BV32_ADD(BV32_MUL($i10.0, $num), v0)];
  assert {:sourceloc} {:sourceloc_num 20} true;
  v9 := $$coord_s[$i10.0];
  goto $for.inc.26;
$for.inc.26:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  $x_cost.0, $i10.0 := FADD32($x_cost.0, FMUL32(FSUB32(v6, v7), FSUB32(v8, v9))), BV32_ADD($i10.0, 1bv32);
  goto $for.cond.11;
$for.end.28:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  assert {:sourceloc} {:sourceloc_num 23} true;
  v10 := $$p[BV32_MUL(v0, 24bv32)];
  assert {:sourceloc} {:sourceloc_num 24} true;
  v11 := $$p[BV32_ADD(BV32_MUL(v0, 24bv32), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 25} true;
  v12 := $$p[BV32_ADD(BV32_MUL(v0, 24bv32), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 26} true;
  v13 := $$p[BV32_ADD(BV32_MUL(v0, 24bv32), 3bv32)];
  v14 := FMUL32($x_cost.0, v13 ++ v12 ++ v11 ++ v10);
  assert {:sourceloc} {:sourceloc_num 27} true;
  v15 := $$p[BV32_ADD(BV32_MUL(v0, 24bv32), 16bv32)];
  assert {:sourceloc} {:sourceloc_num 28} true;
  v16 := $$p[BV32_ADD(BV32_MUL(v0, 24bv32), 17bv32)];
  assert {:sourceloc} {:sourceloc_num 29} true;
  v17 := $$p[BV32_ADD(BV32_MUL(v0, 24bv32), 18bv32)];
  assert {:sourceloc} {:sourceloc_num 30} true;
  v18 := $$p[BV32_ADD(BV32_MUL(v0, 24bv32), 19bv32)];
  v19 := v18 ++ v17 ++ v16 ++ v15;
  v20 := BV32_MUL(v0, BV32_ADD($K, 1bv32));
  v21 := FLT32(v14, v19);
  goto $truebb3, $falsebb3;
$if.then.36:
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  assert {:sourceloc} {:sourceloc_num 32} true;
  $$switch_membership_d[v0] := 49bv8;
  assert {:sourceloc} {:sourceloc_num 33} true;
  $$work_mem_d[BV32_ADD(v20, $K)] := FSUB32(v14, v19);
  goto $if.end.49;
$if.else:
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  assert {:sourceloc} {:sourceloc_num 35} true;
  v22 := $$p[BV32_ADD(BV32_MUL(v0, 24bv32), 8bv32)];
  assert {:sourceloc} {:sourceloc_num 36} true;
  v23 := $$p[BV32_ADD(BV32_MUL(v0, 24bv32), 9bv32)];
  assert {:sourceloc} {:sourceloc_num 37} true;
  v24 := $$p[BV32_ADD(BV32_MUL(v0, 24bv32), 10bv32)];
  assert {:sourceloc} {:sourceloc_num 38} true;
  v25 := $$p[BV32_ADD(BV32_MUL(v0, 24bv32), 11bv32)];
  assert {:sourceloc} {:sourceloc_num 39} true;
  v26 := $$p[BV32_ADD(BV32_MUL(v0, 24bv32), 12bv32)];
  assert {:sourceloc} {:sourceloc_num 40} true;
  v27 := $$p[BV32_ADD(BV32_MUL(v0, 24bv32), 13bv32)];
  assert {:sourceloc} {:sourceloc_num 41} true;
  v28 := $$p[BV32_ADD(BV32_MUL(v0, 24bv32), 14bv32)];
  assert {:sourceloc} {:sourceloc_num 42} true;
  v29 := $$p[BV32_ADD(BV32_MUL(v0, 24bv32), 15bv32)];
  assert {:sourceloc} {:sourceloc_num 43} true;
  v30 := $$center_table_d[v25 ++ v24 ++ v23 ++ v22];
  v31 := BV32_ADD(v20, v30);
  assert {:sourceloc} {:sourceloc_num 44} true;
  v32 := $$work_mem_d[v31];
  assert {:sourceloc} {:sourceloc_num 45} true;
  $$work_mem_d[v31] := FADD32(v32, FSUB32(v19, v14));
  goto $if.end.49;
$if.end.49:
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  goto $if.end.50;
$if.end.50:
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  return;
$truebb:
  assume {:partition} v1;
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  goto $if.then;
$falsebb:
  assume {:partition} !v1;
  assert {:block_sourceloc} {:sourceloc_num 49} true;
  goto $if.end.50;
$truebb0:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 50} true;
  goto $if.then.7;
$falsebb0:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 51} true;
  goto $if.end;
$truebb1:
  assume {:partition} v3;
  assert {:block_sourceloc} {:sourceloc_num 52} true;
  goto $for.body;
$falsebb1:
  assume {:partition} !v3;
  assert {:block_sourceloc} {:sourceloc_num 53} true;
  goto $for.end;
$truebb2:
  assume {:partition} v5;
  assert {:block_sourceloc} {:sourceloc_num 54} true;
  goto $for.body.14;
$falsebb2:
  assume {:partition} !v5;
  assert {:block_sourceloc} {:sourceloc_num 55} true;
  goto $for.end.28;
$truebb3:
  assume {:partition} v21;
  assert {:block_sourceloc} {:sourceloc_num 56} true;
  goto $if.then.36;
$falsebb3:
  assume {:partition} !v21;
  assert {:block_sourceloc} {:sourceloc_num 57} true;
  goto $if.else;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 256bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 256bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_x == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_y == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_z == 0bv32 then 1bv1 else 0bv1) != 0bv1;
