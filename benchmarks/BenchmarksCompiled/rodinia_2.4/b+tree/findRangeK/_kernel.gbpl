type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP8(x : [bv32]bv8, y : bv32) returns (z : bv8, A : [bv32]bv8);
procedure _ATOMIC_OP64(x : [bv32]bv64, y : bv32) returns (z : bv64, A : [bv32]bv64);
procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "knodesD"} {:global} $$knodesD : [bv32]bv8;
axiom {:array_info "$$knodesD"} {:global} {:elem_width 8} {:source_name "knodesD"} {:source_elem_width 16544} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 16544} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$knodesD : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 16544} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$knodesD : bool;
var {:race_checking} {:global} {:elem_width 8} {:source_elem_width 16544} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$knodesD : bool;

var {:source_name "currKnodeD"} {:global} $$currKnodeD : [bv32]bv64;
axiom {:array_info "$$currKnodeD"} {:global} {:elem_width 64} {:source_name "currKnodeD"} {:source_elem_width 64} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$currKnodeD : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$currKnodeD : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$currKnodeD : bool;

var {:source_name "offsetD"} {:global} $$offsetD : [bv32]bv64;
axiom {:array_info "$$offsetD"} {:global} {:elem_width 64} {:source_name "offsetD"} {:source_elem_width 64} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$offsetD : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$offsetD : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$offsetD : bool;

var {:source_name "lastKnodeD"} {:global} $$lastKnodeD : [bv32]bv64;
axiom {:array_info "$$lastKnodeD"} {:global} {:elem_width 64} {:source_name "lastKnodeD"} {:source_elem_width 64} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$lastKnodeD : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$lastKnodeD : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$lastKnodeD : bool;

var {:source_name "offset_2D"} {:global} $$offset_2D : [bv32]bv64;
axiom {:array_info "$$offset_2D"} {:global} {:elem_width 64} {:source_name "offset_2D"} {:source_elem_width 64} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$offset_2D : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$offset_2D : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$offset_2D : bool;

var {:source_name "startD"} {:global} $$startD : [bv32]bv32;
axiom {:array_info "$$startD"} {:global} {:elem_width 32} {:source_name "startD"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$startD : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$startD : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$startD : bool;

var {:source_name "endD"} {:global} $$endD : [bv32]bv32;
axiom {:array_info "$$endD"} {:global} {:elem_width 32} {:source_name "endD"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$endD : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$endD : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$endD : bool;

var {:source_name "RecstartD"} {:global} $$RecstartD : [bv32]bv32;
axiom {:array_info "$$RecstartD"} {:global} {:elem_width 32} {:source_name "RecstartD"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$RecstartD : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$RecstartD : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$RecstartD : bool;

var {:source_name "ReclenD"} {:global} $$ReclenD : [bv32]bv32;
axiom {:array_info "$$ReclenD"} {:global} {:elem_width 32} {:source_name "ReclenD"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$ReclenD : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$ReclenD : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$ReclenD : bool;

const _WATCHED_OFFSET : bv32;
const {:global_offset_x} global_offset_x : bv32;
const {:global_offset_y} global_offset_y : bv32;
const {:global_offset_z} global_offset_z : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvsgt"} BV32_SGT(bv32, bv32) : bool;
function {:bvbuiltin "bvsle"} BV32_SLE(bv32, bv32) : bool;
function {:bvbuiltin "bvslt"} BV64_SLT(bv64, bv64) : bool;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "sign_extend 32"} BV32_SEXT64(bv32) : bv64;
procedure {:source_name "findRangeK"} {:kernel} $findRangeK($height:bv64, $knodes_elem:bv64)
requires {:sourceloc_num 0} (if $height == 2bv64 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 1} (if $knodes_elem == 7874bv64 then 1bv1 else 0bv1) != 0bv1;
{
  var $i.0:bv32;
  var v1:bv32;
  var v0:bv32;
  var v3:bv64;
  var v8:bv32;
  var v5:bv8;
  var v4:bv8;
  var v13:bv8;
  var v11:bv8;
  var v12:bv8;
  var v6:bv8;
  var v7:bv8;
  var v10:bv64;
  var v2:bool;
  var v9:bool;
  var v16:bool;
  var v21:bv8;
  var v25:bv8;
  var v26:bv8;
  var v19:bv8;
  var v17:bv64;
  var v23:bv64;
  var v15:bv32;
  var v14:bv8;
  var v24:bv8;
  var v18:bv8;
  var v27:bv8;
  var v20:bv8;
  var v35:bv64;
  var v36:bv8;
  var v28:bv64;
  var v40:bv32;
  var v31:bv8;
  var v37:bv8;
  var v38:bv8;
  var v29:bv8;
  var v32:bv8;
  var v30:bv8;
  var v39:bv8;
  var v33:bv32;
  var v48:bv64;
  var v43:bv8;
  var v44:bv8;
  var v45:bv8;
  var v46:bv8;
  var v42:bv64;
  var v22:bool;
  var v34:bool;
  var v41:bool;
  var v47:bool;
  var v53:bool;
  var v62:bool;
  var v69:bv8;
  var v73:bv32;
  var v71:bv8;
  var v76:bv8;
  var v75:bv64;
  var v79:bv8;
  var v80:bv32;
  var v77:bv8;
  var v78:bv8;
  var v70:bv8;
  var v72:bv8;
  var v57:bv8;
  var v59:bv8;
  var v51:bv8;
  var v56:bv64;
  var v55:bv64;
  var v58:bv8;
  var v50:bv8;
  var v49:bv8;
  var v52:bv8;
  var v54:bv64;
  var v67:bv8;
  var v65:bv8;
  var v63:bv64;
  var v66:bv8;
  var v61:bv32;
  var v60:bv8;
  var v68:bv64;
  var v64:bv8;
  var v74:bool;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  v0 := local_id_x;
  v1 := group_id_x;
  $i.0 := 0bv32;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  v2 := BV64_SLT(BV32_SEXT64($i.0), $height);
  goto $truebb, $falsebb;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 4} true;
  assert {:sourceloc} {:sourceloc_num 5} true;
  v3 := $$currKnodeD[v1];
  assert {:sourceloc} {:sourceloc_num 6} true;
  v4 := $$knodesD[BV32_ADD(BV32_ADD(BV32_MUL(v3[32:0], 2068bv32), 1032bv32), BV32_MUL(v0, 4bv32))];
  assert {:sourceloc} {:sourceloc_num 7} true;
  v5 := $$knodesD[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(v3[32:0], 2068bv32), 1032bv32), BV32_MUL(v0, 4bv32)), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 8} true;
  v6 := $$knodesD[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(v3[32:0], 2068bv32), 1032bv32), BV32_MUL(v0, 4bv32)), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 9} true;
  v7 := $$knodesD[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(v3[32:0], 2068bv32), 1032bv32), BV32_MUL(v0, 4bv32)), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 10} true;
  v8 := $$startD[v1];
  v9 := BV32_SLE(v7 ++ v6 ++ v5 ++ v4, v8);
  goto $truebb0, $falsebb0;
$land.lhs.true:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  assert {:sourceloc} {:sourceloc_num 12} true;
  v10 := $$currKnodeD[v1];
  assert {:sourceloc} {:sourceloc_num 13} true;
  v11 := $$knodesD[BV32_ADD(BV32_ADD(BV32_MUL(v10[32:0], 2068bv32), 1032bv32), BV32_MUL(BV32_ADD(v0, 1bv32), 4bv32))];
  assert {:sourceloc} {:sourceloc_num 14} true;
  v12 := $$knodesD[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(v10[32:0], 2068bv32), 1032bv32), BV32_MUL(BV32_ADD(v0, 1bv32), 4bv32)), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 15} true;
  v13 := $$knodesD[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(v10[32:0], 2068bv32), 1032bv32), BV32_MUL(BV32_ADD(v0, 1bv32), 4bv32)), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 16} true;
  v14 := $$knodesD[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(v10[32:0], 2068bv32), 1032bv32), BV32_MUL(BV32_ADD(v0, 1bv32), 4bv32)), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 17} true;
  v15 := $$startD[v1];
  v16 := BV32_SGT(v14 ++ v13 ++ v12 ++ v11, v15);
  goto $truebb1, $falsebb1;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  assert {:sourceloc} {:sourceloc_num 19} true;
  v17 := $$currKnodeD[v1];
  assert {:sourceloc} {:sourceloc_num 20} true;
  v18 := $$knodesD[BV32_ADD(BV32_ADD(BV32_MUL(v17[32:0], 2068bv32), 4bv32), BV32_MUL(v0, 4bv32))];
  assert {:sourceloc} {:sourceloc_num 21} true;
  v19 := $$knodesD[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(v17[32:0], 2068bv32), 4bv32), BV32_MUL(v0, 4bv32)), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 22} true;
  v20 := $$knodesD[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(v17[32:0], 2068bv32), 4bv32), BV32_MUL(v0, 4bv32)), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 23} true;
  v21 := $$knodesD[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(v17[32:0], 2068bv32), 4bv32), BV32_MUL(v0, 4bv32)), 3bv32)];
  v22 := BV64_SLT(BV32_SEXT64(v21 ++ v20 ++ v19 ++ v18), $knodes_elem);
  goto $truebb2, $falsebb2;
$if.then.25:
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  assert {:sourceloc} {:sourceloc_num 25} true;
  v23 := $$currKnodeD[v1];
  assert {:sourceloc} {:sourceloc_num 26} true;
  v24 := $$knodesD[BV32_ADD(BV32_ADD(BV32_MUL(v23[32:0], 2068bv32), 4bv32), BV32_MUL(v0, 4bv32))];
  assert {:sourceloc} {:sourceloc_num 27} true;
  v25 := $$knodesD[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(v23[32:0], 2068bv32), 4bv32), BV32_MUL(v0, 4bv32)), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 28} true;
  v26 := $$knodesD[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(v23[32:0], 2068bv32), 4bv32), BV32_MUL(v0, 4bv32)), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 29} true;
  v27 := $$knodesD[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(v23[32:0], 2068bv32), 4bv32), BV32_MUL(v0, 4bv32)), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 30} true;
  $$offsetD[v1] := BV32_SEXT64(v27 ++ v26 ++ v25 ++ v24);
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  goto $if.end.33;
$if.end.33:
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  assert {:sourceloc} {:sourceloc_num 33} true;
  v28 := $$lastKnodeD[v1];
  assert {:sourceloc} {:sourceloc_num 34} true;
  v29 := $$knodesD[BV32_ADD(BV32_ADD(BV32_MUL(v28[32:0], 2068bv32), 1032bv32), BV32_MUL(v0, 4bv32))];
  assert {:sourceloc} {:sourceloc_num 35} true;
  v30 := $$knodesD[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(v28[32:0], 2068bv32), 1032bv32), BV32_MUL(v0, 4bv32)), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 36} true;
  v31 := $$knodesD[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(v28[32:0], 2068bv32), 1032bv32), BV32_MUL(v0, 4bv32)), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 37} true;
  v32 := $$knodesD[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(v28[32:0], 2068bv32), 1032bv32), BV32_MUL(v0, 4bv32)), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 38} true;
  v33 := $$endD[v1];
  v34 := BV32_SLE(v32 ++ v31 ++ v30 ++ v29, v33);
  goto $truebb3, $falsebb3;
$land.lhs.true.42:
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  assert {:sourceloc} {:sourceloc_num 40} true;
  v35 := $$lastKnodeD[v1];
  assert {:sourceloc} {:sourceloc_num 41} true;
  v36 := $$knodesD[BV32_ADD(BV32_ADD(BV32_MUL(v35[32:0], 2068bv32), 1032bv32), BV32_MUL(BV32_ADD(v0, 1bv32), 4bv32))];
  assert {:sourceloc} {:sourceloc_num 42} true;
  v37 := $$knodesD[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(v35[32:0], 2068bv32), 1032bv32), BV32_MUL(BV32_ADD(v0, 1bv32), 4bv32)), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 43} true;
  v38 := $$knodesD[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(v35[32:0], 2068bv32), 1032bv32), BV32_MUL(BV32_ADD(v0, 1bv32), 4bv32)), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 44} true;
  v39 := $$knodesD[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(v35[32:0], 2068bv32), 1032bv32), BV32_MUL(BV32_ADD(v0, 1bv32), 4bv32)), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 45} true;
  v40 := $$endD[v1];
  v41 := BV32_SGT(v39 ++ v38 ++ v37 ++ v36, v40);
  goto $truebb4, $falsebb4;
$if.then.52:
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  assert {:sourceloc} {:sourceloc_num 47} true;
  v42 := $$lastKnodeD[v1];
  assert {:sourceloc} {:sourceloc_num 48} true;
  v43 := $$knodesD[BV32_ADD(BV32_ADD(BV32_MUL(v42[32:0], 2068bv32), 4bv32), BV32_MUL(v0, 4bv32))];
  assert {:sourceloc} {:sourceloc_num 49} true;
  v44 := $$knodesD[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(v42[32:0], 2068bv32), 4bv32), BV32_MUL(v0, 4bv32)), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 50} true;
  v45 := $$knodesD[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(v42[32:0], 2068bv32), 4bv32), BV32_MUL(v0, 4bv32)), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 51} true;
  v46 := $$knodesD[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(v42[32:0], 2068bv32), 4bv32), BV32_MUL(v0, 4bv32)), 3bv32)];
  v47 := BV64_SLT(BV32_SEXT64(v46 ++ v45 ++ v44 ++ v43), $knodes_elem);
  goto $truebb5, $falsebb5;
$if.then.61:
  assert {:block_sourceloc} {:sourceloc_num 52} true;
  assert {:sourceloc} {:sourceloc_num 53} true;
  v48 := $$lastKnodeD[v1];
  assert {:sourceloc} {:sourceloc_num 54} true;
  v49 := $$knodesD[BV32_ADD(BV32_ADD(BV32_MUL(v48[32:0], 2068bv32), 4bv32), BV32_MUL(v0, 4bv32))];
  assert {:sourceloc} {:sourceloc_num 55} true;
  v50 := $$knodesD[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(v48[32:0], 2068bv32), 4bv32), BV32_MUL(v0, 4bv32)), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 56} true;
  v51 := $$knodesD[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(v48[32:0], 2068bv32), 4bv32), BV32_MUL(v0, 4bv32)), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 57} true;
  v52 := $$knodesD[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(v48[32:0], 2068bv32), 4bv32), BV32_MUL(v0, 4bv32)), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 58} true;
  $$offset_2D[v1] := BV32_SEXT64(v52 ++ v51 ++ v50 ++ v49);
  goto $if.end.69;
$if.end.69:
  assert {:block_sourceloc} {:sourceloc_num 59} true;
  goto $if.end.70;
$if.end.70:
  assert {:block_sourceloc} {:sourceloc_num 60} true;
  call {:sourceloc_num 61} $bugle_barrier(1bv1, 0bv1);
  v53 := v0 == 0bv32;
  goto $truebb6, $falsebb6;
$if.then.73:
  assert {:block_sourceloc} {:sourceloc_num 62} true;
  assert {:sourceloc} {:sourceloc_num 63} true;
  v54 := $$offsetD[v1];
  assert {:sourceloc} {:sourceloc_num 64} true;
  $$currKnodeD[v1] := v54;
  assert {:sourceloc} {:sourceloc_num 65} true;
  v55 := $$offset_2D[v1];
  assert {:sourceloc} {:sourceloc_num 66} true;
  $$lastKnodeD[v1] := v55;
  goto $if.end.78;
$if.end.78:
  assert {:block_sourceloc} {:sourceloc_num 67} true;
  call {:sourceloc_num 68} $bugle_barrier(1bv1, 0bv1);
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 69} true;
  $i.0 := BV32_ADD($i.0, 1bv32);
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 70} true;
  assert {:sourceloc} {:sourceloc_num 71} true;
  v56 := $$currKnodeD[v1];
  assert {:sourceloc} {:sourceloc_num 72} true;
  v57 := $$knodesD[BV32_ADD(BV32_ADD(BV32_MUL(v56[32:0], 2068bv32), 1032bv32), BV32_MUL(v0, 4bv32))];
  assert {:sourceloc} {:sourceloc_num 73} true;
  v58 := $$knodesD[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(v56[32:0], 2068bv32), 1032bv32), BV32_MUL(v0, 4bv32)), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 74} true;
  v59 := $$knodesD[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(v56[32:0], 2068bv32), 1032bv32), BV32_MUL(v0, 4bv32)), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 75} true;
  v60 := $$knodesD[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(v56[32:0], 2068bv32), 1032bv32), BV32_MUL(v0, 4bv32)), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 76} true;
  v61 := $$startD[v1];
  v62 := v60 ++ v59 ++ v58 ++ v57 == v61;
  goto $truebb7, $falsebb7;
$if.then.87:
  assert {:block_sourceloc} {:sourceloc_num 77} true;
  assert {:sourceloc} {:sourceloc_num 78} true;
  v63 := $$currKnodeD[v1];
  assert {:sourceloc} {:sourceloc_num 79} true;
  v64 := $$knodesD[BV32_ADD(BV32_ADD(BV32_MUL(v63[32:0], 2068bv32), 4bv32), BV32_MUL(v0, 4bv32))];
  assert {:sourceloc} {:sourceloc_num 80} true;
  v65 := $$knodesD[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(v63[32:0], 2068bv32), 4bv32), BV32_MUL(v0, 4bv32)), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 81} true;
  v66 := $$knodesD[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(v63[32:0], 2068bv32), 4bv32), BV32_MUL(v0, 4bv32)), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 82} true;
  v67 := $$knodesD[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(v63[32:0], 2068bv32), 4bv32), BV32_MUL(v0, 4bv32)), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 83} true;
  $$RecstartD[v1] := v67 ++ v66 ++ v65 ++ v64;
  goto $if.end.94;
$if.end.94:
  assert {:block_sourceloc} {:sourceloc_num 84} true;
  call {:sourceloc_num 85} $bugle_barrier(1bv1, 0bv1);
  assert {:sourceloc} {:sourceloc_num 86} true;
  v68 := $$lastKnodeD[v1];
  assert {:sourceloc} {:sourceloc_num 87} true;
  v69 := $$knodesD[BV32_ADD(BV32_ADD(BV32_MUL(v68[32:0], 2068bv32), 1032bv32), BV32_MUL(v0, 4bv32))];
  assert {:sourceloc} {:sourceloc_num 88} true;
  v70 := $$knodesD[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(v68[32:0], 2068bv32), 1032bv32), BV32_MUL(v0, 4bv32)), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 89} true;
  v71 := $$knodesD[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(v68[32:0], 2068bv32), 1032bv32), BV32_MUL(v0, 4bv32)), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 90} true;
  v72 := $$knodesD[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(v68[32:0], 2068bv32), 1032bv32), BV32_MUL(v0, 4bv32)), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 91} true;
  v73 := $$endD[v1];
  v74 := v72 ++ v71 ++ v70 ++ v69 == v73;
  goto $truebb8, $falsebb8;
$if.then.103:
  assert {:block_sourceloc} {:sourceloc_num 92} true;
  assert {:sourceloc} {:sourceloc_num 93} true;
  v75 := $$lastKnodeD[v1];
  assert {:sourceloc} {:sourceloc_num 94} true;
  v76 := $$knodesD[BV32_ADD(BV32_ADD(BV32_MUL(v75[32:0], 2068bv32), 4bv32), BV32_MUL(v0, 4bv32))];
  assert {:sourceloc} {:sourceloc_num 95} true;
  v77 := $$knodesD[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(v75[32:0], 2068bv32), 4bv32), BV32_MUL(v0, 4bv32)), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 96} true;
  v78 := $$knodesD[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(v75[32:0], 2068bv32), 4bv32), BV32_MUL(v0, 4bv32)), 2bv32)];
  assert {:sourceloc} {:sourceloc_num 97} true;
  v79 := $$knodesD[BV32_ADD(BV32_ADD(BV32_ADD(BV32_MUL(v75[32:0], 2068bv32), 4bv32), BV32_MUL(v0, 4bv32)), 3bv32)];
  assert {:sourceloc} {:sourceloc_num 98} true;
  v80 := $$RecstartD[v1];
  assert {:sourceloc} {:sourceloc_num 99} true;
  $$ReclenD[v1] := BV32_ADD(BV32_SUB(v79 ++ v78 ++ v77 ++ v76, v80), 1bv32);
  goto $if.end.112;
$if.end.112:
  assert {:block_sourceloc} {:sourceloc_num 100} true;
  return;
$truebb:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 101} true;
  goto $for.body;
$falsebb:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 102} true;
  goto $for.end;
$truebb0:
  assume {:partition} v9;
  assert {:block_sourceloc} {:sourceloc_num 103} true;
  goto $land.lhs.true;
$falsebb0:
  assume {:partition} !v9;
  assert {:block_sourceloc} {:sourceloc_num 104} true;
  goto $if.end.33;
$truebb1:
  assume {:partition} v16;
  assert {:block_sourceloc} {:sourceloc_num 105} true;
  goto $if.then;
$falsebb1:
  assume {:partition} !v16;
  assert {:block_sourceloc} {:sourceloc_num 106} true;
  goto $if.end.33;
$truebb2:
  assume {:partition} v22;
  assert {:block_sourceloc} {:sourceloc_num 107} true;
  goto $if.then.25;
$falsebb2:
  assume {:partition} !v22;
  assert {:block_sourceloc} {:sourceloc_num 108} true;
  goto $if.end;
$truebb3:
  assume {:partition} v34;
  assert {:block_sourceloc} {:sourceloc_num 109} true;
  goto $land.lhs.true.42;
$falsebb3:
  assume {:partition} !v34;
  assert {:block_sourceloc} {:sourceloc_num 110} true;
  goto $if.end.70;
$truebb4:
  assume {:partition} v41;
  assert {:block_sourceloc} {:sourceloc_num 111} true;
  goto $if.then.52;
$falsebb4:
  assume {:partition} !v41;
  assert {:block_sourceloc} {:sourceloc_num 112} true;
  goto $if.end.70;
$truebb5:
  assume {:partition} v47;
  assert {:block_sourceloc} {:sourceloc_num 113} true;
  goto $if.then.61;
$falsebb5:
  assume {:partition} !v47;
  assert {:block_sourceloc} {:sourceloc_num 114} true;
  goto $if.end.69;
$truebb6:
  assume {:partition} v53;
  assert {:block_sourceloc} {:sourceloc_num 115} true;
  goto $if.then.73;
$falsebb6:
  assume {:partition} !v53;
  assert {:block_sourceloc} {:sourceloc_num 116} true;
  goto $if.end.78;
$truebb7:
  assume {:partition} v62;
  assert {:block_sourceloc} {:sourceloc_num 117} true;
  goto $if.then.87;
$falsebb7:
  assume {:partition} !v62;
  assert {:block_sourceloc} {:sourceloc_num 118} true;
  goto $if.end.94;
$truebb8:
  assume {:partition} v74;
  assert {:block_sourceloc} {:sourceloc_num 119} true;
  goto $if.then.103;
$falsebb8:
  assume {:partition} !v74;
  assert {:block_sourceloc} {:sourceloc_num 120} true;
  goto $if.end.112;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 256bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 6000bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_x == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_y == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_z == 0bv32 then 1bv1 else 0bv1) != 0bv1;
