type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "d_v"} {:global} $$d_v : [bv32]bv32;
axiom {:array_info "$$d_v"} {:global} {:elem_width 32} {:source_name "d_v"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_v : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_v : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_v : bool;

var {:source_name "B.i"} $$B.i : [bv32]bv32;
axiom {:array_info "$$B.i"} {:elem_width 32} {:source_name "B.i"} {:source_elem_width 32} {:source_dimensions "40"} true;

var {:source_name "S.i"} $$S.i : [bv32]bv32;
axiom {:array_info "$$S.i"} {:elem_width 32} {:source_name "S.i"} {:source_elem_width 32} {:source_dimensions "40"} true;

var {:source_name "L"} $$L : [bv32]bv32;
axiom {:array_info "$$L"} {:elem_width 32} {:source_name "L"} {:source_elem_width 32} {:source_dimensions "80"} true;

var {:source_name "z"} $$z : [bv32]bv32;
axiom {:array_info "$$z"} {:elem_width 32} {:source_name "z"} {:source_elem_width 32} {:source_dimensions "80"} true;

var {:source_name "N"} {:constant} $$N : [bv32]bv32;
axiom {:array_info "$$N"} {:constant} {:elem_width 32} {:source_name "N"} {:source_elem_width 32} {:source_dimensions "1"} true;

var {:source_name "Nmat"} {:constant} $$Nmat : [bv32]bv32;
axiom {:array_info "$$Nmat"} {:constant} {:elem_width 32} {:source_name "Nmat"} {:source_elem_width 32} {:source_dimensions "1"} true;

var {:source_name "delta"} {:constant} $$delta : [bv32]bv32;
axiom {:array_info "$$delta"} {:constant} {:elem_width 32} {:source_name "delta"} {:source_elem_width 32} {:source_dimensions "1"} true;

var {:source_name "lambda"} {:constant} $$lambda : [bv32]bv32;
axiom {:array_info "$$lambda"} {:constant} {:elem_width 32} {:source_name "lambda"} {:source_elem_width 32} {:source_dimensions "80"} true;

var {:source_name "Nopt"} {:constant} $$Nopt : [bv32]bv32;
axiom {:array_info "$$Nopt"} {:constant} {:elem_width 32} {:source_name "Nopt"} {:source_elem_width 32} {:source_dimensions "1"} true;

var {:source_name "maturities"} {:constant} $$maturities : [bv32]bv32;
axiom {:array_info "$$maturities"} {:constant} {:elem_width 32} {:source_name "maturities"} {:source_elem_width 32} {:source_dimensions "15"} true;

var {:source_name "swaprates"} {:constant} $$swaprates : [bv32]bv32;
axiom {:array_info "$$swaprates"} {:constant} {:elem_width 32} {:source_name "swaprates"} {:source_elem_width 32} {:source_dimensions "15"} true;

const _WATCHED_OFFSET : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FADD32(bv32, bv32) : bv32;
function FADD64(bv64, bv64) : bv64;
function FDIV64(bv64, bv64) : bv64;
function FLT32(bv32, bv32) : bool;
function FMUL32(bv32, bv32) : bv32;
function FMUL64(bv64, bv64) : bv64;
function FP32_CONV64(bv32) : bv64;
function FP64_CONV32(bv64) : bv32;
function FSQRT32(bv32) : bv32;
function FSUB64(bv64, bv64) : bv64;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
procedure {:source_name "Pathcalc_Portfolio_KernelGPU2"} {:kernel} $_Z29Pathcalc_Portfolio_KernelGPU2Pf()
{
  var $path.0:bv32;
  var $i.0:bv32;
  var $n.i.0:bv32;
  var $i.i.0:bv32;
  var $v.i.0:bv32;
  var $s.i.0:bv32;
  var $b.i.0:bv32;
  var $n.i.13.0:bv32;
  var $v.i.15.0:bv32;
  var $i.i.14.0:bv32;
  var $v.i.15.1:bv32;
  var $b.i.1:bv32;
  var $n.i.13.1:bv32;
  var v6:bv32;
  var v5:bv32;
  var v3:bv32;
  var v1:bv32;
  var v2:bool;
  var v0:bool;
  var v4:bool;
  var v9:bv32;
  var v12:bv32;
  var v19:bv32;
  var v17:bv32;
  var v14:bv32;
  var v15:bv32;
  var v7:bv32;
  var v18:bv32;
  var v10:bv32;
  var v13:bv32;
  var v20:bv32;
  var v25:bv32;
  var v22:bv32;
  var v28:bv32;
  var v23:bv32;
  var v27:bv32;
  var v29:bv32;
  var v33:bv32;
  var v34:bv32;
  var v35:bv32;
  var v31:bv32;
  var v16:bv32;
  var v8:bool;
  var v11:bv32;
  var v26:bv32;
  var v21:bool;
  var v24:bv32;
  var v30:bool;
  var v32:bv32;
  var v37:bool;
  var v36:bv32;
  var v39:bool;
  var v40:bv32;
  var v41:bv32;
  var v38:bv32;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  $path.0 := BV32_ADD(BV32_MUL(group_size_x, group_id_x), local_id_x);
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  v0 := BV32_SLT($path.0, 4096bv32);
  goto $truebb, $falsebb;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  $i.0 := 0bv32;
  goto $for.cond.2;
$for.cond.2:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  assert {:sourceloc} {:sourceloc_num 4} true;
  v1 := $$N[0bv32];
  v2 := BV32_SLT($i.0, v1);
  goto $truebb0, $falsebb0;
$for.body.4:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  assert {:sourceloc} {:sourceloc_num 6} true;
  $$z[$i.0] := 1050253722bv32;
  assert {:sourceloc} {:sourceloc_num 7} true;
  $$L[$i.0] := 1028443341bv32;
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  $i.0 := BV32_ADD($i.0, 1bv32);
  goto $for.cond.2;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  $n.i.0 := 0bv32;
  goto $for.cond.i;
$for.cond.i:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  assert {:sourceloc} {:sourceloc_num 11} true;
  v3 := $$Nmat[0bv32];
  v4 := BV32_SLT($n.i.0, v3);
  goto $truebb1, $falsebb1;
$for.body.i:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  assert {:sourceloc} {:sourceloc_num 13} true;
  v5 := $$delta[0bv32];
  assert {:sourceloc} {:sourceloc_num 14} true;
  v6 := $$z[$n.i.0];
  $i.i.0, $v.i.0 := BV32_ADD($n.i.0, 1bv32), 0bv32;
  goto $for.cond.1.i;
$for.cond.1.i:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  assert {:sourceloc} {:sourceloc_num 16} true;
  v7 := $$N[0bv32];
  v8 := BV32_SLT($i.i.0, v7);
  goto $truebb2, $falsebb2;
$for.body.3.i:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  assert {:sourceloc} {:sourceloc_num 18} true;
  v9 := $$lambda[BV32_SUB(BV32_SUB($i.i.0, $n.i.0), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 19} true;
  v10 := $$delta[0bv32];
  v11 := FMUL32(v10, v9);
  assert {:sourceloc} {:sourceloc_num 20} true;
  v12 := $$L[$i.i.0];
  assert {:sourceloc} {:sourceloc_num 21} true;
  v13 := $$delta[0bv32];
  assert {:sourceloc} {:sourceloc_num 22} true;
  v14 := $$L[$i.i.0];
  call {:sourceloc_num 23}   v15 := $__fdividef(FMUL32(v11, v12), FP64_CONV32(FADD64(4607182418800017408bv64, FP32_CONV64(FMUL32(v13, v14)))));
  v16 := FADD32($v.i.0, v15);
  call {:sourceloc_num 24}   v17 := $__expf(FP64_CONV32(FADD64(FP32_CONV64(FMUL32(v11, v16)), FMUL64(FP32_CONV64(v9), FSUB64(FP32_CONV64(FMUL32(FSQRT32(v5), v6)), FMUL64(4602678819172646912bv64, FP32_CONV64(v11)))))));
  assert {:sourceloc} {:sourceloc_num 25} true;
  v18 := $$L[$i.i.0];
  assert {:sourceloc} {:sourceloc_num 26} true;
  $$L[$i.i.0] := FMUL32(v18, v17);
  $i.i.0, $v.i.0 := BV32_ADD($i.i.0, 1bv32), v16;
  goto $for.cond.1.i;
$for.end.i:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  $n.i.0 := BV32_ADD($n.i.0, 1bv32);
  goto $for.cond.i;
$_ZL9path_calcPfS_.exit:
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  assert {:sourceloc} {:sourceloc_num 29} true;
  v19 := $$Nmat[0bv32];
  $s.i.0, $b.i.0, $n.i.13.0 := 0bv32, 1065353216bv32, v19;
  goto $for.cond.i.17;
$for.cond.i.17:
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  assert {:sourceloc} {:sourceloc_num 31} true;
  v20 := $$N[0bv32];
  v21 := BV32_SLT($n.i.13.0, v20);
  goto $truebb3, $falsebb3;
$for.body.i.25:
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  assert {:sourceloc} {:sourceloc_num 33} true;
  v22 := $$delta[0bv32];
  assert {:sourceloc} {:sourceloc_num 34} true;
  v23 := $$L[$n.i.13.0];
  v24 := FP64_CONV32(FDIV64(FP32_CONV64($b.i.0), FADD64(4607182418800017408bv64, FP32_CONV64(FMUL32(v22, v23)))));
  assert {:sourceloc} {:sourceloc_num 35} true;
  v25 := $$delta[0bv32];
  v26 := FADD32($s.i.0, FMUL32(v25, v24));
  assert {:sourceloc} {:sourceloc_num 36} true;
  v27 := $$Nmat[0bv32];
  assert {:sourceloc} {:sourceloc_num 37} true;
  $$B.i[BV32_SUB($n.i.13.0, v27)] := v24;
  assert {:sourceloc} {:sourceloc_num 38} true;
  v28 := $$Nmat[0bv32];
  assert {:sourceloc} {:sourceloc_num 39} true;
  $$S.i[BV32_SUB($n.i.13.0, v28)] := v26;
  $s.i.0, $b.i.0, $n.i.13.0 := v26, v24, BV32_ADD($n.i.13.0, 1bv32);
  goto $for.cond.i.17;
$for.end.i.27:
  assert {:block_sourceloc} {:sourceloc_num 40} true;
  $v.i.15.0, $i.i.14.0 := 0bv32, 0bv32;
  goto $for.cond.8.i;
$for.cond.8.i:
  assert {:block_sourceloc} {:sourceloc_num 41} true;
  assert {:sourceloc} {:sourceloc_num 42} true;
  v29 := $$Nopt[0bv32];
  v30 := BV32_SLT($i.i.14.0, v29);
  goto $truebb4, $falsebb4;
$for.body.10.i:
  assert {:block_sourceloc} {:sourceloc_num 43} true;
  assert {:sourceloc} {:sourceloc_num 44} true;
  v31 := $$maturities[$i.i.14.0];
  v32 := BV32_SUB(v31, 1bv32);
  assert {:sourceloc} {:sourceloc_num 45} true;
  v33 := $$B.i[v32];
  assert {:sourceloc} {:sourceloc_num 46} true;
  v34 := $$swaprates[$i.i.14.0];
  assert {:sourceloc} {:sourceloc_num 47} true;
  v35 := $$S.i[v32];
  v36 := FP64_CONV32(FSUB64(FP32_CONV64(FADD32(v33, FMUL32(v34, v35))), 4607182418800017408bv64));
  v37 := FLT32(v36, 0bv32);
  goto $truebb5, $falsebb5;
$if.then.i:
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  $v.i.15.1 := FP64_CONV32(FADD64(FP32_CONV64($v.i.15.0), FMUL64(13860109328209412096bv64, FP32_CONV64(v36))));
  goto $if.end.i;
$if.end.i:
  assert {:block_sourceloc} {:sourceloc_num 49} true;
  $v.i.15.0, $i.i.14.0 := $v.i.15.1, BV32_ADD($i.i.14.0, 1bv32);
  goto $for.cond.8.i;
$for.end.29.i:
  assert {:block_sourceloc} {:sourceloc_num 50} true;
  $b.i.1, $n.i.13.1 := 1065353216bv32, 0bv32;
  goto $for.cond.30.i;
$for.cond.30.i:
  assert {:block_sourceloc} {:sourceloc_num 51} true;
  assert {:sourceloc} {:sourceloc_num 52} true;
  v38 := $$Nmat[0bv32];
  v39 := BV32_SLT($n.i.13.1, v38);
  goto $truebb6, $falsebb6;
$for.body.32.i:
  assert {:block_sourceloc} {:sourceloc_num 53} true;
  assert {:sourceloc} {:sourceloc_num 54} true;
  v40 := $$delta[0bv32];
  assert {:sourceloc} {:sourceloc_num 55} true;
  v41 := $$L[$n.i.13.1];
  $b.i.1, $n.i.13.1 := FP64_CONV32(FDIV64(FP32_CONV64($b.i.1), FADD64(4607182418800017408bv64, FP32_CONV64(FMUL32(v40, v41))))), BV32_ADD($n.i.13.1, 1bv32);
  goto $for.cond.30.i;
$_ZL9portfolioPf.exit:
  assert {:block_sourceloc} {:sourceloc_num 56} true;
  assert {:sourceloc} {:sourceloc_num 57} true;
  $$d_v[$path.0] := FMUL32($b.i.1, $v.i.15.0);
  goto $for.inc.9;
$for.inc.9:
  assert {:block_sourceloc} {:sourceloc_num 58} true;
  $path.0 := BV32_ADD($path.0, BV32_MUL(group_size_x, num_groups_x));
  goto $for.cond;
$for.end.11:
  assert {:block_sourceloc} {:sourceloc_num 59} true;
  return;
$truebb:
  assume {:partition} v0;
  assert {:block_sourceloc} {:sourceloc_num 60} true;
  goto $for.body;
$falsebb:
  assume {:partition} !v0;
  assert {:block_sourceloc} {:sourceloc_num 61} true;
  goto $for.end.11;
$truebb0:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 62} true;
  goto $for.body.4;
$falsebb0:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 63} true;
  goto $for.end;
$truebb1:
  assume {:partition} v4;
  assert {:block_sourceloc} {:sourceloc_num 64} true;
  goto $for.body.i;
$falsebb1:
  assume {:partition} !v4;
  assert {:block_sourceloc} {:sourceloc_num 65} true;
  goto $_ZL9path_calcPfS_.exit;
$truebb2:
  assume {:partition} v8;
  assert {:block_sourceloc} {:sourceloc_num 66} true;
  goto $for.body.3.i;
$falsebb2:
  assume {:partition} !v8;
  assert {:block_sourceloc} {:sourceloc_num 67} true;
  goto $for.end.i;
$truebb3:
  assume {:partition} v21;
  assert {:block_sourceloc} {:sourceloc_num 68} true;
  goto $for.body.i.25;
$falsebb3:
  assume {:partition} !v21;
  assert {:block_sourceloc} {:sourceloc_num 69} true;
  goto $for.end.i.27;
$truebb4:
  assume {:partition} v30;
  assert {:block_sourceloc} {:sourceloc_num 70} true;
  goto $for.body.10.i;
$falsebb4:
  assume {:partition} !v30;
  assert {:block_sourceloc} {:sourceloc_num 71} true;
  goto $for.end.29.i;
$truebb5:
  assume {:partition} v37;
  assert {:block_sourceloc} {:sourceloc_num 72} true;
  goto $if.then.i;
$falsebb5:
  assume {:partition} !v37;
  assert {:block_sourceloc} {:sourceloc_num 73} true;
  $v.i.15.1 := $v.i.15.0;
  goto $if.end.i;
$truebb6:
  assume {:partition} v39;
  assert {:block_sourceloc} {:sourceloc_num 74} true;
  goto $for.body.32.i;
$falsebb6:
  assume {:partition} !v39;
  assert {:block_sourceloc} {:sourceloc_num 75} true;
  goto $_ZL9portfolioPf.exit;
}
procedure {:source_name "__fdividef"} $__fdividef($0:bv32, $1:bv32) returns ($ret:bv32);
procedure {:source_name "__expf"} $__expf($0:bv32) returns ($ret:bv32);
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 32bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 2bv32 then 1bv1 else 0bv1) != 0bv1;
