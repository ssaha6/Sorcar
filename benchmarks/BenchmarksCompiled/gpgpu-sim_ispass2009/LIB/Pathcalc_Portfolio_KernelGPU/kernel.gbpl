type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "d_v"} {:global} $$d_v : [bv32]bv32;
axiom {:array_info "$$d_v"} {:global} {:elem_width 32} {:source_name "d_v"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_v : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_v : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_v : bool;

var {:source_name "d_Lb"} {:global} $$d_Lb : [bv32]bv32;
axiom {:array_info "$$d_Lb"} {:global} {:elem_width 32} {:source_name "d_Lb"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$d_Lb : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$d_Lb : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$d_Lb : bool;

var {:source_name "B.i"} $$B.i : [bv32]bv32;
axiom {:array_info "$$B.i"} {:elem_width 32} {:source_name "B.i"} {:source_elem_width 32} {:source_dimensions "40"} true;

var {:source_name "S.i"} $$S.i : [bv32]bv32;
axiom {:array_info "$$S.i"} {:elem_width 32} {:source_name "S.i"} {:source_elem_width 32} {:source_dimensions "40"} true;

var {:source_name "B_b.i"} $$B_b.i : [bv32]bv32;
axiom {:array_info "$$B_b.i"} {:elem_width 32} {:source_name "B_b.i"} {:source_elem_width 32} {:source_dimensions "40"} true;

var {:source_name "S_b.i"} $$S_b.i : [bv32]bv32;
axiom {:array_info "$$S_b.i"} {:elem_width 32} {:source_name "S_b.i"} {:source_elem_width 32} {:source_dimensions "40"} true;

var {:source_name "L"} $$L : [bv32]bv32;
axiom {:array_info "$$L"} {:elem_width 32} {:source_name "L"} {:source_elem_width 32} {:source_dimensions "80"} true;

var {:source_name "L2"} $$L2 : [bv32]bv32;
axiom {:array_info "$$L2"} {:elem_width 32} {:source_name "L2"} {:source_elem_width 32} {:source_dimensions "3280"} true;

var {:source_name "z"} $$z : [bv32]bv32;
axiom {:array_info "$$z"} {:elem_width 32} {:source_name "z"} {:source_elem_width 32} {:source_dimensions "80"} true;

var {:source_name "N"} {:constant} $$N : [bv32]bv32;
axiom {:array_info "$$N"} {:constant} {:elem_width 32} {:source_name "N"} {:source_elem_width 32} {:source_dimensions "1"} true;

var {:source_name "Nmat"} {:constant} $$Nmat : [bv32]bv32;
axiom {:array_info "$$Nmat"} {:constant} {:elem_width 32} {:source_name "Nmat"} {:source_elem_width 32} {:source_dimensions "1"} true;

var {:source_name "delta"} {:constant} $$delta : [bv32]bv32;
axiom {:array_info "$$delta"} {:constant} {:elem_width 32} {:source_name "delta"} {:source_elem_width 32} {:source_dimensions "1"} true;

var {:source_name "lambda"} {:constant} $$lambda : [bv32]bv32;
axiom {:array_info "$$lambda"} {:constant} {:elem_width 32} {:source_name "lambda"} {:source_elem_width 32} {:source_dimensions "80"} true;

var {:source_name "Nopt"} {:constant} $$Nopt : [bv32]bv32;
axiom {:array_info "$$Nopt"} {:constant} {:elem_width 32} {:source_name "Nopt"} {:source_elem_width 32} {:source_dimensions "1"} true;

var {:source_name "maturities"} {:constant} $$maturities : [bv32]bv32;
axiom {:array_info "$$maturities"} {:constant} {:elem_width 32} {:source_name "maturities"} {:source_elem_width 32} {:source_dimensions "15"} true;

var {:source_name "swaprates"} {:constant} $$swaprates : [bv32]bv32;
axiom {:array_info "$$swaprates"} {:constant} {:elem_width 32} {:source_name "swaprates"} {:source_elem_width 32} {:source_dimensions "15"} true;

const _WATCHED_OFFSET : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FADD32(bv32, bv32) : bv32;
function FADD64(bv64, bv64) : bv64;
function FDIV64(bv64, bv64) : bv64;
function FLT32(bv32, bv32) : bool;
function FMUL32(bv32, bv32) : bv32;
function FMUL64(bv64, bv64) : bv64;
function FP32_CONV64(bv32) : bv64;
function FP64_CONV32(bv64) : bv32;
function FSQRT64(bv64) : bv64;
function FSUB32(bv32, bv32) : bv32;
function FSUB64(bv64, bv64) : bv64;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvsge"} BV32_SGE(bv32, bv32) : bool;
function {:bvbuiltin "bvsgt"} BV32_SGT(bv32, bv32) : bool;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
procedure {:source_name "Pathcalc_Portfolio_KernelGPU"} {:kernel} $_Z28Pathcalc_Portfolio_KernelGPUPfS_()
{
  var $path.0:bv32;
  var $i.0:bv32;
  var $i.i.0:bv32;
  var $n.i.0:bv32;
  var $i.i.1:bv32;
  var $v.i.0:bv32;
  var $s.i.0:bv32;
  var $b.i.0:bv32;
  var $m.i.0:bv32;
  var $m.i.1:bv32;
  var $n.i.19.0:bv32;
  var $v.i.20.0:bv32;
  var $v.i.20.1:bv32;
  var $m.i.2:bv32;
  var $b.i.1:bv32;
  var $n.i.19.1:bv32;
  var $n.i.19.2:bv32;
  var $n.i.19.3:bv32;
  var $n.i.45.0:bv32;
  var $v1.i.0:bv32;
  var $i.i.44.0:bv32;
  var v33:bv32;
  var v34:bv32;
  var v36:bv32;
  var v38:bv32;
  var v40:bv32;
  var v3:bv32;
  var v1:bv32;
  var v5:bv32;
  var v8:bv32;
  var v9:bv32;
  var v12:bv32;
  var v13:bv32;
  var v6:bv32;
  var v16:bv32;
  var v10:bv32;
  var v15:bv32;
  var v24:bv32;
  var v21:bv32;
  var v25:bv32;
  var v18:bv32;
  var v17:bv32;
  var v27:bv32;
  var v22:bv32;
  var v20:bv32;
  var v23:bv32;
  var v30:bv32;
  var v31:bv32;
  var v28:bv32;
  var v29:bv32;
  var v2:bool;
  var v0:bool;
  var v4:bool;
  var v11:bool;
  var v7:bool;
  var v14:bv32;
  var v19:bv32;
  var v37:bool;
  var v39:bv32;
  var v26:bool;
  var v35:bool;
  var v32:bv32;
  var v102:bv32;
  var v107:bv32;
  var v105:bv32;
  var v103:bv32;
  var v101:bv32;
  var v100:bv32;
  var v104:bv32;
  var v106:bv32;
  var v48:bv32;
  var v54:bv32;
  var v45:bv32;
  var v47:bv32;
  var v49:bv32;
  var v42:bv32;
  var v41:bv32;
  var v46:bv32;
  var v51:bv32;
  var v53:bv32;
  var v55:bv32;
  var v61:bv32;
  var v56:bv32;
  var v65:bv32;
  var v68:bv32;
  var v67:bv32;
  var v69:bv32;
  var v71:bv32;
  var v59:bv32;
  var v63:bv32;
  var v58:bv32;
  var v60:bv32;
  var v57:bv32;
  var v66:bv32;
  var v82:bv32;
  var v72:bv32;
  var v83:bv32;
  var v75:bv32;
  var v77:bv32;
  var v74:bv32;
  var v79:bv32;
  var v80:bv32;
  var v81:bv32;
  var v92:bv32;
  var v93:bv32;
  var v90:bv32;
  var v85:bv32;
  var v86:bv32;
  var v88:bv32;
  var v91:bv32;
  var v96:bv32;
  var v97:bv32;
  var v99:bv32;
  var v98:bv32;
  var v95:bv32;
  var v64:bv32;
  var v62:bool;
  var v70:bv32;
  var v73:bool;
  var v43:bv32;
  var v50:bool;
  var v44:bool;
  var v52:bv32;
  var v78:bool;
  var v76:bv32;
  var v84:bool;
  var v89:bool;
  var v87:bool;
  var v94:bv32;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  $path.0 := BV32_ADD(BV32_MUL(group_size_x, group_id_x), local_id_x);
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  v0 := BV32_SLT($path.0, 4096bv32);
  goto $truebb, $falsebb;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 2} true;
  $i.0 := 0bv32;
  goto $for.cond.2;
$for.cond.2:
  assert {:block_sourceloc} {:sourceloc_num 3} true;
  assert {:sourceloc} {:sourceloc_num 4} true;
  v1 := $$N[0bv32];
  v2 := BV32_SLT($i.0, v1);
  goto $truebb0, $falsebb0;
$for.body.4:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  assert {:sourceloc} {:sourceloc_num 6} true;
  $$z[$i.0] := 1050253722bv32;
  assert {:sourceloc} {:sourceloc_num 7} true;
  $$L[$i.0] := 1028443341bv32;
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  $i.0 := BV32_ADD($i.0, 1bv32);
  goto $for.cond.2;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  $i.i.0 := 0bv32;
  goto $for.cond.i;
$for.cond.i:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  assert {:sourceloc} {:sourceloc_num 11} true;
  v3 := $$N[0bv32];
  v4 := BV32_SLT($i.i.0, v3);
  goto $truebb1, $falsebb1;
$for.body.i:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  assert {:sourceloc} {:sourceloc_num 13} true;
  v5 := $$L[$i.i.0];
  assert {:sourceloc} {:sourceloc_num 14} true;
  $$L2[$i.i.0] := v5;
  $i.i.0 := BV32_ADD($i.i.0, 1bv32);
  goto $for.cond.i;
$for.end.i:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  $n.i.0 := 0bv32;
  goto $for.cond.2.i;
$for.cond.2.i:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  assert {:sourceloc} {:sourceloc_num 17} true;
  v6 := $$Nmat[0bv32];
  v7 := BV32_SLT($n.i.0, v6);
  goto $truebb2, $falsebb2;
$for.body.4.i:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  assert {:sourceloc} {:sourceloc_num 19} true;
  v8 := $$delta[0bv32];
  assert {:sourceloc} {:sourceloc_num 20} true;
  v9 := $$z[$n.i.0];
  $i.i.1, $v.i.0 := BV32_ADD($n.i.0, 1bv32), 0bv32;
  goto $for.cond.8.i;
$for.cond.8.i:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  assert {:sourceloc} {:sourceloc_num 22} true;
  v10 := $$N[0bv32];
  v11 := BV32_SLT($i.i.1, v10);
  goto $truebb3, $falsebb3;
$for.body.10.i:
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  assert {:sourceloc} {:sourceloc_num 24} true;
  v12 := $$lambda[BV32_SUB(BV32_SUB($i.i.1, $n.i.0), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 25} true;
  v13 := $$delta[0bv32];
  v14 := FMUL32(v13, v12);
  assert {:sourceloc} {:sourceloc_num 26} true;
  v15 := $$L[$i.i.1];
  assert {:sourceloc} {:sourceloc_num 27} true;
  v16 := $$delta[0bv32];
  assert {:sourceloc} {:sourceloc_num 28} true;
  v17 := $$L[$i.i.1];
  call {:sourceloc_num 29}   v18 := $__fdividef(FMUL32(v14, v15), FP64_CONV32(FADD64(4607182418800017408bv64, FP32_CONV64(FMUL32(v16, v17)))));
  v19 := FADD32($v.i.0, v18);
  call {:sourceloc_num 30}   v20 := $__expf(FP64_CONV32(FADD64(FP32_CONV64(FMUL32(v14, v19)), FMUL64(FP32_CONV64(v12), FSUB64(FP32_CONV64(FP64_CONV32(FMUL64(FSQRT64(FP32_CONV64(v8)), FP32_CONV64(v9)))), FMUL64(4602678819172646912bv64, FP32_CONV64(v14)))))));
  assert {:sourceloc} {:sourceloc_num 31} true;
  v21 := $$L[$i.i.1];
  assert {:sourceloc} {:sourceloc_num 32} true;
  $$L[$i.i.1] := FMUL32(v21, v20);
  assert {:sourceloc} {:sourceloc_num 33} true;
  v22 := $$L[$i.i.1];
  assert {:sourceloc} {:sourceloc_num 34} true;
  v23 := $$N[0bv32];
  assert {:sourceloc} {:sourceloc_num 35} true;
  $$L2[BV32_ADD($i.i.1, BV32_MUL(BV32_ADD($n.i.0, 1bv32), v23))] := v22;
  $i.i.1, $v.i.0 := BV32_ADD($i.i.1, 1bv32), v19;
  goto $for.cond.8.i;
$for.end.44.i:
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  $n.i.0 := BV32_ADD($n.i.0, 1bv32);
  goto $for.cond.2.i;
$_ZL12path_calc_b1PfS_S_.exit:
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  $s.i.0, $b.i.0, $m.i.0 := 0bv32, 1065353216bv32, 0bv32;
  goto $for.cond.i.23;
$for.cond.i.23:
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  assert {:sourceloc} {:sourceloc_num 39} true;
  v24 := $$N[0bv32];
  assert {:sourceloc} {:sourceloc_num 40} true;
  v25 := $$Nmat[0bv32];
  v26 := BV32_SLT($m.i.0, BV32_SUB(v24, v25));
  goto $truebb4, $falsebb4;
$for.body.i.30:
  assert {:block_sourceloc} {:sourceloc_num 41} true;
  assert {:sourceloc} {:sourceloc_num 42} true;
  v27 := $$Nmat[0bv32];
  assert {:sourceloc} {:sourceloc_num 43} true;
  v28 := $$delta[0bv32];
  assert {:sourceloc} {:sourceloc_num 44} true;
  v29 := $$L[BV32_ADD($m.i.0, v27)];
  call {:sourceloc_num 45}   v30 := $__fdividef($b.i.0, FP64_CONV32(FADD64(4607182418800017408bv64, FP32_CONV64(FMUL32(v28, v29)))));
  assert {:sourceloc} {:sourceloc_num 46} true;
  v31 := $$delta[0bv32];
  v32 := FADD32($s.i.0, FMUL32(v31, v30));
  assert {:sourceloc} {:sourceloc_num 47} true;
  $$B.i[$m.i.0] := v30;
  assert {:sourceloc} {:sourceloc_num 48} true;
  $$S.i[$m.i.0] := v32;
  $s.i.0, $b.i.0, $m.i.0 := v32, v30, BV32_ADD($m.i.0, 1bv32);
  goto $for.cond.i.23;
$for.end.i.32:
  assert {:block_sourceloc} {:sourceloc_num 49} true;
  $m.i.1 := 0bv32;
  goto $for.cond.7.i;
$for.cond.7.i:
  assert {:block_sourceloc} {:sourceloc_num 50} true;
  assert {:sourceloc} {:sourceloc_num 51} true;
  v33 := $$N[0bv32];
  assert {:sourceloc} {:sourceloc_num 52} true;
  v34 := $$Nmat[0bv32];
  v35 := BV32_SLT($m.i.1, BV32_SUB(v33, v34));
  goto $truebb5, $falsebb5;
$for.body.10.i.35:
  assert {:block_sourceloc} {:sourceloc_num 53} true;
  assert {:sourceloc} {:sourceloc_num 54} true;
  $$B_b.i[$m.i.1] := 0bv32;
  assert {:sourceloc} {:sourceloc_num 55} true;
  $$S_b.i[$m.i.1] := 0bv32;
  $m.i.1 := BV32_ADD($m.i.1, 1bv32);
  goto $for.cond.7.i;
$for.end.15.i:
  assert {:block_sourceloc} {:sourceloc_num 56} true;
  $n.i.19.0, $v.i.20.0 := 0bv32, 0bv32;
  goto $for.cond.16.i;
$for.cond.16.i:
  assert {:block_sourceloc} {:sourceloc_num 57} true;
  assert {:sourceloc} {:sourceloc_num 58} true;
  v36 := $$Nopt[0bv32];
  v37 := BV32_SLT($n.i.19.0, v36);
  goto $truebb6, $falsebb6;
$for.body.18.i:
  assert {:block_sourceloc} {:sourceloc_num 59} true;
  assert {:sourceloc} {:sourceloc_num 60} true;
  v38 := $$maturities[$n.i.19.0];
  v39 := BV32_SUB(v38, 1bv32);
  assert {:sourceloc} {:sourceloc_num 61} true;
  v40 := $$B.i[v39];
  assert {:sourceloc} {:sourceloc_num 62} true;
  v41 := $$swaprates[$n.i.19.0];
  assert {:sourceloc} {:sourceloc_num 63} true;
  v42 := $$S.i[v39];
  v43 := FP64_CONV32(FSUB64(FP32_CONV64(FADD32(v40, FMUL32(v41, v42))), 4607182418800017408bv64));
  v44 := FLT32(v43, 0bv32);
  goto $truebb7, $falsebb7;
$if.then.i:
  assert {:block_sourceloc} {:sourceloc_num 64} true;
  assert {:sourceloc} {:sourceloc_num 65} true;
  v45 := $$swaprates[$n.i.19.0];
  assert {:sourceloc} {:sourceloc_num 66} true;
  v46 := $$S_b.i[v39];
  assert {:sourceloc} {:sourceloc_num 67} true;
  $$S_b.i[v39] := FADD32(v46, FMUL32(3267887104bv32, v45));
  assert {:sourceloc} {:sourceloc_num 68} true;
  v47 := $$B_b.i[v39];
  assert {:sourceloc} {:sourceloc_num 69} true;
  $$B_b.i[v39] := FADD32(v47, 3267887104bv32);
  $v.i.20.1 := FADD32($v.i.20.0, FMUL32(3267887104bv32, v43));
  goto $if.end.i;
$if.end.i:
  assert {:block_sourceloc} {:sourceloc_num 70} true;
  $n.i.19.0, $v.i.20.0 := BV32_ADD($n.i.19.0, 1bv32), $v.i.20.1;
  goto $for.cond.16.i;
$for.end.40.i:
  assert {:block_sourceloc} {:sourceloc_num 71} true;
  assert {:sourceloc} {:sourceloc_num 72} true;
  v48 := $$N[0bv32];
  assert {:sourceloc} {:sourceloc_num 73} true;
  v49 := $$Nmat[0bv32];
  $m.i.2 := BV32_SUB(BV32_SUB(v48, v49), 1bv32);
  goto $for.cond.43.i;
$for.cond.43.i:
  assert {:block_sourceloc} {:sourceloc_num 74} true;
  v50 := BV32_SGE($m.i.2, 0bv32);
  goto $truebb8, $falsebb8;
$for.body.45.i:
  assert {:block_sourceloc} {:sourceloc_num 75} true;
  assert {:sourceloc} {:sourceloc_num 76} true;
  v51 := $$Nmat[0bv32];
  v52 := BV32_ADD($m.i.2, v51);
  assert {:sourceloc} {:sourceloc_num 77} true;
  v53 := $$delta[0bv32];
  assert {:sourceloc} {:sourceloc_num 78} true;
  v54 := $$S_b.i[$m.i.2];
  assert {:sourceloc} {:sourceloc_num 79} true;
  v55 := $$B_b.i[$m.i.2];
  assert {:sourceloc} {:sourceloc_num 80} true;
  $$B_b.i[$m.i.2] := FADD32(v55, FMUL32(v53, v54));
  assert {:sourceloc} {:sourceloc_num 81} true;
  v56 := $$B_b.i[$m.i.2];
  assert {:sourceloc} {:sourceloc_num 82} true;
  v57 := $$B.i[$m.i.2];
  assert {:sourceloc} {:sourceloc_num 83} true;
  v58 := $$delta[0bv32];
  assert {:sourceloc} {:sourceloc_num 84} true;
  v59 := $$delta[0bv32];
  assert {:sourceloc} {:sourceloc_num 85} true;
  v60 := $$L[v52];
  call {:sourceloc_num 86}   v61 := $__fdividef(v58, FP64_CONV32(FADD64(4607182418800017408bv64, FP32_CONV64(FMUL32(v59, v60)))));
  assert {:sourceloc} {:sourceloc_num 87} true;
  $$L[v52] := FMUL32(FMUL32(FSUB32(2147483648bv32, v56), v57), v61);
  v62 := BV32_SGT($m.i.2, 0bv32);
  goto $truebb9, $falsebb9;
$if.then.64.i:
  assert {:block_sourceloc} {:sourceloc_num 88} true;
  assert {:sourceloc} {:sourceloc_num 89} true;
  v63 := $$S_b.i[$m.i.2];
  v64 := BV32_SUB($m.i.2, 1bv32);
  assert {:sourceloc} {:sourceloc_num 90} true;
  v65 := $$S_b.i[v64];
  assert {:sourceloc} {:sourceloc_num 91} true;
  $$S_b.i[v64] := FADD32(v65, v63);
  assert {:sourceloc} {:sourceloc_num 92} true;
  v66 := $$B_b.i[$m.i.2];
  assert {:sourceloc} {:sourceloc_num 93} true;
  v67 := $$delta[0bv32];
  assert {:sourceloc} {:sourceloc_num 94} true;
  v68 := $$L[v52];
  call {:sourceloc_num 95}   v69 := $__fdividef(v66, FP64_CONV32(FADD64(4607182418800017408bv64, FP32_CONV64(FMUL32(v67, v68)))));
  v70 := BV32_SUB($m.i.2, 1bv32);
  assert {:sourceloc} {:sourceloc_num 96} true;
  v71 := $$B_b.i[v70];
  assert {:sourceloc} {:sourceloc_num 97} true;
  $$B_b.i[v70] := FADD32(v71, v69);
  goto $if.end.79.i;
$if.end.79.i:
  assert {:block_sourceloc} {:sourceloc_num 98} true;
  $m.i.2 := BV32_ADD($m.i.2, 4294967295bv32);
  goto $for.cond.43.i;
$for.end.81.i:
  assert {:block_sourceloc} {:sourceloc_num 99} true;
  $b.i.1, $n.i.19.1 := 1065353216bv32, 0bv32;
  goto $for.cond.82.i;
$for.cond.82.i:
  assert {:block_sourceloc} {:sourceloc_num 100} true;
  assert {:sourceloc} {:sourceloc_num 101} true;
  v72 := $$Nmat[0bv32];
  v73 := BV32_SLT($n.i.19.1, v72);
  goto $truebb10, $falsebb10;
$for.body.84.i:
  assert {:block_sourceloc} {:sourceloc_num 102} true;
  assert {:sourceloc} {:sourceloc_num 103} true;
  v74 := $$delta[0bv32];
  assert {:sourceloc} {:sourceloc_num 104} true;
  v75 := $$L[$n.i.19.1];
  $b.i.1, $n.i.19.1 := FP64_CONV32(FDIV64(FP32_CONV64($b.i.1), FADD64(4607182418800017408bv64, FP32_CONV64(FMUL32(v74, v75))))), BV32_ADD($n.i.19.1, 1bv32);
  goto $for.cond.82.i;
$for.end.93.i:
  assert {:block_sourceloc} {:sourceloc_num 105} true;
  v76 := FMUL32($b.i.1, $v.i.20.0);
  $n.i.19.2 := 0bv32;
  goto $for.cond.95.i;
$for.cond.95.i:
  assert {:block_sourceloc} {:sourceloc_num 106} true;
  assert {:sourceloc} {:sourceloc_num 107} true;
  v77 := $$Nmat[0bv32];
  v78 := BV32_SLT($n.i.19.2, v77);
  goto $truebb11, $falsebb11;
$for.body.97.i:
  assert {:block_sourceloc} {:sourceloc_num 108} true;
  assert {:sourceloc} {:sourceloc_num 109} true;
  v79 := $$delta[0bv32];
  assert {:sourceloc} {:sourceloc_num 110} true;
  v80 := $$delta[0bv32];
  assert {:sourceloc} {:sourceloc_num 111} true;
  v81 := $$L[$n.i.19.2];
  assert {:sourceloc} {:sourceloc_num 112} true;
  $$L[$n.i.19.2] := FP64_CONV32(FDIV64(FP32_CONV64(FMUL32(FSUB32(2147483648bv32, v76), v79)), FADD64(4607182418800017408bv64, FP32_CONV64(FMUL32(v80, v81)))));
  $n.i.19.2 := BV32_ADD($n.i.19.2, 1bv32);
  goto $for.cond.95.i;
$for.end.110.i:
  assert {:block_sourceloc} {:sourceloc_num 113} true;
  assert {:sourceloc} {:sourceloc_num 114} true;
  v82 := $$Nmat[0bv32];
  $n.i.19.3 := v82;
  goto $for.cond.111.i;
$for.cond.111.i:
  assert {:block_sourceloc} {:sourceloc_num 115} true;
  assert {:sourceloc} {:sourceloc_num 116} true;
  v83 := $$N[0bv32];
  v84 := BV32_SLT($n.i.19.3, v83);
  goto $truebb12, $falsebb12;
$for.body.113.i:
  assert {:block_sourceloc} {:sourceloc_num 117} true;
  assert {:sourceloc} {:sourceloc_num 118} true;
  v85 := $$L[$n.i.19.3];
  assert {:sourceloc} {:sourceloc_num 119} true;
  $$L[$n.i.19.3] := FMUL32($b.i.1, v85);
  $n.i.19.3 := BV32_ADD($n.i.19.3, 1bv32);
  goto $for.cond.111.i;
$_ZL11portfolio_bPfS_.exit:
  assert {:block_sourceloc} {:sourceloc_num 120} true;
  assert {:sourceloc} {:sourceloc_num 121} true;
  $$d_v[$path.0] := v76;
  assert {:sourceloc} {:sourceloc_num 122} true;
  v86 := $$Nmat[0bv32];
  $n.i.45.0 := BV32_SUB(v86, 1bv32);
  goto $for.cond.i.48;
$for.cond.i.48:
  assert {:block_sourceloc} {:sourceloc_num 123} true;
  v87 := BV32_SGE($n.i.45.0, 0bv32);
  goto $truebb13, $falsebb13;
$for.body.i.49:
  assert {:block_sourceloc} {:sourceloc_num 124} true;
  assert {:sourceloc} {:sourceloc_num 125} true;
  v88 := $$N[0bv32];
  $v1.i.0, $i.i.44.0 := 0bv32, BV32_SUB(v88, 1bv32);
  goto $for.cond.2.i.51;
$for.cond.2.i.51:
  assert {:block_sourceloc} {:sourceloc_num 126} true;
  v89 := BV32_SGT($i.i.44.0, $n.i.45.0);
  goto $truebb14, $falsebb14;
$for.body.4.i.69:
  assert {:block_sourceloc} {:sourceloc_num 127} true;
  assert {:sourceloc} {:sourceloc_num 128} true;
  v90 := $$lambda[BV32_SUB(BV32_SUB($i.i.44.0, $n.i.45.0), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 129} true;
  v91 := $$N[0bv32];
  assert {:sourceloc} {:sourceloc_num 130} true;
  v92 := $$L2[BV32_ADD($i.i.44.0, BV32_MUL(BV32_ADD($n.i.45.0, 1bv32), v91))];
  assert {:sourceloc} {:sourceloc_num 131} true;
  v93 := $$L[$i.i.44.0];
  v94 := FADD32($v1.i.0, FMUL32(FMUL32(v90, v92), v93));
  assert {:sourceloc} {:sourceloc_num 132} true;
  v95 := $$delta[0bv32];
  assert {:sourceloc} {:sourceloc_num 133} true;
  v96 := $$delta[0bv32];
  assert {:sourceloc} {:sourceloc_num 134} true;
  v97 := $$N[0bv32];
  assert {:sourceloc} {:sourceloc_num 135} true;
  v98 := $$L2[BV32_ADD($i.i.44.0, BV32_MUL($n.i.45.0, v97))];
  call {:sourceloc_num 136}   v99 := $__fdividef(v95, FP64_CONV32(FADD64(4607182418800017408bv64, FP32_CONV64(FMUL32(v96, v98)))));
  assert {:sourceloc} {:sourceloc_num 137} true;
  v100 := $$L[$i.i.44.0];
  assert {:sourceloc} {:sourceloc_num 138} true;
  v101 := $$N[0bv32];
  assert {:sourceloc} {:sourceloc_num 139} true;
  v102 := $$L2[BV32_ADD($i.i.44.0, BV32_MUL(BV32_ADD($n.i.45.0, 1bv32), v101))];
  assert {:sourceloc} {:sourceloc_num 140} true;
  v103 := $$N[0bv32];
  assert {:sourceloc} {:sourceloc_num 141} true;
  v104 := $$L2[BV32_ADD($i.i.44.0, BV32_MUL($n.i.45.0, v103))];
  call {:sourceloc_num 142}   v105 := $__fdividef(v102, v104);
  assert {:sourceloc} {:sourceloc_num 143} true;
  v106 := $$lambda[BV32_SUB(BV32_SUB($i.i.44.0, $n.i.45.0), 1bv32)];
  assert {:sourceloc} {:sourceloc_num 144} true;
  $$L[$i.i.44.0] := FADD32(FMUL32(v100, v105), FMUL32(FMUL32(FMUL32(v94, v106), v99), v99));
  $v1.i.0, $i.i.44.0 := v94, BV32_ADD($i.i.44.0, 4294967295bv32);
  goto $for.cond.2.i.51;
$for.end.i.71:
  assert {:block_sourceloc} {:sourceloc_num 145} true;
  $n.i.45.0 := BV32_ADD($n.i.45.0, 4294967295bv32);
  goto $for.cond.i.48;
$_ZL12path_calc_b2PfS_S_.exit:
  assert {:block_sourceloc} {:sourceloc_num 146} true;
  assert {:sourceloc} {:sourceloc_num 147} true;
  v107 := $$L[79bv32];
  assert {:sourceloc} {:sourceloc_num 148} true;
  $$d_Lb[$path.0] := v107;
  goto $for.inc.15;
$for.inc.15:
  assert {:block_sourceloc} {:sourceloc_num 149} true;
  $path.0 := BV32_ADD($path.0, BV32_MUL(group_size_x, num_groups_x));
  goto $for.cond;
$for.end.17:
  assert {:block_sourceloc} {:sourceloc_num 150} true;
  return;
$truebb:
  assume {:partition} v0;
  assert {:block_sourceloc} {:sourceloc_num 151} true;
  goto $for.body;
$falsebb:
  assume {:partition} !v0;
  assert {:block_sourceloc} {:sourceloc_num 152} true;
  goto $for.end.17;
$truebb0:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 153} true;
  goto $for.body.4;
$falsebb0:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 154} true;
  goto $for.end;
$truebb1:
  assume {:partition} v4;
  assert {:block_sourceloc} {:sourceloc_num 155} true;
  goto $for.body.i;
$falsebb1:
  assume {:partition} !v4;
  assert {:block_sourceloc} {:sourceloc_num 156} true;
  goto $for.end.i;
$truebb2:
  assume {:partition} v7;
  assert {:block_sourceloc} {:sourceloc_num 157} true;
  goto $for.body.4.i;
$falsebb2:
  assume {:partition} !v7;
  assert {:block_sourceloc} {:sourceloc_num 158} true;
  goto $_ZL12path_calc_b1PfS_S_.exit;
$truebb3:
  assume {:partition} v11;
  assert {:block_sourceloc} {:sourceloc_num 159} true;
  goto $for.body.10.i;
$falsebb3:
  assume {:partition} !v11;
  assert {:block_sourceloc} {:sourceloc_num 160} true;
  goto $for.end.44.i;
$truebb4:
  assume {:partition} v26;
  assert {:block_sourceloc} {:sourceloc_num 161} true;
  goto $for.body.i.30;
$falsebb4:
  assume {:partition} !v26;
  assert {:block_sourceloc} {:sourceloc_num 162} true;
  goto $for.end.i.32;
$truebb5:
  assume {:partition} v35;
  assert {:block_sourceloc} {:sourceloc_num 163} true;
  goto $for.body.10.i.35;
$falsebb5:
  assume {:partition} !v35;
  assert {:block_sourceloc} {:sourceloc_num 164} true;
  goto $for.end.15.i;
$truebb6:
  assume {:partition} v37;
  assert {:block_sourceloc} {:sourceloc_num 165} true;
  goto $for.body.18.i;
$falsebb6:
  assume {:partition} !v37;
  assert {:block_sourceloc} {:sourceloc_num 166} true;
  goto $for.end.40.i;
$truebb7:
  assume {:partition} v44;
  assert {:block_sourceloc} {:sourceloc_num 167} true;
  goto $if.then.i;
$falsebb7:
  assume {:partition} !v44;
  assert {:block_sourceloc} {:sourceloc_num 168} true;
  $v.i.20.1 := $v.i.20.0;
  goto $if.end.i;
$truebb8:
  assume {:partition} v50;
  assert {:block_sourceloc} {:sourceloc_num 169} true;
  goto $for.body.45.i;
$falsebb8:
  assume {:partition} !v50;
  assert {:block_sourceloc} {:sourceloc_num 170} true;
  goto $for.end.81.i;
$truebb9:
  assume {:partition} v62;
  assert {:block_sourceloc} {:sourceloc_num 171} true;
  goto $if.then.64.i;
$falsebb9:
  assume {:partition} !v62;
  assert {:block_sourceloc} {:sourceloc_num 172} true;
  goto $if.end.79.i;
$truebb10:
  assume {:partition} v73;
  assert {:block_sourceloc} {:sourceloc_num 173} true;
  goto $for.body.84.i;
$falsebb10:
  assume {:partition} !v73;
  assert {:block_sourceloc} {:sourceloc_num 174} true;
  goto $for.end.93.i;
$truebb11:
  assume {:partition} v78;
  assert {:block_sourceloc} {:sourceloc_num 175} true;
  goto $for.body.97.i;
$falsebb11:
  assume {:partition} !v78;
  assert {:block_sourceloc} {:sourceloc_num 176} true;
  goto $for.end.110.i;
$truebb12:
  assume {:partition} v84;
  assert {:block_sourceloc} {:sourceloc_num 177} true;
  goto $for.body.113.i;
$falsebb12:
  assume {:partition} !v84;
  assert {:block_sourceloc} {:sourceloc_num 178} true;
  goto $_ZL11portfolio_bPfS_.exit;
$truebb13:
  assume {:partition} v87;
  assert {:block_sourceloc} {:sourceloc_num 179} true;
  goto $for.body.i.49;
$falsebb13:
  assume {:partition} !v87;
  assert {:block_sourceloc} {:sourceloc_num 180} true;
  goto $_ZL12path_calc_b2PfS_S_.exit;
$truebb14:
  assume {:partition} v89;
  assert {:block_sourceloc} {:sourceloc_num 181} true;
  goto $for.body.4.i.69;
$falsebb14:
  assume {:partition} !v89;
  assert {:block_sourceloc} {:sourceloc_num 182} true;
  goto $for.end.i.71;
}
procedure {:source_name "__fdividef"} $__fdividef($0:bv32, $1:bv32) returns ($ret:bv32);
procedure {:source_name "__expf"} $__expf($0:bv32) returns ($ret:bv32);
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 32bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 2bv32 then 1bv1 else 0bv1) != 0bv1;
