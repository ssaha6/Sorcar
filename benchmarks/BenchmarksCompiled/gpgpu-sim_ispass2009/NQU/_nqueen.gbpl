type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP32(x : [bv32]bv32, y : bv32) returns (z : bv32, A : [bv32]bv32);
var {:source_name "total_masks"} {:global} $$total_masks : [bv32]bv32;
axiom {:array_info "$$total_masks"} {:global} {:elem_width 32} {:source_name "total_masks"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$total_masks : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$total_masks : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$total_masks : bool;

var {:source_name "total_l_masks"} {:global} $$total_l_masks : [bv32]bv32;
axiom {:array_info "$$total_l_masks"} {:global} {:elem_width 32} {:source_name "total_l_masks"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$total_l_masks : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$total_l_masks : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$total_l_masks : bool;

var {:source_name "total_r_masks"} {:global} $$total_r_masks : [bv32]bv32;
axiom {:array_info "$$total_r_masks"} {:global} {:elem_width 32} {:source_name "total_r_masks"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$total_r_masks : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$total_r_masks : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$total_r_masks : bool;

var {:source_name "results"} {:global} $$results : [bv32]bv32;
axiom {:array_info "$$results"} {:global} {:elem_width 32} {:source_name "results"} {:source_elem_width 32} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$results : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$results : bool;
var {:race_checking} {:global} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$results : bool;

var {:source_name "mask"} {:group_shared} $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE4mask : [bv32]bv32;
axiom {:array_info "$$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE4mask"} {:group_shared} {:elem_width 32} {:source_name "mask"} {:source_elem_width 32} {:source_dimensions "96,10"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,10"} _READ_HAS_OCCURRED_$$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE4mask : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,10"} _WRITE_HAS_OCCURRED_$$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE4mask : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,10"} _ATOMIC_HAS_OCCURRED_$$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE4mask : bool;

var {:source_name "l_mask"} {:group_shared} $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE6l_mask : [bv32]bv32;
axiom {:array_info "$$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE6l_mask"} {:group_shared} {:elem_width 32} {:source_name "l_mask"} {:source_elem_width 32} {:source_dimensions "96,10"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,10"} _READ_HAS_OCCURRED_$$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE6l_mask : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,10"} _WRITE_HAS_OCCURRED_$$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE6l_mask : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,10"} _ATOMIC_HAS_OCCURRED_$$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE6l_mask : bool;

var {:source_name "r_mask"} {:group_shared} $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE6r_mask : [bv32]bv32;
axiom {:array_info "$$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE6r_mask"} {:group_shared} {:elem_width 32} {:source_name "r_mask"} {:source_elem_width 32} {:source_dimensions "96,10"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,10"} _READ_HAS_OCCURRED_$$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE6r_mask : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,10"} _WRITE_HAS_OCCURRED_$$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE6r_mask : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,10"} _ATOMIC_HAS_OCCURRED_$$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE6r_mask : bool;

var {:source_name "m"} {:group_shared} $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE1m : [bv32]bv32;
axiom {:array_info "$$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE1m"} {:group_shared} {:elem_width 32} {:source_name "m"} {:source_elem_width 32} {:source_dimensions "96,10"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,10"} _READ_HAS_OCCURRED_$$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE1m : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,10"} _WRITE_HAS_OCCURRED_$$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE1m : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*,10"} _ATOMIC_HAS_OCCURRED_$$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE1m : bool;

var {:source_name "sum"} {:group_shared} $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum : [bv32]bv32;
axiom {:array_info "$$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum"} {:group_shared} {:elem_width 32} {:source_name "sum"} {:source_elem_width 32} {:source_dimensions "96"} true;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum : bool;
var {:race_checking} {:group_shared} {:elem_width 32} {:source_elem_width 32} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum : bool;

const _WATCHED_OFFSET : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvand"} BV32_AND(bv32, bv32) : bv32;
function {:bvbuiltin "bvlshr"} BV32_LSHR(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvor"} BV32_OR(bv32, bv32) : bv32;
function {:bvbuiltin "bvsge"} BV32_SGE(bv32, bv32) : bool;
function {:bvbuiltin "bvshl"} BV32_SHL(bv32, bv32) : bv32;
function {:bvbuiltin "bvslt"} BV32_SLT(bv32, bv32) : bool;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "bvxor"} BV32_XOR(bv32, bv32) : bv32;
procedure {:source_name "solve_nqueen_cuda_kernel"} {:kernel} $_Z24solve_nqueen_cuda_kerneliiPjS_S_S_i($n:bv32, $mark:bv32, $total_conditions:bv32)
{
  var $total.0:bv32;
  var $i.0:bv32;
  var $total.3:bv32;
  var $i.3:bv32;
  var $total.1:bv32;
  var $i.1:bv32;
  var $total.2:bv32;
  var $i.2:bv32;
  var v6:bv32;
  var v0:bv32;
  var v1:bv32;
  var v2:bool;
  var v3:bv32;
  var v5:bv32;
  var v4:bv32;
  var v12:bv32;
  var v15:bv32;
  var v13:bv32;
  var v18:bv32;
  var v23:bv32;
  var v19:bv32;
  var v20:bv32;
  var v21:bv32;
  var v22:bv32;
  var v7:bv32;
  var v10:bv32;
  var v8:bv32;
  var v11:bool;
  var v9:bool;
  var v14:bv32;
  var v17:bool;
  var v16:bool;
  var v25:bool;
  var v24:bool;
  var v31:bool;
  var v34:bool;
  var v28:bool;
  var v45:bv32;
  var v38:bv32;
  var v47:bv32;
  var v44:bv32;
  var v42:bv32;
  var v39:bv32;
  var v41:bv32;
  var v29:bv32;
  var v27:bv32;
  var v26:bv32;
  var v30:bv32;
  var v33:bv32;
  var v35:bv32;
  var v36:bv32;
  var v32:bv32;
  var v37:bool;
  var v40:bool;
  var v43:bool;
  var v46:bool;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 0} true;
  v0 := BV32_ADD(BV32_MUL(group_id_x, group_size_x), local_id_x);
  v1 := BV32_SUB(BV32_SHL(1bv32, $n), 1bv32);
  v2 := BV32_SLT(v0, $total_conditions);
  goto $truebb, $falsebb;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 1} true;
  assert {:sourceloc} {:sourceloc_num 2} true;
  v3 := $$total_masks[v0];
  assert {:sourceloc} {:sourceloc_num 3} true;
  $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE4mask[BV32_MUL(local_id_x, 10bv32)] := v3;
  assert {:sourceloc} {:sourceloc_num 4} true;
  v4 := $$total_l_masks[v0];
  assert {:sourceloc} {:sourceloc_num 5} true;
  $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE6l_mask[BV32_MUL(local_id_x, 10bv32)] := v4;
  assert {:sourceloc} {:sourceloc_num 6} true;
  v5 := $$total_r_masks[v0];
  assert {:sourceloc} {:sourceloc_num 7} true;
  $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE6r_mask[BV32_MUL(local_id_x, 10bv32)] := v5;
  assert {:sourceloc} {:sourceloc_num 8} true;
  v6 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE4mask[BV32_MUL(local_id_x, 10bv32)];
  assert {:sourceloc} {:sourceloc_num 9} true;
  v7 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE6l_mask[BV32_MUL(local_id_x, 10bv32)];
  assert {:sourceloc} {:sourceloc_num 10} true;
  v8 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE6r_mask[BV32_MUL(local_id_x, 10bv32)];
  assert {:sourceloc} {:sourceloc_num 11} true;
  $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE1m[BV32_MUL(local_id_x, 10bv32)] := BV32_OR(BV32_OR(v6, v7), v8);
  $total.0, $i.0 := 0bv32, 0bv32;
  goto $while.cond;
$while.cond:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  v9 := BV32_SGE($i.0, 0bv32);
  goto $truebb0, $falsebb0;
$while.body:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  assert {:sourceloc} {:sourceloc_num 14} true;
  v10 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE1m[BV32_ADD(BV32_MUL(local_id_x, 10bv32), $i.0)];
  v11 := BV32_AND(v10, v1) == v1;
  goto $truebb1, $falsebb1;
$if.then.22:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  $total.3, $i.3 := $total.0, BV32_ADD($i.0, 4294967295bv32);
  goto $if.end.77;
$if.else:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  assert {:sourceloc} {:sourceloc_num 17} true;
  v12 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE1m[BV32_ADD(BV32_MUL(local_id_x, 10bv32), $i.0)];
  assert {:sourceloc} {:sourceloc_num 18} true;
  v13 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE1m[BV32_ADD(BV32_MUL(local_id_x, 10bv32), $i.0)];
  v14 := BV32_AND(BV32_ADD(v12, 1bv32), BV32_XOR(v13, 4294967295bv32));
  assert {:sourceloc} {:sourceloc_num 19} true;
  v15 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE1m[BV32_ADD(BV32_MUL(local_id_x, 10bv32), $i.0)];
  assert {:sourceloc} {:sourceloc_num 20} true;
  $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE1m[BV32_ADD(BV32_MUL(local_id_x, 10bv32), $i.0)] := BV32_OR(v15, v14);
  v16 := BV32_AND(v14, v1) != 0bv32;
  goto $truebb2, $falsebb2;
$if.then.34:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  v17 := BV32_ADD($i.0, 1bv32) == $mark;
  goto $truebb3, $falsebb3;
$if.then.37:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  $total.1, $i.1 := BV32_ADD($total.0, 1bv32), BV32_ADD($i.0, 4294967295bv32);
  goto $if.end;
$if.else.39:
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  assert {:sourceloc} {:sourceloc_num 24} true;
  v18 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE4mask[BV32_ADD(BV32_MUL(local_id_x, 10bv32), $i.0)];
  assert {:sourceloc} {:sourceloc_num 25} true;
  $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE4mask[BV32_ADD(BV32_MUL(local_id_x, 10bv32), BV32_ADD($i.0, 1bv32))] := BV32_OR(v18, v14);
  assert {:sourceloc} {:sourceloc_num 26} true;
  v19 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE6l_mask[BV32_ADD(BV32_MUL(local_id_x, 10bv32), $i.0)];
  assert {:sourceloc} {:sourceloc_num 27} true;
  $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE6l_mask[BV32_ADD(BV32_MUL(local_id_x, 10bv32), BV32_ADD($i.0, 1bv32))] := BV32_SHL(BV32_OR(v19, v14), 1bv32);
  assert {:sourceloc} {:sourceloc_num 28} true;
  v20 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE6r_mask[BV32_ADD(BV32_MUL(local_id_x, 10bv32), $i.0)];
  assert {:sourceloc} {:sourceloc_num 29} true;
  $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE6r_mask[BV32_ADD(BV32_MUL(local_id_x, 10bv32), BV32_ADD($i.0, 1bv32))] := BV32_LSHR(BV32_OR(v20, v14), 1bv32);
  assert {:sourceloc} {:sourceloc_num 30} true;
  v21 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE4mask[BV32_ADD(BV32_MUL(local_id_x, 10bv32), BV32_ADD($i.0, 1bv32))];
  assert {:sourceloc} {:sourceloc_num 31} true;
  v22 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE6l_mask[BV32_ADD(BV32_MUL(local_id_x, 10bv32), BV32_ADD($i.0, 1bv32))];
  assert {:sourceloc} {:sourceloc_num 32} true;
  v23 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE6r_mask[BV32_ADD(BV32_MUL(local_id_x, 10bv32), BV32_ADD($i.0, 1bv32))];
  assert {:sourceloc} {:sourceloc_num 33} true;
  $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE1m[BV32_ADD(BV32_MUL(local_id_x, 10bv32), BV32_ADD($i.0, 1bv32))] := BV32_OR(BV32_OR(v21, v22), v23);
  $total.1, $i.1 := $total.0, BV32_ADD($i.0, 1bv32);
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  $total.2, $i.2 := $total.1, $i.1;
  goto $if.end.76;
$if.else.74:
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  $total.2, $i.2 := $total.0, BV32_ADD($i.0, 4294967295bv32);
  goto $if.end.76;
$if.end.76:
  assert {:block_sourceloc} true;
  $total.3, $i.3 := $total.2, $i.2;
  goto $if.end.77;
$if.end.77:
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  $total.0, $i.0 := $total.3, $i.3;
  goto $while.cond;
$while.end:
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  assert {:sourceloc} {:sourceloc_num 38} true;
  $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum[local_id_x] := $total.0;
  goto $if.end.81;
$if.else.79:
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  assert {:sourceloc} {:sourceloc_num 40} true;
  $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum[local_id_x] := 0bv32;
  goto $if.end.81;
$if.end.81:
  assert {:block_sourceloc} {:sourceloc_num 41} true;
  call {:sourceloc_num 42} $bugle_barrier(1bv1, 1bv1);
  v24 := BV32_SLT(local_id_x, 64bv32);
  goto $truebb4, $falsebb4;
$land.lhs.true:
  assert {:block_sourceloc} {:sourceloc_num 43} true;
  v25 := BV32_SLT(BV32_ADD(local_id_x, 64bv32), 96bv32);
  goto $truebb5, $falsebb5;
$if.then.85:
  assert {:block_sourceloc} {:sourceloc_num 44} true;
  assert {:sourceloc} {:sourceloc_num 45} true;
  v26 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum[BV32_ADD(local_id_x, 64bv32)];
  assert {:sourceloc} {:sourceloc_num 46} true;
  v27 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum[local_id_x];
  assert {:sourceloc} {:sourceloc_num 47} true;
  $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum[local_id_x] := BV32_ADD(v27, v26);
  goto $if.end.90;
$if.end.90:
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  call {:sourceloc_num 49} $bugle_barrier(1bv1, 1bv1);
  v28 := BV32_SLT(local_id_x, 32bv32);
  goto $truebb6, $falsebb6;
$if.then.92:
  assert {:block_sourceloc} {:sourceloc_num 50} true;
  assert {:sourceloc} {:sourceloc_num 51} true;
  v29 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum[BV32_ADD(local_id_x, 32bv32)];
  assert {:sourceloc} {:sourceloc_num 52} true;
  v30 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum[local_id_x];
  assert {:sourceloc} {:sourceloc_num 53} true;
  $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum[local_id_x] := BV32_ADD(v30, v29);
  goto $if.end.97;
$if.end.97:
  assert {:block_sourceloc} {:sourceloc_num 54} true;
  call {:sourceloc_num 55} $bugle_barrier(1bv1, 1bv1);
  v31 := BV32_SLT(local_id_x, 16bv32);
  goto $truebb7, $falsebb7;
$if.then.99:
  assert {:block_sourceloc} {:sourceloc_num 56} true;
  assert {:sourceloc} {:sourceloc_num 57} true;
  v32 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum[BV32_ADD(local_id_x, 16bv32)];
  assert {:sourceloc} {:sourceloc_num 58} true;
  v33 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum[local_id_x];
  assert {:sourceloc} {:sourceloc_num 59} true;
  $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum[local_id_x] := BV32_ADD(v33, v32);
  goto $if.end.104;
$if.end.104:
  assert {:block_sourceloc} {:sourceloc_num 60} true;
  call {:sourceloc_num 61} $bugle_barrier(1bv1, 1bv1);
  v34 := BV32_SLT(local_id_x, 8bv32);
  goto $truebb8, $falsebb8;
$if.then.106:
  assert {:block_sourceloc} {:sourceloc_num 62} true;
  assert {:sourceloc} {:sourceloc_num 63} true;
  v35 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum[BV32_ADD(local_id_x, 8bv32)];
  assert {:sourceloc} {:sourceloc_num 64} true;
  v36 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum[local_id_x];
  assert {:sourceloc} {:sourceloc_num 65} true;
  $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum[local_id_x] := BV32_ADD(v36, v35);
  goto $if.end.111;
$if.end.111:
  assert {:block_sourceloc} {:sourceloc_num 66} true;
  call {:sourceloc_num 67} $bugle_barrier(1bv1, 1bv1);
  v37 := BV32_SLT(local_id_x, 4bv32);
  goto $truebb9, $falsebb9;
$if.then.113:
  assert {:block_sourceloc} {:sourceloc_num 68} true;
  assert {:sourceloc} {:sourceloc_num 69} true;
  v38 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum[BV32_ADD(local_id_x, 4bv32)];
  assert {:sourceloc} {:sourceloc_num 70} true;
  v39 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum[local_id_x];
  assert {:sourceloc} {:sourceloc_num 71} true;
  $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum[local_id_x] := BV32_ADD(v39, v38);
  goto $if.end.118;
$if.end.118:
  assert {:block_sourceloc} {:sourceloc_num 72} true;
  call {:sourceloc_num 73} $bugle_barrier(1bv1, 1bv1);
  v40 := BV32_SLT(local_id_x, 2bv32);
  goto $truebb10, $falsebb10;
$if.then.120:
  assert {:block_sourceloc} {:sourceloc_num 74} true;
  assert {:sourceloc} {:sourceloc_num 75} true;
  v41 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum[BV32_ADD(local_id_x, 2bv32)];
  assert {:sourceloc} {:sourceloc_num 76} true;
  v42 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum[local_id_x];
  assert {:sourceloc} {:sourceloc_num 77} true;
  $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum[local_id_x] := BV32_ADD(v42, v41);
  goto $if.end.125;
$if.end.125:
  assert {:block_sourceloc} {:sourceloc_num 78} true;
  call {:sourceloc_num 79} $bugle_barrier(1bv1, 1bv1);
  v43 := BV32_SLT(local_id_x, 1bv32);
  goto $truebb11, $falsebb11;
$if.then.127:
  assert {:block_sourceloc} {:sourceloc_num 80} true;
  assert {:sourceloc} {:sourceloc_num 81} true;
  v44 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum[BV32_ADD(local_id_x, 1bv32)];
  assert {:sourceloc} {:sourceloc_num 82} true;
  v45 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum[local_id_x];
  assert {:sourceloc} {:sourceloc_num 83} true;
  $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum[local_id_x] := BV32_ADD(v45, v44);
  goto $if.end.132;
$if.end.132:
  assert {:block_sourceloc} {:sourceloc_num 84} true;
  call {:sourceloc_num 85} $bugle_barrier(1bv1, 1bv1);
  v46 := local_id_x == 0bv32;
  goto $truebb12, $falsebb12;
$if.then.134:
  assert {:block_sourceloc} {:sourceloc_num 86} true;
  assert {:sourceloc} {:sourceloc_num 87} true;
  v47 := $$_ZZ24solve_nqueen_cuda_kerneliiPjS_S_S_iE3sum[0bv32];
  assert {:sourceloc} {:sourceloc_num 88} true;
  $$results[group_id_x] := v47;
  goto $if.end.136;
$if.end.136:
  assert {:block_sourceloc} {:sourceloc_num 89} true;
  return;
$truebb:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 90} true;
  goto $if.then;
$falsebb:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 91} true;
  goto $if.else.79;
$truebb0:
  assume {:partition} v9;
  assert {:block_sourceloc} {:sourceloc_num 92} true;
  goto $while.body;
$falsebb0:
  assume {:partition} !v9;
  assert {:block_sourceloc} {:sourceloc_num 93} true;
  goto $while.end;
$truebb1:
  assume {:partition} v11;
  assert {:block_sourceloc} {:sourceloc_num 94} true;
  goto $if.then.22;
$falsebb1:
  assume {:partition} !v11;
  assert {:block_sourceloc} {:sourceloc_num 95} true;
  goto $if.else;
$truebb2:
  assume {:partition} v16;
  assert {:block_sourceloc} {:sourceloc_num 96} true;
  goto $if.then.34;
$falsebb2:
  assume {:partition} !v16;
  assert {:block_sourceloc} {:sourceloc_num 97} true;
  goto $if.else.74;
$truebb3:
  assume {:partition} v17;
  assert {:block_sourceloc} {:sourceloc_num 98} true;
  goto $if.then.37;
$falsebb3:
  assume {:partition} !v17;
  assert {:block_sourceloc} {:sourceloc_num 99} true;
  goto $if.else.39;
$truebb4:
  assume {:partition} v24;
  assert {:block_sourceloc} {:sourceloc_num 100} true;
  goto $land.lhs.true;
$falsebb4:
  assume {:partition} !v24;
  assert {:block_sourceloc} {:sourceloc_num 101} true;
  goto $if.end.90;
$truebb5:
  assume {:partition} v25;
  assert {:block_sourceloc} {:sourceloc_num 102} true;
  goto $if.then.85;
$falsebb5:
  assume {:partition} !v25;
  assert {:block_sourceloc} {:sourceloc_num 103} true;
  goto $if.end.90;
$truebb6:
  assume {:partition} v28;
  assert {:block_sourceloc} {:sourceloc_num 104} true;
  goto $if.then.92;
$falsebb6:
  assume {:partition} !v28;
  assert {:block_sourceloc} {:sourceloc_num 105} true;
  goto $if.end.97;
$truebb7:
  assume {:partition} v31;
  assert {:block_sourceloc} {:sourceloc_num 106} true;
  goto $if.then.99;
$falsebb7:
  assume {:partition} !v31;
  assert {:block_sourceloc} {:sourceloc_num 107} true;
  goto $if.end.104;
$truebb8:
  assume {:partition} v34;
  assert {:block_sourceloc} {:sourceloc_num 108} true;
  goto $if.then.106;
$falsebb8:
  assume {:partition} !v34;
  assert {:block_sourceloc} {:sourceloc_num 109} true;
  goto $if.end.111;
$truebb9:
  assume {:partition} v37;
  assert {:block_sourceloc} {:sourceloc_num 110} true;
  goto $if.then.113;
$falsebb9:
  assume {:partition} !v37;
  assert {:block_sourceloc} {:sourceloc_num 111} true;
  goto $if.end.118;
$truebb10:
  assume {:partition} v40;
  assert {:block_sourceloc} {:sourceloc_num 112} true;
  goto $if.then.120;
$falsebb10:
  assume {:partition} !v40;
  assert {:block_sourceloc} {:sourceloc_num 113} true;
  goto $if.end.125;
$truebb11:
  assume {:partition} v43;
  assert {:block_sourceloc} {:sourceloc_num 114} true;
  goto $if.then.127;
$falsebb11:
  assume {:partition} !v43;
  assert {:block_sourceloc} {:sourceloc_num 115} true;
  goto $if.end.132;
$truebb12:
  assume {:partition} v46;
  assert {:block_sourceloc} {:sourceloc_num 116} true;
  goto $if.then.134;
$falsebb12:
  assume {:partition} !v46;
  assert {:block_sourceloc} {:sourceloc_num 117} true;
  goto $if.end.136;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 96bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 96bv32 then 1bv1 else 0bv1) != 0bv1;
