type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP64(x : [bv32]bv64, y : bv32) returns (z : bv64, A : [bv32]bv64);
var {:source_name "corr"} {:global} $$corr : [bv32]bv64;
axiom {:array_info "$$corr"} {:global} {:elem_width 64} {:source_name "corr"} {:source_elem_width 64} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$corr : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$corr : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$corr : bool;

var {:source_name "shared_corr_0"} {:group_shared} $$kernel7.shared_corr_0 : [bv32]bv64;
axiom {:array_info "$$kernel7.shared_corr_0"} {:group_shared} {:elem_width 64} {:source_name "shared_corr_0"} {:source_elem_width 64} {:source_dimensions "32,32"} true;
var {:race_checking} {:group_shared} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*,32"} _READ_HAS_OCCURRED_$$kernel7.shared_corr_0 : bool;
var {:race_checking} {:group_shared} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*,32"} _WRITE_HAS_OCCURRED_$$kernel7.shared_corr_0 : bool;
var {:race_checking} {:group_shared} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*,32"} _ATOMIC_HAS_OCCURRED_$$kernel7.shared_corr_0 : bool;

const _WATCHED_OFFSET : bv32;
const {:global_offset_x} global_offset_x : bv32;
const {:global_offset_y} global_offset_y : bv32;
const {:global_offset_z} global_offset_z : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_id_y} group_id_y : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:local_id_y} local_id_y : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvadd"} BV64_ADD(bv64, bv64) : bv64;
function {:bvbuiltin "bvand"} BV32_AND(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV64_MUL(bv64, bv64) : bv64;
function {:bvbuiltin "bvor"} BV32_OR(bv32, bv32) : bv32;
function {:bvbuiltin "bvsdiv"} BV64_SDIV(bv64, bv64) : bv64;
function {:bvbuiltin "bvsge"} BV32_SGE(bv32, bv32) : bool;
function {:bvbuiltin "bvsge"} BV64_SGE(bv64, bv64) : bool;
function {:bvbuiltin "bvsgt"} BV64_SGT(bv64, bv64) : bool;
function {:bvbuiltin "bvsle"} BV32_SLE(bv32, bv32) : bool;
function {:bvbuiltin "bvsle"} BV64_SLE(bv64, bv64) : bool;
function {:bvbuiltin "bvslt"} BV64_SLT(bv64, bv64) : bool;
function {:bvbuiltin "bvsrem"} BV64_SREM(bv64, bv64) : bv64;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "bvsub"} BV64_SUB(bv64, bv64) : bv64;
function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvuge"} BV32_UGE(bv32, bv32) : bool;
function {:bvbuiltin "bvurem"} BV32_UREM(bv32, bv32) : bv32;
function {:bvbuiltin "sign_extend 32"} BV32_SEXT64(bv32) : bv64;
function {:bvbuiltin "zero_extend 31"} BV1_ZEXT32(bv1) : bv32;
function {:bvbuiltin "zero_extend 32"} BV32_ZEXT64(bv32) : bv64;
procedure {:source_name "kernel7"} {:kernel} $kernel7($m:bv32, $n:bv32)
requires {:sourceloc_num 0} (if $m == 512bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 1} (if $n == 1024bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 2} (if BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_SGE($m, 2bv32) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_SLE($m, 2147483647bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_SLE($n, 2147483647bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV32_SEXT64($n), 18446744071562067968bv64) then 1bv1 else 0bv1))) != 0bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:procedure_wide_invariant} {:do_not_predicate} {:sourceloc_num 3} (if (_WRITE_HAS_OCCURRED_$$corr ==> BV32_OR(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV64_SLE(BV32_ZEXT64(group_id_x), 254bv64) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_UGE($m, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), (if BV32_SGE($m, 2bv32) then $m else 1bv32)), (if BV32_SGE($m, 2bv32) then $m else 1bv32)), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), (if BV32_SGE($m, 2bv32) then $m else 1bv32)), (if BV32_SGE($m, 2bv32) then $m else 1bv32)), BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), (if BV32_SGE($m, 2bv32) then $m else 1bv32)), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), (if BV32_SGE($m, 2bv32) then $m else 1bv32)), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SLE(BV64_SREM(BV64_ADD(BV64_ADD(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV64_MUL(7680bv64, BV32_ZEXT64(local_id_y))), BV32_ZEXT64(BV32_MUL(511bv32, BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), (if BV32_SGE($m, 2bv32) then $m else 1bv32))))), 31bv64), 8192bv64), 31bv64) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_y)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), (if BV32_SGE($m, 2bv32) then $m else 1bv32)), (if BV32_SGE($m, 2bv32) then $m else 1bv32)))), 8192bv64) == 0bv64 then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV32_ZEXT64(local_id_y), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), (if BV32_SGE($m, 2bv32) then $m else 1bv32)))), 16bv64) == 0bv64 then 1bv1 else 0bv1))), BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_ZEXT64(group_id_x) == 255bv64 then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_UGE($m, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), (if BV32_SGE($m, 2bv32) then $m else 1bv32)), (if BV32_SGE($m, 2bv32) then $m else 1bv32)), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), (if BV32_SGE($m, 2bv32) then $m else 1bv32)), (if BV32_SGE($m, 2bv32) then $m else 1bv32)), BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), (if BV32_SGE($m, 2bv32) then $m else 1bv32)), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), (if BV32_SGE($m, 2bv32) then $m else 1bv32)), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SLE(BV64_SREM(BV64_ADD(BV64_ADD(BV64_MUL(7680bv64, BV32_ZEXT64(local_id_y)), BV32_ZEXT64(BV32_MUL(511bv32, BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), (if BV32_SGE($m, 2bv32) then $m else 1bv32))))), 8191bv64), 8192bv64), 31bv64) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_y)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), (if BV32_SGE($m, 2bv32) then $m else 1bv32)), (if BV32_SGE($m, 2bv32) then $m else 1bv32)))), 8192bv64) == 0bv64 then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV32_ZEXT64(local_id_y), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), (if BV32_SGE($m, 2bv32) then $m else 1bv32)))), 16bv64) == 0bv64 then 1bv1 else 0bv1)))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
requires {:procedure_wide_invariant} {:do_not_predicate} {:sourceloc_num 4} (if (_READ_HAS_OCCURRED_$$corr ==> BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 0bv64) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV64_SLE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 8191bv64) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), (if BV32_SGE($m, 2bv32) then $m else 1bv32)), (if BV32_SGE($m, 2bv32) then $m else 1bv32)), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), (if BV32_SGE($m, 2bv32) then $m else 1bv32)), BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), (if BV32_SGE($m, 2bv32) then $m else 1bv32)), (if BV32_SGE($m, 2bv32) then $m else 1bv32)), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($m, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), (if BV32_SGE($m, 2bv32) then $m else 1bv32)), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV32_ZEXT64(BV32_UREM(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), (if BV32_SGE($m, 2bv32) then $m else 1bv32)), 8192bv32)), BV64_MUL(32bv64, BV32_ZEXT64(group_id_y))) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_y)), 31bv64), BV32_ZEXT64(BV32_UREM(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), (if BV32_SGE($m, 2bv32) then $m else 1bv32)), 8192bv32))) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), (if BV32_SGE($m, 2bv32) then $m else 1bv32)), (if BV32_SGE($m, 2bv32) then $m else 1bv32)))), 8192bv64) == 0bv64 then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV32_ZEXT64(local_id_y), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), (if BV32_SGE($m, 2bv32) then $m else 1bv32)))), 16bv64) == 0bv64 then 1bv1 else 0bv1))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
{
  var $c0.0:bv64;
  var $c1.0:bv64;
  var $cond:bv64;
  var $cond81:bv64;
  var $cond76:bv64;
  var $c3.0:bv64;
  var $cond94:bv64;
  var $cond104:bv32;
  var $c3119.0:bv64;
  var $cond132:bv64;
  var $cond146:bv32;
  var v2:bv32;
  var v1:bv64;
  var v3:bv64;
  var v4:bv64;
  var v0:bv64;
  var v13:bv64;
  var v5:bool;
  var v6:bool;
  var v7:bool;
  var v9:bool;
  var v8:bool;
  var v10:bool;
  var v11:bool;
  var v12:bool;
  var v16:bool;
  var v15:bool;
  var v14:bool;
  var v17:bv64;
  var v18:bool;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  v0 := BV32_ZEXT64(group_id_x);
  v1 := BV32_ZEXT64(group_id_y);
  v2 := local_id_x;
  v3 := BV32_ZEXT64(v2);
  v4 := BV32_ZEXT64(local_id_y);
  $c0.0 := BV64_MUL(32bv64, v0);
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  v5 := BV64_SLT($c0.0, BV32_SEXT64(BV32_SUB($m, 1bv32)));
  goto $truebb, $falsebb;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  $c1.0 := BV64_ADD(BV64_MUL(32bv64, v1), BV64_MUL(8192bv64, BV64_SDIV(BV64_ADD(BV64_ADD(BV64_MUL(18446744073709551584bv64, v1), $c0.0), 8161bv64), 8192bv64)));
  goto $for.cond.27;
$for.cond.27:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  v6 := BV64_SLT($c1.0, BV32_SEXT64($m));
  goto $truebb0, $falsebb0;
$for.body.31:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  call {:sourceloc_num 10} $bugle_barrier(1bv1, 1bv1);
  v7 := BV64_SLT(BV64_SUB(BV64_ADD(BV64_SUB(v3, v4), $c0.0), $c1.0), 0bv64);
  goto $truebb1, $falsebb1;
$cond.true:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  $cond := BV64_SUB(0bv64, BV64_SDIV(BV64_SUB(BV64_ADD(BV64_SUB(0bv64, BV64_SUB(BV64_ADD(BV64_SUB(v3, v4), $c0.0), $c1.0)), 16bv64), 1bv64), 16bv64));
  goto $cond.end;
$cond.false:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  $cond := BV64_SDIV(BV64_SUB(BV64_ADD(BV64_SUB(v3, v4), $c0.0), $c1.0), 16bv64);
  goto $cond.end;
$cond.end:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  v8 := BV64_SGT(v4, BV64_ADD(BV64_ADD(v4, BV64_MUL(16bv64, $cond)), 16bv64));
  goto $truebb2, $falsebb2;
$cond.true.54:
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  $cond81 := v4;
  goto $cond.end.80;
$cond.false.55:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  v9 := BV64_SLT(BV64_SUB(BV64_ADD(BV64_SUB(v3, v4), $c0.0), $c1.0), 0bv64);
  goto $truebb3, $falsebb3;
$cond.true.61:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  $cond76 := BV64_SUB(0bv64, BV64_SDIV(BV64_SUB(BV64_ADD(BV64_SUB(0bv64, BV64_SUB(BV64_ADD(BV64_SUB(v3, v4), $c0.0), $c1.0)), 16bv64), 1bv64), 16bv64));
  goto $cond.end.75;
$cond.false.70:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  $cond76 := BV64_SDIV(BV64_SUB(BV64_ADD(BV64_SUB(v3, v4), $c0.0), $c1.0), 16bv64);
  goto $cond.end.75;
$cond.end.75:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  $cond81 := BV64_ADD(BV64_ADD(v4, BV64_MUL(16bv64, $cond76)), 16bv64);
  goto $cond.end.80;
$cond.end.80:
  assert {:block_sourceloc} {:sourceloc_num 19} true;
  $c3.0 := $cond81;
  goto $for.cond.82;
$for.cond.82:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  v10 := BV64_SLT(31bv64, BV64_SUB(BV64_SUB(BV32_SEXT64($m), $c1.0), 1bv64));
  goto $truebb4, $falsebb4;
$cond.true.88:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  $cond94 := 31bv64;
  goto $cond.end.93;
$cond.false.89:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  $cond94 := BV64_SUB(BV64_SUB(BV32_SEXT64($m), $c1.0), 1bv64);
  goto $cond.end.93;
$cond.end.93:
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  v11 := BV64_SLE($c3.0, $cond94);
  goto $truebb5, $falsebb5;
$for.body.97:
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  v12 := BV32_SGE($m, 2bv32);
  goto $truebb6, $falsebb6;
$cond.true.101:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  $cond104 := $m;
  goto $cond.end.103;
$cond.false.102:
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  $cond104 := 1bv32;
  goto $cond.end.103;
$cond.end.103:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  assert {:sourceloc} {:sourceloc_num 28} true;
  v13 := $$corr[BV64_ADD(BV64_MUL(BV64_ADD(v3, $c0.0), BV32_SEXT64($cond104)), BV64_ADD($c1.0, $c3.0))[32:0]];
  assert {:sourceloc} {:sourceloc_num 29} true;
  $$kernel7.shared_corr_0[BV32_ADD(BV32_MUL($c3.0[32:0], 32bv32), v2)] := v13;
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  $c3.0 := BV64_ADD($c3.0, 16bv64);
  goto $for.cond.82;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  call {:sourceloc_num 32} $bugle_barrier(1bv1, 1bv1);
  v14 := BV64_SGE(BV32_SEXT64($m), BV64_ADD(BV64_ADD(v3, $c1.0), 1bv64));
  goto $truebb7, $falsebb7;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  $c3119.0 := v4;
  goto $for.cond.120;
$for.cond.120:
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  v15 := BV64_SLT(31bv64, BV64_SUB(BV64_ADD(BV64_SUB(v3, $c0.0), $c1.0), 1bv64));
  goto $truebb8, $falsebb8;
$cond.true.126:
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  $cond132 := 31bv64;
  goto $cond.end.131;
$cond.false.127:
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  $cond132 := BV64_SUB(BV64_ADD(BV64_SUB(v3, $c0.0), $c1.0), 1bv64);
  goto $cond.end.131;
$cond.end.131:
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  v16 := BV64_SLE($c3119.0, $cond132);
  goto $truebb9, $falsebb9;
$for.body.135:
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  assert {:sourceloc} {:sourceloc_num 39} true;
  v17 := $$kernel7.shared_corr_0[BV32_ADD(BV32_MUL(v2, 32bv32), $c3119.0[32:0])];
  v18 := BV32_SGE($m, 2bv32);
  goto $truebb10, $falsebb10;
$cond.true.143:
  assert {:block_sourceloc} {:sourceloc_num 40} true;
  $cond146 := $m;
  goto $cond.end.145;
$cond.false.144:
  assert {:block_sourceloc} {:sourceloc_num 41} true;
  $cond146 := 1bv32;
  goto $cond.end.145;
$cond.end.145:
  assert {:block_sourceloc} {:sourceloc_num 42} true;
  assert {:sourceloc} {:sourceloc_num 43} true;
  $$corr[BV64_ADD(BV64_MUL(BV64_ADD(v3, $c1.0), BV32_SEXT64($cond146)), BV64_ADD($c0.0, $c3119.0))[32:0]] := v17;
  goto $for.inc.153;
$for.inc.153:
  assert {:block_sourceloc} {:sourceloc_num 44} true;
  $c3119.0 := BV64_ADD($c3119.0, 16bv64);
  goto $for.cond.120;
$for.end.155:
  assert {:block_sourceloc} {:sourceloc_num 45} true;
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  goto $for.inc.156;
$for.inc.156:
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  $c1.0 := BV64_ADD($c1.0, 8192bv64);
  goto $for.cond.27;
$for.end.158:
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  goto $for.inc.159;
$for.inc.159:
  assert {:block_sourceloc} {:sourceloc_num 49} true;
  $c0.0 := BV64_ADD($c0.0, 8192bv64);
  goto $for.cond;
$for.end.161:
  assert {:block_sourceloc} {:sourceloc_num 50} true;
  return;
$truebb:
  assume {:partition} v5;
  assert {:block_sourceloc} {:sourceloc_num 51} true;
  goto $for.body;
$falsebb:
  assume {:partition} !v5;
  assert {:block_sourceloc} {:sourceloc_num 52} true;
  goto $for.end.161;
$truebb0:
  assume {:partition} v6;
  assert {:block_sourceloc} {:sourceloc_num 53} true;
  goto $for.body.31;
$falsebb0:
  assume {:partition} !v6;
  assert {:block_sourceloc} {:sourceloc_num 54} true;
  goto $for.end.158;
$truebb1:
  assume {:partition} v7;
  assert {:block_sourceloc} {:sourceloc_num 55} true;
  goto $cond.true;
$falsebb1:
  assume {:partition} !v7;
  assert {:block_sourceloc} {:sourceloc_num 56} true;
  goto $cond.false;
$truebb2:
  assume {:partition} v8;
  assert {:block_sourceloc} {:sourceloc_num 57} true;
  goto $cond.true.54;
$falsebb2:
  assume {:partition} !v8;
  assert {:block_sourceloc} {:sourceloc_num 58} true;
  goto $cond.false.55;
$truebb3:
  assume {:partition} v9;
  assert {:block_sourceloc} {:sourceloc_num 59} true;
  goto $cond.true.61;
$falsebb3:
  assume {:partition} !v9;
  assert {:block_sourceloc} {:sourceloc_num 60} true;
  goto $cond.false.70;
$truebb4:
  assume {:partition} v10;
  assert {:block_sourceloc} {:sourceloc_num 61} true;
  goto $cond.true.88;
$falsebb4:
  assume {:partition} !v10;
  assert {:block_sourceloc} {:sourceloc_num 62} true;
  goto $cond.false.89;
$truebb5:
  assume {:partition} v11;
  assert {:block_sourceloc} {:sourceloc_num 63} true;
  goto $for.body.97;
$falsebb5:
  assume {:partition} !v11;
  assert {:block_sourceloc} {:sourceloc_num 64} true;
  goto $for.end;
$truebb6:
  assume {:partition} v12;
  assert {:block_sourceloc} {:sourceloc_num 65} true;
  goto $cond.true.101;
$falsebb6:
  assume {:partition} !v12;
  assert {:block_sourceloc} {:sourceloc_num 66} true;
  goto $cond.false.102;
$truebb7:
  assume {:partition} v14;
  assert {:block_sourceloc} {:sourceloc_num 67} true;
  goto $if.then;
$falsebb7:
  assume {:partition} !v14;
  assert {:block_sourceloc} {:sourceloc_num 68} true;
  goto $if.end;
$truebb8:
  assume {:partition} v15;
  assert {:block_sourceloc} {:sourceloc_num 69} true;
  goto $cond.true.126;
$falsebb8:
  assume {:partition} !v15;
  assert {:block_sourceloc} {:sourceloc_num 70} true;
  goto $cond.false.127;
$truebb9:
  assume {:partition} v16;
  assert {:block_sourceloc} {:sourceloc_num 71} true;
  goto $for.body.135;
$falsebb9:
  assume {:partition} !v16;
  assert {:block_sourceloc} {:sourceloc_num 72} true;
  goto $for.end.155;
$truebb10:
  assume {:partition} v18;
  assert {:block_sourceloc} {:sourceloc_num 73} true;
  goto $cond.true.143;
$falsebb10:
  assume {:partition} !v18;
  assert {:block_sourceloc} {:sourceloc_num 74} true;
  goto $cond.false.144;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 32bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_y == 16bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 16bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 16bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_x == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_y == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_z == 0bv32 then 1bv1 else 0bv1) != 0bv1;
