type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP64(x : [bv32]bv64, y : bv32) returns (z : bv64, A : [bv32]bv64);
var {:source_name "data"} {:global} $$data : [bv32]bv64;
axiom {:array_info "$$data"} {:global} {:elem_width 64} {:source_name "data"} {:source_elem_width 64} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$data : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$data : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$data : bool;

var {:source_name "mean"} {:global} $$mean : [bv32]bv64;
axiom {:array_info "$$mean"} {:global} {:elem_width 64} {:source_name "mean"} {:source_elem_width 64} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$mean : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$mean : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$mean : bool;

var {:source_name "stddev"} {:global} $$stddev : [bv32]bv64;
axiom {:array_info "$$stddev"} {:global} {:elem_width 64} {:source_name "stddev"} {:source_elem_width 64} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$stddev : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$stddev : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$stddev : bool;

var {:source_name "private_mean"} $$private_mean : [bv32]bv64;
axiom {:array_info "$$private_mean"} {:elem_width 64} {:source_name "private_mean"} {:source_elem_width 64} {:source_dimensions "1"} true;

var {:source_name "private_stddev"} $$private_stddev : [bv32]bv64;
axiom {:array_info "$$private_stddev"} {:elem_width 64} {:source_name "private_stddev"} {:source_elem_width 64} {:source_dimensions "1"} true;

var {:source_name "shared_data"} {:group_shared} $$kernel2.shared_data : [bv32]bv64;
axiom {:array_info "$$kernel2.shared_data"} {:group_shared} {:elem_width 64} {:source_name "shared_data"} {:source_elem_width 64} {:source_dimensions "32,32"} true;
var {:race_checking} {:group_shared} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*,32"} _READ_HAS_OCCURRED_$$kernel2.shared_data : bool;
var {:race_checking} {:group_shared} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*,32"} _WRITE_HAS_OCCURRED_$$kernel2.shared_data : bool;
var {:race_checking} {:group_shared} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*,32"} _ATOMIC_HAS_OCCURRED_$$kernel2.shared_data : bool;

const _WATCHED_OFFSET : bv32;
const {:global_offset_x} global_offset_x : bv32;
const {:global_offset_y} global_offset_y : bv32;
const {:global_offset_z} global_offset_z : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FADD64(bv64, bv64) : bv64;
function FDIV64(bv64, bv64) : bv64;
function FMUL64(bv64, bv64) : bv64;
function FSUB64(bv64, bv64) : bv64;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvadd"} BV64_ADD(bv64, bv64) : bv64;
function {:bvbuiltin "bvand"} BV32_AND(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV64_MUL(bv64, bv64) : bv64;
function {:bvbuiltin "bvsge"} BV32_SGE(bv32, bv32) : bool;
function {:bvbuiltin "bvsge"} BV64_SGE(bv64, bv64) : bool;
function {:bvbuiltin "bvsle"} BV32_SLE(bv32, bv32) : bool;
function {:bvbuiltin "bvsle"} BV64_SLE(bv64, bv64) : bool;
function {:bvbuiltin "bvslt"} BV64_SLT(bv64, bv64) : bool;
function {:bvbuiltin "bvsrem"} BV64_SREM(bv64, bv64) : bv64;
function {:bvbuiltin "bvsub"} BV64_SUB(bv64, bv64) : bv64;
function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvuge"} BV32_UGE(bv32, bv32) : bool;
function {:bvbuiltin "bvurem"} BV32_UREM(bv32, bv32) : bv32;
function {:bvbuiltin "sign_extend 32"} BV32_SEXT64(bv32) : bv64;
function {:bvbuiltin "zero_extend 31"} BV1_ZEXT32(bv1) : bv32;
function {:bvbuiltin "zero_extend 32"} BV32_ZEXT64(bv32) : bv64;
procedure {:source_name "kernel2"} {:kernel} $kernel2($float_n:bv64, $m:bv32, $n:bv32)
requires {:sourceloc_num 0} (if $m == 512bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 1} (if $n == 1024bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 2} (if BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_SGE($m, 1bv32) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_SLE($m, 2147483647bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_SLE($n, 2147483647bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV32_SEXT64($n), 18446744071562067968bv64) then 1bv1 else 0bv1))) != 0bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:procedure_wide_invariant} {:do_not_predicate} {:sourceloc_num 3} (if (_WRITE_HAS_OCCURRED_$$data ==> BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_UGE($n, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $m), $n), 1bv32)) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $m), $n), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($m, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $m), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $m)), BV32_ZEXT64(local_id_x)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $m))), 1048576bv64) == 0bv64 then 1bv1 else 0bv1))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
requires {:procedure_wide_invariant} {:do_not_predicate} {:sourceloc_num 4} (if (_WRITE_HAS_OCCURRED_$$mean ==> BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 0bv64) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV64_SLE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 1048575bv64) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($m, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $m), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $m), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $m))), 1048576bv64) == 0bv64 then 1bv1 else 0bv1))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
requires {:procedure_wide_invariant} {:do_not_predicate} {:sourceloc_num 5} (if (_WRITE_HAS_OCCURRED_$$stddev ==> BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_SGE($n, 1bv32) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 0bv64) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SLE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 1048575bv64) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($m, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $m), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $m), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $m))), 1048576bv64) == 0bv64 then 1bv1 else 0bv1))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
requires {:procedure_wide_invariant} {:do_not_predicate} {:sourceloc_num 6} (if (_READ_HAS_OCCURRED_$$data ==> BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_UGE($n, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $m), $n), 1bv32)) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $m), $n), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($m, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $m), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $m)), BV32_ZEXT64(local_id_x)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $m))), 1048576bv64) == 0bv64 then 1bv1 else 0bv1))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
requires {:procedure_wide_invariant} {:do_not_predicate} {:sourceloc_num 7} (if (_READ_HAS_OCCURRED_$$mean ==> BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 0bv64) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV64_SLE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 1048575bv64) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($m, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $m), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $m), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $m))), 1048576bv64) == 0bv64 then 1bv1 else 0bv1))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
requires {:procedure_wide_invariant} {:do_not_predicate} {:sourceloc_num 8} (if (_READ_HAS_OCCURRED_$$stddev ==> BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_SGE($n, 1bv32) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 0bv64) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SLE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 1048575bv64) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($m, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $m), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $m), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $m))), 1048576bv64) == 0bv64 then 1bv1 else 0bv1))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
{
  var $c0.0:bv64;
  var $c1.0:bv64;
  var $c2.0:bv64;
  var $cond:bv64;
  var $c3.0:bv64;
  var $cond90:bv64;
  var $c2125.0:bv64;
  var $cond138:bv64;
  var v0:bv64;
  var v2:bv64;
  var v3:bool;
  var v1:bv32;
  var v7:bv64;
  var v5:bv64;
  var v12:bv64;
  var v9:bool;
  var v8:bool;
  var v6:bool;
  var v4:bool;
  var v10:bool;
  var v11:bool;
  var v29:bv64;
  var v23:bv64;
  var v25:bv64;
  var v22:bv64;
  var v32:bv64;
  var v36:bv64;
  var v34:bv64;
  var v15:bv64;
  var v18:bv64;
  var v19:bv64;
  var v21:bv64;
  var v20:bv64;
  var v13:bool;
  var v14:bool;
  var v16:bool;
  var v17:bool;
  var v27:bool;
  var v26:bool;
  var v24:bv32;
  var v28:bool;
  var v33:bool;
  var v31:bool;
  var v30:bool;
  var v35:bool;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  v0 := BV32_ZEXT64(group_id_x);
  v1 := local_id_x;
  v2 := BV32_ZEXT64(v1);
  $c0.0 := BV64_MUL(32bv64, v0);
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  v3 := BV64_SLT($c0.0, BV32_SEXT64($m));
  goto $truebb, $falsebb;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  v4 := BV64_SGE(BV32_SEXT64($m), BV64_ADD(BV64_ADD(v2, $c0.0), 1bv64));
  goto $truebb0, $falsebb0;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  assert {:sourceloc} {:sourceloc_num 13} true;
  v5 := $$mean[BV64_ADD(v2, $c0.0)[32:0]];
  assert {:sourceloc} {:sourceloc_num 14} true;
  $$private_mean[0bv32] := v5;
  v6 := BV32_SGE($n, 1bv32);
  goto $truebb1, $falsebb1;
$if.then.26:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  assert {:sourceloc} {:sourceloc_num 16} true;
  v7 := $$stddev[BV64_ADD(v2, $c0.0)[32:0]];
  assert {:sourceloc} {:sourceloc_num 17} true;
  $$private_stddev[0bv32] := v7;
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  goto $if.end.31;
$if.end.31:
  assert {:block_sourceloc} {:sourceloc_num 19} true;
  $c1.0 := 0bv64;
  goto $for.cond.32;
$for.cond.32:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  v8 := BV64_SLT($c1.0, BV32_SEXT64($n));
  goto $truebb2, $falsebb2;
$for.body.36:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  v9 := BV64_SGE(BV32_SEXT64($m), BV64_ADD(BV64_ADD(v2, $c0.0), 1bv64));
  goto $truebb3, $falsebb3;
$if.then.42:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  $c2.0 := 0bv64;
  goto $for.cond.43;
$for.cond.43:
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  v10 := BV64_SLT(31bv64, BV64_SUB(BV64_SUB(BV32_SEXT64($n), $c1.0), 1bv64));
  goto $truebb4, $falsebb4;
$cond.true:
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  $cond := 31bv64;
  goto $cond.end;
$cond.false:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  $cond := BV64_SUB(BV64_SUB(BV32_SEXT64($n), $c1.0), 1bv64);
  goto $cond.end;
$cond.end:
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  v11 := BV64_SLE($c2.0, $cond);
  goto $truebb5, $falsebb5;
$for.body.53:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  assert {:sourceloc} {:sourceloc_num 28} true;
  v12 := $$data[BV64_ADD(BV64_MUL(BV64_ADD($c1.0, $c2.0), BV32_SEXT64($m)), BV64_ADD(v2, $c0.0))[32:0]];
  assert {:sourceloc} {:sourceloc_num 29} true;
  $$kernel2.shared_data[BV32_ADD(BV32_MUL($c2.0[32:0], 32bv32), v1)] := v12;
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  $c2.0 := BV64_ADD($c2.0, 1bv64);
  goto $for.cond.43;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  goto $if.end.66;
$if.end.66:
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  call {:sourceloc_num 33} $bugle_barrier(1bv1, 1bv1);
  v13 := BV64_SGE(BV32_SEXT64($m), BV64_ADD(BV64_ADD(v2, $c0.0), 1bv64));
  goto $truebb6, $falsebb6;
$if.then.72:
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  v14 := $c1.0 == 0bv64;
  goto $truebb7, $falsebb7;
$if.then.75:
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  assert {:sourceloc} {:sourceloc_num 36} true;
  v15 := $$private_mean[0bv32];
  assert {:sourceloc} {:sourceloc_num 37} true;
  $$private_mean[0bv32] := FDIV64(v15, $float_n);
  goto $if.end.77;
$if.end.77:
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  $c3.0 := 0bv64;
  goto $for.cond.78;
$for.cond.78:
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  v16 := BV64_SLT(31bv64, BV64_SUB(BV64_SUB(BV32_SEXT64($n), $c1.0), 1bv64));
  goto $truebb8, $falsebb8;
$cond.true.84:
  assert {:block_sourceloc} {:sourceloc_num 40} true;
  $cond90 := 31bv64;
  goto $cond.end.89;
$cond.false.85:
  assert {:block_sourceloc} {:sourceloc_num 41} true;
  $cond90 := BV64_SUB(BV64_SUB(BV32_SEXT64($n), $c1.0), 1bv64);
  goto $cond.end.89;
$cond.end.89:
  assert {:block_sourceloc} {:sourceloc_num 42} true;
  v17 := BV64_SLE($c3.0, $cond90);
  goto $truebb9, $falsebb9;
$for.body.93:
  assert {:block_sourceloc} {:sourceloc_num 43} true;
  assert {:sourceloc} {:sourceloc_num 44} true;
  v18 := $$kernel2.shared_data[BV32_ADD(BV32_MUL($c3.0[32:0], 32bv32), v1)];
  assert {:sourceloc} {:sourceloc_num 45} true;
  v19 := $$private_mean[0bv32];
  assert {:sourceloc} {:sourceloc_num 46} true;
  v20 := $$kernel2.shared_data[BV32_ADD(BV32_MUL($c3.0[32:0], 32bv32), v1)];
  assert {:sourceloc} {:sourceloc_num 47} true;
  v21 := $$private_mean[0bv32];
  assert {:sourceloc} {:sourceloc_num 48} true;
  v22 := $$private_stddev[0bv32];
  assert {:sourceloc} {:sourceloc_num 49} true;
  $$private_stddev[0bv32] := FADD64(v22, FMUL64(FSUB64(v18, v19), FSUB64(v20, v21)));
  assert {:sourceloc} {:sourceloc_num 50} true;
  v23 := $$private_mean[0bv32];
  v24 := $c3.0[32:0];
  assert {:sourceloc} {:sourceloc_num 51} true;
  v25 := $$kernel2.shared_data[BV32_ADD(BV32_MUL(v24, 32bv32), v1)];
  assert {:sourceloc} {:sourceloc_num 52} true;
  $$kernel2.shared_data[BV32_ADD(BV32_MUL(v24, 32bv32), v1)] := FSUB64(v25, v23);
  goto $for.inc.115;
$for.inc.115:
  assert {:block_sourceloc} {:sourceloc_num 53} true;
  $c3.0 := BV64_ADD($c3.0, 1bv64);
  goto $for.cond.78;
$for.end.117:
  assert {:block_sourceloc} {:sourceloc_num 54} true;
  goto $if.end.118;
$if.end.118:
  assert {:block_sourceloc} {:sourceloc_num 55} true;
  call {:sourceloc_num 56} $bugle_barrier(1bv1, 1bv1);
  v26 := BV64_SGE(BV32_SEXT64($m), BV64_ADD(BV64_ADD(v2, $c0.0), 1bv64));
  goto $truebb10, $falsebb10;
$if.then.124:
  assert {:block_sourceloc} {:sourceloc_num 57} true;
  $c2125.0 := 0bv64;
  goto $for.cond.126;
$for.cond.126:
  assert {:block_sourceloc} {:sourceloc_num 58} true;
  v27 := BV64_SLT(31bv64, BV64_SUB(BV64_SUB(BV32_SEXT64($n), $c1.0), 1bv64));
  goto $truebb11, $falsebb11;
$cond.true.132:
  assert {:block_sourceloc} {:sourceloc_num 59} true;
  $cond138 := 31bv64;
  goto $cond.end.137;
$cond.false.133:
  assert {:block_sourceloc} {:sourceloc_num 60} true;
  $cond138 := BV64_SUB(BV64_SUB(BV32_SEXT64($n), $c1.0), 1bv64);
  goto $cond.end.137;
$cond.end.137:
  assert {:block_sourceloc} {:sourceloc_num 61} true;
  v28 := BV64_SLE($c2125.0, $cond138);
  goto $truebb12, $falsebb12;
$for.body.141:
  assert {:block_sourceloc} {:sourceloc_num 62} true;
  assert {:sourceloc} {:sourceloc_num 63} true;
  v29 := $$kernel2.shared_data[BV32_ADD(BV32_MUL($c2125.0[32:0], 32bv32), v1)];
  assert {:sourceloc} {:sourceloc_num 64} true;
  $$data[BV64_ADD(BV64_MUL(BV64_ADD($c1.0, $c2125.0), BV32_SEXT64($m)), BV64_ADD(v2, $c0.0))[32:0]] := v29;
  goto $for.inc.153;
$for.inc.153:
  assert {:block_sourceloc} {:sourceloc_num 65} true;
  $c2125.0 := BV64_ADD($c2125.0, 1bv64);
  goto $for.cond.126;
$for.end.155:
  assert {:block_sourceloc} {:sourceloc_num 66} true;
  goto $if.end.156;
$if.end.156:
  assert {:block_sourceloc} {:sourceloc_num 67} true;
  goto $for.inc.157;
$for.inc.157:
  assert {:block_sourceloc} {:sourceloc_num 68} true;
  $c1.0 := BV64_ADD($c1.0, 32bv64);
  goto $for.cond.32;
$for.end.159:
  assert {:block_sourceloc} {:sourceloc_num 69} true;
  v30 := BV32_SLE($n, 0bv32);
  goto $truebb13, $falsebb13;
$if.then.162:
  assert {:block_sourceloc} {:sourceloc_num 70} true;
  call {:sourceloc_num 71} $bugle_barrier(1bv1, 1bv1);
  v31 := BV64_SGE(BV32_SEXT64($m), BV64_ADD(BV64_ADD(v2, $c0.0), 1bv64));
  goto $truebb14, $falsebb14;
$if.then.168:
  assert {:block_sourceloc} {:sourceloc_num 72} true;
  assert {:sourceloc} {:sourceloc_num 73} true;
  v32 := $$private_mean[0bv32];
  assert {:sourceloc} {:sourceloc_num 74} true;
  $$private_mean[0bv32] := FDIV64(v32, $float_n);
  goto $if.end.171;
$if.end.171:
  assert {:block_sourceloc} {:sourceloc_num 75} true;
  call {:sourceloc_num 76} $bugle_barrier(1bv1, 1bv1);
  goto $if.end.183;
$if.else:
  assert {:block_sourceloc} {:sourceloc_num 77} true;
  v33 := BV64_SGE(BV32_SEXT64($m), BV64_ADD(BV64_ADD(v2, $c0.0), 1bv64));
  goto $truebb15, $falsebb15;
$if.then.177:
  assert {:block_sourceloc} {:sourceloc_num 78} true;
  assert {:sourceloc} {:sourceloc_num 79} true;
  v34 := $$private_stddev[0bv32];
  assert {:sourceloc} {:sourceloc_num 80} true;
  $$stddev[BV64_ADD(v2, $c0.0)[32:0]] := v34;
  goto $if.end.182;
$if.end.182:
  assert {:block_sourceloc} true;
  goto $if.end.183;
$if.end.183:
  assert {:block_sourceloc} {:sourceloc_num 81} true;
  v35 := BV64_SGE(BV32_SEXT64($m), BV64_ADD(BV64_ADD(v2, $c0.0), 1bv64));
  goto $truebb16, $falsebb16;
$if.then.189:
  assert {:block_sourceloc} {:sourceloc_num 82} true;
  assert {:sourceloc} {:sourceloc_num 83} true;
  v36 := $$private_mean[0bv32];
  assert {:sourceloc} {:sourceloc_num 84} true;
  $$mean[BV64_ADD(v2, $c0.0)[32:0]] := v36;
  goto $if.end.194;
$if.end.194:
  assert {:block_sourceloc} {:sourceloc_num 85} true;
  call {:sourceloc_num 86} $bugle_barrier(1bv1, 1bv1);
  goto $for.inc.195;
$for.inc.195:
  assert {:block_sourceloc} {:sourceloc_num 87} true;
  $c0.0 := BV64_ADD($c0.0, 1048576bv64);
  goto $for.cond;
$for.end.197:
  assert {:block_sourceloc} {:sourceloc_num 88} true;
  return;
$truebb:
  assume {:partition} v3;
  assert {:block_sourceloc} {:sourceloc_num 89} true;
  goto $for.body;
$falsebb:
  assume {:partition} !v3;
  assert {:block_sourceloc} {:sourceloc_num 90} true;
  goto $for.end.197;
$truebb0:
  assume {:partition} v4;
  assert {:block_sourceloc} {:sourceloc_num 91} true;
  goto $if.then;
$falsebb0:
  assume {:partition} !v4;
  assert {:block_sourceloc} {:sourceloc_num 92} true;
  goto $if.end.31;
$truebb1:
  assume {:partition} v6;
  assert {:block_sourceloc} {:sourceloc_num 93} true;
  goto $if.then.26;
$falsebb1:
  assume {:partition} !v6;
  assert {:block_sourceloc} {:sourceloc_num 94} true;
  goto $if.end;
$truebb2:
  assume {:partition} v8;
  assert {:block_sourceloc} {:sourceloc_num 95} true;
  goto $for.body.36;
$falsebb2:
  assume {:partition} !v8;
  assert {:block_sourceloc} {:sourceloc_num 96} true;
  goto $for.end.159;
$truebb3:
  assume {:partition} v9;
  assert {:block_sourceloc} {:sourceloc_num 97} true;
  goto $if.then.42;
$falsebb3:
  assume {:partition} !v9;
  assert {:block_sourceloc} {:sourceloc_num 98} true;
  goto $if.end.66;
$truebb4:
  assume {:partition} v10;
  assert {:block_sourceloc} {:sourceloc_num 99} true;
  goto $cond.true;
$falsebb4:
  assume {:partition} !v10;
  assert {:block_sourceloc} {:sourceloc_num 100} true;
  goto $cond.false;
$truebb5:
  assume {:partition} v11;
  assert {:block_sourceloc} {:sourceloc_num 101} true;
  goto $for.body.53;
$falsebb5:
  assume {:partition} !v11;
  assert {:block_sourceloc} {:sourceloc_num 102} true;
  goto $for.end;
$truebb6:
  assume {:partition} v13;
  assert {:block_sourceloc} {:sourceloc_num 103} true;
  goto $if.then.72;
$falsebb6:
  assume {:partition} !v13;
  assert {:block_sourceloc} {:sourceloc_num 104} true;
  goto $if.end.118;
$truebb7:
  assume {:partition} v14;
  assert {:block_sourceloc} {:sourceloc_num 105} true;
  goto $if.then.75;
$falsebb7:
  assume {:partition} !v14;
  assert {:block_sourceloc} {:sourceloc_num 106} true;
  goto $if.end.77;
$truebb8:
  assume {:partition} v16;
  assert {:block_sourceloc} {:sourceloc_num 107} true;
  goto $cond.true.84;
$falsebb8:
  assume {:partition} !v16;
  assert {:block_sourceloc} {:sourceloc_num 108} true;
  goto $cond.false.85;
$truebb9:
  assume {:partition} v17;
  assert {:block_sourceloc} {:sourceloc_num 109} true;
  goto $for.body.93;
$falsebb9:
  assume {:partition} !v17;
  assert {:block_sourceloc} {:sourceloc_num 110} true;
  goto $for.end.117;
$truebb10:
  assume {:partition} v26;
  assert {:block_sourceloc} {:sourceloc_num 111} true;
  goto $if.then.124;
$falsebb10:
  assume {:partition} !v26;
  assert {:block_sourceloc} {:sourceloc_num 112} true;
  goto $if.end.156;
$truebb11:
  assume {:partition} v27;
  assert {:block_sourceloc} {:sourceloc_num 113} true;
  goto $cond.true.132;
$falsebb11:
  assume {:partition} !v27;
  assert {:block_sourceloc} {:sourceloc_num 114} true;
  goto $cond.false.133;
$truebb12:
  assume {:partition} v28;
  assert {:block_sourceloc} {:sourceloc_num 115} true;
  goto $for.body.141;
$falsebb12:
  assume {:partition} !v28;
  assert {:block_sourceloc} {:sourceloc_num 116} true;
  goto $for.end.155;
$truebb13:
  assume {:partition} v30;
  assert {:block_sourceloc} {:sourceloc_num 117} true;
  goto $if.then.162;
$falsebb13:
  assume {:partition} !v30;
  assert {:block_sourceloc} {:sourceloc_num 118} true;
  goto $if.else;
$truebb14:
  assume {:partition} v31;
  assert {:block_sourceloc} {:sourceloc_num 119} true;
  goto $if.then.168;
$falsebb14:
  assume {:partition} !v31;
  assert {:block_sourceloc} {:sourceloc_num 120} true;
  goto $if.end.171;
$truebb15:
  assume {:partition} v33;
  assert {:block_sourceloc} {:sourceloc_num 121} true;
  goto $if.then.177;
$falsebb15:
  assume {:partition} !v33;
  assert {:block_sourceloc} {:sourceloc_num 122} true;
  goto $if.end.182;
$truebb16:
  assume {:partition} v35;
  assert {:block_sourceloc} {:sourceloc_num 123} true;
  goto $if.then.189;
$falsebb16:
  assume {:partition} !v35;
  assert {:block_sourceloc} {:sourceloc_num 124} true;
  goto $if.end.194;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 32bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 16bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_x == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_y == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_z == 0bv32 then 1bv1 else 0bv1) != 0bv1;
