type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP64(x : [bv32]bv64, y : bv32) returns (z : bv64, A : [bv32]bv64);
var {:source_name "stddev"} {:global} $$stddev : [bv32]bv64;
axiom {:array_info "$$stddev"} {:global} {:elem_width 64} {:source_name "stddev"} {:source_elem_width 64} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$stddev : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$stddev : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$stddev : bool;

var {:source_name "private_stddev"} $$private_stddev : [bv32]bv64;
axiom {:array_info "$$private_stddev"} {:elem_width 64} {:source_name "private_stddev"} {:source_elem_width 64} {:source_dimensions "1"} true;

const _WATCHED_OFFSET : bv32;
const {:global_offset_x} global_offset_x : bv32;
const {:global_offset_y} global_offset_y : bv32;
const {:global_offset_z} global_offset_z : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FEQ64(bv64, bv64) : bool;
function FLT64(bv64, bv64) : bool;
function FSQRT64(bv64) : bv64;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvadd"} BV64_ADD(bv64, bv64) : bv64;
function {:bvbuiltin "bvand"} BV32_AND(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV64_MUL(bv64, bv64) : bv64;
function {:bvbuiltin "bvsge"} BV32_SGE(bv32, bv32) : bool;
function {:bvbuiltin "bvsge"} BV64_SGE(bv64, bv64) : bool;
function {:bvbuiltin "bvsle"} BV32_SLE(bv32, bv32) : bool;
function {:bvbuiltin "bvsle"} BV64_SLE(bv64, bv64) : bool;
function {:bvbuiltin "bvslt"} BV64_SLT(bv64, bv64) : bool;
function {:bvbuiltin "bvsrem"} BV64_SREM(bv64, bv64) : bv64;
function {:bvbuiltin "bvsub"} BV64_SUB(bv64, bv64) : bv64;
function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvuge"} BV32_UGE(bv32, bv32) : bool;
function {:bvbuiltin "bvurem"} BV32_UREM(bv32, bv32) : bv32;
function {:bvbuiltin "sign_extend 32"} BV32_SEXT64(bv32) : bv64;
function {:bvbuiltin "zero_extend 31"} BV1_ZEXT32(bv1) : bv32;
function {:bvbuiltin "zero_extend 32"} BV32_ZEXT64(bv32) : bv64;
procedure {:source_name "kernel4"} {:kernel} $kernel4($eps:bv64, $m:bv32, $n:bv32)
requires {:sourceloc_num 0} (if $m == 512bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 1} (if $n == 1024bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 2} (if BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_SGE($m, 1bv32) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_SLE($m, 2147483647bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_SLE($n, 2147483647bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV32_SEXT64($n), 18446744071562067968bv64) then 1bv1 else 0bv1))) != 0bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:procedure_wide_invariant} {:do_not_predicate} {:sourceloc_num 3} (if (_WRITE_HAS_OCCURRED_$$stddev ==> BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 0bv64) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV64_SLE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 1048575bv64) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($m, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $m), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $m), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $m))), 1048576bv64) == 0bv64 then 1bv1 else 0bv1))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
requires {:procedure_wide_invariant} {:do_not_predicate} {:sourceloc_num 4} (if (_READ_HAS_OCCURRED_$$stddev ==> BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 0bv64) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV64_SLE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 1048575bv64) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($m, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $m), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $m), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $m))), 1048576bv64) == 0bv64 then 1bv1 else 0bv1))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
{
  var $c0.0:bv64;
  var $cond:bv64;
  var v4:bv64;
  var v5:bv64;
  var v6:bv64;
  var v2:bool;
  var v1:bv64;
  var v0:bv64;
  var v3:bool;
  var v7:bool;
  var v8:bv64;
  var v9:bv64;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  v0 := BV32_ZEXT64(group_id_x);
  v1 := BV32_ZEXT64(local_id_x);
  $c0.0 := BV64_MUL(32bv64, v0);
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  v2 := BV64_SLT($c0.0, BV32_SEXT64($m));
  goto $truebb, $falsebb;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  v3 := BV64_SGE(BV32_SEXT64($m), BV64_ADD(BV64_ADD(v1, $c0.0), 1bv64));
  goto $truebb0, $falsebb0;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  assert {:sourceloc} {:sourceloc_num 9} true;
  v4 := $$stddev[BV64_ADD(v1, $c0.0)[32:0]];
  assert {:sourceloc} {:sourceloc_num 10} true;
  $$private_stddev[0bv32] := v4;
  assert {:sourceloc} {:sourceloc_num 11} true;
  v5 := $$private_stddev[0bv32];
  assert {:sourceloc} {:sourceloc_num 12} true;
  $$private_stddev[0bv32] := FSQRT64(v5);
  assert {:sourceloc} {:sourceloc_num 13} true;
  v6 := $$private_stddev[0bv32];
  v7 := FEQ64(v6, $eps) || FLT64(v6, $eps);
  goto $truebb1, $falsebb1;
$cond.true:
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  $cond := 4607182418800017408bv64;
  goto $cond.end;
$cond.false:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  assert {:sourceloc} {:sourceloc_num 16} true;
  v8 := $$private_stddev[0bv32];
  $cond := v8;
  goto $cond.end;
$cond.end:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  assert {:sourceloc} {:sourceloc_num 18} true;
  $$private_stddev[0bv32] := $cond;
  assert {:sourceloc} {:sourceloc_num 19} true;
  v9 := $$private_stddev[0bv32];
  assert {:sourceloc} {:sourceloc_num 20} true;
  $$stddev[BV64_ADD(v1, $c0.0)[32:0]] := v9;
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  $c0.0 := BV64_ADD($c0.0, 1048576bv64);
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  return;
$truebb:
  assume {:partition} v2;
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  goto $for.body;
$falsebb:
  assume {:partition} !v2;
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  goto $for.end;
$truebb0:
  assume {:partition} v3;
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  goto $if.then;
$falsebb0:
  assume {:partition} !v3;
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  goto $if.end;
$truebb1:
  assume {:partition} v7;
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  goto $cond.true;
$falsebb1:
  assume {:partition} !v7;
  assert {:block_sourceloc} {:sourceloc_num 29} true;
  goto $cond.false;
}
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 32bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 16bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_x == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_y == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_z == 0bv32 then 1bv1 else 0bv1) != 0bv1;
